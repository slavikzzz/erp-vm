
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
		
		ПоОбособленномуПодразделению = Ложь;
		Если ПараметрыАвтоформирования.Свойство("ПоОбособленномуПодразделению") Тогда
			ПоОбособленномуПодразделению = ПараметрыАвтоформирования.ПоОбособленномуПодразделению;
		КонецЕсли;
		
		ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
		ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов"); 
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", СтруктураСтраницОтчета(ИмяФормы, ПоОбособленномуПодразделению));
		
		СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, ПоОбособленномуПодразделению);
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		
		ИнициализироватьОбычныеРазделы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов, СтруктураДанныхРазделов);
		
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация              = ПараметрыАвтоформирования.Организация;
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента             = ?(КорректирующийОтчет, 1, 0);
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;  
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность           = ?(ПараметрыАвтоформирования.Свойство("Периодичность"), 
			ПараметрыАвтоформирования.Периодичность, Перечисления.Периодичность.Квартал);
		
		РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
		РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
		РазделыОтчета.Титульный.ДатаПодписи        = ДанныеРеглОтчета.ДатаПодписи; 
		Если ПоОбособленномуПодразделению Тогда
			Если ЗначениеЗаполнено(ПараметрыАвтоформирования.КППЗакрытогоПодразделения) Тогда
				РазделыОтчета.Титульный.ПоМесту = "223";
			Иначе
				РазделыОтчета.Титульный.ПоМесту = "220";
			КонецЕсли;
		Иначе
			РазделыОтчета.Титульный.ПоМесту = СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПоМесту);
		КонецЕсли;
		
		ЗаполнитьСведенияОбОрганизации(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, ДанныеРеглОтчета.ДатаПодписи,
			РазделыОтчета.Титульный);
		
		Если ПоОбособленномуПодразделению Тогда
			Если ЗначениеЗаполнено(ПараметрыАвтоформирования.КППЗакрытогоПодразделения) Тогда
				РазделыОтчета.Титульный.КППРеорганизованнойОрганизации = ПараметрыАвтоформирования.КППЗакрытогоПодразделения;
				РазделыОтчета.Титульный.ИННРеорганизованнойОрганизации = РазделыОтчета.Титульный.ИНН;
				РазделыОтчета.Титульный.КодФормыРеорганизации = "9";
			Иначе
				РазделыОтчета.Титульный.НалоговыйОрган = ПараметрыАвтоформирования.КодКонтролирующегоОргана;
				РазделыОтчета.Титульный.КПП = ПараметрыАвтоформирования.КПП;
				РазделыОтчета.Титульный.НаимОрг = РегламентированнаяОтчетность.ПоказательОтчета(
					ПараметрыАвтоформирования.ДанныеОсновнойДекларации, "П000250000600");
			КонецЕсли;
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов = ПараметрыАвтоформирования.КодПоОКТМО; 
			ЗаполнитьСведенияОПодписантах(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, РазделыОтчета.Титульный, ДанныеРеглОтчета.ДатаПодписи)
		КонецЕсли;
			
		ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета);
		
		ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		ПоказатьПериод(ИмяФормы, РазделыОтчета.Титульный, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		ЗаполнитьРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета, ДанныеРеглОтчета);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
		ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
		ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
		ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
		ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
		ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
		ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
		ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
		ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
		ПараметрыЗаписи.Вставить("Периодичность", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность);
		ПараметрыЗаписи.Вставить("Комментарий", "");
		ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
		ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
		ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
		ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
		ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
		ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
		ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
		ПараметрыЗаписи.Вставить("СохранятьРасшифровку", Истина);
		ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДанныеРеглОтчета.ДеревоСтраницОтчета);
		ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
		ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
		ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
		ПараметрыЗаписи.Вставить("ОКТМОДляРазделов", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов);
		ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
		
	Иначе
		
		ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, "1", "0"));
		
		ЗаполнитьРеглОтчет_2016Кв4(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет, РазделыОтчета,
			ДанныеРеглОтчета);
		
		РазделыОтчета.Титульный.Данные.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
		РазделыОтчета.Титульный.Данные.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
		
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;
		ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность           = Перечисления.Периодичность.Квартал;
		
		ДанныеРеглОтчета.Вставить("СтруктураВариантыЗаполнения", Новый Структура);
		СформироватьВариантыЗаполнения(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы,
			ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
		
		ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		РазделыОтчета.Титульный.Данные.Вставить("ПоМесту",
		СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПоМесту));
		
		ПоказатьПериод(ИмяФормы, РазделыОтчета.Титульный.Данные, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		
		ЗаполнитьСведенияОбОрганизации_2016Кв4(ИмяФормы, РазделыОтчета.Титульный.Данные,
			ДанныеРеглОтчета.СтруктураРеквизитовФормы, ДанныеРеглОтчета.ДатаПодписи);
		
		ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета);
		
		ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы);
		
		ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
		ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
		ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
		ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
		ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
		ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
		ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
		ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
		ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
		ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
		ПараметрыЗаписи.Вставить("Периодичность", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мПериодичность);
		ПараметрыЗаписи.Вставить("Комментарий", "");
		ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.Данные.КодИМНС);
		ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.Данные.КПП1);
		ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
		ПараметрыЗаписи.Вставить("СтруктураВариантыЗаполнения", ДанныеРеглОтчета.СтруктураВариантыЗаполнения);
		ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
		ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
		ПараметрыЗаписи.Вставить("ФлажокОтклАвтоРасчет", Ложь);
		ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
		ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
		ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
		ПараметрыЗаписи.Вставить("СохранятьРасшифровку", Ложь);
		ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
		ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
		ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
		ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
		ПараметрыЗаписи.Вставить("ОКТМОДляРазделов", ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов);
		
	КонецЕсли;
	
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);

	Иначе
		
		// Автоматическое формирование декларации по налогу на прибыль для обособленного подразделения
		Если ПараметрыАвтоформирования.Свойство("ПоОбособленномуПодразделению") И ПараметрыАвтоформирования.ПоОбособленномуПодразделению
			И ПараметрыАвтоформирования.Свойство("ДанныеОсновнойДекларации") Тогда
			
			ДеревоДанных = ПолучитьИзВременногоХранилища(ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
			ДанныеПоОбособленномуПодразделению = ДеревоДанных.Строки[0].Строки[4].Строки[0].Данные;
			ЗаполнитьЗначенияСвойств(ДанныеПоОбособленномуПодразделению, ПараметрыАвтоформирования.ДанныеОсновнойДекларации);
			
			ДанныеРеглОтчета.Вставить("СоответствиеЕдиницыИзмеренияДелителю", Новый Структура);
			ДанныеРеглОтчета.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
			ДанныеРеглОтчета.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
			ДанныеРеглОтчета.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			ДанныеРеглОтчета.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			ОбработатьЗагруженныеДанные(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, РазделыОтчета.Титульный);
			ИзменитьОКТМОРазделов(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, РазделыОтчета.Титульный);
			СформироватьРаздел1_2(ИмяФормы, ДанныеРеглОтчета, РазделыОтчета.Титульный);
			СформироватьРаздел1_1(ИмяФормы, ДанныеРеглОтчета, РазделыОтчета.Титульный);
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьРасшифровкуПоОбособленномуПодразделению(
				ПараметрыАвтоформирования, ДанныеРеглОтчета);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ОКТМО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = НаименованиеОрганизации;
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = ТелОрганизации;
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			СтруктураДанныхТитульный.НаимОрг = НаименованиеОрганизации;
			СтруктураДанныхТитульный.ТелОрганизации = ТелОрганизации;
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = СведенияОбОрганизации.ОКТМО;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(НаименованиеОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи);
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		// Идентификаторы многострочных групп.
		СтруктураРеквизитовФормы.мИдГруппыР11М1   = "П00011М1";
		СтруктураРеквизитовФормы.мИдГруппыР12М1   = "П00012М1";
		СтруктураРеквизитовФормы.мИдГруппыР13М1   = "П00013М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ024М1  = "П00024М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1 = "П0027АМ1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2 = "П0027АМ2";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3 = "П0027АМ3";
		СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1 = "П0027ГМ1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2 = "П0027ГМ2";
		СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1 = "П0027ДМ1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2 = "П0027ДМ2";
		СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1  = "П0003ВМ1";
		СтруктураРеквизитовФормы.мИдГруппыЛ07М1   = "П00007М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ08М1   = "П00008М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ08М2   = "П00008М2";
		СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1 = "П009П1М1";
		СтруктураРеквизитовФормы.мИдГруппыП1М1    = "П000П1М1";
		СтруктураРеквизитовФормы.мИдГруппыП2М1    = "П000П2М1";
		
		// Группа П00011М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00011М101003");
		ИменаГраф.Добавить("П00011М103003");
		ИменаГраф.Добавить("П00011М104003");
		ИменаГраф.Добавить("П00011М105003");
		ИменаГраф.Добавить("П00011М105603");
		ИменаГраф.Добавить("П00011М106003");
		ИменаГраф.Добавить("П00011М107003");
		ИменаГраф.Добавить("П00011М108003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР11М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00012М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00012М100103");
		ИменаГраф.Добавить("П00012М101003");
		ИменаГраф.Добавить("П00012М111003");
		ИменаГраф.Добавить("П00012М112003");
		ИменаГраф.Добавить("П00012М113003");
		ИменаГраф.Добавить("П00012М114003");
		ИменаГраф.Добавить("П00012М120603");
		ИменаГраф.Добавить("П00012М121003");
		ИменаГраф.Добавить("П00012М122003");
		ИменаГраф.Добавить("П00012М123003");
		ИменаГраф.Добавить("П00012М124003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР12М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00013М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00013М102003");
		ИменаГраф.Добавить("П00013М103003");
		ИменаГраф.Добавить("П00013М104003");
		ИменаГраф.Добавить("П00013М105003");
		ИменаГраф.Добавить("П00013М106003");
		ИменаГраф.Добавить("П00013М107003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР13М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00024М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00024М100001");
		ИменаГраф.Добавить("П00024М100002");
		ИменаГраф.Добавить("П00024М100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ024М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027АМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ100001");
		ИменаГраф.Добавить("П0027АМ100002");
		ИменаГраф.Добавить("П0027АМ100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027АМ2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ200001");
		ИменаГраф.Добавить("П0027АМ200002");
		ИменаГраф.Добавить("П0027АМ200003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027АМ3.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ300001");
		ИменаГраф.Добавить("П0027АМ300002");
		ИменаГраф.Добавить("П0027АМ300003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027ГМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027ГМ100001");
		ИменаГраф.Добавить("П0027ГМ100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027ГМ2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027ГМ200001");
		ИменаГраф.Добавить("П0027ГМ200003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027ДМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027ДМ100001");
		ИменаГраф.Добавить("П0027ДМ100002");
		ИменаГраф.Добавить("П0027ДМ100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027ДМ2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027ДМ200001");
		ИменаГраф.Добавить("П0027ДМ200002");
		ИменаГраф.Добавить("П0027ДМ200003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0003ВМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0003ВМ100503");
		ИменаГраф.Добавить("П0003ВМ100505");
		ИменаГраф.Добавить("П0003ВМ101003");
		ИменаГраф.Добавить("П0003ВМ104003");
		ИменаГраф.Добавить("П0003ВМ105003");
		ИменаГраф.Добавить("П0003ВМ106003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00007М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00007М100001");
		ИменаГраф.Добавить("П00007М100002");
		ИменаГраф.Добавить("П00007М100003");
		ИменаГраф.Добавить("П00007М100004");
		ИменаГраф.Добавить("П00007М100005");
		ИменаГраф.Добавить("П00007М100006");
		ИменаГраф.Добавить("П00007М100007");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ07М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00008М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00008М100001");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ08М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00008М2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00008М200001");
		ИменаГраф.Добавить("П00008М200002");
		ИменаГраф.Добавить("П00008М200003");
		ИменаГраф.Добавить("П00008М200004");
		ИменаГраф.Добавить("П00008М200005");
		ИменаГраф.Добавить("П00008М200006");
		ИменаГраф.Добавить("П00008М200007");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ08М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П009П1М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П009П1М100100");
		ИменаГраф.Добавить("П009П1М101003");
		ИменаГраф.Добавить("П009П1М102003");
		ИменаГраф.Добавить("П009П1М103001");
		ИменаГраф.Добавить("П009П1М103003");
		ИменаГраф.Добавить("П009П1М104001");
		ИменаГраф.Добавить("П009П1М104003");
		ИменаГраф.Добавить("П009П1М105001");
		ИменаГраф.Добавить("П009П1М105003");
		ИменаГраф.Добавить("П009П1М106001");
		ИменаГраф.Добавить("П009П1М106003");
		ИменаГраф.Добавить("П009П1М107001");
		ИменаГраф.Добавить("П009П1М107003");
		ИменаГраф.Добавить("П009П1М108001");
		ИменаГраф.Добавить("П009П1М108003");
		ИменаГраф.Добавить("П009П1М109001");
		ИменаГраф.Добавить("П009П1М109003");
		ИменаГраф.Добавить("П009П1М110001");
		ИменаГраф.Добавить("П009П1М110003");
		ИменаГраф.Добавить("П009П1М111001");
		ИменаГраф.Добавить("П009П1М111003");
		ИменаГраф.Добавить("П009П1М112001");
		ИменаГраф.Добавить("П009П1М112003");
		ИменаГраф.Добавить("П009П1М113003");
		ИменаГраф.Добавить("П009П1М114003");
		ИменаГраф.Добавить("П009П1М115003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П000П1М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П000П1М100001");
		ИменаГраф.Добавить("П000П1М100002");
		ИменаГраф.Добавить("П000П1М100003");
		ИменаГраф.Добавить("П000П1М100004");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П000П2М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П000П2М100000");
		ИменаГраф.Добавить("П000П2М100100");
		ИменаГраф.Добавить("П000П2М100200");
		ИменаГраф.Добавить("П000П2М104003");
		ИменаГраф.Добавить("П000П2М105003");
		ИменаГраф.Добавить("П000П2М105103");
		ИменаГраф.Добавить("П000П2М105903");
		ИменаГраф.Добавить("П000П2М106003");
		ИменаГраф.Добавить("П000П2М106103");
		ИменаГраф.Добавить("П000П2М107003");
		ИменаГраф.Добавить("П000П2М107103");
		ИменаГраф.Добавить("П000П2М107203");
		ИменаГраф.Добавить("П000П2М109703");
		ИменаГраф.Добавить("П000П2М109803");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		// Идентификаторы многострочных групп.
		СтруктураРеквизитовФормы.мИдГруппыР11М1   = "П00011М1";
		СтруктураРеквизитовФормы.мИдГруппыР12М1   = "П00012М1";
		СтруктураРеквизитовФормы.мИдГруппыР13М1   = "П00013М1";
		СтруктураРеквизитовФормы.мИдГруппыР13М2   = "П00013М2";
		СтруктураРеквизитовФормы.мИдГруппыЛ024М1  = "П00024М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1 = "П0027АМ1";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2 = "П0027АМ2";
		СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3 = "П0027АМ3";
		СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1  = "П0003ВМ1"; //единый идентификатор для разделов А, Б Листа 03
		СтруктураРеквизитовФормы.мИдГруппыЛ07М1   = "П00007М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ08М1   = "П00008М1";
		СтруктураРеквизитовФормы.мИдГруппыЛ08М2   = "П00008М2";
		СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1 = "П009П1М1";
		СтруктураРеквизитовФормы.мИдГруппыП1М1    = "П000П1М1";
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1 = "П0027ГМ1";
			СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2 = "П0027ГМ2";
			
			СтруктураРеквизитовФормы.мИдГруппыП2М1 = "П000П2М1";
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			СтруктураРеквизитовФормы.мИдГруппыП2М1 = "П000П2М1";
			СтруктураРеквизитовФормы.мИдГруппыП2М2 = "П000П2М2";
			СтруктураРеквизитовФормы.мИдГруппыП2М3 = "П000П2М3";
			
		КонецЕсли;
		
		// Группа П00011М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00011М101003");
		ИменаГраф.Добавить("П00011М103003");
		ИменаГраф.Добавить("П00011М104003");
		ИменаГраф.Добавить("П00011М105003");
		ИменаГраф.Добавить("П00011М106003");
		ИменаГраф.Добавить("П00011М107003");
		ИменаГраф.Добавить("П00011М108003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР11М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00012М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00012М100103");
		ИменаГраф.Добавить("П00012М101003");
		ИменаГраф.Добавить("П00012М111003");
		ИменаГраф.Добавить("П00012М112003");
		ИменаГраф.Добавить("П00012М113003");
		ИменаГраф.Добавить("П00012М114003");
		ИменаГраф.Добавить("П00012М121003");
		ИменаГраф.Добавить("П00012М122003");
		ИменаГраф.Добавить("П00012М123003");
		ИменаГраф.Добавить("П00012М124003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР12М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00013М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00013М101003");
		ИменаГраф.Добавить("П00013М102003");
		ИменаГраф.Добавить("П00013М103003");
		ИменаПодчиненныхГрупп = Новый Массив;
		ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыР13М2);
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР13М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		// Группа П00013М2 (подчинена группе П00П02М1).
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00013М204001");
		ИменаГраф.Добавить("П00013М204003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР13М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
		
		// Группа П00024М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00024М100001");
		ИменаГраф.Добавить("П00024М100002");
		ИменаГраф.Добавить("П00024М100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ024М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П0027АМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ100001");
		ИменаГраф.Добавить("П0027АМ100002");
		ИменаГраф.Добавить("П0027АМ100003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		// Группа П0027АМ2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ200001");
		ИменаГраф.Добавить("П0027АМ200002");
		ИменаГраф.Добавить("П0027АМ200003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		// Группа П0027АМ3.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0027АМ300001");
		ИменаГраф.Добавить("П0027АМ300002");
		ИменаГраф.Добавить("П0027АМ300003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			// Группа П0027ГМ1.
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П0027ГМ100001");
			ИменаГраф.Добавить("П0027ГМ100003");
			ИменаПодчиненныхГрупп = Новый Массив;
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
			// Группа П0027ГМ2.
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П0027ГМ200001");
			ИменаГраф.Добавить("П0027ГМ200003");
			ИменаПодчиненныхГрупп = Новый Массив;
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
			
		КонецЕсли;
		
		// Группа П0003ВМ1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П0003ВМ100503");
		ИменаГраф.Добавить("П0003ВМ100504");
		ИменаГраф.Добавить("П0003ВМ100505");
		ИменаГраф.Добавить("П0003ВМ101003");
		ИменаГраф.Добавить("П0003ВМ102003");
		ИменаГраф.Добавить("П0003ВМ102004");
		ИменаГраф.Добавить("П0003ВМ102005");
		ИменаГраф.Добавить("П0003ВМ103003");
		ИменаГраф.Добавить("П0003ВМ104003");
		ИменаГраф.Добавить("П0003ВМ105003");
		ИменаГраф.Добавить("П0003ВМ106003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00007М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00007М100001");
		ИменаГраф.Добавить("П00007М100002");
		ИменаГраф.Добавить("П00007М100003");
		ИменаГраф.Добавить("П00007М100004");
		ИменаГраф.Добавить("П00007М100005");
		ИменаГраф.Добавить("П00007М100006");
		ИменаГраф.Добавить("П00007М100007");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ07М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00008М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00008М100001");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ08М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П00008М2.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П00008М200001");
		ИменаГраф.Добавить("П00008М200002");
		ИменаГраф.Добавить("П00008М200003");
		ИменаГраф.Добавить("П00008М200004");
		ИменаГраф.Добавить("П00008М200005");
		ИменаГраф.Добавить("П00008М200006");
		ИменаГраф.Добавить("П00008М200007");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ08М2, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П009П1М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П009П1М100100");
		ИменаГраф.Добавить("П009П1М101003");
		ИменаГраф.Добавить("П009П1М102003");
		ИменаГраф.Добавить("П009П1М103001");
		ИменаГраф.Добавить("П009П1М103003");
		ИменаГраф.Добавить("П009П1М104001");
		ИменаГраф.Добавить("П009П1М104003");
		ИменаГраф.Добавить("П009П1М105001");
		ИменаГраф.Добавить("П009П1М105003");
		ИменаГраф.Добавить("П009П1М106001");
		ИменаГраф.Добавить("П009П1М106003");
		ИменаГраф.Добавить("П009П1М107001");
		ИменаГраф.Добавить("П009П1М107003");
		ИменаГраф.Добавить("П009П1М108001");
		ИменаГраф.Добавить("П009П1М108003");
		ИменаГраф.Добавить("П009П1М109001");
		ИменаГраф.Добавить("П009П1М109003");
		ИменаГраф.Добавить("П009П1М110001");
		ИменаГраф.Добавить("П009П1М110003");
		ИменаГраф.Добавить("П009П1М111001");
		ИменаГраф.Добавить("П009П1М111003");
		ИменаГраф.Добавить("П009П1М112001");
		ИменаГраф.Добавить("П009П1М112003");
		ИменаГраф.Добавить("П009П1М113003");
		ИменаГраф.Добавить("П009П1М114003");
		ИменаГраф.Добавить("П009П1М115003");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		// Группа П000П1М1.
		ИменаГраф = Новый Массив;
		ИменаГраф.Добавить("П000П1М100001");
		ИменаГраф.Добавить("П000П1М100002");
		ИменаГраф.Добавить("П000П1М100003");
		ИменаГраф.Добавить("П000П1М100004");
		ИменаПодчиненныхГрупп = Новый Массив;
		СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			// Группа П000П2М1.
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П000П2М100000");
			ИменаГраф.Добавить("П000П2М100100");
			ИменаГраф.Добавить("П000П2М100200");
			ИменаГраф.Добавить("П000П2М104003");
			ИменаГраф.Добавить("П000П2М105003");
			ИменаГраф.Добавить("П000П2М105103");
			ИменаГраф.Добавить("П000П2М105903");
			ИменаГраф.Добавить("П000П2М106003");
			ИменаГраф.Добавить("П000П2М106103");
			ИменаГраф.Добавить("П000П2М107003");
			ИменаГраф.Добавить("П000П2М107103");
			ИменаГраф.Добавить("П000П2М107203");
			ИменаГраф.Добавить("П000П2М109703");
			ИменаГраф.Добавить("П000П2М109803");
			ИменаПодчиненныхГрупп = Новый Массив;
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			// Группа П000П2М1.
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П000П2М104000");
			ИменаГраф.Добавить("П000П2М104100");
			ИменаПодчиненныхГрупп = Новый Массив;
			ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М2);
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
			// Группа П000П2М2 (подчинена группе П00П02М1).
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П000П2М204200");
			ИменаГраф.Добавить("П000П2М204300");
			ИменаПодчиненныхГрупп = Новый Массив;
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М2, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
			
			// Группа П000П2М3.
			ИменаГраф = Новый Массив;
			ИменаГраф.Добавить("П000П2М305100");
			ИменаГраф.Добавить("П000П2М305200");
			ИменаПодчиненныхГрупп = Новый Массив;
			СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М3, Новый Структура(
			"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР11М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР12М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_2", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР13М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_3", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаПодчиненныхРазделов = Новый Массив;
		ИменаПодчиненныхРазделов.Добавить("Лист02_1");
		ИменаПодчиненныхРазделов.Добавить("Лист02_2");
		ИменаПодчиненныхРазделов.Добавить("Лист02_3");
		ИменаПодчиненныхРазделов.Добавить("Лист02_4");
		ИменаПодчиненныхРазделов.Добавить("Лист02_5");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7А");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7Б");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7В");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7Г");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7Д");
		СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
		СтруктураМногоуровневыхРазделов.Вставить("Лист02", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 1 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 2 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_2", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 3 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_3", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ024М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 4 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_4", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 5 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_5", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел А");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7А", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел Б");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7Б", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел В");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7В", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел Г");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7Г", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел Д");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7Д", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист03А", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураМногоуровневыхРазделов.Вставить("Лист03Б", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураМногоуровневыхРазделов.Вставить("Лист04", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураМногоуровневыхРазделов.Вставить("Лист05", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураМногоуровневыхРазделов.Вставить("Лист06", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ07М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист07", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ08М1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ08М2);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист08", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист09", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР11М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР12М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_2", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР13М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Раздел1_3", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаПодчиненныхРазделов = Новый Массив;
		ИменаПодчиненныхРазделов.Добавить("Лист02_1");
		ИменаПодчиненныхРазделов.Добавить("Лист02_2");
		ИменаПодчиненныхРазделов.Добавить("Лист02_3");
		ИменаПодчиненныхРазделов.Добавить("Лист02_4");
		ИменаПодчиненныхРазделов.Добавить("Лист02_5");
		ИменаПодчиненныхРазделов.Добавить("Лист02_6");
		ИменаПодчиненныхРазделов.Добавить("Лист02_6бА");
		ИменаПодчиненныхРазделов.Добавить("Лист02_6бБ");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7А");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7Б");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7В");
		ИменаПодчиненныхРазделов.Добавить("Лист02_7Г");
		СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
		СтруктураМногоуровневыхРазделов.Вставить("Лист02", СтруктураРаздела);

		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 1 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 2 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_2", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 3 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_3", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ024М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 4 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_4", СтруктураРаздела);

		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 5 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_5", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 6 к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		ИменаПодчиненныхРазделов = Новый Массив;
		ИменаПодчиненныхРазделов.Добавить("Лист02_6а");
		СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_6", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 6а к Листу 02");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02_6");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_6а", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 6б к Листу 02. Раздел А");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_6бА", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 6б к Листу 02. Раздел Б");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_6бБ", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел А");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7А", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел Б");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7Б", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел В");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7В", СтруктураРаздела);  
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураРаздела.Вставить("Подчиненность");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			ИменаГруппМнЧ = Новый Массив;
			ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1);
			ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2);
			СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
			
		КонецЕсли;
		
		СтруктураРаздела.Вставить("НаимСтраницы", "Прил. 7 к Листу 02. Раздел Г");
		СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Лист02");
		СтруктураМногоуровневыхРазделов.Вставить("Лист02_7Г", СтруктураРаздела);

		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист03А", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист03Б", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураМногоуровневыхРазделов.Вставить("Лист04", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		СтруктураМногоуровневыхРазделов.Вставить("Лист05", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураМногоуровневыхРазделов.Вставить("Лист06", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ07М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист07", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ08М1);
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ08М2);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист08", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Лист09", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		ИменаГруппМнЧ = Новый Массив;
		ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
		СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
		СтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
		
		СтруктураРаздела = Новый Структура;
		СтруктураРаздела.Вставить("Многостраничность");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			ИменаГруппМнЧ = Новый Массив;
			ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
			СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			ИменаГруппМнЧ = Новый Массив;
			ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
			ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М3);
			СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
			
		КонецЕсли;
		
		СтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
		
	КонецЕсли;
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы, Элем.Ключ, СтруктураМногоуровневыхРазделов,
			ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы, Элем.Ключ, ТекВетка, СтруктураМногоуровневыхРазделов,
			ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
						СтруктураРеквизитовФормы, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы, ИмяПодчРаздела, СтруктураМногоуровневыхРазделов,
				ТабличныйДокумент, СтруктураРеквизитовФормы);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы, ИмяПодчРаздела, ПодчВетка, СтруктураМногоуровневыхРазделов,
				ТабличныйДокумент, СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СтруктураДанныхРазделов["СтруктураДанных" + ИмяРаздела] = ДанныеТабличногоДокумента(ИмяФормы,
			ИмяРаздела, СтруктураМногоуровневыхРазделов, ТабличныйДокумент, СтруктураРеквизитовФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы, ПоОбособленномуПодразделению = Ложь) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Декларация по налогу на прибыль");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН");
	СтруктураРеквизитовФормы.Вставить("мПоМесту", "214");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал", Перечисления.Периодичность.Квартал);
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц", Перечисления.Периодичность.Месяц);
	СтруктураРеквизитовФормы.Вставить("НалоговыеОрганы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОКТМОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ",       "18210101011011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ_КГН",   "18210101013011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_ФБ_КИК",   "18210101080011000110");
	СтруктураРеквизитовФормы.Вставить("КБК_БСРФ",     "18210101012021000110");
	СтруктураРеквизитовФормы.Вставить("КБК_БСРФ_КГН", "18210101014021000110");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресРезультата");
	СтруктураРеквизитовФормы.Вставить("КС_АдресРасшифровки");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2025");
		
		СтруктураРеквизитовФормы.Вставить("ОписаниеТиповЧислоЕ",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР12М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ024М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ2");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ3");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ГМ1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ГМ2");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ДМ1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ДМ2");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ03ВМ1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ07М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М2");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ09П1М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
		
		СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
		СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
		СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
		СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
		СтруктураРеквизитовФормы.Вставить("ТипНеотрицательноеЧислоДНБ",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный)));
		СтруктураРеквизитовФормы.Вставить("ТипЧислоДНБ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15)));
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
		СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
		СтруктураРеквизитовФормы.Вставить("ОбщеустановленнаяНалоговаяСтавка", 17);
		СтруктураРеквизитовФормы.Вставить("ПоОбособленномуПодразделению", ПоОбособленномуПодразделению);
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4", "ФормаОтчета2016Кв4"
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
			
			СтруктураРеквизитовФормы.Вставить("КонтрольныеСоотношенияАдресФормул");
			СтруктураРеквизитовФормы.Вставить("КонтрольныеСоотношенияАдресПоказателей");
			
		КонецЕсли;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
				
				СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "17/08/2022");
				
			Иначе// "ФормаОтчета2021Кв4"
				
				СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "05/10/2021");
				
			КонецЕсли;
			
			СтруктураРеквизитовФормы.Вставить("ОписаниеТиповЧислоЕ",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР12М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ024М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ3");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ГМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027ГМ2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ03ВМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ07М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ09П1М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
			СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
			СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
			СтруктураРеквизитовФормы.Вставить("ТипНеотрицательноеЧислоДНБ",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный)));
			СтруктураРеквизитовФормы.Вставить("ТипЧислоДНБ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15)));
			СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
			СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
			СтруктураРеквизитовФормы.Вставить("ОбщеустановленнаяНалоговаяСтавка", 17);
			СтруктураРеквизитовФормы.Вставить("ПоОбособленномуПодразделению", ПоОбособленномуПодразделению);
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "11/09/2020");
			СтруктураРеквизитовФормы.Вставить("ОписаниеТиповЧислоЕ",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР12М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ024М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ3");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ03ВМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ07М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ09П1М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
			СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
			СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
			СтруктураРеквизитовФормы.Вставить("ТипНеотрицательноеЧислоДНБ",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный)));
			СтруктураРеквизитовФормы.Вставить("ТипЧислоДНБ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15)));
			СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
			СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
			СтруктураРеквизитовФормы.Вставить("ОбщеустановленнаяНалоговаяСтавка", 17);
			
		ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "16/12/2019");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР12М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыР13М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ024М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ027АМ3");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ03ВМ1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ07М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ08М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ09П1М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М2");
			СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М3");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
			СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
			СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
			СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
			СтруктураРеквизитовФормы.Вставить("ТипНеотрицательноеЧислоДНБ",
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15, ДопустимыйЗнак.Неотрицательный)));
			СтруктураРеквизитовФормы.Вставить("ТипЧислоДНБ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 15)));
			СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
			СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
			
		Иначе
			
			СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "22/02/2017");
			СтруктураРеквизитовФормы.Вставить("мСоставПоказателей", "СоставПоказателей" + Прав(СокрЛП(ИмяФормы), 7));
			СтруктураРеквизитовФормы.Вставить("ИмяОтчета", ЭтотОбъект.Метаданные().Имя);
			СтруктураРеквизитовФормы.Вставить("ИмяФормы", ИмяФормы);
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Раздел1_3", "П0001300040");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист02_6б", "П0002800010");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03А", "П0003300005");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист03Б", "П0003400005");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист07", "П0007000010");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист08", "П0008000002");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Лист09", "П0009100001");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение1", "П0000100010");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_1", "П0000200040");
			СтруктураРеквизитовФормы.Вставить("ИдМСЧ_Приложение2_2", "П0000200051");
			СтруктураРеквизитовФормы.Вставить("СоответствиеЕдиницыИзмеренияДелителю", Новый Структура);
			СтруктураРеквизитовФормы.Вставить("ВГруппуОПВходитОрганизацияДоступность", Ложь);
			СтруктураРеквизитовФормы.Вставить("НужноРассчитатьОтчетНаСервере", Ложь);
			СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
			СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
			СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
			СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
			СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
			СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
			СтруктураРеквизитовФормы.Вставить("мКодОтчета");
			СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
			СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
			СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
			СтруктураРеквизитовФормы.Вставить("мОтчествоПредставителя");
			СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
			СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
			СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
			СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
			СтруктураРеквизитовФормы.Вставить("мПолноеИмяФайлаВнешнейОбработки");
			СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
			СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоДНБ");
			СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧислоДНБ");
			СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
			СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаДопСтрокПриложение2");
			СтруктураРеквизитовФормы.Вставить("РежимНаличияОбособленныхПодразделенийПоДаннымОтчета", Ложь);
			
			СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
			СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
			СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		РазделыОтчета.Вставить("Титульный", Новый Структура);
		РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
		
	Иначе
		
		ДанныеДопСтрок = Новый Структура;
		ДанныеДопСтрок.Вставить("Раздел1_3",   Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист02_6б",   Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист03А",     Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист03Б",     Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист07",      Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист08",      Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Лист09",      Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Приложение1", Новый ТаблицаЗначений);
		ДанныеДопСтрок.Вставить("Приложение2", Новый Структура);
		ДанныеДопСтрок.Приложение2.Вставить("П0000200040", Новый ТаблицаЗначений);
		ДанныеДопСтрок.Приложение2.Вставить("П0000200051", Новый ТаблицаЗначений);
		
		ДанныеДопСтрок.Раздел1_3.Колонки.Добавить("П000130004001",
			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ДанныеДопСтрок.Раздел1_3.Колонки.Добавить("П000130004003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280001003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280002003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280002103",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280003003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280003103",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280004003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280005003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006103",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280006203",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист02_6б.Колонки.Добавить("П000280007003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000503",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000504",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330000505",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330001003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002002",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330002003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330003003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330004003",
			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330005003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист03А.Колонки.Добавить("П000330006003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000503",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000504",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340000505",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340001003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002002",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340002003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(60)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340003003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340004003",
			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340005003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист03Б.Колонки.Добавить("П000340006003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001002",
			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001004",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001005",
			Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001006",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист07.Колонки.Добавить("П000700001007",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Лист08.Колонки.Добавить("П000800000201",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
		
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910000101",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910000201",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910001003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910002003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910003001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910003003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910004001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910004003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910005001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910005003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910006001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910006003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910007001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910007003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910008001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910008003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910009001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910009003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910010001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910010003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910011001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910011003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910012001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910012003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910013003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910014003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Лист09.Колонки.Добавить("П000910015003",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001001",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001002",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001003",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение1.Колонки.Добавить("П000010001004",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004001",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004101",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004201",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004301",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004202",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004302",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004203",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004303",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004204",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004304",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004205",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200040.Колонки.Добавить("П000020004305",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтрок.Приложение2.П0000200051.Колонки.Добавить("П000020005101",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
		ДанныеДопСтрок.Приложение2.П0000200051.Колонки.Добавить("П000020005201",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2, ДопустимыйЗнак.Любой)));
		
		ДанныеДопСтраниц = Новый Структура;
		ДанныеДопСтраниц.Вставить("Раздел1_1",   Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Раздел1_2",   Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Раздел1_3",   Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02",      Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_1",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_2",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_3",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_4",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_5",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_6",    Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист02_6а",   Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист03А",     Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист03Б",     Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист04",      Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист05",      Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист08",      Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Лист09",      Новый ТаблицаЗначений);
		ДанныеДопСтраниц.Вставить("Приложение2", Новый ТаблицаЗначений);
		
		ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_1.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_2.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		ДанныеДопСтраниц.Раздел1_3.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("ТаблицаЗначений"));
		
		ДанныеДопСтраниц.Лист02.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_1.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_2.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_3.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_4.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_5.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_6.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист02_6а.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист03А.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист03А.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист03А.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист03А.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));	
		ДанныеДопСтраниц.Лист03А.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("ТаблицаЗначений"));
		
		ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		ДанныеДопСтраниц.Лист03Б.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("ТаблицаЗначений"));
		
		ДанныеДопСтраниц.Лист04.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист04.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист04.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист04.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист05.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист05.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист05.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист05.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		
		ДанныеДопСтраниц.Лист08.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист08.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист08.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист08.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		ДанныеДопСтраниц.Лист08.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("ТаблицаЗначений"));
		
		ДанныеДопСтраниц.Лист09.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Лист09.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист09.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Лист09.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		ДанныеДопСтраниц.Лист09.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("ТаблицаЗначений"));
		
		ДанныеДопСтраниц.Приложение2.Колонки.Добавить("Представление",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254)));
		ДанныеДопСтраниц.Приложение2.Колонки.Добавить("АктивнаяСтраница",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Приложение2.Колонки.Добавить("АвтоматическоеПредставление",
			Новый ОписаниеТипов("Булево"));
		ДанныеДопСтраниц.Приложение2.Колонки.Добавить("Данные",
			Новый ОписаниеТипов("Структура"));
		ДанныеДопСтраниц.Приложение2.Колонки.Добавить("ДанныеДопСтрок",
			Новый ОписаниеТипов("Структура"));
		
		РазделыОтчета.Вставить("Титульный",
			Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
		
		РазделыОтчета.Вставить("Раздел1_1",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел1_1));
		
		РазделыОтчета.Вставить("Раздел1_2",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Раздел1_2));
		
		РазделыОтчета.Вставить("Раздел1_3",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Истина, ДанныеДопСтраниц.Раздел1_3, ДанныеДопСтрок.Раздел1_3, "П0001300040"));
		
		РазделыОтчета.Вставить("Лист02",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02));
		
		РазделыОтчета.Вставить("Лист02_1",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_1));
		
		РазделыОтчета.Вставить("Лист02_2",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_2));
		
		РазделыОтчета.Вставить("Лист02_3",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_3));
		
		РазделыОтчета.Вставить("Лист02_4",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_4));
		
		РазделыОтчета.Вставить("Лист02_5",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_5));
		
		РазделыОтчета.Вставить("Лист02_6",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_6));
		
		РазделыОтчета.Вставить("Лист02_6а",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист02_6а));
		
		РазделыОтчета.Вставить("Лист02_6б",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Ложь, Новый Структура, ДанныеДопСтрок.Лист02_6б, "П0002800010"));
		
		РазделыОтчета.Вставить("Лист03А",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Истина, ДанныеДопСтраниц.Лист03А, ДанныеДопСтрок.Лист03А, "П0003300005"));
		
		РазделыОтчета.Вставить("Лист03Б",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Истина, ДанныеДопСтраниц.Лист03Б, ДанныеДопСтрок.Лист03Б, "П0003400005"));
		
		РазделыОтчета.Вставить("Лист04",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист04));
		
		РазделыОтчета.Вставить("Лист05",
			Новый Структура("МногостраничностьВРазделе, Данные", Истина, ДанныеДопСтраниц.Лист05));
		
		РазделыОтчета.Вставить("Лист06", Новый Структура("МногостраничностьВРазделе, Данные", Ложь, Новый Структура));
		
		РазделыОтчета.Вставить("Лист07",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Ложь, Новый Структура, ДанныеДопСтрок.Лист07, "П0007000010"));
		
		РазделыОтчета.Вставить("Лист08",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Истина, ДанныеДопСтраниц.Лист08, ДанныеДопСтрок.Лист08, "П0008000002"));
		
		РазделыОтчета.Вставить("Лист09",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Истина, ДанныеДопСтраниц.Лист09, ДанныеДопСтрок.Лист09, "П0009100001"));
		
		РазделыОтчета.Вставить("Приложение1",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок, ИдентификаторДопСтрок",
			Ложь, Новый Структура, ДанныеДопСтрок.Приложение1, "П0000100010"));
		
		РазделыОтчета.Вставить("Приложение2",
			Новый Структура("МногостраничностьВРазделе, Данные, ДанныеДопСтрок",
			Истина, ДанныеДопСтраниц.Приложение2, ДанныеДопСтрок.Приложение2));
		
	КонецЕсли;
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция СтруктураСтраницОтчета(ИмяФормы, ПоОбособленномуПодразделению = Ложь) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		ПоказатьСтраницу = ?(ПоОбособленномуПодразделению, 0, 1);
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Титульный";
		СтрокаУровня1.Представление      = "Титульный лист";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_1";
		СтрокаУровня1.Представление      = "Раздел 1.1";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_2";
		СтрокаУровня1.Представление      = "Раздел 1.2";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_3";
		СтрокаУровня1.Представление      = "Раздел 1.3";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2; 
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02";
		СтрокаУровня1.Представление      = "Лист 02";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист03А";
		СтрокаУровня1.Представление      = "Лист 03. Раздел А";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист03Б";
		СтрокаУровня1.Представление      = "Лист 03. Раздел Б";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист04";
		СтрокаУровня1.Представление      = "Лист 04";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист05";
		СтрокаУровня1.Представление      = "Лист 05";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист06";
		СтрокаУровня1.Представление      = "Лист 06";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист07";
		СтрокаУровня1.Представление      = "Лист 07";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист08";
		СтрокаУровня1.Представление      = "Лист 08";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист09";
		СтрокаУровня1.Представление      = "Лист 09";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Приложение1";
		СтрокаУровня1.Представление      = "Приложение 1";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Приложение2";
		СтрокаУровня1.Представление      = "Приложение 2";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = ПоказатьСтраницу;
		СтрокаУровня1.ПоказатьСтраницу   = ПоказатьСтраницу;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;  
		
	Иначе
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Титульный";
		СтрокаУровня1.Представление      = "Титульный лист";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_1";
		СтрокаУровня1.Представление      = "Раздел 1.1";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_2";
		СтрокаУровня1.Представление      = "Раздел 1.2";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Раздел1_3";
		СтрокаУровня1.Представление      = "Раздел 1.3";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02";
		СтрокаУровня1.Представление      = "Лист 02";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_1";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 1";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_2";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 2";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_3";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 3";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_4";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 4";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_5";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 5";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_6";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 6";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_6а";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 6а";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист02_6б";
		СтрокаУровня1.Представление      = "Лист 02. Прил. 6б";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист03А";
		СтрокаУровня1.Представление      = "Лист 03. Раздел А";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист03Б";
		СтрокаУровня1.Представление      = "Лист 03. Раздел Б";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист04";
		СтрокаУровня1.Представление      = "Лист 04";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист05";
		СтрокаУровня1.Представление      = "Лист 05";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист06";
		СтрокаУровня1.Представление      = "Лист 06";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист07";
		СтрокаУровня1.Представление      = "Лист 07";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист08";
		СтрокаУровня1.Представление      = "Лист 08";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Лист09";
		СтрокаУровня1.Представление      = "Лист 09";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Приложение1";
		СтрокаУровня1.Представление      = "Приложение 1";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
		СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы        = "Приложение2";
		СтрокаУровня1.Представление      = "Приложение 2";
		СтрокаУровня1.ОриентацияСтраницы = "Портрет";
		СтрокаУровня1.ВыводНаПечать      = 1;
		СтрокаУровня1.ПоказатьСтраницу   = 1;
		СтрокаУровня1.ВыгрузитьСтраницу  = 2;
		
	КонецЕсли;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СобратьДанные(ИмяФормы, ТабличныйДокумент)
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];
		
		Если НЕ ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТекущаяОбласть.СодержитЗначение = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	// Пример.
	Приемник.Титульный.ТелОрганизации = Источник.Титульный.ТелОрганизации;
	
КонецПроцедуры

Процедура ПоказатьПериод(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	ОтчетныйПериод = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Области.Период.Значение;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Период;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ОтчетныйПериод) И СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьПериодОтчета(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы);
	КонецЕсли;
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		СтруктураДанныхТитульный.Области.ОтчетГод.Значение = ОтчетныйГод;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		СтруктураДанныхТитульный.ОтчетГод = ОтчетныйГод;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		СтруктураРеквизитовФормы.СтрПериодОтчета
			= РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(
			НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
	Иначе
		СтруктураРеквизитовФормы.СтрПериодОтчета
			= ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН   = Новый Соответствие;
	СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН = Новый Соответствие;
	
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(3,  "13");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(6,  "14");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(9,  "15");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(12, "16");
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(3,  "21");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(6,  "31");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(9,  "33");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(12, "34");
		
	Иначе
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(1,  "57");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(2,  "58");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(3,  "59");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(4,  "60");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(5,  "61");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(6,  "62");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(7,  "63");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(8,  "64");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(9,  "65");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(10, "66");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(11, "67");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН.Вставить(12, "68");
		
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(1,  "35");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(2,  "36");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(3,  "37");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(4,  "38");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(5,  "39");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(6,  "40");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(7,  "41");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(8,  "42");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(9,  "43");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(10, "44");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(11, "45");
		СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН.Вставить(12, "46");
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН
		= СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН;
	
	СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН
		= СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН;
	
КонецПроцедуры

Процедура ЗаполнитьПериодОтчета(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	ОтчетныйПериод = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Области.Период.Значение;
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		ОтчетныйПериод = СтруктураДанныхТитульный.Период;
	КонецЕсли;
	
	Если ОтчетныйПериод <> "50" Тогда
		
		ПоМесту = "";
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			ПоМесту = СтруктураДанныхТитульный.Области.ПоМесту.Значение;
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			ПоМесту = СтруктураДанныхТитульный.ПоМесту;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоМесту) Тогда
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				КодОтчетногоПериода = СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН[
					Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4", "ФормаОтчета2016Кв4"
				
				ЭтоКонсолидированнаяГруппа = (ПоМесту = "218");
				
				Если ЭтоКонсолидированнаяГруппа Тогда
					КодОтчетногоПериода = СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН[
						Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
				Иначе
					КодОтчетногоПериода = СтруктураРеквизитовФормы.СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН[
						Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)];
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			КодОтчетногоПериода = "";
			
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			СтруктураДанныхТитульный.Области.Период.Значение = КодОтчетногоПериода;
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			СтруктураДанныхТитульный.Период = КодОтчетногоПериода;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		СтруктураДанныхТитульный.Области.ОтчетГод.Значение
			= Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		СтруктураДанныхТитульный.ОтчетГод
			= Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
			КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
			КПП   = СокрЛП(СтруктураДанныхТитульный.КПП);
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			КодНО = СокрЛП(СтруктураДанныхТитульный.Области.КодИМНС.Значение);
			КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП1.Значение);
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			КодНО = СокрЛП(СтруктураДанныхТитульный.КодИМНС);
			КПП   = СокрЛП(СтруктураДанныхТитульный.КПП1);
		КонецЕсли;
		
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
			
			СтруктураДанныхТитульный.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
			
			СтруктураДанныхТитульный.ОргУп = НаименованиеОрганизацииПредставителя;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2';
						|en = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
					ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет),  ПараметрыЗаписи.НаименованиеОтчета));
					
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
	
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = ПараметрыЗаписи.Периодичность;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		ПоказателиОтчета = Новый Структура;
		ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
		
		СписокСохранения = Новый Структура;
		СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		ДанныеМногоуровневыхРазделов = Новый Структура;
		Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
			СтруктураРаздела = Элем.Значение;
			Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
				ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
					ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
			КонецЕсли;
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
		
		СписокСохранения.Вставить("ВерсияФормы",                 ПараметрыЗаписи.ВерсияФормы);
		СписокСохранения.Вставить("ФлОтклВыборЗначений",         ПараметрыЗаписи.ФлОтклВыборЗначений);
		СписокСохранения.Вставить("Автозаполнение",              ПараметрыЗаписи.Автозаполнение);
		СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
		СписокСохранения.Вставить("ФлПодсчетСтраниц",            ПараметрыЗаписи.ФлПодсчетСтраниц);
		СписокСохранения.Вставить("ОКТМОДляРазделов", ПараметрыЗаписи.ОКТМОДляРазделов);
		СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
			ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
		
		СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
		
		Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
			ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);
			Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
				СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
			КонецЕсли;
		КонецЕсли;
		
		ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
		
		ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц
			= Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
		
	Иначе
		
		ПоказателиОтчета = Новый Структура;
		Префикс = "ПолеТабличногоДокумента";
		Для Каждого Раздел Из ПараметрыЗаписи.РазделыОтчета Цикл
			Если НЕ Раздел.Значение.МногостраничностьВРазделе Тогда
				ПоказателиОтчета.Вставить(Префикс + Раздел.Ключ, Раздел.Значение.Данные);
			КонецЕсли;
		КонецЦикла;
		
		СписокСохранения = Новый Структура;
		СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		ДанныеМногострочныхРазделов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
			ДанныеДопСтрок = Неопределено;
			Если ЭлементСтруктуры.Значение.Свойство("ДанныеДопСтрок", ДанныеДопСтрок) Тогда
				Если ТипЗнч(ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
					ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Значение.ИдентификаторДопСтрок,
						ЭлементСтруктуры.Значение.ДанныеДопСтрок);
				ИначеЕсли ТипЗнч(ДанныеДопСтрок) = Тип("Структура") Тогда
					Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
						ДанныеМногострочныхРазделов.Вставить(ДопСтрока.Ключ, ДопСтрока.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
		ДанныеМногостраничныхРазделов = Новый Структура;
		Для Каждого ЭлементСтруктуры Из ПараметрыЗаписи.РазделыОтчета Цикл
			Если ЭлементСтруктуры.Значение.МногостраничностьВРазделе И НЕ ЭлементСтруктуры.Значение.Данные = Неопределено Тогда
				ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Данные);
			КонецЕсли;
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
		
		СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ПараметрыЗаписи.СтруктураВариантыЗаполнения);
		
		СписокСохранения.Вставить("Автозаполнение", ПараметрыЗаписи.ФлажокОтклАвтоРасчет);
		СписокСохранения.Вставить("ВерсияФормы", ПараметрыЗаписи.ВерсияФормы);
		СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
		
		Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
			
			ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);
			
			Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
				СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
			КонецЕсли;
			
		КонецЕсли;
		
		СписокСохранения.Вставить("ФлПодсчетСтраниц", ПараметрыЗаписи.ФлПодсчетСтраниц);
		СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
			ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
		СписокСохранения.Вставить("ФлОтклВыборЗначений", ПараметрыЗаписи.ФлОтклВыборЗначений);
		СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
		СписокСохранения.Вставить("ОКТМОДляРазделов", ПараметрыЗаписи.ОКТМОДляРазделов);
		
		ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
		
		ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц
			= Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
		
	КонецЕсли;
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																						|en = '%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, РазделыОтчета, ДанныеРеглОтчета)
	
	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "СтавкаПрибФед");
	Сведения.Добавить("", "СтавкаПрибРесп");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация,
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, Сведения);
	
	СтавкаФедеральная = 0;
	СтавкаСубъекта    = 0;
	
	ОргСведения.Свойство("СтавкаПрибФед",  СтавкаФедеральная);
	ОргСведения.Свойство("СтавкаПрибРесп", СтавкаСубъекта);
	
	НомерМесяца = Месяц(ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КвартальноеЗаполнение = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		СтруктураРеквизитовФормы = ДанныеРеглОтчета.СтруктураРеквизитовФормы;
		
		КПП = СокрЛП(РазделыОтчета.Титульный.КПП);
		
		Если ЗначениеЗаполнено(КПП) Тогда
			КодПричиныПостановкиНаУчет = Сред(КПП, 5, 2);
			Если КодПричиныПостановкиНаУчет = "50" Тогда
				СтруктураРеквизитовФормы.мПоМесту = "213";
				РазделыОтчета.Титульный.ПоМесту = "213";
			КонецЕсли;
		КонецЕсли;
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
		
		Ветка = ДеревоРаздела.Строки[0];
		
		Ветка.Данные.Вставить("ПризнакВключения", "V");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
		
		СтрокаМнЧ = ДанныеМнЧ.Строки[0];
		СтрокаМнЧ.Данные.Вставить("П00011М101003", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
		СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
		СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
		Ветка = ДеревоРаздела.Строки[0];
		
		Ветка.Данные.Вставить("ПризнакВключения", "V");
		Ветка.Данные.Вставить("П000020000100", "01");
		Ветка.Данные.Вставить("П000020015003", СтавкаФедеральная);
		Ветка.Данные.Вставить("П000020016003", СтавкаСубъекта);
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			Ветка.Данные.Вставить("П000020014003", СтавкаФедеральная + Макс(СтавкаСубъекта, Ветка.Данные["П000020017003"]));
			
		КонецЕсли;
		
		Если КвартальноеЗаполнение И Не ДанныеРеглОтчета.СтруктураРеквизитовФормы.ПоОбособленномуПодразделению Тогда
			
			Ветка_Лист02_1 = Ветка.Строки[0].Строки[0];
			Ветка_Лист02_1.Данные.Вставить("ПризнакВключения", "V");
			Ветка_Лист02_1.Данные.Вставить("П000210000100", "01");
			
			Ветка_Лист02_2 = Ветка.Строки[1].Строки[0];
			Ветка_Лист02_2.Данные.Вставить("ПризнакВключения", "V");
			Ветка_Лист02_2.Данные.Вставить("П000220000100", "01");
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
	Иначе
		
		РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110001003",
			СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.ОКТМОДляРазделов));
		
		РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110003003",
			СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КБК_ФБ));
		
		РазделыОтчета.Раздел1_1.Данные[0].Данные.Вставить("П000110006003",
			СокрЛП(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КБК_БСРФ));
		
		РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200015003", СтавкаФедеральная);
		РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200016003", СтавкаСубъекта);
		РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200014003",
			СтавкаФедеральная + СтавкаСубъекта + РазделыОтчета.Лист02.Данные[0].Данные.П000200017003);
		
		РазделыОтчета.Лист02.Данные[0].Данные.Вставить("П000200000100", "1");
		
		Если КвартальноеЗаполнение Тогда
			РазделыОтчета.Лист02_1.Данные[0].Данные.Вставить("П000210000100", "1");
			РазделыОтчета.Лист02_2.Данные[0].Данные.Вставить("П000220000100", "1");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчет_2016Кв4(ИмяФормы,
									 ПараметрыАвтоформирования,
									 КорректирующийОтчет,
									 РазделыОтчета,
									 ДанныеРеглОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ЗаполнитьПустыеСтруктурыДанных_2016Кв4(ИмяФормы, РазделыОтчета);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный.Данные);
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
		И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Контейнер, ПараметрыАвтоформирования.ВнешниеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации_2016Кв4(ИмяФормы,
												 СтруктураДанныхТитульный,
												 СтруктураРеквизитовФормы,
												 ДатаПодписи,
												 ИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ОКТМО";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			СтруктураДанныхТитульный.Области.ИНН1.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП1.Значение = КПП;
			СтруктураДанныхТитульный.Области.КодИМНС.Значение = КодНО;
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			СтруктураДанныхТитульный.ИНН1 = ИНН;
			СтруктураДанныхТитульный.КПП1 = КПП;
			СтруктураДанныхТитульный.КодИМНС = КодНО;
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = СведенияОбОрганизации.ОКТМО;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
		СтруктураРеквизитовФормы, ?(ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент"),
		СтруктураДанныхТитульный.Области.ОКВЭД.Значение, СтруктураДанныхТитульный.ОКВЭД));
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьПустыеСтруктурыДанных_2016Кв4(ИмяФормы, РазделыОтчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого Раздел Из РазделыОтчета Цикл
		
		Если Раздел.Значение.Данные.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Раздел.Ключ));
			
			ДанныеТабличногоДокумента = СобратьДанные(ИмяФормы, ТабличныйДокумент);
			
			Если Раздел.Значение.МногостраничностьВРазделе Тогда
				
				ДопСтраницаРаздела = Раздел.Значение.Данные.Добавить();
				
				Если Раздел.Ключ = "Раздел1_3" ИЛИ Раздел.Ключ = "Лист03А" ИЛИ Раздел.Ключ = "Лист03Б"
					ИЛИ Раздел.Ключ = "Лист08" ИЛИ Раздел.Ключ = "Лист09" Тогда
					ДопСтраницаРаздела.Представление = "Лист N 1";
				Иначе
					ДопСтраницаРаздела.Представление = "Новая страница";
				КонецЕсли;
				
				ДопСтраницаРаздела.АктивнаяСтраница = Истина;
				ДопСтраницаРаздела.АвтоматическоеПредставление = Истина;
				ДопСтраницаРаздела.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Ключ = "Лист02_5" ИЛИ Раздел.Ключ = "Лист02_6а" Тогда
					ДопСтраницаРаздела.Данные.Вставить("ВГруппуОПВходитОрганизация", Ложь);
				КонецЕсли;
				
				Если Раздел.Значение.Свойство("ДанныеДопСтрок")
					И ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
					
					Раздел.Значение.ДанныеДопСтрок.Добавить();
					
					Если ТипЗнч(ДопСтраницаРаздела.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						ДопСтраницаРаздела.ДанныеДопСтрок = Раздел.Значение.ДанныеДопСтрок;
					КонецЕсли;
					
				ИначеЕсли Раздел.Значение.Свойство("ДанныеДопСтрок")
					И ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
					
					Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
						ДопСтрока.Значение.Добавить();
					КонецЦикла;
					
					ДопСтраницаРаздела.ДанныеДопСтрок = Раздел.Значение.ДанныеДопСтрок;
					
				КонецЕсли;
				
			Иначе
				
				Раздел.Значение.Данные = ДанныеТабличногоДокумента;
				
				Если Раздел.Значение.Свойство("ДанныеДопСтрок") Тогда
					
					Если ТипЗнч(Раздел.Значение.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ДопСтрока Из Раздел.Значение.ДанныеДопСтрок Цикл
							ДопСтрока.Значение.Добавить();
						КонецЦикла;
						
					Иначе
						
						Раздел.Значение.ДанныеДопСтрок.Добавить();
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита       = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный      = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			стрВариантЗаполнения
			= РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный  = ?(ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если КодПоказателя = "П000200032003" ИЛИ КодПоказателя = "П000200033003" ИЛИ КодПоказателя = "П000200034003"
				ИЛИ КодПоказателя = "П000260000601" Тогда
				
				чВариантЗаполнения = 5;
				
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 ИЛИ ИмяСтраницы = "Раздел1_3" Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЗагруженныеДанные(ИмяФормы,
									  СтруктураРеквизитовФормы,
									  СтруктураДанныхТитульный) Экспорт
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")Тогда
		
		ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ВыполненоУсловие1 = СтруктураДанныхТитульный.ПоМесту = "220" ИЛИ СтруктураДанныхТитульный.ПоМесту = "223";
		ВыполненоУсловие2 = СтруктураДанныхТитульный.ПоМесту = "231";
		ВыполненоУсловие3 = НЕ (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
		
		Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 ИЛИ ВыполненоУсловие3 Тогда
			
			ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
			
			Для каждого Лист02 Из ДеревоДанных.Строки Цикл
				
				Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 Тогда
					
					Для каждого Пок Из Лист02.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							Лист02.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							Лист02.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Лист02_1 = Лист02.Строки[0].Строки[0];
				Для каждого Пок Из Лист02_1.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						Лист02_1.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						Лист02_1.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				
				Лист02_2 = Лист02.Строки[1].Строки[0];
				Для каждого Пок Из Лист02_2.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						Лист02_2.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						Лист02_2.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				
				Лист02_3 = Лист02.Строки[2].Строки[0];
				Для каждого Пок Из Лист02_3.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						Лист02_3.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						Лист02_3.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				
				Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 Тогда
					
					Для каждого Лист02_4 Из Лист02.Строки[3].Строки Цикл
						Для каждого Пок Из Лист02_4.Данные Цикл
							Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
								Лист02_4.Данные.Вставить(Пок.Ключ, 0);
							Иначе
								Лист02_4.Данные.Вставить(Пок.Ключ, "");
							КонецЕсли;
						КонецЦикла;
						ДанныеМнЧ = Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
						Пока ДанныеМнЧ.Строки.Количество() > 1 Цикл
							ДанныеМнЧ.Строки.Удалить(0);
						КонецЦикла;
						СтрокаМнЧ = ДанныеМнЧ.Строки[0];
						Для каждого Пок Из СтрокаМнЧ.Данные Цикл
							Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
								СтрокаМнЧ.Данные.Вставить(Пок.Ключ, 0);
							Иначе
								СтрокаМнЧ.Данные.Вставить(Пок.Ключ, "");
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ВыполненоУсловие2 Тогда
					
					Для каждого Лист02_5 Из Лист02.Строки[4].Строки Цикл
						Для каждого Пок Из Лист02_5.Данные Цикл
							Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
								Лист02_5.Данные.Вставить(Пок.Ключ, 0);
							Иначе
								Лист02_5.Данные.Вставить(Пок.Ключ, "");
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, Новый УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
			
		КонецЕсли;
		
		ОчиститьПриложения4КЛисту02НеВключенныеВСоставОтчета(ИмяФормы, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПриложения4КЛисту02НеВключенныеВСоставОтчета(ИмяФормы,
															   СтруктураРеквизитовФормы) Экспорт
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")Тогда
		
		// Особая обработка результата автозаполнения.
		//
		ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Для каждого Лист02_4 Из Лист02.Строки[3].Строки Цикл
				
				Если НЕ ЗначениеЗаполнено(Лист02_4.Данные["ПризнакВключения"]) Тогда
					
					Для каждого Пок Из Лист02_4.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							Лист02_4.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							Лист02_4.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
					ДанныеМнЧ = Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
					Пока ДанныеМнЧ.Строки.Количество() > 1 Цикл
						ДанныеМнЧ.Строки.Удалить(0);
					КонецЦикла;
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							СтрокаМнЧ.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							СтрокаМнЧ.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, Новый УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОКТМОРазделов(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураДанныхТитульный,
								ТабличныйДокумент = Неопределено,
								ИмяРаздела = Неопределено) Экспорт
	
	ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
		Период  = СокрЛП(ТабличныйДокумент.Область("Период").Значение);
	Иначе
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
		Период  = СокрЛП(СтруктураДанныхТитульный.Период);
	КонецЕсли;
	ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	Период  = СокрЛП(СтруктураДанныхТитульный.Период);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		Если (ИмяРаздела = "Раздел1_1" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
			И СтрРазделить("229,231,238", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
			
			ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			Ветка = ДеревоРаздела.Строки[0];
			
			Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				
				СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1].Строки;
				Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ИмяРаздела = "Раздел1_2" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
			И НЕ (СтрРазделить("231,238", ",", Ложь).Найти(ПоМесту) <> Неопределено
			ИЛИ СтрРазделить("34,46,50", ",", Ложь).Найти(Период) <> Неопределено) Тогда
			
			ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
			Ветка = ДеревоРаздела.Строки[0];
			
			Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				
				СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1].Строки;
				Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить("П00012М101003", ОКТМО);
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе// "ФормаОтчета2022Кв4"
		
		Если (ИмяРаздела = "Раздел1_1" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
			И СтрРазделить("218,229,231", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
			
			ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			Ветка = ДеревоРаздела.Строки[0];
			
			Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				
				СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1].Строки;
				Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ИмяРаздела = "Раздел1_2" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
			И НЕ (ПоМесту = "231" ИЛИ СтрРазделить("34,46,50,68", ",", Ложь).Найти(Период) <> Неопределено) Тогда
			
			ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
			Ветка = ДеревоРаздела.Строки[0];
			
			Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				
				СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1].Строки;
				Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
					СтрокаМнЧ.Данные.Вставить("П00012М101003", ОКТМО);
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьРаздел1_1(ИмяФормы,
								ДанныеРеглОтчета,
								СтруктураДанныхТитульный,
								ТабличныйДокумент = Неопределено) Экспорт
	
	СтруктураРеквизитовФормы = ДанныеРеглОтчета.СтруктураРеквизитовФормы;
	ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП     = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		КПП     = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		ДекларацияПоГоловнойОрганизации = НЕ ЭтоОбособленноеПодразделение;
		
		Если СтрРазделить("229,231,238", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
			
			Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
			
			ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				
				ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
				
				СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
				РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
				СтруктураПараметров);
				
				ОКТМО = СокрЛП(ОргСведения.ОКТМО);
				
			КонецЕсли;
			
			Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
				ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
					СтруктураРеквизитовФормы, ДанныеРеглОтчета.мСтруктураМногоуровневыхРазделов, "Раздел1_1");
			КонецЕсли;
			
			Раздел1_1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			
			Ветка = Раздел1_1.Строки[0];
			
			Ветка.Данные.Вставить("ПризнакВключения", "V");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
			
			СтрокаМнЧ = ДанныеМнЧ.Строки[0];
			СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
			
			Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь));
			
			СуммаНалогаВФедБюдж
			= РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020027003", Усл)
			- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020028003", Усл);
			
			Если ДекларацияПоГоловнойОрганизации Тогда
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				Если ЭтоПерваяСтрокаМнЧ Тогда
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
				Иначе
					СтрокаМнЧ = НоваяСтрока_Раздел1_1(ИмяФормы, ДанныеМнЧ);
				КонецЕсли;
				
				СуммаНалогаВБюджСубРФ = 0;
				
				ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
				Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
						Листы02_5, Усл) <> Неопределено Тогда
						ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
					
					ЕстьЛист02_5_РС_1 = Ложь;
					Усл = Новый Структура("П000250000300", "1");
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_5 = Лист02.Строки[4].Строки;
						Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
							Листы02_5, Усл) <> Неопределено Тогда
							ЕстьЛист02_5_РС_1 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьЛист02_5_РС_1 Тогда
						
						Усл = Новый Структура("П000250000100,П000250000300",
						СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "1");
						
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
							+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
							- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
						КонецЦикла;
						
					Иначе
						
						Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
						СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "4", КПП);
						
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
							+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
							- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
						КонецЦикла;
						
					КонецЕсли;
					
				Иначе
					
					Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь));
					СуммаНалогаВБюджСубРФ
					= РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
						ДанныеРеглОтчета, Листы02, "П000020027103", Усл)
					- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
						ДанныеРеглОтчета, Листы02, "П000020028103", Усл);
					
				КонецЕсли;
				
				СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
				СтрокаМнЧ.Данные.Вставить("П00011М104003", Макс(0, СуммаНалогаВФедБюдж));
				СтрокаМнЧ.Данные.Вставить("П00011М105003", Макс(0, - СуммаНалогаВФедБюдж));
				
				СтрокаМнЧ.Данные.Вставить("П00011М105603", КПП);
				СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
				СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
				СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
				
				ЭтоПерваяСтрокаМнЧ = Ложь;
				
			ИначеЕсли ЭтоОбособленноеПодразделение Тогда
				
				ПереченьКПП = Новый Массив;
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Для каждого Лист02_5 Из Листы02_5 Цикл
						КПП_ОП = СокрЛП(Лист02_5.Данные["П000250000400"]);
						Если ПереченьКПП.Найти(КПП_ОП) = Неопределено Тогда
							ПереченьКПП.Добавить(КПП_ОП);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				Для Каждого КПП_ОП Из ПереченьКПП Цикл
					
					Если ЭтоПерваяСтрокаМнЧ Тогда
						СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Иначе
						СтрокаМнЧ = НоваяСтрока_Раздел1_1(ИмяФормы, ДанныеМнЧ);
					КонецЕсли;
					
					СуммаНалогаВБюджСубРФ = 0;
					
					Усл = Новый Структура("П000250000100,П000250000400",
						СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), КПП_ОП);
					
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_5 = Лист02.Строки[4].Строки;
						СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
						+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
							ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
						- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
							ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
					КонецЦикла;
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
					
					СтрокаМнЧ.Данные.Вставить("П00011М105603", КПП_ОП);
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
					СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
					СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
					
					ЭтоПерваяСтрокаМнЧ = Ложь;
					
				КонецЦикла;
				
			Иначе // некорректно заполненный отчет
				
				СтрокаМнЧ.Данные.Вставить("П00011М101003", "");
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_1, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
				ДанныеРеглОтчета.Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе// "ФормаОтчета2022Кв4"
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			ИНН     = СокрЛП(ТабличныйДокумент.Область("ИНН").Значение);
		Иначе
			ИНН     = СокрЛП(СтруктураДанныхТитульный.ИНН);
		КонецЕсли;
		
		ЭтоОрганизацияКИК = ПоМесту = "238";
		ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
		ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
		
		ДекларацияЗаНалоговыйПериод = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
		
		Если СтрРазделить("229,231", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
			
			ПереченьОКТМО = Новый Массив;
			
			Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
			Листы09 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист09"]).Строки;
			
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_6 = Лист02.Строки[5].Строки;
					Для каждого Лист02_6 Из Листы02_6 Цикл
						ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
						Если ЗначениеЗаполнено(ОКТМО) И ПереченьОКТМО.Найти(ОКТМО) = Неопределено Тогда
							ПереченьОКТМО.Добавить(ОКТМО);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Если ДекларацияЗаНалоговыйПериод И РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
					Листы09, Новый Структура("ПризнакВключения", "V")) <> Неопределено Тогда
					ПереченьОКТМО.Добавить("КИК");
				КонецЕсли;
				
				Если ПереченьОКТМО.Количество() = 0 Тогда
					ПереченьОКТМО.Добавить("");
				КонецЕсли;
				
			Иначе
				
				ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					
					ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
					
					СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
					РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
					СтруктураПараметров);
					
					ОКТМО = СокрЛП(ОргСведения.ОКТМО);
					
				КонецЕсли;
				ПереченьОКТМО.Добавить(ОКТМО);
				
				Если ДекларацияПоГоловнойОрганизации Тогда
					
					Если ДекларацияЗаНалоговыйПериод И РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
						Листы09, Новый Структура("ПризнакВключения", "V")) <> Неопределено Тогда
						ПереченьОКТМО.Добавить("КИК");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
				ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
					СтруктураРеквизитовФормы, ДанныеРеглОтчета.мСтруктураМногоуровневыхРазделов, "Раздел1_1");
			КонецЕсли;
				
			Раздел1_1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			
			Ветка = Раздел1_1.Строки[0];
			
			Ветка.Данные.Вставить("ПризнакВключения", "V");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
			
			СтрокаМнЧ = ДанныеМнЧ.Строки[0];
			СтрокаМнЧ.Данные.Вставить("П00011М101003", ПереченьОКТМО[0]);
			
			Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
			
			СуммаНалогаВФедБюдж
			= РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020027003", Усл)
			- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020028003", Усл);
			
			Если ЭтоОрганизацияКИК Тогда
				
				Если ДекларацияЗаНалоговыйПериод Тогда
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
					
					СтрокаМнЧ.Данные.Вставить("П00011М104003"
					, РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б10023003")
					+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б20025003"));
					
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
					
				КонецЕсли;
				
			ИначеЕсли ДекларацияПоГоловнойОрганизации Тогда
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				Для каждого ОКТМО Из ПереченьОКТМО Цикл
					
					Если ЭтоПерваяСтрокаМнЧ Тогда
						СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Иначе
						СтрокаМнЧ = НоваяСтрока_Раздел1_1(ИмяФормы, ДанныеМнЧ);
					КонецЕсли;
					
					Если СокрЛП(ОКТМО) = "КИК" Тогда
						
						СтрокаМнЧ.Данные.Вставить("П00011М101003", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
						
						СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
						СтрокаМнЧ.Данные.Вставить("П00011М104003"
						, РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б10023003")
						+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б20025003"));
						
						СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
						
					Иначе
						
						СуммаНалогаВБюджСубРФ = 0;
						
						ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
						Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
								Листы02_5, Усл) <> Неопределено Тогда
								ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
							
							ЕстьЛист02_5_РС_1 = Ложь;
							Усл = Новый Структура("П000250000300", "1");
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
									Листы02_5, Усл) <> Неопределено Тогда
									ЕстьЛист02_5_РС_1 = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если ЕстьЛист02_5_РС_1 Тогда
								
								Усл = Новый Структура("П000250000100,П000250000300",
								СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "1");
								
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
										ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
									- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
										ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
								КонецЦикла;
								
							Иначе
								
								Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
								СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "4", КПП);
								
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
										ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
									- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
										ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
								КонецЦикла;
								
							КонецЕсли;
							
						Иначе
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
							СуммаНалогаВБюджСубРФ
							= РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02, "П000020027103", Усл)
							- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02, "П000020028103", Усл);
							
						КонецЕсли;
						
						СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
						СтрокаМнЧ.Данные.Вставить("П00011М104003", Макс(0, СуммаНалогаВФедБюдж));
						СтрокаМнЧ.Данные.Вставить("П00011М105003", Макс(0, - СуммаНалогаВФедБюдж));
						
						СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
						СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
						СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
						
					КонецЕсли;
					
					ЭтоПерваяСтрокаМнЧ = Ложь;
					
				КонецЦикла;
				
			ИначеЕсли ЭтоОбособленноеПодразделение Тогда
				
				СуммаНалогаВБюджСубРФ = 0;
				
				Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
					+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
						ДанныеРеглОтчета, Листы02_5, "П000250010003", Усл)
					- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
						ДанныеРеглОтчета, Листы02_5, "П000250011003", Усл);
				КонецЦикла;
				
				СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
				
				СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
				СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
				СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
				
			ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				Для каждого ОКТМО Из ПереченьОКТМО Цикл
					
					Если ЭтоПерваяСтрокаМнЧ Тогда
						СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Иначе
						СтрокаМнЧ = НоваяСтрока_Раздел1_1(ИмяФормы, ДанныеМнЧ);
					КонецЕсли;
					
					Если СокрЛП(ОКТМО) = "КИК" Тогда
						
						СтрокаМнЧ.Данные.Вставить("П00011М101003", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
						
						СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
						СтрокаМнЧ.Данные.Вставить("П00011М104003"
						, РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б10023003")
						+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы09, "П009Б20025003"));
						
						СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
						
					Иначе
						
						ЭтоОКТМООтветственногоУчастника = Ложь;
						Если ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов Тогда
							Усл = Новый Структура("П000260000100,П000260000200,П000260000300", ИНН, КПП, ОКТМО);
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_6 = Лист02.Строки[5].Строки;
								Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
									Листы02_6, Усл) <> Неопределено Тогда
									ЭтоОКТМООтветственногоУчастника = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если НЕ ЭтоОКТМООтветственногоУчастника Тогда
							СуммаНалогаВФедБюдж = 0;
						КонецЕсли;
						
						СуммаНалогаВБюджСубРФ = 0;
						
						Усл = Новый Структура("П000260000300", ОКТМО);
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_6 = Лист02.Строки[5].Строки;
							СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
							+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_6, "П000260010003", Усл)
							- РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02_6, "П000260011003", Усл);
						КонецЦикла;
						
						СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
						
						СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КГН);
						СтрокаМнЧ.Данные.Вставить("П00011М104003", Макс(0, СуммаНалогаВФедБюдж));
						СтрокаМнЧ.Данные.Вставить("П00011М105003", Макс(0, - СуммаНалогаВФедБюдж));
						
						СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ_КГН);
						СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
						СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
						
					КонецЕсли;
					
					ЭтоПерваяСтрокаМнЧ = Ложь;
					
				КонецЦикла;
				
			Иначе // некорректно заполненный отчет
				
				СтрокаМнЧ.Данные.Вставить("П00011М101003", "");
				
			КонецЕсли;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_1, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
				ДанныеРеглОтчета.Модифицированность = Истина;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьРаздел1_2(ИмяФормы,
								ДанныеРеглОтчета,
								СтруктураДанныхТитульный,
								ТабличныйДокумент = Неопределено) Экспорт
	
	СтруктураРеквизитовФормы = ДанныеРеглОтчета.СтруктураРеквизитовФормы;
	ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП     = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		КПП     = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	
	ЭтоКвартальныйОтчет
	= СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		Если СтрРазделить("231,238", ",", Ложь).Найти(ПоМесту) = Неопределено
			И ((ЭтоКвартальныйОтчет И (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9))
			ИЛИ ОтчетныйМесяц = 11) Тогда
			
			ДекларацияПоГоловнойОрганизации = НЕ ЭтоОбособленноеПодразделение;
			
			Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
			
			ЗаполнятьРаздел1_2 = Ложь;
			
			Если ЭтоОбособленноеПодразделение Тогда
				
				Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
						Листы02_5, Усл) <> Неопределено Тогда
						ЗаполнятьРаздел1_2 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,06,07,08,13,15,16,17,18,19,20,21,22", ",", Ложь));
				Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
					Листы02, Усл) <> Неопределено Тогда
					ЗаполнятьРаздел1_2 = Истина;
				КонецЕсли;
				
				Если НЕ ЗаполнятьРаздел1_2 Тогда
					
					Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь));
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_5 = Лист02.Строки[4].Строки;
						Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
							Листы02_5, Усл) <> Неопределено Тогда
							ЗаполнятьРаздел1_2 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаполнятьРаздел1_2 Тогда
				
				ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					
					ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
					
					СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
					РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
					СтруктураПараметров);
					
					ОКТМО = СокрЛП(ОргСведения.ОКТМО);
					
				КонецЕсли;
				
				СочетанияЗначений = Новый Массив;
				
				Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
					СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
				ИначеЕсли ОтчетныйМесяц = 9 Тогда
					Если АвансовыеПлатежиРазличаются(ИмяФормы,
						ДанныеРеглОтчета, СтруктураДанныхТитульный, ТабличныйДокумент, ОКТМО) Тогда
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "24", ОКТМО));
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
					Иначе
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
					КонецЕсли;
				Иначе //ОтчетныйМесяц = 11
					Если ЕстьАвансовыеПлатежи(ИмяФормы,
						ДанныеРеглОтчета, СтруктураДанныхТитульный, ТабличныйДокумент, ОКТМО) Тогда
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
					Иначе
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
					КонецЕсли;
				КонецЕсли;
				
				Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
					ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
					СтруктураРеквизитовФормы, ДанныеРеглОтчета.мСтруктураМногоуровневыхРазделов, "Раздел1_2");
				КонецЕсли;
				
				Раздел1_2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				
				Ветка = Раздел1_2.Строки[0];
				
				Ветка.Данные.Вставить("ПризнакВключения", "V");
				
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
				Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
						Листы02_5, Усл) <> Неопределено Тогда
						ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ТекСочетаниеЗначений Из СочетанияЗначений Цикл
					
					ВариантРасчета = Неопределено;
					Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
						ВариантРасчета = 1;
					ИначеЕсли ОтчетныйМесяц = 9 Тогда
						ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, 1);
					Иначе //ОтчетныйМесяц = 11
						ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, Неопределено);
					КонецЕсли;
					
					Если ВариантРасчета = 1 Тогда
						
						Если ДекларацияПоГоловнойОрганизации Тогда
							
							РазделяемаяСуммаНалогаВФедБюдж   = 0;
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02, "П000020030003", Усл);
							
							Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
								
								ЕстьЛист02_5_РС_1 = Ложь;
								Усл = Новый Структура("П000250000300", "1");
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
										Листы02_5, Усл) <> Неопределено Тогда
										ЕстьЛист02_5_РС_1 = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								Если ЕстьЛист02_5_РС_1 Тогда
									Усл = Новый Структура("П000250000100,П000250000300",
									СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "1");
								Иначе
									Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
									СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "4", КПП);
								КонецЕсли;
								
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02_5, "П000250012003", Усл);
								КонецЦикла;
								
							Иначе
								
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь));
								РазделяемаяСуммаНалогаВБюджСубРФ = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02, "П000020031003", Усл);
								
							КонецЕсли;
							
							Если ЭтоПерваяСтрокаМнЧ Тогда
								СтрокаМнЧ = ДанныеМнЧ.Строки[0];
							Иначе
								СтрокаМнЧ = НоваяСтрока_Раздел1_2(ИмяФормы, ДанныеМнЧ);
							КонецЕсли;
							
							СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
							СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
							
							СтрокаМнЧ.Данные.Вставить("П00012М111003", СтруктураРеквизитовФормы.КБК_ФБ);
							СтрокаМнЧ.Данные.Вставить("П00012М112003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М113003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М114003", РазделяемаяСуммаНалогаВФедБюдж
								- СтрокаМнЧ.Данные["П00012М112003"] - СтрокаМнЧ.Данные["П00012М113003"]);
							
							СтрокаМнЧ.Данные.Вставить("П00012М120603", КПП);
							СтрокаМнЧ.Данные.Вставить("П00012М121003", СтруктураРеквизитовФормы.КБК_БСРФ);
							СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
								- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
							
							ЭтоПерваяСтрокаМнЧ = Ложь;
							
						ИначеЕсли ЭтоОбособленноеПодразделение Тогда
							
							ПереченьКПП = Новый Массив;
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								Для каждого Лист02_5 Из Листы02_5 Цикл
									КПП_ОП = СокрЛП(Лист02_5.Данные["П000250000400"]);
									Если ПереченьКПП.Найти(КПП_ОП) = Неопределено Тогда
										ПереченьКПП.Добавить(КПП_ОП);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
							Для Каждого КПП_ОП Из ПереченьКПП Цикл
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								
								Усл = Новый Структура("П000250000100,П000250000400",
									СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), КПП_ОП);
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02_5, "П000250012003", Усл);
								КонецЦикла;
								
								Если ЭтоПерваяСтрокаМнЧ Тогда
									СтрокаМнЧ = ДанныеМнЧ.Строки[0];
								Иначе
									СтрокаМнЧ = НоваяСтрока_Раздел1_2(ИмяФормы, ДанныеМнЧ);
								КонецЕсли;
								
								СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
								СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
								
								СтрокаМнЧ.Данные.Вставить("П00012М111003", СтруктураРеквизитовФормы.КБК_ФБ);
								СтрокаМнЧ.Данные.Вставить("П00012М112003", 0);
								СтрокаМнЧ.Данные.Вставить("П00012М113003", 0);
								СтрокаМнЧ.Данные.Вставить("П00012М114003", 0);
								
								СтрокаМнЧ.Данные.Вставить("П00012М120603", КПП_ОП);
								СтрокаМнЧ.Данные.Вставить("П00012М121003", СтруктураРеквизитовФормы.КБК_БСРФ);
								СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
								СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
								СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
									- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
								
								ЭтоПерваяСтрокаМнЧ = Ложь;
								
							КонецЦикла;
							
						КонецЕсли;
						
					ИначеЕсли ВариантРасчета = 2 Тогда
						
						Если ДекларацияПоГоловнойОрганизации Тогда
							
							РазделяемаяСуммаНалогаВФедБюдж   = 0;
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
								ДанныеРеглОтчета, Листы02, "П000020033003", Усл);
							
							Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
								
								ЕстьЛист02_5_РС_1 = Ложь;
								Усл = Новый Структура("П000250000300", "1");
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(
										Листы02_5, Усл) <> Неопределено Тогда
										ЕстьЛист02_5_РС_1 = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								Если ЕстьЛист02_5_РС_1 Тогда
									Усл = Новый Структура("П000250000100,П000250000300",
									СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "1");
								Иначе
									Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
									СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), "4", КПП);
								КонецЕсли;
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02_5, "П000250012103", Усл);
								КонецЦикла;
								
							Иначе
								
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь));
								РазделяемаяСуммаНалогаВБюджСубРФ = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02, "П000020034003", Усл);
								
							КонецЕсли;
							
							Если ЭтоПерваяСтрокаМнЧ Тогда
								СтрокаМнЧ = ДанныеМнЧ.Строки[0];
							Иначе
								СтрокаМнЧ = НоваяСтрока_Раздел1_2(ИмяФормы, ДанныеМнЧ);
							КонецЕсли;
							
							СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
							СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
							
							СтрокаМнЧ.Данные.Вставить("П00012М111003", СтруктураРеквизитовФормы.КБК_ФБ);
							СтрокаМнЧ.Данные.Вставить("П00012М112003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М113003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М114003", РазделяемаяСуммаНалогаВФедБюдж
								- СтрокаМнЧ.Данные["П00012М112003"] - СтрокаМнЧ.Данные["П00012М113003"]);
							
							СтрокаМнЧ.Данные.Вставить("П00012М120603", КПП);
							СтрокаМнЧ.Данные.Вставить("П00012М121003", СтруктураРеквизитовФормы.КБК_БСРФ);
							СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
							СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
								- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
							
							ЭтоПерваяСтрокаМнЧ = Ложь;
							
						ИначеЕсли ЭтоОбособленноеПодразделение Тогда
							
							ПереченьКПП = Новый Массив;
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								Для каждого Лист02_5 Из Листы02_5 Цикл
									КПП_ОП = СокрЛП(Лист02_5.Данные["П000250000400"]);
									Если ПереченьКПП.Найти(КПП_ОП) = Неопределено Тогда
										ПереченьКПП.Добавить(КПП_ОП);
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
							Для Каждого КПП_ОП Из ПереченьКПП Цикл
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								
								Усл = Новый Структура("П000250000100,П000250000400",
								СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь), КПП_ОП);
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(
									ДанныеРеглОтчета, Листы02_5, "П000250012103", Усл);
								КонецЦикла;
								
								Если ЭтоПерваяСтрокаМнЧ Тогда
									СтрокаМнЧ = ДанныеМнЧ.Строки[0];
								Иначе
									СтрокаМнЧ = НоваяСтрока_Раздел1_2(ИмяФормы, ДанныеМнЧ);
								КонецЕсли;
								
								СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
								СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
								
								СтрокаМнЧ.Данные.Вставить("П00012М111003", СтруктураРеквизитовФормы.КБК_ФБ);
								СтрокаМнЧ.Данные.Вставить("П00012М112003", 0);
								СтрокаМнЧ.Данные.Вставить("П00012М113003", 0);
								СтрокаМнЧ.Данные.Вставить("П00012М114003", 0);
								
								СтрокаМнЧ.Данные.Вставить("П00012М120603", КПП_ОП);
								СтрокаМнЧ.Данные.Вставить("П00012М121003", СтруктураРеквизитовФормы.КБК_БСРФ);
								СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
								СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
								СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
									- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
								
								ЭтоПерваяСтрокаМнЧ = Ложь;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_2, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
					ДанныеРеглОтчета.Модифицированность = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе// "ФормаОтчета2022Кв4"
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			ИНН     = СокрЛП(ТабличныйДокумент.Область("ИНН").Значение);
		Иначе
			ИНН     = СокрЛП(СтруктураДанныхТитульный.ИНН);
		КонецЕсли;
		
		Если ПоМесту <> "231" И ((ЭтоКвартальныйОтчет И (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9))
			ИЛИ ОтчетныйМесяц = 11) Тогда
			
			ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
			ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
			
			Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
			
			ЗаполнятьРаздел1_2 = Ложь;
			
			Если ЭтоОбособленноеПодразделение Тогда
				
				Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
						ЗаполнятьРаздел1_2 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
				
				Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
				Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Усл) <> Неопределено Тогда
					ЗаполнятьРаздел1_2 = Истина;
				КонецЕсли;
				
			Иначе
				
				Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,06,07,08,14,15,16,17,18,19,20", ",", Ложь));
				Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Усл) <> Неопределено Тогда
					ЗаполнятьРаздел1_2 = Истина;
				КонецЕсли;
				
				Если НЕ ЗаполнятьРаздел1_2 Тогда
					
					Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_5 = Лист02.Строки[4].Строки;
						Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
							ЗаполнятьРаздел1_2 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаполнятьРаздел1_2 Тогда
				
				ПереченьОКТМО = Новый Массив;
				
				Если ЭтоКонсолидированнаяГруппа Тогда
					
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_6 = Лист02.Строки[5].Строки;
						Для каждого Лист02_6 Из Листы02_6 Цикл
							ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
							Если ЗначениеЗаполнено(ОКТМО) И ПереченьОКТМО.Найти(ОКТМО) = Неопределено Тогда
								ПереченьОКТМО.Добавить(ОКТМО);
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Если ПереченьОКТМО.Количество() = 0 Тогда
						ПереченьОКТМО.Добавить("");
					КонецЕсли;
					
				Иначе
					
					ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
					Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
						
						ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
						СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
						
						СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
						СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
						РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
						СтруктураПараметров);
						
						ОКТМО = СокрЛП(ОргСведения.ОКТМО);
						
					КонецЕсли;
					ПереченьОКТМО.Добавить(ОКТМО);
					
				КонецЕсли;
				
				СочетанияЗначений = Новый Массив;
				
				Для каждого ОКТМО Из ПереченьОКТМО Цикл
					
					Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
					ИначеЕсли ОтчетныйМесяц = 9 Тогда
						Если АвансовыеПлатежиРазличаются(ИмяФормы,
								ДанныеРеглОтчета, СтруктураДанныхТитульный, ТабличныйДокумент, ОКТМО) Тогда
							СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "24", ОКТМО));
							СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
						Иначе
							СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
						КонецЕсли;
					Иначе //ОтчетныйМесяц = 11
						Если ЕстьАвансовыеПлатежи(ИмяФормы,
								ДанныеРеглОтчета, СтруктураДанныхТитульный, ТабличныйДокумент, ОКТМО) Тогда
							СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
						Иначе
							СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
					ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
					СтруктураРеквизитовФормы, ДанныеРеглОтчета.мСтруктураМногоуровневыхРазделов, "Раздел1_2");
				КонецЕсли;
				
				Раздел1_2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				
				Ветка = Раздел1_2.Строки[0];
				
				Ветка.Данные.Вставить("ПризнакВключения", "V");
				
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
				
				ЭтоПерваяСтрокаМнЧ = Истина;
				
				ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
				Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
						ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для каждого ТекСочетаниеЗначений Из СочетанияЗначений Цикл
					
					Если ЭтоПерваяСтрокаМнЧ Тогда
						СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Иначе
						СтрокаМнЧ = ДанныеМнЧ.Строки.Добавить();
						СтрокаМнЧ.Данные = Новый Структура;
						СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
					КонецЕсли;
					
					СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
					СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
					
					СтрокаМнЧ.Данные.Вставить("П00012М111003", ?(ЭтоКонсолидированнаяГруппа,
					СтруктураРеквизитовФормы.КБК_ФБ_КГН, СтруктураРеквизитовФормы.КБК_ФБ));
					СтрокаМнЧ.Данные.Вставить("П00012М112003", 0);
					СтрокаМнЧ.Данные.Вставить("П00012М113003", 0);
					СтрокаМнЧ.Данные.Вставить("П00012М114003", 0);
					
					СтрокаМнЧ.Данные.Вставить("П00012М121003", ?(ЭтоКонсолидированнаяГруппа,
					СтруктураРеквизитовФормы.КБК_БСРФ_КГН, СтруктураРеквизитовФормы.КБК_БСРФ));
					СтрокаМнЧ.Данные.Вставить("П00012М122003", 0);
					СтрокаМнЧ.Данные.Вставить("П00012М123003", 0);
					СтрокаМнЧ.Данные.Вставить("П00012М124003", 0);
					
					ВариантРасчета = Неопределено;
					Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
						ВариантРасчета = 1;
					ИначеЕсли ОтчетныйМесяц = 9 Тогда
						ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, 1);
					Иначе //ОтчетныйМесяц = 11
						ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, Неопределено);
					КонецЕсли;
					
					ЭтоОКТМООтветственногоУчастника = Ложь;
					Если ЭтоКонсолидированнаяГруппа Тогда
						Если ТекСочетаниеЗначений.ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов Тогда
							Усл = Новый Структура("П000260000100,П000260000200,П000260000300", ИНН, КПП, ТекСочетаниеЗначений.ОКТМО);
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_6 = Лист02.Строки[5].Строки;
								Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_6, Усл) <> Неопределено Тогда
									ЭтоОКТМООтветственногоУчастника = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					РазделяемаяСуммаНалогаВФедБюдж = 0;
					РазделяемаяСуммаНалогаВБюджСубРФ = 0;
					
					Если ВариантРасчета = 1 Тогда
						
						Если ДекларацияПоГоловнойОрганизации Тогда
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020030003", Усл);
							
							Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
								
								ЕстьЛист02_5_РС_1 = Ложь;
								Усл = Новый Структура("П000250000300", "1");
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
										ЕстьЛист02_5_РС_1 = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								Если ЕстьЛист02_5_РС_1 Тогда
									Усл = Новый Структура("П000250000100,П000250000300",
									СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "1");
								Иначе
									Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
									СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "4", КПП);
								КонецЕсли;
								
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_5, "П000250012003", Усл);
								КонецЦикла;
								
							Иначе
								
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
								РазделяемаяСуммаНалогаВБюджСубРФ = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020031003", Усл);
								
							КонецЕсли;
							
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							
							Если ЭтоОКТМООтветственногоУчастника Тогда
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
								РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020030003", Усл);
							КонецЕсли;
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Усл = Новый Структура("П000260000300", ТекСочетаниеЗначений.ОКТМО);
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_6 = Лист02.Строки[5].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_6, "П000260012003", Усл);
							КонецЦикла;
							
						ИначеЕсли ЭтоОбособленноеПодразделение Тогда
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_5, "П000250012003", Усл);
							КонецЦикла;
							
						КонецЕсли;
						
					ИначеЕсли ВариантРасчета = 2 Тогда
						
						Если ДекларацияПоГоловнойОрганизации Тогда
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020033003", Усл);
							
							Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
								
								ЕстьЛист02_5_РС_1 = Ложь;
								Усл = Новый Структура("П000250000300", "1");
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									Если РегламентированнаяОтчетностьКлиентСервер.ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
										ЕстьЛист02_5_РС_1 = Истина;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								РазделяемаяСуммаНалогаВБюджСубРФ = 0;
								Если ЕстьЛист02_5_РС_1 Тогда
									Усл = Новый Структура("П000250000100,П000250000300",
									СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "1");
								Иначе
									Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
									СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь), "4", КПП);
								КонецЕсли;
								Для каждого Лист02 Из Листы02 Цикл
									Листы02_5 = Лист02.Строки[4].Строки;
									РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
									+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_5, "П000250012103", Усл);
								КонецЦикла;
								
							Иначе
								
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
								РазделяемаяСуммаНалогаВБюджСубРФ = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020034003", Усл);
								
							КонецЕсли;
							
						ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
							
							Если ЭтоОКТМООтветственногоУчастника Тогда
								Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь));
								РазделяемаяСуммаНалогаВФедБюдж = РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02, "П000020033003", Усл);
							КонецЕсли;
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Усл = Новый Структура("П000260000300", ТекСочетаниеЗначений.ОКТМО);
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_6 = Лист02.Строки[5].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_6, "П000260012103", Усл);
							КонецЦикла;
							
						ИначеЕсли ЭтоОбособленноеПодразделение Тогда
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь));
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ РегламентированнаяОтчетностьКлиентСервер.СуммаПоказателяПоВеткам(ДанныеРеглОтчета, Листы02_5, "П000250012103", Усл);
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаМнЧ.Данные.Вставить("П00012М112003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
					СтрокаМнЧ.Данные.Вставить("П00012М113003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
					СтрокаМнЧ.Данные.Вставить("П00012М114003", РазделяемаяСуммаНалогаВФедБюдж
					- СтрокаМнЧ.Данные["П00012М112003"] - СтрокаМнЧ.Данные["П00012М113003"]);
					
					СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
					СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ДанныеРеглОтчета, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
					СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
					- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
					
					ЭтоПерваяСтрокаМнЧ = Ложь;
					
				КонецЦикла;
				
				РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_2, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
				Если ТипЗнч(ДанныеРеглОтчета) = Тип("ФормаКлиентскогоПриложения") Тогда
					ДанныеРеглОтчета.Модифицированность = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция АвансовыеПлатежиРазличаются(ИмяФормы,
									ДанныеРеглОтчета,
									СтруктураДанныхТитульный,
									ТабличныйДокумент,
									Знач ОКТМО = Неопределено)
	
	СтруктураРеквизитовФормы = ДанныеРеглОтчета.СтруктураРеквизитовФормы;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП_ГолОрг = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту    = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		КПП_ГолОрг = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту    = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	ОКТМО_ГолОрг = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ДекларацияПоГоловнойОрганизации = НЕ ЭтоОбособленноеПодразделение;
		
		Если ДекларацияПоГоловнойОрганизации Тогда
			
			ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
					
					Прервать;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр300 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020030003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И Стр300 <> Стр330 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
				ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Для каждого Лист02_5 Из Листы02_5 Цикл
						ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
						ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
						КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
						
						Стр120 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012003"]);
						Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
						
						Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
							ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
							ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр290 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020029003"]);
					Стр300 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020030003"]);
					Стр310 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020031003"]);
					Стр320 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020032003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					Стр340 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020034003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
						И (Стр290 <> Стр320 ИЛИ Стр300 <> Стр330 ИЛИ Стр310 <> Стр340) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоОбособленноеПодразделение Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр120 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012003"]);
					Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	Иначе// "ФормаОтчета2022Кв4"
		
		ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
		ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
		
		Если ДекларацияПоГоловнойОрганизации Тогда
			
			ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
					
					Прервать;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр300 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020030003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И Стр300 <> Стр330 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
				ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Для каждого Лист02_5 Из Листы02_5 Цикл
						ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
						ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
						КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
						
						Стр120 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012003"]);
						Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
						
						Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
							ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
							ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр290 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020029003"]);
					Стр300 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020030003"]);
					Стр310 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020031003"]);
					Стр320 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020032003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					Стр340 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020034003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
						И (Стр290 <> Стр320 ИЛИ Стр300 <> Стр330 ИЛИ Стр310 <> Стр340) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоОбособленноеПодразделение Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр120 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012003"]);
					Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
			
			Если ЗначениеЗаполнено(ОКТМО) Тогда
				
				СуммаСтр120 = 0;
				СуммаСтр121 = 0;
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_6 = Лист02.Строки[5].Строки;
					Для каждого Лист02_6 Из Листы02_6 Цикл
						Лист02_6_ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
						
						Если ЗначениеЗаполнено(Лист02_6_ОКТМО) И Лист02_6_ОКТМО = ОКТМО Тогда
							СуммаСтр120 = СуммаСтр120 + ОкрЧФ(ДанныеРеглОтчета, Лист02_6.Данные["П000260012003"]);
							СуммаСтр121 = СуммаСтр121 + ОкрЧФ(ДанныеРеглОтчета, Лист02_6.Данные["П000260012103"]);
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Если СуммаСтр120 <> СуммаСтр121 Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
				Если ОКТМО = ОКТМО_ГолОрг Тогда
					
					ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
					
					Для каждого Лист02 Из Листы02 Цикл
						ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
						
						Стр300 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020030003"]);
						Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
						
						Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И Стр300 <> Стр330 Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция ЕстьАвансовыеПлатежи(ИмяФормы,
							 ДанныеРеглОтчета,
							 СтруктураДанныхТитульный,
							 ТабличныйДокумент,
							 Знач ОКТМО = Неопределено)
	
	СтруктураРеквизитовФормы = ДанныеРеглОтчета.СтруктураРеквизитовФормы;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту    = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
		КПП_ГолОрг = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
	Иначе
	ПоМесту    = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КПП_ГолОрг = СокрЛП(СтруктураДанныхТитульный.КПП);
	КонецЕсли;
	ОКТМО_ГолОрг = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ДекларацияПоГоловнойОрганизации = НЕ ЭтоОбособленноеПодразделение;
		
		Если ДекларацияПоГоловнойОрганизации Тогда
			
			ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
					
					Прервать;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И ЗначениеЗаполнено(Стр330) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
				ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Для каждого Лист02_5 Из Листы02_5 Цикл
						ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
						ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
						КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
						
						Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
						
						Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
							ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
							ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,13,15,16,17,19,20,21,22", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр320 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020032003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					Стр340 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020034003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
						И (ЗначениеЗаполнено(Стр320) ИЛИ ЗначениеЗаполнено(Стр330) ИЛИ ЗначениеЗаполнено(Стр340)) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоОбособленноеПодразделение Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,13,15,16,18,20,21,22", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	Иначе// "ФормаОтчета2022Кв4"
		
		ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
		ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
		
		Если ДекларацияПоГоловнойОрганизации Тогда
			
			ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
					
					Прервать;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И ЗначениеЗаполнено(Стр330) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
				ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Для каждого Лист02_5 Из Листы02_5 Цикл
						ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
						ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
						КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
						
						Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
						
						Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
							ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
							ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
			Иначе
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр320 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020032003"]);
					Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
					Стр340 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020034003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
						И (ЗначениеЗаполнено(Стр320) ИЛИ ЗначениеЗаполнено(Стр330) ИЛИ ЗначениеЗаполнено(Стр340)) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоОбособленноеПодразделение Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18,20", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр121 = ОкрЧФ(ДанныеРеглОтчета, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
			
			Если ЗначениеЗаполнено(ОКТМО) Тогда
				
				СуммаСтр121 = 0;
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_6 = Лист02.Строки[5].Строки;
					Для каждого Лист02_6 Из Листы02_6 Цикл
						Лист02_6_ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
						
						Если ЗначениеЗаполнено(Лист02_6_ОКТМО) И Лист02_6_ОКТМО = ОКТМО Тогда
							СуммаСтр121 = СуммаСтр121 + ОкрЧФ(ДанныеРеглОтчета, Лист02_6.Данные["П000260012103"]);
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СуммаСтр121) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
				Если ОКТМО = ОКТМО_ГолОрг Тогда
					
					ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19,20", ",", Ложь);
					
					Для каждого Лист02 Из Листы02 Цикл
						ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
						
						Стр330 = ОкрЧФ(ДанныеРеглОтчета, Лист02.Данные["П000020033003"]);
						
						Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И ЗначениеЗаполнено(Стр330) Тогда
							
							Возврат Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

Функция НоваяСтрока_Раздел1_2(ИмяФормы, ДанныеМногострочнойЧасти)
	
	// "ФормаОтчета2025Кв1", "ФормаОтчета2022Кв4".
	//
	СтрокаМнЧ = ДанныеМногострочнойЧасти.Строки.Добавить();
	СтрокаМнЧ.Данные = Новый Структура;
	СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
	СтрокаМнЧ.Данные.Вставить("П00012М100103", "");
	СтрокаМнЧ.Данные.Вставить("П00012М101003", "");
	СтрокаМнЧ.Данные.Вставить("П00012М111003", "");
	СтрокаМнЧ.Данные.Вставить("П00012М112003", 0);
	СтрокаМнЧ.Данные.Вставить("П00012М113003", 0);
	СтрокаМнЧ.Данные.Вставить("П00012М114003", 0);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		СтрокаМнЧ.Данные.Вставить("П00012М120603", "");
		
	КонецЕсли;
	
	СтрокаМнЧ.Данные.Вставить("П00012М121003", "");
	СтрокаМнЧ.Данные.Вставить("П00012М122003", 0);
	СтрокаМнЧ.Данные.Вставить("П00012М123003", 0);
	СтрокаМнЧ.Данные.Вставить("П00012М124003", 0);
	
	СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
	
	Возврат СтрокаМнЧ;
	
КонецФункции

Функция НоваяСтрока_Раздел1_1(ИмяФормы, ДанныеМногострочнойЧасти)
	
	// "ФормаОтчета2025Кв1", "ФормаОтчета2022Кв4".
	//
	СтрокаМнЧ = ДанныеМногострочнойЧасти.Строки.Добавить();
	СтрокаМнЧ.Данные = Новый Структура;
	СтрокаМнЧ.Данные.Вставить("П00011М101003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М103003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М104003", 0);
	СтрокаМнЧ.Данные.Вставить("П00011М105003", 0);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		СтрокаМнЧ.Данные.Вставить("П00011М105603", "");
		
	КонецЕсли;
	
	СтрокаМнЧ.Данные.Вставить("П00011М106003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М107003", 0);
	СтрокаМнЧ.Данные.Вставить("П00011М108003", 0);
	
	СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
	
	Возврат СтрокаМнЧ;
	
КонецФункции

Функция ОкрЧФ(Форма, ИсходноеЗначение)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ИсходноеЗначение);
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
		
		Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
											 ПараметрыВыгрузки,
											 ДеревоВыгрузки,
											 РезультатВыгрузки,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов) Тогда
			
			РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
			
			Возврат РезультатВыгрузки;
			
		КонецЕсли;
		
		ЗаполнитьДанными(ИмяФормы,
						 ДанныеОтчета,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов);
		
	Иначе
		
		СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета);
		
		ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
		
		Если НЕ ВыгрузкаВозможна(ИмяФормы,
								 ПараметрыВыгрузки,
								 РезультатВыгрузки,
								 СтруктураРеквизитовФормы,
								 ДеревоВыгрузки,
								 ДанныеОтчета) Тогда
			
			РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
			
			Возврат РезультатВыгрузки;
			
		КонецЕсли;
		
		ЗаполнитьДанными_2016Кв4(ИмяФормы,
								 ПараметрыВыгрузки,
								 ДеревоВыгрузки,
								 РезультатВыгрузки,
								 ДанныеОтчета,
								 СтруктураРеквизитовФормы);
		
		Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(РезультатВыгрузки, ДеревоВыгрузки) Тогда
			
			РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
			
			Возврат РезультатВыгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "Прибыль");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов = Неопределено) Экспорт
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		ДанныеОтчета = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), Раздел.Значение);
		КонецЦикла;
		
		Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
			ДанныеОтчета.Вставить(Раздел.Ключ);
		КонецЦикла;
		
	Иначе
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
		= СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
		
		ДанныеОтчета = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета_2016Кв4(ИмяФормы, СтруктураРеквизитовФормы);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
		КонецЦикла;
		
		Для Каждого Раздел Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
			
			Для Каждого Лист Из Раздел.Значение Цикл
				Лист.Данные = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные);
			КонецЦикла;
			
			ДанныеОтчета.Вставить(Раздел.Ключ, Раздел.Значение);
			
		КонецЦикла;
		
		ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи", Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ПараметрыВыгрузки.Вставить("КодМестИО", СокрЛП(Титульный.КодМестИО));
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
		
		ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Прибыль");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "NO_PRIB"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
		        ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	ПоМесту = ПараметрыВыгрузки.ПоМесту;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ВозможныеКодыПоМесту = СтрРазделить(
		"213,214,215,216,220,223,225,226,228,229,230,231,234,236,237,238,246,249,331,332,333,351", ",", Ложь);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) > 2022 Тогда
			ВозможныеКодыПоМесту = СтрРазделить(
			"213,214,215,216,218,220,223,225,226,228,229,230,231,234,236,237,238,246,249,351", ",", Ложь);
		Иначе
			ВозможныеКодыПоМесту = СтрРазделить(
			"213,214,215,216,218,220,223,225,226,228,229,230,231,234,236,237,238,239,246,249,351", ",", Ложь);
		КонецЕсли;
		
	Иначе
		
		Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) > 2022 Тогда
			ВозможныеКодыПоМесту = СтрРазделить(
			"213,214,215,216,218,220,223,225,226,228,229,230,231,234,235,236,237,238,246,249", ",", Ложь);
		Иначе
			ВозможныеКодыПоМесту = СтрРазделить(
			"213,214,215,216,218,220,223,225,226,228,229,230,231,234,235,236,237,238,239,246,249", ",", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ВозможныеКодыПериода = СтрРазделить("21,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50", ",", Ложь);
		
		ВозможныеКодыПериода_Лист03А = СтрРазделить("21,31,33,34,37,40,43,46", ",", Ложь);
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		ВозможныеКодыПериода = СтрРазделить(
		"21,31,33,34,13,14,15,16,35,36,37,38,39,40,41,42,43,44,45,46,57,58,59,60,61,62,63,64,65,66,67,68,50", ",", Ложь);
		
		ВозможныеКодыПериода_Лист03А = СтрРазделить("21,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,50", ",", Ложь);
		
	КонецЕсли;
	
	ВозможныеКодыФормыРеорганизции = СтрРазделить("1,2,3,5,6,9,0", ",", Ложь);
	
	Мас_0_1 = СтрРазделить("0,1", ",", Ложь);
	
	Мас_1_2 = СтрРазделить("1,2", ",", Ложь);
	Мас_1_3 = СтрРазделить("1,2,3", ",", Ложь);
	Мас_1_4 = СтрРазделить("1,2,3,4", ",", Ложь);
	Мас_1_5 = СтрРазделить("1,2,3,4,5", ",", Ложь);
	Мас_1_6 = СтрРазделить("1,2,3,4,5,6", ",", Ложь);
	Мас_1_7 = СтрРазделить("1,2,3,4,5,6,7", ",", Ложь);
	Мас_1_8 = СтрРазделить("1,2,3,4,5,6,7,8", ",", Ложь);
	Мас_1_9 = СтрРазделить("1,2,3,4,5,6,7,8,9", ",", Ложь);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ПризнакиНП_Лист02   = СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22", ",", Ложь);
		ПризнакиНП_Лист02_4 = СтрРазделить("01,03,04,05,06,07,08,13,15,16,17,18,19,20,21,22", ",", Ложь);
		ПризнакиНП_Лист02_5 = СтрРазделить("01,02,03,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22", ",", Ложь);
		КодыРасходов_Лист02_7А = СтрРазделить("01,02,03,04,05,06,07", ",", Ложь);
		КодыРасходов_Лист02_7Г = СтрРазделить("01,02,03,04,05,06,07", ",", Ложь);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		ПризнакиНП_Лист02   = СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", ",", Ложь);
		ПризнакиНП_Лист02_4 = СтрРазделить("01,03,04,05,06,07,08,14,15,16,17,18,19,20", ",", Ложь);
		ПризнакиНП_Лист02_5 = СтрРазделить("01,02,03,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", ",", Ложь);
		КодыРасходов_Лист02_7А = СтрРазделить("01,02,03,04,05,06,07", ",", Ложь);
		КодыРасходов_Лист02_7Г = СтрРазделить("01,02,03,04,05,06,07", ",", Ложь);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		
		ПризнакиНП_Лист02   = СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14,15,16,17,18,19", ",", Ложь);
		ПризнакиНП_Лист02_4 = СтрРазделить("01,03,04,05,06,07,08,14,15,16,17,18,19", ",", Ложь);
		ПризнакиНП_Лист02_5 = СтрРазделить("01,02,03,06,07,08,09,10,11,12,13,14,15,16,17,18,19", ",", Ложь);
		КодыРасходов_Лист02_7А = СтрРазделить("01,02,03,04,05,06,07", ",", Ложь);
		
	Иначе//"ФормаОтчета2019Кв4"
		
		ПризнакиНП_Лист02   = СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14", ",", Ложь);
		ПризнакиНП_Лист02_4 = СтрРазделить("01,03,04,05,06,07,08,14", ",", Ложь);
		ПризнакиНП_Лист02_5 = СтрРазделить("01,02,03,06,07,08,09,10,11,12,13,14", ",", Ложь);
		КодыРасходов_Лист02_7А = СтрРазделить("01,02,03,04,05,06", ",", Ложь);
		
	КонецЕсли;
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ОтчетЗаГод = ОтчетныйМесяц = 12;
	
	// Титульный лист.
	//
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан ИНН организации (обособленного подразделения)", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан ИНН организации (обособленного подразделения), не состоящий из 10 цифр", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан КПП организации (обособленного подразделения)", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан КПП организации (обособленного подразделения), не состоящий из 9 символов",
		"Титульный", "КПП");
		СтатусПроверки = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ПоМесту) Тогда
			Если ВозможныеКодыПоМесту.Найти(ПоМесту) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан некорректный код места представления декларации", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			Иначе
				Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
				Если ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны 50",
						"Титульный", "КПП");
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли ПоМесту = "218"
					И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")) Тогда
					Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Если код места представления декларации равен 218, 5-й и 6-й символы КПП организации должны быть равны 50, 01 или 4U",
						"Титульный", "КПП");
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если Символы56КПП = "4U" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Если код места представления декларации равен " + ПоМесту
						+ ", 5-й и 6-й символы КПП организации не должны быть равны 4U", "Титульный", "КПП");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				Если (ПоМесту = "229" ИЛИ ПоМесту = "234" ИЛИ ПоМесту = "238")
					И НЕ (ПараметрыВыгрузки.Период = "34" ИЛИ ПараметрыВыгрузки.Период = "50") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Если код места представления декларации равен 229, 234 или 238,"
					+ " код налогового (отчетного) периода должен быть равен 34 или 50", "Титульный", "ПоМесту");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ПоМесту = "331" ИЛИ ПоМесту = "332" ИЛИ ПоМесту = "333" Тогда
					Если Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 2025 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Код места представления декларации не может быть равен 331, 332 или 333"
						+ " при значении отчетного года, равном 2025", "Титульный", "ПоМесту");
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодМестИО) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Код государства (территории) налогового резиденства иностранной организации должен быть заполнен"
						+ " при коде места представления декларации, равном 331, 332 или 333", "Титульный", "ПоМесту");
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодМестИО) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Код государства (территории) налогового резиденства иностранной организации не должен быть заполнен"
						+ " при коде места представления декларации, неравном 331, 332 или 333", "Титульный", "ПоМесту");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
				
				Если (ПоМесту = "229" ИЛИ ПоМесту = "234")
					И НЕ (ПараметрыВыгрузки.Период = "34" ИЛИ ПараметрыВыгрузки.Период = "50") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Если код места представления декларации равен 229 или 234,"
					+ " код налогового (отчетного) периода должен быть равен 34 или 50", "Титульный", "ПоМесту");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задано наименование организации (обособленного подразделения)", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код налогового (отчетного) периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан некорректный код налогового (отчетного) периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан код налогового органа, не состоящий из 4 цифр",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПоМесту) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код места представления налоговой декларации",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика, налогового агента",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Код формы реорганизации может принимать одно из значений: "
				+ СтрСоединить(ВозможныеКодыФормыРеорганизции, ", "), "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации", "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации", "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозможныеКодыПоМесту.Найти(ПоМесту) = Неопределено
	 ИЛИ ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		
		Возврат СтатусПроверки;
		
	КонецЕсли;
	
	// Подраздел 1.1.
	//
	ИмяРаздела = "Раздел1_1";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	Ветка = ДеревоРаздела.Строки[0];
	НомСтраницы = "1";
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		РазделДолженВыгружаться = СтрРазделить("229,231,238", ",", Ложь).Найти(ПоМесту) = Неопределено;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		РазделДолженВыгружаться = СтрРазделить("229,231", ",", Ложь).Найти(ПоМесту) = Неопределено;
		
	Иначе// "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		РазделДолженВыгружаться = СтрРазделить("229,231,235", ",", Ложь).Найти(ПоМесту) = Неопределено;
		
	КонецЕсли;
	
	РазделНеДолженВыгружаться = НЕ РазделДолженВыгружаться;
	
	Если РазделНеДолженВыгружаться И ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Подраздел 1.1 не должен быть включен в состав декларации при коде места представления, равном "
		+ ПоМесту, ИмяРаздела, "ПризнакВключения", НомСтраницы);
		СтатусПроверки = Ложь;
		
	ИначеЕсли РазделДолженВыгружаться Тогда
		
		Если НЕ ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 1.1 должен быть включен в состав декларации при коде места представления, равном "
			+ ПоМесту, ИмяРаздела, "ПризнакВключения", НомСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ ЗаполненаМногострочнаяЧасть(
			ИмяФормы, ДанныеМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Подраздел 1.1 должен быть заполнен при коде места представления, равном "
			+ ПоМесту, ИмяРаздела, "П00011М101003_1", НомСтраницы);
			СтатусПроверки = Ложь;
			
		Иначе
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00011М101003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.1: в группе " + НомСтроки + " строк 010-080"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 8 или 11 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00011М103003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
					ИЛИ Окр(СтрокаМнЧ.Данные["П00011М104003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00011М105003"]) <> 0 Тогда
					Если ДлинаЗначПок <> 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.1: в группе " + НомСтроки + " строк 010-080"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
						", не состоящий из 20 символов,") + " в строке 030", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					ИмяПок = "П00011М105603";
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
					Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
						ИЛИ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00011М106003"]))
						ИЛИ Окр(СтрокаМнЧ.Данные["П00011М107003"]) <> 0
						ИЛИ Окр(СтрокаМнЧ.Данные["П00011М108003"]) <> 0 Тогда
						Если ДлинаЗначПок <> 9 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.1: в группе " + НомСтроки + " строк 010-080"
							+ ?(ДлинаЗначПок = 0, " не", "") + " задан КПП по месту нахождения организации (обособленного подразделения)"
							+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ИмяПок = "П00011М106003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
					ИЛИ (СтрокаМнЧ.Данные.Свойство("П00011М105603") // начиная с "ФормаОтчета2025Кв1"
					И ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00011М105603"])))
					ИЛИ Окр(СтрокаМнЧ.Данные["П00011М107003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00011М108003"]) <> 0 Тогда
					Если ДлинаЗначПок <> 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.1: в группе " + НомСтроки + " строк 010-080"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
						", не состоящий из 20 символов,") + " в строке 060", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подраздел 1.2.
	//
	ИмяРаздела = "Раздел1_2";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	Ветка = ДеревоРаздела.Строки[0];
	НомСтраницы = "1";
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		РазделНеДолженВыгружаться_Условие1 = СтрРазделить("231,238", ",", Ложь).Найти(ПоМесту) <> Неопределено;
		
		РазделНеДолженВыгружаться_Условие2
			= СтрРазделить("34,46,50", ",", Ложь).Найти(ПараметрыВыгрузки.Период) <> Неопределено;
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		РазделНеДолженВыгружаться_Условие1 = ПоМесту = "231";
		
		РазделНеДолженВыгружаться_Условие2
			= СтрРазделить("34,46,50,68", ",", Ложь).Найти(ПараметрыВыгрузки.Период) <> Неопределено;
		
	КонецЕсли;
	
	РазделНеДолженВыгружаться = РазделНеДолженВыгружаться_Условие1 ИЛИ РазделНеДолженВыгружаться_Условие2;
	
	Если РазделНеДолженВыгружаться И ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
		
		Если РазделНеДолженВыгружаться_Условие1 И РазделНеДолженВыгружаться_Условие2 Тогда
			ТекстСообщ = "коде места представления, равном " + ПоМесту
			+ ", и (или) коде налогового (отчетного) периода, равном " + ПараметрыВыгрузки.Период;
		ИначеЕсли РазделНеДолженВыгружаться_Условие1 Тогда
			ТекстСообщ = "коде места представления, равном " + ПоМесту;
		Иначе // РазделНеДолженВыгружаться_Условие2
			ТекстСообщ = "коде налогового (отчетного) периода, равном " + ПараметрыВыгрузки.Период;
		КонецЕсли;
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.2 не должен быть включен в состав декларации при "
		+ ТекстСообщ, ИмяРаздела, "ПризнакВключения", НомСтраницы);
		СтатусПроверки = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
		
		Если НЕ ЗаполненаМногострочнаяЧасть(
			ИмяФормы, ДанныеМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.2 должен быть заполнен, если он включен в состав декларации",
			ИмяРаздела, "П00012М100103_1", НомСтраницы);
			СтатусПроверки = Ложь;
			
		Иначе
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00012М101003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.2: в группе " + НомСтроки + " строк 001-240"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 8 или 11 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00012М111003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М112003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М113003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М114003"]) <> 0 Тогда
					Если ДлинаЗначПок <> 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.2: в группе " + НомСтроки + " строк 001-240"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
						", не состоящий из 20 символов,") + " в строке 110", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					ИмяПок = "П00012М120603";
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
					Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
						ИЛИ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00012М121003"]))
						ИЛИ Окр(СтрокаМнЧ.Данные["П00012М122003"]) <> 0
						ИЛИ Окр(СтрокаМнЧ.Данные["П00012М123003"]) <> 0
						ИЛИ Окр(СтрокаМнЧ.Данные["П00012М124003"]) <> 0 Тогда
						Если ДлинаЗначПок <> 9 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,"Подраздел 1.2: в группе " + НомСтроки + " строк 001-240"
							+ ?(ДлинаЗначПок = 0, " не", "") + " задан КПП по месту нахождения организации (обособленного подразделения)"
							+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ИмяПок = "П00012М121003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]))
					ИЛИ (СтрокаМнЧ.Данные.Свойство("П00012М120603") // начиная с "ФормаОтчета2025Кв1"
					И ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00012М120603"])))
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М122003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М123003"]) <> 0
					ИЛИ Окр(СтрокаМнЧ.Данные["П00012М124003"]) <> 0 Тогда
					Если ДлинаЗначПок <> 20 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.2: в группе " + НомСтроки + " строк 001-240"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
						", не состоящий из 20 символов,") + " в строке 210", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подраздел 1.3.
	//
	ИмяРаздела = "Раздел1_3";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	Ветка = ДеревоРаздела.Строки[0];
	НомСтраницы = "1";
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		РазделДолженВыгружаться = СтрРазделить("231,238", ",", Ложь).Найти(ПоМесту) <> Неопределено;
		
		ВидДох_Раздел1_3 = СтрРазделить("10,11,12,13,14,16,17,20,21,23,24,25,31,32,33,34,35,36", ",", Ложь);
		
		Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел1_3",
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			ИмяПок = "П000130001003";
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные[ИмяПок]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: " + ?(ДлинаЗначПок = 0, " не", "")
				+ " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 8 или 11 цифр"),
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М1];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00013М102003";
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
					+ " строк 020-070 не задан код вида дохода", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВидДох_Раздел1_3.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
					+ " строк 020-070 задан некорректный код вида дохода. Возможны значения: "
					+ СтрСоединить(ВидДох_Раздел1_3, ", "), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00013М103003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 20 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки + " строк 020-070"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 20 символов"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли РазделДолженВыгружаться Тогда
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				ТекстСообщ = "Подраздел 1.3 должен быть включен в состав декларации при коде места представления, равном ";
				ИмяПок = "ПризнакВключения";
			Иначе
				ТекстСообщ = "Подраздел 1.3 должен быть заполнен при коде места представления, равном ";
				ИмяПок = "П000130001003";
			КонецЕсли;
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщ + ПоМесту, ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3 должен быть заполнен, если он включен в состав декларации",
			ИмяРаздела, "П000130001003", НомСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М1];
		
		РазделДолженВыгружаться = ПоМесту = "231";
		
		ЗаполненаМногострочнаяЧасть = ЗаполненаМногострочнаяЧасть(
		ИмяФормы, ДанныеМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		Если ЗаполненаМногострочнаяЧасть Тогда
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
				
				ВозможныеКодыВидаПлатежа = Мас_1_9;
				
			Иначе// "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
				
				ВозможныеКодыВидаПлатежа = Мас_1_7;
				
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00013М101003";
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
					+ " строк 010-040 не задан код вида платежа", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозможныеКодыВидаПлатежа.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
					+ " строк 010-040 задан некорректный код вида платежа. Возможны значения: "
					+ СтрСоединить(ВозможныеКодыВидаПлатежа, ", "), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00013М102003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки + " строк 010-040"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 8 или 11 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00013М103003";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 20 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки + " строк 010-040"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 20 символов"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М2];
				
				ЗаполненаПодчиненнаяМногострочнаяЧасть = ЗаполненаМногострочнаяЧасть(
				ИмяФормы, ДанныеПодчМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
				
				Если ЗаполненаПодчиненнаяМногострочнаяЧасть ИЛИ ДанныеПодчМнЧ.Строки.Количество() > 1 Тогда
					
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
						НомПодчСтроки = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
						
						ИмяПок = "П00013М204001";
						ЗначПок = СтрокаПодчМнЧ.Данные[ИмяПок];
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
							+ " строк 010-040 не задан срок уплаты налога",
							ИмяРаздела, ИмяПок + "_" + НомСтроки + "_" + НомПодчСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
							+ " строк 010-040 задан срок уплаты налога, выходящий за пределы периода с 01.01.1900 по 31.12.2099",
							ИмяРаздела, ИмяПок + "_" + НомСтроки + "_" + НомПодчСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3: в группе " + НомСтроки
					+ " строк 010-040 не заполнена строка 040", ИмяРаздела, "П00013М204001_" + НомСтроки + "_1", НомСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли РазделДолженВыгружаться Тогда
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
				ТекстСообщ = "Подраздел 1.3 должен быть включен в состав декларации при коде места представления, равном ";
				ИмяПок = "ПризнакВключения";
			Иначе
				ТекстСообщ = "Подраздел 1.3 должен быть заполнен при коде места представления, равном ";
				ИмяПок = "П00013М101003_1";
			КонецЕсли;
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщ + ПоМесту, ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Подраздел 1.3 должен быть заполнен, если он включен в состав декларации",
			ИмяРаздела, "П00013М101003_1", НомСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Лист 02.
	//
	ИмяРаздела = "Лист02";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Лист02НеДолженВыгружаться = ПоМесту = "231";
	
	Лист02_5ДолженВыгружатьсяОтдельно = СтрРазделить("220,223", ",", Ложь).Найти(ПоМесту) <> Неопределено;
	
	ВключенХотяБыОдинЛист02_5 = Ложь;
	
	Лист02_6_И_Лист02_6б_ДолжныВыгружаться = ПоМесту = "218";
	
	ВключенХотяБыОдинЛист02_6   = Ложь;
	ВключенХотяБыОдинЛист02_6а  = Ложь;
	ВключенХотяБыОдинЛист02_6бА = Ложь;
	ВключенХотяБыОдинЛист02_6бБ = Ложь;
	
	// Страницы Листа 02.
	//
	Для каждого Лист02 Из ДеревоРаздела.Строки Цикл
		
		Если НЕ ЗаполненаСтраницаРаздела(
			ИмяФормы, Лист02, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НомСтраницы_Лист02 = Формат(ДеревоРаздела.Строки.Индекс(Лист02) + 1, "ЧГ=");
		
		Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
			
			Если ЗначениеЗаполнено(Лист02.Данные["ПризнакВключения"]) Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02: Страница " + НомСтраницы_Лист02
				+ " не должна быть включена в состав декларации при коде места представления, равном "
				+ ПоМесту, ИмяРаздела, "ПризнакВключения", НомСтраницы_Лист02);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Лист02.Данные["ПризнакВключения"]) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02: Страница " + НомСтраницы_Лист02
			+ " должна быть включена в состав декларации при включении хотя бы одного из Приложений к Листу 02, относящихся к данной странице",
			ИмяРаздела, "ПризнакВключения", НомСтраницы_Лист02);
			СтатусПроверки = Ложь;
			
		Иначе
			
			ИмяПок = "П000020000100";
			ПризнакНП = СокрЛП(Лист02.Данные[ИмяПок]);
			
			Если НЕ ЗначениеЗаполнено(ПризнакНП) Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": не задан код признака налогоплательщика", ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ПризнакиНП_Лист02.Найти(ПризнакНП) = Неопределено Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": некорректно задан код признака налогоплательщика. Возможны значения: "
				+ СтрСоединить(ПризнакиНП_Лист02, ", "), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
				СтатусПроверки = Ложь;
				
			ИначеЕсли ПризнакНП = "03" Тогда
				
				ИмяПок = "П000020000200";
				Если НЕ ЗначениеЗаполнено(Лист02.Данные[ИмяПок]) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": не задан номер документа", ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					ИмяПок = "П000020000200";
					ТекстСообщения = "";
					Если ЗначениеЗаполнено(Лист02.Данные[ИмяПок])
						И НЕ НомерДокументаСоответствуетТребованиям(Лист02.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
						ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					Конецесли;
					
				КонецЕсли;
				
			ИначеЕсли ПризнакНП = "04" Тогда
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					ИмяПок = "П000020000200";
					ТекстСообщения = "";
					Если НЕ ЗначениеЗаполнено(Лист02.Данные[ИмяПок]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ ": не задан номер документа", ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ НомерДокументаСоответствуетТребованиям(Лист02.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
						ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					Конецесли;
					
				ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					ИмяПок = "П000020000200";
					ТекстСообщения = "";
					Если ЗначениеЗаполнено(Лист02.Данные[ИмяПок])
						И НЕ НомерДокументаСоответствуетТребованиям(Лист02.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
						ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					Конецесли;
					
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
					
					// Серия лицензии.
					//
					ИмяПок = "П000020000301";
					ЗначПок = СокрЛП(Лист02.Данные[ИмяПок]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
						
						СерияЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 3)
						И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначПок);
						ДопТекст = "3 букв русского алфавита";
						
					Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
						
						СерияЛицензииСоответствуетТребованиям = ДлинаЗначПок = 3;
						ДопТекст = "3 символов";
						
					КонецЕсли;
					
					Если НЕ СерияЛицензииСоответствуетТребованиям Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02 + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задана серия лицензии на пользование недрами"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящая из " + ДопТекст), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Номер лицензии.
					//
					ИмяПок = "П000020000302";
					ЗначПок = СокрЛП(Лист02.Данные[ИмяПок]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
						
						НомерЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 5 ИЛИ ДлинаЗначПок = 6)
						И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок);
						ДопТекст = "5-6 цифр";
						
					Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
						
						НомерЛицензииСоответствуетТребованиям = ДлинаЗначПок = 5;
						ДопТекст = "5 символов";
						
					КонецЕсли;
					
					Если НЕ НомерЛицензииСоответствуетТребованиям Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02 + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан номер лицензии на пользование недрами" + ?(ДлинаЗначПок = 0,
						"", ", не состоящий из " + ДопТекст), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Вид лицензии.
					//
					ИмяПок = "П000020000303";
					ЗначПок = СокрЛП(Лист02.Данные[ИмяПок]);
					ДлинаЗначПок = СтрДлина(ЗначПок);
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
						
						ВидЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 2)
						И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначПок);
						ДопТекст = "2 букв русского алфавита";
						
					Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
						
						ВидЛицензииСоответствуетТребованиям = ДлинаЗначПок = 2;
						ДопТекст = "2 символов";
						
					КонецЕсли;
					
					Если НЕ ВидЛицензииСоответствуетТребованиям Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02 + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан вид лицензии на пользование недрами"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из " + ДопТекст), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Порядковый номер нового морского месторождения.
					//
					ИмяПок = "П000020000304";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 2 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02 + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан порядковый номер нового морского месторождения "
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 символов"), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					ИмяПок = "П000020000200";
					ТекстСообщения = "";
					Если ЗначениеЗаполнено(Лист02.Данные[ИмяПок])
						И НЕ НомерДокументаСоответствуетТребованиям(Лист02.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
						ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
						СтатусПроверки = Ложь;
					Конецесли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Лист02.Данные["П000020017103"])
				ИЛИ ЗначениеЗаполнено(Лист02.Данные["П000020017104"])
				ИЛИ ЗначениеЗаполнено(Лист02.Данные["П000020017105"])
				ИЛИ ЗначениеЗаполнено(Лист02.Данные["П000020017106"]) Тогда
				
				ИмяПок = "П000020017103";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер статьи"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000020017104";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер пункта"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000020017105";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер подпункта"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000020017106";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 15 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер закона"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 15 символов"), ИмяРаздела, ИмяПок, НомСтраницы_Лист02);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Страница Прил. 1 к Листу 02.
		//
		Лист02_1 = Лист02.Строки[0].Строки[0];
		Координаты = НомСтраницы_Лист02 + ",1,1";
		
		Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
			
			Если ЗначениеЗаполнено(Лист02_1.Данные["ПризнакВключения"]) Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": Приложение 1 к Листу 02 не должно быть включено в состав декларации при коде места представления, равном "
				+ ПоМесту, "Лист02_1", "ПризнакВключения", Координаты);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Страница Прил. 2 к Листу 02.
		//
		Лист02_2 = Лист02.Строки[1].Строки[0];
		Координаты = НомСтраницы_Лист02 + ",2,1";
		
		Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
			
			Если ЗначениеЗаполнено(Лист02_2.Данные["ПризнакВключения"]) Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": Приложение 2 к Листу 02 не должно быть включено в состав декларации при коде места представления, равном "
				+ ПоМесту, "Лист02_2", "ПризнакВключения", Координаты);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Лист02_2.Данные["ПризнакВключения"]) Тогда
			
			ИмяПок = "П000220013503";
			ЗначПок = СокрЛП(Лист02_2.Данные[ИмяПок]);
			Если ЗначениеЗаполнено(ЗначПок) И Мас_1_2.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ " -> Приложение 2 к Листу 02: некорректно задан код метода начисления амортизации. Возможны значения: "
				+ СтрСоединить(Мас_1_2, ", "), "Лист02_2", ИмяПок, Координаты);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Лист02_2.Данные["П000220040101"]) ИЛИ Окр(Лист02_2.Данные["П000220040103"]) <> 0 Тогда
				ИмяПок = "П000220040101";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_2.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 2 к Листу 02:" + ?(ДлинаЗначПок = 0, " не", "")
					+ " задан год в строке 401" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
					"Лист02_2", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Лист02_2.Данные["П000220040201"]) ИЛИ Окр(Лист02_2.Данные["П000220040203"]) <> 0 Тогда
				ИмяПок = "П000220040201";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_2.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 2 к Листу 02:" + ?(ДлинаЗначПок = 0, " не", "")
					+ " задан год в строке 402" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
					"Лист02_2", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Лист02_2.Данные["П000220040301"]) ИЛИ Окр(Лист02_2.Данные["П000220040303"]) <> 0 Тогда
				ИмяПок = "П000220040301";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_2.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 4 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 2 к Листу 02:" + ?(ДлинаЗначПок = 0, " не", "")
					+ " задан год в строке 403" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
					"Лист02_2", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Страница Прил. 3 к Листу 02.
		//
		Лист02_3 = Лист02.Строки[2].Строки[0];
		Координаты = НомСтраницы_Лист02 + ",3,1";
		
		Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
			
			Если ЗначениеЗаполнено(Лист02_3.Данные["ПризнакВключения"]) Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": Приложение 3 к Листу 02 не должно быть включено в состав декларации при коде места представления, равном "
				+ ПоМесту, "Лист02_3", "ПризнакВключения", Координаты);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Страницы Прил. 4 к Листу 02.
		//
		Листы02_4 = Лист02.Строки[3].Строки;
		Для каждого Лист02_4 Из Листы02_4 Цикл
			
			НомСтраницы_Лист02_4 = Формат(Листы02_4.Индекс(Лист02_4) + 1, "ЧГ=");
			Координаты = НомСтраницы_Лист02 + ",4," + НомСтраницы_Лист02_4;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_4.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 4 к Листу 02: Страница " + НомСтраницы_Лист02_4
					+ " не должна быть включена в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_4", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_4.Данные["ПризнакВключения"]) Тогда
				
				ИмяПок = "П000240000100";
				ПризнакНП = СокрЛП(Лист02_4.Данные[ИмяПок]);
				
				Если НЕ ЗначениеЗаполнено(ПризнакНП) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4
					+ ": не задан код признака налогоплательщика", "Лист02_4", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ПризнакиНП_Лист02_4.Найти(ПризнакНП) = Неопределено Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4
					+ ": некорректно задан код признака налогоплательщика. Возможны значения: "
					+ СтрСоединить(ПризнакиНП_Лист02_4, ", "), "Лист02_4", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ПризнакНП = "03" Тогда
					
					ИмяПок = "П000240000200";
					Если НЕ ЗначениеЗаполнено(Лист02_4.Данные[ИмяПок]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4
						+ ": не задан номер документа", "Лист02_4", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
						
						ИмяПок = "П000240000200";
						ТекстСообщения = "";
						Если ЗначениеЗаполнено(Лист02_4.Данные[ИмяПок])
							И НЕ НомерДокументаСоответствуетТребованиям(Лист02_4.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ": некорректно задан номер документа"
							+ ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""), "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					КонецЕсли;
					
				ИначеЕсли ПризнакНП = "04" Тогда
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
						
						ИмяПок = "П000240000200";
						ТекстСообщения = "";
						Если НЕ ЗначениеЗаполнено(Лист02_4.Данные[ИмяПок]) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4
							+ ": не задан номер документа", "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						ИначеЕсли НЕ НомерДокументаСоответствуетТребованиям(Лист02_4.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ": некорректно задан номер документа"
							+ ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""), "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
						
						ИмяПок = "П000240000200";
						ТекстСообщения = "";
						Если ЗначениеЗаполнено(Лист02_4.Данные[ИмяПок])
							И НЕ НомерДокументаСоответствуетТребованиям(Лист02_4.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ": некорректно задан номер документа"
							+ ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""), "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					КонецЕсли;
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
						
						// Серия лицензии.
						//
						ИмяПок = "П000240000301";
						ЗначПок = СокрЛП(Лист02_4.Данные[ИмяПок]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						
						Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
							
							СерияЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 3)
							И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначПок);
							ДопТекст = "3 букв русского алфавита";
							
						Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
							
							СерияЛицензииСоответствуетТребованиям = ДлинаЗначПок = 3;
							ДопТекст = "3 символов";
							
						КонецЕсли;
						
						Если НЕ СерияЛицензииСоответствуетТребованиям Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ":" + ?(ДлинаЗначПок = 0, " не", "")
							+ " задана серия лицензии на пользование недрами" + ?(ДлинаЗначПок = 0, "", ", не состоящая из " + ДопТекст),
							"Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						// Номер лицензии.
						//
						ИмяПок = "П000240000302";
						ЗначПок = СокрЛП(Лист02_4.Данные[ИмяПок]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						
						Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
							
							НомерЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 5 ИЛИ ДлинаЗначПок = 6)
							И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначПок);
							ДопТекст = "5-6 цифр";
							
						Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
							
							НомерЛицензииСоответствуетТребованиям = ДлинаЗначПок = 5;
							ДопТекст = "5 символов";
							
						КонецЕсли;
						
						Если НЕ НомерЛицензииСоответствуетТребованиям Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ":" + ?(ДлинаЗначПок = 0, " не", "")
							+ " задан номер лицензии на пользование недрами" + ?(ДлинаЗначПок = 0, "", ", не состоящий из " + ДопТекст),
							"Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						// Вид лицензии.
						//
						ИмяПок = "П000240000303";
						ЗначПок = СокрЛП(Лист02_4.Данные[ИмяПок]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						
						Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
							
							ВидЛицензииСоответствуетТребованиям = (ДлинаЗначПок = 2)
							И СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(ЗначПок);
							ДопТекст = "2 букв русского алфавита";
							
						Иначе//"ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
							
							ВидЛицензииСоответствуетТребованиям = ДлинаЗначПок = 2;
							ДопТекст = "2 символов";
							
						КонецЕсли;
						
						Если НЕ ВидЛицензииСоответствуетТребованиям Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ":" + ?(ДлинаЗначПок = 0, " не", "")
							+ " задан вид лицензии на пользование недрами" + ?(ДлинаЗначПок = 0, "", ", не состоящий из " + ДопТекст),
							"Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						// Порядковый номер нового морского месторождения.
						//
						ИмяПок = "П000240000304";
						ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_4.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 2 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ":" + ?(ДлинаЗначПок = 0, " не", "")
							+ " задан порядковый номер нового морского месторождения " + ?(ДлинаЗначПок = 0, "",
							", не состоящий из 2 символов"), "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
						
						ИмяПок = "П000240000200";
						ТекстСообщения = "";
						Если ЗначениеЗаполнено(Лист02_4.Данные[ИмяПок])
							И НЕ НомерДокументаСоответствуетТребованиям(Лист02_4.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ": некорректно задан номер документа"
							+ ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""), "Лист02_4", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеМнЧ = Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00024М100001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П00024М100003"]) <> 0 Тогда
						ИмяПок = "П00024М100001";
						ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 4 Тогда
							НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 10, " в строке " + Формат(40 + ИндСтрокиМнЧ * 10, "ЧЦ=3;ЧВН="), "");
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 4 к Листу 02 -> Страница " + НомСтраницы_Лист02_4 + ":" + НомерСтрокиВЭкрФорме
							+ ?(ДлинаЗначПок = 0, " не", "") + " задан год убытка" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
							"Лист02_4", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Страницы Прил. 5 к Листу 02.
		//
		Листы02_5 = Лист02.Строки[4].Строки;
		Для каждого Лист02_5 Из Листы02_5 Цикл
			
			НомСтраницы_Лист02_5 = Формат(Листы02_5.Индекс(Лист02_5) + 1, "ЧГ=");
			Координаты = НомСтраницы_Лист02 + ",5," + НомСтраницы_Лист02_5;
			
			Если Лист02НеДолженВыгружаться Тогда
				
				Если ЗначениеЗаполнено(Лист02_5.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02: Страница " + НомСтраницы_Лист02_5
					+ " не должна быть включена в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_5", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_5.Данные["ПризнакВключения"]) Тогда
				
				ВключенХотяБыОдинЛист02_5 = Истина;
				
				ИмяПок = "П000250000100";
				ПризнакНП = СокрЛП(Лист02_5.Данные[ИмяПок]);
				
				Если НЕ ЗначениеЗаполнено(ПризнакНП) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": не задан код признака налогоплательщика", "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ПризнакиНП_Лист02_5.Найти(ПризнакНП) = Неопределено Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": некорректно задан код признака налогоплательщика. Возможны значения: "
					+ СтрСоединить(ПризнакиНП_Лист02_5, ", "), "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ПризнакНП = "03" Тогда
					
					ИмяПок = "П000250000200";
					Если НЕ ЗначениеЗаполнено(Лист02_5.Данные[ИмяПок]) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
						+ ": не задан номер документа", "Лист02_5", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
						
						ИмяПок = "П000250000200";
						ТекстСообщения = "";
						Если ЗначениеЗаполнено(Лист02_5.Данные[ИмяПок])
							И НЕ НомерДокументаСоответствуетТребованиям(Лист02_5.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
							+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
							"Лист02_5", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					КонецЕсли;
					
				Иначе
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
						
						ИмяПок = "П000250000200";
						ТекстСообщения = "";
						Если ЗначениеЗаполнено(Лист02_5.Данные[ИмяПок])
							И НЕ НомерДокументаСоответствуетТребованиям(Лист02_5.Данные[ИмяПок], ПризнакНП, ТекстСообщения) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
							+ ": некорректно задан номер документа" + ?(ЗначениеЗаполнено(ТекстСообщения), ". " + ТекстСообщения, ""),
							"Лист02_5", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						Конецесли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИмяПок = "П000250000300";
				ЗначПок = СокрЛП(Лист02_5.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": не задан код объекта составления расчета", "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_4.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": некорректно задан код объекта составления расчета. Возможны значения: "
					+ СтрСоединить(Мас_1_4, ", "), "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000250000400";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_5.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5 + ":" + ?(ДлинаЗначПок = 0, " не", "")
					+ " задан КПП обособленного подразделения" + ?(ДлинаЗначПок = 0, "",
					", не состоящий из 9 символов"), "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				Иначе
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
						
						Если Сред(СокрЛП(Лист02_5.Данные[ИмяПок]), 5, 2) = "50" Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
							+ ": не применяется КПП, присвоенный организации по месту учета ее в качестве крупнейшего налогоплательщика",
							"Лист02_5", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИмяПок = "П000250000500";
				ЗначПок = СокрЛП(Лист02_5.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": не задан признак возложения обязанности по уплате налога на обособленное подразделение",
					"Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": некорректно задан признак возложения обязанности по уплате налога на обособленное подразделение. Возможны значения: "
					+ СтрСоединить(Мас_0_1, ", "), "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000250000600";
				ЗначПок = СокрЛП(Лист02_5.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
					+ ": не задано наименование обособленного подразделения", "Лист02_5", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Лист02_5.Данные["П000250006103"])
					ИЛИ ЗначениеЗаполнено(Лист02_5.Данные["П000250006104"])
					ИЛИ ЗначениеЗаполнено(Лист02_5.Данные["П000250006105"])
					ИЛИ ЗначениеЗаполнено(Лист02_5.Данные["П000250006106"]) Тогда
					
					ИмяПок = "П000250006103";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_5.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 4 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
						+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер статьи"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_5", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000250006104";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_5.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 4 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
						+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер пункта"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_5", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000250006105";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_5.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 4 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
						+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер подпункта"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_5", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000250006106";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_5.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 15 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 5 к Листу 02 -> Страница " + НомСтраницы_Лист02_5
						+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер закона"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 15 символов"), "Лист02_5", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			// Страницы Прил. 6 к Листу 02.
			//
			Листы02_6 = Лист02.Строки[5].Строки;
			
			Для каждого Лист02_6 Из Листы02_6 Цикл
				
				ВключенТекущийЛист02_6 = Ложь;
				
				НомСтраницы_Лист02_6 = Формат(Листы02_6.Индекс(Лист02_6) + 1, "ЧГ=");
				Координаты = НомСтраницы_Лист02 + ",6," + НомСтраницы_Лист02_6;
				
				Если НЕ ЗаполненаСтраницаРаздела(
					ИмяФормы, Лист02_6, "Лист02_6", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
					
					Если ЗначениеЗаполнено(Лист02_6.Данные["ПризнакВключения"]) Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02: Страница " + НомСтраницы_Лист02_6
						+ " не должна быть включена в состав декларации при коде места представления, равном " + ПоМесту,
						"Лист02_6", "ПризнакВключения", Координаты);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Лист02_6.Данные["ПризнакВключения"]) Тогда
					
					ВключенТекущийЛист02_6 = Истина;
					ВключенХотяБыОдинЛист02_6 = Истина;
					
					ИмяПок = "П000260000100";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + ":" + ?(ДлинаЗначПок = 0, " не", "")
						+ " задан ИНН" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"), "Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000260000200";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + ":" + ?(ДлинаЗначПок = 0, " не", "")
						+ " задан КПП" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), "Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000260000300";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + ":" + ?(ДлинаЗначПок = 0, " не", "")
						+ " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 8 или 11 цифр"),
						"Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000260000400";
					ЗначПок = СокрЛП(Лист02_6.Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
						+ ": не задано наименование организации (обособленного подразделения)", "Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000260000500";
					ЗначПок = Лист02_6.Данные[ИмяПок];
					Если ЗначПок = 0 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
						+ ": не задано количество Приложений 6а к Листу 02, показатели которых включены в данное Приложение 6 к Листу 02",
						"Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000260000600";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 2 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + ":" + ?(ДлинаЗначПок = 0, " не", "")
						+ " задан код региона" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 цифр"), "Лист02_6", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				// Страницы Прил. 6а к Листу 02.
				//
				Листы02_6а = Лист02_6.Строки[0].Строки;
				
				ВключенХотяБыОдинИзТекущихЛистов02_6а = Ложь;
				
				Для каждого Лист02_6а Из Листы02_6а Цикл
					
					НомСтраницы_Лист02_6а = Формат(Листы02_6а.Индекс(Лист02_6а) + 1, "ЧГ=");
					Координаты = НомСтраницы_Лист02 + ",6," + НомСтраницы_Лист02_6 + ",1," + НомСтраницы_Лист02_6а;
					
					Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
						
						Если ЗначениеЗаполнено(Лист02_6а.Данные["ПризнакВключения"]) Тогда
							
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
							+ " -> Приложение 6а к Листу 02: Страница " + НомСтраницы_Лист02_6а
							+ " не должна быть включена в состав декларации при коде места представления, равном " + ПоМесту,
							"Лист02_6а", "ПризнакВключения", Координаты);
							СтатусПроверки = Ложь;
							
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(Лист02_6а.Данные["ПризнакВключения"]) Тогда
						
						ВключенХотяБыОдинИзТекущихЛистов02_6а = Истина;
						ВключенХотяБыОдинЛист02_6а = Истина;
						
						ИмяПок = "П0026а0000100";
						ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 10 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ":" + ?(ДлинаЗначПок = 0, " не", "") + " задан ИНН" + ?(ДлинаЗначПок = 0, "",
							", не состоящий из 10 цифр"), "Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПок = "П0026а0000200";
						ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 9 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ":" + ?(ДлинаЗначПок = 0, " не", "") + " задан КПП" + ?(ДлинаЗначПок = 0, "",
							", не состоящий из 9 символов"), "Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПок = "П0026а0000300";
						ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ":" + ?(ДлинаЗначПок = 0, " не", "") + " задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "",
							", не состоящий из 8 или 11 цифр"), "Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПок = "П0026а0000400";
						ЗначПок = СокрЛП(Лист02_6а.Данные[ИмяПок]);
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ": не задано наименование организации (обособленного подразделения)",
							"Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПок = "П0026а0000500";
						ЗначПок = СокрЛП(Лист02_6а.Данные[ИмяПок]);
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ": не задан код объекта составления расчета", "Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						ИначеЕсли Мас_1_4.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6 + " -> Приложение 6а к Листу 02 -> Страница "
							+ НомСтраницы_Лист02_6а + ": некорректно задан код объекта составления расчета. Возможны значения: "
							+ СтрСоединить(Мас_1_4, ", "), "Лист02_6а", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Лист02_6а.Данные["П0026а0006103"])
							ИЛИ ЗначениеЗаполнено(Лист02_6а.Данные["П0026а0006104"])
							ИЛИ ЗначениеЗаполнено(Лист02_6а.Данные["П0026а0006105"])
							ИЛИ ЗначениеЗаполнено(Лист02_6а.Данные["П0026а0006106"]) Тогда
							
							ИмяПок = "П0026а0006103";
							ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
							Если ДлинаЗначПок <> 4 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
								+ " -> Приложение 6а к Листу 02 -> Страница " + НомСтраницы_Лист02_6а
								+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер статьи"
								+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_6а", ИмяПок, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ИмяПок = "П0026а0006104";
							ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
							Если ДлинаЗначПок <> 4 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
								+ " -> Приложение 6а к Листу 02 -> Страница " + НомСтраницы_Лист02_6а
								+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер пункта"
								+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_6а", ИмяПок, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ИмяПок = "П0026а0006105";
							ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
							Если ДлинаЗначПок <> 4 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
								+ " -> Приложение 6а к Листу 02 -> Страница " + НомСтраницы_Лист02_6а
								+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер подпункта"
								+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 символов"), "Лист02_6а", ИмяПок, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ИмяПок = "П0026а0006106";
							ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6а.Данные[ИмяПок]));
							Если ДлинаЗначПок <> 15 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
								+ " -> Приложение 6а к Листу 02 -> Страница " + НомСтраницы_Лист02_6а
								+ ": в реквизитах закона субъекта РФ" + ?(ДлинаЗначПок = 0, " не", "") + " задан номер закона"
								+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 15 символов"), "Лист02_6а", ИмяПок, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ВключенТекущийЛист02_6 И НЕ ВключенХотяБыОдинИзТекущихЛистов02_6а Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 6 к Листу 02 -> Страница " + НомСтраницы_Лист02_6
					+ ": Приложение 6а к Листу 02 должно быть включено в состав декларации при включении Приложения 6 к Листу 02",
					"Лист02_6а", "ПризнакВключения", НомСтраницы_Лист02 + ",6," + НомСтраницы_Лист02_6 + ",1,1");
					СтатусПроверки = Ложь;
					
				ИначеЕсли НЕ ВключенТекущийЛист02_6 И ВключенХотяБыОдинИзТекущихЛистов02_6а Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Приложение 6 к Листу 02: Страница " + НомСтраницы_Лист02_6
					+ " должна быть включена в состав декларации при включении Приложения 6а к Листу 02",
					"Лист02_6", "ПризнакВключения", НомСтраницы_Лист02 + ",6," + НомСтраницы_Лист02_6);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Страница Прил. 6б к Листу 02. Раздел А.
			//
			Лист02_6бА = Лист02.Строки[6].Строки[0];
			Координаты = НомСтраницы_Лист02 + ",7,1";
			
			ВключенТекущийЛист02_6бА = Ложь;
			ВключенХотяБыОдинИзТекущихЛистов02_6бБ = Ложь;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_6бА.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел А Приложения 6б к Листу 02 не должен быть включен в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_6бА", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_6бА.Данные["ПризнакВключения"]) Тогда
				
				ВключенТекущийЛист02_6бА = Истина;
				ВключенХотяБыОдинЛист02_6бА = Истина;
				
			КонецЕсли;
			
			// Страницы Прил. 6б к Листу 02. Раздел Б.
			//
			Листы02_6бБ = Лист02.Строки[7].Строки;
			Для каждого Лист02_6бБ Из Листы02_6бБ Цикл
				
				НомСтраницы_Лист02_6бБ = Формат(Листы02_6бБ.Индекс(Лист02_6бБ) + 1, "ЧГ=");
				Координаты = НомСтраницы_Лист02 + ",8," + НомСтраницы_Лист02_6бБ;
				
				Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
					
					Если ЗначениеЗаполнено(Лист02_6бБ.Данные["ПризнакВключения"]) Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Б Приложения 6б к Листу 02: Страница " + НомСтраницы_Лист02_6бБ
						+ " не должна быть включена в состав декларации при коде места представления, равном "
						+ ПоМесту, "Лист02_6бБ", "ПризнакВключения", Координаты);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Лист02_6бБ.Данные["ПризнакВключения"]) Тогда
					
					ВключенХотяБыОдинИзТекущихЛистов02_6бБ = Истина;
					ВключенХотяБыОдинЛист02_6бБ = Истина;
					
					ИмяПок = "П0026б0000100";
					ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_6бБ.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Б Приложения 6б к Листу 02 -> Страница " + НомСтраницы_Лист02_6бБ + ":" + ?(ДлинаЗначПок = 0, " не",
						"") + " задан ИНН" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"), "Лист02_6бБ", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВключенТекущийЛист02_6бА И НЕ ВключенХотяБыОдинИзТекущихЛистов02_6бБ Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": Раздел Б Приложения 6б к Листу 02 должен быть включен в состав декларации при включении Раздела А Приложения 6б к Листу 02",
				"Лист02_6бБ", "ПризнакВключения", НомСтраницы_Лист02 + ",8,1");
				СтатусПроверки = Ложь;
				
			ИначеЕсли НЕ ВключенТекущийЛист02_6бА И ВключенХотяБыОдинИзТекущихЛистов02_6бБ Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
				+ ": Раздел А Приложения 6б к Листу 02 должен быть включен в состав декларации при включении Раздела Б Приложения 6б к Листу 02",
				"Лист02_6бА", "ПризнакВключения", НомСтраницы_Лист02 + ",7,1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Страницы Прил. 7 к Листу 02. Раздел А.
		//
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИндексВДеревеРаздела = 5;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			ИндексВДеревеРаздела = 8;
			
		КонецЕсли;
		
		Листы02_7А = Лист02.Строки[ИндексВДеревеРаздела].Строки;
		
		ВключенХотяБыОдинИзТекущихЛистов02_7А = Ложь;
		
		ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_1_4 = Ложь;
		ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_5 = Ложь;
		
		Для каждого Лист02_7А Из Листы02_7А Цикл
			
			НомСтраницы_Лист02_7А = Формат(Листы02_7А.Индекс(Лист02_7А) + 1, "ЧГ=");
			Координаты = НомСтраницы_Лист02 + "," + Формат(ИндексВДеревеРаздела + 1, "ЧГ=") + "," + НомСтраницы_Лист02_7А;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_7А.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел А Приложения 7 к Листу 02: Страница " + НомСтраницы_Лист02_7А
					+ " не должна быть включена в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_7А", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_7А.Данные["ПризнакВключения"]) Тогда
				
				ВключенХотяБыОдинИзТекущихЛистов02_7А = Истина;
				
				ИмяПок = "П0027А0000100";
				ЗначПок = СокрЛП(Лист02_7А.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А
					+ ": не задан код объекта составления расчета", "Лист02_7А", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_5.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А
					+ ": некорректно задан код объекта составления расчета. Возможны значения: "
					+ СтрСоединить(Мас_1_5, ", "), "Лист02_7А", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				Иначе
					ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_1_4
					= (ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_1_4 ИЛИ Мас_1_4.Найти(ЗначПок) <> Неопределено);
					ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_5
					= (ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_5 ИЛИ ЗначПок = "5");
				КонецЕсли;
				
				ИмяПок = "П0027А0000200";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_7А.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":" + ?(ДлинаЗначПок = 0, " не",
					"") + " задан КПП" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), "Лист02_7А", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					ИмяПок = "П0027А0000300";
					ЗначПок = Лист02_7А.Данные[ИмяПок];
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А
						+ ": не задана дата закона субъекта РФ, которым установлено право на налоговый вычет",
						"Лист02_7А", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А
						+ ": задана дата закона субъекта РФ, которым установлено право на налоговый вычет, "
						+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Лист02_7А", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П0027А0000400";
					ЗначПок = СокрЛП(Лист02_7А.Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А
						+ ": не задан номер закона субъекта РФ, которым установлено право на налоговый вычет",
						"Лист02_7А", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеМнЧ = Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027АМ100001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027АМ100003"]) <> 0 Тогда
						ИмяПок = "П0027АМ100001";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 4, " в строке " + Формат(21 + ИндСтрокиМнЧ, "ЧЦ=3;ЧВН="), "");
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " не задан код расходов", "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						ИначеЕсли КодыРасходов_Лист02_7А.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " задан некорректный код расходов. Возможны значения: "
							+ СтрСоединить(КодыРасходов_Лист02_7А, ", "), "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ = Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027АМ200001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027АМ200003"]) <> 0 Тогда
						ИмяПок = "П0027АМ200001";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 4, " в строке " + Формат(51 + ИндСтрокиМнЧ, "ЧЦ=3;ЧВН="), "");
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " не задан код расходов", "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						ИначеЕсли КодыРасходов_Лист02_7А.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " задан некорректный код расходов. Возможны значения: "
							+ СтрСоединить(КодыРасходов_Лист02_7А, ", "), "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ = Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027АМ300001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027АМ300003"]) <> 0 Тогда
						ИмяПок = "П0027АМ300001";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 4, " в строке " + Формат(61 + ИндСтрокиМнЧ, "ЧЦ=3;ЧВН="), "");
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " не задан код расходов", "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						ИначеЕсли КодыРасходов_Лист02_7А.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел А Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7А + ":"
							+ НомерСтрокиВЭкрФорме + " задан некорректный код расходов. Возможны значения: "
							+ СтрСоединить(КодыРасходов_Лист02_7А, ", "), "Лист02_7А", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Страницы Прил. 7 к Листу 02. Раздел Б.
		//
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			Лист02_7Б = Лист02.Строки[6].Строки[0];
			
			ВключенХотяБыОдинИзТекущихЛистов02_7Б = Ложь;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_7Б.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел Б Приложения 7 к Листу 02 не должен быть включен в состав декларации при коде места представления,"
					+ " равном " + ПоМесту, "Лист02_7Б", "ПризнакВключения", НомСтраницы_Лист02 + ",7,1");
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_7Б.Данные["ПризнакВключения"]) Тогда
				
				ВключенХотяБыОдинИзТекущихЛистов02_7Б = Истина;
				
			КонецЕсли;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			Листы02_7Б = Лист02.Строки[9].Строки;
			
			ВключенХотяБыОдинИзТекущихЛистов02_7Б = Ложь;
			
			Для каждого Лист02_7Б Из Листы02_7Б Цикл
				
				НомСтраницы_Лист02_7Б = Формат(Листы02_7Б.Индекс(Лист02_7Б) + 1, "ЧГ=");
				Координаты = НомСтраницы_Лист02 + ",10," + НомСтраницы_Лист02_7Б;
				
				Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
					
					Если ЗначениеЗаполнено(Лист02_7Б.Данные["ПризнакВключения"]) Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Б Приложения 7 к Листу 02: Страница " + НомСтраницы_Лист02_7Б
						+ " не должна быть включена в состав декларации при коде места представления, равном "
						+ ПоМесту, "Лист02_7Б", "ПризнакВключения", Координаты);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Лист02_7Б.Данные["ПризнакВключения"]) Тогда
					
					ВключенХотяБыОдинИзТекущихЛистов02_7Б = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Страницы Прил. 7 к Листу 02. Раздел В.
		//
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИндексВДеревеРаздела = 7;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			ИндексВДеревеРаздела = 10;
			
		КонецЕсли;
		
		Листы02_7В = Лист02.Строки[ИндексВДеревеРаздела].Строки;
		
		ВключенХотяБыОдинИзТекущихЛистов02_7В = Ложь;
		
		Для каждого Лист02_7В Из Листы02_7В Цикл
			
			НомСтраницы_Лист02_7В = Формат(Листы02_7В.Индекс(Лист02_7В) + 1, "ЧГ=");
			Координаты = НомСтраницы_Лист02 + "," + Формат(ИндексВДеревеРаздела + 1, "ЧГ=") + "," + НомСтраницы_Лист02_7В;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_7В.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел В Приложения 7 к Листу 02: Страница " + НомСтраницы_Лист02_7В
					+ " не должна быть включена в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_7В", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_7В.Данные["ПризнакВключения"]) Тогда
				
				ВключенХотяБыОдинИзТекущихЛистов02_7В = Истина;
				
				ИмяПок = "П0027В0000100";
				ЗначПок = СокрЛП(Лист02_7В.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел В Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7В
					+ ": не задан код объекта составления расчета", "Лист02_7В", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_4.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел В Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7В
					+ ": некорректно задан код объекта составления расчета. Возможны значения: "
					+ СтрСоединить(Мас_1_4, ", "), "Лист02_7В", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П0027В0000200";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_7В.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел В Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7В + ":" + ?(ДлинаЗначПок = 0, " не",
					"") + " задан КПП" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), "Лист02_7В", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Страницы Прил. 7 к Листу 02. Раздел Г.
		//
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИндексВДеревеРаздела = 8;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			ИндексВДеревеРаздела = 11;
			
		КонецЕсли;
		
		Листы02_7Г = Лист02.Строки[ИндексВДеревеРаздела].Строки;
		
		ВключенХотяБыОдинИзТекущихЛистов02_7Г = Ложь;
		
		Для каждого Лист02_7Г Из Листы02_7Г Цикл
			
			НомСтраницы_Лист02_7Г = Формат(Листы02_7Г.Индекс(Лист02_7Г) + 1, "ЧГ=");
			Координаты = НомСтраницы_Лист02 + "," + Формат(ИндексВДеревеРаздела + 1, "ЧГ=") + "," + НомСтраницы_Лист02_7Г;
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_7Г.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Г Приложения 7 к Листу 02: Страница " + НомСтраницы_Лист02_7Г
					+ " не должна быть включена в состав декларации при коде места представления, равном "
					+ ПоМесту, "Лист02_7Г", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_7Г.Данные["ПризнакВключения"]) Тогда
				
				ВключенХотяБыОдинИзТекущихЛистов02_7Г = Истина;
				
				ИмяПок = "П0027Г0000100";
				ЗначПок = СокрЛП(Лист02_7Г.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
					+ ": не задан код объекта составления расчета", "Лист02_7Г", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_5.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
					+ ": некорректно задан код объекта составления расчета. Возможны значения: "
					+ СтрСоединить(Мас_1_5, ", "), "Лист02_7Г", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П0027Г0000200";
				ДлинаЗначПок = СтрДлина(СокрЛП(Лист02_7Г.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г + ":" + ?(ДлинаЗначПок = 0, " не",
					"") + " задан КПП" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), "Лист02_7Г", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
					
					ИмяПок = "П0027Г0000300";
					ЗначПок = СокрЛП(Лист02_7Г.Данные[ИмяПок]);
					Если ЗначениеЗаполнено(ЗначПок) И СтрДлина(ЗначПок) <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
						+ ": задан ИНН, не состоящий из 10 цифр", "Лист02_7Г", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
					
					ДанныеМнЧ = Лист02_7Г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1];
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ГМ100001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027ГМ100003"]) <> 0 Тогда
							ИмяПок = "П0027ГМ100001";
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
								+ ": в строке 028 не задан код расходов", "Лист02_7Г", ИмяПок + "_" + НомСтроки, Координаты);
								СтатусПроверки = Ложь;
							ИначеЕсли КодыРасходов_Лист02_7Г.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
								+ ": в строке 028 задан некорректный код расходов. Возможны значения: "
								+ СтрСоединить(КодыРасходов_Лист02_7Г, ", "), "Лист02_7Г", ИмяПок + "_" + НомСтроки, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Если ОтчетЗаГод Тогда
						
						ДанныеМнЧ = Лист02_7Г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2];
						Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ГМ200001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027ГМ200003"]) <> 0 Тогда
								ИмяПок = "П0027ГМ200001";
								ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
								Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
									+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
									+ ": в строке 062 не задан код расходов", "Лист02_7Г", ИмяПок + "_" + НомСтроки, Координаты);
									СтатусПроверки = Ложь;
								ИначеЕсли КодыРасходов_Лист02_7Г.Найти(ЗначПок) = Неопределено Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
									+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
									+ ": в строке 062 задан некорректный код расходов. Возможны значения: "
									+ СтрСоединить(КодыРасходов_Лист02_7Г, ", "), "Лист02_7Г", ИмяПок + "_" + НомСтроки, Координаты);
									СтатусПроверки = Ложь;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						ИмяПок = "П0027Г0006003";
						Если Окр(Лист02_7Г.Данные[ИмяПок]) <> 0 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
							+ ": строка 060 не должна быть задана в декларации не за налоговый период", "Лист02_7Г", ИмяПок, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ДанныеМнЧ = Лист02_7Г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2];
						Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ГМ200001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027ГМ200003"]) <> 0 Тогда
								ИмяПок = ?(ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ГМ200001"]), "П0027ГМ200001", "П0027ГМ200003");
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
								+ " -> Раздел Г Приложения 7 к Листу 02 -> Страница " + НомСтраницы_Лист02_7Г
								+ ": строка 062 не должна быть задана в декларации не за налоговый период",
								"Лист02_7Г", ИмяПок + "_" + НомСтроки, Координаты);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			// Страницы Прил. 7 к Листу 02. Раздел Д.
			//
			Лист02_7Д = Лист02.Строки[9].Строки[0];
			
			Координаты = НомСтраницы_Лист02 + ",10,1";
			
			Если Лист02НеДолженВыгружаться ИЛИ Лист02_5ДолженВыгружатьсяОтдельно Тогда
				
				Если ЗначениеЗаполнено(Лист02_7Д.Данные["ПризнакВключения"]) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел Д Приложения 7 к Листу 02 не должен быть включен в состав декларации при коде места представления,"
					+ " равном " + ПоМесту, "Лист02_7Д", "ПризнакВключения", Координаты);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Лист02_7Д.Данные["ПризнакВключения"]) Тогда
				
				ИмяПок = "П0027Д0000100";
				РС = СокрЛП(Лист02_7Д.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(РС) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Д Приложения 7 к Листу 02: не задан код объекта составления расчета",
					"Лист02_7Д", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_2.Найти(РС) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ " -> Раздел Д Приложения 7 к Листу 02: некорректно задан код объекта составления расчета."
					+ " Возможны значения: " + СтрСоединить(Мас_1_2, ", "), "Лист02_7Д", ИмяПок, Координаты);
					СтатусПроверки = Ложь;
				ИначеЕсли РС = "1" Тогда
					ИмяПок = "П0027Д0000200";
					ЗначПок = СокрЛП(Лист02_7Д.Данные[ИмяПок]);
					Если ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Д Приложения 7 к Листу 02: ИНН организации, осуществившей расходы, не должен быть задан"
						+ " при значении 1 кода объекта составления расчета", "Лист02_7Д", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе// РС = "2"
					ИмяПок = "П0027Д0000200";
					ЗначПок = СокрЛП(Лист02_7Д.Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Д Приложения 7 к Листу 02: ИНН организации, осуществившей расходы, должен быть задан"
						+ " при значении 2 кода объекта составления расчета", "Лист02_7Д", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
						+ " -> Раздел Д Приложения 7 к Листу 02: задан ИНН организации, осуществившей расходы, не состоящий из 10 цифр",
						"Лист02_7Д", ИмяПок, Координаты);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеМнЧ = Лист02_7Д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ДМ100001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027ДМ100003"]) <> 0 Тогда
						ИмяПок = "П0027ДМ100001";
						ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 4 Тогда
							НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 5, " в строке " + Формат(101 + ИндСтрокиМнЧ, "ЧЦ=3;ЧВН="), "");
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел Д Приложения 7 к Листу 02:" + НомерСтрокиВЭкрФорме
							+ ?(ДлинаЗначПок = 0, " не", "") + " задан год" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
							"Лист02_7Д", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеМнЧ = Лист02_7Д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0027ДМ200001"]) ИЛИ Окр(СтрокаМнЧ.Данные["П0027ДМ200003"]) <> 0 Тогда
						ИмяПок = "П0027ДМ200001";
						ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 4 Тогда
							НомерСтрокиВЭкрФорме = ?(ИндСтрокиМнЧ < 5, " в строке " + Формат(201 + ИндСтрокиМнЧ, "ЧЦ=3;ЧВН="), "");
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
							+ " -> Раздел Д Приложения 7 к Листу 02:" + НомерСтрокиВЭкрФорме
							+ ?(ДлинаЗначПок = 0, " не", "") + " задан год" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"),
							"Лист02_7Д", ИмяПок + "_" + НомСтроки, Координаты);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВключенХотяБыОдинИзТекущихЛистов02_7А ИЛИ ВключенХотяБыОдинИзТекущихЛистов02_7Б
				ИЛИ ВключенХотяБыОдинИзТекущихЛистов02_7В Тогда
				
				Если ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_5 И НЕ ВключенХотяБыОдинИзТекущихЛистов02_7Б Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел Б Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении Раздела А Приложения 7 к Листу 02 с кодом объекта составления расчета, равным 5",
					"Лист02_7Б", "ПризнакВключения", НомСтраницы_Лист02 + ",7,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_1_4 И НЕ ВключенХотяБыОдинИзТекущихЛистов02_7В Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел В Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении Раздела А Приложения 7 к Листу 02 с кодом объекта составления расчета, равным 1, 2, 3 или 4",
					"Лист02_7В", "ПризнакВключения", НомСтраницы_Лист02 + ",8,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			Если ВключенХотяБыОдинИзТекущихЛистов02_7А ИЛИ ВключенХотяБыОдинИзТекущихЛистов02_7Б
				ИЛИ ВключенХотяБыОдинИзТекущихЛистов02_7В ИЛИ ВключенХотяБыОдинИзТекущихЛистов02_7Г Тогда
				
				Если НЕ ВключенХотяБыОдинИзТекущихЛистов02_7А Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел А Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении любого другого раздела Приложения 7 к Листу 02",
					"Лист02_7А", "ПризнакВключения", НомСтраницы_Лист02 + ",9,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_5 И НЕ ВключенХотяБыОдинИзТекущихЛистов02_7Б Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел Б Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении Раздела А Приложения 7 к Листу 02 с кодом объекта составления расчета, равным 5",
					"Лист02_7Б", "ПризнакВключения", НомСтраницы_Лист02 + ",10,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ХотяБыВОдномИзТекущихЛистов02_7А_РасчетСоставлен_1_4 И НЕ ВключенХотяБыОдинИзТекущихЛистов02_7В Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел В Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении Раздела А Приложения 7 к Листу 02 с кодом объекта составления расчета, равным 1, 2, 3 или 4",
					"Лист02_7В", "ПризнакВключения", НомСтраницы_Лист02 + ",11,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ВключенХотяБыОдинИзТекущихЛистов02_7Г Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 02 -> Страница " + НомСтраницы_Лист02
					+ ": Раздел Г Приложения 7 к Листу 02 должен быть включен в состав декларации при"
					+ " включении любого другого раздела Приложения 7 к Листу 02",
					"Лист02_7Г", "ПризнакВключения", НомСтраницы_Лист02 + ",12,1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнительные проверки после обхода Листа 02 и его приложений.
	//
	Если Лист02_5ДолженВыгружатьсяОтдельно И НЕ ВключенХотяБыОдинЛист02_5 Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Приложение 5 к Листу 02 должно быть включено в состав декларации при коде места представления, равном "
		+ ПоМесту, "Лист02_5", "ПризнакВключения", "1,5,1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		Если Лист02_6_И_Лист02_6б_ДолжныВыгружаться Тогда
			
			Если НЕ ВключенХотяБыОдинЛист02_6 И НЕ ВключенХотяБыОдинЛист02_6а Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Приложение 6 к Листу 02 должно быть включено в состав декларации при коде места представления, равном "
				+ ПоМесту, "Лист02_6", "ПризнакВключения", "1,6,1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			Если НЕ ВключенХотяБыОдинЛист02_6бА И НЕ ВключенХотяБыОдинЛист02_6бБ Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Приложение 6б к Листу 02 должно быть включено в состав декларации при коде места представления, равном "
				+ ПоМесту, "Лист02_6бА", "ПризнакВключения", "1,7,1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Лист 03.
	//
	Лист03_ДолженВыгружаться = ПоМесту = "231";
	
	ВключенХотяБыОдинИзРазделов_Лист03А_Лист03Б = Ложь;
	
	// Лист 03. Раздел А.
	//
	ИмяРаздела = "Лист03А";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Данные = Ветка.Данные;
		
		Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			Продолжить;
		КонецЕсли;
		
		ВключенХотяБыОдинИзРазделов_Лист03А_Лист03Б = Истина;
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		ИмяПок = "П0003А0000100";
		КатегорияНА = СокрЛП(Данные[ИмяПок]);
		Если НЕ ЗначениеЗаполнено(КатегорияНА) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": не задана категория налогового агента", ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли Мас_1_2.Найти(КатегорияНА) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": некорректно задана категория налогового агента. Возможны значения: " + СтрСоединить(Мас_1_2, ", "),
			ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИмяПок = "П0003А0000600";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
				+ ": не задан код вида дохода", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначПок <> "20" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
				+ ": некорректно задан код вида дохода. Возможно значение: 20", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяПок = "П0003А0000200";
		ЗначПок = СокрЛП(Данные[ИмяПок]);
		ДлинаЗначПок = СтрДлина(ЗначПок);
		Если ЗначениеЗаполнено(ЗначПок) Тогда
			Если КатегорияНА = "1" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
				+ ": ИНН организации - эмитента ценных бумаг не должен быть заполнен при категории налогового агента, равной 1",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаЗначПок <> 10 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
				+ ": ИНН организации - эмитента ценных бумаг должен состоять из 10 цифр",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИмяПок = "П0003А0000300";
		ЗначПок = СокрЛП(Данные[ИмяПок]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": не задан вид дивидендов", ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли Мас_1_2.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": некорректно задан вид дивидендов. Возможны значения: " + СтрСоединить(Мас_1_2, ", "),
			ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПок = "П0003А0000400";
		ЗначПок = СокрЛП(Данные[ИмяПок]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": не задан код налогового (отчетного) периода", ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли ВозможныеКодыПериода_Лист03А.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы
			+ ": некорректно задан код налогового (отчетного) периода. Возможны значения: "
			+ СтрСоединить(ВозможныеКодыПериода_Лист03А, ", "), ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПок = "П0003А0000500";
		ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
		Если ДлинаЗначПок <> 4 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел А -> Страница " + НомСтраницы + ":"
			+ ?(ДлинаЗначПок = 0, " не", "") + " задан отчетный год" + ?(ДлинаЗначПок = 0, "",
			", не состоящий из 4 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ПроверитьВозможностьВыгрузки_Лист03В(ИмяФормы,
											 Ветка,
											 НомСтраницы,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 РезультатВыгрузки,
											 СтатусПроверки);
		
	КонецЦикла;
	
	// Лист 03. Раздел Б.
	//
	ИмяРаздела = "Лист03Б";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Данные = Ветка.Данные;
		
		Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			Продолжить;
		КонецЕсли;
		
		ВключенХотяБыОдинИзРазделов_Лист03А_Лист03Б = Истина;
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИмяПок = "П0003Б0000100";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел Б -> Страница " + НомСтраницы
				+ ": не задан код вида дохода", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначПок <> "17" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел Б -> Страница " + НомСтраницы
				+ ": некорректно задан код вид дохода. Возможно значение: 17", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
			
			ИмяПок = "П0003Б0000100";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел Б -> Страница " + НомСтраницы
				+ ": не задан вид дохода", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли Мас_1_3.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. Раздел Б -> Страница " + НомСтраницы
				+ ": некорректно задан вид дохода. Возможны значения: " + СтрСоединить(Мас_1_3, ", "),
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПроверитьВозможностьВыгрузки_Лист03В(ИмяФормы,
												 Ветка,
												 НомСтраницы,
												 ИмяРаздела,
												 СтруктураРеквизитовФормы,
												 СтруктураМногоуровневыхРазделов,
												 РезультатВыгрузки,
												 СтатусПроверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Лист03_ДолженВыгружаться И НЕ ВключенХотяБыОдинИзРазделов_Лист03А_Лист03Б Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Лист 03 (Раздел А и(или) Раздел Б) должен быть включен в состав декларации при коде места представления, равном "
		+ ПоМесту, "Лист03А", "ПризнакВключения", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Лист 04.
	//
	ИмяРаздела = "Лист04";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		МасВидДох_Лист04 = СтрРазделить("10,11,12,13,14,15,16,21,22,23,24,25,26,30,31,32,33,34,35,37", ",", Ложь);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
		
		МасВидДох_Лист04 = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12,13,14,25,35", ",", Ложь);
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		
		МасВидДох_Лист04 = Мас_1_9;
		
	Иначе//"ФормаОтчета2019Кв4"
		
		МасВидДох_Лист04 = Мас_1_8;
		
	КонецЕсли;
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Данные = Ветка.Данные;
		
		Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			Продолжить;
		КонецЕсли;
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		ИмяПок = "П000040000100";
		ЗначПок = СокрЛП(Данные[ИмяПок]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 04 -> Страница " + НомСтраницы
			+ ": не задан вид дохода", ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли МасВидДох_Лист04.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 04 -> Страница " + НомСтраницы
			+ ": некорректно задан вид дохода. Возможны значения: " + СтрСоединить(МасВидДох_Лист04, ", "),
			ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Лист 05.
	//
	ИмяРаздела = "Лист05";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Данные = Ветка.Данные;
		
		Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			Продолжить;
		КонецЕсли;
		
		НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
		
		ИмяПок = "П000050000100";
		ЗначПок = СокрЛП(Данные[ИмяПок]);
		Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 05 -> Страница " + НомСтраницы
			+ ": не задан вид операции", ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		ИначеЕсли Мас_1_3.Найти(ЗначПок) = Неопределено Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 05 -> Страница " + НомСтраницы
			+ ": некорректно задан вид операции. Возможны значения: " + СтрСоединить(Мас_1_3, ", "),
			ИмяРаздела, ИмяПок, НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Лист 07.
	//
	ИмяРаздела = "Лист07";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Ветка = ДеревоРаздела.Строки[0];
	Данные = Ветка.Данные;
	НомСтраницы = "1";
	
	РазделМожетВыгружаться = ОтчетЗаГод;
	
	Если РазделМожетВыгружаться Тогда
		
		Ветка = ДеревоРаздела.Строки[0];
		
		Данные = Ветка.Данные;
		
		Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ07М1];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00007М100001";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 07 -> Строка " + НомСтроки + ":" + ?(ДлинаЗначПок = 0,
					" не", "") + " задан код вида поступлений" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"),
					ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00007М100002";
				ЗначПок = СтрокаМнЧ.Данные[ИмяПок];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 07 -> Строка " + НомСтроки
					+ ": задана дата поступления, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				Конецесли;
				
				ИмяПок = "П00007М100005";
				ЗначПок = СтрокаМнЧ.Данные[ИмяПок];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 07 -> Строка " + НомСтроки
					+ ": задан срок использования (до какой даты), выходящий за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				Конецесли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 07 не должен быть включен в состав декларации не за налоговый период",
		ИмяРаздела, "ПризнакВключения", НомСтраницы);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Лист 08.
	//
	ИмяРаздела = "Лист08";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	РазделМожетВыгружаться = ОтчетЗаГод;
	
	Если РазделМожетВыгружаться Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			МасВидКорр_Лист08 = Мас_1_6;
			
		Иначе//"ФормаОтчета2019Кв4"
			
			МасВидКорр_Лист08 = Мас_1_5;
			
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				Продолжить;
			КонецЕсли;
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
				
				ИмяПок = "П000080000101";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак участника консолидированной группы налогоплательщиков", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак участника консолидированной группы налогоплательщиков. Возможны значения: "
					+ СтрСоединить(Мас_0_1, ", "), ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Данные["П000080000201"])
					ИЛИ ЗначениеЗаполнено(Данные["П000080000301"])
					ИЛИ ЗначениеЗаполнено(Данные["П000080000401"]) Тогда
					
					ИмяПок = "П000080000201";
					ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
					Если ДлинаЗначПок <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан ИНН участника консолидированной группы налогоплательщиков"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000080000301";
					ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
					Если ДлинаЗначПок <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан КПП участника консолидированной группы налогоплательщиков"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"), ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П000080000401";
					ЗначПок = СокрЛП(Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
						+ ": не задано наименование организации-участника консолидированной группы налогоплательщиков",
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяПок = "П000080000501";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
				+ ": не задан вид корректировки", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли МасВидКорр_Лист08.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
				+ ": некорректно задан вид корректировки. Возможны значения: " + СтрСоединить(МасВидКорр_Лист08, ", "),
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П000080000801";
			ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":"
				+ ?(ДлинаЗначПок = 0, " не", "") + " задан код страны регистрации (инкорпорации) контрагента"
				+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М1];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00008М100001";
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
				Если ДлинаЗначПок <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки + ":"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код основания отнесения сделки к контролируемой" + ?(ДлинаЗначПок = 0,
					"", ", не состоящий из 3 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			ВидКонтрагента = СокрЛП(Данные["П000080000701"]);
			
			Если ВидКонтрагента = "Российская организация" Тогда
				
				ИмяПок = "П000080000901";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":" + ?(ДлинаЗначПок = 0,
					" не", "") + " задан ИНН контрагента" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001101";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано наименование организации контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВидКонтрагента = "Иностранная организация" Тогда
				
				ИмяПок = "П000080000901";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ДлинаЗначПок <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":" + ?(ДлинаЗначПок = 0,
						" не", "") + " задан ИНН контрагента" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"),
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ИмяПок = "П000080001001";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан регистрационный номер контрагента в стране регистрации (инкорпорации)",
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001101";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано наименование организации контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВидКонтрагента = "Индивидуальный предприниматель" Тогда
				
				ИмяПок = "П000080000901";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 12 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":" + ?(ДлинаЗначПок = 0,
					" не", "") + " задан ИНН контрагента" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 12 цифр"),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001301";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задана фамилия контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001302";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано имя контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВидКонтрагента = "Российский гражданин" Тогда
				
				ИмяПок = "П000080000901";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ДлинаЗначПок <> 12 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":" + ?(ДлинаЗначПок = 0,
						" не", "") + " задан ИНН контрагента" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 12 цифр"),
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ИмяПок = "П000080001301";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задана фамилия контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001302";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано имя контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ВидКонтрагента = "Иностранный гражданин или лицо без гражданства" Тогда
				
				ИмяПок = "П000080000901";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ДлинаЗначПок <> 12 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + ":" + ?(ДлинаЗначПок = 0,
						" не", "") + " задан ИНН контрагента" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 12 цифр"),
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ИмяПок = "П000080001301";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задана фамилия контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001302";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано имя контрагента (в русской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001401";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задана фамилия контрагента (в латинской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000080001402";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задано имя контрагента (в латинской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			Иначе
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
				+ ": не задан вид контрагента", ИмяРаздела, "П000080000701", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М2];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ИмяПок = "П00008М200001";
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
					+ НомСтроки + ": не задан номер договора", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00008М200002";
				ЗначПок = СтрокаМнЧ.Данные[ИмяПок];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
					+ НомСтроки + ": не задана дата договора", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
					+ НомСтроки + ": задана дата договора, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00008М200003";
				ТипПредметаСделки = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ТипПредметаСделки) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
					+ НомСтроки + ": не задан тип предмета сделки", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_3.Найти(ТипПредметаСделки) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
					+ НомСтроки + ": некорректно задан тип предмета сделки. Возможны значения: " + СтрСоединить(Мас_1_3, ", "),
					ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П00008М200004";
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
					+ ": не задано наименование предмета сделки", ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ТипПредметаСделки = "1" Тогда
					
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00008М200005"])
						ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00008М200006"]) Тогда
						
						ИмяПок = "П00008М200005";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						ДлинаЗначПок = СтрДлина(ЗначПок);
						Если ЗначениеЗаполнено(ЗначПок) И ДлинаЗначПок <> 10 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
							+ НомСтроки + ":" + ?(ДлинаЗначПок = 0, " не", "") + " задан код по ТН ВЭД" + ?(ДлинаЗначПок = 0,
							"", ", не состоящий из 10 символов"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ИмяПок = "П00008М200006";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						Если ЗначениеЗаполнено(ЗначПок) И НЕ ОКПД2СоответствуетТребованиям(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
							+ ": задан код по ОКПД2, не соответствующий шаблонам: ХХ, ХХ.Х, ХХ.ХХ, ХХ.ХХ.Х, ХХ.ХХ.ХХ, ХХ.ХХ.ХХ.ХХХ (X - любая цифра)",
							ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					Иначе
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка "
						+ НомСтроки + ": должен быть заполнен код по ТН ВЭД и(или) код по ОКПД2 при типе предмета сделки, равном 1",
						ИмяРаздела, "П00008М200005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				ИначеЕсли ТипПредметаСделки = "2" ИЛИ ТипПредметаСделки = "3" Тогда
					
					Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00008М200007"]) Тогда
						
						ИмяПок = "П00008М200007";
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
						Если НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПок) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки
							+ ": задан код по ОКВЭД2, не соответствующий шаблонам: ХХ, ХХ.Х, ХХ.ХХ, ХХ.ХХ.Х, ХХ.ХХ.ХХ (X - любая цифра)",
							ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполненаСтр010 = ЗначениеЗаполнено(Данные["П000800001003"]) ИЛИ Окр(Данные["П000800001004"]) <> 0;
			ЗаполненаСтр020 = ЗначениеЗаполнено(Данные["П000800002003"]) ИЛИ Окр(Данные["П000800002004"]) <> 0;
			ЗаполненаСтр030 = ЗначениеЗаполнено(Данные["П000800003003"]) ИЛИ Окр(Данные["П000800003004"]) <> 0;
			ЗаполненаСтр040 = ЗначениеЗаполнено(Данные["П000800004003"]) ИЛИ Окр(Данные["П000800004004"]) <> 0;
			ЗаполненаСтр050 = ЗначениеЗаполнено(Данные["П000800005003"]) ИЛИ Окр(Данные["П000800005004"]) <> 0;
			
			Если ЗаполненаСтр010 Тогда
				ИмяПок = "П000800001003";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак в строке 010", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак в строке 010. Возможны значения: " + СтрСоединить(Мас_0_1, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаполненаСтр020 Тогда
				ИмяПок = "П000800002003";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак в строке 020", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак в строке 020. Возможны значения: " + СтрСоединить(Мас_0_1, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаполненаСтр030 Тогда
				ИмяПок = "П000800003003";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак в строке 030", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак в строке 030. Возможны значения: " + СтрСоединить(Мас_0_1, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаполненаСтр040 Тогда
				ИмяПок = "П000800004003";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак в строке 040", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак в строке 040. Возможны значения: " + СтрСоединить(Мас_0_1, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполненаСтр010 ИЛИ ЗаполненаСтр020 ИЛИ ЗаполненаСтр030 ИЛИ ЗаполненаСтр040 ИЛИ ЗаполненаСтр050 Тогда
				ИмяПок = "П000800005003";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": не задан признак в строке 050", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
					+ ": некорректно задан признак в строке 050. Возможны значения: " + СтрСоединить(Мас_0_1, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаполненаСтраницаРаздела(
				ИмяФормы, Ветка, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
				
				НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 08 -> Страница " + НомСтраницы
				+ ": Лист не должен быть включен в состав декларации не за налоговый период",
				ИмяРаздела, "ПризнакВключения", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Лист 09.
	//
	ИмяРаздела = "Лист09";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	РазделДолженВыгружаться = ОтчетЗаГод И ПоМесту = "238";
	
	РазделМожетВыгружаться = ОтчетЗаГод;
	
	СоотвИменПоказателей = Новый Соответствие;
	СоотвИменПоказателей.Вставить("П009П1М103001", "П009П1М103003");
	СоотвИменПоказателей.Вставить("П009П1М104001", "П009П1М104003");
	СоотвИменПоказателей.Вставить("П009П1М105001", "П009П1М105003");
	СоотвИменПоказателей.Вставить("П009П1М106001", "П009П1М106003");
	СоотвИменПоказателей.Вставить("П009П1М107001", "П009П1М107003");
	СоотвИменПоказателей.Вставить("П009П1М108001", "П009П1М108003");
	СоотвИменПоказателей.Вставить("П009П1М109001", "П009П1М109003");
	СоотвИменПоказателей.Вставить("П009П1М110001", "П009П1М110003");
	СоотвИменПоказателей.Вставить("П009П1М111001", "П009П1М111003");
	СоотвИменПоказателей.Вставить("П009П1М112001", "П009П1М112003");
	
	Если РазделДолженВыгружаться ИЛИ РазделМожетВыгружаться Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				Продолжить;
			КонецЕсли;
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ИмяПок = "П0009А0000101";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: не задан номер контролируемой иностранной компании", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ (СтрДлина(ЗначПок) = 8 И (СтрНачинаетсяС(ЗначПок, "ИО-") ИЛИ СтрНачинаетсяС(ЗначПок, "ИС-"))) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел А:"
				+ " задан номер контролируемой иностранной компании, не соответствующий шаблонам:"
				+ " ИО-ХХХХХ, ИС-ХХХХХ (X - любая цифра)", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИмяПок = "П0009А0000111";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
					+ " -> Раздел А: не задан код вида дохода", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ЗначПок <> "36" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
					+ " -> Раздел А: некорректно задан код вида дохода. Возможно значение: 36", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяПок = "П0009А0000201";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если ЗначениеЗаполнено(ЗначПок) И Мас_1_5.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: некорректно задан код организационной формы. Возможны значения: " + СтрСоединить(Мас_1_5, ", "),
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0000301";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: не задано полное наименование (в латинской транскрипции)", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0000501";
			ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел А:"
				+ ?(ДлинаЗначПок = 0, " не", "") + " задан код государства (территории) регистрации (инкорпорации), учреждения"
				+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0000601";
			ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
			Если ДлинаЗначПок <> 3 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел А:"
				+ ?(ДлинаЗначПок = 0, " не", "") + " задан код государства (территории) налогового резидентства"
				+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0000701";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: не задан регистрационный номер (иной идентификатор) в государстве (территории) регистрации (инкорпорации), учреждения",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0000901";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: не задан адрес в государстве (территории) регистрации (инкорпорации) (в латинской транскрипции)",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0009А0001001";
			Если Данные[ИмяПок] = 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ " -> Раздел А: не задана доля участия в прибыли контролируемой иностранной компании",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для НомСтроки = 1 По 9 Цикл
				ИмяПок = "П0009А000110" + Строка(НомСтроки);
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
					+ " -> Раздел А: не задано подтверждение основания (с кодом 100" + Строка(НомСтроки)
					+ ") для освобождения прибыли контролируемой иностранной компании от налогообложения",
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_0_1.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
					+ " -> Раздел А: некорректно задано подтверждение основания (с кодом 100" + Строка(НомСтроки)
					+ ") для освобождения прибыли контролируемой иностранной компании от налогообложения. Возможны значения: "
					+ СтрСоединить(Мас_0_1, ", "), ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Данные["П0009А0000100"]) Тогда
				
				ИмяПок = "П009Б10000100";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел Б1:"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код валюты" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Данные["П0009А0000200"]) Тогда
				
				ЗаполненРазделБ2 = Ложь;
				ЗаполненРазделБ3 = Ложь;
				
				ИменаЧисловыхПоказателейСНастраиваемымФорматом
				= ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела)["ИменаНемногострочныхПоказателей"];
				
				Для каждого Пок Из Данные Цикл
					ЗаполненРазделБ2 = ЗаполненРазделБ2 ИЛИ (СтрНачинаетсяС(Пок.Ключ, "П009Б2")
					И ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом));
					
					ЗаполненРазделБ3 = ЗаполненРазделБ3 ИЛИ (СтрНачинаетсяС(Пок.Ключ, "П009Б3")
					И ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом));
					
					Если ЗаполненРазделБ2 И ЗаполненРазделБ3 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗаполненРазделБ2 Тогда
					
					ИмяПок = "П009Б20000100";
					ЗначПок = СокрЛП(Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
						+ " -> Раздел Б2: не задано основание для применения порядка расчета прибыли", ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли Мас_1_2.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
						+ " -> Раздел Б2: некорректно задано основание для применения порядка расчета прибыли. Возможны значения: "
						+ СтрСоединить(Мас_1_2, ", "), ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ИмяПок = "П009Б20000200";
					ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
					Если ДлинаЗначПок <> 3 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел Б2:"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код валюты" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"),
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗаполненРазделБ3 Тогда
					
					ИмяПок = "П009Б30000100";
					ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
					Если ДлинаЗначПок <> 3 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы + " -> Раздел Б3:"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан код валюты" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"),
						ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				Если ЗаполненаСтрокаМногострочнойЧасти(
					ИмяФормы, СтрокаМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
					
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ИмяПок = "П009П1М100100";
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
					Если ЗначениеЗаполнено(ЗначПок) И Мас_1_2.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница "
						+ НомСтраницы + " -> Приложение 1 -> Группа строк " + НомСтроки
						+ ": некорректно задан код операций, по которым производится расчет. Возможны значения: "
						+ СтрСоединить(Мас_1_2, ", "), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для Каждого Эл Из СоотвИменПоказателей Цикл
						Если Окр(СтрокаМнЧ.Данные[Эл.Значение]) <> 0
							И НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные[Эл.Ключ]) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
							+ " -> Приложение 1 -> Группа строк " + НомСтроки + ": не задан год в строке "
							+ Сред(Эл.Ключ + "_" + НомСтроки, 9, 3), ИмяРаздела, Эл.Ключ + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[Эл.Ключ])
							И СтрДлина(СокрЛП(СтрокаМнЧ.Данные[Эл.Ключ])) <> 4 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
							+ " -> Приложение 1 -> Группа строк " + НомСтроки + ": задан год, не состоящий из 4 цифр, в строке "
							+ Сред(Эл.Ключ + "_" + НомСтроки, 9, 3), ИмяРаздела, Эл.Ключ + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗаполненаСтраницаРаздела(
				ИмяФормы, Ветка, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
				
				НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 09 -> Страница " + НомСтраницы
				+ ": Лист не должен быть включен в состав декларации не за налоговый период",
				ИмяРаздела, "ПризнакВключения", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазделДолженВыгружаться И НЕ ЗаполненРаздел(
		ИмяФормы, ДеревоРаздела, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Лист 09 должен быть включен в состав декларации за налоговый период при коде места представления, равном "
		+ ПоМесту, ИмяРаздела, "ПризнакВключения", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Приложение 1.
	//
	ИмяРаздела = "Приложение1";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Ветка = ДеревоРаздела.Строки[0];
	
	Данные = Ветка.Данные;
	
	Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
		
		НомСтраницы = "1";
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
		
		Если НЕ ЗаполненаМногострочнаяЧасть(
			ИмяФормы, ДанныеМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 1 должно быть заполнено, если оно включено в состав декларации",
			ИмяРаздела, "П000П1М100001_1", НомСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложение 2.
	//
	ИмяРаздела = "Приложение2";
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела];
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		РазделМожетВыгружаться = (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
		
		Если РазделМожетВыгружаться Тогда
			
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Данные = Ветка.Данные;
				
				Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					Продолжить;
				КонецЕсли;
				
				НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
				
				ИмяПок = "П000П20000000";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 2 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + " -> Раздел А:"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код субъекта Российской Федерации, в котором реализуется соглашение"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000100";
				ЗначПок = Данные[ИмяПок];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ " -> Раздел А: не задана дата соглашения", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ " -> Раздел А: задана дата соглашения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000200";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ " -> Раздел А: не задан номер соглашения", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если Окр(Данные["П000П20006003"]) <> 0 И Окр(Данные["П000П20010003"]) <> 0 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ " -> Раздел А: не допускается одновременное заполнение строк 060 и 100",
					ИмяРаздела, "П000П20006003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если СокрЛП(Данные["П000П20000000"]) = "00" Тогда
					
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						
						Если ЗаполненаСтрокаМногострочнойЧасти(
							ИмяФормы, СтрокаМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
							
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ИмяПок = "П000П2М100000";
							ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
							Если ДлинаЗначПок <> 2 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
								+ " -> Группа " + НомСтроки + " строк Раздела Б:" + ?(ДлинаЗначПок = 0, " не", "")
								+ " задан код субъекта Российской Федерации, в котором реализуется соглашение"
								+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Данные = Ветка.Данные;
				
				Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗаполненаСтраницаРаздела(
					ИмяФормы, Ветка, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
					
					НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": Приложение 2 не должно быть включено в состав декларации не за отчетные периоды (1 квартал, "
					+ "полугодие, 9 месяцев) или не за налоговый период (год)", ИмяРаздела, "ПризнакВключения", НомСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				Продолжить;
			КонецЕсли;
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ИмяПок = "П000П20000100";
			ЗначПок = Данные[ИмяПок];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата соглашения", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
				+ ": задана дата соглашения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
				ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П000П20000200";
			ЗначПок = СокрЛП(Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
				+ ": не задан номер соглашения", ИмяРаздела, ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если Окр(Данные["П000П20006003"]) <> 0 И Окр(Данные["П000П20010003"]) <> 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
				+ ": не допускается одновременное заполнение строк 060 и 100", ИмяРаздела, "П000П20006003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе//"ФормаОтчета2019Кв4"
		
		РазделДолженВыгружаться = ОтчетЗаГод И ПоМесту = "235";
		
		РазделМожетВыгружаться = ОтчетЗаГод;
		
		Если РазделДолженВыгружаться ИЛИ РазделМожетВыгружаться Тогда
			
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Данные = Ветка.Данные;
				
				Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					Продолжить;
				КонецЕсли;
				
				НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
				
				ИмяПок = "П000П20000001";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задан номер справки", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000002";
				ЗначПок = Данные[ИмяПок];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задана дата составления справки", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": задана дата составления справки, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000003";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 2 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + ":"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан тип справки" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 цифр"),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000004";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					ДлинаЗначПок = СтрДлина(ЗначПок);
					Если ДлинаЗначПок <> 12 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + ":"
						+ ?(ДлинаЗначПок = 0, " не", "") + " задан ИНН физического лица"
						+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 12 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ИмяПок = "П000П20000005";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задана фамилия физического лица", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000006";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задано имя физического лица", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000008";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задан статус налогоплательщика", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли Мас_1_6.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": некорректно задан статус налогоплательщика. Возможны значения: " + СтрСоединить(Мас_1_6, ", "),
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000009";
				ЗначПок = Данные[ИмяПок];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не задана дата рождения", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": задана дата рождения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000010";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + ":"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задано гражданство (код страны)"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящее из 3 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000011";
				ДлинаЗначПок = СтрДлина(СокрЛП(Данные[ИмяПок]));
				Если ДлинаЗначПок <> 2 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + ":"
					+ ?(ДлинаЗначПок = 0, " не", "") + " задан код вида документа, удостоверяющего личность"
					+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 2 цифр"), ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ИмяПок = "П000П20000012";
				ЗначПок = СокрЛП(Данные[ИмяПок]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": не заданы серия и номер документа, удостоверяющего личность", ИмяРаздела, ИмяПок, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					Если ЗаполненаСтрокаМногострочнойЧасти(
						ИмяФормы, СтрокаМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						ИмяПок = "П000П2М104000";
						ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 4 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + " -> Группа "
							+ НомСтроки + " строк 040-043:" + ?(ДлинаЗначПок = 0, " не", "") + " задан код дохода"
							+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 4 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
						
						Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
							
							Если ЗаполненаСтрокаМногострочнойЧасти(
								ИмяФормы, СтрокаПодчМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
								
								ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
								НомПодчСтроки = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
								
								ИмяПок = "П000П2М204200";
								ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаПодчМнЧ.Данные[ИмяПок]));
								Если ДлинаЗначПок <> 3 Тогда
									СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + " -> Группа "
									+ НомСтроки + " строк 040-043 -> Группа " + НомПодчСтроки + " строк 042-043:" + ?(ДлинаЗначПок = 0,
									" не", "") + " задан код вычета" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"),
									ИмяРаздела, ИмяПок + "_" + НомСтроки + "_" + НомПодчСтроки, НомСтраницы);
									СтатусПроверки = Ложь;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					Если ЗаполненаСтрокаМногострочнойЧасти(
						ИмяФормы, СтрокаМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						
						ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
						НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
						
						ИмяПок = "П000П2М305100";
						ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
						Если ДлинаЗначПок <> 3 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы + " -> Группа "
							+ НомСтроки + " строк 051-052:" + ?(ДлинаЗначПок = 0, " не", "") + " задан код вычета"
							+ ?(ДлинаЗначПок = 0, "", ", не состоящий из 3 цифр"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Данные = Ветка.Данные;
				
				Если НЕ ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗаполненаСтраницаРаздела(
					ИмяФормы, Ветка, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
					
					НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Приложение 2 -> Страница " + НомСтраницы
					+ ": Приложение не должно быть включено в состав декларации не за налоговый период",
					ИмяРаздела, "ПризнакВключения", НомСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если РазделДолженВыгружаться И НЕ ЗаполненРаздел(
			ИмяФормы, ДеревоРаздела, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Приложение 2 должно быть включено в состав декларации за налоговый период при коде места представления, равном "
			+ ПоМесту, ИмяРаздела, "ПризнакВключения", "1");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_Лист03В(ИмяФормы,
											   Ветка,
											   НомСтраницы,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   РезультатВыгрузки,
											   СтатусПроверки)
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1];
	
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		
		Если ЗаполненаСтрокаМногострочнойЧасти(
			ИмяФормы, СтрокаМнЧ, ИмяРаздела, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
			
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ИмяРаздела_Стр = ?(ИмяРаздела = "Лист03А", "Раздел А", "Раздел Б");
			
			ИмяПок = "П0003ВМ100503";
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
			Если ДлинаЗначПок <> 10 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
				+ " -> Группа " + НомСтроки + " строк 005-060:" + ?(ДлинаЗначПок = 0, " не", "") + " задан ИНН получателя"
				+ ?(ДлинаЗначПок = 0, "", " некорректной длины"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
				
				ИмяПок = "П0003ВМ100504";
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
					Если ДлинаЗначПок <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
						+ " -> Группа " + НомСтроки + " строк 005-060:" + ?(ДлинаЗначПок = 0, " не", "") + " задан КПП получателя"
						+ ?(ДлинаЗначПок = 0, "", " некорректной длины"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Конецесли;
				
			КонецЕсли;
			
			ИмяПок = "П0003ВМ100505";
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные[ИмяПок]));
			Если ДлинаЗначПок <> 2 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
				+ " -> Группа " + НомСтроки + " строк 005-060:" + ?(ДлинаЗначПок = 0, " не", "") + " задан тип"
				+ ?(ДлинаЗначПок = 0, "", " некорректной длины"), ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ИмяПок = "П0003ВМ101003";
			ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
				+ " -> Группа " + НомСтроки + " строк 005-060: не задано наименование получателя",
				ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			Конецесли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
				
				Если ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0003ВМ102003"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0003ВМ102004"])
					ИЛИ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П0003ВМ102005"]) Тогда
					
					ИмяПок = "П0003ВМ102003";
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
						+ " -> Группа " + НомСтроки + " строк 005-060: не задана фамилия руководителя организации",
						ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					Конецесли;
					
					ИмяПок = "П0003ВМ102004";
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные[ИмяПок]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
						+ " -> Группа " + НомСтроки + " строк 005-060: не задано имя руководителя организации",
						ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					Конецесли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИмяПок = "П0003ВМ104003";
			ЗначПок = СтрокаМнЧ.Данные[ИмяПок];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
				+ " -> Группа " + НомСтроки + " строк 005-060: не задана дата перечисления дивидендов (процентов)",
				ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Лист 03. " + ИмяРаздела_Стр + " -> Страница " + НомСтраницы
				+ " -> Группа " + НомСтроки
				+ " строк 005-060: задана дата перечисления дивидендов (процентов), выходящая за пределы периода с 01.01.1900 по 31.12.2099",
				ИмяРаздела, ИмяПок + "_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			Конецесли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомерДокументаСоответствуетТребованиям(Знач НомерДокумента, ПризнакНП, ТекстСообщения)
	
	НомерДок = СокрЛП(НомерДокумента);
	
	Если ПризнакНП = "03" Тогда
		
		НомерДокументаСоответствуетТребованиям
		= СтрДлина(НомерДок) >= 2 И СтрНайти("12345678", Лев(НомерДок, 1)) > 0 И Сред(НомерДок, 2, 1) = "/";
		
		Если НЕ НомерДокументаСоответствуетТребованиям Тогда
			
			ТекстСообщения = "Если код признака налогоплательщика равен ""03"", значение должно соответствовать "
			+ "шаблону ""К/Н"", где ""К"" - код типа особых (свободных) экономических зон или свободного порта Владивосток "
			+ "(цифра от 1 до 8), ""Н"" - строка длиной 0-19 символов";
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1';
											|en = '%1'"), ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		НомерДокументаСоответствуетТребованиям
		= СтрДлина(НомерДок) >= 3 И Лев(НомерДок, 1) = "0" И Сред(НомерДок, 2, 1) = "/";
		
		Если НЕ НомерДокументаСоответствуетТребованиям Тогда
			
			ТекстСообщения = "Если код признака налогоплательщика не равен ""03"", значение, если заполнено, "
			+ "должно соответствовать шаблону ""К/Н"", где ""К"" - цифра 0, ""Н"" - строка длиной 1-19 символов";
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1';
											|en = '%1'"), ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерДокументаСоответствуетТребованиям;
	
КонецФункции

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(ИмяФормы,
									  СтраницаРаздела,
									  ИмяРаздела,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтраницаРаздела(ИмяФормы,
								 Знач СтраницаРаздела,
								 Знач ИмяРаздела,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ДопПараметры = Неопределено)
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом
	= ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела)["ИменаНемногострочныхПоказателей"];
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом)
			И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ИмяФормы,
											 ДеревоМнЧ,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ИмяФормы,
								ДеревоПодчРаздела,
								ИмяПодчРаздела,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов,
								ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаМногострочнаяЧасть(ИмяФормы,
									Знач ДеревоМнЧ,
									Знач ИмяРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов,
									ДопПараметры = Неопределено)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
											   СтрокаМнЧ,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
										  Знач СтрокаМнЧ,
										  Знач ИмяРаздела,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов,
										  ДопПараметры = Неопределено)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом
	= ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела)["ИменаМногострочныхПоказателей"];
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом)
			И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
													   СтрокаПодчМнЧ,
													   ИмяРаздела,
													   СтруктураРеквизитовФормы,
													   СтруктураМногоуровневыхРазделов,
													   ДопПараметры) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненПоказатель(ИмяФормы,
						   ИмяПоказателя,
						   ЗначениеПоказателя,
						   ИменаЧисловыхПоказателейСНастраиваемымФорматом,
						   ДопПараметры = Неопределено)
	
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Число")
		И ИменаЧисловыхПоказателейСНастраиваемымФорматом.Найти(ИмяПоказателя) <> Неопределено Тогда
		Возврат Окр(ЗначениеПоказателя) <> 0;
	Иначе
		Возврат ЗначениеЗаполнено(ЗначениеПоказателя);
	КонецЕсли;
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Функция ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела) Экспорт
	
	ИменаМногострочныхПоказателей   = Новый Массив;
	ИменаНемногострочныхПоказателей = Новый Массив;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		Если ИмяРаздела = "Раздел1_1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00011М104003");
			ИменаМногострочныхПоказателей.Добавить("П00011М105003");
			ИменаМногострочныхПоказателей.Добавить("П00011М107003");
			ИменаМногострочныхПоказателей.Добавить("П00011М108003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00012М112003");
			ИменаМногострочныхПоказателей.Добавить("П00012М113003");
			ИменаМногострочныхПоказателей.Добавить("П00012М114003");
			ИменаМногострочныхПоказателей.Добавить("П00012М122003");
			ИменаМногострочныхПоказателей.Добавить("П00012М123003");
			ИменаМногострочныхПоказателей.Добавить("П00012М124003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИменаМногострочныхПоказателей.Добавить("П00013М104003");
				ИменаМногострочныхПоказателей.Добавить("П00013М105003");
				ИменаМногострочныхПоказателей.Добавить("П00013М106003");
				ИменаМногострочныхПоказателей.Добавить("П00013М107003");
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4"
				
				ИменаМногострочныхПоказателей.Добавить("П00013М204003");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист02" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000020001003");
			ИменаНемногострочныхПоказателей.Добавить("П000020002003");
			ИменаНемногострочныхПоказателей.Добавить("П000020003003");
			ИменаНемногострочныхПоказателей.Добавить("П000020004003");
			ИменаНемногострочныхПоказателей.Добавить("П000020005003");
			ИменаНемногострочныхПоказателей.Добавить("П000020006003");
			ИменаНемногострочныхПоказателей.Добавить("П000020007003");
			ИменаНемногострочныхПоказателей.Добавить("П000020010003");
			ИменаНемногострочныхПоказателей.Добавить("П000020011003");
			ИменаНемногострочныхПоказателей.Добавить("П000020012003");
			ИменаНемногострочныхПоказателей.Добавить("П000020013003");
			ИменаНемногострочныхПоказателей.Добавить("П000020018003");
			ИменаНемногострочныхПоказателей.Добавить("П000020019003");
			ИменаНемногострочныхПоказателей.Добавить("П000020020003");
			ИменаНемногострочныхПоказателей.Добавить("П000020021003");
			ИменаНемногострочныхПоказателей.Добавить("П000020022003");
			ИменаНемногострочныхПоказателей.Добавить("П000020023003");
			ИменаНемногострочныхПоказателей.Добавить("П000020024003");
			ИменаНемногострочныхПоказателей.Добавить("П000020025003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026503");
			ИменаНемногострочныхПоказателей.Добавить("П000020026603");
			ИменаНемногострочныхПоказателей.Добавить("П000020026703");
			ИменаНемногострочныхПоказателей.Добавить("П000020026803");
			ИменаНемногострочныхПоказателей.Добавить("П000020026903");
			ИменаНемногострочныхПоказателей.Добавить("П000020027003");
			ИменаНемногострочныхПоказателей.Добавить("П000020027103");
			ИменаНемногострочныхПоказателей.Добавить("П000020028003");
			ИменаНемногострочныхПоказателей.Добавить("П000020028103");
			ИменаНемногострочныхПоказателей.Добавить("П000020029003");
			ИменаНемногострочныхПоказателей.Добавить("П000020030003");
			ИменаНемногострочныхПоказателей.Добавить("П000020031003");
			ИменаНемногострочныхПоказателей.Добавить("П000020032003");
			ИменаНемногострочныхПоказателей.Добавить("П000020033003");
			ИменаНемногострочныхПоказателей.Добавить("П000020034003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035103");
			ИменаНемногострочныхПоказателей.Добавить("П000020035203");
			ИменаНемногострочныхПоказателей.Добавить("П000020035303");
			ИменаНемногострочныхПоказателей.Добавить("П000020035703");
			ИменаНемногострочныхПоказателей.Добавить("П000020035803");
			ИменаНемногострочныхПоказателей.Добавить("П000020035903");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИменаНемногострочныхПоказателей.Добавить("П000020037003");
				ИменаНемногострочныхПоказателей.Добавить("П000020039003");
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4"
				
				ИменаНемногострочныхПоказателей.Добавить("П000020008003");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000210002703");
			ИменаНемногострочныхПоказателей.Добавить("П000210003003");
			ИменаНемногострочныхПоказателей.Добавить("П000210004003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001103");
			ИменаНемногострочныхПоказателей.Добавить("П000210001203");
			ИменаНемногострочныхПоказателей.Добавить("П000210001303");
			ИменаНемногострочныхПоказателей.Добавить("П000210001403");
			ИменаНемногострочныхПоказателей.Добавить("П000210002003");
			ИменаНемногострочныхПоказателей.Добавить("П000210002103");
			ИменаНемногострочныхПоказателей.Добавить("П000210002203");
			ИменаНемногострочныхПоказателей.Добавить("П000210002303");
			ИменаНемногострочныхПоказателей.Добавить("П000210002403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010003");
			ИменаНемногострочныхПоказателей.Добавить("П000210010103");
			ИменаНемногострочныхПоказателей.Добавить("П000210010203");
			ИменаНемногострочныхПоказателей.Добавить("П000210010303");
			ИменаНемногострочныхПоказателей.Добавить("П000210010403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010503");
			ИменаНемногострочныхПоказателей.Добавить("П000210010603");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИменаНемногострочныхПоказателей.Добавить("П000210010703");
				ИменаНемногострочныхПоказателей.Добавить("П000210010803");
				ИменаНемногострочныхПоказателей.Добавить("П000210010903");
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4"
				
				ИменаНемногострочныхПоказателей.Добавить("П000210020003");
				ИменаНемногострочныхПоказателей.Добавить("П000210020103");
				ИменаНемногострочныхПоказателей.Добавить("П000210020203");
				ИменаНемногострочныхПоказателей.Добавить("П000210020303");
				ИменаНемногострочныхПоказателей.Добавить("П000210021003");
				ИменаНемногострочныхПоказателей.Добавить("П000210022003");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000220001003");
			ИменаНемногострочныхПоказателей.Добавить("П000220002003");
			ИменаНемногострочныхПоказателей.Добавить("П000220003003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004103");
			ИменаНемногострочныхПоказателей.Добавить("П000220004203");
			ИменаНемногострочныхПоказателей.Добавить("П000220004303");
			ИменаНемногострочныхПоказателей.Добавить("П000220004503");
			ИменаНемногострочныхПоказателей.Добавить("П000220004703");
			ИменаНемногострочныхПоказателей.Добавить("П000220005203");
			ИменаНемногострочныхПоказателей.Добавить("П000220005303");
			ИменаНемногострочныхПоказателей.Добавить("П000220005403");
			ИменаНемногострочныхПоказателей.Добавить("П000220005503");
			ИменаНемногострочныхПоказателей.Добавить("П000220005903");
			ИменаНемногострочныхПоказателей.Добавить("П000220006003");
			ИменаНемногострочныхПоказателей.Добавить("П000220006103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007003");
			ИменаНемногострочныхПоказателей.Добавить("П000220007103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007203");
			ИменаНемногострочныхПоказателей.Добавить("П000220007303");
			ИменаНемногострочныхПоказателей.Добавить("П000220008003");
			ИменаНемногострочныхПоказателей.Добавить("П000220009003");
			ИменаНемногострочныхПоказателей.Добавить("П000220010003");
			ИменаНемногострочныхПоказателей.Добавить("П000220012003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013103");
			ИменаНемногострочныхПоказателей.Добавить("П000220013203");
			ИменаНемногострочныхПоказателей.Добавить("П000220013303");
			ИменаНемногострочныхПоказателей.Добавить("П000220013403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020003");
			ИменаНемногострочныхПоказателей.Добавить("П000220020103");
			ИменаНемногострочныхПоказателей.Добавить("П000220020203");
			ИменаНемногострочныхПоказателей.Добавить("П000220020403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020503");
			ИменаНемногострочныхПоказателей.Добавить("П000220020603");
			ИменаНемногострочныхПоказателей.Добавить("П000220030003");
			ИменаНемногострочныхПоказателей.Добавить("П000220030103");
			ИменаНемногострочныхПоказателей.Добавить("П000220030203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040003");
			ИменаНемногострочныхПоказателей.Добавить("П000220040103");
			ИменаНемногострочныхПоказателей.Добавить("П000220040203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040303");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИменаНемногострочныхПоказателей.Добавить("П000220020703");
				ИменаНемногострочныхПоказателей.Добавить("П000220020803");
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4"
				
				ИменаНемногострочныхПоказателей.Добавить("П000220004603");
				ИменаНемногострочныхПоказателей.Добавить("П000220004803");
				ИменаНемногострочныхПоказателей.Добавить("П000220004903");
				ИменаНемногострочныхПоказателей.Добавить("П000220005003");
				ИменаНемногострочныхПоказателей.Добавить("П000220005103");
				ИменаНемногострочныхПоказателей.Добавить("П000220011003");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000230003003");
			ИменаНемногострочныхПоказателей.Добавить("П000230004003");
			ИменаНемногострочныхПоказателей.Добавить("П000230005003");
			ИменаНемногострочныхПоказателей.Добавить("П000230006003");
			ИменаНемногострочныхПоказателей.Добавить("П000230010003");
			ИменаНемногострочныхПоказателей.Добавить("П000230012003");
			ИменаНемногострочныхПоказателей.Добавить("П000230018003");
			ИменаНемногострочныхПоказателей.Добавить("П000230019003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020103");
			ИменаНемногострочныхПоказателей.Добавить("П000230021003");
			ИменаНемногострочныхПоказателей.Добавить("П000230021103");
			ИменаНемногострочныхПоказателей.Добавить("П000230022003");
			ИменаНемногострочныхПоказателей.Добавить("П000230022103");
			ИменаНемногострочныхПоказателей.Добавить("П000230023003");
			ИменаНемногострочныхПоказателей.Добавить("П000230024003");
			ИменаНемногострочныхПоказателей.Добавить("П000230025003");
			ИменаНемногострочныхПоказателей.Добавить("П000230026003");
			ИменаНемногострочныхПоказателей.Добавить("П000230034003");
			ИменаНемногострочныхПоказателей.Добавить("П000230035003");
			ИменаНемногострочныхПоказателей.Добавить("П000230036003");
			ИменаНемногострочныхПоказателей.Добавить("П000230014003");
			ИменаНемногострочныхПоказателей.Добавить("П000230015003");
			
		ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000240001003");
			ИменаНемногострочныхПоказателей.Добавить("П000240013503");
			ИменаНемногострочныхПоказателей.Добавить("П000240013603");
			ИменаНемногострочныхПоказателей.Добавить("П000240014003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015103");
			ИменаНемногострочныхПоказателей.Добавить("П000240016003");
			ИменаНемногострочныхПоказателей.Добавить("П000240016103");
			
			ИменаМногострочныхПоказателей.Добавить("П00024М100003");
			
		ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000250003003");
			ИменаНемногострочныхПоказателей.Добавить("П000250003103");
			ИменаНемногострочныхПоказателей.Добавить("П000250005003");
			ИменаНемногострочныхПоказателей.Добавить("П000250005103");
			ИменаНемногострочныхПоказателей.Добавить("П000250007003");
			ИменаНемногострочныхПоказателей.Добавить("П000250008003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009503");
			ИменаНемногострочныхПоказателей.Добавить("П000250009603");
			ИменаНемногострочныхПоказателей.Добавить("П000250009703");
			ИменаНемногострочныхПоказателей.Добавить("П000250009803");
			ИменаНемногострочныхПоказателей.Добавить("П000250010003");
			ИменаНемногострочныхПоказателей.Добавить("П000250011003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6"
			И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")) Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000260003003");
			ИменаНемногострочныхПоказателей.Добавить("П000260003103");
			ИменаНемногострочныхПоказателей.Добавить("П000260005003");
			ИменаНемногострочныхПоказателей.Добавить("П000260005103");
			ИменаНемногострочныхПоказателей.Добавить("П000260007003");
			ИменаНемногострочныхПоказателей.Добавить("П000260008003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009503");
			ИменаНемногострочныхПоказателей.Добавить("П000260009603");
			ИменаНемногострочныхПоказателей.Добавить("П000260009703");
			ИменаНемногострочныхПоказателей.Добавить("П000260009803");
			ИменаНемногострочныхПоказателей.Добавить("П000260010003");
			ИменаНемногострочныхПоказателей.Добавить("П000260011003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6а"
			И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")) Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003303");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009503");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009703");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009803");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бА"
			И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")) Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0006003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0012003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0015003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0016003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0017003");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бБ"
			И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")) Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0021003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0022003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0023003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0024003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025603");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025703");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025803");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0026003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031203");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0032003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0033003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0034003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0035003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001203");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001303");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001403");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001503");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001603");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001703");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0006003");
			
			ИменаМногострочныхПоказателей.Добавить("П0027АМ100003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ200003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ300003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7В" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027В0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0004003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Г" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002403");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002603");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005303");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005403");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0006003");
			
			ИменаМногострочныхПоказателей.Добавить("П0027ГМ100003");
			ИменаМногострочныхПоказателей.Добавить("П0027ГМ200003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Д"
			И ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0010003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0012003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0013003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0013503");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0014503");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0015503");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0016503");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0017003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Д0020003");
			
			ИменаМногострочныхПоказателей.Добавить("П0027ДМ100003");
			ИменаМногострочныхПоказателей.Добавить("П0027ДМ200003");
			
		ИначеЕсли ИмяРаздела = "Лист03А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003А0000103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003503");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003603");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003703");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009503");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0010003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0012003");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
				
				ИменаНемногострочныхПоказателей.Добавить("П0003А0003803");
				
			КонецЕсли;
			
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
			
		ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0005003");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
				
				ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
				ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист04" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000040001003");
			ИменаНемногострочныхПоказателей.Добавить("П000040002003");
			ИменаНемногострочныхПоказателей.Добавить("П000040004003");
			ИменаНемногострочныхПоказателей.Добавить("П000040005003");
			ИменаНемногострочныхПоказателей.Добавить("П000040006003");
			ИменаНемногострочныхПоказателей.Добавить("П000040007003");
			ИменаНемногострочныхПоказателей.Добавить("П000040008003");
			
		ИначеЕсли ИмяРаздела = "Лист05" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000050001003");
			ИменаНемногострочныхПоказателей.Добавить("П000050001103");
			ИменаНемногострочныхПоказателей.Добавить("П000050001203");
			ИменаНемногострочныхПоказателей.Добавить("П000050001303");
			ИменаНемногострочныхПоказателей.Добавить("П000050001403");
			ИменаНемногострочныхПоказателей.Добавить("П000050002003");
			ИменаНемногострочныхПоказателей.Добавить("П000050002103");
			ИменаНемногострочныхПоказателей.Добавить("П000050002203");
			ИменаНемногострочныхПоказателей.Добавить("П000050002303");
			ИменаНемногострочныхПоказателей.Добавить("П000050002403");
			ИменаНемногострочныхПоказателей.Добавить("П000050004003");
			ИменаНемногострочныхПоказателей.Добавить("П000050005003");
			ИменаНемногострочныхПоказателей.Добавить("П000050006003");
			ИменаНемногострочныхПоказателей.Добавить("П000050008003");
			ИменаНемногострочныхПоказателей.Добавить("П000050010003");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИменаНемногострочныхПоказателей.Добавить("П000050001503");
				ИменаНемногострочныхПоказателей.Добавить("П000050002503");
				
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Лист06" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000060001003");
			ИменаНемногострочныхПоказателей.Добавить("П000060002003");
			ИменаНемногострочныхПоказателей.Добавить("П000060003003");
			ИменаНемногострочныхПоказателей.Добавить("П000060004003");
			ИменаНемногострочныхПоказателей.Добавить("П000060005003");
			ИменаНемногострочныхПоказателей.Добавить("П000060006003");
			ИменаНемногострочныхПоказателей.Добавить("П000060007003");
			ИменаНемногострочныхПоказателей.Добавить("П000060008003");
			ИменаНемногострочныхПоказателей.Добавить("П000060009003");
			ИменаНемногострочныхПоказателей.Добавить("П000060010003");
			ИменаНемногострочныхПоказателей.Добавить("П000060011003");
			ИменаНемногострочныхПоказателей.Добавить("П000060012003");
			ИменаНемногострочныхПоказателей.Добавить("П000060013003");
			ИменаНемногострочныхПоказателей.Добавить("П000060014003");
			ИменаНемногострочныхПоказателей.Добавить("П000060015003");
			ИменаНемногострочныхПоказателей.Добавить("П000060016003");
			ИменаНемногострочныхПоказателей.Добавить("П000060017003");
			ИменаНемногострочныхПоказателей.Добавить("П000060018003");
			ИменаНемногострочныхПоказателей.Добавить("П000060019003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020103");
			ИменаНемногострочныхПоказателей.Добавить("П000060021003");
			ИменаНемногострочныхПоказателей.Добавить("П000060021103");
			ИменаНемногострочныхПоказателей.Добавить("П000060022003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024103");
			ИменаНемногострочныхПоказателей.Добавить("П000060024203");
			ИменаНемногострочныхПоказателей.Добавить("П000060025003");
			ИменаНемногострочныхПоказателей.Добавить("П000060026003");
			ИменаНемногострочныхПоказателей.Добавить("П000060027003");
			ИменаНемногострочныхПоказателей.Добавить("П000060028003");
			ИменаНемногострочныхПоказателей.Добавить("П000060029003");
			ИменаНемногострочныхПоказателей.Добавить("П000060030003");
			ИменаНемногострочныхПоказателей.Добавить("П000060031003");
			ИменаНемногострочныхПоказателей.Добавить("П000060032003");
			ИменаНемногострочныхПоказателей.Добавить("П000060033003");
			ИменаНемногострочныхПоказателей.Добавить("П000060034003");
			ИменаНемногострочныхПоказателей.Добавить("П000060035003");
			ИменаНемногострочныхПоказателей.Добавить("П000060036003");
			ИменаНемногострочныхПоказателей.Добавить("П000060037003");
			ИменаНемногострочныхПоказателей.Добавить("П000060038003");
			ИменаНемногострочныхПоказателей.Добавить("П000060039003");
			ИменаНемногострочныхПоказателей.Добавить("П000060040003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045803");
			ИменаНемногострочныхПоказателей.Добавить("П000060045903");
			ИменаНемногострочныхПоказателей.Добавить("П000060046003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047103");
			ИменаНемногострочныхПоказателей.Добавить("П000060048003");
			ИменаНемногострочныхПоказателей.Добавить("П000060048103");
			ИменаНемногострочныхПоказателей.Добавить("П000060049003");
			ИменаНемногострочныхПоказателей.Добавить("П000060050003");
			ИменаНемногострочныхПоказателей.Добавить("П000060051003");
			ИменаНемногострочныхПоказателей.Добавить("П000060052003");
			ИменаНемногострочныхПоказателей.Добавить("П000060053003");
			
		ИначеЕсли ИмяРаздела = "Лист07" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00007М100003");
			ИменаМногострочныхПоказателей.Добавить("П00007М100004");
			ИменаМногострочныхПоказателей.Добавить("П00007М100006");
			ИменаМногострочныхПоказателей.Добавить("П00007М100007");
			
			ИменаНемногострочныхПоказателей.Добавить("П000070000003");
			ИменаНемногострочныхПоказателей.Добавить("П000070000004");
			ИменаНемногострочныхПоказателей.Добавить("П000070000006");
			ИменаНемногострочныхПоказателей.Добавить("П000070000007");
			
		ИначеЕсли ИмяРаздела = "Лист08" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000800001004");
			ИменаНемногострочныхПоказателей.Добавить("П000800002004");
			ИменаНемногострочныхПоказателей.Добавить("П000800003004");
			ИменаНемногострочныхПоказателей.Добавить("П000800004004");
			ИменаНемногострочныхПоказателей.Добавить("П000800005004");
			
		ИначеЕсли ИмяРаздела = "Лист09" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б10001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10023003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б20001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20023003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20024003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20025003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30013003");
			
			ИменаМногострочныхПоказателей.Добавить("П009П1М101003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М102003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М103003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М104003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М105003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М106003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М107003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М108003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М109003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М110003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М111003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М112003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М113003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М114003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М115003");
			
		ИначеЕсли ИмяРаздела = "Приложение1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П000П1М100002");
			ИменаМногострочныхПоказателей.Добавить("П000П1М100004");
			
		ИначеЕсли ИмяРаздела = "Приложение2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000П20001003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20002003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20004003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20005003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20006003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20010003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20011003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20012003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20013003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20018003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20019003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20020003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20026803");
			ИменаНемногострочныхПоказателей.Добавить("П000П20026903");
			
			ИменаМногострочныхПоказателей.Добавить("П000П2М105003");
			ИменаМногострочныхПоказателей.Добавить("П000П2М105103");
			ИменаМногострочныхПоказателей.Добавить("П000П2М107003");
			ИменаМногострочныхПоказателей.Добавить("П000П2М107103");
			ИменаМногострочныхПоказателей.Добавить("П000П2М107203");
			ИменаМногострочныхПоказателей.Добавить("П000П2М109703");
			ИменаМногострочныхПоказателей.Добавить("П000П2М109803");
			
		КонецЕсли;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		
		Если ИмяРаздела = "Раздел1_1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00011М104003");
			ИменаМногострочныхПоказателей.Добавить("П00011М105003");
			ИменаМногострочныхПоказателей.Добавить("П00011М107003");
			ИменаМногострочныхПоказателей.Добавить("П00011М108003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00012М112003");
			ИменаМногострочныхПоказателей.Добавить("П00012М113003");
			ИменаМногострочныхПоказателей.Добавить("П00012М114003");
			ИменаМногострочныхПоказателей.Добавить("П00012М122003");
			ИменаМногострочныхПоказателей.Добавить("П00012М123003");
			ИменаМногострочныхПоказателей.Добавить("П00012М124003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00013М204003");
			
		ИначеЕсли ИмяРаздела = "Лист02" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000020001003");
			ИменаНемногострочныхПоказателей.Добавить("П000020002003");
			ИменаНемногострочныхПоказателей.Добавить("П000020003003");
			ИменаНемногострочныхПоказателей.Добавить("П000020004003");
			ИменаНемногострочныхПоказателей.Добавить("П000020005003");
			ИменаНемногострочныхПоказателей.Добавить("П000020006003");
			ИменаНемногострочныхПоказателей.Добавить("П000020007003");
			ИменаНемногострочныхПоказателей.Добавить("П000020008003");
			ИменаНемногострочныхПоказателей.Добавить("П000020010003");
			ИменаНемногострочныхПоказателей.Добавить("П000020011003");
			ИменаНемногострочныхПоказателей.Добавить("П000020012003");
			ИменаНемногострочныхПоказателей.Добавить("П000020013003");
			ИменаНемногострочныхПоказателей.Добавить("П000020018003");
			ИменаНемногострочныхПоказателей.Добавить("П000020019003");
			ИменаНемногострочныхПоказателей.Добавить("П000020020003");
			ИменаНемногострочныхПоказателей.Добавить("П000020021003");
			ИменаНемногострочныхПоказателей.Добавить("П000020022003");
			ИменаНемногострочныхПоказателей.Добавить("П000020023003");
			ИменаНемногострочныхПоказателей.Добавить("П000020024003");
			ИменаНемногострочныхПоказателей.Добавить("П000020025003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026503");
			ИменаНемногострочныхПоказателей.Добавить("П000020026603");
			ИменаНемногострочныхПоказателей.Добавить("П000020026703");
			ИменаНемногострочныхПоказателей.Добавить("П000020026803");
			ИменаНемногострочныхПоказателей.Добавить("П000020026903");
			ИменаНемногострочныхПоказателей.Добавить("П000020027003");
			ИменаНемногострочныхПоказателей.Добавить("П000020027103");
			ИменаНемногострочныхПоказателей.Добавить("П000020028003");
			ИменаНемногострочныхПоказателей.Добавить("П000020028103");
			ИменаНемногострочныхПоказателей.Добавить("П000020029003");
			ИменаНемногострочныхПоказателей.Добавить("П000020030003");
			ИменаНемногострочныхПоказателей.Добавить("П000020031003");
			ИменаНемногострочныхПоказателей.Добавить("П000020032003");
			ИменаНемногострочныхПоказателей.Добавить("П000020033003");
			ИменаНемногострочныхПоказателей.Добавить("П000020034003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035103");
			ИменаНемногострочныхПоказателей.Добавить("П000020035203");
			ИменаНемногострочныхПоказателей.Добавить("П000020035303");
			ИменаНемногострочныхПоказателей.Добавить("П000020035703");
			ИменаНемногострочныхПоказателей.Добавить("П000020035803");
			ИменаНемногострочныхПоказателей.Добавить("П000020035903");
			
		ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000210002703");
			ИменаНемногострочныхПоказателей.Добавить("П000210003003");
			ИменаНемногострочныхПоказателей.Добавить("П000210004003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001103");
			ИменаНемногострочныхПоказателей.Добавить("П000210001203");
			ИменаНемногострочныхПоказателей.Добавить("П000210001303");
			ИменаНемногострочныхПоказателей.Добавить("П000210001403");
			ИменаНемногострочныхПоказателей.Добавить("П000210002003");
			ИменаНемногострочныхПоказателей.Добавить("П000210002103");
			ИменаНемногострочныхПоказателей.Добавить("П000210002203");
			ИменаНемногострочныхПоказателей.Добавить("П000210002303");
			ИменаНемногострочныхПоказателей.Добавить("П000210002403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010003");
			ИменаНемногострочныхПоказателей.Добавить("П000210010103");
			ИменаНемногострочныхПоказателей.Добавить("П000210010203");
			ИменаНемногострочныхПоказателей.Добавить("П000210010303");
			ИменаНемногострочныхПоказателей.Добавить("П000210010403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010503");
			ИменаНемногострочныхПоказателей.Добавить("П000210010603");
			ИменаНемногострочныхПоказателей.Добавить("П000210020003");
			ИменаНемногострочныхПоказателей.Добавить("П000210020103");
			ИменаНемногострочныхПоказателей.Добавить("П000210020203");
			ИменаНемногострочныхПоказателей.Добавить("П000210020303");
			ИменаНемногострочныхПоказателей.Добавить("П000210021003");
			ИменаНемногострочныхПоказателей.Добавить("П000210022003");
			
		ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000220001003");
			ИменаНемногострочныхПоказателей.Добавить("П000220002003");
			ИменаНемногострочныхПоказателей.Добавить("П000220003003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004103");
			ИменаНемногострочныхПоказателей.Добавить("П000220004203");
			ИменаНемногострочныхПоказателей.Добавить("П000220004303");
			ИменаНемногострочныхПоказателей.Добавить("П000220004503");
			ИменаНемногострочныхПоказателей.Добавить("П000220004603");
			ИменаНемногострочныхПоказателей.Добавить("П000220004703");
			ИменаНемногострочныхПоказателей.Добавить("П000220004803");
			ИменаНемногострочныхПоказателей.Добавить("П000220004903");
			ИменаНемногострочныхПоказателей.Добавить("П000220005003");
			ИменаНемногострочныхПоказателей.Добавить("П000220005103");
			ИменаНемногострочныхПоказателей.Добавить("П000220005203");
			ИменаНемногострочныхПоказателей.Добавить("П000220005303");
			ИменаНемногострочныхПоказателей.Добавить("П000220005403");
			ИменаНемногострочныхПоказателей.Добавить("П000220005503");
			ИменаНемногострочныхПоказателей.Добавить("П000220005903");
			ИменаНемногострочныхПоказателей.Добавить("П000220006003");
			ИменаНемногострочныхПоказателей.Добавить("П000220006103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007003");
			ИменаНемногострочныхПоказателей.Добавить("П000220007103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007203");
			ИменаНемногострочныхПоказателей.Добавить("П000220007303");
			ИменаНемногострочныхПоказателей.Добавить("П000220008003");
			ИменаНемногострочныхПоказателей.Добавить("П000220009003");
			ИменаНемногострочныхПоказателей.Добавить("П000220010003");
			ИменаНемногострочныхПоказателей.Добавить("П000220011003");
			ИменаНемногострочныхПоказателей.Добавить("П000220012003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013103");
			ИменаНемногострочныхПоказателей.Добавить("П000220013203");
			ИменаНемногострочныхПоказателей.Добавить("П000220013303");
			ИменаНемногострочныхПоказателей.Добавить("П000220013403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020003");
			ИменаНемногострочныхПоказателей.Добавить("П000220020103");
			ИменаНемногострочныхПоказателей.Добавить("П000220020203");
			ИменаНемногострочныхПоказателей.Добавить("П000220020403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020503");
			ИменаНемногострочныхПоказателей.Добавить("П000220020603");
			ИменаНемногострочныхПоказателей.Добавить("П000220030003");
			ИменаНемногострочныхПоказателей.Добавить("П000220030103");
			ИменаНемногострочныхПоказателей.Добавить("П000220030203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040003");
			ИменаНемногострочныхПоказателей.Добавить("П000220040103");
			ИменаНемногострочныхПоказателей.Добавить("П000220040203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040303");
			
		ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000230003003");
			ИменаНемногострочныхПоказателей.Добавить("П000230004003");
			ИменаНемногострочныхПоказателей.Добавить("П000230005003");
			ИменаНемногострочныхПоказателей.Добавить("П000230006003");
			ИменаНемногострочныхПоказателей.Добавить("П000230010003");
			ИменаНемногострочныхПоказателей.Добавить("П000230012003");
			ИменаНемногострочныхПоказателей.Добавить("П000230018003");
			ИменаНемногострочныхПоказателей.Добавить("П000230019003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020103");
			ИменаНемногострочныхПоказателей.Добавить("П000230021003");
			ИменаНемногострочныхПоказателей.Добавить("П000230021103");
			ИменаНемногострочныхПоказателей.Добавить("П000230022003");
			ИменаНемногострочныхПоказателей.Добавить("П000230022103");
			ИменаНемногострочныхПоказателей.Добавить("П000230023003");
			ИменаНемногострочныхПоказателей.Добавить("П000230024003");
			ИменаНемногострочныхПоказателей.Добавить("П000230025003");
			ИменаНемногострочныхПоказателей.Добавить("П000230026003");
			ИменаНемногострочныхПоказателей.Добавить("П000230034003");
			ИменаНемногострочныхПоказателей.Добавить("П000230035003");
			ИменаНемногострочныхПоказателей.Добавить("П000230036003");
			ИменаНемногострочныхПоказателей.Добавить("П000230014003");
			ИменаНемногострочныхПоказателей.Добавить("П000230015003");
			
		ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000240001003");
			ИменаНемногострочныхПоказателей.Добавить("П000240013503");
			ИменаНемногострочныхПоказателей.Добавить("П000240013603");
			ИменаНемногострочныхПоказателей.Добавить("П000240014003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015103");
			ИменаНемногострочныхПоказателей.Добавить("П000240016003");
			ИменаНемногострочныхПоказателей.Добавить("П000240016103");
			
			ИменаМногострочныхПоказателей.Добавить("П00024М100003");
			
		ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000250003003");
			ИменаНемногострочныхПоказателей.Добавить("П000250003103");
			ИменаНемногострочныхПоказателей.Добавить("П000250005003");
			ИменаНемногострочныхПоказателей.Добавить("П000250005103");
			ИменаНемногострочныхПоказателей.Добавить("П000250007003");
			ИменаНемногострочныхПоказателей.Добавить("П000250008003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009503");
			ИменаНемногострочныхПоказателей.Добавить("П000250009603");
			ИменаНемногострочныхПоказателей.Добавить("П000250009703");
			ИменаНемногострочныхПоказателей.Добавить("П000250009803");
			ИменаНемногострочныхПоказателей.Добавить("П000250010003");
			ИменаНемногострочныхПоказателей.Добавить("П000250011003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000260003003");
			ИменаНемногострочныхПоказателей.Добавить("П000260003103");
			ИменаНемногострочныхПоказателей.Добавить("П000260005003");
			ИменаНемногострочныхПоказателей.Добавить("П000260005103");
			ИменаНемногострочныхПоказателей.Добавить("П000260007003");
			ИменаНемногострочныхПоказателей.Добавить("П000260008003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009503");
			ИменаНемногострочныхПоказателей.Добавить("П000260009603");
			ИменаНемногострочныхПоказателей.Добавить("П000260009703");
			ИменаНемногострочныхПоказателей.Добавить("П000260009803");
			ИменаНемногострочныхПоказателей.Добавить("П000260010003");
			ИменаНемногострочныхПоказателей.Добавить("П000260011003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003303");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009503");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009703");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009803");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бА" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0006003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0012003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0015003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0016003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0017003");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бБ" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0021003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0022003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0023003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0024003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025603");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025703");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025803");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0026003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031203");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0032003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0033003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0034003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0035003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001203");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001303");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001403");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001503");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001603");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001703");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0006003");
			
			ИменаМногострочныхПоказателей.Добавить("П0027АМ100003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ200003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ300003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7В" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027В0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0004003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Г" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002403");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005303");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005403");
			
		ИначеЕсли ИмяРаздела = "Лист03А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003А0000103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0010003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0012003");
			
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
			
		ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0005003");
			
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
			
		ИначеЕсли ИмяРаздела = "Лист04" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000040001003");
			ИменаНемногострочныхПоказателей.Добавить("П000040002003");
			ИменаНемногострочныхПоказателей.Добавить("П000040004003");
			ИменаНемногострочныхПоказателей.Добавить("П000040005003");
			ИменаНемногострочныхПоказателей.Добавить("П000040006003");
			ИменаНемногострочныхПоказателей.Добавить("П000040007003");
			ИменаНемногострочныхПоказателей.Добавить("П000040008003");
			
		ИначеЕсли ИмяРаздела = "Лист05" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000050001003");
			ИменаНемногострочныхПоказателей.Добавить("П000050001103");
			ИменаНемногострочныхПоказателей.Добавить("П000050001203");
			ИменаНемногострочныхПоказателей.Добавить("П000050001303");
			ИменаНемногострочныхПоказателей.Добавить("П000050001403");
			ИменаНемногострочныхПоказателей.Добавить("П000050002003");
			ИменаНемногострочныхПоказателей.Добавить("П000050002103");
			ИменаНемногострочныхПоказателей.Добавить("П000050002203");
			ИменаНемногострочныхПоказателей.Добавить("П000050002303");
			ИменаНемногострочныхПоказателей.Добавить("П000050002403");
			ИменаНемногострочныхПоказателей.Добавить("П000050004003");
			ИменаНемногострочныхПоказателей.Добавить("П000050005003");
			ИменаНемногострочныхПоказателей.Добавить("П000050006003");
			ИменаНемногострочныхПоказателей.Добавить("П000050008003");
			ИменаНемногострочныхПоказателей.Добавить("П000050010003");
			
		ИначеЕсли ИмяРаздела = "Лист06" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000060001003");
			ИменаНемногострочныхПоказателей.Добавить("П000060002003");
			ИменаНемногострочныхПоказателей.Добавить("П000060003003");
			ИменаНемногострочныхПоказателей.Добавить("П000060004003");
			ИменаНемногострочныхПоказателей.Добавить("П000060005003");
			ИменаНемногострочныхПоказателей.Добавить("П000060006003");
			ИменаНемногострочныхПоказателей.Добавить("П000060007003");
			ИменаНемногострочныхПоказателей.Добавить("П000060008003");
			ИменаНемногострочныхПоказателей.Добавить("П000060009003");
			ИменаНемногострочныхПоказателей.Добавить("П000060010003");
			ИменаНемногострочныхПоказателей.Добавить("П000060011003");
			ИменаНемногострочныхПоказателей.Добавить("П000060012003");
			ИменаНемногострочныхПоказателей.Добавить("П000060013003");
			ИменаНемногострочныхПоказателей.Добавить("П000060014003");
			ИменаНемногострочныхПоказателей.Добавить("П000060015003");
			ИменаНемногострочныхПоказателей.Добавить("П000060016003");
			ИменаНемногострочныхПоказателей.Добавить("П000060017003");
			ИменаНемногострочныхПоказателей.Добавить("П000060018003");
			ИменаНемногострочныхПоказателей.Добавить("П000060019003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020103");
			ИменаНемногострочныхПоказателей.Добавить("П000060021003");
			ИменаНемногострочныхПоказателей.Добавить("П000060021103");
			ИменаНемногострочныхПоказателей.Добавить("П000060022003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024103");
			ИменаНемногострочныхПоказателей.Добавить("П000060024203");
			ИменаНемногострочныхПоказателей.Добавить("П000060025003");
			ИменаНемногострочныхПоказателей.Добавить("П000060026003");
			ИменаНемногострочныхПоказателей.Добавить("П000060027003");
			ИменаНемногострочныхПоказателей.Добавить("П000060028003");
			ИменаНемногострочныхПоказателей.Добавить("П000060029003");
			ИменаНемногострочныхПоказателей.Добавить("П000060030003");
			ИменаНемногострочныхПоказателей.Добавить("П000060031003");
			ИменаНемногострочныхПоказателей.Добавить("П000060032003");
			ИменаНемногострочныхПоказателей.Добавить("П000060033003");
			ИменаНемногострочныхПоказателей.Добавить("П000060034003");
			ИменаНемногострочныхПоказателей.Добавить("П000060035003");
			ИменаНемногострочныхПоказателей.Добавить("П000060036003");
			ИменаНемногострочныхПоказателей.Добавить("П000060037003");
			ИменаНемногострочныхПоказателей.Добавить("П000060038003");
			ИменаНемногострочныхПоказателей.Добавить("П000060039003");
			ИменаНемногострочныхПоказателей.Добавить("П000060040003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045803");
			ИменаНемногострочныхПоказателей.Добавить("П000060045903");
			ИменаНемногострочныхПоказателей.Добавить("П000060046003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047103");
			ИменаНемногострочныхПоказателей.Добавить("П000060048003");
			ИменаНемногострочныхПоказателей.Добавить("П000060048103");
			ИменаНемногострочныхПоказателей.Добавить("П000060049003");
			ИменаНемногострочныхПоказателей.Добавить("П000060050003");
			ИменаНемногострочныхПоказателей.Добавить("П000060051003");
			ИменаНемногострочныхПоказателей.Добавить("П000060052003");
			ИменаНемногострочныхПоказателей.Добавить("П000060053003");
			
		ИначеЕсли ИмяРаздела = "Лист07" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00007М100003");
			ИменаМногострочныхПоказателей.Добавить("П00007М100004");
			ИменаМногострочныхПоказателей.Добавить("П00007М100006");
			ИменаМногострочныхПоказателей.Добавить("П00007М100007");
			
			ИменаНемногострочныхПоказателей.Добавить("П000070000003");
			ИменаНемногострочныхПоказателей.Добавить("П000070000004");
			ИменаНемногострочныхПоказателей.Добавить("П000070000006");
			ИменаНемногострочныхПоказателей.Добавить("П000070000007");
			
		ИначеЕсли ИмяРаздела = "Лист08" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000800001004");
			ИменаНемногострочныхПоказателей.Добавить("П000800002004");
			ИменаНемногострочныхПоказателей.Добавить("П000800003004");
			ИменаНемногострочныхПоказателей.Добавить("П000800004004");
			ИменаНемногострочныхПоказателей.Добавить("П000800005004");
			
		ИначеЕсли ИмяРаздела = "Лист09" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б10001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10023003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б20001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20023003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20024003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20025003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30013003");
			
			ИменаМногострочныхПоказателей.Добавить("П009П1М101003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М102003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М103003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М104003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М105003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М106003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М107003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М108003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М109003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М110003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М111003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М112003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М113003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М114003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М115003");
			
		ИначеЕсли ИмяРаздела = "Приложение1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П000П1М100002");
			ИменаМногострочныхПоказателей.Добавить("П000П1М100004");
			
		ИначеЕсли ИмяРаздела = "Приложение2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000П20001003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20002003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20004003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20005003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20006003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20010003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20011003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20012003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20018003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20019003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20020003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20026803");
			ИменаНемногострочныхПоказателей.Добавить("П000П20026903");
			
		КонецЕсли;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
		Если ИмяРаздела = "Раздел1_1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00011М104003");
			ИменаМногострочныхПоказателей.Добавить("П00011М105003");
			ИменаМногострочныхПоказателей.Добавить("П00011М107003");
			ИменаМногострочныхПоказателей.Добавить("П00011М108003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_2" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00012М112003");
			ИменаМногострочныхПоказателей.Добавить("П00012М113003");
			ИменаМногострочныхПоказателей.Добавить("П00012М114003");
			ИменаМногострочныхПоказателей.Добавить("П00012М122003");
			ИменаМногострочныхПоказателей.Добавить("П00012М123003");
			ИменаМногострочныхПоказателей.Добавить("П00012М124003");
			
		ИначеЕсли ИмяРаздела = "Раздел1_3" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00013М204003");
			
		ИначеЕсли ИмяРаздела = "Лист02" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000020001003");
			ИменаНемногострочныхПоказателей.Добавить("П000020002003");
			ИменаНемногострочныхПоказателей.Добавить("П000020003003");
			ИменаНемногострочныхПоказателей.Добавить("П000020004003");
			ИменаНемногострочныхПоказателей.Добавить("П000020005003");
			ИменаНемногострочныхПоказателей.Добавить("П000020006003");
			ИменаНемногострочныхПоказателей.Добавить("П000020007003");
			ИменаНемногострочныхПоказателей.Добавить("П000020008003");
			ИменаНемногострочныхПоказателей.Добавить("П000020010003");
			ИменаНемногострочныхПоказателей.Добавить("П000020011003");
			ИменаНемногострочныхПоказателей.Добавить("П000020012003");
			ИменаНемногострочныхПоказателей.Добавить("П000020013003");
			ИменаНемногострочныхПоказателей.Добавить("П000020018003");
			ИменаНемногострочныхПоказателей.Добавить("П000020019003");
			ИменаНемногострочныхПоказателей.Добавить("П000020020003");
			ИменаНемногострочныхПоказателей.Добавить("П000020021003");
			ИменаНемногострочныхПоказателей.Добавить("П000020022003");
			ИменаНемногострочныхПоказателей.Добавить("П000020023003");
			ИменаНемногострочныхПоказателей.Добавить("П000020024003");
			ИменаНемногострочныхПоказателей.Добавить("П000020025003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026003");
			ИменаНемногострочныхПоказателей.Добавить("П000020026503");
			ИменаНемногострочныхПоказателей.Добавить("П000020026603");
			ИменаНемногострочныхПоказателей.Добавить("П000020026703");
			ИменаНемногострочныхПоказателей.Добавить("П000020026803");
			ИменаНемногострочныхПоказателей.Добавить("П000020026903");
			ИменаНемногострочныхПоказателей.Добавить("П000020027003");
			ИменаНемногострочныхПоказателей.Добавить("П000020027103");
			ИменаНемногострочныхПоказателей.Добавить("П000020028003");
			ИменаНемногострочныхПоказателей.Добавить("П000020028103");
			ИменаНемногострочныхПоказателей.Добавить("П000020029003");
			ИменаНемногострочныхПоказателей.Добавить("П000020030003");
			ИменаНемногострочныхПоказателей.Добавить("П000020031003");
			ИменаНемногострочныхПоказателей.Добавить("П000020032003");
			ИменаНемногострочныхПоказателей.Добавить("П000020033003");
			ИменаНемногострочныхПоказателей.Добавить("П000020034003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035003");
			ИменаНемногострочныхПоказателей.Добавить("П000020035103");
			
		ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000210002703");
			ИменаНемногострочныхПоказателей.Добавить("П000210003003");
			ИменаНемногострочныхПоказателей.Добавить("П000210004003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001003");
			ИменаНемногострочныхПоказателей.Добавить("П000210001103");
			ИменаНемногострочныхПоказателей.Добавить("П000210001203");
			ИменаНемногострочныхПоказателей.Добавить("П000210001303");
			ИменаНемногострочныхПоказателей.Добавить("П000210001403");
			ИменаНемногострочныхПоказателей.Добавить("П000210002003");
			ИменаНемногострочныхПоказателей.Добавить("П000210002103");
			ИменаНемногострочныхПоказателей.Добавить("П000210002203");
			ИменаНемногострочныхПоказателей.Добавить("П000210002303");
			ИменаНемногострочныхПоказателей.Добавить("П000210002403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010003");
			ИменаНемногострочныхПоказателей.Добавить("П000210010103");
			ИменаНемногострочныхПоказателей.Добавить("П000210010203");
			ИменаНемногострочныхПоказателей.Добавить("П000210010303");
			ИменаНемногострочныхПоказателей.Добавить("П000210010403");
			ИменаНемногострочныхПоказателей.Добавить("П000210010503");
			ИменаНемногострочныхПоказателей.Добавить("П000210010603");
			ИменаНемногострочныхПоказателей.Добавить("П000210020003");
			ИменаНемногострочныхПоказателей.Добавить("П000210020103");
			ИменаНемногострочныхПоказателей.Добавить("П000210020203");
			ИменаНемногострочныхПоказателей.Добавить("П000210020303");
			ИменаНемногострочныхПоказателей.Добавить("П000210021003");
			ИменаНемногострочныхПоказателей.Добавить("П000210022003");
			
		ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000220001003");
			ИменаНемногострочныхПоказателей.Добавить("П000220002003");
			ИменаНемногострочныхПоказателей.Добавить("П000220003003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004003");
			ИменаНемногострочныхПоказателей.Добавить("П000220004103");
			ИменаНемногострочныхПоказателей.Добавить("П000220004203");
			ИменаНемногострочныхПоказателей.Добавить("П000220004303");
			ИменаНемногострочныхПоказателей.Добавить("П000220004503");
			ИменаНемногострочныхПоказателей.Добавить("П000220004603");
			ИменаНемногострочныхПоказателей.Добавить("П000220004703");
			ИменаНемногострочныхПоказателей.Добавить("П000220004803");
			ИменаНемногострочныхПоказателей.Добавить("П000220004903");
			ИменаНемногострочныхПоказателей.Добавить("П000220005003");
			ИменаНемногострочныхПоказателей.Добавить("П000220005103");
			ИменаНемногострочныхПоказателей.Добавить("П000220005203");
			ИменаНемногострочныхПоказателей.Добавить("П000220005303");
			ИменаНемногострочныхПоказателей.Добавить("П000220005403");
			ИменаНемногострочныхПоказателей.Добавить("П000220005503");
			ИменаНемногострочныхПоказателей.Добавить("П000220005903");
			ИменаНемногострочныхПоказателей.Добавить("П000220006003");
			ИменаНемногострочныхПоказателей.Добавить("П000220006103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007003");
			ИменаНемногострочныхПоказателей.Добавить("П000220007103");
			ИменаНемногострочныхПоказателей.Добавить("П000220007203");
			ИменаНемногострочныхПоказателей.Добавить("П000220007303");
			ИменаНемногострочныхПоказателей.Добавить("П000220008003");
			ИменаНемногострочныхПоказателей.Добавить("П000220009003");
			ИменаНемногострочныхПоказателей.Добавить("П000220010003");
			ИменаНемногострочныхПоказателей.Добавить("П000220011003");
			ИменаНемногострочныхПоказателей.Добавить("П000220012003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013003");
			ИменаНемногострочныхПоказателей.Добавить("П000220013103");
			ИменаНемногострочныхПоказателей.Добавить("П000220013203");
			ИменаНемногострочныхПоказателей.Добавить("П000220013303");
			ИменаНемногострочныхПоказателей.Добавить("П000220013403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020003");
			ИменаНемногострочныхПоказателей.Добавить("П000220020103");
			ИменаНемногострочныхПоказателей.Добавить("П000220020203");
			ИменаНемногострочныхПоказателей.Добавить("П000220020403");
			ИменаНемногострочныхПоказателей.Добавить("П000220020503");
			ИменаНемногострочныхПоказателей.Добавить("П000220020603");
			ИменаНемногострочныхПоказателей.Добавить("П000220030003");
			ИменаНемногострочныхПоказателей.Добавить("П000220030103");
			ИменаНемногострочныхПоказателей.Добавить("П000220030203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040003");
			ИменаНемногострочныхПоказателей.Добавить("П000220040103");
			ИменаНемногострочныхПоказателей.Добавить("П000220040203");
			ИменаНемногострочныхПоказателей.Добавить("П000220040303");
			
		ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000230003003");
			ИменаНемногострочныхПоказателей.Добавить("П000230004003");
			ИменаНемногострочныхПоказателей.Добавить("П000230005003");
			ИменаНемногострочныхПоказателей.Добавить("П000230006003");
			ИменаНемногострочныхПоказателей.Добавить("П000230010003");
			ИменаНемногострочныхПоказателей.Добавить("П000230012003");
			ИменаНемногострочныхПоказателей.Добавить("П000230018003");
			ИменаНемногострочныхПоказателей.Добавить("П000230019003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020003");
			ИменаНемногострочныхПоказателей.Добавить("П000230020103");
			ИменаНемногострочныхПоказателей.Добавить("П000230021003");
			ИменаНемногострочныхПоказателей.Добавить("П000230021103");
			ИменаНемногострочныхПоказателей.Добавить("П000230022003");
			ИменаНемногострочныхПоказателей.Добавить("П000230022103");
			ИменаНемногострочныхПоказателей.Добавить("П000230023003");
			ИменаНемногострочныхПоказателей.Добавить("П000230024003");
			ИменаНемногострочныхПоказателей.Добавить("П000230025003");
			ИменаНемногострочныхПоказателей.Добавить("П000230026003");
			ИменаНемногострочныхПоказателей.Добавить("П000230034003");
			ИменаНемногострочныхПоказателей.Добавить("П000230035003");
			ИменаНемногострочныхПоказателей.Добавить("П000230036003");
			ИменаНемногострочныхПоказателей.Добавить("П000230014003");
			ИменаНемногострочныхПоказателей.Добавить("П000230015003");
			
		ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000240001003");
			ИменаНемногострочныхПоказателей.Добавить("П000240013503");
			ИменаНемногострочныхПоказателей.Добавить("П000240013603");
			ИменаНемногострочныхПоказателей.Добавить("П000240014003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015003");
			ИменаНемногострочныхПоказателей.Добавить("П000240015103");
			ИменаНемногострочныхПоказателей.Добавить("П000240016003");
			ИменаНемногострочныхПоказателей.Добавить("П000240016103");
			
			ИменаМногострочныхПоказателей.Добавить("П00024М100003");
			
		ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000250003003");
			ИменаНемногострочныхПоказателей.Добавить("П000250003103");
			ИменаНемногострочныхПоказателей.Добавить("П000250005003");
			ИменаНемногострочныхПоказателей.Добавить("П000250005103");
			ИменаНемногострочныхПоказателей.Добавить("П000250007003");
			ИменаНемногострочныхПоказателей.Добавить("П000250008003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009003");
			ИменаНемногострочныхПоказателей.Добавить("П000250009503");
			ИменаНемногострочныхПоказателей.Добавить("П000250009603");
			ИменаНемногострочныхПоказателей.Добавить("П000250009703");
			ИменаНемногострочныхПоказателей.Добавить("П000250009803");
			ИменаНемногострочныхПоказателей.Добавить("П000250010003");
			ИменаНемногострочныхПоказателей.Добавить("П000250011003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012003");
			ИменаНемногострочныхПоказателей.Добавить("П000250012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000260003003");
			ИменаНемногострочныхПоказателей.Добавить("П000260003103");
			ИменаНемногострочныхПоказателей.Добавить("П000260005003");
			ИменаНемногострочныхПоказателей.Добавить("П000260005103");
			ИменаНемногострочныхПоказателей.Добавить("П000260007003");
			ИменаНемногострочныхПоказателей.Добавить("П000260008003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009003");
			ИменаНемногострочныхПоказателей.Добавить("П000260009503");
			ИменаНемногострочныхПоказателей.Добавить("П000260009603");
			ИменаНемногострочныхПоказателей.Добавить("П000260009703");
			ИменаНемногострочныхПоказателей.Добавить("П000260009803");
			ИменаНемногострочныхПоказателей.Добавить("П000260010003");
			ИменаНемногострочныхПоказателей.Добавить("П000260011003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012003");
			ИменаНемногострочныхПоказателей.Добавить("П000260012103");
			
		ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0003303");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009503");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009703");
			ИменаНемногострочныхПоказателей.Добавить("П0026а0009803");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бА" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0006003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0012003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0013103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0014103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0015003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0016003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0017003");
			
		ИначеЕсли ИмяРаздела = "Лист02_6бБ" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0026б0021003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0022003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0023003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0024003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025603");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025703");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0025803");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0026003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0027503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0028503");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0029103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031103");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0031203");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0032003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0033003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0034003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0035003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036003");
			ИменаНемногострочныхПоказателей.Добавить("П0026б0036103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001203");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001303");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001403");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001503");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0001603");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027А0006003");
			
			ИменаМногострочныхПоказателей.Добавить("П0027АМ100003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ200003");
			ИменаМногострочныхПоказателей.Добавить("П0027АМ300003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Б0003103");
			
		ИначеЕсли ИмяРаздела = "Лист02_7В" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027В0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027В0004003");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Г" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0001103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0003103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0027Г0005303");
			
		ИначеЕсли ИмяРаздела = "Лист03А" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003А0000103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0002403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0004103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005303");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0005403");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0007003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0008103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009103");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0009203");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0010003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0011003");
			ИменаНемногострочныхПоказателей.Добавить("П0003А0012003");
			
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
			
		ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0001003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0003003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0004003");
			ИменаНемногострочныхПоказателей.Добавить("П0003Б0005003");
			
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ105003");
			ИменаМногострочныхПоказателей.Добавить("П0003ВМ106003");
			
		ИначеЕсли ИмяРаздела = "Лист04" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000040001003");
			ИменаНемногострочныхПоказателей.Добавить("П000040002003");
			ИменаНемногострочныхПоказателей.Добавить("П000040004003");
			ИменаНемногострочныхПоказателей.Добавить("П000040005003");
			ИменаНемногострочныхПоказателей.Добавить("П000040006003");
			ИменаНемногострочныхПоказателей.Добавить("П000040007003");
			ИменаНемногострочныхПоказателей.Добавить("П000040008003");
			
		ИначеЕсли ИмяРаздела = "Лист05" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000050001003");
			ИменаНемногострочныхПоказателей.Добавить("П000050001103");
			ИменаНемногострочныхПоказателей.Добавить("П000050001203");
			ИменаНемногострочныхПоказателей.Добавить("П000050001303");
			ИменаНемногострочныхПоказателей.Добавить("П000050001403");
			ИменаНемногострочныхПоказателей.Добавить("П000050002003");
			ИменаНемногострочныхПоказателей.Добавить("П000050002103");
			ИменаНемногострочныхПоказателей.Добавить("П000050002203");
			ИменаНемногострочныхПоказателей.Добавить("П000050002303");
			ИменаНемногострочныхПоказателей.Добавить("П000050002403");
			ИменаНемногострочныхПоказателей.Добавить("П000050004003");
			ИменаНемногострочныхПоказателей.Добавить("П000050005003");
			ИменаНемногострочныхПоказателей.Добавить("П000050006003");
			ИменаНемногострочныхПоказателей.Добавить("П000050008003");
			ИменаНемногострочныхПоказателей.Добавить("П000050010003");
			
		ИначеЕсли ИмяРаздела = "Лист06" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000060001003");
			ИменаНемногострочныхПоказателей.Добавить("П000060002003");
			ИменаНемногострочныхПоказателей.Добавить("П000060003003");
			ИменаНемногострочныхПоказателей.Добавить("П000060004003");
			ИменаНемногострочныхПоказателей.Добавить("П000060005003");
			ИменаНемногострочныхПоказателей.Добавить("П000060006003");
			ИменаНемногострочныхПоказателей.Добавить("П000060007003");
			ИменаНемногострочныхПоказателей.Добавить("П000060008003");
			ИменаНемногострочныхПоказателей.Добавить("П000060009003");
			ИменаНемногострочныхПоказателей.Добавить("П000060010003");
			ИменаНемногострочныхПоказателей.Добавить("П000060011003");
			ИменаНемногострочныхПоказателей.Добавить("П000060012003");
			ИменаНемногострочныхПоказателей.Добавить("П000060013003");
			ИменаНемногострочныхПоказателей.Добавить("П000060014003");
			ИменаНемногострочныхПоказателей.Добавить("П000060015003");
			ИменаНемногострочныхПоказателей.Добавить("П000060016003");
			ИменаНемногострочныхПоказателей.Добавить("П000060017003");
			ИменаНемногострочныхПоказателей.Добавить("П000060018003");
			ИменаНемногострочныхПоказателей.Добавить("П000060019003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020003");
			ИменаНемногострочныхПоказателей.Добавить("П000060020103");
			ИменаНемногострочныхПоказателей.Добавить("П000060021003");
			ИменаНемногострочныхПоказателей.Добавить("П000060021103");
			ИменаНемногострочныхПоказателей.Добавить("П000060022003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024003");
			ИменаНемногострочныхПоказателей.Добавить("П000060024103");
			ИменаНемногострочныхПоказателей.Добавить("П000060024203");
			ИменаНемногострочныхПоказателей.Добавить("П000060025003");
			ИменаНемногострочныхПоказателей.Добавить("П000060026003");
			ИменаНемногострочныхПоказателей.Добавить("П000060027003");
			ИменаНемногострочныхПоказателей.Добавить("П000060028003");
			ИменаНемногострочныхПоказателей.Добавить("П000060029003");
			ИменаНемногострочныхПоказателей.Добавить("П000060030003");
			ИменаНемногострочныхПоказателей.Добавить("П000060031003");
			ИменаНемногострочныхПоказателей.Добавить("П000060032003");
			ИменаНемногострочныхПоказателей.Добавить("П000060033003");
			ИменаНемногострочныхПоказателей.Добавить("П000060034003");
			ИменаНемногострочныхПоказателей.Добавить("П000060035003");
			ИменаНемногострочныхПоказателей.Добавить("П000060036003");
			ИменаНемногострочныхПоказателей.Добавить("П000060037003");
			ИменаНемногострочныхПоказателей.Добавить("П000060038003");
			ИменаНемногострочныхПоказателей.Добавить("П000060039003");
			ИменаНемногострочныхПоказателей.Добавить("П000060040003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045003");
			ИменаНемногострочныхПоказателей.Добавить("П000060045803");
			ИменаНемногострочныхПоказателей.Добавить("П000060045903");
			ИменаНемногострочныхПоказателей.Добавить("П000060046003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047003");
			ИменаНемногострочныхПоказателей.Добавить("П000060047103");
			ИменаНемногострочныхПоказателей.Добавить("П000060048003");
			ИменаНемногострочныхПоказателей.Добавить("П000060048103");
			ИменаНемногострочныхПоказателей.Добавить("П000060049003");
			ИменаНемногострочныхПоказателей.Добавить("П000060050003");
			ИменаНемногострочныхПоказателей.Добавить("П000060051003");
			ИменаНемногострочныхПоказателей.Добавить("П000060052003");
			ИменаНемногострочныхПоказателей.Добавить("П000060053003");
			
		ИначеЕсли ИмяРаздела = "Лист07" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П00007М100003");
			ИменаМногострочныхПоказателей.Добавить("П00007М100004");
			ИменаМногострочныхПоказателей.Добавить("П00007М100006");
			ИменаМногострочныхПоказателей.Добавить("П00007М100007");
			
			ИменаНемногострочныхПоказателей.Добавить("П000070000003");
			ИменаНемногострочныхПоказателей.Добавить("П000070000004");
			ИменаНемногострочныхПоказателей.Добавить("П000070000006");
			ИменаНемногострочныхПоказателей.Добавить("П000070000007");
			
		ИначеЕсли ИмяРаздела = "Лист08" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000800001004");
			ИменаНемногострочныхПоказателей.Добавить("П000800002004");
			ИменаНемногострочныхПоказателей.Добавить("П000800003004");
			ИменаНемногострочныхПоказателей.Добавить("П000800004004");
			ИменаНемногострочныхПоказателей.Добавить("П000800005004");
			
		ИначеЕсли ИмяРаздела = "Лист09" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б10001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б10023003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б20001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20004003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20013003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20014003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20015003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20016003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20017003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20018003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20019003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20020003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20021003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20022003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20023003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20024003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б20025003");
			
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30001403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002103");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002203");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002303");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30002403");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30003003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30005003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30006003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30007003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30008003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30009003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30010003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30011003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30012003");
			ИменаНемногострочныхПоказателей.Добавить("П009Б30013003");
			
			ИменаМногострочныхПоказателей.Добавить("П009П1М101003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М102003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М103003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М104003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М105003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М106003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М107003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М108003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М109003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М110003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М111003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М112003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М113003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М114003");
			ИменаМногострочныхПоказателей.Добавить("П009П1М115003");
			
		ИначеЕсли ИмяРаздела = "Приложение1" Тогда
			
			ИменаМногострочныхПоказателей.Добавить("П000П1М100002");
			ИменаМногострочныхПоказателей.Добавить("П000П1М100004");
			
		ИначеЕсли ИмяРаздела = "Приложение2" Тогда
			
			ИменаНемногострочныхПоказателей.Добавить("П000П20003003");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003103");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003203");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003303");
			ИменаНемногострочныхПоказателей.Добавить("П000П20003403");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИменаМногострочныхПоказателей",   ИменаМногострочныхПоказателей);
	Результат.Вставить("ИменаНемногострочныхПоказателей", ИменаНемногострочныхПоказателей);
	
	Возврат Результат;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, Знач ИмяРаздела, ДопПараметры = Неопределено)
	
	ИменаПоказателей = Новый Массив;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		Если ИмяРаздела = "Лист02_2" И ДопПараметры = "ОтчетНеЗаКвартал" Тогда
			
			ИменаПоказателей.Добавить("ПризнакВключения");
			ИменаПоказателей.Добавить("П000220000100");
			ИменаПоказателей.Добавить("П000220000200");
			ИменаПоказателей.Добавить("П000220040003");
			
		ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
			
			ИменаПоказателей.Добавить("П00024М100002");
			
		ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
			
			ИменаПоказателей.Добавить("П0027АМ100002");
			ИменаПоказателей.Добавить("П0027АМ200002");
			ИменаПоказателей.Добавить("П0027АМ300002");
			
		ИначеЕсли ИмяРаздела = "Лист02_7Д" Тогда
			
			ИменаПоказателей.Добавить("П0027ДМ100002");
			ИменаПоказателей.Добавить("П0027ДМ200002");
			
		КонецЕсли;
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		Если ИмяРаздела = "Лист02_2" И ДопПараметры = "ОтчетНеЗаКвартал" Тогда
			
			ИменаПоказателей.Добавить("ПризнакВключения");
			ИменаПоказателей.Добавить("П000220000100");
			ИменаПоказателей.Добавить("П000220000200");
			ИменаПоказателей.Добавить("П000220000301");
			ИменаПоказателей.Добавить("П000220000302");
			ИменаПоказателей.Добавить("П000220000303");
			ИменаПоказателей.Добавить("П000220000304");
			ИменаПоказателей.Добавить("П000220040003");
			
		ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
			
			ИменаПоказателей.Добавить("П00024М100002");
			
		ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
			
			ИменаПоказателей.Добавить("П0027АМ100002");
			ИменаПоказателей.Добавить("П0027АМ200002");
			ИменаПоказателей.Добавить("П0027АМ300002");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИменаПоказателей;
	
КонецФункции

Функция ОКПД2СоответствуетТребованиям(Знач ОКПД2)
	
	ОКПД2 = СокрЛП(ОКПД2);
	Для Инд = 1 По СтрДлина(ОКПД2) Цикл
		ТекСимв = Сред(ОКПД2, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКПД2 = Лев(ОКПД2, Инд - 1) + "9" + Сред(ОКПД2, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКПД2 = "" ИЛИ ОКПД2 = "99" ИЛИ ОКПД2 = "99.9" ИЛИ ОКПД2 = "99.99"
		ИЛИ ОКПД2 = "99.99.9" ИЛИ ОКПД2 = "99.99.99" ИЛИ ОКПД2 = "99.99.99.999";
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Экспорт
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
		СохраненныеДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов = Неопределено)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
	Иначе
		
		ПрефиксТД = "ПолеТабличногоДокумента";
		
		// Титульный лист.
		ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
		Для Каждого Показатель Из ДанныеТит Цикл
			ИмяПоказателя = Показатель.Ключ;
			Если ИмяПоказателя = "ИНН1_1" Тогда
				ДанныеТит.Вставить("ИНН1");
				Для Ном = 1 По 12 Цикл
					ДанныеТит.ИНН1 = СокрЛП(ДанныеТит.ИНН1) + ДанныеТит["ИНН1_" + Ном];
					ДанныеТит.Удалить("ИНН1_" + Ном);
				КонецЦикла;
				Если Лев(ДанныеТит.ИНН1, 2) = "00" Тогда
					ДанныеТит.ИНН1 = Сред(ДанныеТит.ИНН1, 3);
				КонецЕсли;
				Если Прав(ДанныеТит.ИНН1, 2) = "--" Тогда
					ДанныеТит.ИНН1 = Лев(ДанныеТит.ИНН1, СтрНайти(ДанныеТит.ИНН1, "--") - 1);
				КонецЕсли;
			ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
				ДанныеТит.Вставить("КПП1");
				Для Ном = 1 По 9 Цикл
					ДанныеТит.КПП1 = СокрЛП(ДанныеТит.КПП1) + ДанныеТит["КПП1_" + Ном];
					ДанныеТит.Удалить("КПП1_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
				ДанныеТит.Вставить("НомерКорректировки", "");
				Для Ном = 1 По 3 Цикл
					ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки + СокрЛП(ДанныеТит["НомерКорректировки" + Ном]);
					ДанныеТит.Удалить("НомерКорректировки" + Ном);
				КонецЦикла;
				ДанныеТит.НомерКорректировки = СтрЗаменить(ДанныеТит.НомерКорректировки, "-", "");
			ИначеЕсли ИмяПоказателя = "Период1" Тогда
				ДанныеТит.Вставить("Период");
				Для Ном = 1 По 2 Цикл
					ДанныеТит.Период = СокрЛП(ДанныеТит.Период) + ДанныеТит["Период" + Ном];
					ДанныеТит.Удалить("Период" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
				ДанныеТит.Вставить("ОтчетГод");
				Для Ном = 1 По 4 Цикл
					ДанныеТит.ОтчетГод = СокрЛП(ДанныеТит.ОтчетГод) + ДанныеТит["ОтчетГод" + Ном];
					ДанныеТит.Удалить("ОтчетГод" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
				ДанныеТит.Вставить("КодИМНС");
				Для Ном = 1 По 4 Цикл
					ДанныеТит.КодИМНС = СокрЛП(ДанныеТит.КодИМНС) + ДанныеТит["КодИМНС" + Ном];
					ДанныеТит.Удалить("КодИМНС" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
				ДанныеТит.Вставить("ПоМесту");
				Для Ном = 1 По 3 Цикл
					ДанныеТит.ПоМесту = СокрЛП(ДанныеТит.ПоМесту) + ДанныеТит["ПоМесту" + Ном];
					ДанныеТит.Удалить("ПоМесту" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ТелОрганизации_1" Тогда
				ДанныеТит.Вставить("ТелОрганизации");
				Для Ном = 1 По 20 Цикл
					ДанныеТит.ТелОрганизации = СокрЛП(ДанныеТит.ТелОрганизации) + ДанныеТит["ТелОрганизации_" + Ном];
					ДанныеТит.Удалить("ТелОрганизации_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ИНН_Реорг_1" Тогда
				ДанныеТит.Вставить("ИНН_Реорг");
				Для Ном = 1 По 10 Цикл
					ДанныеТит.ИНН_Реорг = СокрЛП(ДанныеТит.ИНН_Реорг) + ДанныеТит["ИНН_Реорг_" + Ном];
					ДанныеТит.Удалить("ИНН_Реорг_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "КПП_Реорг_1" Тогда
				ДанныеТит.Вставить("КПП_Реорг");
				Для Ном = 1 По 9 Цикл
					ДанныеТит.КПП_Реорг = СокрЛП(ДанныеТит.КПП_Реорг) + ДанныеТит["КПП_Реорг_" + Ном];
					ДанныеТит.Удалить("КПП_Реорг_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ОКВЭД_1" Тогда
				ДанныеТит.Вставить("ОКВЭД");
				Для Ном = 1 По 8 Цикл
					ДанныеТит.ОКВЭД = СокрЛП(ДанныеТит.ОКВЭД) + ДанныеТит["ОКВЭД_" + Ном];
					ДанныеТит.Удалить("ОКВЭД_" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "Прил1" Тогда
				ДанныеТит.Вставить("Прил");
				Для Ном = 1 По 3 Цикл
					ДанныеТит.Прил = СокрЛП(ДанныеТит.Прил) + ДанныеТит["Прил" + Ном];
					ДанныеТит.Удалить("Прил" + Ном);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеТит.Вставить("ДатаПодписи", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
		
		// Приложение № 6б к Листу 02.
		ИменаПоказателейЛист02_6б = Новый Массив;
		ИменаПоказателейЛист02_6б.Добавить("П000280001003");
		ИменаПоказателейЛист02_6б.Добавить("П000280002003");
		ИменаПоказателейЛист02_6б.Добавить("П000280002103");
		ИменаПоказателейЛист02_6б.Добавить("П000280003003");
		ИменаПоказателейЛист02_6б.Добавить("П000280003103");
		ИменаПоказателейЛист02_6б.Добавить("П000280004003");
		ИменаПоказателейЛист02_6б.Добавить("П000280005003");
		ИменаПоказателейЛист02_6б.Добавить("П000280006003");
		ИменаПоказателейЛист02_6б.Добавить("П000280006103");
		ИменаПоказателейЛист02_6б.Добавить("П000280006203");
		ИменаПоказателейЛист02_6б.Добавить("П000280007003");
		
		СтараяТаблицаЛистов02_6б = СписокСохранения.ДанныеМногостраничныхРазделов.Лист02_6б;
		НоваяСтруктураЛиста02_6б = Новый Структура;
		ГруппаЛист02_6б = РазделыРеглОтчета(ИмяФормы).Лист02_6б.ДанныеДопСтрок.Скопировать();
		ГруппаЛист02_6б.Очистить();
		
		Для Инд = 0 По СтараяТаблицаЛистов02_6б.Количество() - 1 Цикл
			
			СтарыйЛист02_6б = СтараяТаблицаЛистов02_6б[Инд];
			ИндСтр = Формат(Инд + 1, "ЧГ=");
			СтрокаГруппыЛист02_6б = ГруппаЛист02_6б.Добавить();
			
			Для каждого ИмяПоказателяЛист02_6б Из ИменаПоказателейЛист02_6б Цикл
				НоваяСтруктураЛиста02_6б.Вставить(
					ИмяПоказателяЛист02_6б + "_" + ИндСтр, СтарыйЛист02_6б.Данные[ИмяПоказателяЛист02_6б]);
				СтрокаГруппыЛист02_6б[ИмяПоказателяЛист02_6б] = СтарыйЛист02_6б.Данные[ИмяПоказателяЛист02_6б];
			КонецЦикла;
			
		КонецЦикла;
		
		СписокСохранения.ПоказателиОтчета.Вставить(ПрефиксТД + "Лист02_6б", НоваяСтруктураЛиста02_6б);
		СписокСохранения.ДанныеМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.ИдМСЧ_Лист02_6б,
															  ГруппаЛист02_6б.Скопировать());
		СписокСохранения.ДанныеМногостраничныхРазделов.Удалить("Лист02_6б");
		
		// Многострочные данные Листа 07.
		МнЧ = СписокСохранения.ДанныеМногострочныхРазделов[СтруктураРеквизитовФормы.ИдМСЧ_Лист07];
		Лист07 = СписокСохранения.ПоказателиОтчета.ПолеТабличногоДокументаЛист07;
		Для каждого СтрокаМнЧ Из МнЧ Цикл
			Постфикс = "_" + Формат(МнЧ.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
			Для каждого КолонкаМнЧ Из МнЧ.Колонки Цикл
				Если Лист07.Свойство(КолонкаМнЧ.Имя + Постфикс) Тогда
					СтрокаМнЧ[КолонкаМнЧ.Имя] = Лист07[КолонкаМнЧ.Имя + Постфикс];
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Многострочные части многостраничного раздела Листа 08.
		ИменаГрафСтаройМнЧ_Лист08 = Новый Массив;
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000201");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000202");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000203");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000204");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000205");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000206");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000207");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000208");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000209");
		ИменаГрафСтаройМнЧ_Лист08.Добавить("П000800000210");
		
		ТаблицаЛистов08 = СписокСохранения.ДанныеМногостраничныхРазделов.Лист08;
		ГруппаЛист08 = РазделыРеглОтчета(ИмяФормы).Лист08.ДанныеДопСтрок.Скопировать();
		
		Для Инд = 0 По ТаблицаЛистов08.Количество() - 1 Цикл
			
			Лист08 = ТаблицаЛистов08[Инд];
			ИндСтр = Формат(Инд + 1, "ЧГ=");
			ГруппаЛист08.Очистить();
			СтараяТаблицаДопСтрокЛист08 = Лист08.ДанныеДопСтрок.П0008000002;
			
			Для Каждого СтараяДопСтрокаЛист08 Из СтараяТаблицаДопСтрокЛист08 Цикл
				
				Для Каждого ИмяГрафыСтаройМнЧ_Лист08 Из ИменаГрафСтаройМнЧ_Лист08 Цикл
					
					КодОснования = СокрЛП(СтараяДопСтрокаЛист08[ИмяГрафыСтаройМнЧ_Лист08]);
					
					Если ЗначениеЗаполнено(КодОснования) Тогда
						
						СтрокаГруппыЛист08 = ГруппаЛист08.Добавить();
						СтрокаГруппыЛист08.П000800000201 = КодОснования;
						Лист08.Данные.Вставить("П000800000201_" + Формат(ГруппаЛист08.Количество(), "ЧГ="), КодОснования);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ГруппаЛист08.Количество() = 0 Тогда
				
				СтрокаГруппыЛист08 = ГруппаЛист08.Добавить();
				СтрокаГруппыЛист08.П000800000201 = "";
				Лист08.Данные.Вставить("П000800000201_1", "");
				
			КонецЕсли;
			
			Лист08.ДанныеДопСтрок = ГруппаЛист08.Скопировать();
			
		КонецЦикла;
		
		СписокСохранения.ДанныеМногостраничныхРазделов.Вставить("Лист08", ТаблицаЛистов08);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы) Экспорт
	
	Владелец = Новый Структура;
	Владелец.Вставить("СоответствиеЕдиницыИзмеренияДелителю",
		СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю);
	Владелец.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	Для Каждого Страница Из Раздел1_1 Цикл
				
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка040 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110004003);
		Строка050 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110005003);
		Данные.Вставить("П100110004003", Строка040 - Строка050);
		
		Строка070 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110007003);
		Строка080 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000110008003);
		Данные.Вставить("П100110007003", Строка070 - Строка080);
	КонецЦикла;
	
	Лист02_2 = ДанныеОтчета.Лист02_2;
	Для Каждого Страница Из Лист02_2 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Инд = 1 По 3 Цикл
			Год = Данные["П000220040" + Инд + "01"];
			Сумма = Данные["П000220040" + Инд + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100220040101_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Год);
				Данные.Вставить("П100220040103_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	Для Каждого Страница Из Лист02_4 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 0;
		Для Инд = 4 По 13 Цикл
			Год = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "01"];
			Сумма = Данные["П0002400" + Формат(Инд * 10, "ЧЦ=3; ЧВН=") + "03"];
			
			Если ЗначениеЗаполнено(Год) ИЛИ ЗначениеЗаполнено(Сумма) Тогда
				НомерСтроки = НомерСтроки + 1;
				Данные.Вставить("П100240004001_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Год);
				Данные.Вставить("П100240004003_" + СтрокаЧГ0(ИмяФормы, НомерСтроки), Сумма);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Лист02_5 = ДанныеОтчета.Лист02_5;
	Для Каждого Страница Из Лист02_5 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000250010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000250011003);
		Данные.Вставить("П100250010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист02_6 = ДанныеОтчета.Лист02_6;
	Для Каждого Страница Из Лист02_6 Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Строка100 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000260010003);
		Строка110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Владелец, Данные.П000260011003);
		Данные.Вставить("П100260010003", Строка100 - Строка110);
	КонецЦикла;
	
	Лист03А = ДанныеОтчета.Лист03А;
	Для Каждого Страница Из Лист03А Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		Данные.Вставить("П100310000500", Формат(Данные["П000310000500"], "ЧГ="));
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000330000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100330000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "А", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	Для Каждого Страница Из Лист03Б Цикл
		
		Если ТипЗнч(Страница.Данные) = Тип("Структура") Тогда
			Данные = Страница.Данные;
		Иначе
			Данные = Страница.Данные[0].Значение;
		КонецЕсли;
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		ЗначениеПоказателя = Неопределено;
		
		Пока Данные.Свойство("П000340000505" + Постфикс, ЗначениеПоказателя) Цикл
			
			Данные.Вставить("П100340000501" + Постфикс, ?(ЗначениеЗаполнено(ЗначениеПоказателя), "Б", ""));
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КПП_Реорг));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_PRIB");
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
					СокрЛП(ПараметрыВыгрузки.ИННОрг),
					СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки512");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки511");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки510");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки509");
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки508");
	Иначе
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки507");
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ВыгрузкаВозможна(ИмяФормы,
						 ПараметрыВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы,
						 ДеревоВыгрузки,
						 ДанныеОтчета) Экспорт
						 
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, РезультатВыгрузки, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Раздел1_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_4(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета,
								 СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_5(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6а(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист02_6б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03А(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист03Б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
								РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист04(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист05(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист07(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист08(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета,
							   СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Лист09(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
							   РезультатВыгрузки, ДанныеОтчета,
							   СтруктураРеквизитовФормы, СтатусПроверки);
	
	ПроверитьЗаполнение_Приложение2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									РезультатВыгрузки, ДанныеОтчета,
									СтруктураРеквизитовФормы, СтатусПроверки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(ИмяФормы, ПараметрыВыгрузки, РезультатВыгрузки, СтатусПроверки)
	
	КодыПериодовСтр
		= "21,31,33,34,13,14,15,16,35,36,37,38,39,40,41,42,43,44,45,46,57,58,59,60,61,62,63,64,65,66,67,68,50";
	РазрешенныеКодыПериодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПериодовСтр);
	
	Если Год(ПараметрыВыгрузки.ДатаКонцаПериодаОтчета) >= 2018 Тогда
		КодыПоМестуСтр = "213,214,215,216,218,220,223,225,226,228,229,231,234,235,236,237,238,239";
	Иначе
		КодыПоМестуСтр = "213,214,215,216,218,220,223,225,226,228,229,231,234,235,236,237,238";
	КонецЕсли;
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыПоМестуСтр);
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан ИНН организации", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан ИНН организации, не состоящий из 10 цифр", "Титульный", "ИНН1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан КПП организации", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задан КПП организации, не состоящий из 9 символов", "Титульный", "КПП1");
		СтатусПроверки = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
			Если ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе задан некорректный код места, по которому представляется документ", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			Иначе
				Символы56КПП = Сред(ПараметрыВыгрузки.КППОрг, 5, 2);
				Если ПараметрыВыгрузки.ПоМесту = "213" Тогда
					Если НЕ (Символы56КПП = "50") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны ""50""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли ПараметрыВыгрузки.ПоМесту = "218" Тогда
					Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен 218, 5-й и 6-й символы КПП организации должны быть равны ""50"", ""01"" или ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если Символы56КПП = "4U" Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Если код места представления декларации равен "
							+ ПараметрыВыгрузки.ПоМесту
							+ ", 5-й и 6-й символы КПП организации не должны быть равны ""4U""", "Титульный", "КПП1");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если (ПараметрыВыгрузки.ПоМесту = "229" ИЛИ ПараметрыВыгрузки.ПоМесту = "234")
				И НЕ (ПараметрыВыгрузки.Период = "34" ИЛИ ПараметрыВыгрузки.Период = "50") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Если код места представления декларации равен 229 или 234, код налогового (отчетного) периода должен быть равен 34 или 50", "Титульный", "ПоМесту");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.Период) Тогда
		ТекстОписанияОшибки = "На титульном листе не задан код налогового периода";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			ТекстОписанияОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(ПараметрыВыгрузки.Период)) = 2 Тогда
			Если РазрешенныеКодыПериодов.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
				ТекстОписанияОшибки = "На титульном листе неверно задан код налогового периода";
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					ТекстОписанияОшибки, "Титульный", "Период");
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ТекстОписанияОшибки = "На титульном листе задан код налогового периода некорректной длины";
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				ТекстОписанияОшибки, "Титульный", "Период");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не указано полное наименование организации (обособленного подразделения)", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан код налогового органа", "Титульный", "КодИМНС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задан код места, по которому представляется документ", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано значение кода вида деятельности по ОКВЭД", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"На титульном листе не задано наименование документа, удостоверяющего полномочия представителя", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) 
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"На титульном листе не задан код формы реорганизации", "Титульный", "КодФормыОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
			Если ДлинаИННРеорг <> 10
			 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе не"
					+ ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации", "Титульный", "ИНН_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На титульном листе не"
					+ ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации", "Титульный", "КПП_Реорг");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделНеВыгружается = (ПараметрыВыгрузки.ПоМесту = "231"
					   ИЛИ ПараметрыВыгрузки.ПоМесту = "229"
					   ИЛИ ПараметрыВыгрузки.ПоМесту = "235");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_1");
	
	РазделПуст = Истина;
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
		
		НомерСтраницы = Раздел1_1.Индекс(СтраницаРаздела) + 1;
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000110001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.1 не указан код по ОКТМО",
					"Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.1 задан код по ОКТМО некорректной длины",
					"Раздел1_1", "П000110001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110003003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации",
						"Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110003003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины",
						"Раздел1_1", "П000110003003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110004003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110005003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в Федеральный бюджет)",
						"Раздел1_1", "П000110004003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000110006003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 не указан код бюджетной классификации",
						"Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000110006003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.1 задан код бюджетной классификации некорректной длины",
						"Раздел1_1", "П000110006003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000110007003) И ЗначениеЗаполнено(ДанныеСтраницы.П000110008003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела 1.1 заданы одновременно сумма налога к доплате и сумма налога к уменьшению (в бюджет субъекта Российской Федерации)",
						"Раздел1_1", "П000110007003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст Тогда
		Если НЕ РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Должен быть заполнен раздел 1.1", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"При заданных параметрах декларации раздел 1.1 не должен заполняться", "Раздел1_1", "П000110001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделНеВыгружается = (СтрНайти("231,229", ПараметрыВыгрузки.ПоМесту) > 0
					   ИЛИ СтрНайти("34,46,50,68", ПараметрыВыгрузки.Период) > 0);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_2");
	
	РазделПуст = Истина;
	
	Раздел1_2 = ДанныеОтчета.Раздел1_2;
	
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		
		НомерСтраницы = Раздел1_2.Индекс(СтраницаРаздела) + 1;
						
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
				
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000120001003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.2 не указан код по ОКТМО",
					"Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.2 задан код по ОКТМО некорректной длины",
					"Раздел1_2", "П000120001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120012003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации",
						"Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120011003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины",
						"Раздел1_2", "П000120011003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000120022003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003)
			 ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 не указан код бюджетной классификации",
						"Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000120021003)) <> 20 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.2 задан код бюджетной классификации некорректной длины",
						"Раздел1_2", "П000120021003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120012003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120013003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120014003) Тогда
			ДанныеСтраницы.П000120011003 = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120022003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120023003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120024003) Тогда
			ДанныеСтраницы.П000120021003 = "";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120000103)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120011003)
		   И НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000120021003) Тогда
			ДанныеСтраницы.П000120001003 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ РазделПуст И РазделНеВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"При заданных параметрах декларации раздел 1.2 не должен заполняться",
			"Раздел1_2", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел1_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Раздел1_3");
	
	РазделПуст = Истина;
	
	Раздел1_3 = ДанныеОтчета.Раздел1_3;
	
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		
		НомерСтраницы = Раздел1_3.Индекс(СтраницаРаздела) + 1;
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130001003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код вида платежа",
					"Раздел1_3", "П000130001003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеСтраницы.П000130002003);
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код по ОКТМО",
					"Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 указан код по ОКТМО некорректной длины",
					"Раздел1_3", "П000130002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000130003003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не указан код бюджетной классификации",
					"Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000130003003)) <> 20 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 указан код бюджетной классификации некорректной длины",
					"Раздел1_3", "П000130003003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			СуществуетХотяБыОднаЗаполненнаяСтрока = Ложь;
			НомСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000130004001_" + Формат(НомСтроки, "ЧГ=")) Цикл
				СтрП000130004001 = ДанныеСтраницы["П000130004001_" + Формат(НомСтроки, "ЧГ=")];
				СтрП000130004003 = ДанныеСтраницы["П000130004003_" + Формат(НомСтроки, "ЧГ=")];
				Если ЗначениеЗаполнено(СтрП000130004001) ИЛИ ЗначениеЗаполнено(СтрП000130004003) Тогда
					СуществуетХотяБыОднаЗаполненнаяСтрока = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрП000130004003) И НЕ ЗначениеЗаполнено(СтрП000130004001) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела 1.3 в строке "
						+ Формат(НомСтроки, "ЧГ=")
						+ " не указан срок уплаты", "Раздел1_3", "П000130004001_"
						+ Формат(НомСтроки, "ЧГ="), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомСтроки = НомСтроки + 1;
			КонецЦикла;
			Если НЕ СуществуетХотяБыОднаЗаполненнаяСтрока Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела 1.3 не заполнена ни одна строка 040",
					"Раздел1_3", "П000130004001_1", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел 1.3", "Раздел1_3", "П000130001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)

	РазделНеВыгружается = (ПараметрыВыгрузки.ПоМесту = "220" ИЛИ ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02");
	
	РазделПуст = Истина;
	
	Лист02 = ДанныеОтчета.Лист02;
	
	Для Каждого СтраницаРаздела Из Лист02 Цикл
		
		НомерСтраницы = Лист02.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000200000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
			ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			РазделПуст = Ложь;
			
			Если РазделНеВыгружается Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000200000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы + " раздела ""Лист 02"" не указан признак налогоплательщика",
					"Лист02", "П000200000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Лист 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000200000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000200000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000200000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000200000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Строка180 = ДанныеСтраницы.П000200018003;
			Строка240 = ДанныеСтраницы.П000200024003;
			Если Строка240 > Строка180 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 240 превышает значение в строке 180",
					"Лист02", "П000200024003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка190 = ДанныеСтраницы.П000200019003;
			Строка250 = ДанныеСтраницы.П000200025003;
			Если Строка250 > Строка190 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 250 превышает значение в строке 190",
					"Лист02", "П000200025003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка200 = ДанныеСтраницы.П000200020003;
			Строка260 = ДанныеСтраницы.П000200026003;
			Если Строка260 > Строка200 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 02"" значение в строке 260 превышает значение в строке 200",
					"Лист02", "П000200026003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ РазделПуст Тогда
		Если РазделНеВыгружается Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Заполнение раздела ""Лист 02"" в декларации с кодом по месту нахождения (учета) 220 или 231 не предусмотрено",
				"Лист02", "П000200000100");
			СтатусПроверки = Ложь;
		Иначе
			Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета, "Лист02", "П000200000100") Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Лист 02""",
					"Лист02", "П000200000100");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_1(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_1");
	
	Лист02_1 = ДанныеОтчета.Лист02_1;
	
	Для Каждого СтраницаРаздела Из Лист02_1 Цикл
		
		НомерСтраницы = Лист02_1.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000210000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000210000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 1 к листу 02"" не указан признак налогоплательщика",
					"Лист02_1", "П000210000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_1");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 1 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000210000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000210000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000210000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000210000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_1", "П000210000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 1 к листу 02""",
			"Лист02_1", "П000210000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_2");
	
	Лист02_2 = ДанныеОтчета.Лист02_2;
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000220040301", "П000220040303");
	СоответствиеИменЯчеек.Вставить("П000220040201", "П000220040203");
	СоответствиеИменЯчеек.Вставить("П000220040101", "П000220040103");
	
	Для Каждого СтраницаРаздела Из Лист02_2 Цикл
		
		НомерСтраницы = Лист02_2.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000220000100);
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000220000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 2 к листу 02"" не указан признак налогоплательщика",
					"Лист02_2", "П000220000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_2");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 2 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000220000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000220000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000220000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000220000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Если ЗначениеЗаполнено(СокрЛП(ДанныеСтраницы.П000220013503))
			   И СтрНайти("1,2", ДанныеСтраницы.П000220013503) = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 2 к листу 02"" указан некорректный код метода начисления амортизации",
					"Лист02_2", "П000220013503", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение])
				   И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " не задан год", "Лист02_2", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ])
				   И СтрДлина(СокрЛП(Формат(ДанныеСтраницы[Эл.Ключ], "ЧГ="))) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 2 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины", "Лист02_2",
						Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_2", "П000220000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 2 к листу 02""",
			"Лист02_2", "П000220000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_3(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_3");
	
	Лист02_3 = ДанныеОтчета.Лист02_3;
	
	Для Каждого СтраницаРаздела Из Лист02_3 Цикл
		
		НомерСтраницы = Лист02_3.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000230000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		 
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000230000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" не указан признак налогоплательщика",
					"Лист02_3", "П000230000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_3");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 3 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000230000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000230000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000230000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000230000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Строка210 = ДанныеСтраницы.П000230021003;
			Строка211 = ДанныеСтраницы.П000230021103;
			Если Строка211 > Строка210 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" значение в строке 211 превышает значение в строке 210",
					"Лист02_3", "П000230021103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Строка220 = ДанныеСтраницы.П000230022003;
			Строка221 = ДанныеСтраницы.П000230022103;
			Если Строка221 > Строка220 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 3 к листу 02"" значение в строке 221 превышает значение в строке 220",
					"Лист02_3", "П000230022103", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000230000100 = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_3", "П000230000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 3 к листу 02""",
			"Лист02_3", "П000230000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_4(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета,
									   СтруктураРеквизитовФормы, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_4");
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000240004001", "П000240004003");
	СоответствиеИменЯчеек.Вставить("П000240005001", "П000240005003");
	СоответствиеИменЯчеек.Вставить("П000240006001", "П000240006003");
	СоответствиеИменЯчеек.Вставить("П000240007001", "П000240007003");
	СоответствиеИменЯчеек.Вставить("П000240008001", "П000240008003");
	СоответствиеИменЯчеек.Вставить("П000240009001", "П000240009003");
	СоответствиеИменЯчеек.Вставить("П000240010001", "П000240010003");
	СоответствиеИменЯчеек.Вставить("П000240011001", "П000240011003");
	СоответствиеИменЯчеек.Вставить("П000240012001", "П000240012003");
	СоответствиеИменЯчеек.Вставить("П000240013001", "П000240013003");
	
	Лист02_4 = ДанныеОтчета.Лист02_4;
	
	Для Каждого СтраницаРаздела Из Лист02_4 Цикл
		
		НомерСтраницы = Лист02_4.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		ПризнакНалогоплательщика = СокрЛП(ДанныеСтраницы.П000240000100);
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, "Лист02_4", ДеревоВыгрузки)
		 ИЛИ ПризнакНалогоплательщика = "4" Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000240000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 4 к листу 02"" не указан признак налогоплательщика",
					"Лист02_4", "П000240000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ИмяРаздела", "Лист02_4");
			ПараметрыПроверки.Вставить("ПредставлениеРаздела", "Приложение 4 к листу 02");
			ПараметрыПроверки.Вставить("ПризнакНалогоплательщика", ПризнакНалогоплательщика);
			ПараметрыПроверки.Вставить("ДанныеСтраницы", ДанныеСтраницы);
			ПараметрыПроверки.Вставить("НомерСтраницы", НомерСтраницы);
			ПараметрыПроверки.Вставить("СерияЛиценции",      "П000240000201");
			ПараметрыПроверки.Вставить("НомерЛиценции",      "П000240000202");
			ПараметрыПроверки.Вставить("ВидЛиценции",        "П000240000203");
			ПараметрыПроверки.Вставить("НомерМесторождения", "П000240000204");
			
			ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	  ПараметрыПроверки,
																	  РезультатВыгрузки,
																	  СтатусПроверки);
			
			Для Каждого Эл Из СоответствиеИменЯчеек Цикл
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение])
				   И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ]) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " не задан год", "Лист02_4", Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ])
				   И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ])) <> 4 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы + " раздела ""Приложение 4 к листу 02"" в строке "
						+ Сред(Эл.Ключ, 9, 3) + " задано значение года некорректной длины", "Лист02_4",
						Эл.Ключ, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Владелец = Новый Структура;
			Владелец.Вставить("СоответствиеЕдиницыИзмеренияДелителю",
				СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю);
			Владелец.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
			
			Стр140 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Владелец, ДанныеСтраницы.П000240014003);
			Стр150 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Владелец, ДанныеСтраницы.П000240015003);
				
			Если Стр140 > 0 Тогда
				Если Стр150 > Стр140 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 4 к листу 02"" значение в строке 150 не должно быть больше значения в строке 140.",
						"Лист02_4", "П000240015003", НомерСтраницы);
						СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета,
			"Лист02_4", "П000240000100") Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Признак налогоплательщика не должен повторяться на различных страницах раздела ""Приложение 4 к листу 02""",
			"Лист02_4", "П000240000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_5(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "220");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_5");
	
	РазделПуст = Истина;
	
	Лист02_5 = ДанныеОтчета.Лист02_5;
	
	Для Каждого СтраницаРаздела Из Лист02_5 Цикл
		
		НомерСтраницы = Лист02_5.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак налогоплательщика",
					"Лист02_5", "П000250000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250001000) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак ""Расчет составлен""",
					"Лист02_5", "П000250001000", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002001) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан КПП обособленного подразделения",
					"Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000250002001)) <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" указан КПП обособленного подразделения некорректной длины",
					"Лист02_5", "П000250002001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указано наименование обособленного подразделения",
					"Лист02_5", "П000250002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000250002002) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" не указан признак возложения на обособленное подразделение обязанности по уплате налога",
					"Лист02_5", "П000250002002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000250010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000250011003) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 5 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению",
					"Лист02_5", "П000250010003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			ДанныеСтраницы.П000250000100 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел ""Приложение 5 к листу 02""", "Лист02_5", "П000250000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									   РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6");
	
	Лист02_6 = ДанныеОтчета.Лист02_6;
	Лист02_6а = ДанныеОтчета.Лист02_6а;
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	СоответствиеОКАТОСубъектамРФ = Неопределено;
	
	ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ);
	
	ДанныеРаздела = ДанныеОтчета.Лист02_6;
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
		
		НомерСтраницы = ДанныеРаздела.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0,
											   НомерСтраницы,
											   НомерПервойЗаполненнойСтраницы);
			
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан ИНН участника (обособленного подразделения)",
						"Лист02_6", "П000260000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000101)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан ИНН участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан КПП участника (обособленного подразделения)",
						"Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000260000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан ОКТМО участника (обособленного подразделения)",
						"Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан ОКТМО участника (обособленного подразделения) некорректной длины",
						"Лист02_6", "П000260000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указано наименование участника (обособленного подразделения)",
						"Лист02_6", "П000260000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000260000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" не указан код субъекта РФ",
						"Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000260000601)) <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" указан код субъекта РФ некорректной длины",
						"Лист02_6", "П000260000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					КодСубъектаРФ_СтрЛ02_6 = СокрЛП(ДанныеСтраницы.П000260000601);
					ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 = Ложь;
					Для Каждого СтраницаРазделаЛ02_6а из Лист02_6а Цикл
												
						Если ТипЗнч(СтраницаРазделаЛ02_6а.Данные) = Тип("Структура") Тогда
							ДанныеРазделаЛ02_6а = СтраницаРазделаЛ02_6а.Данные;
						Иначе
							ДанныеРазделаЛ02_6а = СтраницаРазделаЛ02_6а.Данные[0].Значение;
						КонецЕсли;
						
						ОКТМО_СтрЛ02_6а = СокрЛП(ДанныеРазделаЛ02_6а.П000270000301);
						
						КодСубъектаРФ_СтрЛ02_6а =
							РегламентированнаяОтчетностьКлиентСервер.КодСубъектаРФПоОКТМО(
								СоответствиеОКАТОСубъектамРФ, ОКТМО_СтрЛ02_6а);
						
						Если КодСубъектаРФ_СтрЛ02_6а = КодСубъектаРФ_СтрЛ02_6 Тогда
							ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЕстьХотяБыОдинЭкзЛиста02_6аДляДанногоЭкзЛиста02_6 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"Для кода по ОКТМО, указанного на странице " + НомерСтраницы
							+ " раздела ""Приложение 6 к листу 02"", не найден соответствующий код по ОКТМО в разделе ""Приложение 6а к листу 02""",
							"Лист02_6", "П000260000301", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000260010003) И ЗначениеЗаполнено(ДанныеСтраницы.П000260011003) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6 к листу 02"" заданы одновременно сумма налога к доплате и сумма налога к уменьшению",
						"Лист02_6", "П000260010003", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ДанныеСтраницы.П000260000601 = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Листы раздела ""Приложение 6 к листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
			"Лист02_6", "П000260000101", НомерПервойЗаполненнойСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6а(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6а");
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ЕстьЗаполненныеЛисты = Ложь;
	НомерПервойЗаполненнойСтраницы = 0;
	
	Лист02_6а = ДанныеОтчета.Лист02_6а;
	
	КоличествоЛистовСПризнакомНалогоплательщика1 = 0;
	НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0;
	
	Для Каждого СтраницаРаздела Из Лист02_6а Цикл
		НомерСтраницы = Лист02_6а.Индекс(СтраницаРаздела) + 1;
			
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			ЕстьЗаполненныеЛисты = Истина;
			НомерПервойЗаполненнойСтраницы = ?(НомерПервойЗаполненнойСтраницы = 0,
				НомерСтраницы, НомерПервойЗаполненнойСтраницы);
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" не указан ИНН участника (обособленного подразделения)",
						"Лист02_6а", "П000270000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000270000101)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" указан ИНН участника (обособленного подразделения) некорректной длины",
						"Лист02_6а", "П000270000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000201) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" не указан КПП участника (обособленного подразделения)",
						"Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000270000201)) <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Приложение 6а к листу 02"" указан КПП участника (обособленного подразделения) некорректной длины",
						"Лист02_6а", "П000270000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ОКТМО = СокрЛП(ДанныеСтраницы.П000270000301);
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указан ОКАТО участника (обособленного подразделения)",
					"Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ОКТМО) <> 11 И СтрДлина(ОКТМО) <> 8 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" указан ОКАТО участника (обособленного подразделения) некорректной длины",
					"Лист02_6а", "П000270000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указано наименование участника (обособленного подразделения)",
					"Лист02_6а", "П000270000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000270000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" не указан признак ""Расчет составлен""",
					"Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрНайти("1,2,3,4", ДанныеСтраницы["П000270000501"]) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Приложение 6а к листу 02"" указано некорректное значение признака ""Расчет составлен""",
					"Лист02_6а", "П000270000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				РасчетСоставлен = ДанныеСтраницы.П000270000501;
				Если РасчетСоставлен = "1" Тогда
					КоличествоЛистовСПризнакомНалогоплательщика1 = КоличествоЛистовСПризнакомНалогоплательщика1 + 1;
					НомерПервогоЛистаСПризнакомНалогоплательщика1 = ?(НомерПервогоЛистаСПризнакомНалогоплательщика1 = 0,
						НомерСтраницы, НомерПервогоЛистаСПризнакомНалогоплательщика1);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаполненныеЛисты И НЕ ЭтоКонсолидированнаяГруппа Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Листы раздела ""Приложение 6а к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
			"Лист02_6а", "П000270000101", НомерПервойЗаполненнойСтраницы);
			СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если КоличествоЛистовСПризнакомНалогоплательщика1 > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Лист раздела ""Приложение 6а к Листу 02"" с признаком ""Расчет составлен"" 1 может быть заполнент только в единственном экземпляре!",
			"Лист02_6а", "П000270000101", НомерПервогоЛистаСПризнакомНалогоплательщика1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист02_6б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ЭтоКонсолидированнаяГруппа = (ПараметрыВыгрузки.ПоМесту = "218");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист02_6б");
	
	ДанныеРаздела = ДанныеОтчета.Лист02_6б;
	
	Если НЕ СтраницаПуста(ИмяФормы, ДанныеРаздела, ПоказателиРаздела) Тогда
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			НомерСтроки = 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
			Пока ДанныеРаздела.Свойство("П000280001003" + Постфикс) Цикл
				
				БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000280002003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280002103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280003103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280004003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280005003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006003" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006103" + Постфикс])
						   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000280006203" + Постфикс]);
				
				Если БлокЗаполнен Тогда
					ИмяОбластиИНН = "П000280001003" + Постфикс;
					Если НЕ ЗначениеЗаполнено(ДанныеРаздела[ИмяОбластиИНН]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"В строке " + СтрокаЧГ0(ИмяФормы, НомерСтроки)
							+ " раздела ""Приложение 6б к листу 02"" не указан ИНН участника консолидированной группы налогоплательщиков",
							"Лист02_6б", ИмяОбластиИНН);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(ДанныеРаздела[ИмяОбластиИНН])) <> 10 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
							"В строке " + СтрокаЧГ0(ИмяФормы, НомерСтроки)
							+ " раздела ""Приложение 6б к листу 02"" указан ИНН участника консолидированной группы налогоплательщиков некорректной длины",
							"Лист02_6б", ИмяОбластиИНН);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
				
			КонецЦикла;
			
		Иначе
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Приложение 6б к Листу 02"" заполняются только при коде ""по месту нахождения (учета)"" на титульном листе равном 218",
				"Лист02_6б", "П000280001003_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист03А(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист03А");
	
	РазделПуст = Истина;
	
	Лист03А = ДанныеОтчета.Лист03А;
	
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		
		НомерСтраницы = Лист03А.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			РазделПуст = Ложь;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000100) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указана категория налогового агента",
					"Лист03А", "П000310000100", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000310000200) И ДанныеСтраницы.П000310000100 = "1" Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не должен быть указан ИНН организации - эмитента ценных бумаг при коде категории налогового агента ""1""",
					"Лист03А", "П000310000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтраницы.П000310000200) Тогда
				Если СтрДлина(СокрЛП(ДанныеСтраницы.П000310000200)) <> 10 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"На странице " + НомерСтраницы
						+ " раздела ""Лист 03 (раздел А)"" указан ИНН организации - эмитента ценных бумаг некорректной длины",
						"Лист03А", "П000310000200", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000300) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указан вид дивидендов",
					"Лист03А", "П000310000300", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000400) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не задан налоговый (отчетный) период",
					"Лист03А", "П000310000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(ДанныеСтраницы.П000310000400)) <> 2 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" задан налоговый (отчетный) период некорректной длины",
					"Лист03А", "П000310000400", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000310000500) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" не указан отчетный год",
					"Лист03А", "П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(Формат(ДанныеСтраницы.П000310000500, "ЧГ=")) <> 4 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел А)"" задан отчетный год некорректной длины", "Лист03А",
					"П000310000500", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Инд = 1;
			ИмяПок_ИНН = "П000330000503_1";
			ИмяПок_КПП = "П000330000504_1";
			ИмяПок_Тип = "П000330000505_1";
			ИмяПок_Пол = "П000330001003_1";
			ИмяПок_Фам = "П000330002001_1";
			ИмяПок_Имя = "П000330002002_1";
			ИмяПок_Отч = "П000330002003_1";
			ИмяПок_Тел = "П000330003003_1";
			ИмяПок_Дат = "П000330004003_1";
			ИмяПок_Див = "П000330005003_1";
			ИмяПок_Нал = "П000330006003_1";
			
			Пока ДанныеСтраницы.Свойство(ИмяПок_ИНН) Цикл
				
				Знач_ИНН = СокрЛП(ДанныеСтраницы[ИмяПок_ИНН]);
				Знач_КПП = СокрЛП(ДанныеСтраницы[ИмяПок_КПП]);
				Знач_Тип = СокрЛП(ДанныеСтраницы[ИмяПок_Тип]);
				Знач_Пол = СокрЛП(ДанныеСтраницы[ИмяПок_Пол]);
				Знач_Фам = СокрЛП(ДанныеСтраницы[ИмяПок_Фам]);
				Знач_Имя = СокрЛП(ДанныеСтраницы[ИмяПок_Имя]);
				Знач_Отч = СокрЛП(ДанныеСтраницы[ИмяПок_Отч]);
				Знач_Тел = СокрЛП(ДанныеСтраницы[ИмяПок_Тел]);
				Знач_Дат = ДанныеСтраницы[ИмяПок_Дат];
				Знач_Див = ДанныеСтраницы[ИмяПок_Див];
				Знач_Нал = ДанныеСтраницы[ИмяПок_Нал];
				
				ЗаполненаСтрока005_060
				  = ЗначениеЗаполнено(Знач_ИНН)
				ИЛИ ЗначениеЗаполнено(Знач_КПП)
				ИЛИ ЗначениеЗаполнено(Знач_Тип)
				ИЛИ ЗначениеЗаполнено(Знач_Пол)
				ИЛИ ЗначениеЗаполнено(Знач_Фам)
				ИЛИ ЗначениеЗаполнено(Знач_Имя)
				ИЛИ ЗначениеЗаполнено(Знач_Отч)
				ИЛИ ЗначениеЗаполнено(Знач_Тел)
				ИЛИ ЗначениеЗаполнено(Знач_Дат)
				ИЛИ ЗначениеЗаполнено(Знач_Див)
				ИЛИ ЗначениеЗаполнено(Знач_Нал);
				
				Если ЗаполненаСтрока005_060 Тогда
					
					Инд_Стр = Формат(Инд, "ЧГ=");
					
					ДлинаИНН = СтрДлина(Знач_ИНН);
					Если ДлинаИНН <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Знач_ИНН) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаИНН = 0, "", "верно") + " задан ИНН получателя",
						"Лист03А", ИмяПок_ИНН, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Знач_КПП) Тогда
						ДлинаКПП = СтрДлина(Знач_КПП);
						Если ДлинаКПП <> 9 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 неверно задан КПП получателя",
							"Лист03А", ИмяПок_КПП, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					ДлинаТип = СтрДлина(Знач_Тип);
					Если ДлинаТип <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаТип = 0, "", "верно") + " задан тип получателя",
						"Лист03А", ИмяПок_Тип, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Пол) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задано наименование получателя",
						"Лист03А", ИмяПок_Пол, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗаполненыДанныеФИО
					  = ЗначениеЗаполнено(Знач_Фам)
					ИЛИ ЗначениеЗаполнено(Знач_Имя)
					ИЛИ ЗначениеЗаполнено(Знач_Отч);
					
					Если ЗаполненыДанныеФИО Тогда
						
						Если НЕ ЗначениеЗаполнено(Знач_Фам) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задана фамилия руководителя организации",
							"Лист03А", ИмяПок_Фам, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Знач_Имя) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задано имя руководителя организации",
							"Лист03А", ИмяПок_Имя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Дат) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задана дата перечисления дивидендов",
						"Лист03А", ИмяПок_Дат, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				Инд_Стр = Формат(Инд, "ЧГ=");
				ИмяПок_ИНН = "П000330000503_" + Инд_Стр;
				ИмяПок_КПП = "П000330000504_" + Инд_Стр;
				ИмяПок_Тип = "П000330000505_" + Инд_Стр;
				ИмяПок_Пол = "П000330001003_" + Инд_Стр;
				ИмяПок_Фам = "П000330002001_" + Инд_Стр;
				ИмяПок_Имя = "П000330002002_" + Инд_Стр;
				ИмяПок_Отч = "П000330002003_" + Инд_Стр;
				ИмяПок_Тел = "П000330003003_" + Инд_Стр;
				ИмяПок_Дат = "П000330004003_" + Инд_Стр;
				ИмяПок_Див = "П000330005003_" + Инд_Стр;
				ИмяПок_Нал = "П000330006003_" + Инд_Стр;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если РазделПуст И РазделВыгружается Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			"Должен быть заполнен раздел ""Лист 03 (раздел А)"" при коде ""по месту нахождения (учета)"" на титульном листе равном 231",
			"Лист03А", "П000310000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист03Б(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									  РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	РазделВыгружается = (ПараметрыВыгрузки.ПоМесту = "231");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист03Б");
	
	РазделПуст = Истина;
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		
		НомерСтраницы = Лист03Б.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			РазделПуст = Ложь;
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000320000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 03 (раздел Б)"" не указан вид дохода",
					"Лист03Б", "П000320000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Инд = 1;
			ИмяПок_ИНН = "П000340000503_1";
			ИмяПок_КПП = "П000340000504_1";
			ИмяПок_Тип = "П000340000505_1";
			ИмяПок_Пол = "П000340001003_1";
			ИмяПок_Фам = "П000340002001_1";
			ИмяПок_Имя = "П000340002002_1";
			ИмяПок_Отч = "П000340002003_1";
			ИмяПок_Тел = "П000340003003_1";
			ИмяПок_Дат = "П000340004003_1";
			ИмяПок_Див = "П000340005003_1";
			ИмяПок_Нал = "П000340006003_1";
			
			Пока ДанныеСтраницы.Свойство(ИмяПок_ИНН) Цикл
				
				Знач_ИНН = СокрЛП(ДанныеСтраницы[ИмяПок_ИНН]);
				Знач_КПП = СокрЛП(ДанныеСтраницы[ИмяПок_КПП]);
				Знач_Тип = СокрЛП(ДанныеСтраницы[ИмяПок_Тип]);
				Знач_Пол = СокрЛП(ДанныеСтраницы[ИмяПок_Пол]);
				Знач_Фам = СокрЛП(ДанныеСтраницы[ИмяПок_Фам]);
				Знач_Имя = СокрЛП(ДанныеСтраницы[ИмяПок_Имя]);
				Знач_Отч = СокрЛП(ДанныеСтраницы[ИмяПок_Отч]);
				Знач_Тел = СокрЛП(ДанныеСтраницы[ИмяПок_Тел]);
				Знач_Дат = ДанныеСтраницы[ИмяПок_Дат];
				Знач_Див = ДанныеСтраницы[ИмяПок_Див];
				Знач_Нал = ДанныеСтраницы[ИмяПок_Нал];
				
				ЗаполненаСтрока005_060
				  = ЗначениеЗаполнено(Знач_ИНН)
				ИЛИ ЗначениеЗаполнено(Знач_КПП)
				ИЛИ ЗначениеЗаполнено(Знач_Тип)
				ИЛИ ЗначениеЗаполнено(Знач_Пол)
				ИЛИ ЗначениеЗаполнено(Знач_Фам)
				ИЛИ ЗначениеЗаполнено(Знач_Имя)
				ИЛИ ЗначениеЗаполнено(Знач_Отч)
				ИЛИ ЗначениеЗаполнено(Знач_Тел)
				ИЛИ ЗначениеЗаполнено(Знач_Дат)
				ИЛИ ЗначениеЗаполнено(Знач_Див)
				ИЛИ ЗначениеЗаполнено(Знач_Нал);
				
				Если ЗаполненаСтрока005_060 Тогда
					
					Инд_Стр = Формат(Инд, "ЧГ=");
					
					ДлинаИНН = СтрДлина(Знач_ИНН);
					Если ДлинаИНН <> 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Знач_ИНН) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаИНН = 0, "", "верно") + " задан ИНН получателя",
						"Лист03Б", ИмяПок_ИНН, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Знач_КПП) Тогда
						ДлинаКПП = СтрДлина(Знач_КПП);
						Если ДлинаКПП <> 9 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 неверно задан КПП получателя",
							"Лист03Б", ИмяПок_КПП, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					ДлинаТип = СтрДлина(Знач_Тип);
					Если ДлинаТип <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не" + ?(ДлинаТип = 0, "", "верно") + " задан тип получателя",
						"Лист03Б", ИмяПок_Тип, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Пол) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задано наименование получателя",
						"Лист03Б", ИмяПок_Пол, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗаполненыДанныеФИО
					  = ЗначениеЗаполнено(Знач_Фам)
					ИЛИ ЗначениеЗаполнено(Знач_Имя)
					ИЛИ ЗначениеЗаполнено(Знач_Отч);
					
					Если ЗаполненыДанныеФИО Тогда
						
						Если НЕ ЗначениеЗаполнено(Знач_Фам) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задана фамилия руководителя организации",
							"Лист03Б", ИмяПок_Фам, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Знач_Имя) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
							+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
							+ " группы строк 005-060 не задано имя руководителя организации",
							"Лист03Б", ИмяПок_Имя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Знач_Дат) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы + " раздела ""Лист 03 (раздел В)"" в строке " + Инд_Стр
						+ " группы строк 005-060 не задана дата перечисления дивидендов",
						"Лист03Б", ИмяПок_Дат, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = Инд + 1;
				Инд_Стр = Формат(Инд, "ЧГ=");
				ИмяПок_ИНН = "П000340000503_" + Инд_Стр;
				ИмяПок_КПП = "П000340000504_" + Инд_Стр;
				ИмяПок_Тип = "П000340000505_" + Инд_Стр;
				ИмяПок_Пол = "П000340001003_" + Инд_Стр;
				ИмяПок_Фам = "П000340002001_" + Инд_Стр;
				ИмяПок_Имя = "П000340002002_" + Инд_Стр;
				ИмяПок_Отч = "П000340002003_" + Инд_Стр;
				ИмяПок_Тел = "П000340003003_" + Инд_Стр;
				ИмяПок_Дат = "П000340004003_" + Инд_Стр;
				ИмяПок_Див = "П000340005003_" + Инд_Стр;
				ИмяПок_Нал = "П000340006003_" + Инд_Стр;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист04(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист04");
	
	Лист04 = ДанныеОтчета.Лист04;
	
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		НомерСтраницы = Лист04.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000400000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 04"" не указан вид дохода", "Лист04", "П000400000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист05(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист05");
	
	ПоказателиРазделаДляУзла = Новый Массив;
	
	Для каждого ПоказательРаздела Из ПоказателиРаздела Цикл
		Если ПоказательРаздела.Родитель <> Неопределено И ПоказательРаздела.Родитель.Код = "НалБазОпОсобН" Тогда
			ПоказателиРазделаДляУзла.Добавить(ПоказательРаздела);
		КонецЕсли;
	КонецЦикла;
	
	Лист05 = ДанныеОтчета.Лист05;
	
	Для Каждого СтраницаРаздела Из Лист05 Цикл
		НомерСтраницы = Лист05.Индекс(СтраницаРаздела) + 1;
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРазделаДляУзла) Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000500000200) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"На странице " + НомерСтраницы
					+ " раздела ""Лист 05"" не указан вид операции", "Лист05", "П000500000200", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист07(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист07");
	ДанныеРаздела = ДанныеОтчета.Лист07;
	
	КодВидаПоступления = Неопределено;
	
	Если НЕ СтраницаПуста(ИмяФормы, ДанныеРаздела, ПоказателиРаздела) Тогда
		
		НомерСтроки = 1;
		Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
		
		Пока ДанныеРаздела.Свойство("П000700001001" + Постфикс, КодВидаПоступления) Цикл
			
			БлокЗаполнен = ЗначениеЗаполнено(ДанныеРаздела["П000700001001" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001002" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001003" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001004" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001005" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001006" + Постфикс])
					   ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000700001007" + Постфикс]);
					
			Если БлокЗаполнен Тогда
				Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=")
						+ " не указан код вида поступлений", "Лист07", "П000700001001" + Постфикс);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(КодВидаПоступления)) <> 3 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
						"В разделе ""Лист 07"" в строке " + Формат(НомерСтроки, "ЧГ=")
						+ " указан код вида поступлений некорректной длины", "Лист07", "П000700001001" + Постфикс);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			Постфикс = "_" + СтрокаЧГ0(ИмяФормы, НомерСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист08(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета,
									 СтруктураРеквизитовФормы, СтатусПроверки)
	
	РазделМожетБытьВыгружен = (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12);
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист08");
	Лист08 = ДанныеОтчета.Лист08;
	
	Если РазделМожетБытьВыгружен Тогда
		
		Для Каждого СтраницаРаздела Из Лист08 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
				
				НомерСтраницы = Лист08.Индекс(СтраницаРаздела) + 1;
				НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан вид корректировки.",
					"Лист08", "П000800000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрНайти("12345", ДанныеСтраницы.П000800000101) = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" указано некорректное значение вида корректировки. Возможные значения: 1, 2, 3, 4, 5.",
					"Лист08", "П000800000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомСтроки = 1;
				ИмяПоказателя = "П000800000201_1";
				ЗаполненХотяБыОдинКодОснования = Ложь;
				Пока ДанныеСтраницы.Свойство(ИмяПоказателя) Цикл
					Если ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя]) Тогда
						ЗаполненХотяБыОдинКодОснования = Истина;
						Если СтрДлина(СокрЛП(ДанныеСтраницы[ИмяПоказателя])) = 3 Тогда
							Если СтрНайти("121|122|123|124|131|132|133|134|135|136|137",
								СокрЛП(ДанныеСтраницы[ИмяПоказателя])) = 0 Тогда
								РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
								РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
								+ " раздела ""Лист 08"" указано некорректное значение кода основания отнесения сделки к контролируемой. Возможные значения: 121, 122, 123, 124, 131, 132, 133, 134, 135, 136, 137.",
								"Лист08", ИмяПоказателя, НомерСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
						Иначе
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указано значение кода основания отнесения сделки к контролируемой некорректной длины.",
							"Лист08", ИмяПоказателя, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					НомСтроки = НомСтроки + 1;
					ИмяПоказателя = "П000800000201_" + Формат(НомСтроки, "ЧГ=");
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинКодОснования Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан код основания отнесения сделки к контролируемой.",
					"Лист08", "П000800000201_1", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000401) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан код страны регистрации (инкорпорации) контрагента.",
					"Лист08", "П000800000401", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ВидКонтрагента = СокрЛП(ДанныеСтраницы.П000800000301);
				
				Если ВидКонтрагента = "Российская организация" Тогда
					
					ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
					Если ИНН_Длина = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан ИНН контрагента.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ИНН_Длина <> 10 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 10 цифр.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000701) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано наименование организации контрагента.",
						"Лист08", "П000800000701", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Иностранная организация" Тогда
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000601) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан регистрационный номер контрагента в стране регистрации (инкорпорации).",
						"Лист08", "П000800000601", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтраницы.П000800000501) Тогда
						ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
						Если ИНН_Длина <> 10 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 10 цифр.",
							"Лист08", "П000800000501", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000701) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано наименование организации контрагента.",
						"Лист08", "П000800000701", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Индивидуальный предприниматель" Тогда
					
					ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
					Если ИНН_Длина = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указан ИНН контрагента.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ИНН_Длина <> 12 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 12 цифр.",
						"Лист08", "П000800000501", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000801) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указана фамилия контрагента.",
						"Лист08", "П000800000801", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000802) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано имя контрагента.",
						"Лист08", "П000800000802", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ВидКонтрагента = "Физическое лицо" Тогда
					
					Если ЗначениеЗаполнено(ДанныеСтраницы.П000800000501) Тогда
						ИНН_Длина = СтрДлина(СокрЛП(ДанныеСтраницы.П000800000501));
						Если ИНН_Длина <> 12 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " раздела ""Лист 08"" указан ИНН контрагента, не состоящий из 12 цифр.",
							"Лист08", "П000800000501", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000801) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указана фамилия контрагента.",
						"Лист08", "П000800000801", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800000802) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" не указано имя контрагента.",
						"Лист08", "П000800000802", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				Иначе
					
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " раздела ""Лист 08"" не указан вид контрагента.",
					"Лист08", "П000800000301", НомерСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
				ВозможныеЗначенияПризнака = Новый Массив;
				ВозможныеЗначенияПризнака.Добавить("0");
				ВозможныеЗначенияПризнака.Добавить("1");
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800001004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800001003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 010 не указан признак.",
						"Лист08", "П000800001003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800001003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 010 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800001003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800002004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800002003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 020 не указан признак.",
						"Лист08", "П000800002003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800002003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 020 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800002003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800003004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800003003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 030 не указан признак.",
						"Лист08", "П000800003003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800003003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 030 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800003003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800004004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800004003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 040 не указан признак.",
						"Лист08", "П000800004003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800004003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 040 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800004003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П000800005004) Тогда
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000800005003) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
						+ НомерСтраницы_Стр + " раздела ""Лист 08"" в строке 050 не указан признак.",
						"Лист08", "П000800005003", НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеЗначенияПризнака.Найти(
						СокрЛП(ДанныеСтраницы.П000800005003)) = Неопределено Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " раздела ""Лист 08"" в строке 050 указано некорректное значение признака. Возможные значения: 0, 1.",
						"Лист08", "П000800005003", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИмяПоказателя = "";
		
		Для Каждого СтраницаРаздела Из Лист08 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела, , ИмяПоказателя) Тогда
				
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Лист 08"" не должен быть заполнен при составлении декларации не за налоговый период.",
				"Лист08", ИмяПоказателя, НомерСтраницы);
				СтатусПроверки = Ложь;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Лист09(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
									 РезультатВыгрузки, ДанныеОтчета,
									 СтруктураРеквизитовФормы, СтатусПроверки)
	
	РазделДолженБытьВыгружен
		= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12
		И ПараметрыВыгрузки.ПоМесту = "238");
	
	РазделМожетБытьВыгружен
		= (Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) = 12);
	
	СоответствиеИменЯчеек = Новый Соответствие;
	СоответствиеИменЯчеек.Вставить("П000910012001", "П000910012003");
	СоответствиеИменЯчеек.Вставить("П000910011001", "П000910011003");
	СоответствиеИменЯчеек.Вставить("П000910010001", "П000910010003");
	СоответствиеИменЯчеек.Вставить("П000910009001", "П000910009003");
	СоответствиеИменЯчеек.Вставить("П000910008001", "П000910008003");
	СоответствиеИменЯчеек.Вставить("П000910007001", "П000910007003");
	СоответствиеИменЯчеек.Вставить("П000910006001", "П000910006003");
	СоответствиеИменЯчеек.Вставить("П000910005001", "П000910005003");
	СоответствиеИменЯчеек.Вставить("П000910004001", "П000910004003");
	СоответствиеИменЯчеек.Вставить("П000910003001", "П000910003003");
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Лист09");
	Лист09 = ДанныеОтчета.Лист09;
	
	Если РазделДолженБытьВыгружен ИЛИ РазделМожетБытьВыгружен Тогда
		
		ЗаполненаХотяБыОднаСтраницаЛиста09 = Ложь;
		
		Для Каждого СтраницаРаздела Из Лист09 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
				
				ЗаполненаХотяБыОднаСтраницаЛиста09 = Истина;
				
				НомерСтраницы = Лист09.Индекс(СтраницаРаздела) + 1;
				НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000101) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан номер контролируемой иностранной компании.",
					"Лист09", "П0009А0000101", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					НомерКИК = СокрЛП(ДанныеСтраницы.П0009А0000101);
					НомерКИКСоответствуетШаблону = СтрДлина(НомерКИК) = 8
					И (СтрНачинаетсяС(НомерКИК, "ИО-") ИЛИ СтрНачинаетсяС(НомерКИК, "ИС-"));
					Если НЕ НомерКИКСоответствуетШаблону Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указан некорректный номер контролируемой иностранной компании. Допустимы значения, соответствующие шаблонам: ""ИО-NNNNN"", ""ИС-NNNNN"" (N - пятизначный порядковый номер).",
						"Лист09", "П0009А0000101", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000201) Тогда
					Если СтрНайти("12345", ДанныеСтраницы.П0009А0000201) = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указано некорректное значение кода организационной формы. Возможные значения: 1, 2, 3, 4, 5.",
						"Лист09", "П0009А0000201", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000301) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указано полное наименование (в русской транскрипции).",
					"Лист09", "П0009А0000301", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000302) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указано полное наименование (в латинской транскрипции).",
					"Лист09", "П0009А0000302", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000501) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан код государства (территории) регистрации (инкорпорации), учреждения.",
					"Лист09", "П0009А0000501", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан код государства (территории) налогового резиденства.",
					"Лист09", "П0009А0000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000701) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан регистрационный номер (иной идентификатор) в государстве (территории) регистрации (инкорпорации), учреждения.",
					"Лист09", "П0009А0000701", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000901) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указан адрес в государстве (территории) регистрации (инкорпорации).",
					"Лист09", "П0009А0000901", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ДанныеСтраницы.П0009А0001001 = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Листа 09"" в ""Разделе А"" не указана доля участия в прибыли контролируемой иностранной компании.",
					"Лист09", "П0009А0001001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Для НомСтроки = 1 По 8 Цикл
					ИмяПоказателя = "П0009А000110" + НомСтроки;
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы[ИмяПоказателя]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" не указан признак подтверждения основания для освобождения прибыли контролируемой иностранной компании от налогообложения 100"
						+ НомСтроки + ".",
						"Лист09", ИмяПоказателя, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрНайти("01", ДанныеСтраницы[ИмяПоказателя]) = 0 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе А"" указано некорректное значение признака подтверждения основания для освобождения прибыли контролируемой иностранной компании от налогообложения 100"
						+ НомСтроки + ". Возможные значения: 0, 1.",
						"Лист09", ИмяПоказателя, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЦикла;
				
				ЗаполненРазделБ2 = Ложь;
				ЗаполненРазделБ3 = Ложь;
				
				Для каждого Показатель Из ДанныеСтраницы Цикл
					ЗаполненРазделБ2 = ЗаполненРазделБ2
					ИЛИ (СтрНачинаетсяС(Показатель.Ключ, "П009Б2") И ЗначениеЗаполнено(Показатель.Значение));
					ЗаполненРазделБ3 = ЗаполненРазделБ3
					ИЛИ (СтрНачинаетсяС(Показатель.Ключ, "П009Б3") И ЗначениеЗаполнено(Показатель.Значение));
					Если ЗаполненРазделБ2 И ЗаполненРазделБ3 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000100) Тогда
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б10000101) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Листа 09"" в ""Разделе Б1"" не указан код валюты.",
						"Лист09", "П009Б10000101", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(ДанныеСтраницы.П0009А0000200) Тогда
					
					Если ЗаполненРазделБ2 Тогда
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б20000101) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" не указано основание для применения порядка расчета прибыли.",
							"Лист09", "П009Б20000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						ИначеЕсли СтрНайти("12", ДанныеСтраницы.П009Б20000101) = 0 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" указано некорректное значение основания для применения порядка расчета прибыли. Возможные значения: 1, 2.",
							"Лист09", "П009Б20000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б20000201) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б2"" не указан код валюты.",
							"Лист09", "П009Б20000201", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗаполненРазделБ3 Тогда
						
						Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П009Б30000101) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " ""Листа 09"" в ""Разделе Б3"" не указан код валюты.",
							"Лист09", "П009Б30000101", НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Инд = 1;
				Инд_Стр = "1";
				ОсноваИмениПок = "П000910003001_";
				Пока ДанныеСтраницы.Свойство(ОсноваИмениПок + Инд_Стр) Цикл
					
					ЗаполненБлокСтрокПриложения1КЛисту09 = Ложь;
					Для каждого Показатель Из ДанныеСтраницы Цикл
						Если СтрНачинаетсяС(Показатель.Ключ, "П00091")
							И Сред(Показатель.Ключ, 15) = Инд_Стр
							И ЗначениеЗаполнено(Показатель.Значение) Тогда
							ЗаполненБлокСтрокПриложения1КЛисту09 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НЕ ЗаполненБлокСтрокПриложения1КЛисту09 Тогда
						Инд = Инд + 1;
						Инд_Стр = Формат(Инд, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ДанныеСтраницы["П000910000101_" + Инд_Стр]) Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
						РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" не указан код валюты.",
						"Лист09", "П000910000101_" + Инд_Стр, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтраницы["П000910000201_" + Инд_Стр]) Тогда
						Если СтрНайти("12", ДанныеСтраницы["П000910000201_" + Инд_Стр]) = 0 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
							+ " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" указано некорректное значение кода операций, по которым производится расчет. Возможные значения: 1, 2.",
							"Лист09", "П000910000201_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого Эл Из СоответствиеИменЯчеек Цикл
						Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Значение + "_" + Инд_Стр])
							И НЕ ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр]) Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы + " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" в строке "
							+ Сред(Эл.Ключ + "_" + Инд_Стр, 9, 3) + " не задан год", "Лист09", Эл.Ключ + "_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если ЗначениеЗаполнено(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр])
							И СтрДлина(СокрЛП(ДанныеСтраницы[Эл.Ключ + "_" + Инд_Стр])) <> 4 Тогда
							РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
							РезультатВыгрузки, "На странице " + НомерСтраницы + " в блоке строк " + Инд_Стр + " ""Приложения № 1 к Листу 09"" в строке "
							+ Сред(Эл.Ключ + "_" + Инд_Стр, 9, 3) + " задано значение года некорректной длины", "Лист09", Эл.Ключ + "_" + Инд_Стр, НомерСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЦикла;
					
					Инд = Инд + 1;
					Инд_Стр = Формат(Инд, "ЧГ=");
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ИмяПоказателя = "";
		
		Для Каждого СтраницаРаздела Из Лист09 Цикл
			
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеСтраницы = СтраницаРаздела.Данные;
			Иначе
				ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела, , ИмяПоказателя) Тогда
				НомерСтраницы = Лист09.Индекс(СтраницаРаздела) + 1;
				
				Если НЕ ЗначениеЗаполнено(ИмяПоказателя) Тогда
					ИмяПоказателя = "П0009А0000101";
				КонецЕсли;
				
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				"Раздел ""Лист 09"" не должен быть заполнен при составлении декларации не за налоговый период.",
				"Лист09", ИмяПоказателя, НомерСтраницы);
				СтатусПроверки = Ложь;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если РазделДолженБытьВыгружен И НЕ ЗаполненаХотяБыОднаСтраницаЛиста09 Тогда
		
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
		"Раздел ""Лист 09"" должен быть заполнен при составлении декларации за налоговый период с кодом места представления, равным ""238"".",
		"Лист09", "П0009А0000101", 1);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Приложение2(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки,
										  РезультатВыгрузки, ДанныеОтчета,
										  СтруктураРеквизитовФормы, СтатусПроверки)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, "Приложение2");
	Приложение2 = ДанныеОтчета.Приложение2;
	
	Для Каждого СтраницаРаздела Из Приложение2 Цикл
		
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеСтраницы = СтраницаРаздела.Данные;
		Иначе
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Если НЕ СтраницаПуста(ИмяФормы, ДанныеСтраницы, ПоказателиРаздела) Тогда
			
			НомерСтраницы = Приложение2.Индекс(СтраницаРаздела) + 1;
			НомерСтраницы_Стр = Формат(НомерСтраницы, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000101) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан номер справки.",
				"Приложение2", "П000020000101", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000102) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указана дата составления.",
				"Приложение2", "П000020000102", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000103) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан тип.",
				"Приложение2", "П000020000103", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000103 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000103));
				Если ДлинаП000020000103 <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
					+ НомерСтраницы_Стр + " ""Приложения 2"" указан тип, не состоящий из 2 символов.",
					"Приложение2", "П000020000103", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтраницы.П000020000201) Тогда
				ДлинаП000020000201 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000201));
				Если ДлинаП000020000201 <> 12 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" указан ИНН физического лица в Российской Федерации, не состоящий из 12 символов.",
					"Приложение2", "П000020000201", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000401) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан статус налогоплательщика.",
				"Приложение2", "П000020000401", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000402) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указана дата рождения.",
				"Приложение2", "П000020000402", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000301) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указана фамилия физического лица.", "Приложение2", "П000020000301", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000302) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указано имя физического лица.", "Приложение2", "П000020000302", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000403) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан код гражданства (код страны).",
				"Приложение2", "П000020000403", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000403 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000403));
				Если ДлинаП000020000403 <> 3 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
					+ НомерСтраницы_Стр + " ""Приложения 2"" указан код гражданства (код страны), не состоящий из 3 символов.",
					"Приложение2", "П000020000403", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000404) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
				+ НомерСтраницы_Стр + " ""Приложения 2"" не указан код документа, удостоверяющего личность.",
				"Приложение2", "П000020000404", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ДлинаП000020000404 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000404));
				Если ДлинаП000020000404 <> 2 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" указан код документа, удостоверяющего личность, не состоящий из 2 символов.",
					"Приложение2", "П000020000404", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000405) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
				+ " ""Приложения 2"" не указаны серия и номер документа, удостоверяющего личность.",
				"Приложение2", "П000020000405", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненБлокАдрМЖРФ
			= ЗначениеЗаполнено(ДанныеСтраницы.П000020000501)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000502)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000503)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000504)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000505)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000506)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000507)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000508)
			ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000509);
			
			Если ЗаполненБлокАдрМЖРФ
				ИЛИ СокрЛП(ДанныеСтраницы.П000020000401) = "1"
				ИЛИ СокрЛП(ДанныеСтраницы.П000020000403) = "643" Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000502) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан код региона.", "Приложение2", "П000020000502", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ДлинаП000020000502 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000502));
					Если ДлинаП000020000502 <> 2 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Приложения 2"" указан код региона, не состоящий из 2 символов.",
						"Приложение2", "П000020000502", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(ДанныеСтраницы.П000020000403)
				И СокрЛП(ДанныеСтраницы.П000020000403) <> "643" И НЕ ЗаполненБлокАдрМЖРФ)
				ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000601)
				ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.П000020000602) Тогда
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000601) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан код страны в адресе места жительства за пределами Российской Федерации.",
					"Приложение2", "П000020000601", НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ДлинаП000020000601 = СтрДлина(СокрЛП(ДанныеСтраницы.П000020000601));
					Если ДлинаП000020000601 <> 3 Тогда
						РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
						+ " ""Приложения 2"" указан код страны в адресе места жительства за пределами Российской Федерации, не состоящий из 3 символов.",
						"Приложение2", "П000020000601", НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтраницы.П000020000602) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице " + НомерСтраницы_Стр
					+ " ""Приложения 2"" не указан адрес места жительства за пределами Российской Федерации.",
					"Приложение2", "П000020000602", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

Функция СтраницаПуста(ИмяФормы,
					  ДанныеСтраницы,
					  Показатели,
					  ДеревоВыгрузки = Неопределено,
					  ИмяЗаполненногоПоказателя = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ИмяФормы, ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	// Лист 02, ставки налогов.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200014003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200015003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200016003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200017003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250006003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000320002003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000400003003");
	
	// Приложение №6 к Листу 02, код региона
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000260000601");
	
	// Раздел 1.2.
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120001003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120011003");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000120021003");
	
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000210000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000230000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000240000100");
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000250000100");
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Родитель <> Неопределено И Пок.Родитель.Многострочность
		 ИЛИ (Лев(Пок.Ключ, 9) = "П00033000" ИЛИ Лев(Пок.Ключ, 9) = "П00034000")
		 ИЛИ Пок.Ключ = "П000800000201"
		 ИЛИ СтрНачинаетсяС(Пок.Ключ, "П00091") Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(ИмяФормы, Пок, ЗначениеПоказателя) Тогда
					Если ИмяЗаполненногоПоказателя = "" Тогда
						ИмяЗаполненногоПоказателя = Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ=");
					КонецЕсли;
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(ИмяФормы, Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Если ИмяЗаполненногоПоказателя = "" Тогда
					ИмяЗаполненногоПоказателя = Пок.Ключ;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ПоказательЗаполнен(ИмяФормы, Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение)
	      И НЕ (СокрЛП(Показатель.Формат) = "N"
		  	  И Показатель.МаксРазмерность = 15
		      И ТипЗнч(Значение) = Тип("Число")
		      И Окр(Значение) = 0);
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовЛицензииНаПользованиеНедрами(ИмяФормы,
																	ПараметрыПроверки,
																	РезультатВыгрузки,
																	СтатусПроверки)
	
	ИмяРаздела = ПараметрыПроверки.ИмяРаздела;
	ПредставлениеРаздела = ПараметрыПроверки.ПредставлениеРаздела;
	ПризнакНалогоплательщика = ПараметрыПроверки.ПризнакНалогоплательщика;
	ДанныеСтраницы = ПараметрыПроверки.ДанныеСтраницы;
	НомерСтраницы = ПараметрыПроверки.НомерСтраницы;
	СерияЛиценции = ПараметрыПроверки.СерияЛиценции;
	НомерЛиценции = ПараметрыПроверки.НомерЛиценции;
	ВидЛиценции = ПараметрыПроверки.ВидЛиценции;
	НомерМесторождения = ПараметрыПроверки.НомерМесторождения;
	
	ДлинаСерЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[СерияЛиценции]));
	Если ДлинаСерЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаСерЛиц <> 3 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаСерЛиц = 0, "", "верно")
			+ " задана серия лицензии на пользование недрами", ИмяРаздела, СерияЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаНомЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[НомерЛиценции]));
	Если ДлинаНомЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаНомЛиц <> 5 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаНомЛиц = 0, "", "верно")
			+ " задан номер лицензии на пользование недрами", ИмяРаздела, НомерЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаВидЛиц = СтрДлина(СокрЛП(ДанныеСтраницы[ВидЛиценции]));
	Если ДлинаВидЛиц > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаВидЛиц <> 2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаВидЛиц = 0, "", "верно")
			+ " задан вид лицензии на пользование недрами", ИмяРаздела, ВидЛиценции, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДлинаНомМест = СтрДлина(СокрЛП(ДанныеСтраницы[НомерМесторождения]));
	Если ДлинаНомМест > 0 ИЛИ ПризнакНалогоплательщика = "4" Тогда
		Если ДлинаНомМест <> 2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки, "На странице "
			+ НомерСтраницы + " раздела " + ПредставлениеРаздела + " не" + ?(ДлинаНомМест = 0, "", "верно")
			+ " задан порядковый номер нового морского месторождения ", ИмяРаздела, НомерМесторождения, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияПоказателяПовторяютсяНаРазличныхЭкземплярахРаздела(ИмяФормы, ДанныеОтчета, Раздел, КодПокзателя)
	
	ДанныеРаздела = ДанныеОтчета[Раздел];
	ЗначенияПоказателя = Новый Массив;
	Для Каждого Стр Из ДанныеРаздела Цикл
				
		Если ТипЗнч(Стр.Данные) = Тип("Структура") Тогда
			ЗначениеПоказателя = Стр.Данные[КодПокзателя];
		Иначе
			ЗначениеПоказателя = Стр.Данные[0].Значение[КодПокзателя];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Если ЗначенияПоказателя.Найти(ЗначениеПоказателя) <> Неопределено Тогда
				Возврат Истина;
			Иначе
				ЗначенияПоказателя.Добавить(ЗначениеПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ) Экспорт
	
	Если СоответствиеОКАТОСубъектамРФ = Неопределено Тогда
		
		СоответствиеОКАТОСубъектамРФ = Новый ТаблицаЗначений;
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("КодСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("НазваниеСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("МаскаОКАТО");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("ДлинаМаски");
		
	КонецЕсли;	
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2016Кв4") Тогда
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2016Кв4");
	КонецЕсли;
	
	ОбластьДанных = МакетСоставаПоказателей.Области.ОКАТОПоСубъектам;
	
	ВерхОбласти = ОбластьДанных.Верх;
	НизОбласти = ОбластьДанных.Низ;
	
	Для НомСтр = ВерхОбласти По НизОбласти Цикл
		
		КодСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
		НазваниеСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		МаскаОКАТО = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
		
		Если НЕ ПустаяСтрока(КодСубъекта) И НЕ ПустаяСтрока(МаскаОКАТО) Тогда
			НоваяСтрока = СоответствиеОКАТОСубъектамРФ.Добавить();
			НоваяСтрока.КодСубъекта = КодСубъекта;
			НоваяСтрока.НазваниеСубъекта = НазваниеСубъекта;
			НоваяСтрока.МаскаОКАТО = МаскаОКАТО;
			
			НоваяСтрока.ДлинаМаски = СтрДлина(НоваяСтрока.МаскаОКАТО);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОКАТОСубъектамРФ.Сортировать("ДлинаМаски Убыв, МаскаОКАТО");
	
КонецПроцедуры

Функция СтрокаЧГ0(ИмяФормы, ИсходноеЧисло) Экспорт
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=");
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел_2016Кв4(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаконСубъектаРФ_Представление(ИмяФормы, Данные, Знач ИменаПоказателей)
	
	Результат = "";
	
	ИменаПоказателей = СтрРазделить(ИменаПоказателей, ",", Ложь);
	Для каждого ИмяПоказателя Из ИменаПоказателей Цикл
		Результат = Результат + "/" + СокрЛП(Данные[ИмяПоказателя]);
	КонецЦикла;
	Результат = Сред(Результат, 2);
	
	Возврат ?(СтрДлина(Результат) = 30, Результат, "");
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ОтчетЗаКвартал = (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
	
	ОтчетЗаГод = ОтчетныйМесяц = 12;
	
	НалПУ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалПУ");
	
	// Подраздел 1.1 (единственная страница, имеющая 1 многострочную часть).
	//
	НалПУАв = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалПУ, "НалПУАв");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		УдалитьУзелПодраздела1_1 = СтрРазделить("229,231,238", ",", Ложь).Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		УдалитьУзелПодраздела1_1 = СтрРазделить("229,231", ",", Ложь).Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено;
		
	Иначе// "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		УдалитьУзелПодраздела1_1 = СтрРазделить("229,231,235", ",", Ложь).Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено;
		
	Конецесли;
	
	Если УдалитьУзелПодраздела1_1 Тогда
		
		// Удаление узла Подраздела 1.1 по условию.
		//
		РегламентированнаяОтчетность.УдалитьУзел(НалПУАв);
		
	Иначе
		
		Ветка = ДанныеМногоуровневыхРазделов["Раздел1_1"].Строки[0];
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаМнЧ.Данные);
			Данные.Вставить("П10011М104003", Окр(СтрокаМнЧ.Данные["П00011М104003"]) - Окр(СтрокаМнЧ.Данные["П00011М105003"]));
			Данные.Вставить("П10011М107003", Окр(СтрокаМнЧ.Данные["П00011М107003"]) - Окр(СтрокаМнЧ.Данные["П00011М108003"]));
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Данные, СкопироватьУзел(ИмяФормы, НалПУ, НалПУАв));
		КонецЦикла;
		
	КонецЕсли;
	
	// Подраздел 1.2 (единственная страница, имеющая 1 многострочную часть).
	//
	НалПУМес = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалПУ, "НалПУМес");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		УдалитьУзелПодраздела1_2 = СтрРазделить("231,238", ",", Ложь).Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено
			ИЛИ СтрРазделить("34,46,50", ",", Ложь).Найти(ПараметрыВыгрузки.Период) <> Неопределено;
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		УдалитьУзелПодраздела1_2 = ПараметрыВыгрузки.ПоМесту = "231"
			ИЛИ СтрРазделить("34,46,50,68", ",", Ложь).Найти(ПараметрыВыгрузки.Период) <> Неопределено;
		
	КонецЕсли;
	
	Если УдалитьУзелПодраздела1_2 Тогда
		
		// Удаление узла Подраздела 1.2 по условию.
		//
		РегламентированнаяОтчетность.УдалитьУзел(НалПУМес);
		
	Иначе
		
		Ветка = ДанныеМногоуровневыхРазделов["Раздел1_2"].Строки[0];
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, НалПУ, НалПУМес));
		КонецЦикла;
		
	КонецЕсли;
	
	// Подраздел 1.3.
	//
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		// Единственная страница, имеющая 1 многострочную часть.
		НалПУПроц = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалПУ, "НалПУПроц");
		Ветка = ДанныеМногоуровневыхРазделов["Раздел1_3"].Строки[0];
		
		Для каждого Эл Из НалПУПроц.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		УплСрок = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалПУПроц, "УплСрок");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, НалПУПроц, УплСрок));
		КонецЦикла;
		
	Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
		
		// Единственная страница, имеющая 1 двухуровневую многострочную часть.
		НалПУПроц = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалПУ, "НалПУПроц");
		Ветка = ДанныеМногоуровневыхРазделов["Раздел1_3"].Строки[0];
		
		// Многострочные данные первого уровня.
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			ЭкзНалПУПроц = СкопироватьУзел(ИмяФормы, НалПУ, НалПУПроц);
			
			Для каждого Эл Из ЭкзНалПУПроц.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Многострочные данные второго (подчиненного первому) уровня.
			УплСрок = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзНалПУПроц, "УплСрок");
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР13М2];
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаПодчМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзНалПУПроц, УплСрок));
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Может выгружаться либо Лист 02, либо Приложение 5 к Листу 02.
	//
	Если ПараметрыВыгрузки.ПоМесту = "231" Тогда
		
		// Удаление узлов Листа 02 и Приложения 5 к Листу 02 по условию.
		//
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНал"));
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РаспрНалСубРФ"));
		
	ИначеЕсли СтрРазделить("220,223", ",", Ложь).Найти(ПараметрыВыгрузки.ПоМесту) <> Неопределено Тогда
		
		// Удаление узла Листа 02 по условию.
		//
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНал"));
		
		// Приложение 5 к Листу 02 (многостраничный раздел в составе многостраничного, иерархического раздела Лист 02).
		// Выгружается отдельно по условию.
		//
		РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РаспрНалСубРФ");
		Дерево_Лист02 = ДанныеМногоуровневыхРазделов["Лист02"];
		Для каждого Ветка_Лист02 Из Дерево_Лист02.Строки Цикл
			
			Ветки_Лист02_5 = Ветка_Лист02.Строки[4];
			Для каждого Ветка_Лист02_5 Из Ветки_Лист02_5.Строки Цикл
				Данные = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_Лист02_5.Данные);
				Данные.Вставить("П100250006103", ЗаконСубъектаРФ_Представление(ИмяФормы, Данные,
					"П000250006103,П000250006104,П000250006105,П000250006106"));
				Данные.Вставить("П100250010003", Окр(Данные["П000250010003"]) - Окр(Данные["П000250011003"]));
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Данные, СкопироватьУзел(ИмяФормы, УзелРодитель, РаспрНалСубРФ));
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		// Удаление узла Приложения 5 к Листу 02 по условию.
		//
		РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РаспрНалСубРФ"));
		
		// Лист 02 (многостраничный, иерархический раздел).
		//
		РасчНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНал");
		Дерево_Лист02 = ДанныеМногоуровневыхРазделов["Лист02"];
		Для каждого Ветка_Лист02 Из Дерево_Лист02.Строки Цикл
			
			// Лист 02.
			//
			ЭкзРасчНал = СкопироватьУзел(ИмяФормы, УзелРодитель, РасчНал);
			
			Данные = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_Лист02.Данные);
			Данные.Вставить("П100020017103", ЗаконСубъектаРФ_Представление(ИмяФормы, Данные,
				"П000020017103,П000020017104,П000020017105,П000020017106"));
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Данные, ЭкзРасчНал);
			
			// Приложение 1 к Листу 02 (единственная страница в составе Листа 02).
			//
			Ветка_Лист02_1 = Ветка_Лист02.Строки[0].Строки[0];
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка_Лист02_1.Данные, ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "ДохРеалВнеРеал"));
			
			// Приложение 2 к Листу 02 (единственная страница в составе Листа 02).
			//
			ВыгружатьЛист02_2 = Истина;
			Ветка_Лист02_2 = Ветка_Лист02.Строки[1].Строки[0];
			Если НЕ ОтчетЗаКвартал И НЕ ЗаполненаСтраницаРаздела(ИмяФормы, Ветка_Лист02_2, "Лист02_2",
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, "ОтчетНеЗаКвартал") Тогда
				ВыгружатьЛист02_2 = Ложь;
			КонецЕсли;
			Если ВыгружатьЛист02_2 Тогда
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_2.Данные, ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "РасхРеалВнеРеал"));
			КонецЕсли;
			
			// Приложение 3 к Листу 02 (единственная страница в составе Листа 02).
			//
			Ветка_Лист02_3 = Ветка_Лист02.Строки[2].Строки[0];
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка_Лист02_3.Данные, ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "РасчРасхОпер"));
			
			// Приложение 4 к Листу 02 (многостраничный раздел в составе Листа 02, имеющий 1 многострочную часть).
			//
			УбытУменНБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "УбытУменНБ");
			
			Ветки_Лист02_4 = Ветка_Лист02.Строки[3];
			Для каждого Ветка_Лист02_4 Из Ветки_Лист02_4.Строки Цикл
				
				// Особая обработка результата автозаполнения.
				Если НЕ ЗначениеЗаполнено(Ветка_Лист02_4.Данные["ПризнакВключения"]) Тогда
					Продолжить;
				КонецЕсли;
				
				ЭкзУбытУменНБ = СкопироватьУзел(ИмяФормы, ЭкзРасчНал, УбытУменНБ);
				
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_4.Данные, ЭкзУбытУменНБ);
				
				ОстУбытНачПерГод = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУбытУменНБ, "ОстУбытНачПерГод");
				
				ДанныеМнЧ = Ветка_Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзУбытУменНБ, ОстУбытНачПерГод));
				КонецЦикла;
				
			КонецЦикла;
			
			// Приложение 5 к Листу 02 (многостраничный раздел в составе Листа 02).
			//
			РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "РаспрНалСубРФ");
			
			Ветки_Лист02_5 = Ветка_Лист02.Строки[4];
			Для каждого Ветка_Лист02_5 Из Ветки_Лист02_5.Строки Цикл
				Данные = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_Лист02_5.Данные);
				Данные.Вставить("П100250006103", ЗаконСубъектаРФ_Представление(ИмяФормы, Данные,
					"П000250006103,П000250006104,П000250006105,П000250006106"));
				Данные.Вставить("П100250010003", Окр(Данные["П000250010003"]) - Окр(Данные["П000250011003"]));
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Данные, СкопироватьУзел(ИмяФормы, ЭкзРасчНал, РаспрНалСубРФ));
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
		
				// Приложение 6 к Листу 02 (многостраничный, иерархический раздел в составе Листа 02).
				//
				РасчНалГруп = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "РасчНалГруп");
				
				Ветки_Лист02_6 = Ветка_Лист02.Строки[5];
				Для каждого Ветка_Лист02_6 Из Ветки_Лист02_6.Строки Цикл
					
					ЭкзРасчНалГруп = СкопироватьУзел(ИмяФормы, ЭкзРасчНал, РасчНалГруп);
					
					Данные = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_Лист02_6.Данные);
					Данные.Вставить("П100260010003", Окр(Данные["П000260010003"]) - Окр(Данные["П000260011003"]));
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Данные, ЭкзРасчНалГруп);
					
					// Приложение 6а к Листу 02 (многостраничный раздел в составе Приложения 6 к Листу 02).
					//
					РасчНалУчГруп = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНалГруп, "РасчНалУчГруп");
					
					Ветки_Лист02_6а = Ветка_Лист02_6.Строки[0];
					Для каждого Ветка_Лист02_6а Из Ветки_Лист02_6а.Строки Цикл
						Данные = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_Лист02_6а.Данные);
						Данные.Вставить("П1026а0006103", ЗаконСубъектаРФ_Представление(ИмяФормы, Данные,
							"П0026а0006103,П0026а0006104,П0026а0006105,П0026а0006106"));
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						Данные, СкопироватьУзел(ИмяФормы, ЭкзРасчНалГруп, РасчНалУчГруп));
					КонецЦикла;
					
				КонецЦикла;
				
				// Приложение 6б к Листу 02 (данные 2-х разделов: Раздел А и Раздел Б).
				//
				ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "ДохРасхУчГрупНБ");
				
				// Приложение 6б к Листу 02. Раздел А (единственная страница в составе Листа 02).
				//
				Ветка_Лист02_6бА = Ветка_Лист02.Строки[6].Строки[0];
				СумНБУчастКГН = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохРасхУчГрупНБ, "СумНБУчастКГН");
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_6бА.Данные, СумНБУчастКГН);
				
				Если Окр(Ветка_Лист02_6бА.Данные["П0026б0001003"]) = 0 И Окр(Ветка_Лист02_6бА.Данные["П0026б0002003"]) = 0 Тогда
					ОбщКонсНБКГН = ПолучитьПодчиненныйЭлемент(ИмяФормы, СумНБУчастКГН, "ОбщКонсНБКГН");
					СумНБУчГр = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОбщКонсНБКГН, "СумНБУчГр");
					СумНБУчГр.Обязательность = "О";
				КонецЕсли;
				
				Если Окр(Ветка_Лист02_6бА.Данные["П0026б0011003"]) = 0 И Окр(Ветка_Лист02_6бА.Данные["П0026б0012003"]) = 0 Тогда
					КонсНБКГННеОбр = ПолучитьПодчиненныйЭлемент(ИмяФормы, СумНБУчастКГН, "КонсНБКГННеОбр");
					СумНБУчГр = ПолучитьПодчиненныйЭлемент(ИмяФормы, КонсНБКГННеОбр, "СумНБУчГр");
					СумНБУчГр.Обязательность = "О";
				КонецЕсли;
				
				// Приложение 6б к Листу 02. Раздел Б (многостраничный раздел в составе Листа 02).
				//
				ДохРасхУчастКГН = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохРасхУчГрупНБ, "ДохРасхУчастКГН");
				
				Ветки_Лист02_6бБ = Ветка_Лист02.Строки[7];
				Для каждого Ветка_Лист02_6бБ Из Ветки_Лист02_6бБ.Строки Цикл
					
					ЭкзДохРасхУчастКГН = СкопироватьУзел(ИмяФормы, ДохРасхУчГрупНБ, ДохРасхУчастКГН);
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					Ветка_Лист02_6бБ.Данные, ЭкзДохРасхУчастКГН);
					
					Если Окр(Ветка_Лист02_6бБ.Данные["П0026б0027003"]) = 0 И Окр(Ветка_Лист02_6бБ.Данные["П0026б0028503"]) = 0 Тогда
						РасчОбщНБУчКГН = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхУчастКГН, "РасчОбщНБУчКГН");
						УбытУчаст = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчОбщНБУчКГН, "УбытУчаст");
						УбытУчаст.Обязательность = "О";
					КонецЕсли;
					
					Если Окр(Ветка_Лист02_6бБ.Данные["П0026б0031003"]) = 0 И Окр(Ветка_Лист02_6бБ.Данные["П0026б0032003"]) = 0 Тогда
						РасчНБУчКГННеОбр = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхУчастКГН, "РасчНБУчКГННеОбр");
						НалБазУчаст = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчНБУчКГННеОбр, "НалБазУчаст");
						НалБазУчаст.Обязательность = "О";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Приложение 7 к Листу 02 (данные 4-х разделов: Разделы А - Г).
			//
			ИнвНалВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчНал, "ИнвНалВыч");
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				Индекс_Лист02_7А = 5;
				Индекс_Лист02_7Б = 6;
				Индекс_Лист02_7В = 7;
				Индекс_Лист02_7Г = 8;
				Индекс_Лист02_7Д = 9;
				
			Иначе// "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
				
				Индекс_Лист02_7А = 8;
				Индекс_Лист02_7Б = 9;
				Индекс_Лист02_7В = 10;
				Индекс_Лист02_7Г = 11;
				
			КонецЕсли;
			
			// Приложение 7 к Листу 02. Раздел А (многостраничный раздел в составе Листа 02, имеющий 3 многострочные части).
			//
			РасчИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "РасчИнвВыч");
			
			Ветки_Лист02_7А = Ветка_Лист02.Строки[Индекс_Лист02_7А];
			Для каждого Ветка_Лист02_7А Из Ветки_Лист02_7А.Строки Цикл
				
				ЭкзРасчИнвВыч = СкопироватьУзел(ИмяФормы, ИнвНалВыч, РасчИнвВыч);
				
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_7А.Данные, ЭкзРасчИнвВыч);
				
				ОстИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчИнвВыч, "ОстИнвВыч");
				ОстИнвВычРасх = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОстИнвВыч, "ОстИнвВычРасх");
				ДанныеМнЧ = Ветка_Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОстИнвВыч, ОстИнвВычРасх));
				КонецЦикла;
				
				СумИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчИнвВыч, "СумИнвВыч");
				СумИнвВычРасх = ПолучитьПодчиненныйЭлемент(ИмяФормы, СумИнвВыч, "СумИнвВычРасх");
				ДанныеМнЧ = Ветка_Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, СумИнвВыч, СумИнвВычРасх));
				КонецЦикла;
				
				НеучИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзРасчИнвВыч, "НеучИнвВыч");
				НеучИнвВычРасх = ПолучитьПодчиненныйЭлемент(ИмяФормы, НеучИнвВыч, "НеучИнвВычРасх");
				ДанныеМнЧ = Ветка_Лист02_7А.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, НеучИнвВыч, НеучИнвВычРасх));
				КонецЦикла;
				
			КонецЦикла;
			
			// Приложение 7 к Листу 02. Раздел Б.
			// Единственная страница в составе Листа 02 ("ФормаОтчета2025Кв1").
			// Многостраничный раздел в составе Листа 02 ("ФормаОтчета2022Кв4",
			// "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4").
			//
			ПредВелИнвНеОб = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "ПредВелИнвНеОб");
			
			Ветки_Лист02_7Б = Ветка_Лист02.Строки[Индекс_Лист02_7Б];
			Для каждого Ветка_Лист02_7Б Из Ветки_Лист02_7Б.Строки Цикл
				ЭкзПредВелИнвНеОб = СкопироватьУзел(ИмяФормы, ИнвНалВыч, ПредВелИнвНеОб);
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_7Б.Данные, ЭкзПредВелИнвНеОб);
				Если ЗначениеЗаполнено(Ветка_Лист02_7Б.Данные["ПризнакВключения"]) Тогда
					ЭкзПредВелИнвНеОб.Обязательность = "О";
				КонецЕсли;
			КонецЦикла;
			
			// Приложение 7 к Листу 02. Раздел В (многостраничный раздел в составе Листа 02).
			//
			ПредВелИнвОб = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "ПредВелИнвОб");
			
			Ветки_Лист02_7В = Ветка_Лист02.Строки[Индекс_Лист02_7В];
			Для каждого Ветка_Лист02_7В Из Ветки_Лист02_7В.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_7В.Данные, СкопироватьУзел(ИмяФормы, ИнвНалВыч, ПредВелИнвОб));
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
				
				// Приложение 7 к Листу 02. Раздел Г (многостраничный раздел в составе Листа 02, имеющий 2 многострочные части).
				//
				УмСумИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "УмСумИнвВыч");
				
				Ветки_Лист02_7Г = Ветка_Лист02.Строки[Индекс_Лист02_7Г];
				Для каждого Ветка_Лист02_7Г Из Ветки_Лист02_7Г.Строки Цикл
					
					ЭкзУмСумИнвВыч = СкопироватьУзел(ИмяФормы, ИнвНалВыч, УмСумИнвВыч);
					
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					Ветка_Лист02_7Г.Данные, ЭкзУмСумИнвВыч);
					
					ОстСумУм = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУмСумИнвВыч, "ОстСумУм");
					ОстСумУмРасх = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОстСумУм, "ОстСумУмРасх");
					ДанныеМнЧ = Ветка_Лист02_7Г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1];
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОстСумУм, ОстСумУмРасх));
					КонецЦикла;
					
					ОстНеучИнв = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзУмСумИнвВыч, "ОстНеучИнв");
					ОстНеучИнвРасх = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОстНеучИнв, "ОстНеучИнвРасх");
					ДанныеМнЧ = Ветка_Лист02_7Г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2];
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОстНеучИнв, ОстНеучИнвРасх));
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе//"ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4"
				
				// Приложение 7 к Листу 02. Раздел Г (многостраничный раздел в составе Листа 02).
				//
				УмСумИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "УмСумИнвВыч");
				
				Ветки_Лист02_7Г = Ветка_Лист02.Строки[Индекс_Лист02_7Г];
				Для каждого Ветка_Лист02_7Г Из Ветки_Лист02_7Г.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					Ветка_Лист02_7Г.Данные, СкопироватьУзел(ИмяФормы, ИнвНалВыч, УмСумИнвВыч));
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				// Приложение 7 к Листу 02. Раздел Д (единственная страница в составе Листа 02, имеющая 2 многострочные части).
				//
				ФедИнвВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ИнвНалВыч, "ФедИнвВыч");
				
				Ветка_Лист02_7Д = Ветка_Лист02.Строки[Индекс_Лист02_7Д].Строки[0];
				
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка_Лист02_7Д.Данные, ФедИнвВыч);
				
				СумНеиспВычПер = ПолучитьПодчиненныйЭлемент(ИмяФормы, ФедИнвВыч, "СумНеиспВычПер");
				СумНеиспВычГод = ПолучитьПодчиненныйЭлемент(ИмяФормы, СумНеиспВычПер, "СумНеиспВычГод");
				ДанныеМнЧ = Ветка_Лист02_7Д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, СумНеиспВычПер, СумНеиспВычГод));
				КонецЦикла;
				
				ОстНеиспВычПер = ПолучитьПодчиненныйЭлемент(ИмяФормы, ФедИнвВыч, "ОстНеиспВычПер");
				ОстНеиспВычГод = ПолучитьПодчиненныйЭлемент(ИмяФормы, ОстНеиспВычПер, "ОстНеиспВычГод");
				ДанныеМнЧ = Ветка_Лист02_7Д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ОстНеиспВычПер, ОстНеиспВычГод));
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Лист 03 (данные 2-х разделов: Раздел А и Раздел Б).
	//
	НалУдНА = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалУдНА");
	
	// Лист 03. Раздел А (многостраничный раздел, имеющий 1 многострочную часть - Раздел В).
	//
	НалДохДив = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалУдНА, "НалДохДив");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист03А"];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзНалДохДив = СкопироватьУзел(ИмяФормы, НалУдНА, НалДохДив);
		
		Для каждого Эл Из ЭкзНалДохДив.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
			ИначеЕсли Эл.Код <> "РеестрСумДив" Тогда
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные, Эл);
			КонецЕсли;
		КонецЦикла;
		
		РеестрСумДив = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзНалДохДив, "РеестрСумДив");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			Если ЗаполненаСтрокаМногострочнойЧасти(
				ИмяФормы, СтрокаМнЧ, "Лист03А", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
				
				ЭкзРеестрСумДив = СкопироватьУзел(ИмяФормы, ЭкзНалДохДив, РеестрСумДив);
				
				Для каждого Эл Из ЭкзРеестрСумДив.Строки Цикл
					Если Эл.Код = "ПрПринадл" И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
						ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")) Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, "А");
					ИначеЕсли Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
					Иначе
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, СтрокаМнЧ.Данные, Эл);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Лист 03. Раздел Б.
	// Многостраничный раздел ("ФормаОтчета2025Кв1").
	// Многостраничный раздел, имеющий 1 многострочную часть - Раздел В
	// ("ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4", "ФормаОтчета2019Кв4").
	//
	НалДохЦБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалУдНА, "НалДохЦБ");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист03Б"];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзНалДохЦБ = СкопироватьУзел(ИмяФормы, НалУдНА, НалДохЦБ);
		
		Для каждого Эл Из ЭкзНалДохЦБ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
			ИначеЕсли (Эл.Код <> "РеестрСумДив")
				И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4")) Тогда
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные, Эл);
			КонецЕсли;
		КонецЦикла;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2019Кв4") Тогда
			
			РеестрСумДив = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзНалДохЦБ, "РеестрСумДив");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				Если ЗаполненаСтрокаМногострочнойЧасти(
					ИмяФормы, СтрокаМнЧ, "Лист03Б", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
					
					ЭкзРеестрСумДив = СкопироватьУзел(ИмяФормы, ЭкзНалДохЦБ, РеестрСумДив);
					
					Для каждого Эл Из ЭкзРеестрСумДив.Строки Цикл
						Если Эл.Код = "ПрПринадл" Тогда
							ВывестиПоказательВXML(ИмяФормы, Эл, "Б");
						ИначеЕсли Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
						Иначе
							ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, СтрокаМнЧ.Данные, Эл);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Лист 04 (многостраничный раздел).
	//
	НалДохСтав = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалДохСтав");
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист04"];
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		Ветка.Данные, СкопироватьУзел(ИмяФормы, УзелРодитель, НалДохСтав));
	КонецЦикла;
	
	// Лист 05 (многостраничный раздел).
	//
	НалБазОпОсобН = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "НалБазОпОсобН");
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист05"];
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		Ветка.Данные, СкопироватьУзел(ИмяФормы, УзелРодитель, НалБазОпОсобН));
	КонецЦикла;
	
	// Лист 06 (единственная страница).
	//
	ДохРасНалБазаНПФ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасНалБазаНПФ");
	Ветка = ДанныеМногоуровневыхРазделов["Лист06"].Строки[0];
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
	Ветка.Данные, ДохРасНалБазаНПФ);
	Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
		ДохРасНалБазаНПФ.Обязательность = "О";
	КонецЕсли;
	
	// Лист 07 (единственная страница, имеющая 1 многострочную часть).
	//
	ЦелИспИмущ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ЦелИспИмущ");
	Ветка = ДанныеМногоуровневыхРазделов["Лист07"].Строки[0];
	Для каждого Эл Из ЦелИспИмущ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	СвЦелСред07 = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЦелИспИмущ, "СвЦелСред07");
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ07М1];
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЦелИспИмущ, СвЦелСред07));
	КонецЦикла;
	
	// Лист 08 (многостраничный раздел, имеющий 2 многострочные части).
	//
	ДохРасхКор = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасхКор");
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист08"];
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзДохРасхКор = СкопироватьУзел(ИмяФормы, УзелРодитель, ДохРасхКор);
		
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		Ветка.Данные, ЭкзДохРасхКор);
		
		ОснСделКонтр = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "ОснСделКонтр");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			Эл = СкопироватьУзел(ИмяФормы, ЭкзДохРасхКор, ОснСделКонтр);
			ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
		КонецЦикла;
		
		СведСделКор = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "СведСделКор");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М2];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзДохРасхКор, СведСделКор));
		КонецЦикла;
		
		ВидКонтрагента = СокрЛП(Ветка.Данные["П000080000701"]);
		Если ВидКонтрагента = "Индивидуальный предприниматель" ИЛИ ВидКонтрагента = "Российский гражданин"
			ИЛИ ВидКонтрагента = "Иностранный гражданин или лицо без гражданства" Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "Орг_Контрагент"));
		ИначеЕсли ВидКонтрагента = "Российская организация" ИЛИ ВидКонтрагента = "Иностранная организация" Тогда
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "ФЛ_Контрагент"));
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "Орг_Контрагент"));
			РегламентированнаяОтчетность.УдалитьУзел(ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхКор, "ФЛ_Контрагент"));
		КонецЕсли;
		
	КонецЦикла;
	
	// Лист 09 (многостраничный раздел, имеющий 1 многострочную часть).
	//
	РасчНалКИК = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "РасчНалКИК");
	СведКИК = ПолучитьПодчиненныйЭлемент(ИмяФормы, РасчНалКИК, "СведКИК");
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист09"];
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзСведКИК = СкопироватьУзел(ИмяФормы, РасчНалКИК, СведКИК);
		
		Для каждого Эл Из ЭкзСведКИК.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
			ИначеЕсли Эл.Код <> "РасчУбытУмНБ" Тогда
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Ветка.Данные, Эл);
			КонецЕсли;
		КонецЦикла;
		
		РасчУбытУмНБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведКИК, "РасчУбытУмНБ");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзСведКИК, РасчУбытУмНБ));
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 1 (единственная страница, имеющая 1 многострочную часть).
	//
	ДохНеУч_РасхУч = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохНеУч_РасхУч");
	ДохРасхКод = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохНеУч_РасхУч, "ДохРасхКод");
	Ветка = ДанныеМногоуровневыхРазделов["Приложение1"].Строки[0];
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ДохНеУч_РасхУч, ДохРасхКод));
	КонецЦикла;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
		ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
		
		// Приложение 2 (многостраничный раздел, имеющий 1 многострочную часть).
		//
		ДохРасхСоглНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасхСоглНал");
		ДеревоРаздела = ДанныеМногоуровневыхРазделов["Приложение2"];
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			ЭкзДохРасхСоглНал = СкопироватьУзел(ИмяФормы, УзелРодитель, ДохРасхСоглНал, УзелРодитель.Строки.Количество() - 1);
			
			ДохРасхСоглНалЦел = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхСоглНал, "ДохРасхСоглНалЦел");
			
			Если Окр(Ветка.Данные["П000П20006003"]) = 0 И Окр(Ветка.Данные["П000П20010003"]) = 0 Тогда
				НалБаза = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохРасхСоглНалЦел, "НалБаза");
				НалБаза.Обязательность = "О";
			КонецЕсли;
			
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Данные, ДохРасхСоглНалЦел);
			
			ДохРасхСоглНалСуб = ПолучитьПодчиненныйЭлемент(ИмяФормы, ДохРасхСоглНалЦел, "ДохРасхСоглНалСуб");
			
			// Раздел Б Приложения 2 должен выгружаться только при значении "00" кода субъекта РФ в Разделе А.
			//
			Если СокрЛП(Ветка.Данные["П000П20000000"]) <> "00" Тогда
				
				// Удаление узла Раздела Б Приложения 2 по условию.
				//
				РегламентированнаяОтчетность.УдалитьУзел(ДохРасхСоглНалСуб);
				
			Иначе
				
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, СтрокаМнЧ.Данные,
					СкопироватьУзел(ИмяФормы, ДохРасхСоглНалЦел, ДохРасхСоглНалСуб, ДохРасхСоглНалЦел.Строки.Количество() - 1));
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
		
		// Приложение 2 (многостраничный раздел).
		//
		ДохРасхСоглНал = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "ДохРасхСоглНал");
		ДеревоРаздела = ДанныеМногоуровневыхРазделов["Приложение2"];
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			ЭкзДохРасхСоглНал = СкопироватьУзел(ИмяФормы, УзелРодитель, ДохРасхСоглНал, УзелРодитель.Строки.Количество() - 1);
			
			Если Окр(Ветка.Данные["П000П20006003"]) = 0 И Окр(Ветка.Данные["П000П20010003"]) = 0 Тогда
				НалБаза = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзДохРасхСоглНал, "НалБаза");
				НалБаза.Обязательность = "О";
			КонецЕсли;
			
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Данные, ЭкзДохРасхСоглНал);
			
		КонецЦикла;
		
	Иначе//"ФормаОтчета2019Кв4"
		
		// Приложение 2 (многостраничный раздел, имеющий 2 многострочные части; первая многострочная часть - двухуровневая).
		//
		СведДохФЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СведДохФЛ");
		
		ДеревоРаздела = ДанныеМногоуровневыхРазделов["Приложение2"];
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			ЭкзСведДохФЛ = СкопироватьУзел(ИмяФормы, УзелРодитель, СведДохФЛ, УзелРодитель.Строки.Количество() - 1);
			
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Данные, ЭкзСведДохФЛ);
			
			Если Ветка.Данные["П000П20000003"] <> "99" Тогда
				ДохНалПер = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДохФЛ, "ДохНалПер");
				ДохНалПер.Обязательность = "О";
			КонецЕсли;
			
			СпрДохФЛ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДохФЛ, "СпрДохФЛ");
			СумДох = ПолучитьПодчиненныйЭлемент(ИмяФормы, СпрДохФЛ, "СумДох");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ЭкзСумДох = СкопироватьУзел(ИмяФормы, СпрДохФЛ, СумДох, СпрДохФЛ.Строки.Количество() - 1);
				
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМнЧ.Данные, ЭкзСумДох);
				
				СумВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСумДох, "СумВыч");
				
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаПодчМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЭкзСумДох, СумВыч, ЭкзСумДох.Строки.Количество() - 1));
				КонецЦикла;
				
			КонецЦикла;
			
			НалВычСтанд = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДохФЛ, "НалВычСтанд");
			СумВыч = ПолучитьПодчиненныйЭлемент(ИмяФормы, НалВычСтанд, "СумВыч");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, НалВычСтанд, СумВыч, НалВычСтанд.Строки.Количество() - 1));
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист02(ИмяФормы,
										   ПараметрыВыгрузки,
										   УзелРодитель,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы)
	
	КодПоМесту = ДанныеОтчета.Титульный.ПоМесту;
	ПредставлениеЗаОП = (КодПоМесту = "220" ИЛИ КодПоМесту = "223");
	
	НомерМесяца = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	КвартальнаяОтчетность = (НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9 ИЛИ НомерМесяца = 12);
	
	Если ПредставлениеЗаОП Тогда
		// Приложение 5 к листу 02 выгружается самостоятельно.
		Узел_РасчНал = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "РасчНал");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РасчНал);
		
		Лист02_5 = ДанныеОтчета.Лист02_5;
		ПрототипУзла_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "РаспрНалСубРФ");
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РаспрНалСубРФ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РаспрНалСубРФ);
		
	Иначе
		
		СоответствиеОКАТОСубъектамРФ = Неопределено;
				
		ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ);
		
		Узел_РаспрНалСубРФ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "РаспрНалСубРФ");
		РегламентированнаяОтчетность.УдалитьУзел(Узел_РаспрНалСубРФ);
		
		УзлыЛиста02 = Новый Соответствие;
		
		Лист02 = ДанныеОтчета.Лист02;
		ПрототипУзла_РасчНал = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "РасчНал");
		Для Каждого СтраницаРаздела Из Лист02 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			Узел_РасчНал = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_РасчНал);
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000200000100);
			УзелИПрототипы = Новый Структура;
			УзелИПрототипы.Вставить("РасчНал", Узел_РасчНал);
			УзелИПрототипы.Вставить("ДохРеалВнеРеал",  ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "ДохРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасхРеалВнеРеал", ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "РасхРеалВнеРеал"));
			УзелИПрототипы.Вставить("РасчРасхОпер",    ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "РасчРасхОпер"));
			УзелИПрототипы.Вставить("УбытУменНБ",      ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "УбытУменНБ"));
			УзелИПрототипы.Вставить("РаспрНалСубРФ",   ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "РаспрНалСубРФ"));
			УзелИПрототипы.Вставить("РасчНалГруп",     ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "РасчНалГруп"));
			УзлыЛиста02.Вставить(ТипНалогоплательщика, УзелИПрототипы);
			
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РасчНал, ДанныеОтчета, СтруктураРеквизитовФормы);
			
			// Приложение 6б к Листу 02.
			// Заполняется автоматическии по всем листам 02, поэтому надо удалить лишние.
			Если УзлыЛиста02.Количество() > 1 Тогда
				Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНал, "ДохРасхУчГрупНБ");
				РегламентированнаяОтчетность.УдалитьУзел(Узел_ДохРасхУчГрупНБ);
			КонецЕсли;
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_РасчНал);
		
		Лист02_1 = ДанныеОтчета.Лист02_1;
		Для Каждого СтраницаРаздела Из Лист02_1 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000210000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_ДохРеалВнеРеал = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.ДохРеалВнеРеал);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ДохРеалВнеРеал, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_2 = ДанныеОтчета.Лист02_2;
		Для Каждого СтраницаРаздела Из Лист02_2 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000220000100);
			
			Если НЕ КвартальнаяОтчетность Тогда
				
				РазделЗаполненПоУсловию = Ложь;
				ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220000100");
				ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000220040003");
				
				Для каждого Пок Из ДанныеРаздела Цикл
					Если ЗначениеЗаполнено(Пок.Значение)
						И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
						РазделЗаполненПоУсловию = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ РазделЗаполненПоУсловию
					И ЗначениеЗаполнено(ТипНалогоплательщика) И ЗначениеЗаполнено(ДанныеРаздела.П000220040003) Тогда
					// В случае отчетности не за квартал, если на странице Приложения № 2 к Листу 02
					// заполнены только признак налогоплательщика и строка 400, такая страница не выгружается.
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасхРеалВнеРеал = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасхРеалВнеРеал);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РасхРеалВнеРеал, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_3 = ДанныеОтчета.Лист02_3;
		Для Каждого СтраницаРаздела Из Лист02_3 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000230000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчРасхОпер = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасчРасхОпер);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РасчРасхОпер, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		ДанныеРазделовЛиста02_4_ТН5 = Новый Массив;
		УзлыЛиста02Копия = Новый Соответствие(Новый ФиксированноеСоответствие(УзлыЛиста02));
		Лист02_4 = ДанныеОтчета.Лист02_4;
		Для Каждого СтраницаРаздела Из Лист02_4 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000240000100);
			Если ТипНалогоплательщика = "5" Тогда
				УзелИПрототипы = Неопределено;
				ДанныеРазделовЛиста02_4_ТН5.Добавить(ДанныеРаздела);
			Иначе
				УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			КонецЕсли;
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_УбытУменНБ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.УбытУменНБ);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_УбытУменНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		Для Каждого ДанныеРаздела Из ДанныеРазделовЛиста02_4_ТН5 Цикл
			КлючНайденногоЭлемента = Неопределено;
			
			Для КодТН = 1 По 4 Цикл
				Если КодТН = 2 Тогда
					Продолжить;
				КонецЕсли;
				КлючНайденногоЭлемента = Формат(КодТН, "ЧГ=");
				УзелИПрототипы = УзлыЛиста02Копия.Получить(КлючНайденногоЭлемента);
				Если УзелИПрототипы <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_УбытУменНБ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.УбытУменНБ);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_УбытУменНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
			УзлыЛиста02Копия.Удалить(КлючНайденногоЭлемента);
		КонецЦикла;
		
		Лист02_5 = ДанныеОтчета.Лист02_5;
		Для Каждого СтраницаРаздела Из Лист02_5 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ТипНалогоплательщика = СокрЛП(ДанныеРаздела.П000250000100);
			УзелИПрототипы = УзлыЛиста02.Получить(ТипНалогоплательщика);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РаспрНалСубРФ = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РаспрНалСубРФ);
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РаспрНалСубРФ, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		УзлыЛиста02_6 = Новый Соответствие;
		Лист02_6 = ДанныеОтчета.Лист02_6;
		Для Каждого СтраницаРаздела из Лист02_6 Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			КодСубъектаРФ = СокрЛП(ДанныеРаздела.П000260000601);
			
			УзелИПрототипы = ПервыйЭлементСоответствия(ИмяФормы, УзлыЛиста02);
			Если УзелИПрототипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Узел_РасчНалГруп = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипы.РасчНалГруп);
			УзелИПрототипыЛиста02_6 = Новый Структура;
			УзелИПрототипыЛиста02_6.Вставить("РасчНалГруп", Узел_РасчНалГруп);
			УзелИПрототипыЛиста02_6.Вставить("РасчНалУчГруп",
				ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_РасчНалГруп, "РасчНалУчГруп"));
			УзлыЛиста02_6.Вставить(КодСубъектаРФ, УзелИПрототипыЛиста02_6);
			
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_РасчНалГруп, ДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЦикла;
		
		Лист02_6а = ДанныеОтчета.Лист02_6а;
		Для Каждого СтраницаРаздела из Лист02_6а Цикл
			Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
				ДанныеРаздела = СтраницаРаздела.Данные;
			Иначе
				ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
			КонецЕсли;
			
			ОКТМО = СокрЛП(ДанныеРаздела.П000270000301);
			КодСубъектаРФ = РегламентированнаяОтчетностьКлиентСервер.КодСубъектаРФПоОКТМО(
				СоответствиеОКАТОСубъектамРФ, ОКТМО);
			
			УзелИПрототипыЛиста02_6 = УзлыЛиста02_6[КодСубъектаРФ];
			Если УзелИПрототипыЛиста02_6 = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйУзел_РасчНалУчГруп = НовыйУзелИзПрототипа(ИмяФормы, УзелИПрототипыЛиста02_6.РасчНалУчГруп);
			
			ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, НовыйУзел_РасчНалУчГруп, ДанныеОтчета, СтруктураРеквизитовФормы);
			
		КонецЦикла;
		
		ДанныеРаздела = ДанныеОтчета.Лист02_6б;
			
		Если УзлыЛиста02.Количество() > 0 Тогда
			
			УзелИПрототипы = ПервыйЭлементСоответствия(ИмяФормы, УзлыЛиста02);
			Узел_ДохРасхУчГрупНБ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелИПрототипы.РасчНал, "ДохРасхУчГрупНБ");
			
			Если Узел_ДохРасхУчГрупНБ <> Неопределено Тогда
				ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ДохРасхУчГрупНБ, ДанныеОтчета, СтруктураРеквизитовФормы);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист03(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Узел_НалУдНА = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "НалУдНА");
	
	Лист03А = ДанныеОтчета.Лист03А;
	ПрототипУзла_НалДохДив = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалУдНА, "НалДохДив");
	Для Каждого СтраницаРаздела Из Лист03А Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохДив = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохДив);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалДохДив, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохДив);
	
	Лист03Б = ДанныеОтчета.Лист03Б;
	ПрототипУзла_НалДохЦБ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалУдНА, "НалДохЦБ");
	Для Каждого СтраницаРаздела Из Лист03Б Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохЦБ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохЦБ);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалДохЦБ, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохЦБ);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист05(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист05 = ДанныеОтчета.Лист05;
	
	ПрототипУзла_НалБазОпОсобН = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "НалБазОпОсобН");
	Для Каждого СтраницаРаздела Из Лист05 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалБазОпОсобН = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалБазОпОсобН);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалБазОпОсобН, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалБазОпОсобН);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист07(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	ДанныеРаздела = ДанныеОтчета.Лист07;
	Узел_ЦелИспИмущ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "ЦелИспИмущ");
	ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ЦелИспИмущ, ДанныеОтчета, СтруктураРеквизитовФормы);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист08(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист08 = ДанныеОтчета.Лист08;
	
	ПрототипУзла_ДохРасхКор = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "ДохРасхКор");
	
	Для Каждого СтраницаРаздела Из Лист08 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_ДохРасхКор = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_ДохРасхКор);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ДохРасхКор, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		ВидКонтрагента = СокрЛП(ДанныеРаздела.П000800000301);
		Если ВидКонтрагента = "Индивидуальный предприниматель"
			ИЛИ ВидКонтрагента = "Физическое лицо" Тогда
			Узлел_Орг_Контрагент = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_ДохРасхКор, "Орг_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_Орг_Контрагент);
		ИначеЕсли ВидКонтрагента = "Российская организация"
			ИЛИ ВидКонтрагента = "Иностранная организация" Тогда
			Узлел_ФЛ_Контрагент = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_ДохРасхКор, "ФЛ_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_ФЛ_Контрагент);
		Иначе
			Узлел_Орг_Контрагент = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_ДохРасхКор, "Орг_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_Орг_Контрагент);
			Узлел_ФЛ_Контрагент = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_ДохРасхКор, "ФЛ_Контрагент");
			РегламентированнаяОтчетность.УдалитьУзел(Узлел_ФЛ_Контрагент);
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ДохРасхКор);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Лист09(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Лист09 = ДанныеОтчета.Лист09;
	
	УзелРасчНалКИК = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "РасчНалКИК");
	ПрототипУзла_СведКИК = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРасчНалКИК, "СведКИК");
	Для Каждого СтраницаРаздела Из Лист09 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_СведКИК = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СведКИК);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_СведКИК, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведКИК);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияВыгрузки_Приложение2(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы)
		
	Приложение2 = ДанныеОтчета.Приложение2;
	ПрототипУзла_СведДохФЛ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "СведДохФЛ");
	Для Каждого СтраницаРаздела Из Приложение2 Цикл

		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;

		Узел_СведДохФЛ = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СведДохФЛ);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_СведДохФЛ, ДанныеОтчета, СтруктураРеквизитовФормы);
		
		Если СокрЛП(ДанныеРаздела.П000020000103) <> "99" Тогда
			Узел_ДохНалПер = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_СведДохФЛ, "ДохНалПер");
			Узел_ДохНалПер.Обязательность = "О";
		КонецЕсли;
		
		// Сведения о доходах и вычетах.
		ДоходыИВычеты = Новый ДеревоЗначений;
		ДоходыИВычеты.Колонки.Добавить("Код");
		ДоходыИВычеты.Колонки.Добавить("Сумма");
		
		ДанныеДопСтрок = СтраницаРаздела.ДанныеДопСтрок;
		
		Для Каждого ДопСтрока Из ДанныеДопСтрок Цикл
			
			Если НЕ ДопСтрока.Ключ = "П0000200040" Тогда
				
				Продолжить;
				
			КонецЕсли;	
			
			Для Каждого СтрокаТЗ Из ДопСтрока.Значение Цикл
				
				КодДохода = СокрЛП(СтрокаТЗ["П000020004001"]);
				СуммаДохода = СтрокаТЗ["П000020004101"];
				
				Если ЗначениеЗаполнено(КодДохода) Тогда
					СтрокаДохода = ДоходыИВычеты.Строки.Найти(КодДохода, "Код");
					Если СтрокаДохода = Неопределено Тогда
						СтрокаДохода = ДоходыИВычеты.Строки.Добавить();
						СтрокаДохода.Код = КодДохода;
						СтрокаДохода.Сумма = СуммаДохода;
					КонецЕсли;
					
					Для Инд = 1 По 5 Цикл
						КодВычета = СокрЛП(СтрокаТЗ["П00002000420" + Инд]);
						СуммаВычета = СтрокаТЗ["П00002000430" + Инд];
						
						Если ЗначениеЗаполнено(КодВычета) Тогда
							СтрокаВычета = СтрокаДохода.Строки.Добавить();
							СтрокаВычета.Код = КодВычета;
							СтрокаВычета.Сумма = СуммаВычета;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Узел_СпрДохФЛ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_СведДохФЛ, "СпрДохФЛ");
		
		ПрототипУзла_СумДох = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_СпрДохФЛ, "СумДох");
		Для Каждого СтрокаДохода Из ДоходыИВычеты.Строки Цикл
			Узел_СумДох = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумДох);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумДох, "КодДоход", СтрокаДохода.Код);
			ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумДох, "СумДоход", СтрокаДохода.Сумма);
			
			ПрототипУзла_СумВыч = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_СумДох, "СумВыч");
			Для Каждого СтрокаВычета Из СтрокаДохода.Строки Цикл
				Узел_СумВыч = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_СумВыч);
				ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумВыч, "КодВычет", СтрокаВычета.Код);
				ЗадатьЗначениеЭлемента(ИмяФормы, Узел_СумВыч, "СумВычет", СтрокаВычета.Сумма);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумВыч);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СумДох);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СведДохФЛ);
	
КонецПроцедуры

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
						  СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
						  ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПервыйЭлементСоответствия(ИмяФормы, ПросматриваемоеСоответствие)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементСоответствия Из ПросматриваемоеСоответствие Цикл
		Результат = ЭлементСоответствия.Значение;
		Прервать;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗадатьЗначениеЭлемента(ИмяФормы, Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML_2016Кв4(ИмяФормы, ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел, КодЭлемента), Значение);
	
КонецПроцедуры

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета_2016Кв4(ИмяФормы,
										СтруктураРеквизитовФормы,
										СохраненныеДанныеОтчета = Неопределено) Экспорт
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы, СохраненныеДанныеОтчета, СтруктураРеквизитовФормы);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.мВерсияФормы <> "01/01/2017"
		   И СохраненныеДанныеОтчета.ВерсияФормы = "01/01/2017" Тогда
			
			// Конвертация в многостраничном разделе Лист 09 немногострочных данных
			// приложения 1 в многострочную часть.
			//
			ИменаГрафМнЧ_Лист09 = Новый Массив;
			ИменаГрафМнЧ_Лист09.Добавить("П000910000101");
			ИменаГрафМнЧ_Лист09.Добавить("П000910000201");
			ИменаГрафМнЧ_Лист09.Добавить("П000910001003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910002003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910003001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910003003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910004001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910004003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910005001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910005003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910006001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910006003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910007001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910007003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910008001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910008003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910009001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910009003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910010001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910010003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910011001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910011003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910012001");
			ИменаГрафМнЧ_Лист09.Добавить("П000910012003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910013003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910014003");
			ИменаГрафМнЧ_Лист09.Добавить("П000910015003");
			
			ТаблицаЛистов09 = СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Лист09;
			
			ТаблицаЛистов09.Колонки.Вставить(3, "ДанныеДопСтрок");
															
			ГруппаЛист09 = РазделыРеглОтчета(ИмяФормы).Лист09.ДанныеДопСтрок.Скопировать();
			
			Для Инд = 0 По ТаблицаЛистов09.Количество() - 1 Цикл
				
				Лист09 = ТаблицаЛистов09[Инд];
				
				ГруппаЛист09.Очистить();
				
				СтрокаГруппыЛист09 = ГруппаЛист09.Добавить();
				
				Для каждого ИмяГрафыМнЧ_Лист09 Из ИменаГрафМнЧ_Лист09 Цикл
					
					СтрокаГруппыЛист09[ИмяГрафыМнЧ_Лист09] = Лист09.Данные[ИмяГрафыМнЧ_Лист09];
					Лист09.Данные.Вставить(ИмяГрафыМнЧ_Лист09 + "_1", Лист09.Данные[ИмяГрафыМнЧ_Лист09]);
					Лист09.Данные.Удалить(ИмяГрафыМнЧ_Лист09);
					
				КонецЦикла;
				
				Лист09.ДанныеДопСтрок = ГруппаЛист09.Скопировать();
				
			КонецЦикла;
			
			СохраненныеДанныеОтчета.ДанныеМногостраничныхРазделов.Вставить("Лист09", ТаблицаЛистов09);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ЗаполнитьДанными_2016Кв4(ИмяФормы,
								   ПараметрыВыгрузки,
								   ДеревоВыгрузки,
								   РезультатВыгрузки,
								   ДанныеОтчета,
								   СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы_2016Кв4(ИмяФормы,
									   ПараметрыВыгрузки,
									   ДеревоВыгрузки,
									   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы,
								 ПараметрыВыгрузки,
								 ДеревоВыгрузки,
								 ДанныеОтчета,
								 СтруктураРеквизитовФормы);
	
	ОтсечьНезаполненныеНеобязательныеУзлы_2016Кв4(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы_2016Кв4(ИмяФормы,
											 Знач ПараметрыВыгрузки,
											 Узел,
											 РезультатВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(
						РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы_2016Кв4(ИмяФормы, ПараметрыВыгрузки, ТекСтр, РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы,
									   ПараметрыВыгрузки,
									   Узел,
									   ДанныеОтчета,
									   СтруктураРеквизитовФормы,
									   НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = ДанныеОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(ИмяФормы, Стр);
					УзелСтраницы.Многостраничность = Ложь;
					
					Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
						ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					Иначе
						ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные[0].Значение);
					КонецЕсли;
					
					ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ВиртуальныеДанные, УзелСтраницы, ДанныеОтчета, СтруктураРеквизитовФормы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					ИначеЕсли ДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел) Тогда
						ДанныеРаздела = ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					Иначе
						ДанныеРаздела = ПараметрыВыгрузки;
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				УдалятьПрототипУзла = Ложь;
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УдалятьПрототипУзла = Истина;
					УзелСтроки = НовыйУзелИзПрототипа(ИмяФормы, Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, УзелСтроки, ДанныеОтчета, СтруктураРеквизитовФормы);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				КонецЦикла;
				
				Если УдалятьПрототипУзла Тогда
					РегламентированнаяОтчетность.УдалитьУзел(Стр);
					КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				КонецЕсли;
				
			Иначе
				Если Стр.Код = "Прибыль" Тогда
					ЗаполнитьСодержательнуюЧасть_2016Кв4(ИмяФормы, ПараметрыВыгрузки, ДанныеОтчета, Стр, СтруктураРеквизитовФормы);
				Иначе
					ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ПараметрыВыгрузки, Стр, ДанныеОтчета, СтруктураРеквизитовФормы);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли Стр.Тип = "П" Тогда
			НомерСтроки = 1;
			Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
			УдалятьПрототипУзла = Ложь;
			
			Пока ПараметрыВыгрузки.Свойство(Стр.Ключ + Постфикс) Цикл
				УдалятьПрототипУзла = Истина;
				
				УзелСтроки = НовыйУзелИзПрототипа(ИмяФормы, Стр);
				ВывестиПоказательВXML_2016Кв4(ИмяФормы, УзелСтроки, ПараметрыВыгрузки[УзелСтроки.Ключ + Постфикс]);
				
				КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				НомерСтроки = НомерСтроки + 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
			КонецЦикла;
			
			Если УдалятьПрототипУзла Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML_2016Кв4(ИмяФормы, Стр, ЗначениеЭлемента);
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
						ВывестиПоказательВXML_2016Кв4(ИмяФормы, Стр, ЗначениеЭлемента);
					ИначеЕсли ДанныеОтчета.Свойство("ПолеТабличногоДокумента" + Стр.Раздел)
					        И ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел].Свойство(Стр.Ключ) Тогда
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = ДанныеОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
						ВывестиПоказательВXML_2016Кв4(ИмяФормы, Стр, ЗначениеЭлемента);
					Иначе
						// Данные не обнаружены
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML_2016Кв4(ИмяФормы, Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьУзел_2016Кв4(ИмяФормы, Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел_2016Кв4(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ЗаполнитьСодержательнуюЧасть_2016Кв4(ИмяФормы,
											   ПараметрыВыгрузки,
											   ДанныеОтчета,
											   УзелРодитель,
											   СтруктураРеквизитовФормы)
	
	Узел_НалПУ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "НалПУ");
	
	Раздел1_1 = ДанныеОтчета.Раздел1_1;
	ПрототипУзла_НалПУАв = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалПУ, "НалПУАв");
	Для Каждого СтраницаРаздела Из Раздел1_1 Цикл
				
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		
		Узел_НалПУАв = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУАв);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалПУАв, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУАв);
	
	Раздел1_2 = ДанныеОтчета.Раздел1_2;
	ПрототипУзла_НалПУМес = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалПУ, "НалПУМес");
	Для Каждого СтраницаРаздела Из Раздел1_2 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалПУМес = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУМес);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалПУМес, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУМес);
	
	Узел_НалПУПроц = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалПУ, "НалПУПроц");
	
	Раздел1_3 = ДанныеОтчета.Раздел1_3;
	ПрототипУзла_НалПУПроц = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел_НалПУ, "НалПУПроц");
	Для Каждого СтраницаРаздела Из Раздел1_3 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалПУПроц = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалПУПроц);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалПУПроц, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалПУПроц);
	
	ЗаполнитьСведенияВыгрузки_Лист02(ИмяФормы, ПараметрыВыгрузки, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист03(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	Лист04 = ДанныеОтчета.Лист04;
	ПрототипУзла_НалДохСтав = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "НалДохСтав");
	Для Каждого СтраницаРаздела Из Лист04 Цикл
		Если ТипЗнч(СтраницаРаздела.Данные) = Тип("Структура") Тогда
			ДанныеРаздела = СтраницаРаздела.Данные;
		Иначе
			ДанныеРаздела = СтраницаРаздела.Данные[0].Значение;
		КонецЕсли;
		Узел_НалДохСтав = НовыйУзелИзПрототипа(ИмяФормы, ПрототипУзла_НалДохСтав);
		ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_НалДохСтав, ДанныеОтчета, СтруктураРеквизитовФормы);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_НалДохСтав);
	
	ЗаполнитьСведенияВыгрузки_Лист05(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	// Лист 06.
	ДанныеРаздела = ДанныеОтчета.Лист06;
	Узел_ДохРасНалБазаНПФ = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "ДохРасНалБазаНПФ");
	ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ДохРасНалБазаНПФ, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист07(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист08(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Лист09(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	// Приложение 1.
	ДанныеРаздела = ДанныеОтчета.Приложение1;
	Узел_ДохНеУч_РасхУч = ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, УзелРодитель, "ДохНеУч_РасхУч");
	ЗаполнитьДаннымиУзел_2016Кв4(ИмяФормы, ДанныеРаздела, Узел_ДохНеУч_РасхУч, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ЗаполнитьСведенияВыгрузки_Приложение2(ИмяФормы, УзелРодитель, ДанныеОтчета, СтруктураРеквизитовФормы);
	
КонецПроцедуры

Процедура ВывестиПоказательВXML_2016Кв4(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип ("Число") Тогда
			ЗначениеПоказателя = XMLСтрока(ЗначениеПоказателя);
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя),
						  Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы_2016Кв4(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы_2016Кв4(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		  ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		    И УзелПуст_2016Кв4(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				 И УзелПуст_2016Кв4(ИмяФормы, Узел)
				 И ?(СтрНайти(Узел.Обязательность, "О") <> 0
				 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
				 РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст_2016Кв4(ИмяФормы, Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст_2016Кв4(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент_2016Кв4(ИмяФормы, Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ДанныеРазделов = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, ДанныеРазделов.Титульный);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
	
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
	
			Продолжить;
	
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",		   ВидПечати);
		
		Если СтруктураМногоуровневыхРазделов.Свойство(СтраницаОтчета.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
														СтруктураПараметров,
														ОбщиеРеквизитыРазделов,
														СтруктураРеквизитовФормы,
														ДанныеРазделов);
			
		Иначе
			
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметров,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов);
			
		КонецЕсли;
	
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(СтруктураРеквизитовФормы, ,
												СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
	
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
	
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
							+ НСтр("ru = ' за ';
									|en = ' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
							 	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
							 	"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		СтрИНН = СокрЛП(СтрИНН);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
	
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
						
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда
	
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
													  СтруктураПараметров,
													  ОбщиеРеквизитыРазделов,
													  СтруктураРеквизитовФормы,
													  ДанныеРазделов)
													
	ФорматОкругленияЧисла = Новый Структура;
	ФорматОкругленияЧисла.Вставить("Разрядность", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ФорматОкругленияЧисла.Вставить("Класс", 1);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1_1" И СтраницаВключенаВСоставОтчета(ИмяФормы, ДеревоДанныхРаздела.Строки[0]) Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
		СтрокМнЧ1НаЛисте = 1;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП00011М101003 = "П00011М101003";
		ИмяП00011М103003 = "П00011М103003";
		ИмяП00011М104003 = "П00011М104003";
		ИмяП00011М105003 = "П00011М105003";
		ИмяП00011М106003 = "П00011М106003";
		ИмяП00011М107003 = "П00011М107003";
		ИмяП00011М108003 = "П00011М108003";
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИмяП00011М105603 = "П00011М105603";
			
		КонецЕсли;
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				НовИмяП00011М101003 = ИмяП00011М101003 + _ИндСтрокиМнЧ;
				НовИмяП00011М103003 = ИмяП00011М103003 + _ИндСтрокиМнЧ;
				НовИмяП00011М104003 = ИмяП00011М104003 + _ИндСтрокиМнЧ;
				НовИмяП00011М105003 = ИмяП00011М105003 + _ИндСтрокиМнЧ;
				НовИмяП00011М106003 = ИмяП00011М106003 + _ИндСтрокиМнЧ;
				НовИмяП00011М107003 = ИмяП00011М107003 + _ИндСтрокиМнЧ;
				НовИмяП00011М108003 = ИмяП00011М108003 + _ИндСтрокиМнЧ;
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М101003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М103003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М104003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М105003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М106003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М107003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М108003, 0);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					НовИмяП00011М105603 = ИмяП00011М105603 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М105603, "");
					
				КонецЕсли;
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М101003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М101003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М103003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М103003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М104003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М104003]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М105003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М105003]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М106003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М106003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М107003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М107003]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М108003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М108003]));
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00011М105603,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00011М105603]);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппыР11М1
				+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяФормы,
						  		  СтруктураРеквизитовФормы,
						  		  ТабличныйДокумент,
								  СтруктураРеквизитовФормы.мИдГруппыР11М1,
								  ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел1_2" И СтраницаВключенаВСоставОтчета(ИмяФормы, ДеревоДанныхРаздела.Строки[0]) Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
		СтрокМнЧ1НаЛисте = 1;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП00012М100103 = "П00012М100103";
		ИмяП00012М101003 = "П00012М101003";
		ИмяП00012М111003 = "П00012М111003";
		ИмяП00012М112003 = "П00012М112003";
		ИмяП00012М113003 = "П00012М113003";
		ИмяП00012М114003 = "П00012М114003";
		ИмяП00012М121003 = "П00012М121003";
		ИмяП00012М122003 = "П00012М122003";
		ИмяП00012М123003 = "П00012М123003";
		ИмяП00012М124003 = "П00012М124003";
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			ИмяП00012М120603 = "П00012М120603";
			
		КонецЕсли;
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				НовИмяП00012М100103 = ИмяП00012М100103 + _ИндСтрокиМнЧ;
				НовИмяП00012М101003 = ИмяП00012М101003 + _ИндСтрокиМнЧ;
				НовИмяП00012М111003 = ИмяП00012М111003 + _ИндСтрокиМнЧ;
				НовИмяП00012М112003 = ИмяП00012М112003 + _ИндСтрокиМнЧ;
				НовИмяП00012М113003 = ИмяП00012М113003 + _ИндСтрокиМнЧ;
				НовИмяП00012М114003 = ИмяП00012М114003 + _ИндСтрокиМнЧ;
				НовИмяП00012М121003 = ИмяП00012М121003 + _ИндСтрокиМнЧ;
				НовИмяП00012М122003 = ИмяП00012М122003 + _ИндСтрокиМнЧ;
				НовИмяП00012М123003 = ИмяП00012М123003 + _ИндСтрокиМнЧ;
				НовИмяП00012М124003 = ИмяП00012М124003 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М100103, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М101003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М111003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М112003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М113003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М114003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М121003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М122003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М123003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М124003, 0);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
					
					НовИмяП00012М120603 = ИмяП00012М120603 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М120603, "");
					
				КонецЕсли;
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М100103,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М100103]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М101003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М101003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М111003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М111003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М112003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М112003]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М113003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М113003]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М114003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М114003]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М121003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М121003]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М122003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М122003]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М123003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М123003]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М124003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М124003]));
					
					Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00012М120603,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00012М120603]);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппыР12М1
				+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяФормы,
						  		  СтруктураРеквизитовФормы,
						  		  ТабличныйДокумент,
								  СтруктураРеквизитовФормы.мИдГруппыР12М1,
								  ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел1_3" И СтраницаВключенаВСоставОтчета(ИмяФормы, ДеревоДанныхРаздела.Строки[0]) Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧР13М1 = СтруктураРеквизитовФормы.мИдГруппыР13М1;
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧР13М1];
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			СтрокМнЧ1НаЛисте = 3;
			
			// Определение количества листов.
			КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
			ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
			ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
			КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ1ДляПечати = Новый Массив;
			ИмяП00013М102003 = "П00013М102003";
			ИмяП00013М103003 = "П00013М103003";
			ИмяП00013М104003 = "П00013М104003";
			ИмяП00013М105003 = "П00013М105003";
			ИмяП00013М106003 = "П00013М106003";
			ИмяП00013М107003 = "П00013М107003";
			
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
				ДанныеМнЧ1ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
					НовИмяП00013М102003 = ИмяП00013М102003 + _ИндСтрокиМнЧ;
					НовИмяП00013М103003 = ИмяП00013М103003 + _ИндСтрокиМнЧ;
					НовИмяП00013М104003 = ИмяП00013М104003 + _ИндСтрокиМнЧ;
					НовИмяП00013М105003 = ИмяП00013М105003 + _ИндСтрокиМнЧ;
					НовИмяП00013М106003 = ИмяП00013М106003 + _ИндСтрокиМнЧ;
					НовИмяП00013М107003 = ИмяП00013М107003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М102003, "");
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М103003, "");
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М104003, 0);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М105003, 0);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М106003, 0);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М107003, 0);
					
					Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М102003,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М102003]);
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М103003,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М103003]);
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М104003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М104003]));
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М105003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М105003]));
							
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М106003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М106003]));
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00013М107003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00013М107003]));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР13М1
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы,
									  СтруктураРеквизитовФормы,
									  ТабличныйДокумент,
									  ИмяГруппыМнЧР13М1,
									  ИмяОбластиПреемника);
				КонецЦикла;
				
				Если НомЛиста = 1 Тогда
					Для каждого Пок Из ДеревоДанныхРаздела.Строки[0].Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЦикла;
			
		Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
			
			ИмяГруппыМнЧР1М2 = СтруктураРеквизитовФормы.мИдГруппыР13М2;
			
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР1М2];
				
				СтрокМнЧ2НаЛисте = 21;
				
				// Определение количества листов.
				КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
				ДробКол = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
				ЦелКол  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
				КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ2ДляПечати = Новый Массив;
				ИмяП00013М204001 = "П00013М204001";
				ИмяП00013М204003 = "П00013М204003";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
					ДанныеМнЧ2ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
						_ИндСтрокиМнЧ = "_1" + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП00013М204001 = ИмяП00013М204001 + _ИндСтрокиМнЧ;
						НовИмяП00013М204003 = ИмяП00013М204003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00013М204001, '00010101');
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00013М204003, 0);
						
						Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00013М204001,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00013М204001]);
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00013М204003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00013М204003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
					
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					
					Если НомЛиста = 1 Тогда
						Обл = ТабличныйДокумент.Области.Найти("П00013М101003_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = СокрЛП(СтрокаМнЧ1.Данные["П00013М101003"]);
						КонецЕсли;
						Обл = ТабличныйДокумент.Области.Найти("П00013М102003_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = СокрЛП(СтрокаМнЧ1.Данные["П00013М102003"]);
						КонецЕсли;
						Обл = ТабличныйДокумент.Области.Найти("П00013М103003_1");
						Если Обл <> Неопределено Тогда
							Обл.Значение = СокрЛП(СтрокаМнЧ1.Данные["П00013М103003"]);
						КонецЕсли;
					КонецЕсли;
					
					Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧР1М2 + "_1"
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
							  		  	  СтруктураРеквизитовФормы,
							  		  	  ТабличныйДокумент,
										  ИмяГруппыМнЧР1М2,
										  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
					ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТекРаздела = "Лист02" Тогда
		
		МакетРаздела    = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		МакетРаздела_1  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_1");
		МакетРаздела_2  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_2");
		МакетРаздела_3  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_3");
		МакетРаздела_4  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_4");
		МакетРаздела_5  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_5");
		МакетРаздела_7а = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_7а");
		МакетРаздела_7б = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_7б");
		МакетРаздела_7в = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_7в");
		МакетРаздела_7г = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_7г");
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			МакетРаздела_7д = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_7д");
			
		Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
			
			МакетРаздела_6   = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_6");
			МакетРаздела_6а  = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_6а");
			МакетРаздела_6бА = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_6бА");
			МакетРаздела_6бБ = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Лист02_6бБ");
			
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				
				ПризнакНП_Код = Ветка.Данные["П000020000100"];
				СтруктураПараметровРаздела.Вставить("ПризнакНП_Код", ПризнакНП_Код);
				
				НомДок = Ветка.Данные["П000020000200"];
				
				СтруктураПараметровРаздела.Вставить("НомДок", НомДок);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					ЛицСер = Ветка.Данные["П000020000301"];
					СтруктураПараметровРаздела.Вставить("ЛицСер", ЛицСер);
					ЛицНом = Ветка.Данные["П000020000302"];
					СтруктураПараметровРаздела.Вставить("ЛицНом", ЛицНом);
					ЛицВид3 = Ветка.Данные["П000020000303"];
					СтруктураПараметровРаздела.Вставить("ЛицВид3", ЛицВид3);
					ЛицВид4 = Ветка.Данные["П000020000304"];
					СтруктураПараметровРаздела.Вставить("ЛицВид4", ЛицВид4);
					
				КонецЕсли;
				
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ="));
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЕсли;
			
			Ветка_1 = Ветка.Строки[0].Строки[0];
			
			Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_1) Тогда
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_1);
				Для каждого Пок Из Ветка_1.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, "Лист02_1", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_1");
				СтруктураПараметровРаздела.Вставить("ПризнакНП_Код", ПризнакНП_Код);
				СтруктураПараметровРаздела.Вставить("НомДок", НомДок);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					СтруктураПараметровРаздела.Вставить("ЛицСер", ЛицСер);
					СтруктураПараметровРаздела.Вставить("ЛицНом", ЛицНом);
					СтруктураПараметровРаздела.Вставить("ЛицВид3", ЛицВид3);
					СтруктураПараметровРаздела.Вставить("ЛицВид4", ЛицВид4);
					
				КонецЕсли;
				
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 1");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЕсли;
			
			Ветка_2 = Ветка.Строки[1].Строки[0];
			
			Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_2) Тогда
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_2);
				Для каждого Пок Из Ветка_2.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, "Лист02_2", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_2");
				СтруктураПараметровРаздела.Вставить("ПризнакНП_Код", ПризнакНП_Код);
				СтруктураПараметровРаздела.Вставить("НомДок", НомДок);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					СтруктураПараметровРаздела.Вставить("ЛицСер", ЛицСер);
					СтруктураПараметровРаздела.Вставить("ЛицНом", ЛицНом);
					СтруктураПараметровРаздела.Вставить("ЛицВид3", ЛицВид3);
					СтруктураПараметровРаздела.Вставить("ЛицВид4", ЛицВид4);
					
				КонецЕсли;
				
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 2");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЕсли;
			
			Ветка_3 = Ветка.Строки[2].Строки[0];
			
			Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_3) Тогда
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_3);
				Для каждого Пок Из Ветка_3.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, "Лист02_3", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_3");
				СтруктураПараметровРаздела.Вставить("ПризнакНП_Код", ПризнакНП_Код);
				СтруктураПараметровРаздела.Вставить("НомДок", НомДок);
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					СтруктураПараметровРаздела.Вставить("ЛицСер", ЛицСер);
					СтруктураПараметровРаздела.Вставить("ЛицНом", ЛицНом);
					СтруктураПараметровРаздела.Вставить("ЛицВид3", ЛицВид3);
					СтруктураПараметровРаздела.Вставить("ЛицВид4", ЛицВид4);
					
				КонецЕсли;
				
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 3");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЕсли;
			
			Для каждого Ветка_4 Из Ветка.Строки[3].Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_4) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеМнЧ1 = Ветка_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
				СтрокМнЧ1НаЛисте = 10;
				
				// Определение количества листов.
				КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
				ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
				ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
				КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ1ДляПечати = Новый Массив;
				ИмяП00024М100001 = "П00024М100001";
				ИмяП00024М100003 = "П00024М100003";
				
				Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
					Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
					ДанныеМнЧ1ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
						НовИмяП00024М100001 = ИмяП00024М100001 + _ИндСтрокиМнЧ;
						НовИмяП00024М100003 = ИмяП00024М100003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00024М100001, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00024М100003, 0);
						
						Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00024М100001,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00024М100001]);
							
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00024М100003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00024М100003]));
							
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_4);
					
					Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ024М1
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
								  		  СтруктураРеквизитовФормы.мИдГруппыЛ024М1,
										  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Если НомЛиста = 1 Тогда
						Для каждого Пок Из Ветка_4.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					УстановитьФорматВывода(ИмяФормы, "Лист02_4", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_4");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 4");
					ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				КонецЦикла;
				
			КонецЦикла;
			
			Для каждого Ветка_5 Из Ветка.Строки[4].Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_5) Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_5);
				УстановитьЧисловойФорматОбласти(ИмяФормы, "Лист02_5", СтруктураРеквизитовФормы, ТабличныйДокумент);
				Для каждого Пок Из Ветка_5.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, "Лист02_5", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_5");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 5");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
				
				Для каждого Ветка_6 Из Ветка.Строки[5].Строки Цикл
					
					Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_6) Тогда
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела_6);
						УстановитьЧисловойФорматОбласти(ИмяФормы, "Лист02_6", СтруктураРеквизитовФормы, ТабличныйДокумент);
						Для каждого Пок Из Ветка_6.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						УстановитьФорматВывода(ИмяФормы, "Лист02_6", СтруктураРеквизитовФормы, ТабличныйДокумент);
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_6");
						СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
						"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 6");
						ВывестиНаПечатьЛист(ИмяФормы,
											СтруктураПараметровРаздела,
											ОбщиеРеквизитыРазделов,
											СтруктураРеквизитовФормы,
											ДанныеРазделов,
											ТабличныйДокумент);
						
					КонецЕсли;
					
					Для каждого Ветка_6а Из Ветка_6.Строки[0].Строки Цикл
						
						Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_6а) Тогда
							
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(МакетРаздела_6а);
							УстановитьЧисловойФорматОбласти(ИмяФормы, "Лист02_6а", СтруктураРеквизитовФормы, ТабличныйДокумент);
							Для каждого Пок Из Ветка_6а.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = Пок.Значение;
								КонецЕсли;
							КонецЦикла;
							УстановитьФорматВывода(ИмяФормы, "Лист02_6а", СтруктураРеквизитовФормы, ТабличныйДокумент);
							СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
							СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_6а");
							СтруктураПараметровРаздела.Вставить("НаименованиеЛиста", "Лист 02. Стр. "
							+ Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 6а");
							ВывестиНаПечатьЛист(ИмяФормы,
												СтруктураПараметровРаздела,
												ОбщиеРеквизитыРазделов,
												СтруктураРеквизитовФормы,
												ДанныеРазделов,
												ТабличныйДокумент);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Ветка_6бА = Ветка.Строки[6].Строки[0];
				
				Если СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_6бА) Тогда
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_6бА);
					Для каждого Пок Из Ветка_6бА.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					УстановитьФорматВывода(ИмяФормы, "Лист02_6бА", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_6бА");
					СтруктураПараметровРаздела.Вставить("ПризнакНП_Код", ПризнакНП_Код);
					СтруктураПараметровРаздела.Вставить("НомДок", НомДок);
					СтруктураПараметровРаздела.Вставить("ЛицСер", ЛицСер);
					СтруктураПараметровРаздела.Вставить("ЛицНом", ЛицНом);
					СтруктураПараметровРаздела.Вставить("ЛицВид3", ЛицВид3);
					СтруктураПараметровРаздела.Вставить("ЛицВид4", ЛицВид4);
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 6б");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
					
				КонецЕсли;
				
				Для каждого Ветка_6бБ Из Ветка.Строки[7].Строки Цикл
					
					Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_6бБ) Тогда
						Продолжить;
					КонецЕсли;
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_6бБ);
					Для каждого Пок Из Ветка_6бБ.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					УстановитьФорматВывода(ИмяФормы, "Лист02_6бБ", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_6бБ");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 6б");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИндексВДеревеРаздела = 5;
				
			Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
				
				ИндексВДеревеРаздела = 8;
				
			КонецЕсли;
			
			Для каждого Ветка_7а Из Ветка.Строки[ИндексВДеревеРаздела].Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7а) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеМнЧ1 = Ветка_7а.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1];
				СтрокМнЧ1НаЛисте = 4;
				ДанныеМнЧ2 = Ветка_7а.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2];
				СтрокМнЧ2НаЛисте = 4;
				ДанныеМнЧ3 = Ветка_7а.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3];
				СтрокМнЧ3НаЛисте = 4;
				
				// Определение количества листов.
				КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
				ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
				ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
				КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
				
				КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
				ДробКол2 = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
				ЦелКол2  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
				КолЛистовРаздела2 = ?(ДробКол2 = ЦелКол2, ЦелКол2, ЦелКол2 + 1);
				
				КолСтрокМнЧ3 = ДанныеМнЧ3.Строки.Количество();
				ДробКол3 = КолСтрокМнЧ3 / СтрокМнЧ3НаЛисте;
				ЦелКол3  = Цел(КолСтрокМнЧ3 / СтрокМнЧ3НаЛисте);
				КолЛистовРаздела3 = ?(ДробКол3 = ЦелКол3, ЦелКол3, ЦелКол3 + 1);
				
				КолЛистовРаздела = Макс(КолЛистовРаздела1, КолЛистовРаздела2, КолЛистовРаздела3);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ1ДляПечати = Новый Массив;
				ИмяП0027АМ100001 = "П0027АМ100001";
				ИмяП0027АМ100003 = "П0027АМ100003";
				
				МассивДанныхМнЧ2ДляПечати = Новый Массив;
				ИмяП0027АМ200001 = "П0027АМ200001";
				ИмяП0027АМ200003 = "П0027АМ200003";
				
				МассивДанныхМнЧ3ДляПечати = Новый Массив;
				ИмяП0027АМ300001 = "П0027АМ300001";
				ИмяП0027АМ300003 = "П0027АМ300003";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
					ДанныеМнЧ1ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
						НовИмяП0027АМ100001 = ИмяП0027АМ100001 + _ИндСтрокиМнЧ;
						НовИмяП0027АМ100003 = ИмяП0027АМ100003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027АМ100001, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027АМ100003, 0);
						
						Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027АМ100001,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ100001]);
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027АМ100003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ100003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					Приращение2КНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
					ДанныеМнЧ2ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение2КНомеру;
						НовИмяП0027АМ200001 = ИмяП0027АМ200001 + _ИндСтрокиМнЧ;
						НовИмяП0027АМ200003 = ИмяП0027АМ200003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027АМ200001, "");
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027АМ200003, 0);
						
						Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027АМ200001,
								ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ200001]);
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027АМ200003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ200003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					Приращение3КНомеру = (НомЛиста - 1) * СтрокМнЧ3НаЛисте;
					ДанныеМнЧ3ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ3НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение3КНомеру;
						НовИмяП0027АМ300001 = ИмяП0027АМ300001 + _ИндСтрокиМнЧ;
						НовИмяП0027АМ300003 = ИмяП0027АМ300003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ3ДляПечати.Вставить(НовИмяП0027АМ300001, "");
						ДанныеМнЧ3ДляПечати.Вставить(НовИмяП0027АМ300003, 0);
						
						Если КолСтрокМнЧ3 >= ИндСПриращением Тогда
							ДанныеМнЧ3ДляПечати.Вставить(НовИмяП0027АМ300001,
								ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ300001]);
							ДанныеМнЧ3ДляПечати.Вставить(НовИмяП0027АМ300003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ3.Строки[ИндСПриращением - 1].Данные[ИмяП0027АМ300003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ3ДляПечати.Добавить(ДанныеМнЧ3ДляПечати);
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_7а);
					
					Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
								  		  СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1,
								  		  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
								  		  СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2,
								  		  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Ном = 1 По СтрокМнЧ3НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
										  СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3,
										  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ3ДляПечати = МассивДанныхМнЧ3ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ3ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Если НомЛиста = 1 Тогда
						Для каждого Пок Из Ветка_7а.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					УстановитьФорматВывода(ИмяФормы, "Лист02_7А", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7А");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел А");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
				КонецЦикла;
				
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИндексВДеревеРаздела = 6;
				
			Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
				
				ИндексВДеревеРаздела = 9;
				
			КонецЕсли;
			
			Для каждого Ветка_7б Из Ветка.Строки[ИндексВДеревеРаздела].Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7б) Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_7б);
				Для каждого Пок Из Ветка_7б.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, "Лист02_7Б", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7Б");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел Б");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИндексВДеревеРаздела = 7;
				
			Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
				
				ИндексВДеревеРаздела = 10;
				
			КонецЕсли;
			
			Для каждого Ветка_7в Из Ветка.Строки[ИндексВДеревеРаздела].Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7в) Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела_7в);
				Для каждого Пок Из Ветка_7в.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, "Лист02_7В", СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7В");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел В");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
				
			КонецЦикла;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ИндексВДеревеРаздела = 8;
				
			Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
				
				ИндексВДеревеРаздела = 11;
				
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
				ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
				
				Для каждого Ветка_7г Из Ветка.Строки[ИндексВДеревеРаздела].Строки Цикл
					
					Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7г) Тогда
						Продолжить;
					КонецЕсли;
					
					// Первые листы.
					//
					ДанныеМнЧ = Ветка_7г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1];
					СтрокМнЧНаЛисте = 7;
					
					// Определение количества листов.
					КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
					ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
					ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
					КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Подготовка многострочных данных для заполнения листов.
					МассивДанныхМнЧДляПечати = Новый Массив;
					ИмяП0027ГМ100001 = "П0027ГМ100001";
					ИмяП0027ГМ100003 = "П0027ГМ100003";
					
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
						ДанныеМнЧДляПечати = Новый Структура;
						Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
							_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
							ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
							НовИмяП0027ГМ100001 = ИмяП0027ГМ100001 + _ИндСтрокиМнЧ;
							НовИмяП0027ГМ100003 = ИмяП0027ГМ100003 + _ИндСтрокиМнЧ;
							
							ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ100001, "");
							ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ100003, 0);
							
							Если КолСтрокМнЧ >= ИндСПриращением Тогда
								ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ100001,
									ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП0027ГМ100001]);
								ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ100003,
									РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
									ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП0027ГМ100003]));
							КонецЕсли;
						КонецЦикла;
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					КонецЦикла;
					
					// Вывод листов.
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела_7г);
						
						Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
							ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1
								+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
							ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
								СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ1, ИмяОбластиПреемника);
						КонецЦикла;
						
						ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
						Для каждого Пок Из ДанныеМнЧДляПечати Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Если НомЛиста = 1 Тогда
							Для каждого Пок Из Ветка_7г.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = Пок.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						УстановитьФорматВывода(ИмяФормы, "Лист02_7Г", СтруктураРеквизитовФормы, ТабличныйДокумент);
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7Г");
						СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
						"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел Г");
						ВывестиНаПечатьЛист(ИмяФормы,
											СтруктураПараметровРаздела,
											ОбщиеРеквизитыРазделов,
											СтруктураРеквизитовФормы,
											ДанныеРазделов,
											ТабличныйДокумент);
					КонецЦикла;
					
					// Вторые листы.
					//
					ДанныеМнЧ = Ветка_7г.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2];
					СтрокМнЧНаЛисте = 7;
					
					// Определение количества листов.
					КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
					ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
					ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
					КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Подготовка многострочных данных для заполнения листов.
					МассивДанныхМнЧДляПечати = Новый Массив;
					ИмяП0027ГМ200001 = "П0027ГМ200001";
					ИмяП0027ГМ200003 = "П0027ГМ200003";
					
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
						ДанныеМнЧДляПечати = Новый Структура;
						Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
							_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
							ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
							НовИмяП0027ГМ200001 = ИмяП0027ГМ200001 + _ИндСтрокиМнЧ;
							НовИмяП0027ГМ200003 = ИмяП0027ГМ200003 + _ИндСтрокиМнЧ;
							
							ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ200001, "");
							ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ200003, 0);
							
							Если КолСтрокМнЧ >= ИндСПриращением Тогда
								ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ200001,
									ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП0027ГМ200001]);
								ДанныеМнЧДляПечати.Вставить(НовИмяП0027ГМ200003,
									РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
									ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП0027ГМ200003]));
							КонецЕсли;
						КонецЦикла;
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					КонецЦикла;
					
					// Вывод листов.
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела_7г);
						
						Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
							ИмяОбластиПреемника = "ДобавлениеСтроки" + СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2
								+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
							ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент,
								СтруктураРеквизитовФормы.мИдГруппыЛ027ГМ2, ИмяОбластиПреемника);
						КонецЦикла;
						
						ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
						Для каждого Пок Из ДанныеМнЧДляПечати Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Если НомЛиста = 1 Тогда
							Для каждого Пок Из Ветка_7г.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = Пок.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						УстановитьФорматВывода(ИмяФормы, "Лист02_7Г", СтруктураРеквизитовФормы, ТабличныйДокумент);
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7Г_прод");
						СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
						"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел Г");
						ВывестиНаПечатьЛист(ИмяФормы,
											СтруктураПараметровРаздела,
											ОбщиеРеквизитыРазделов,
											СтруктураРеквизитовФормы,
											ДанныеРазделов,
											ТабличныйДокумент);
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе// "ФормаОтчета2020Кв4"
				
				Для каждого Ветка_7г Из Ветка.Строки[ИндексВДеревеРаздела].Строки Цикл
					
					Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7г) Тогда
						Продолжить;
					КонецЕсли;
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_7г);
					Для каждого Пок Из Ветка_7г.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					УстановитьФорматВывода(ИмяФормы, "Лист02_7Г", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7Г");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел Г");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				Ветка_7д = Ветка.Строки[9].Строки[0];
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка_7д) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеМнЧ1 = Ветка_7д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1];
				СтрокМнЧ1НаЛисте = 5;
				ДанныеМнЧ2 = Ветка_7д.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2];
				СтрокМнЧ2НаЛисте = 5;
				
				// Определение количества листов.
				КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
				ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
				ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
				КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
				
				КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
				ДробКол2 = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
				ЦелКол2  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
				КолЛистовРаздела2 = ?(ДробКол2 = ЦелКол2, ЦелКол2, ЦелКол2 + 1);
				
				КолЛистовРаздела = Макс(КолЛистовРаздела1, КолЛистовРаздела2);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ1ДляПечати = Новый Массив;
				ИмяП0027ДМ100001 = "П0027ДМ100001";
				ИмяП0027ДМ100003 = "П0027ДМ100003";
				
				МассивДанныхМнЧ2ДляПечати = Новый Массив;
				ИмяП0027ДМ200001 = "П0027ДМ200001";
				ИмяП0027ДМ200003 = "П0027ДМ200003";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
					ДанныеМнЧ1ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
						НовИмяП0027ДМ100001 = ИмяП0027ДМ100001 + _ИндСтрокиМнЧ;
						НовИмяП0027ДМ100003 = ИмяП0027ДМ100003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027ДМ100001, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027ДМ100003, 0);
						
						Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027ДМ100001,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0027ДМ100001]);
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0027ДМ100003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0027ДМ100003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
				КонецЦикла;
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					Приращение2КНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
					ДанныеМнЧ2ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение2КНомеру;
						НовИмяП0027ДМ200001 = ИмяП0027ДМ200001 + _ИндСтрокиМнЧ;
						НовИмяП0027ДМ200003 = ИмяП0027ДМ200003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027ДМ200001, "");
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027ДМ200003, 0);
						
						Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027ДМ200001,
								ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП0027ДМ200001]);
							ДанныеМнЧ2ДляПечати.Вставить(НовИмяП0027ДМ200003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП0027ДМ200003]));
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела_7д);
					
					Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
								  		  СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ1,
								  		  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
						  		  		  СтруктураРеквизитовФормы,
						  		  		  ТабличныйДокумент,
								  		  СтруктураРеквизитовФормы.мИдГруппыЛ027ДМ2,
								  		  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Если НомЛиста = 1 Тогда
						Для каждого Пок Из Ветка_7д.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					УстановитьФорматВывода(ИмяФормы, "Лист02_7Д", СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист02_7Д");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 02. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 7. Раздел Д");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Лист03А" ИЛИ ИмяТекРаздела = "Лист03Б" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
				Продолжить;
			КонецЕсли;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
			
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				
				ВыводитьНаПечатьЛист03В = ИмяТекРаздела = "Лист03А";
				
			Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
				
				ВыводитьНаПечатьЛист03В = Истина;
				
			КонецЕсли;
			
			Если ВыводитьНаПечатьЛист03В Тогда
				
				ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1];
				СтрокМнЧ1НаЛисте = 1;
				
				// Определение количества листов.
				КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
				ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
				ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
				КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
				
				// Подготовка многострочных данных для заполнения листов.
				МассивДанныхМнЧ1ДляПечати = Новый Массив;
				ИмяП0003ВМ100503 = "П0003ВМ100503";
				ИмяП0003ВМ100505 = "П0003ВМ100505";
				ИмяП0003ВМ101003 = "П0003ВМ101003";
				ИмяП0003ВМ104003 = "П0003ВМ104003";
				ИмяП0003ВМ105003 = "П0003ВМ105003";
				ИмяП0003ВМ106003 = "П0003ВМ106003";
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
					ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
					
					ИмяП0003ВМ100504 = "П0003ВМ100504";
					ИмяП0003ВМ102003 = "П0003ВМ102003";
					ИмяП0003ВМ102004 = "П0003ВМ102004";
					ИмяП0003ВМ102005 = "П0003ВМ102005";
					ИмяП0003ВМ103003 = "П0003ВМ103003";
					
				КонецЕсли;
				
				Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
					Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
					ДанныеМнЧ1ДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
						_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
						НовИмяП0003ВМ100503 = ИмяП0003ВМ100503 + _ИндСтрокиМнЧ;
						НовИмяП0003ВМ100505 = ИмяП0003ВМ100505 + _ИндСтрокиМнЧ;
						НовИмяП0003ВМ101003 = ИмяП0003ВМ101003 + _ИндСтрокиМнЧ;
						НовИмяП0003ВМ104003 = ИмяП0003ВМ104003 + _ИндСтрокиМнЧ;
						НовИмяП0003ВМ105003 = ИмяП0003ВМ105003 + _ИндСтрокиМнЧ;
						НовИмяП0003ВМ106003 = ИмяП0003ВМ106003 + _ИндСтрокиМнЧ;
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100503, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100505, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ101003, "");
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ104003, '00010101');
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ105003, 0);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ106003, 0);
						
						Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
							ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
							ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
							
							НовИмяП0003ВМ100504 = ИмяП0003ВМ100504 + _ИндСтрокиМнЧ;
							НовИмяП0003ВМ102003 = ИмяП0003ВМ102003 + _ИндСтрокиМнЧ;
							НовИмяП0003ВМ102004 = ИмяП0003ВМ102004 + _ИндСтрокиМнЧ;
							НовИмяП0003ВМ102005 = ИмяП0003ВМ102005 + _ИндСтрокиМнЧ;
							НовИмяП0003ВМ103003 = ИмяП0003ВМ103003 + _ИндСтрокиМнЧ;
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100504, "");
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102003, "");
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102004, "");
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102005, "");
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ103003, "");
							
						КонецЕсли;
						
						Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100503,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ100503]);
							
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100505,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ100505]);
							
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ101003,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ101003]);
							
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ104003,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ104003]);
							
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ105003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ105003]));
								
							ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ106003,
								РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
								ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ106003]));
							
							Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
								ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
								ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
								
								ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ100504,
									ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ100504]);
								
								ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102003,
									ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ102003]);
								
								ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102004,
									ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ102004]);
								
								ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ102005,
									ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ102005]);
								
								ДанныеМнЧ1ДляПечати.Вставить(НовИмяП0003ВМ103003,
									ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП0003ВМ103003]);
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
				КонецЦикла;
				
				// Вывод листов.
				Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					
					Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1
						+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(ИмяФормы,
							  		  	  СтруктураРеквизитовФормы,
							  		  	  ТабличныйДокумент,
									  	  СтруктураРеквизитовФормы.мИдГруппыЛ03ВМ1,
										  ИмяОбластиПреемника);
					КонецЦикла;
					
					ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист03В");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Лист04" ИЛИ ИмяТекРаздела = "Лист05" ИЛИ ИмяТекРаздела = "Лист06" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
				Продолжить;
			КонецЕсли;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Лист07"
		И СтраницаВключенаВСоставОтчета(ИмяФормы, ДеревоДанныхРаздела.Строки[0]) Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Ветка = ДеревоДанныхРаздела.Строки[0];
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ07М1];
		СтрокМнЧ1НаЛисте = 9;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП00007М100001 = "П00007М100001";
		ИмяП00007М100002 = "П00007М100002";
		ИмяП00007М100003 = "П00007М100003";
		ИмяП00007М100004 = "П00007М100004";
		ИмяП00007М100005 = "П00007М100005";
		ИмяП00007М100006 = "П00007М100006";
		ИмяП00007М100007 = "П00007М100007";
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				НовИмяП00007М100001 = ИмяП00007М100001 + _ИндСтрокиМнЧ;
				НовИмяП00007М100002 = ИмяП00007М100002 + _ИндСтрокиМнЧ;
				НовИмяП00007М100003 = ИмяП00007М100003 + _ИндСтрокиМнЧ;
				НовИмяП00007М100004 = ИмяП00007М100004 + _ИндСтрокиМнЧ;
				НовИмяП00007М100005 = ИмяП00007М100005 + _ИндСтрокиМнЧ;
				НовИмяП00007М100006 = ИмяП00007М100006 + _ИндСтрокиМнЧ;
				НовИмяП00007М100007 = ИмяП00007М100007 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100002, '00010101');
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100003, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100004, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100005, '00010101');
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100006, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100007, 0);
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100001,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100001]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100002,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100002]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100003,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100003]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100004,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100004]));
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100005,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100005]);
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100006,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100006]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00007М100007,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00007М100007]));
						
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппыЛ07М1
				+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяФормы,
						  		  СтруктураРеквизитовФормы,
						  		  ТабличныйДокумент,
								  СтруктураРеквизитовФормы.мИдГруппыЛ07М1,
								  ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Если НомЛиста = КолЛистовРаздела1 Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Лист08" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М1];
			СтрокМнЧ1НаЛисте = 10;
			
			// Определение количества листов.
			КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
			ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
			ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
			КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ1ДляПечати = Новый Массив;
			ИмяП00008М100001 = "П00008М100001";
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
				ДанныеМнЧ1ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
					НовИмяП00008М100001 = ИмяП00008М100001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00008М100001, "");
					Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП00008М100001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП00008М100001]);
						
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ВидыКонтрагентов = Новый Массив;
				ВидыКонтрагентов.Добавить("Индивидуальный предприниматель");
				ВидыКонтрагентов.Добавить("Российский гражданин");
				ВидыКонтрагентов.Добавить("Иностранный гражданин или лицо без гражданства");
				Если ВидыКонтрагентов.Найти(СокрЛП(Ветка.Данные["П000080000701"])) <> Неопределено Тогда
					ФамилияКир  = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001301)), СокрЛП(Ветка.Данные.П000080001301), "");
					ИмяКир      = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001302)), СокрЛП(Ветка.Данные.П000080001302), "");
					ОтчествоКир = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001303)), СокрЛП(Ветка.Данные.П000080001303), "");
					ФИОКир = СокрЛП(ФамилияКир + " " + ИмяКир + " " + ОтчествоКир);
					Обл = ТабличныйДокумент.Области.Найти("П000080001101");
					Обл.Значение = ФИОКир;
					ФамилияЛат  = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001401)), СокрЛП(Ветка.Данные.П000080001401), "");
					ИмяЛат      = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001402)), СокрЛП(Ветка.Данные.П000080001402), "");
					ОтчествоЛат = ?(ЗначениеЗаполнено(СокрЛП(Ветка.Данные.П000080001403)), СокрЛП(Ветка.Данные.П000080001403), "");
					ФИОЛат = СокрЛП(ФамилияЛат + " " + ИмяЛат + " " + ОтчествоЛат);
					Обл = ТабличныйДокумент.Области.Найти("П000080001201");
					Обл.Значение = ФИОЛат;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппыЛ08М1
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы,
						  		  	  СтруктураРеквизитовФормы,
						  		  	  ТабличныйДокумент,
								  	  СтруктураРеквизитовФормы.мИдГруппыЛ08М1,
									  ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 08. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ="));
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
			КонецЦикла;
			
			ДанныеМнЧ2 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ08М2];
			СтрокМнЧ2НаЛисте = 1;
			
			// Определение количества листов.
			КолСтрокМнЧ2 = ДанныеМнЧ2.Строки.Количество();
			ДробКол2 = КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте;
			ЦелКол2  = Цел(КолСтрокМнЧ2 / СтрокМнЧ2НаЛисте);
			КолЛистовРаздела2 = ?(ДробКол2 = ЦелКол2, ЦелКол2, ЦелКол2 + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ2ДляПечати = Новый Массив;
			ИмяП00008М200001 = "П00008М200001";
			ИмяП00008М200002 = "П00008М200002";
			ИмяП00008М200003 = "П00008М200003";
			ИмяП00008М200004 = "П00008М200004";
			ИмяП00008М200005 = "П00008М200005";
			ИмяП00008М200006 = "П00008М200006";
			ИмяП00008М200007 = "П00008М200007";
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				Приращение2КНомеру = (НомЛиста - 1) * СтрокМнЧ2НаЛисте;
				ДанныеМнЧ2ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ2НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение2КНомеру;
					НовИмяП00008М200001 = ИмяП00008М200001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200001, "");
					НовИмяП00008М200002 = ИмяП00008М200002 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200002, "");
					НовИмяП00008М200003 = ИмяП00008М200003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200003, "");
					НовИмяП00008М200004 = ИмяП00008М200004 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200004, "");
					НовИмяП00008М200005 = ИмяП00008М200005 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200005, "");
					НовИмяП00008М200006 = ИмяП00008М200006 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200006, "");
					НовИмяП00008М200007 = ИмяП00008М200007 + _ИндСтрокиМнЧ;
					ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200007, "");
					Если КолСтрокМнЧ2 >= ИндСПриращением Тогда
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200001,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200001]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200002,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200002]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200003,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200003]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200004,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200004]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200005,
							ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200005]);
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200006,
							СтрЗаменить(ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200006], ".", ""));
						ДанныеМнЧ2ДляПечати.Вставить(НовИмяП00008М200007,
							СтрЗаменить(ДанныеМнЧ2.Строки[ИндСПриращением - 1].Данные[ИмяП00008М200007], ".", ""));
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ2ДляПечати.Добавить(ДанныеМнЧ2ДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела2 Цикл
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					Для каждого Пок Из Ветка.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧ2НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппыЛ08М2
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы,
						  		  	  СтруктураРеквизитовФормы,
						  		  	  ТабличныйДокумент,
								  	  СтруктураРеквизитовФормы.мИдГруппыЛ08М2,
									  ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧ2ДляПечати = МассивДанныхМнЧ2ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧ2ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_прод");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 08. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ="));
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Лист09" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
				Продолжить;
			КонецЕсли;
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			УстановитьЧисловойФорматОбласти(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист09А");
			СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
			"Лист 09. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Раздел А");
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
			
			Печать09Бх = Новый Структура("ПечататьБ1,ПечататьБ2и3,ЗаполненБ2,ЗаполненБ3", Ложь, Ложь, Ложь, Ложь);
			ОпределитьУсловияПечати(ИмяФормы, Ветка.Данные, Печать09Бх);
			Если Печать09Бх.ПечататьБ1 Тогда
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист09Б1");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 09. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Раздел Б1");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
			КонецЕсли;
			Если Печать09Бх.ПечататьБ2и3 Тогда
				Если Печать09Бх.ЗаполненБ2 Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из Ветка.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист09Б2");
					НомКИК = Ветка.Данные["П0009А0000101"];
					СтруктураПараметровРаздела.Вставить("НомКИК", НомКИК);
					КодВал = Ветка.Данные["П009Б20000200"];
					СтруктураПараметровРаздела.Вставить("КодВал", КодВал);
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 09. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Раздел Б2");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
				КонецЕсли;
				Если Печать09Бх.ЗаполненБ3 Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетРаздела);
					Для каждого Пок Из Ветка.Данные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист09Б3");
					СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
					"Лист 09. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Раздел Б3");
					ВывестиНаПечатьЛист(ИмяФормы,
										СтруктураПараметровРаздела,
										ОбщиеРеквизитыРазделов,
										СтруктураРеквизитовФормы,
										ДанныеРазделов,
										ТабличныйДокумент);
				КонецЕсли;
			КонецЕсли;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1];
			СтрокМнЧ1НаЛисте = 1;
			
			// Определение количества листов.
			КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
			ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
			ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
			КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			МассивДанныхМнЧ1ДляПечати = Новый Массив;
			ИмяП009П1М100100 = "П009П1М100100";
			
			ИмяП009П1М101003 = "П009П1М101003";
			ИмяП009П1М102003 = "П009П1М102003";
			ИмяП009П1М103003 = "П009П1М103003";
			ИмяП009П1М104003 = "П009П1М104003";
			ИмяП009П1М105003 = "П009П1М105003";
			ИмяП009П1М106003 = "П009П1М106003";
			ИмяП009П1М107003 = "П009П1М107003";
			ИмяП009П1М108003 = "П009П1М108003";
			ИмяП009П1М109003 = "П009П1М109003";
			ИмяП009П1М110003 = "П009П1М110003";
			ИмяП009П1М111003 = "П009П1М111003";
			ИмяП009П1М112003 = "П009П1М112003";
			ИмяП009П1М113003 = "П009П1М113003";
			ИмяП009П1М114003 = "П009П1М114003";
			ИмяП009П1М115003 = "П009П1М115003";
			
			ИмяП009П1М103001 = "П009П1М103001";
			ИмяП009П1М104001 = "П009П1М104001";
			ИмяП009П1М105001 = "П009П1М105001";
			ИмяП009П1М106001 = "П009П1М106001";
			ИмяП009П1М107001 = "П009П1М107001";
			ИмяП009П1М108001 = "П009П1М108001";
			ИмяП009П1М109001 = "П009П1М109001";
			ИмяП009П1М110001 = "П009П1М110001";
			ИмяП009П1М111001 = "П009П1М111001";
			ИмяП009П1М112001 = "П009П1М112001";
			
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
				ДанныеМнЧ1ДляПечати = Новый Структура;
				Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
					_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
					ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
					НовИмяП009П1М100100 = ИмяП009П1М100100 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М100100, "");
					НовИмяП009П1М101003 = ИмяП009П1М101003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М101003, "");
					НовИмяП009П1М102003 = ИмяП009П1М102003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М102003, "");
					НовИмяП009П1М103003 = ИмяП009П1М103003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М103003, "");
					НовИмяП009П1М104003 = ИмяП009П1М104003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М104003, "");
					НовИмяП009П1М105003 = ИмяП009П1М105003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М105003, "");
					НовИмяП009П1М106003 = ИмяП009П1М106003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М106003, "");
					НовИмяП009П1М107003 = ИмяП009П1М107003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М107003, "");
					НовИмяП009П1М108003 = ИмяП009П1М108003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М108003, "");
					НовИмяП009П1М109003 = ИмяП009П1М109003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М109003, "");
					НовИмяП009П1М110003 = ИмяП009П1М110003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М110003, "");
					НовИмяП009П1М111003 = ИмяП009П1М111003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М111003, "");
					НовИмяП009П1М112003 = ИмяП009П1М112003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М112003, "");
					НовИмяП009П1М113003 = ИмяП009П1М113003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М113003, "");
					НовИмяП009П1М114003 = ИмяП009П1М114003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М114003, "");
					НовИмяП009П1М115003 = ИмяП009П1М115003 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М115003, "");
					
					НовИмяП009П1М103001 = ИмяП009П1М103001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М103001, "");
					НовИмяП009П1М104001 = ИмяП009П1М104001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М104001, "");
					НовИмяП009П1М105001 = ИмяП009П1М105001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М105001, "");
					НовИмяП009П1М106001 = ИмяП009П1М106001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М106001, "");
					НовИмяП009П1М107001 = ИмяП009П1М107001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М107001, "");
					НовИмяП009П1М108001 = ИмяП009П1М108001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М108001, "");
					НовИмяП009П1М109001 = ИмяП009П1М109001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М109001, "");
					НовИмяП009П1М110001 = ИмяП009П1М110001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М110001, "");
					НовИмяП009П1М111001 = ИмяП009П1М111001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М111001, "");
					НовИмяП009П1М112001 = ИмяП009П1М112001 + _ИндСтрокиМнЧ;
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М112001, "");
					
					Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М100100,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М100100]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М101003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М101003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М102003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М102003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М103003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М103003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М104003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М104003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М105003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М105003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М106003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М106003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М107003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М107003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М108003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М108003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М109003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М109003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М110003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М110003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М111003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М111003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М112003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М112003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М113003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М113003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М114003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М114003]));
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М115003,
							РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М115003]));
							
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М103001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М103001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М104001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М104001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М105001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М105001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М106001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М106001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М107001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М107001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М108001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М108001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М109001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М109001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М110001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М110001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М111001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М111001]);
						ДанныеМнЧ1ДляПечати.Вставить(НовИмяП009П1М112001,
							ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП009П1М112001]);
							
					КонецЕсли;
				КонецЦикла;
				МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			КонецЦикла;
			
			// Вывод листов.
			Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
				ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
				Если НетДанныхВМнЧ(ИмяФормы, ДанныеМнЧ1ДляПечати) Тогда
					Продолжить;
				КонецЕсли;
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки"
					+ СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы,
						  		  	  СтруктураРеквизитовФормы,
						  		  	  ТабличныйДокумент,
								  	  СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1,
									  ИмяОбластиПреемника);
				КонецЦикла;
				
				Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				
				НомКИК = Ветка.Данные["П0009А0000101"];
				СтруктураПараметровРаздела.Вставить("НомКИК", НомКИК);
				
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист09Прил1");
				СтруктураПараметровРаздела.Вставить("НаименованиеЛиста",
				"Лист 09. Стр. " + Формат(ДеревоДанныхРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=") + ". Прил. 1");
				ВывестиНаПечатьЛист(ИмяФормы,
									СтруктураПараметровРаздела,
									ОбщиеРеквизитыРазделов,
									СтруктураРеквизитовФормы,
									ДанныеРазделов,
									ТабличныйДокумент);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение1" И СтраницаВключенаВСоставОтчета(ИмяФормы, ДеревоДанныхРаздела.Строки[0]) Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
		СтрокМнЧ1НаЛисте = 22;
		
		// Определение количества листов.
		КолСтрокМнЧ1 = ДанныеМнЧ1.Строки.Количество();
		ДробКол1 = КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтрокМнЧ1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП000П1М100001 = "П000П1М100001";
		ИмяП000П1М100002 = "П000П1М100002";
		ИмяП000П1М100003 = "П000П1М100003";
		ИмяП000П1М100004 = "П000П1М100004";
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				НовИмяП000П1М100001 = ИмяП000П1М100001 + _ИндСтрокиМнЧ;
				НовИмяП000П1М100002 = ИмяП000П1М100002 + _ИндСтрокиМнЧ;
				НовИмяП000П1М100003 = ИмяП000П1М100003 + _ИндСтрокиМнЧ;
				НовИмяП000П1М100004 = ИмяП000П1М100004 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100002, 0);
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100003, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100004, 0);
				
				Если КолСтрокМнЧ1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100001,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М100001]);
					
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100002,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М100002]));
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100003,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М100003]);
						
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000П1М100004,
						РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ФорматОкругленияЧисла,
						ДанныеМнЧ1.Строки[ИндСПриращением - 1].Данные[ИмяП000П1М100004]));
						
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧ1НаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки"
				+ СтруктураРеквизитовФормы.мИдГруппыП1М1
				+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы.мИдГруппыП1М1,
								  ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(ИмяФормы,
								СтруктураПараметровРаздела,
								ОбщиеРеквизитыРазделов,
								СтруктураРеквизитовФормы,
								ДанныеРазделов,
								ТабличныйДокумент);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение2" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
					Продолжить;
				КонецЕсли;
				
				// Первый лист.
				//
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
					СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
				// Вторые листы.
				//
				Если СокрЛП(Ветка.Данные["П000П20000000"]) = "00" Тогда
					
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела);
						УстановитьЧисловойФорматОбласти(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
						Для каждого Пок Из СтрокаМнЧ.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_прод");
						ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
							СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе// "ФормаОтчета2020Кв4"
			
			Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
				
				Если НЕ СтраницаВключенаВСоставОтчета(ИмяФормы, Ветка) Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				Для каждого Пок Из Ветка.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				УстановитьФорматВывода(ИмяФормы, ИмяТекРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент);
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
					СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов,
							  ТабличныйДокумент = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + СтрЗаменить(ИмяФормы, "ФормаОтчета", "") + "_";
	
	ИмяМЧБ = ПрефиксИменМакетов + СтруктураПараметров.ИмяСтраницы;
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(ИмяМЧБ);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   ТабличныйДокумент,
						   СтруктураРеквизитовФормы);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент,
								 СтруктураРеквизитовФормы)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист03В" Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
			
			МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_Лист03А");
			
		Иначе // "ФормаОтчета2022Кв4", "ФормаОтчета2021Кв4", "ФормаОтчета2020Кв4"
			
			МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_Лист03Б");
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Лист09А"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист09Б1"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист09Б2"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист09Б3"
		ИЛИ ПараметрыПечати.ИмяСтраницы = "Лист09Прил1" Тогда
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_Лист09");
	ИначеЕсли НРег(Прав(ПараметрыПечати.ИмяСтраницы, 5)) = "_прод" Тогда
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_"
		+ Лев(ПараметрыПечати.ИмяСтраницы, СтрДлина(ПараметрыПечати.ИмяСтраницы) - 5));
	Иначе
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
	КонецЕсли;
		
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
			
			НовСтр = Показатели.Добавить();
			
			НовСтр.Имя 		   = Показатель.Ключ;
			НовСтр.Значение    = Показатель.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы);
			
		КонецЦикла;
		
	Иначе
		
		ИсходныйМакет = ТабличныйДокумент;
		
		ИменаПоказателейСПереопределяемымПредставлениемНуля = СтрРазделить(
		"П000П20001003,П000П20002003,П000П20003003,П000П20004003,П000П20005003", ",", Ложь);
		
		Для Каждого Область Из ИсходныйМакет.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение = Истина Тогда
				
				НовСтр = Показатели.Добавить();
				
				НовСтр.Имя 		   = Область.Имя;
				НовСтр.Значение    = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, МакетФормыОтчета, СтруктураРеквизитовФормы);
				
				Если ПараметрыПечати.ИмяСтраницы = "Приложение2"
					И ИменаПоказателейСПереопределяемымПредставлениемНуля.Найти(Область.Имя) <> Неопределено
					И Окр(Область.Значение) = 0 Тогда
					
					НовСтр.ЗначениеМЧБ = "0--------------";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);

	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						   + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;

	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист03В" Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ПпАБ";
			НовСтр.Значение = Сред(ПараметрыПечати.НаименованиеЛиста, СтрДлина(ПараметрыПечати.НаименованиеЛиста), 1);
			НовСтр.ЗначениеМЧБ = Сред(ПараметрыПечати.НаименованиеЛиста, СтрДлина(ПараметрыПечати.НаименованиеЛиста), 1);
			
		КонецЕсли;
		
	КонецЕсли;

	Если ПараметрыПечати.ИмяСтраницы = "Лист02" Тогда
		
		ПризнакНП_Код = ПараметрыПечати["ПризнакНП_Код"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100020000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П200020000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		
		НомДок = ПараметрыПечати["НомДок"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100020000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П200020000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ЛицСер = ПараметрыПечати["ЛицСер"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			
			ЛицНом = ПараметрыПечати["ЛицНом"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			
			ЛицВид3 = ПараметрыПечати["ЛицВид3"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			
			ЛицВид4 = ПараметрыПечати["ЛицВид4"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200020000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист02_1" Тогда
		
		ПризнакНП_Код = ПараметрыПечати["ПризнакНП_Код"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100210000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		
		НомДок = ПараметрыПечати["НомДок"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100210000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ЛицСер = ПараметрыПечати["ЛицСер"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100210000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			
			ЛицНом = ПараметрыПечати["ЛицНом"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100210000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			
			ЛицВид3 = ПараметрыПечати["ЛицВид3"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100210000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			
			ЛицВид4 = ПараметрыПечати["ЛицВид4"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100210000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист02_2" Тогда
		
		ПризнакНП_Код = ПараметрыПечати["ПризнакНП_Код"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100220000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П200220000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		
		НомДок = ПараметрыПечати["НомДок"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100220000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П200220000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ЛицСер = ПараметрыПечати["ЛицСер"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100220000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200220000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			
			ЛицНом = ПараметрыПечати["ЛицНом"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100220000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200220000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			
			ЛицВид3 = ПараметрыПечати["ЛицВид3"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100220000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200220000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			
			ЛицВид4 = ПараметрыПечати["ЛицВид4"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100220000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П200220000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист02_3" Тогда
		
		ПризнакНП_Код = ПараметрыПечати["ПризнакНП_Код"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100230000100";
		НовСтр.Значение = ПризнакНП_Код;
		НовСтр.ЗначениеМЧБ = ПризнакНП_Код;
		
		НомДок = ПараметрыПечати["НомДок"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П100230000200";
		НовСтр.Значение = НомДок;
		НовСтр.ЗначениеМЧБ = НомДок;
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ЛицСер = ПараметрыПечати["ЛицСер"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100230000301";
			НовСтр.Значение = ЛицСер;
			НовСтр.ЗначениеМЧБ = ЛицСер;
			
			ЛицНом = ПараметрыПечати["ЛицНом"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100230000302";
			НовСтр.Значение = ЛицНом;
			НовСтр.ЗначениеМЧБ = ЛицНом;
			
			ЛицВид3 = ПараметрыПечати["ЛицВид3"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100230000303";
			НовСтр.Значение = ЛицВид3;
			НовСтр.ЗначениеМЧБ = ЛицВид3;
			
			ЛицВид4 = ПараметрыПечати["ЛицВид4"];
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100230000304";
			НовСтр.Значение = ЛицВид4;
			НовСтр.ЗначениеМЧБ = ЛицВид4;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист09Б2" Тогда
		
		НомКИК = ПараметрыПечати["НомКИК"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П1009А0000101";
		НовСтр.Значение = НомКИК;
		НовСтр.ЗначениеМЧБ = НомКИК;
		
		КодВал = ПараметрыПечати["КодВал"];
		НовСтр = Показатели.Добавить();
		НовСтр.Имя = "П109Б20000200";
		НовСтр.Значение = КодВал;
		НовСтр.ЗначениеМЧБ = КодВал;
		
	КонецЕсли;

	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
								ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
									ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заполнить область ""%1""';
							|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы)
	
	ФорматОбласти = "";
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Если НЕ Область = Неопределено
		   И Область.ТипЗначения.КвалификаторыЧисла.Разрядность
		   = СтруктураРеквизитовФормы.ОписаниеТиповЧислоЕ.КвалификаторыЧисла.Разрядность
		   И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти
		   = СтруктураРеквизитовФормы.ОписаниеТиповЧислоЕ.КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
			
			СоотвСтрокаФормата.Вставить("ЧДЦ", "0");
			СоотвСтрокаФормата.Вставить("ЧРД", ",");
			СоотвСтрокаФормата.Вставить("ЧС", "0");
			
		КонецЕсли;
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	
	КореньИмениОбласти = Неопределено;
	
	СтрИндексЗнакоместа = "";
	
	ИндексЗнакоместа = 0;
	
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
		
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);

КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы,
								   Область,
								   Знач Значение,
								   ИндексЗнакоместа = 0,
								   Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь,
							Элементы = Неопределено) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для Каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для Каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Если Элементы = Неопределено Тогда
				ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			Иначе
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для Каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;

		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для Каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина,
						  Элементы);
		
	КонецЦикла;

КонецПроцедуры

Функция СтраницаВключенаВСоставОтчета(ИмяФормы, Страница)
	
	Если Страница.Данные.Свойство("ПризнакВключения") Тогда
		Возврат ЗначениеЗаполнено(Страница.Данные["ПризнакВключения"]);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьУсловияПечати(ИмяФормы, ДанныеРаздела, Знач Печать09Бх)
	
	Печать09Бх.Вставить("ПечататьБ1",   ЗначениеЗаполнено(ДанныеРаздела["П0009А0000100"]));
	Печать09Бх.Вставить("ПечататьБ2и3", ЗначениеЗаполнено(ДанныеРаздела["П0009А0000200"]));
	
	Для каждого Показатель Из ДанныеРаздела Цикл
		
		Ключ = Показатель.Ключ;
		Значение = Показатель.Значение;
		
		Если СтрНачинаетсяС(Ключ, "П009Б2") Тогда
			
			Если ЗначениеЗаполнено(Значение) Тогда
				
				Печать09Бх.Вставить("ЗаполненБ2", Истина);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Показатель Из ДанныеРаздела Цикл
		
		Ключ = Показатель.Ключ;
		Значение = Показатель.Значение;
		
		Если СтрНачинаетсяС(Ключ, "П009Б3") Тогда
			
			Если ЗначениеЗаполнено(Значение) Тогда
				
				Печать09Бх.Вставить("ЗаполненБ3", Истина);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НетДанныхВМнЧ(ИмяФормы, ДанныеМнЧ)
	
	Для каждого Показатель Из ДанныеМнЧ Цикл
		
		Значение = Показатель.Значение;
		
		Если ЗначениеЗаполнено(Значение) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьЧисловойФорматОбласти(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент) Экспорт
	
	Если ИмяРаздела = "Лист02_5" Тогда
		ТабличныйДокумент.Области["П000250004003"].ТипЗначения = СтруктураРеквизитовФормы.ТипНеотрицательноеЧислоДНБ;
	ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ТабличныйДокумент.Области["П000260004003"].ТипЗначения = СтруктураРеквизитовФормы.ТипНеотрицательноеЧислоДНБ;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
			
			ТабличныйДокумент.Области["П0026а0003403"].ТипЗначения = СтруктураРеквизитовФормы.ТипЧислоДНБ;
			ТабличныйДокумент.Области["П0026а0004003"].ТипЗначения = СтруктураРеквизитовФормы.ТипНеотрицательноеЧислоДНБ;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист09" Тогда
		ТабличныйДокумент.Области["П0009А0001001"].ТипЗначения = СтруктураРеквизитовФормы.ТипНеотрицательноеЧислоДНБ;
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4") Тогда
			
			Для каждого Обл Из ТабличныйДокумент.Области Цикл
				Если СтрНачинаетсяС(Обл.Имя, "П000П2М104003") Тогда
					Обл.ТипЗначения = СтруктураРеквизитовФормы.ТипНеотрицательноеЧислоДНБ;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФорматВывода(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент) Экспорт
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом = ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела);
	
	ИменаНемногострочныхПоказателей = ИменаЧисловыхПоказателейСНастраиваемымФорматом["ИменаНемногострочныхПоказателей"];
	ИменаМногострочныхПоказателей   = ИменаЧисловыхПоказателейСНастраиваемымФорматом["ИменаМногострочныхПоказателей"];
	
	Для Каждого ИмяПоказателя Из ИменаНемногострочныхПоказателей Цикл
		
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
		ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
		ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
		Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
			ЧислоЕЗнак = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
				ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
		КонецЕсли;
		ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
		ФорматируемаяОбласть.Формат
		= "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
		
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из ИменаМногострочныхПоказателей Цикл
		
		Если ИмяПоказателя = "П00013М204003"
			И (ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв4")
			ИЛИ ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4")) Тогда
			
			Для Каждого ФорматируемаяОбласть Из ТабличныйДокумент.Области Цикл
				
				Если СтрНачинаетсяС(ФорматируемаяОбласть.Имя, ИмяПоказателя) Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число",
							Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
							ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность
						+ СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			НСтр = 1;
			
			Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")) <> Неопределено Цикл
				
				ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
				ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
						Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
						ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность
					+ СтруктураРеквизитовФормы.мСтрокаФормата;
				НСтр = НСтр + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли