// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(П.ДеревоДляЗагрузки, "МнУр"); // для определения многоуровневых разделов
	
	ПрототипОбязательногоУзлаАтрибута = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/@НомКорр")[0];
	
	НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/Прибыль");
	
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		
		НайденныйУзел.МнУр = Истина;
		
		НайденныйУзел.Обязательность = НайденныйУзел.Обязательность + "П";
		
		ИмяПредыдущегоРаздела = "";
		
		НайденныеУзлыИерархия = УзлыПоXPath(НайденныйУзел, "//node()"); // вся иерархия подчиненных узлов любого типа
		Для Каждого ТекущийУзел Из НайденныеУзлыИерархия Цикл
			ТекущийУзел.МнУр = Истина;
			
			Если ТекущийУзел.Обязательность = "ОМ" ИЛИ ТекущийУзел.Обязательность = "НМ" Тогда
				Если НЕ ТекущийУзел.Многостраничность И НЕ ТекущийУзел.Многострочность Тогда
					ТекущийУзел.Многостраничность = МногостраничностьУзла(ТекущийУзел); // попытаемся автоматически назначить признак многостраничности
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущийУзел.Код = "РасчНалКИК" И ТекущийУзел.Раздел = "Лист09" Тогда
				ТекущийУзел.Раздел = "";
			КонецЕсли;
			
			Если (ТекущийУзел.Тип = "C" ИЛИ ТекущийУзел.Тип = "С") И ЗначениеЗаполнено(ТекущийУзел.Раздел) И (ТекущийУзел.Раздел <> ИмяПредыдущегоРаздела) Тогда
				УзелПризнакВключения = СкопированныйУзел(ТекущийУзел, ПрототипОбязательногоУзлаАтрибута);
				УзелПризнакВключения.МнУр = Истина;
				УзелПризнакВключения.Раздел = ?(Лев(ТекущийУзел.Раздел, 7) = "Лист02_", "Лист02", ТекущийУзел.Раздел);
				УзелПризнакВключения.Ключ = "ПризнакВключения";
				УзелПризнакВключения.Код = "ПризнакВключения";
				УзелПризнакВключения.ЗначениеПоУмолчанию = "";
				УзелПризнакВключения.Формат = "T";
				
				ИмяПредыдущегоРаздела = ТекущийУзел.Раздел;
			КонецЕсли;
			
			Если Лев(ТекущийУзел.Раздел, 7) = "Лист02_" Тогда
				ТекущийУзел.Раздел = "Лист02";
			КонецЕсли;
			
			Если ТекущийУзел.Ключ = "П009Б10000100" Тогда// добавим узлы для невыгружаемых показателей
				УзелСтатьяНК = СкопированныйУзел(ТекущийУзел.Родитель, ТекущийУзел);
				УзелСтатьяНК.МинРазмерность = "";
				УзелСтатьяНК.Код = "СтатьяНК";
				УзелСтатьяНК.Ключ = "П0009А0000100";
			ИначеЕсли ТекущийУзел.Ключ = "П009Б20000100" Тогда
				УзелСтатьяНК = СкопированныйУзел(ТекущийУзел.Родитель, ТекущийУзел);
				УзелСтатьяНК.МинРазмерность = "";
				УзелСтатьяНК.Код = "СтатьяНК";
				УзелСтатьяНК.Ключ = "П0009А0000200";
			ИначеЕсли ТекущийУзел.Ключ = "П009Б30000100" Тогда
				УзелСтатьяНК = СкопированныйУзел(ТекущийУзел.Родитель, ТекущийУзел);
				УзелСтатьяНК.МинРазмерность = "";
				УзелСтатьяНК.Код = "СтатьяНК";
				УзелСтатьяНК.Ключ = "П0009А0000200";
			КонецЕсли;
			
			Если      ТекущийУзел.Ключ = "П10011М104003" Тогда
				ТекущийУзел.Ключ = "П00011М104003"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П10011М107003" Тогда
				ТекущийУзел.Ключ = "П00011М107003"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П100020017103" Тогда
				ТекущийУзел.Ключ = "П000020017103"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П100250006103" Тогда
				ТекущийУзел.Ключ = "П000250006103"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П100250010003" Тогда
				ТекущийУзел.Ключ = "П000250010003"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П100260010003" Тогда
				ТекущийУзел.Ключ = "П000260010003"; // обработаем в структуре данных документа
			ИначеЕсли ТекущийУзел.Ключ = "П1026а0006103" Тогда
				ТекущийУзел.Ключ = "П0026а0006103"; // обработаем в структуре данных документа
			КонецЕсли;
			
			Если ТекущийУзел.Код = "ИННЮЛ_Контрагент" И ТекущийУзел.Раздел = "Лист08" Тогда
				ТекущийУзел.Обязательность = "О";
			ИначеЕсли ТекущийУзел.Код = "ОснСделКонтр" И ТекущийУзел.Раздел = "Лист08" Тогда
				ТекущийУзел.Обязательность = ТекущийУзел.Обязательность + "П";
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/Прибыль/РаспрНалСубРФ");
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.Обязательность = НайденныйУзел.Обязательность + "П";
	КонецЦикла;
	
	НайденныеУзлы = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/Прибыль/ДохРасхКор");
	Для Каждого НайденныйУзел Из НайденныеУзлы Цикл
		НайденныйУзел.Обязательность = НайденныйУзел.Обязательность + "П";
	КонецЦикла;
	
	НайденныеСтроки = П.ДеревоДляЗагрузки.Строки.НайтиСтроки(Новый Структура("Код,Раздел", "РасчНал", "Лист02"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Многостраничность = Истина;
		УзлыПодчиненныхРазделов = УзлыПоXPath(СтрокаДерева, "*"); // все подчиненные разделы
		Для Каждого УзелРаздела Из УзлыПодчиненныхРазделов Цикл
			УзелРаздела.Обязательность = УзелРаздела.Обязательность + "П";
			Если УзелРаздела.Код = "ДохРасхУчГрупНБ" Тогда
				УзлыДохРасхУчГрупНБ = УзлыПоXPath(УзелРаздела, "*");
				Для Каждого УзелДохРасхУчГрупНБ Из УзлыДохРасхУчГрупНБ Цикл
					УзелДохРасхУчГрупНБ.Обязательность = УзелДохРасхУчГрупНБ.Обязательность + "П";
				КонецЦикла;
			ИначеЕсли УзелРаздела.Код = "ИнвНалВыч" Тогда
				УзлыИнвНалВыч = УзлыПоXPath(УзелРаздела, "*");
				Для Каждого УзелИнвНалВыч Из УзлыИнвНалВыч Цикл
					УзелИнвНалВыч.Обязательность = "НМП";
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	ПериодОтчета = П.ПараметрыОтчета.Период;
	ДокументОтчетаОбъект = П.ДанныеОтчета.ДокументОтчетаОбъект;
	
	УстановитьПериод = Ложь;
	Если СокрЛП(ПериодОтчета) = "34" И ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Год Тогда
		ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Квартал;
		УстановитьПериод = Истина;
	КонецЕсли;
	
	ОтчетныйМесяц = Месяц(ДокументОтчетаОбъект.ДатаОкончания);
	ЭтоПериодичностьКвартал = (ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Квартал);
	ЭтоПериодичностьМесяц = (ДокументОтчетаОбъект.Периодичность = Перечисления.Периодичность.Месяц);
	
	Титульный = Неопределено;
	
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		Титульный.НалоговыйОрган = П.ПараметрыОтчета.КодНО;
		Титульный.ПоМесту        = П.ПараметрыОтчета.ПоМесту;
		Титульный.Период         = П.ПараметрыОтчета.Период;
		
		Если ЗначениеЗаполнено(П.ПараметрыОтчета.ФормРеорг) Тогда
			Титульный.КодФормыРеорганизации          = П.ПараметрыОтчета.ФормРеорг;
			Титульный.ИННРеорганизованнойОрганизации = П.ПараметрыОтчета.ИННРеорг;
			Титульный.КППРеорганизованнойОрганизации = П.ПараметрыОтчета.КППРеорг;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонЛист02 = П.ПараметрыОтчета.ШаблоныДанныхМногоуровневыхРазделов["Лист02"];
	
	УзелПрибыль = УзлыПоXPath(П.ДеревоДляЗагрузки, "//Документ/Прибыль")[0]; // содержательная часть
	
	НайденныеСтроки = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код", "ПризнакВключения"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Значение = "V";
	КонецЦикла;
	
	НайденныеСтроки = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код", "СтатьяНК"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		СтрокаДерева.Значение = "Х";
	КонецЦикла;
	
	НайденныеСтроки = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код", "НалПУ"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если СтрокаДерева.Ключ = "П00011М104003" И Лев(СтрокаДерева.Значение, 1) = "-" Тогда
			СтрокаДерева.Значение = Сред(СтрокаДерева.Значение, 2);
			СтрокаДерева.Ключ = "П00011М105003";
		ИначеЕсли СтрокаДерева.Ключ = "П00011М107003" И Лев(СтрокаДерева.Значение, 1) = "-"  Тогда
			СтрокаДерева.Значение = Сред(СтрокаДерева.Значение, 2);
			СтрокаДерева.Ключ = "П00011М108003";
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код", "СумНалП"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если СтрокаДерева.Ключ = "П000250010003" И Лев(СтрокаДерева.Значение, 1) = "-" Тогда
			СтрокаДерева.Значение = Сред(СтрокаДерева.Значение, 2);
			СтрокаДерева.Ключ = "П000250011003";
		ИначеЕсли СтрокаДерева.Ключ = "П000260010003" И Лев(СтрокаДерева.Значение, 1) = "-"  Тогда
			СтрокаДерева.Значение = Сред(СтрокаДерева.Значение, 2);
			СтрокаДерева.Ключ = "П000260011003";
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = УзелПрибыль.Строки.НайтиСтроки(Новый Структура("Код", "ЗакУстСтавНал"), Истина);
	Для Каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если (СтрокаДерева.Ключ = "П000020017103"
		  ИЛИ СтрокаДерева.Ключ = "П000250006103"
		  ИЛИ СтрокаДерева.Ключ = "П0026а0006103")
		    И ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
			
			СтрокаДерева.МинРазмерность = "";
			
			ЭлементыСтроки = СтрРазделить(СтрокаДерева.Значение, "/");
			СтрокаДерева.Значение = ЭлементыСтроки[0];
			
			НовыйУзел1 = СкопированныйУзел(СтрокаДерева.Родитель, СтрокаДерева);
			НовыйУзел1.Код = НовыйУзел1.Код + "1";
			НовыйУзел1.Ключ = Лев(НовыйУзел1.Ключ, 12) + "4";
			НовыйУзел1.Значение = ?(ЭлементыСтроки.ВГраница() < 1, "", ЭлементыСтроки[1]);
			
			НовыйУзел2 = СкопированныйУзел(СтрокаДерева.Родитель, СтрокаДерева);
			НовыйУзел2.Код = НовыйУзел2.Код + "2";
			НовыйУзел2.Ключ = Лев(НовыйУзел2.Ключ, 12) + "5";
			НовыйУзел2.Значение = ?(ЭлементыСтроки.ВГраница() < 2, "", ЭлементыСтроки[2]);
			
			НовыйУзел3 = СкопированныйУзел(СтрокаДерева.Родитель, СтрокаДерева);
			НовыйУзел3.Код = НовыйУзел3.Код + "3";
			НовыйУзел3.Ключ = Лев(НовыйУзел3.Ключ, 12) + "6";
			НовыйУзел3.Значение = ?(ЭлементыСтроки.ВГраница() < 3, "", ЭлементыСтроки[3]);
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЭтоПериодичностьКвартал ИЛИ ОтчетныйМесяц = 12 Тогда
		УзлыМесАвПлат = УзлыПоXPath(УзелПрибыль, "//@МесАвПлат"); // Выборка "П000250012003, П000260012003"
		Для Каждого УзелМесАвПлат Из УзлыМесАвПлат Цикл
			УзелМесАвПлат.Ключ = "";
		КонецЦикла;
	КонецЕсли;
	
	Если (НЕ ЭтоПериодичностьКвартал ИЛИ ОтчетныйМесяц <> 9) И (НЕ ЭтоПериодичностьМесяц ИЛИ ОтчетныйМесяц <> 11) Тогда
		УзлыМесАвПлат1КвСлед = УзлыПоXPath(УзелПрибыль, "//@МесАвПлат1КвСлед"); // Выборка "П000250012103, П000260012103"
		Для Каждого УзелМесАвПлат1КвСлед Из УзлыМесАвПлат1КвСлед Цикл
			УзелМесАвПлат1КвСлед.Ключ = "";
		КонецЦикла;
	КонецЕсли;
	
	УзлыЛист08 = УзлыПоXPath(УзелПрибыль, "ДохРасхКор"); // Выборка "Лист08"
	Для Каждого УзелЛист08 Из УзлыЛист08 Цикл
		НазваниеКонтрагента = "";
		
		УзлыФЛ = УзлыПоXPath(УзелЛист08, "ФЛ_Контрагент");
		Если ЗначениеЗаполнено(УзлыФЛ) Тогда
			УзелФамилия = Неопределено;
			Если ЗначениеЗаполнено(УзлыПоXPath(УзлыФЛ[0], "ФИО_КонтрагентЛат")) Тогда
				НазваниеКонтрагента = "Иностранный гражданин или лицо без гражданства";
				УзелФамилия = УзлыПоXPath(УзлыФЛ[0], "ФИО_КонтрагентЛат/@Фамилия")[0];
			ИначеЕсли ЗначениеЗаполнено(УзлыПоXPath(УзлыФЛ[0], "ФИО_Контрагент")) Тогда
				УзелФамилия = УзлыПоXPath(УзлыФЛ[0], "ФИО_Контрагент/@Фамилия")[0];
				УзелИмя = УзлыПоXPath(УзлыФЛ[0], "ФИО_Контрагент/@Имя")[0];
				Если ЗначениеЗаполнено("" + УзелФамилия.Значение + УзелИмя.Значение) Тогда
					НазваниеКонтрагента = "Индивидуальный предприниматель";
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(НазваниеКонтрагента) И УзелФамилия <> Неопределено Тогда
				НовыйУзелКонтрагент = СкопированныйУзел(УзелФамилия.Родитель, УзелФамилия);
				НовыйУзелКонтрагент.МинРазмерность = 1000;
				НовыйУзелКонтрагент.Код = "НазваниеКонтрагента";
				НовыйУзелКонтрагент.Ключ = "П000080000701";
				НовыйУзелКонтрагент.Значение = НазваниеКонтрагента;
			КонецЕсли;
		КонецЕсли;
			
		УзлыОрг = УзлыПоXPath(УзелЛист08, "Орг_Контрагент");
		Если ЗначениеЗаполнено(УзлыОрг) И ПустаяСтрока(НазваниеКонтрагента) Тогда
			УзлыКонтрагент = УзлыПоXPath(УзлыОрг[0], "@НаимОрг_Контрагент");
			Если ЗначениеЗаполнено(УзлыПоXPath(УзлыОрг[0], "@НаимОрг_КонтрагентЛат")) Тогда
				Если ЗначениеЗаполнено(УзлыПоXPath(УзелЛист08, "@РегНомКонтрагент")) Тогда
					НазваниеКонтрагента = "Иностранная организация";
				ИначеЕсли ЗначениеЗаполнено(УзлыКонтрагент) И ЗначениеЗаполнено(УзлыКонтрагент[0].Значение) Тогда
					НазваниеКонтрагента = "";
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(УзлыКонтрагент) И ЗначениеЗаполнено(УзлыКонтрагент[0].Значение) Тогда
				НазваниеКонтрагента = "Российская организация";
			КонецЕсли;
			Если ЗначениеЗаполнено(НазваниеКонтрагента) Тогда
				НовыйУзелКонтрагент = СкопированныйУзел(УзлыКонтрагент[0].Родитель, УзлыКонтрагент[0]);
				НовыйУзелКонтрагент.Код = "НазваниеКонтрагента";
				НовыйУзелКонтрагент.Ключ = "П000080000701";
				НовыйУзелКонтрагент.Значение = НазваниеКонтрагента;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УзлыЛист09 = УзлыПоXPath(УзелПрибыль, "РасчНалКИК/СведКИК"); // Выборка "Лист09"
	Для Каждого УзелЛист09 Из УзлыЛист09 Цикл
		УзлыИсчислНал = УзлыПоXPath(УзелЛист09, "РасчНал1.1.309.1/@ИсчислНал");
		Если ЗначениеЗаполнено(УзлыИсчислНал) Тогда
			Если ЗначениеЗаполнено(УзлыИсчислНал[0].Значение) Тогда
				ИсчислНал = ЧислоИзСтроки(УзлыИсчислНал[0].Значение);
				УзлыНалБазаИсчРуб = УзлыПоXPath(УзелЛист09, "РасчНал1.1.309.1/@НалБазаИсчРуб");
				Если ЗначениеЗаполнено(УзлыНалБазаИсчРуб) Тогда
					НалБазаИсчРуб = ЧислоИзСтроки(УзлыНалБазаИсчРуб[0].Значение);
					НалоговаяСтавка = ?(НалБазаИсчРуб = 0, 20, Окр(100 * ИсчислНал / НалБазаИсчРуб, 2));
					НовыйУзелНС = СкопированныйУзел(УзлыНалБазаИсчРуб[0].Родитель, УзлыНалБазаИсчРуб[0]);
					НовыйУзелНС.Код = "НалоговаяСтавка";
					НовыйУзелНС.Ключ = "П009Б10020500";
					НовыйУзелНС.Значение = Формат(НалоговаяСтавка, "ЧДЦ=2; ЧРД=.; ЧГ=");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		УзлыИсчислНал = УзлыПоXPath(УзелЛист09, "РасчНал2.1.309.1/@ИсчислНал");
		Если ЗначениеЗаполнено(УзлыИсчислНал) Тогда
			Если ЗначениеЗаполнено(УзлыИсчислНал[0].Значение) Тогда
				ИсчислНал = ЧислоИзСтроки(УзлыИсчислНал[0].Значение);
				УзлыНалБазаИсчРуб = УзлыПоXPath(УзелЛист09, "РасчНал2.1.309.1/@НалБазаИсчРуб");
				Если ЗначениеЗаполнено(УзлыНалБазаИсчРуб) Тогда
					НалБазаИсчРуб = ЧислоИзСтроки(УзлыНалБазаИсчРуб[0].Значение);
					НалоговаяСтавка = ?(НалБазаИсчРуб = 0, 20, Окр(100 * ИсчислНал / НалБазаИсчРуб, 2));
					НовыйУзелНС = СкопированныйУзел(УзлыНалБазаИсчРуб[0].Родитель, УзлыНалБазаИсчРуб[0]);
					НовыйУзелНС.Код = "НалоговаяСтавка";
					НовыйУзелНС.Ключ = "П009Б20022500";
					НовыйУзелНС.Значение = Формат(НалоговаяСтавка, "ЧДЦ=2; ЧРД=.; ЧГ=");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелПрибыль, П.ДанныеОтчета, П.ПараметрыОтчета);
	
	Лист02 = Неопределено;
	
	П.ДанныеОтчета.ДанныеМногоуровневыхРазделов.Свойство("Лист02", Лист02);
	Если Лист02 <> Неопределено Тогда
		Для Каждого СтраницаПервогоУровня Из Лист02.Строки Цикл
			Для Каждого СтраницаВторогоУровня Из СтраницаПервогоУровня.Строки Цикл
				Если СтраницаПервогоУровня.Строки.Индекс(СтраницаВторогоУровня) > 1 Тогда
					Продолжить;
				КонецЕсли;
				// Очистим признаки включения подразделов перед загрузкой.
				Для Каждого СтраницаРаздела Из СтраницаВторогоУровня.Строки Цикл
					ДанныеРаздела = СтраницаРаздела.Данные;
					ЗначениеПоказателя = "";
					Если ДанныеРаздела.Свойство("ПризнакВключения", ЗначениеПоказателя)
					   И ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
						ДанныеРаздела["ПризнакВключения"] = "";
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	НомСтраницы = Новый Массив(2);
	НомСтраницыМн = Новый Массив(3);
	УзлыЛист2 = УзлыПоXPath(УзелПрибыль, "РасчНал"); // Страницы "Лист 02"
	
	Для НомСтрУр1 = 1 По УзлыЛист2.Количество() Цикл
		НомСтраницы[0] = НомСтрУр1;
		НомСтраницыМн[0] = НомСтрУр1;
		СтраницаРаздела = УзлыЛист2[НомСтрУр1 - 1];
		
		УзлыЛист21 = УзлыПоXPath(СтраницаРаздела, "ДохРеалВнеРеал"); // "Листы 02.1"
		Для НомСтрУр2 = 1 По УзлыЛист21.Количество() Цикл
			НомСтраницы[1] = 1;
			УзелЛист21 = УзлыЛист21[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист21, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, Новый Массив);
		КонецЦикла;
		
		УзлыЛист22 = УзлыПоXPath(СтраницаРаздела, "РасхРеалВнеРеал"); // "Листы 02.2"
		Для НомСтрУр2 = 1 По УзлыЛист22.Количество() Цикл
			НомСтраницы[1] = 2;
			УзелЛист22 = УзлыЛист22[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист22, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, Новый Массив);
		КонецЦикла;
		
		УзлыЛист23 = УзлыПоXPath(СтраницаРаздела, "РасчРасхОпер"); // "Листы 02.3"
		Для НомСтрУр2 = 1 По УзлыЛист23.Количество() Цикл
			НомСтраницы[1] = 3;
			УзелЛист23 = УзлыЛист23[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист23, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, Новый Массив);
		КонецЦикла;
		
		УзлыЛист26бА = УзлыПоXPath(СтраницаРаздела, "ДохРасхУчГрупНБ/СумНБУчастКГН"); // "Листы 02.6бА"
		Для НомСтрУр2 = 1 По УзлыЛист26бА.Количество() Цикл
			НомСтраницы[1] = 7;
			УзелЛист26бА = УзлыЛист26бА[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист26бА, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, Новый Массив);
		КонецЦикла;
		
		// Многостраничные подразделы.
		
		ШаблонЛист02.Строки[0].Строки[3].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист24 = УзлыПоXPath(СтраницаРаздела, "УбытУменНБ"); // "Листы 02.4"
		Для НомСтрУр2 = 1 По УзлыЛист24.Количество() Цикл
			НомСтраницыМн[1] = 4; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист24 = УзлыЛист24[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист24, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[4].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист25 = УзлыПоXPath(СтраницаРаздела, "РаспрНалСубРФ"); // "Листы 02.5"
		Для НомСтрУр2 = 1 По УзлыЛист25.Количество() Цикл
			НомСтраницыМн[1] = 5; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист25 = УзлыЛист25[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист25, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[5].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист26 = УзлыПоXPath(СтраницаРаздела, "РасчНалГруп"); // "Листы 02.6", "Листы 02.6а"
		Для НомСтрУр2 = 1 По УзлыЛист26.Количество() Цикл
			НомСтраницыМн[1] = 6; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист26 = УзлыЛист26[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист26, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[7].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист26бБ = УзлыПоXPath(СтраницаРаздела, "ДохРасхУчГрупНБ/ДохРасхУчастКГН"); // "Листы 02.6бБ"
		Для НомСтрУр2 = 1 По УзлыЛист26бБ.Количество() Цикл
			НомСтраницыМн[1] = 8; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист26бБ = УзлыЛист26бБ[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист26бБ, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[8].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист27А = УзлыПоXPath(СтраницаРаздела, "ИнвНалВыч/РасчИнвВыч"); // "Листы 02.7А"
		Для НомСтрУр2 = 1 По УзлыЛист27А.Количество() Цикл
			НомСтраницыМн[1] = 9; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист27А = УзлыЛист27А[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист27А, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[9].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист27Б = УзлыПоXPath(СтраницаРаздела, "ИнвНалВыч/ПредВелИнвНеОб"); // "Листы 02.7Б"
		Для НомСтрУр2 = 1 По УзлыЛист27Б.Количество() Цикл
			НомСтраницыМн[1] = 10; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист27Б = УзлыЛист27Б[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист27Б, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[10].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист27В = УзлыПоXPath(СтраницаРаздела, "ИнвНалВыч/ПредВелИнвОб"); // "Листы 02.7В"
		Для НомСтрУр2 = 1 По УзлыЛист27В.Количество() Цикл
			НомСтраницыМн[1] = 11; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист27В = УзлыЛист27В[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист27В, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
		ШаблонЛист02.Строки[0].Строки[11].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
		УзлыЛист27Г = УзлыПоXPath(СтраницаРаздела, "ИнвНалВыч/УмСумИнвВыч"); // "Листы 02.7Г"
		Для НомСтрУр2 = 1 По УзлыЛист27Г.Количество() Цикл
			НомСтраницыМн[1] = 12; НомСтраницыМн[2] = НомСтрУр2;
			УзелЛист27Г = УзлыЛист27Г[НомСтрУр2 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист27Г, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн, Новый Массив);
		КонецЦикла;
		
	КонецЦикла;
	
	НомСтраницыМн = Новый Массив(3);
	ШаблонЛист02.Строки[0].Строки[4].Данные = Новый Структура(); // Группа не будет пропущена алгоритмом загрузки
	УзлыЛист25 = УзлыПоXPath(УзелПрибыль, "РаспрНалСубРФ"); // "Листы 02.5" отдельно
	Для НомСтрУр2 = 1 По УзлыЛист25.Количество() Цикл
		НомСтраницыМн[0] = 1;
		НомСтраницыМн[1] = 5;
		НомСтраницыМн[2] = НомСтрУр2;
		УзелЛист25 = УзлыЛист25[НомСтрУр2 - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист25, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницыМн);
	КонецЦикла;
	
	НомСтраницы = Новый Массив(1);
	УзлыЛист08 = УзлыПоXPath(УзелПрибыль, "ДохРасхКор"); // "Листы 08"
	Для НомСтрУр1 = 1 По УзлыЛист08.Количество() Цикл
		НомСтраницы[0] = НомСтрУр1;
		УзелЛист08 = УзлыЛист08[НомСтрУр1 - 1];
		ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелЛист08, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы);
		
		НомСтроки = Новый Массив(1);
		УзлыОснСделКонтр = УзлыПоXPath(УзелЛист08, "ОснСделКонтр");
		Для НомСтрокиУр1 = 1 По УзлыОснСделКонтр.Количество() Цикл
			НомСтроки[0] = НомСтрокиУр1;
			УзелОснСделКонтр = УзлыОснСделКонтр[НомСтрокиУр1 - 1];
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелОснСделКонтр, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, НомСтроки);
		КонецЦикла;
	КонецЦикла;
	
#КонецОбласти