
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	ЕстьУведомленияПоКИК = ОбщегоНазначения.ПодсистемаСуществует(
	"РегламентированнаяОтчетность.СообщенияВКонтролирующиеОрганы.СообщенияХолдингов")
	И (Метаданные.Отчеты.Найти("РегламентированноеУведомлениеКИК") <> Неопределено)
	И ЕстьДоступныеУведомленияПоКИК();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		Элементы.ФормаОткрытьФормуКонтекстныхНовостей.Видимость = Истина;
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.Отчет.РегламентированныйОтчетПрибыль",
			ИмяФормыОтчета(ЭтаФорма.ИмяФормы),
			,
			НСтр("ru = 'Новости: Декларация по налогу на прибыль организаций';
				|en = 'Новости: Декларация по налогу на прибыль организаций'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОбъектОтчета.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.ИнициализироватьОбычныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы,
												мСтруктураМногоуровневыхРазделов,
												СтруктураДанныхРазделов);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗначениеВДанныеФормы(ОбъектОтчета.СтруктураСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма),
						 ЭтаФорма["мДеревоСтраницОтчета"]);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			УстановитьЗначенияПоУмолчанию();
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ОбъектОтчета.ЗаполнитьСоответствиеНомераМесяцаКодуОтчетногоПериода(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ПоказатьПериод(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	ТабличныйДокумент, СтруктураРеквизитовФормы);
	
	ОбработатьНаличиеОтсутствиеОбособленныхПодразделений(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													СтруктураРеквизитовФормы,
													ДатаПодписи,
													ТабличныйДокумент);
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
			ОчиститьЗначенияПоказателейНеЗаполняемыхПоУсловию();
			
			РасчетНаСервере();
			
			ОбъектОтчета.ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1_2");
			
			СформироватьРаздел1_2();
			
			ОбъектОтчета.ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1_1");
			
			СформироватьРаздел1_1();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	ОбъектОтчета.УстановитьФорматВывода(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела,
										СтруктураРеквизитовФормы,
										ТабличныйДокумент);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	ПолучитьНалоговыеОрганы();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов)
	
	Если СтруктураДанныхРазделов.СтруктураДанныхТитульный.Количество() > 0 Тогда
		ЭтаФорма.СтруктураДанныхТитульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНалоговыеОрганы() Экспорт
	
	СтруктураРеквизитовФормы.НалоговыеОрганы.Очистить();
	
	МассивНО = Новый Массив;
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьНалоговыеОрганы(СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, МассивНО, "РегламентированныйОтчетПрибыль");
	
	Для Каждого НалоговыйОрган Из МассивНО Цикл
		ДобавленныйНО = СтруктураРеквизитовФормы.НалоговыеОрганы.Добавить(НалоговыйОрган);
		ДобавленныйНО.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	СтрокаСведений = "КППЮЛ, ОКТМО, СтавкаПрибФед, СтавкаПрибРесп";
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СтрокаСведений);
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ОргСведения);
	РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
	СтруктураПараметров);
	
	КПП = СокрЛП(ОргСведения.КППЮЛ);
	
	Если ЗначениеЗаполнено(КПП) Тогда
		КодПричиныПостановкиНаУчет = Сред(КПП, 5, 2);
		Если КодПричиныПостановкиНаУчет = "4U" Тогда
			СтруктураРеквизитовФормы.мПоМесту = "218";
		ИначеЕсли КодПричиныПостановкиНаУчет = "50" Тогда
			СтруктураРеквизитовФормы.мПоМесту = "213";
		ИначеЕсли РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
			<> СтруктураРеквизитовФормы.Организация Тогда
			СтруктураРеквизитовФормы.мПоМесту = "220";
		КонецЕсли;
	КонецЕсли;
	
	ПоМесту = СтруктураРеквизитовФормы.мПоМесту;
	
	СтруктураДанныхТитульный.Вставить("ПоМесту", ПоМесту);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ТабличныйДокумент.Области.ПоМесту.Значение = ПоМесту;
	КонецЕсли;
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОтчетЗаКвартал = (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
	
	Ветка = ДеревоРаздела.Строки[0];
	
	Ветка.Данные.Вставить("ПризнакВключения", "V");
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
	
	СтрокаМнЧ = ДанныеМнЧ.Строки[0];
	СтрокаМнЧ.Данные.Вставить("П00011М101003", СокрЛП(ОргСведения.ОКТМО));
	
	Если ПоМесту = "218" Тогда
		
		СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КГН);
		СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ_КГН);
		
	Иначе
		
		СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
		СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
	Ветка = ДеревоРаздела.Строки[0];
	
	Если ПоМесту = "220" ИЛИ ПоМесту = "223" Тогда
		
		Ветка_Лист02_5 = Ветка.Строки[4].Строки[0];
		Ветка_Лист02_5.Данные.Вставить("ПризнакВключения", "V");
		Ветка_Лист02_5.Данные.Вставить("П000250000100", "01");
		
	Иначе
		
		СтавкаФедеральная = 0;
		Если ОргСведения.Свойство("СтавкаПрибФед") И ТипЗнч(ОргСведения["СтавкаПрибФед"]) = Тип("Число") Тогда
			СтавкаФедеральная = ОргСведения["СтавкаПрибФед"];
		КонецЕсли;
		
		СтавкаСубъекта = 0;
		Если ОргСведения.Свойство("СтавкаПрибРесп") И ТипЗнч(ОргСведения["СтавкаПрибРесп"]) = Тип("Число") Тогда
			СтавкаСубъекта = ОргСведения["СтавкаПрибРесп"];
		КонецЕсли;
		
		Ветка.Данные.Вставить("ПризнакВключения", "V");
		Ветка.Данные.Вставить("П000020000100", "01");
		Ветка.Данные.Вставить("П000020015003", СтавкаФедеральная);
		Ветка.Данные.Вставить("П000020016003", СтавкаСубъекта);
		Ветка.Данные.Вставить("П000020014003", СтавкаФедеральная + Макс(СтавкаСубъекта, Ветка.Данные["П000020017003"]));
		
		Если ОтчетЗаКвартал Тогда
			
			Ветка_Лист02_1 = Ветка.Строки[0].Строки[0];
			Ветка_Лист02_1.Данные.Вставить("ПризнакВключения", "V");
			Ветка_Лист02_1.Данные.Вставить("П000210000100", "01");
			
			Ветка_Лист02_2 = Ветка.Строки[1].Строки[0];
			Ветка_Лист02_2.Данные.Вставить("ПризнакВключения", "V");
			Ветка_Лист02_2.Данные.Вставить("П000220000100", "01");
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКорневогоРаздела(Форма, Знач ИмяРаздела)
	
	ИмяГлРаздела = Неопределено;
	
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Пока СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Цикл
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
		СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
	КонецЦикла;
	
	Возврат ?(ИмяГлРаздела = Неопределено, ИмяРаздела, ИмяГлРаздела);
	
КонецФункции

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИмяОтчета(ЭтаФорма.ИмяФормы),
		ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2020Кв4");
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП = СокрЛП(ТабличныйДокумент.Области["КПП"].Значение);
	Иначе
		КПП = СокрЛП(СтруктураДанныхТитульный["КПП"]);
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
		Символы56КПП = Сред(КПП, 5, 2);
	Иначе
		Символы56КПП = "";
	КонецЕсли;
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("БазоваяДоходность",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "МестаПредставления" Тогда
						
						// Письмо ФНС России от 16.01.2019 № СД-4-3/441@.
						Если КодПоказателя = "239" И Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) > 2022 Тогда
							Продолжить;
						КонецЕсли;
						
						// Фильтрация состава списка для выбора кодов "по месту", в зависимости от КПП:
						// если код места = 213 то 5, 6 символы КПП = 50;
						// если код места = 218 то 5, 6 символы КПП = 01 или 50 или 4U;
						// для всех остальных кодов места 5, 6 символы КПП не равны 4U.
						Если ЗначениеЗаполнено(Символы56КПП) Тогда
							Если КодПоказателя = "213" Тогда
								Если НЕ (Символы56КПП = "50") Тогда
									Продолжить;
								КонецЕсли;
							ИначеЕсли КодПоказателя = "218" Тогда
								Если НЕ (Символы56КПП = "50" ИЛИ Символы56КПП = "01" ИЛИ Символы56КПП = "4U") Тогда
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(КодПоказателя) Тогда
								Если Символы56КПП = "4U" Тогда
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					
					Если Область.Имя = "КодыВидаДоходов" И КодПоказателя = "605"
						И КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < КонецГода('20211231') Тогда
						
						// Наименование до вступления в силу разъяснений из письма ФНС России от 10.12.2021 № СД-4-3/17285@.
						НовСтрока.Название = "Доходы в виде субсидий, полученных из федерального бюджета в связи с неблагоприятной "
						+ "ситуацией, связанной с распространением новой коронавирусной инфекции, налогоплательщиками. включенными по "
						+ "состоянию на 1 марта 2020 года в соответствии в Федеральным законом от 24 июля 2007 г. № 209-ФЗ ""О развитии "
						+ "малого и среднего предпринимательства в Российской Федерации"" (Собрание законодательства Российской "
						+ "Федерации, 2007, № 31, ст. 4006; 2020, № 24, ст. 3743) в единый реестр субъектов малого и среднего "
						+ "предпринимательства и ведущими деятельность в отраслях российской экономики, в наибольшей степени "
						+ "пострадавших в условиях ухудшения ситуации в результате распространения указанной инфекции, перечень которых "
						+ "утверждается Правительством Российской Федерации (подпункт 60 пункта 1 статьи 251 Налогового кодекса "
						+ "Российской Федерации)";
						
					КонецЕсли;
					
					НовСтрока.БазоваяДоходность = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор кода периода", КоллекцияСписковВыбора["Периоды"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	// Раздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00011М103003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_1_Стр030"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00011М106003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_1_Стр060"]);
	
	// Раздел 1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М111003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_2_Стр110"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00012М121003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_2_Стр210"]);
	
	// Раздел 1.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00013М101003", 1, ,
	"Выбор вида платежа", КоллекцияСписковВыбора["ВидыПлатежа"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00013М103003", 20, ,
	"Выбор КБК", КоллекцияСписковВыбора["КБК_Раздел1_3_Стр030"]);
	
	// Лист 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000100", 2, ,
	"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНП_Лист02"]);
	
	// Прил. 4 к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000100", 2, ,
	"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНП_Лист02_4"]);
	
	// Прил. 5 к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000100", 2, ,
	"Выбор признака налогоплательщика", КоллекцияСписковВыбора["ПризнакиНП_Лист02_5"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000300", 1, ,
	"Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчета_Лист02_5"]);
	
	// Прил. 6а к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0026а0000500", 1, ,
	"Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчета_Лист02_6а"]);
	
	// Прил. 7 А к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027А0000100", 1, ,
	"Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчета_Лист02_7АГ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027АМ100001", 2, ,
	"Выбор кода расходов", КоллекцияСписковВыбора["КодыРасходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027АМ200001", 2, ,
	"Выбор кода расходов", КоллекцияСписковВыбора["КодыРасходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027АМ300001", 2, ,
	"Выбор кода расходов", КоллекцияСписковВыбора["КодыРасходов"]);
	
	// Прил. 7 В к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027В0000100", 1, ,
	"Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчета_Лист02_7В"]);
	
	// Прил. 7 Г к Листу 02.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0027Г0000100", 1, ,
	"Выбор вида составления расчета", КоллекцияСписковВыбора["ВидыРасчета_Лист02_7АГ"]);
	
	// Лист 03 А.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0003А0000100", 1, ,
	"Выбор категории налогового агента", КоллекцияСписковВыбора["КатегорииНалоговогоАгента"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0003А0000300", 1, ,
	"Выбор вида дивидендов", КоллекцияСписковВыбора["ВидыДивидендов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0003А0000400", 2, ,
	"Выбор кода налогового (отчетного) периода", КоллекцияСписковВыбора["КодыПериода_Лист03А"]);
	
	// Лист 03 Б.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0003Б0000100", 1, ,
	"Выбор вида дохода", КоллекцияСписковВыбора["ВидыДохода_Лист03Б"]);
	
	// Лист 04.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000040000100", 1, ,
	"Выбор вида дохода", КоллекцияСписковВыбора["ВидыДохода_Лист04"]);
	
	// Лист 05.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000050000100", 1, ,
	"Выбор вида операции", КоллекцияСписковВыбора["ВидыОпераций"]);
	
	// Лист 07.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00007М100001", 3, ,
	"Выбор кода вида поступления", КоллекцияСписковВыбора["КодыВидовПоступлений"]);
	
	// Лист 08.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000080000101", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУчастникаКГН"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000080000501", 1, ,
	"Выбор вида корректировки", КоллекцияСписковВыбора["ВидыКорректировки"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00008М100001", 3, ,
	"Выбор кода основания", КоллекцияСписковВыбора["КодыОснованийОтнесенияСделкиККонтролируемой"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00008М200003", 1, ,
	"Выбор типа предмета сделки", КоллекцияСписковВыбора["ТипыПредметаСделки"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800001003", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУменьшенияУвеличения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800002003", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУменьшенияУвеличения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800003003", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУменьшенияУвеличения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800004003", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУменьшенияУвеличения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000800005003", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиУменьшенияУвеличения"]);
	
	// Лист 09.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0000201", 1, ,
	"Выбор кода организационной формы", КоллекцияСписковВыбора["КодыОрганизационнойФормы"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001101", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001102", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001103", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001104", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001105", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001106", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001107", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001108", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0009А0001109", 1, ,
	"Выбор признака", КоллекцияСписковВыбора["ПризнакиПодтвержденияОснования"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П009Б20000100", 1, ,
	"Выбор кода основания", КоллекцияСписковВыбора["ОснованияПримененияПорядкаРасчета"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П009П1М100100", 1, ,
	"Выбор кода операции", КоллекцияСписковВыбора["КодыОпераций"]);
	
	//Приложение 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000П1М100001", 3, ,
	"Выбор кода вида доходов", КоллекцияСписковВыбора["КодыВидаДоходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000П1М100003", 3, ,
	"Выбор кода вида расходов", КоллекцияСписковВыбора["КодыВидаРасходов"]);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимТекРаздела);
	Если ТабличныйДокумент.Области.Найти(СохрТекОбл.Имя) <> Неопределено Тогда
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	КонецЕсли;
	
	РазделыРеглОтчета = ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	РазделыРеглОтчета.Титульный = СтруктураДанныхТитульный;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Периодичность", СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("КодИФНС", КодИФНС);
	ПараметрыЗаписи.Вставить("КПП", КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыЗаписи.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыЗаписи.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	ПараметрыЗаписи.Вставить("ОКТМОДляРазделов", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ОбъектОтчета.ЗаписатьДокумент(СтруктураРеквизитовФормы.мВыбраннаяФорма, ПараметрыЗаписи) = Ложь Тогда
		
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПараметрыЗаписи.Ошибки[0];
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = ОбъектОтчета(ЭтаФорма.ИмяФормы).СохраненныеДанныеОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	ОчиститьПриложения4КЛисту02НеВключенныеВСоставОтчета();
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки
		= ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено,
		Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство(
		"ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ОКТМОДляРазделов", СтруктураРеквизитовФормы.ОКТМОДляРазделов) Тогда
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = "";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрНачинаетсяС(Область.Имя, "ДобавитьСтроку") И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтроку") И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "ДобавитьСтраницу") И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "УдалитьСтраницу") И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "СобратьДанные") Тогда
		СобратьДанные();
	ИначеЕсли Область.Имя = "ПодобратьИзУведомленияКИК" И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист09" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЕстьУведомленияПоКИК Тогда
			ИмяФормыПодбора = "Отчет.РегламентированноеУведомлениеКИК.Форма.ФормаПодбораИностраннойКомпании";
			ПараметрыФормыПодбора = Новый Структура("Организация", СтруктураРеквизитовФормы.Организация);
			ОповещениеОЗакрытииФормыПодбора = Новый ОписаниеОповещения("ПодобратьИзУведомленияКИКЗавершение", ЭтотОбъект);
			ОткрытьФорму(ИмяФормыПодбора, ПараметрыФормыПодбора, ЭтотОбъект, , , ,
			ОповещениеОЗакрытииФормыПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Нет доступных уведомлений о контролируемых иностранных компаниях';
			|en = 'Нет доступных уведомлений о контролируемых иностранных компаниях'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "ПризнакВключения" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		
		Если СтруктураРеквизитовФормы.Свойство("ПризнакВключения_Снятие") Тогда
			СтруктураРеквизитовФормы.Удалить("ПризнакВключения_Снятие");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			СтруктураРеквизитовФормы.Вставить("ПризнакВключения_Снятие");
			ОчиститьТекущуюСтраницу("");
		Иначе
			ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000020012000" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Особая обработка в Листе 02.
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "П000020017103" ИЛИ Область.Имя = "П000020017104" ИЛИ Область.Имя = "П000020017105"
		ИЛИ Область.Имя = "П000020017106" ИЛИ Область.Имя = "П000250006103" ИЛИ Область.Имя = "П000250006104"
		ИЛИ Область.Имя = "П000250006105" ИЛИ Область.Имя = "П000250006106" ИЛИ Область.Имя = "П0026а0006103"
		ИЛИ Область.Имя = "П0026а0006104" ИЛИ Область.Имя = "П0026а0006105" ИЛИ Область.Имя = "П0026а0006106" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Префикс = Лев(Область.Имя, 11);
		
		Парам = Новый Структура;
		Парам.Вставить("НомерСтатьи",    СокрЛП(ТабличныйДокумент.Области[Префикс + "03"].Значение));
		Парам.Вставить("ПунктСтатьи",    СокрЛП(ТабличныйДокумент.Области[Префикс + "04"].Значение));
		Парам.Вставить("ПодпунктСтатьи", СокрЛП(ТабличныйДокумент.Области[Префикс + "05"].Значение));
		Парам.Вставить("НомерЗакона",    СокрЛП(ТабличныйДокумент.Области[Префикс + "06"].Значение));
		
		ФормаВвода = ПолучитьФорму("Отчет.РегламентированныйОтчетПрибыль.Форма.ФормаВводаЗаконаСубъектаРФ", Парам);
		
		ФормаВвода.ОписаниеОповещенияОЗакрытии
		= Новый ОписаниеОповещения("ОткрытьФормуВводаЗаконаСубъектаРФЗавершение", ЭтотОбъект, Префикс);
		ФормаВвода.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВвода.Открыть();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00012М100103") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = Новый СписокЗначений;
		Сп.Добавить("",   "Пустое значение");
		Сп.Добавить("21", "21 - первый квартал");
		Сп.Добавить("24", "24 - четвертый квартал");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли Область.Имя = "П000220013503" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = Новый СписокЗначений;
		Сп.Добавить("",  "Пустое значение");
		Сп.Добавить("1", "1 - линейный");
		Сп.Добавить("2", "2 - нелинейный");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли Область.Имя = "П000250000500" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = Новый СписокЗначений;
		Сп.Добавить("",  "Пустое значение");
		Сп.Добавить("1", "1 - возложена");
		Сп.Добавить("0", "0 - не возложена");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли Область.Имя = "П000220040101" ИЛИ Область.Имя = "П000220040201" ИЛИ Область.Имя = "П000220040301"
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00024М100001") ИЛИ Область.Имя = "П0003А0000500"
		ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М103001") ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М104001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М105001") ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М106001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М107001") ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М108001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М109001") ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М110001")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М111001") ИЛИ СтрНачинаетсяС(Область.Имя, "П009П1М112001") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		Сп.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		Сп.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П0003ВМ100505") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = Новый СписокЗначений;
		Сп.Добавить("", "Пустое значение");
		Сп.Добавить("00", "00 - первичный Расчет");
		Для Ном = 1 По 98 Цикл
			Ном_Стр = Формат(Ном, "ЧЦ=2;ЧН=;ЧВН=");
			Сп.Добавить(Ном_Стр, Ном_Стр + " - уточненный (корректирующий)");
		КонецЦикла;
		Сп.Добавить("99", "99 - аннулирующий ранее представленный");
		
		Оп = Новый ОписаниеОповещения(
		"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
		
		ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00008М200007") И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ИмяПоказателяКод", Область.Имя);
		ДопПараметры.Вставить("ТекущийКод", СокрЛП(Область.Значение));
		
		ВыбратьКодПоОКВЭД(СтандартнаяОбработка, ДопПараметры);
		
	ИначеЕсли Область.Имя = "П000080000701" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВидыКонтрагентов = Новый СписокЗначений;
		ВидыКонтрагентов.Добавить("", "Пустое значение");
		ВидыКонтрагентов.Добавить("Российская организация");
		ВидыКонтрагентов.Добавить("Иностранная организация");
		ВидыКонтрагентов.Добавить("Индивидуальный предприниматель");
		ВидыКонтрагентов.Добавить("Российский гражданин");
		ВидыКонтрагентов.Добавить("Иностранный гражданин или лицо без гражданства");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВидКонтрагентаИзСпискаЗавершение", ЭтотОбъект);
		
		ТекущийВидКонтрагента = ВидыКонтрагентов.НайтиПоЗначению(СокрЛП(Область.Значение));
		
		Если ТекущийВидКонтрагента <> Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, ВидыКонтрагентов, , ТекущийВидКонтрагента);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, ВидыКонтрагентов);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Область.Имя = "П000080000801" ИЛИ Область.Имя = "П0009А0000501" ИЛИ Область.Имя = "П0009А0000601" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДопПараметры = Новый Структура("Область", Область);
		Оп = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДопПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = Оп;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
		Возврат;
		
	ИначеЕсли Область.Имя = "П0009А0000100" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
			ТабличныйДокумент.Области.П0009А0000200.Значение = "";
			ТабличныйДокумент.Области.П009Б10020500.Значение = 20;
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "П0009А0000200" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(Область.Значение) Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "Х";
			ТабличныйДокумент.Области.П0009А0000100.Значение = "";
			ТабличныйДокумент.Области.П009Б20022500.Значение = 20;
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "П009Б10000100" ИЛИ Область.Имя = "П009Б20000200" ИЛИ Область.Имя = "П009Б30000100" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму("Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода валюты";
		ДопПараметры = Новый Структура("Область", Область);
		Оп = Новый ОписаниеОповещения("ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = Оп;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
		Возврат;
		
	ИначеЕсли Область.Имя = "П009Б10000101" ИЛИ Область.Имя = "П009Б20000101" ИЛИ Область.Имя = "П009Б30000101" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "КПП" И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Сп = СписокКПП();
		
		Если Сп.Количество() > 0 Тогда
			
			Оп = Новый ОписаниеОповещения(
			"ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Новый Структура("Область,Элемент", Область, Элемент));
			
			ПоказатьВыборИзСписка(Оп, Сп, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			Сп.НайтиПоЗначению(СокрЛП(Область.Значение)));
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Область.Значение) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'КПП необходимо задать в справочнике ""Организации"".';
									|en = 'КПП необходимо задать в справочнике ""Организации"".'");
			Сообщение.Сообщить();
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Для выбора КПП, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".';
			|en = 'Для выбора КПП, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ТребРезультат = 0;
			Если КодПоказателя = "Период" Тогда
				НомерМесяца = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				флКвартальноеЗаполнение
				= СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
				Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал Тогда
					ТребРезультат = НомерМесяца / 3;
				Иначе
					ТребРезультат = НомерМесяца + 4;
				КонецЕсли;
			КонецЕсли;
			Если ТребРезультат <> 0 Тогда
				РазмерТЗ = ТЗВыбора.Количество();
				Для Сч = 1 По РазмерТЗ Цикл
					ЭлементТЗ = ТЗВыбора[РазмерТЗ - Сч];
					Рез = ?(ЭлементТЗ.БазоваяДоходность = "", 0, Число(ЭлементТЗ.БазоваяДоходность));
					Если Рез <> 0 И Рез <> ТребРезультат Тогда
						ТЗВыбора.Удалить(ЭлементТЗ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВвестиПоказатель(
			Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Перем Индекс, ИндексСтр;
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	ТДО = ТабличныйДокумент.Области;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "ПризнакВключения" И ЗначениеЗаполнено(ЗначПоказателя)
		И (ИмяРаздела = "Лист02_1" ИЛИ ИмяРаздела = "Лист02_2" ИЛИ ИмяРаздела = "Лист02_3") Тогда
		
		ВосстановитьВАктивномПриложенииКЛисту02НаследуемыеЗначенияИзЛиста02(ИмяРаздела);
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00011М101003") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00012М101003")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00013М102003") ИЛИ ИмяПоказателя = "П000260000300"
		ИЛИ ИмяПоказателя = "П0026а0000300" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
									|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если ИмяПоказателя = "П000260000300" Тогда
			Обл = ТДО.Найти("П000260000600");
			Если Обл <> Неопределено Тогда
				Обл.Значение = КодСубъектаРФ(ОКТМО);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00011М103003") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00011М106003")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00012М111003") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00012М121003")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00013М103003") Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
									|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "ИННРеорганизованнойОрганизации" ИЛИ ИмяПоказателя = "П000260000100"
		ИЛИ ИмяПоказателя = "П0026а0000100" ИЛИ ИмяПоказателя = "П0026б0000100" ИЛИ ИмяПоказателя = "П0003А0000200"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П0003ВМ100503") ИЛИ ИмяПоказателя = "П000080000201" Тогда
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если ДлинаИНН = 10 ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'ИНН должен состоять из 10 цифр. Значение очищено';
									|en = 'ИНН должен состоять из 10 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000080000901" Тогда
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если ДлинаИНН = 10 ИЛИ ДлинаИНН = 12 ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'ИНН должен состоять из 10 цифр (юр. лицо) или 12 цифр (физ. лицо). Значение очищено';
									|en = 'ИНН должен состоять из 10 цифр (юр. лицо) или 12 цифр (физ. лицо). Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "КППРеорганизованнойОрганизации" ИЛИ ИмяПоказателя = "П000250000400"
		ИЛИ ИмяПоказателя = "П000260000200" ИЛИ ИмяПоказателя = "П0026а0000200" ИЛИ ИмяПоказателя = "П0027А0000200"
		ИЛИ ИмяПоказателя = "П0027В0000200" ИЛИ ИмяПоказателя = "П0027Г0000200"
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П0003ВМ100504") ИЛИ ИмяПоказателя = "П000080000301" Тогда
		КПП = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКПП = СтрДлина(КПП);
		Если ДлинаКПП = 9 ИЛИ ДлинаКПП = 0 Тогда
			Область.Значение = КПП;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'КПП должен состоять из 9 символов. Значение очищено';
									|en = 'КПП должен состоять из 9 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020000200" ИЛИ ИмяПоказателя = "П000240000200" ИЛИ ИмяПоказателя = "П000250000200" Тогда
		ПризнакНП = "";
		ПризнакНП = ?(ИмяПоказателя = "П000020000200", СокрЛП(ТДО["П000020000100"].Значение), ПризнакНП);
		ПризнакНП = ?(ИмяПоказателя = "П000240000200", СокрЛП(ТДО["П000240000100"].Значение), ПризнакНП);
		ПризнакНП = ?(ИмяПоказателя = "П000250000200", СокрЛП(ТДО["П000250000100"].Значение), ПризнакНП);
		НомерДок = СокрЛП(ЗначПоказателя);
		Если ПризнакНП = "03" Тогда
			НомерДокументаСоответствуетТребованиям
			= СтрДлина(НомерДок) >= 2 И СтрНайти("12345678", Лев(НомерДок, 1)) > 0 И Сред(НомерДок, 2, 1) = "/";
			Если СтрДлина(НомерДок) = 0 ИЛИ НомерДокументаСоответствуетТребованиям Тогда
				Область.Значение = НомерДок;
			Иначе
				Область.Значение = "";
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Если код признака налогоплательщика равен ""03"", номер документа должен соответствовать "
				+ "шаблону ""К/Н"", где ""К"" - код типа особых (свободных) экономических зон или свободного порта Владивосток "
				+ "(цифра от 1 до 8), ""Н"" - строка длиной 0-19 символов. Значение очищено";
				Сообщение.Текст = СтрШаблон(НСтр("ru = '%1';
												|en = '%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецЕсли;
		Иначе
			НомерДокументаСоответствуетТребованиям
			= СтрДлина(НомерДок) >= 3 И Лев(НомерДок, 1) = "0" И Сред(НомерДок, 2, 1) = "/";
			Если СтрДлина(НомерДок) = 0 ИЛИ НомерДокументаСоответствуетТребованиям Тогда
				Область.Значение = НомерДок;
			Иначе
				Область.Значение = "";
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = "Если код признака налогоплательщика не равен ""03"", номер документа, если заполнен, "
				+ "должен соответствовать шаблону ""К/Н"", где ""К"" - цифра 0, ""Н"" - строка длиной 1-19 символов. "
				+ "Значение очищено";
				Сообщение.Текст = СтрШаблон(НСтр("ru = '%1';
												|en = '%1'"), ТекстСообщения);
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000020000301" ИЛИ ИмяПоказателя = "П000240000301" Тогда
		РеквЛиц = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаРеквЛиц = СтрДлина(РеквЛиц);
		Если ДлинаРеквЛиц = 3 ИЛИ ДлинаРеквЛиц = 0 Тогда
			Область.Значение = РеквЛиц;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Серия лицензии на пользование недрами должна состоять из 3 символов. Значение очищено';
			|en = 'Серия лицензии на пользование недрами должна состоять из 3 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли ИмяПоказателя = "П000020000302" ИЛИ ИмяПоказателя = "П000240000302" Тогда
		РеквЛиц = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаРеквЛиц = СтрДлина(РеквЛиц);
		Если ДлинаРеквЛиц = 5 ИЛИ ДлинаРеквЛиц = 0 Тогда
			Область.Значение = РеквЛиц;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Номер лицензии на пользование недрами должен состоять из 5 символов. Значение очищено';
			|en = 'Номер лицензии на пользование недрами должен состоять из 5 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли ИмяПоказателя = "П000020000303" ИЛИ ИмяПоказателя = "П000240000303" Тогда
		РеквЛиц = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаРеквЛиц = СтрДлина(РеквЛиц);
		Если ДлинаРеквЛиц = 2 ИЛИ ДлинаРеквЛиц = 0 Тогда
			Область.Значение = РеквЛиц;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Вид лицензии на пользование недрами должен состоять из 2 символов. Значение очищено';
									|en = 'Вид лицензии на пользование недрами должен состоять из 2 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли ИмяПоказателя = "П000020000304" ИЛИ ИмяПоказателя = "П000240000304" Тогда
		РеквЛиц = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаРеквЛиц = СтрДлина(РеквЛиц);
		Если ДлинаРеквЛиц = 2 ИЛИ ДлинаРеквЛиц = 0 Тогда
			Область.Значение = РеквЛиц;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Порядковый номер нового морского месторождения должен состоять из 2 символов. Значение очищено';
			|en = 'Порядковый номер нового морского месторождения должен состоять из 2 символов. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если (СтрНачинаетсяС(ИмяПоказателя, "П0027АМ100001") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П0027АМ200001")
		ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П0027АМ300001")) И ЗначениеЗаполнено(ЗначПоказателя) Тогда
		
		ИмяБезПрефикса = Лев(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти(ИмяБезПрефикса + "_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если Обл.Имя <> ИмяПоказателя И СокрЛП(Обл.Значение) = СокрЛП(ЗначПоказателя) Тогда
				Если Лев(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГруппы)
					= СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1 Тогда
					НомСтроки = "020";
				ИначеЕсли Лев(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГруппы)
					= СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2 Тогда
					НомСтроки = "050";
				ИначеЕсли Лев(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГруппы)
					= СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3 Тогда
					НомСтроки = "060";
				КонецЕсли;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Код расходов ""%1"" из строки %2 уже заполнен. Значение очищено';
				|en = 'Код расходов ""%1"" из строки %2 уже заполнен. Значение очищено'"), СокрЛП(ЗначПоказателя), НомСтроки);
				Сообщение.Сообщить();
				Область.Очистить();
				Прервать;
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяБезПрефикса + "_" + ИндексСтр);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00008М100001") Тогда
		МассивКодовОснованияЛиста08 = Новый Массив;
		МассивКодовОснованияЛиста08ЗаИсключениемТекущегоКода = Новый Массив;
		ОбластьСКодом = ТабличныйДокумент.Области.Найти("П00008М100001_1");
		Инд = 1;
		Пока ОбластьСКодом <> Неопределено Цикл
			МассивКодовОснованияЛиста08.Добавить(СокрЛП(ОбластьСКодом.Значение));
			Если ОбластьСКодом.Имя <> Область.Имя Тогда
				МассивКодовОснованияЛиста08ЗаИсключениемТекущегоКода.Добавить(СокрЛП(ОбластьСКодом.Значение));
			КонецЕсли;
			Инд = Инд + 1;
			ОбластьСКодом = ТабличныйДокумент.Области.Найти("П00008М100001_" + Формат(Инд, "ЧГ="));
		КонецЦикла;
		ТекущийКод = СокрЛП(Область.Значение);
		ЕстьТакойКод = ЗначениеЗаполнено(ТекущийКод)
		И МассивКодовОснованияЛиста08ЗаИсключениемТекущегоКода.Найти(ТекущийКод) <> Неопределено;
		ЕстьКод122Или123 = МассивКодовОснованияЛиста08.Найти("122") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("123") <> Неопределено;
		ЕстьКодС131По138 = МассивКодовОснованияЛиста08.Найти("131") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("132") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("133") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("134") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("135") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("136") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("137") <> Неопределено
		ИЛИ МассивКодовОснованияЛиста08.Найти("138") <> Неопределено;
		Если ЕстьТакойКод Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код " + ТекущийКод + " уже указан. Значение очищено'");
			Сообщение.Сообщить();
		ИначеЕсли ЕстьКод122Или123 И ЕстьКодС131По138 Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
				"ru = 'Коды 122 и 123 не могут быть одновременно указаны с любым из кодов 131 - 138. Значение очищено';
				|en = 'Коды 122 и 123 не могут быть одновременно указаны с любым из кодов 131 - 138. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяПоказателя = "П000250004003" ИЛИ ИмяПоказателя = "П000260004003" ИЛИ ИмяПоказателя = "П0009А0001001"
		ИЛИ ИмяПоказателя = "П0026а0004003") И ЗначПоказателя > 100 Тогда
		Область.Очистить();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Доля не может превышать 100%. Значение очищено';
								|en = 'Доля не может превышать 100%. Значение очищено'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
	Если (ИмяПоказателя = "П009Б10000101" И ЗначениеЗаполнено(Область.Значение)
		И (ОкрЧФ(ЭтаФорма, ТДО["П009Б10009003"].Значение) <= 10000000))
		ИЛИ (ИмяПоказателя = "П009Б20000101" И ЗначениеЗаполнено(Область.Значение)
		И (ОкрЧФ(ЭтаФорма, ТДО["П009Б20010003"].Значение)
		+ ОкрЧФ(ЭтаФорма, ТДО["П009Б30008003"].Значение) <= 10000000))
		ИЛИ (ИмяПоказателя = "П009Б30000101" И ЗначениеЗаполнено(Область.Значение)
		И (ОкрЧФ(ЭтаФорма, ТДО["П009Б20010003"].Значение)
		+ ОкрЧФ(ЭтаФорма, ТДО["П009Б30008003"].Значение) <= 10000000)) Тогда
		
		ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей(ИмяПоказателя);
		Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
			ТДО[ИмяПок].Значение = 0;
		КонецЦикла;
		
	ИначеЕсли (ИменаКонтролируемыхПоказателей("П009Б10000101").Найти(ИмяПоказателя) <> Неопределено
		И ЗначениеЗаполнено(ТДО["П009Б10000101"].Значение) И (ОкрЧФ(ЭтаФорма, ТДО["П009Б10009003"].Значение) <= 10000000))
		ИЛИ (ИменаКонтролируемыхПоказателей("П009Б20000101").Найти(ИмяПоказателя) <> Неопределено
		И ЗначениеЗаполнено(ТДО["П009Б20000101"].Значение) И (ОкрЧФ(ЭтаФорма, ТДО["П009Б20010003"].Значение)
		+ ОкрЧФ(ЭтаФорма, ТДО["П009Б30008003"].Значение) <= 10000000))
		ИЛИ (ИменаКонтролируемыхПоказателей("П009Б30000101").Найти(ИмяПоказателя) <> Неопределено
		И ЗначениеЗаполнено(ТДО["П009Б30000101"].Значение) И (ОкрЧФ(ЭтаФорма, ТДО["П009Б20010003"].Значение)
		+ ОкрЧФ(ЭтаФорма, ТДО["П009Б30008003"].Значение) <= 10000000)) Тогда
		
		Область.Значение = 0;
		
		КонтролируемыеСтроки = "";
		ПрефиксВИмениПоказателя = Лев(ИмяПоказателя, 6);
		Если ПрефиксВИмениПоказателя = "П009Б1" Тогда
			КонтролируемыеСтроки = "100-220";
		ИначеЕсли ПрефиксВИмениПоказателя = "П009Б2" Тогда
			КонтролируемыеСтроки = "110-250";
		ИначеЕсли ПрефиксВИмениПоказателя = "П009Б3" Тогда
			КонтролируемыеСтроки = "090-130";
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр(
		"ru = 'Установлен контроль незаполнения для строк %1. Значение очищено';
		|en = 'Установлен контроль незаполнения для строк %1. Значение очищено'"), КонтролируемыеСтроки);
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяПоказателя = "ПоМесту" ИЛИ (ИмяРаздела = "Лист02_5" И ИмяПоказателя = "ПризнакВключения") Тогда
		
		// Заполнение стр.160, стр.170 Листа 02 не предусмотрено, если есть обособленные подразделения.
		// Их обнуление выполняется в "ОбработатьНаличиеОтсутствиеОбособленныхПодразделений".
		//
		ОбработатьНаличиеОтсутствиеОбособленныхПодразделений(ИмяРаздела);
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Лист02" И (ИмяПоказателя = "ПризнакВключения" ИЛИ ИмяПоказателя = "П000020000100"
		ИЛИ ИмяПоказателя = "П000020000200" ИЛИ ИмяПоказателя = "П000020000301" ИЛИ ИмяПоказателя = "П000020000302"
		ИЛИ ИмяПоказателя = "П000020000303" ИЛИ ИмяПоказателя = "П000020000304") Тогда
		
		ПоместитьИзАктивногоЛиста02ВПриложенияКЛисту02НаследуемыеЗначения();
		
	КонецЕсли;
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела)
		И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если ИмяПоказателя = "ПризнакВключения" ИЛИ СтрНачинаетсяС(ИмяРаздела, "Лист02") Тогда
			
			СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
			Если ТДО.Найти(СохрТекОбл.Имя) <> Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
			КонецЕсли;
			
		Иначе
			РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		ТДО = ТабличныйДокумент.Области;
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТДО.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
		Если ТДО.Найти("ПризнакВключения") <> Неопределено Тогда
			ВключитьРаздел = ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение);
			Если НЕ ВключитьРаздел Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
				Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("БезПереходаВТабличномДокументе") Тогда
		ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.БезПерехода;
		СтруктураРеквизитовФормы.Удалить("БезПереходаВТабличномДокументе");
	Иначе
		ТабличныйДокумент.НаправлениеПерехода = ТипНаправленияПереходаТабличногоДокумента.ПоКолонкам;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаКонтролируемыхПоказателей(ИмяКонтролирующегоПоказателя)
	
	Если ИмяКонтролирующегоПоказателя = "П009Б10000101" Тогда
		
		Возврат СтрРазделить(
		"П009Б10010003|П009Б10011003|П009Б10012003|П009Б10013003|П009Б10014003|П009Б10015003|П009Б10016003|П009Б10017003|П009Б10018003|П009Б10019003|П009Б10020003|П009Б10020500|П009Б10021003|П009Б10022003",
		"|", Ложь);
		
	ИначеЕсли ИмяКонтролирующегоПоказателя = "П009Б20000101" Тогда
		
		Возврат СтрРазделить(
		"П009Б20011003|П009Б20012003|П009Б20013003|П009Б20014003|П009Б20015003|П009Б20016003|П009Б20017003|П009Б20018003|П009Б20019003|П009Б20020003|П009Б20021003|П009Б20022003|П009Б20022500|П009Б20023003|П009Б20024003|П009Б20025003",
		"|", Ложь);
		
	ИначеЕсли ИмяКонтролирующегоПоказателя = "П009Б30000101" Тогда
		
		Возврат СтрРазделить(
		"П009Б30009003|П009Б30010003|П009Б30011003|П009Б30012003|П009Б30013003", "|", Ложь);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВосстановитьВАктивномПриложенииКЛисту02НаследуемыеЗначенияИзЛиста02(НаимРаздела)
	
	Если НаимРаздела = "Лист02_1" ИЛИ НаимРаздела = "Лист02_2" ИЛИ НаимРаздела = "Лист02_3" Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, НаимРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Лист02 = ТекВетка.Родитель.Родитель;
		
		ТДО = ТабличныйДокумент.Области;
		
		Если НаимРаздела = "Лист02_1" Тогда
			
			ТДО["П000210000100"].Значение = Лист02.Данные["П000020000100"];
			ТДО["П000210000200"].Значение = Лист02.Данные["П000020000200"];
			ТДО["П000210000301"].Значение = Лист02.Данные["П000020000301"];
			ТДО["П000210000302"].Значение = Лист02.Данные["П000020000302"];
			ТДО["П000210000303"].Значение = Лист02.Данные["П000020000303"];
			ТДО["П000210000304"].Значение = Лист02.Данные["П000020000304"];
			
		ИначеЕсли НаимРаздела = "Лист02_2" Тогда
			
			ТДО["П000220000100"].Значение = Лист02.Данные["П000020000100"];
			ТДО["П000220000200"].Значение = Лист02.Данные["П000020000200"];
			ТДО["П000220000301"].Значение = Лист02.Данные["П000020000301"];
			ТДО["П000220000302"].Значение = Лист02.Данные["П000020000302"];
			ТДО["П000220000303"].Значение = Лист02.Данные["П000020000303"];
			ТДО["П000220000304"].Значение = Лист02.Данные["П000020000304"];
			
		ИначеЕсли НаимРаздела = "Лист02_3" Тогда
			
			ТДО["П000230000100"].Значение = Лист02.Данные["П000020000100"];
			ТДО["П000230000200"].Значение = Лист02.Данные["П000020000200"];
			ТДО["П000230000301"].Значение = Лист02.Данные["П000020000301"];
			ТДО["П000230000302"].Значение = Лист02.Данные["П000020000302"];
			ТДО["П000230000303"].Значение = Лист02.Данные["П000020000303"];
			ТДО["П000230000304"].Значение = Лист02.Данные["П000020000304"];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьИзАктивногоЛиста02ВПриложенияКЛисту02НаследуемыеЗначения()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02" Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТДО = ТабличныйДокумент.Области;
		
		Лист02_1 = ТекВетка.Строки[0].Строки[0];
		Если ЗначениеЗаполнено(Лист02_1.Данные["ПризнакВключения"]) Тогда
			Лист02_1.Данные.Вставить("П000210000100", СокрЛП(ТДО["П000020000100"].Значение));
			Лист02_1.Данные.Вставить("П000210000200", СокрЛП(ТДО["П000020000200"].Значение));
			Лист02_1.Данные.Вставить("П000210000301", СокрЛП(ТДО["П000020000301"].Значение));
			Лист02_1.Данные.Вставить("П000210000302", СокрЛП(ТДО["П000020000302"].Значение));
			Лист02_1.Данные.Вставить("П000210000303", СокрЛП(ТДО["П000020000303"].Значение));
			Лист02_1.Данные.Вставить("П000210000304", СокрЛП(ТДО["П000020000304"].Значение));
		Иначе
			Лист02_1.Данные.Вставить("П000210000100", "");
			Лист02_1.Данные.Вставить("П000210000200", "");
			Лист02_1.Данные.Вставить("П000210000301", "");
			Лист02_1.Данные.Вставить("П000210000302", "");
			Лист02_1.Данные.Вставить("П000210000303", "");
			Лист02_1.Данные.Вставить("П000210000304", "");
		КонецЕсли;
		
		Лист02_2 = ТекВетка.Строки[1].Строки[0];
		Если ЗначениеЗаполнено(Лист02_2.Данные["ПризнакВключения"]) Тогда
			Лист02_2.Данные.Вставить("П000220000100", СокрЛП(ТДО["П000020000100"].Значение));
			Лист02_2.Данные.Вставить("П000220000200", СокрЛП(ТДО["П000020000200"].Значение));
			Лист02_2.Данные.Вставить("П000220000301", СокрЛП(ТДО["П000020000301"].Значение));
			Лист02_2.Данные.Вставить("П000220000302", СокрЛП(ТДО["П000020000302"].Значение));
			Лист02_2.Данные.Вставить("П000220000303", СокрЛП(ТДО["П000020000303"].Значение));
			Лист02_2.Данные.Вставить("П000220000304", СокрЛП(ТДО["П000020000304"].Значение));
		Иначе
			Лист02_2.Данные.Вставить("П000220000100", "");
			Лист02_2.Данные.Вставить("П000220000200", "");
			Лист02_2.Данные.Вставить("П000220000301", "");
			Лист02_2.Данные.Вставить("П000220000302", "");
			Лист02_2.Данные.Вставить("П000220000303", "");
			Лист02_2.Данные.Вставить("П000220000304", "");
		КонецЕсли;
		
		Лист02_3 = ТекВетка.Строки[2].Строки[0];
		Если ЗначениеЗаполнено(Лист02_3.Данные["ПризнакВключения"]) Тогда
			Лист02_3.Данные.Вставить("П000230000100", СокрЛП(ТДО["П000020000100"].Значение));
			Лист02_3.Данные.Вставить("П000230000200", СокрЛП(ТДО["П000020000200"].Значение));
			Лист02_3.Данные.Вставить("П000230000301", СокрЛП(ТДО["П000020000301"].Значение));
			Лист02_3.Данные.Вставить("П000230000302", СокрЛП(ТДО["П000020000302"].Значение));
			Лист02_3.Данные.Вставить("П000230000303", СокрЛП(ТДО["П000020000303"].Значение));
			Лист02_3.Данные.Вставить("П000230000304", СокрЛП(ТДО["П000020000304"].Значение));
		Иначе
			Лист02_3.Данные.Вставить("П000230000100", "");
			Лист02_3.Данные.Вставить("П000230000200", "");
			Лист02_3.Данные.Вставить("П000230000301", "");
			Лист02_3.Данные.Вставить("П000230000302", "");
			Лист02_3.Данные.Вставить("П000230000303", "");
			Лист02_3.Данные.Вставить("П000230000304", "");
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	ПараметрыФормы.Вставить("НалоговыеОрганы", СтруктураРеквизитовФормы.НалоговыеОрганы);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
		|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ИзменитьОКТМОРазделовЗаполнитьСведенияОПодписантахСформироватьСписокКодовПоМесту(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКТМОРазделовЗаполнитьСведенияОПодписантахСформироватьСписокКодовПоМесту(Ссылка)
	
	СтруктураРеквизитовФормы.ОКТМОДляРазделов = Ссылка.КодПоОКТМО;
	
	ИзменитьОКТМОРазделов(Ссылка.КодПоОКТМО);
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОПодписантах(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, ТабличныйДокумент, ДатаПодписи);
	
	СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКТМОРазделов(ОКТМО, ИмяРаздела = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
		Период  = СокрЛП(ТабличныйДокумент.Область("Период").Значение);
	Иначе
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
		Период  = СокрЛП(СтруктураДанныхТитульный.Период);
	КонецЕсли;
	
	Если (ИмяРаздела = "Раздел1_1" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
		И СтрРазделить("218,229,231,235", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
		Ветка = ДеревоРаздела.Строки[0];
		
		Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
			
			СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1].Строки;
			Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
				СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
			КонецЦикла;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяРаздела = "Раздел1_2" ИЛИ НЕ ЗначениеЗаполнено(ИмяРаздела))
		И НЕ (ПоМесту = "231" ИЛИ СтрРазделить("34,46,50,68", ",", Ложь).Найти(Период) <> Неопределено) Тогда
		
		ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
		Ветка = ДеревоРаздела.Строки[0];
		
		Если ЗначениеЗаполнено(Ветка.Данные["ПризнакВключения"]) Тогда
			
			СтрокиМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1].Строки;
			Для каждого СтрокаМнЧ Из СтрокиМнЧ Цикл
				СтрокаМнЧ.Данные.Вставить("П00012М101003", ОКТМО);
			КонецЦикла;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодПоОКВЭД(СтандартнаяОбработка, ДопПараметры)
	
	ДопПараметры.Вставить("ВариантОКВЭД", "ОКВЭД2");
	
	Оп = Новый ОписаниеОповещения("ВыбратьКодПоОКВЭДЗавершение", ЭтотОбъект, ДопПараметры);
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораКодаПоОКВЭД(Оп, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодПоОКВЭДЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если РезультатВыбора.Свойство("КодОКВЭД") Тогда
			Если ДопПараметры.Свойство("ИмяПоказателяКод") Тогда
				Обл = ТабличныйДокумент.Области.Найти(ДопПараметры.ИмяПоказателяКод);
				Если Обл <> Неопределено Тогда
					Обл.Значение = РезультатВыбора.КодОКВЭД;
					Модифицированность = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаЗаконаСубъектаРФЗавершение(Результат, ДопПараметр) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТабличныйДокумент.Области[ДопПараметр + "03"].Значение = Результат.НомерСтатьи;
		ТабличныйДокумент.Области[ДопПараметр + "04"].Значение = Результат.ПунктСтатьи;
		ТабличныйДокумент.Области[ДопПараметр + "05"].Значение = Результат.ПодпунктСтатьи;
		ТабличныйДокумент.Области[ДопПараметр + "06"].Значение = Результат.НомерЗакона;
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СписокКПП()
	
	СписокКПП = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрацииВНалоговомОргане.КПП КАК Код
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	(РегистрацииВНалоговомОргане.Владелец = &Организация
	|	ИЛИ РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация)
	|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",
	РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		СписокКПП.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Код"));
	КонецЕсли;
	
	Возврат СписокКПП;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодСубъектаРФ(Знач КодПоОКТМО)
	
	КодСубъектаРФ = "";
	
	КодПоОКТМО = СокрЛП(КодПоОКТМО);
	
	Если СтрДлина(КодПоОКТМО) = 8 ИЛИ СтрДлина(КодПоОКТМО) = 11 Тогда
		
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ = Новый Структура;
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_79",  "01");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_80",  "02");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_81",  "03");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_84",  "04");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_82",  "05");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_26",  "06");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_83",  "07");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_85",  "08");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_91",  "09");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_86",  "10");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_87",  "11");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_88",  "12");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_89",  "13");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_98",  "14");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_90",  "15");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_92",  "16");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_93",  "17");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_94",  "18");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_95",  "19");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_96",  "20");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_97",  "21");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_01",  "22");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_03",  "23");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_04",  "24");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_05",  "25");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_07",  "26");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_08",  "27");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_10",  "28");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_11",  "29");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_12",  "30");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_14",  "31");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_15",  "32");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_17",  "33");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_18",  "34");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_19",  "35");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_20",  "36");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_24",  "37");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_25",  "38");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_27",  "39");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_29",  "40");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_30",  "41");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_32",  "42");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_33",  "43");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_34",  "44");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_37",  "45");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_38",  "46");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_41",  "47");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_42",  "48");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_44",  "49");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_46",  "50");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_47",  "51");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_22",  "52");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_49",  "53");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_50",  "54");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_52",  "55");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_53",  "56");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_54",  "57");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_56",  "58");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_57",  "59");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_58",  "60");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_60",  "61");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_61",  "62");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_36",  "63");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_63",  "64");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_64",  "65");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_65",  "66");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_66",  "67");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_68",  "68");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_28",  "69");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_69",  "70");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_70",  "71");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_71",  "72");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_73",  "73");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_75",  "74");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_76",  "75");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_78",  "76");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_45",  "77");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_40",  "78");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_99",  "79");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_118", "83");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_718", "86");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_77",  "87");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_719", "89");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_35",  "91");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_67",  "92");
		ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Вставить("_55",  "99");
		
		Если ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Свойство("_" + Лев(КодПоОКТМО, 3), КодСубъектаРФ) Тогда
			Возврат КодСубъектаРФ;
		ИначеЕсли ПервыеСимволыВКодеОКТМО_КодСубъектаРФ.Свойство("_" + Лев(КодПоОКТМО, 2), КодСубъектаРФ) Тогда
			Возврат КодСубъектаРФ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КодСубъектаРФ;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если Область.Значение = РеквизитыЭлемента.ЦифровойКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыЭлемента.ЦифровойКод;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если Область.Значение = РеквизитыЭлемента.ЦифровойКод Тогда
			Область.Очистить();
		Иначе
			Область.Значение = РеквизитыЭлемента.ЦифровойКод;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочника(Результат)
	
	Возврат Новый Структура("ЦифровойКод", Результат.Код);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьВидКонтрагентаИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		
		ВидКонтрагента = ВыбЭлемент.Значение;
		
		ТабличныйДокумент.Область("П000080000701").Значение = ВидКонтрагента;
		
		УстановитьДоступностьОбластей(ЭтаФорма, "Лист08");
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныйПараметр) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцИГод = Формат(РезультатВыбора.КонецПериода, "ДФ=""ММ.гггг""");
	
	Если МесяцИГод <> ДополнительныйПараметр.Значение Тогда
		ДополнительныйПараметр.Значение = МесяцИГод;
	Иначе
		ДополнительныйПараметр.Значение = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если ВыбЭлемент <> Неопределено И ВыбЭлемент.Значение <> Область.Значение Тогда
		
		Область.Значение = ВыбЭлемент.Значение;
		
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	Если ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыР11М1"] Тогда
		Подстрока = "строки Подраздела 1.1";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки Подраздела 1.1?';
							|en = 'Удалить выбранные строки Подраздела 1.1?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыР12М1"] Тогда
		Подстрока = "строки Подраздела 1.2";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки Подраздела 1.2?';
							|en = 'Удалить выбранные строки Подраздела 1.2?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыР13М1"] Тогда
		Подстрока = "строки Подраздела 1.3";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки Подраздела 1.3?';
							|en = 'Удалить выбранные строки Подраздела 1.3?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыР13М2"] Тогда
		Подстрока = "строку 040";
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку 040?';
							|en = 'Удалить выбранную строку 040?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыЛ03ВМ1"] Тогда
		Подстрока = "строки 005-060";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки 005-060?';
							|en = 'Удалить выбранные строки 005-060?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыЛ08М1"] Тогда
		Подстрока = "код основания";
		ТекстВопроса = НСтр("ru = 'Удалить выбранный код основания?';
							|en = 'Удалить выбранный код основания?'");
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы["мИдГруппыЛ09П1М1"] Тогда
		Подстрока = "строки Приложения 1 к Листу 09";
		ТекстВопроса = НСтр("ru = 'Удалить выбранные строки Приложения 1 к Листу 09?';
							|en = 'Удалить выбранные строки Приложения 1 к Листу 09?'");
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" ИЛИ ЗначПоМесту = "220" ИЛИ ЗначПоМесту = "223" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			Если ЗначПоМесту = "220" ИЛИ ЗначПоМесту = "223" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		Если ЗначПоМесту = "223" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО.КПП);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО.КПП, Ложь);
		КонецЕсли;
		
		ТДО["СекцияПояснение"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	КонецЕсли;
	
	АвтоРасчПоказатели = Новый Массив;
	
	ВключитьРаздел = Истина;
	
	Если ТДО.Найти("ПризнакВключения") <> Неопределено Тогда
		
		ВключитьРаздел = ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение);
		
		ИменаИсключения = СтрРазделить("П00024М100002,П0027АМ100002,П0027АМ200002,П0027АМ300002", ",", Ложь);
		
		Для каждого Обл Из ТДО Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И СтрНачинаетсяС(Обл.Имя, "П0")
				И ИменаИсключения.Найти(Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) = Неопределено Тогда
				Если ВключитьРаздел Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(Обл.Имя, "ДобавлениеСтроки") Тогда
				Обл.Видимость = ВключитьРаздел;
			КонецЕсли;
		КонецЦикла;
		
		ОбластиСПереопределяемойГраницей = Новый Массив;
		Если ИмяРаздела = "Раздел1_3" Тогда
			ОбластиСПереопределяемойГраницей.Добавить(Форма.ТабличныйДокумент.Область("R13C3"));
			ОбластиСПереопределяемойГраницей.Добавить(Форма.ТабличныйДокумент.Область("R14C3"));
		КонецЕсли;
		Для каждого Обл Из ОбластиСПереопределяемойГраницей Цикл
			Обл.ЦветРамки = ?(ВключитьРаздел, Новый Цвет(192, 192, 192), Новый Цвет(255, 255, 255));
		КонецЦикла;
		
		Если НЕ ВключитьРаздел Тогда
			Если ИмяРаздела = "Лист02_2" Тогда
				СекцияПояснение_Строка400 = ТДО.Найти("СекцияПояснение_Строка400");
				Если СекцияПояснение_Строка400 <> Неопределено Тогда
					СекцияПояснение_Строка400.Видимость = Ложь;
				КонецЕсли;
			ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
				ТДО["П00024М100002_1"].Значение = "040";
			ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
				ТДО["Секция_КодРегиона"].Видимость = Ложь;
			ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
				ТДО["П0027АМ100002_1"].Значение = "021";
				ТДО["П0027АМ200002_1"].Значение = "051";
				ТДО["П0027АМ300002_1"].Значение = "061";
			ИначеЕсли ИмяРаздела = "Лист08" Тогда
				ТДО["СведенияОбОрганизацииУчастникеКГН"].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ВключитьРаздел Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтчетЗаГод = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
	
	ОтчетныйМесяц = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОтчетЗаКвартал = (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
	
	ПериодичностьКвартал = Форма.СтруктураРеквизитовФормы.мПериодичность
	= Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
	
	ПериодичностьМесяц = Форма.СтруктураРеквизитовФормы.мПериодичность
	= Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц;
	
	ПоМесту = СокрЛП(Форма.СтруктураДанныхТитульный.ПоМесту);
	
	ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	ЕстьОбособленныеПодразделения = Форма.СтруктураРеквизитовФормы.ЕстьОбособленныеПодразделения;
	
	Если ИмяРаздела = "Лист02" Тогда
		
		ПризнакНП = СокрЛП(ТДО["П000020000100"].Значение);
		
		Если ЗначениеЗаполнено(ПризнакНП) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020000200"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020000200"]);
		КонецЕсли;
		
		Если ПризнакНП = "04" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020000301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020000302"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020000303"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020000304"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020000301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020000302"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020000303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020000304"]);
		КонецЕсли;
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если НЕ ОтчетЗаКвартал Тогда
			// Ручное редактирование стр.010, стр.020, стр.030, стр.040, стр.050.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020001003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020001003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020002003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020002003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020003003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020003003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020004003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020004003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020005003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020005003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 12) Тогда
			// Ручное редактирование стр.110.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020011003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020011003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если (ПризнакНП = "06" ИЛИ ПризнакНП = "18") И НЕ Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТДО["СекцияПризнакОтклАвторасчетаЛист02Стр120"].Видимость = Истина;
			Если ЗначениеЗаполнено(ТДО["П000020012000"].Значение) Тогда
				// Ручное редактирование стр.120.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020012003"]);
				Инд = АвтоРасчПоказатели.Найти("П000020012003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТДО["СекцияПризнакОтклАвторасчетаЛист02Стр120"].Видимость = Ложь;
			ТДО["П000020012000"].Значение = "";
		КонецЕсли;
		
		Если ПризнакНП <> "02" И ЕстьОбособленныеПодразделения Тогда
			// Ручное редактирование стр.140.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020014003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020014003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОбособленныеПодразделения Тогда
			// Заполнение стр.160, стр.170 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020016003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020017003"]);
		Иначе
			// Ручное редактирование стр.160, стр.170.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020016003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020017003"]);
		КонецЕсли;
		
		Если НЕ ЕстьОбособленныеПодразделения Тогда
			// Ручное редактирование стр.260, стр.265, стр.266, стр.267.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020026003"]);
			Инд = АвтоРасчПоказатели.Найти("П000020026003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020026503"]);
			Инд = АвтоРасчПоказатели.Найти("П000020026503");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020026603"]);
			Инд = АвтоРасчПоказатели.Найти("П000020026603");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020026703"]);
			Инд = АвтоРасчПоказатели.Найти("П000020026703");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если ПериодичностьКвартал И ОтчетныйМесяц <> 12 Тогда
			// Ручное редактирование стр.290, стр.300, стр.310.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020029003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020030003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020031003"]);
		Иначе
			// Заполнение стр.290, стр.300, стр.310 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020029003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020030003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020031003"]);
		КонецЕсли;
		
		Если (ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11) Тогда
			// Ручное редактирование стр.320, стр.330, стр.340.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020032003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020033003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020034003"]);
		Иначе
			// Заполнение стр.320, стр.330, стр.340 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020032003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020033003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020034003"]);
		КонецЕсли;
		
		Если ОтчетныйМесяц <> 12 Тогда
			// Заполнение стр.357, стр.358, стр.359 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020035703"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020035803"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000020035903"]);
			Инд = АвтоРасчПоказатели.Найти("П000020035903");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		Иначе
			// Ручное редактирование стр.357, стр.358.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020035703"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000020035803"]);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
		
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000100"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000200"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000301"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000302"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000303"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000210000304"], Ложь);
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
		
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000100"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000200"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000301"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000302"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000303"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220000304"], Ложь);
		
		СекцияПояснение_Строка400 = ТДО.Найти("СекцияПояснение_Строка400");
		Если СекцияПояснение_Строка400 <> Неопределено Тогда
			СекцияПояснение_Строка400.Видимость = ?(ОтчетЗаКвартал, Ложь, Истина);
		КонецЕсли;
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
		
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000100"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000200"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000301"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000302"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000303"], Ложь);
		ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000230000304"], Ложь);
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
		
		ПризнакНП = СокрЛП(ТДО["П000240000100"].Значение);
		
		Если ЗначениеЗаполнено(ПризнакНП) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240000200"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000240000200"]);
		КонецЕсли;
		
		Если ПризнакНП = "04" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240000301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240000302"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240000303"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240000304"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000240000301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000240000302"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000240000303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000240000304"]);
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00024М100002_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Обл.Значение = ?(Индекс < 11, Формат((Индекс + 3) * 10, "ЧЦ=3;ЧВН="), "");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00024М100002_" + ИндексСтр);
		КонецЦикла;
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если НЕ (ЗначениеЗаполнено(ПризнакНП) И ПризнакНП <> "05") Тогда
			// Ручное редактирование стр.140.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240014003"]);
			Инд = АвтоРасчПоказатели.Найти("П000240014003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтчетныйМесяц <> 12 Тогда
			// Ручное редактирование стр.160, стр.161.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240016003"]);
			Инд = АвтоРасчПоказатели.Найти("П000240016003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000240016103"]);
			Инд = АвтоРасчПоказатели.Найти("П000240016103");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
		
		ПризнакНП = СокрЛП(ТДО["П000250000100"].Значение);
		
		Если ЗначениеЗаполнено(ПризнакНП) Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250000200"]);
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000250000200"]);
		КонецЕсли;
		
		РС = СокрЛП(ТДО["П000250000300"].Значение);
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если ЭтоОбособленноеПодразделение Тогда
			// Ручное редактирование стр.030, стр.031.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250003003"]);
			Инд = АвтоРасчПоказатели.Найти("П000250003003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250003103"]);
			Инд = АвтоРасчПоказатели.Найти("П000250003103");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если РС = "3" Тогда
			// Ручное редактирование стр.050.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250005003"]);
			Инд = АвтоРасчПоказатели.Найти("П000250005003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОбособленноеПодразделение Тогда
			// Ручное редактирование стр.051.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250005103"]);
			Инд = АвтоРасчПоказатели.Найти("П000250005103");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОкрЧФ(Форма, ТДО["П000250005103"].Значение))
			И ТДО["П000250006003"].Значение >= Форма.СтруктураРеквизитовФормы.ОбщеустановленнаяНалоговаяСтавка Тогда
			// Ручное редактирование стр.070.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250007003"]);
			Инд = АвтоРасчПоказатели.Найти("П000250007003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если РС = "3" ИЛИ НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
			// Заполнение стр.120 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000250012003"]);
			Инд = АвтоРасчПоказатели.Найти("П000250012003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		Иначе
			Если ЭтоОбособленноеПодразделение Тогда
				// Ручное редактирование стр.120.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250012003"]);
				Инд = АвтоРасчПоказатели.Найти("П000250012003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РС = "3"
			ИЛИ НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
			// Заполнение стр.121 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000250012103"]);
			Инд = АвтоРасчПоказатели.Найти("П000250012103");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		Иначе
			Если ЭтоОбособленноеПодразделение Тогда
				// Ручное редактирование стр.121.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000250012103"]);
				Инд = АвтоРасчПоказатели.Найти("П000250012103");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
			// Заполнение стр.120 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000260012003"]);
			Инд = АвтоРасчПоказатели.Найти("П000260012003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
			// Заполнение стр.121 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000260012103"]);
			Инд = АвтоРасчПоказатели.Найти("П000260012103");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			РС = СокрЛП(ТДО["П0026а0000500"].Значение);
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
			Если РС = "3" Тогда
				// Ручное редактирование стр.050.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П0026а0005003"]);
				Инд = АвтоРасчПоказатели.Найти("П0026а0005003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ТДО["КодРегиона"].Текст = КодСубъектаРФ(ТДО["П0026а0000300"].Значение);
		
		ТДО["Секция_КодРегиона"].Видимость = ЗначениеЗаполнено(ТДО["КодРегиона"].Текст);
		
	ИначеЕсли ИмяРаздела = "Лист02_6бА" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ (ОкрЧФ(Форма, ТДО["П0026б0004003"].Значение) < 0 И ОкрЧФ(Форма, ТДО["П0026б0014003"].Значение) > 0) Тогда
			// Заполнение стр.041 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0026б0004103"]);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6бБ" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
			Если ОкрЧФ(Форма, ТДО["П0026б0027003"].Значение) <= 0 Тогда
				// Ручное редактирование стр.280.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П0026б0028003"]);
				Инд = АвтоРасчПоказатели.Найти("П0026б0028003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
			Если ОкрЧФ(Форма, ТДО["П0026б0032003"].Значение) <= 0 Тогда
				// Ручное редактирование стр.340.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П0026б0034003"]);
				Инд = АвтоРасчПоказатели.Найти("П0026б0034003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОтчетЗаГод Тогда
			// Заполнение строк 290, 291, 360, 361 не предусмотрено.
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0026б0029003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0026б0029103"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0026б0036003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0026б0036103"]);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П0027АМ100002_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Обл.Значение = ?(Индекс < 5, "02" + ИндексСтр, "");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П0027АМ100002_" + ИндексСтр);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П0027АМ200002_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Обл.Значение = ?(Индекс < 5, "05" + ИндексСтр, "");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П0027АМ200002_" + ИндексСтр);
		КонецЦикла;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П0027АМ300002_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Обл.Значение = ?(Индекс < 5, "06" + ИндексСтр, "");
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П0027АМ300002_" + ИндексСтр);
		КонецЦикла;
		
		Если ОтчетныйМесяц <> 12 Тогда
			// Ручное редактирование стр.060.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П0027А0006003"]);
			Инд = АвтоРасчПоказатели.Найти("П0027А0006003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если СокрЛП(ТДО["П0003А0000100"].Значение) = "1" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П0003А0000200"]);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П0003А0000200"]);
		КонецЕсли;
		
		Если СокрЛП(ТДО["П0003А0000100"].Значение) <> "1" Тогда
			// Ручное редактирование стр.090.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П0003А0009003"]);
			Инд = АвтоРасчПоказатели.Найти("П0003А0009003");
			Если Инд <> Неопределено Тогда
				АвтоРасчПоказатели.Удалить(Инд);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист08" Тогда
		
		Если СокрЛП(ТДО["П000080000101"].Значение) = "1" Тогда
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080000201"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080000301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080000401"]);
			ТДО["СведенияОбОрганизацииУчастникеКГН"].Видимость = Истина;
		Иначе
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080000201"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080000301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080000401"]);
			ТДО["СведенияОбОрганизацииУчастникеКГН"].Видимость = Ложь;
		КонецЕсли;
		
		ВидКонтрагента = СокрЛП(ТДО["П000080000701"].Значение);
		
		СекцияРегНомер   = ТДО["РегистрационныйНомерКонтрагента"];
		СекцияНаимОргРус = ТДО["НаименованиеКонтрагентаРус"];
		СекцияНаимОргЛат = ТДО["НаименованиеКонтрагентаЛат"];
		СекцияФИОРус     = ТДО["ФИОКонтрагентаРус"];
		СекцияФИОЛат     = ТДО["ФИОКонтрагентаЛат"];
		
		Если ВидКонтрагента = "Российская организация" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Ложь;
			СекцияНаимОргРус.Видимость = Истина;
			СекцияНаимОргЛат.Видимость = Ложь;
			СекцияФИОРус.Видимость     = Ложь;
			СекцияФИОЛат.Видимость     = Ложь;
			
		ИначеЕсли ВидКонтрагента = "Иностранная организация" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Истина;
			СекцияНаимОргРус.Видимость = Истина;
			СекцияНаимОргЛат.Видимость = Истина;
			СекцияФИОРус.Видимость     = Ложь;
			СекцияФИОЛат.Видимость     = Ложь;
			
		ИначеЕсли ВидКонтрагента = "Индивидуальный предприниматель" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Ложь;
			СекцияНаимОргРус.Видимость = Ложь;
			СекцияНаимОргЛат.Видимость = Ложь;
			СекцияФИОРус.Видимость     = Истина;
			СекцияФИОЛат.Видимость     = Ложь;
			
		ИначеЕсли ВидКонтрагента = "Российский гражданин" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Ложь;
			СекцияНаимОргРус.Видимость = Ложь;
			СекцияНаимОргЛат.Видимость = Ложь;
			СекцияФИОРус.Видимость     = Истина;
			СекцияФИОЛат.Видимость     = Ложь;
			
		ИначеЕсли ВидКонтрагента = "Иностранный гражданин или лицо без гражданства" Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Ложь;
			СекцияНаимОргРус.Видимость = Ложь;
			СекцияНаимОргЛат.Видимость = Ложь;
			СекцияФИОРус.Видимость     = Истина;
			СекцияФИОЛат.Видимость     = Истина;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001001"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001101"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001201"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001301"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001302"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001303"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001401"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001402"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000080001403"]);
			
			СекцияРегНомер.Видимость   = Ложь;
			СекцияНаимОргРус.Видимость = Истина;
			СекцияНаимОргЛат.Видимость = Истина;
			СекцияФИОРус.Видимость     = Ложь;
			СекцияФИОЛат.Видимость     = Ложь;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00008М200003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			ТипСделки = СокрЛП(Обл.Значение);
			Если ТипСделки = "1" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200005_" + ИндексСтр));
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200006_" + ИндексСтр));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200007_" + ИндексСтр));
			ИначеЕсли ТипСделки = "2" ИЛИ ТипСделки = "3" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200005_" + ИндексСтр));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200006_" + ИндексСтр));
				РазрешитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200007_" + ИндексСтр));
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200005_" + ИндексСтр));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200006_" + ИндексСтр));
				ЗапретитьВводДанныхВОбласть(Форма, ТДО.Найти("П00008М200007_" + ИндексСтр));
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00008М200003_" + ИндексСтр);
		КонецЦикла;
		
		ВидКорр = СокрЛП(ТДО["П000080000501"].Значение);
		
		Если СтрРазделить("1,2,3,4,5,6", ",", Ложь).Найти(ВидКорр) = Неопределено Тогда
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800001003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800002003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800003003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800004003"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800005003"]);
			
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800001004"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800002004"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800003004"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800004004"]);
			ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800005004"]);
			
		ИначеЕсли ВидКорр = "6" Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800001003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800002003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800003003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800004003"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800005003"]);
			
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800001004"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800002004"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800003004"]);
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800004004"]);
			
			// Ручное редактирование стр.050 по гр.4.
			РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800005004"]);
			
		Иначе
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800001003"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800002003"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800003003"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800004003"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800005003"]);
				
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800001004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800002004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800003004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800004004"]);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800001003"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800002003"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800003003"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800004003"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000800005003"], Ложь);
				
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800001004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800002004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800003004"]);
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000800004004"]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист09" Тогда
		
		Если ЗначениеЗаполнено(ТДО["П0009А0000100"].Значение) Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если СтрНачинаетсяС(Пок.Ключ, "П009Б2") ИЛИ СтрНачинаетсяС(Пок.Ключ, "П009Б3") Тогда
					Продолжить;
				КонецЕсли;
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
			Для каждого Обл Из ТДО Цикл
				Если АвтоРасчПоказатели.Найти(Обл.Имя) = Неопределено Тогда
					Если СтрНачинаетсяС(Обл.Имя, "П009Б1") Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл);
					ИначеЕсли СтрНачинаетсяС(Обл.Имя, "П009Б2") ИЛИ СтрНачинаетсяС(Обл.Имя, "П009Б3") Тогда
						ЗапретитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
			Обл2 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			Пока Обл1 <> Неопределено Цикл
				ЗапретитьВводДанныхВОбласть(Форма, Обл1);
				РазрешитьВводДанныхВОбласть(Форма, Обл2);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
				Обл2 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			КонецЦикла;
			
			ТДО["СекцияРазделБ1"].Видимость = Истина;
			ТДО["СекцияРазделыБ2Б3"].Видимость = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(ТДО["П0009А0000200"].Значение) Тогда
			
			СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
			Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
				Если СтрНачинаетсяС(Пок.Ключ, "П009Б1") Тогда
					Продолжить;
				КонецЕсли;
				АвтоРасчПоказатели.Добавить(Пок.Ключ);
			КонецЦикла;
			
			Для каждого Обл Из ТДО Цикл
				Если АвтоРасчПоказатели.Найти(Обл.Имя) = Неопределено Тогда
					Если СтрНачинаетсяС(Обл.Имя, "П009Б1") Тогда
						ЗапретитьВводДанныхВОбласть(Форма, Обл);
					ИначеЕсли СтрНачинаетсяС(Обл.Имя, "П009Б2") ИЛИ СтрНачинаетсяС(Обл.Имя, "П009Б3") Тогда
						РазрешитьВводДанныхВОбласть(Форма, Обл);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
			Обл2 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			Пока Обл1 <> Неопределено Цикл
				РазрешитьВводДанныхВОбласть(Форма, Обл1);
				РазрешитьВводДанныхВОбласть(Форма, Обл2);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
				Обл2 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			КонецЦикла;
			
			ТДО["СекцияРазделБ1"].Видимость = Ложь;
			ТДО["СекцияРазделыБ2Б3"].Видимость = Истина;
			
		Иначе
			
			АвтоРасчПоказатели.Добавить("П009П1М115003");
			
			Для каждого Обл Из ТДО Цикл
				Если СтрНачинаетсяС(Обл.Имя, "П009Б1")
					ИЛИ СтрНачинаетсяС(Обл.Имя, "П009Б2") ИЛИ СтрНачинаетсяС(Обл.Имя, "П009Б3") Тогда
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЦикла;
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
			Обл2 = ТДО.Найти("П009П1М113003_" + ИндексСтр);
			Обл3 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			Пока Обл1 <> Неопределено Цикл
				РазрешитьВводДанныхВОбласть(Форма, Обл1);
				ЗапретитьВводДанныхВОбласть(Форма, Обл2);
				ЗапретитьВводДанныхВОбласть(Форма, Обл3);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл1 = ТДО.Найти("П009П1М100100_" + ИндексСтр);
				Обл2 = ТДО.Найти("П009П1М113003_" + ИндексСтр);
				Обл3 = ТДО.Найти("П009П1М114003_" + ИндексСтр);
			КонецЦикла;
			
			ТДО["СекцияРазделБ1"].Видимость = Истина;
			ТДО["СекцияРазделыБ2Б3"].Видимость = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_7Б"
		ИЛИ ИмяРаздела = "Лист02_7В"
		ИЛИ ИмяРаздела = "Лист02_7Г"
		ИЛИ ИмяРаздела = "Лист03Б"
		ИЛИ ИмяРаздела = "Лист04"
		ИЛИ ИмяРаздела = "Лист05"
		ИЛИ ИмяРаздела = "Лист06"
		ИЛИ ИмяРаздела = "Лист07"
		ИЛИ ИмяРаздела = "Приложение2" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина
			И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
		 ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(Форма, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
			Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, НаимРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 НаимРаздела,
																	 мСтруктураМногоуровневыхРазделов,
																	 ТабличныйДокумент,
																	 СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела]
		= ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 НаимРаздела,
												 мСтруктураМногоуровневыхРазделов,
												 ТабличныйДокумент,
												 СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимРаздела)
	
	СохранитьДанныеРаздела(НаимРаздела);
	
	Если Модифицированность Тогда
		
		// Заполнение стр.160, стр.170 Листа 02 не предусмотрено, если есть обособленные подразделения.
		// Их обнуление выполняется в "ОбработатьНаличиеОтсутствиеОбособленныхПодразделений".
		//
		ОбработатьНаличиеОтсутствиеОбособленныхПодразделений(НаимРаздела);
		
		РасчетНаСервере();
		
		ОблУдалитьСтраницуЗначокТекст = Неопределено;
		ОблУдалитьСтраницуЗначокГиперссылка = Неопределено;
		ОблУдалитьСтраницуТекст = Неопределено;
		ОблУдалитьСтраницуГиперссылка = Неопределено;
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено Тогда
			ОблУдалитьСтраницуЗначокТекст = ОблУдалитьСтраницуЗначок.Текст;
			ОблУдалитьСтраницуЗначокГиперссылка = ОблУдалитьСтраницуЗначок.Гиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницуТекст = ОблУдалитьСтраницу.Текст;
			ОблУдалитьСтраницуГиперссылка = ОблУдалитьСтраницу.Гиперссылка;
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокумент(НаимРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено
			И ОблУдалитьСтраницуЗначокТекст <> Неопределено
			И ОблУдалитьСтраницуЗначокГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницуЗначок.Текст = ОблУдалитьСтраницуЗначокТекст;
			ОблУдалитьСтраницуЗначок.Гиперссылка = ОблУдалитьСтраницуЗначокГиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено
			И ОблУдалитьСтраницуТекст <> Неопределено
			И ОблУдалитьСтраницуГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = ОблУдалитьСтраницуТекст;
			ОблУдалитьСтраницу.Гиперссылка = ОблУдалитьСтраницуГиперссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.УстановитьЧисловойФорматОбласти(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 ИмяТекРаздела,
												 СтруктураРеквизитовФормы,
												 ТабличныйДокумент);
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		ТекВетка = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
		"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела(ЭтаФорма, ИмяТекРаздела)]);
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектОтчета.УстановитьФорматВывода(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										ИмяТекРаздела,
										СтруктураРеквизитовФормы,
										ТабличныйДокумент);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ОбъектОтчета.ВставитьДопСтроку(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ЭлемСтруктуры.Ключ,
											   ИмяОбластиПреемника, , Элементы);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуНаСервере(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере(ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, ИмяРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	РодительскаяВетка = ?(ТекВетка.Родитель = Неопределено, ДеревоДанныхРаздела, ТекВетка.Родитель);
	НовВетка = РодительскаяВетка.Строки.Добавить();
	ОбъектОтчета.ИнициализироватьПодчиненныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													ИмяРаздела,
													НовВетка,
													мСтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	НомерНовВетки = РодительскаяВетка.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ДеревоДанныхРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1] = НомерНовВетки;
	
	Модифицированность = Истина;
	
	Для каждого ПромежуточнаяСтрока Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ПромежуточнаяСтрока.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
			Для Инд = 0 По СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Цикл
				ЭлементыПромежуточнойСтроки = ПромежуточнаяСтрока.ПолучитьЭлементы();
				Для каждого ЭлементПромежуточнойСтроки Из ЭлементыПромежуточнойСтроки Цикл
					Если ЭлементПромежуточнойСтроки.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[Инд] Тогда
						Если Инд = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Тогда
							Элементы.РазделыОтчета.ТекущаяСтрока = ЭлементПромежуточнойСтроки.ПолучитьИдентификатор();
							Возврат;
						Иначе
							ПромежуточнаяСтрока = ЭлементПромежуточнойСтроки;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	УдалитьСтраницуНаСервере(ИмяРаздела);
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере(ИмяРаздела)
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, ИмяРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ТекВетка = ДеревоДанныхРаздела;
	Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
		ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
	КонецЦикла;
	
	НомУдаляемойСтраницы = НомерСтроки;
	
	РодительскаяВетка = ?(ТекВетка.Родитель = Неопределено, ДеревоДанныхРаздела, ТекВетка.Родитель);
	НомПоследнейСтраницы = РодительскаяВетка.Строки.Количество();
	
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	РодительскаяВетка.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	
	ДеревоДанныхРаздела = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Модифицированность = Истина;
	
	Для каждого ПромежуточнаяСтрока Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ПромежуточнаяСтрока.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
			Для Инд = 0 По СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Цикл
				ЭлементыПромежуточнойСтроки = ПромежуточнаяСтрока.ПолучитьЭлементы();
				Для каждого ЭлементПромежуточнойСтроки Из ЭлементыПромежуточнойСтроки Цикл
					Если ЭлементПромежуточнойСтроки.КолонкаНомерСтраницыРазделаОтчета
						= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[Инд] Тогда
						Если Инд = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Количество() - 1 Тогда
							Элементы.РазделыОтчета.ТекущаяСтрока = ЭлементПромежуточнойСтроки.ПолучитьИдентификатор();
							Возврат;
						Иначе
							ПромежуточнаяСтрока = ЭлементПромежуточнойСтроки;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ТекстПредупреждения = "";
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_7А" Тогда
		
		ИмяПервойГрафы = "";
		
		Если СтрНайти(ИмяТекОбласти, СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1) > 0 Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыЛ027АМ1]["ИменаГраф"][0];
			НомерСтроки = "020";
		ИначеЕсли СтрНайти(ИмяТекОбласти, СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2) > 0 Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыЛ027АМ2]["ИменаГраф"][0];
			НомерСтроки = "050";
		ИначеЕсли СтрНайти(ИмяТекОбласти, СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3) > 0 Тогда
			ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			СтруктураРеквизитовФормы.мИдГруппыЛ027АМ3]["ИменаГраф"][0];
			НомерСтроки = "060";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПервойГрафы) И ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + "_7") <> Неопределено Тогда
			ТекстПредупреждения
			= СтрШаблон(НСтр("ru = 'Возможно не более семи строк с указанием расходов из строки %1';
							|en = 'Возможно не более семи строк с указанием расходов из строки %1'"), НомерСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОбъектОтчета = ОбъектОтчета(ЭтотОбъект.ИмяФормы);
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяТекОбласти);
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ОбъектОтчета.ВставитьДопСтроку(СтруктураРеквизитовФормы.мВыбраннаяФорма,
									   СтруктураРеквизитовФормы,
									   ТабличныйДокумент,
									   ИмяГруппы,
									   ИмяОбластиПреемника, , Элементы);
		
		Модифицированность = Истина;
		
		СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	Модифицированность = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбласти);
	ТекИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

#КонецОбласти

#Область Авторасчет

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПоказателяПоВеткам(Форма, Ветки, ИмяПоказателя, Условия = Неопределено)
	
	Результат = 0;
	
	Для каждого Ветка Из Ветки Цикл
		Если Условия = Неопределено ИЛИ ВыполненыУсловияЗаполнения(Ветка.Данные, Условия) Тогда
			Результат = Результат + ОкрЧФ(Форма, Ветка.Данные[ИмяПоказателя]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВеткаУдовлетворяющаяУсловиямПоиска(Ветки, Условия)
	
	Для каждого Ветка Из Ветки Цикл
		Если ВыполненыУсловияЗаполнения(Ветка.Данные, Условия) Тогда
			Возврат Ветка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НалоговаяБазаЗакрытыхОбособленныхПодразделений(Форма, ИмяРаздела, Листы02, ПризнакНП = Неопределено)
	
	Результат = 0;
	
	Если ИмяРаздела = "Лист02_5" Тогда
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Для каждого Лист02_5 Из Листы02_5 Цикл
				Если Лист02_5.Данные["П000250000100"] = ПризнакНП И СокрЛП(Лист02_5.Данные["П000250000300"]) = "3" Тогда
					Результат = Результат + ОкрЧФ(Форма, Лист02_5.Данные["П000250005003"]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_6а" Тогда
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_6 = Лист02.Строки[5].Строки;
			Для каждого Лист02_6 Из Листы02_6 Цикл
				Листы02_6а = Лист02_6.Строки[0].Строки;
				Для каждого Лист02_6а Из Листы02_6а Цикл
					Если СокрЛП(Лист02_6а.Данные["П0026а0000500"]) = "3" Тогда
						Результат = Результат + ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0005003"]);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВыполненыУсловияЗаполнения(СтруктураДанных, Условия)
	
	Результат = Ложь;
	
	Для каждого Условие Из Условия Цикл
		
		ИмяПоказателя = Условие.Ключ;
		ТребЗначение  = Условие.Значение;
		ТекЗначение   = СтруктураДанных[ИмяПоказателя];
		
		Если ТипЗнч(ТекЗначение) = Тип("Строка") Тогда
			ТекЗначение = СокрЛП(ТекЗначение);
		КонецЕсли;
		
		Если ТребЗначение = Неопределено Тогда
			Результат = ТекЗначение <> "";
		ИначеЕсли ТипЗнч(ТребЗначение) = Тип("Массив") Тогда
			Результат = ТребЗначение.Найти(ТекЗначение) <> Неопределено;
		Иначе
			Результат = ТекЗначение = ТребЗначение;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр, ИндексПодч, ИндексПодчСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если СтрНачинаетсяС(ИмяРаздела, "Лист02") Тогда
		
		// Лист 02 или одно из Приложений к нему.
		//
		РасчетВДеревеЗначений(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				// Стр.020 = стр.021 + стр.022 + стр.023 + стр.024.
				ТДО["П0003А0002003"].Значение = Макс(0
				, ОкрЧФ(Форма, ТДО["П0003А0002103"].Значение) + ОкрЧФ(Форма, ТДО["П0003А0002203"].Значение)
				+ ОкрЧФ(Форма, ТДО["П0003А0002303"].Значение) + ОкрЧФ(Форма, ТДО["П0003А0002403"].Значение));
				
				// Стр.010 = стр.020 + стр.030 + стр.040 + стр.050.
				ТДО["П0003А0001003"].Значение = Макс(0
				, ОкрЧФ(Форма, ТДО["П0003А0002003"].Значение) + ОкрЧФ(Форма, ТДО["П0003А0003003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П0003А0004003"].Значение) + ОкрЧФ(Форма, ТДО["П0003А0005003"].Значение));
				
				Если СокрЛП(ТДО["П0003А0000100"].Значение) = "1" Тогда
					Если ЗначениеЗаполнено(ТДО["П0003А0001003"].Значение) Тогда
						ТДО["П0003А0009003"].Значение
						= ОкрЧФ(Форма, ТДО["П0003А0001003"].Значение)
						+ ОкрЧФ(Форма, ТДО["П0003А0007003"].Значение)
						- ОкрЧФ(Форма, ТДО["П0003А0008103"].Значение);
					ИначеЕсли ЗначениеЗаполнено(ТДО["П0003А0000103"].Значение) Тогда
						ТДО["П0003А0009003"].Значение
						= ОкрЧФ(Форма, ТДО["П0003А0000103"].Значение)
						- ОкрЧФ(Форма, ТДО["П0003А0008103"].Значение);
					Иначе
						ТДО["П0003А0009003"].Значение = 0;
					КонецЕсли;
				Иначе
					// Ручное редактирование стр.090.
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				// Стр.030 = стр.010 * стр.020 / 100.
				ТДО["П0003Б0003003"].Значение
				= Макс(0, ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П0003Б0001003"].Значение) * ТДО["П0003Б0002003"].Значение / 100));
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист04" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				// Стр.040 = (стр.010 - стр.020) * стр.030 / 100.
				ТДО["П000040004003"].Значение = Макс(0, ОкрЧФ(Форма, (ОкрЧФ(Форма, ТДО["П000040001003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000040002003"].Значение)) * ТДО["П000040003003"].Значение / 100));
				
				// Стр.080 = стр.040 - стр.050 - стр.060 - стр.070.
				ТДО["П000040008003"].Значение = Макс(0
				, ОкрЧФ(Форма, ТДО["П000040004003"].Значение) - ОкрЧФ(Форма, ТДО["П000040005003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000040006003"].Значение) - ОкрЧФ(Форма, ТДО["П000040007003"].Значение));
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист05" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				// Стр.040 = стр.010 - стр.020.
				ТДО["П000050004003"].Значение
				= ОкрЧФ(Форма, ТДО["П000050001003"].Значение) - ОкрЧФ(Форма, ТДО["П000050002003"].Значение);
				
				// Стр.060 = стр.040 - стр.050.
				ТДО["П000050006003"].Значение = Макс(0,
				ОкрЧФ(Форма, ТДО["П000050004003"].Значение) - ОкрЧФ(Форма, ТДО["П000050005003"].Значение));
				
				// Стр.100 = стр.060 - стр.080.
				ТДО["П000050010003"].Значение = Макс(0,
				ОкрЧФ(Форма, ТДО["П000050006003"].Значение) - ОкрЧФ(Форма, ТДО["П000050008003"].Значение));
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				// Стр.010 = стр.020 + стр.030 + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 + стр.110.
				ТДО["П000060001003"].Значение
				= ОкрЧФ(Форма, ТДО["П000060002003"].Значение) + ОкрЧФ(Форма, ТДО["П000060003003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060004003"].Значение) + ОкрЧФ(Форма, ТДО["П000060005003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060006003"].Значение) + ОкрЧФ(Форма, ТДО["П000060007003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060008003"].Значение) + ОкрЧФ(Форма, ТДО["П000060009003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060010003"].Значение) + ОкрЧФ(Форма, ТДО["П000060011003"].Значение);
				
				// Стр.190 = стр.200 + стр.210 + стр.220.
				ТДО["П000060019003"].Значение = ОкрЧФ(Форма, ТДО["П000060020003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060021003"].Значение) + ОкрЧФ(Форма, ТДО["П000060022003"].Значение);
				
				// Стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320.
				ТДО["П000060024003"].Значение
				= ОкрЧФ(Форма, ТДО["П000060025003"].Значение) + ОкрЧФ(Форма, ТДО["П000060026003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060027003"].Значение) + ОкрЧФ(Форма, ТДО["П000060028003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060029003"].Значение) + ОкрЧФ(Форма, ТДО["П000060030003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060031003"].Значение) + ОкрЧФ(Форма, ТДО["П000060032003"].Значение);
				
				// Стр.330 = стр.020 + стр.030 - стр.140 - стр.200 - стр.250.
				ТДО["П000060033003"].Значение = ОкрЧФ(Форма, ТДО["П000060002003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060003003"].Значение) - ОкрЧФ(Форма, ТДО["П000060014003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060020003"].Значение) - ОкрЧФ(Форма, ТДО["П000060025003"].Значение);
				
				// Стр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260.
				ТДО["П000060035003"].Значение = ОкрЧФ(Форма, ТДО["П000060004003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060005003"].Значение) - ОкрЧФ(Форма, ТДО["П000060015003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060021003"].Значение) - ОкрЧФ(Форма, ТДО["П000060026003"].Значение);
				
				// Стр.370 = стр.060 - стр.160 - стр.270.
				ТДО["П000060037003"].Значение = Макс(0, ОкрЧФ(Форма, ТДО["П000060006003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060016003"].Значение) - ОкрЧФ(Форма, ТДО["П000060027003"].Значение));
				
				// Стр.380 = стр.070 - стр.170 - стр.280.
				ТДО["П000060038003"].Значение = Макс(0, ОкрЧФ(Форма, ТДО["П000060007003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060017003"].Значение) - ОкрЧФ(Форма, ТДО["П000060028003"].Значение));
				
				// Стр.390 = стр.110 - стр.180 - стр.220 - стр.320.
				ТДО["П000060039003"].Значение
				= ОкрЧФ(Форма, ТДО["П000060011003"].Значение) - ОкрЧФ(Форма, ТДО["П000060018003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060022003"].Значение) - ОкрЧФ(Форма, ТДО["П000060032003"].Значение);
				
				// Стр.450 = стр.350 - стр.360.
				ТДО["П000060045003"].Значение
				= Макс(0, ОкрЧФ(Форма, ТДО["П000060035003"].Значение) - ОкрЧФ(Форма, ТДО["П000060036003"].Значение));
				
				// Стр.480 = стр.460 - стр.470 + стр.471.
				ТДО["П000060048003"].Значение = Макс(0, ОкрЧФ(Форма, ТДО["П000060046003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000060047003"].Значение) + ОкрЧФ(Форма, ТДО["П000060047103"].Значение));
				
				// Стр.481 = стр.459 - стр.471.
				ТДО["П000060048103"].Значение
				= Макс(0, ОкрЧФ(Форма, ТДО["П000060045903"].Значение) - ОкрЧФ(Форма, ТДО["П000060047103"].Значение));
				
				// Стр.490 = стр.390 - стр.400.
				ТДО["П000060049003"].Значение
				= Макс(0, ОкрЧФ(Форма, ТДО["П000060039003"].Значение) - ОкрЧФ(Форма, ТДО["П000060040003"].Значение));
				
				// Стр.520 = стр.500 - стр.510.
				ТДО["П000060052003"].Значение
				= Макс(0, ОкрЧФ(Форма, ТДО["П000060050003"].Значение) - ОкрЧФ(Форма, ТДО["П000060051003"].Значение));
				
				// Стр.530 = стр.450 - стр.470 + стр.490 - стр.510.
				ТДО["П000060053003"].Значение = Макс(0
				, ОкрЧФ(Форма, ТДО["П000060045003"].Значение) - ОкрЧФ(Форма, ТДО["П000060047003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000060049003"].Значение) - ОкрЧФ(Форма, ТДО["П000060051003"].Значение));
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				ИтогГр3 = 0;
				ИтогГр4 = 0;
				ИтогГр6 = 0;
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00007М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					СумГр3 = ОкрЧФ(Форма, Обл.Значение);
					СумГр4 = ОкрЧФ(Форма, ТДО["П00007М100004_" + ИндексСтр].Значение);
					СумГр6 = ОкрЧФ(Форма, ТДО["П00007М100006_" + ИндексСтр].Значение);
					ИтогГр3 = ИтогГр3 + СумГр3;
					ИтогГр4 = ИтогГр4 + СумГр4;
					ИтогГр6 = ИтогГр6 + СумГр6;
					ТДО["П00007М100007_" + ИндексСтр].Значение = СумГр3 - СумГр4 - СумГр6;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00007М100003_" + ИндексСтр);
				КонецЦикла;
				ТДО["П000070000003"].Значение = ИтогГр3;
				ТДО["П000070000004"].Значение = ИтогГр4;
				ТДО["П000070000006"].Значение = ИтогГр6;
				ТДО["П000070000007"].Значение = ИтогГр3 - ИтогГр4 - ИтогГр6;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист08" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				ВидКорр = СокрЛП(ТДО["П000080000501"].Значение);
				
				Если СтрРазделить("1,2,3,4,5,6", ",", Ложь).Найти(ВидКорр) = Неопределено Тогда
					
					ТДО["П000800001003"].Значение = "";
					ТДО["П000800002003"].Значение = "";
					ТДО["П000800003003"].Значение = "";
					ТДО["П000800004003"].Значение = "";
					ТДО["П000800005003"].Значение = "";
					ТДО["П000800001004"].Значение = 0;
					ТДО["П000800002004"].Значение = 0;
					ТДО["П000800003004"].Значение = 0;
					ТДО["П000800004004"].Значение = 0;
					ТДО["П000800005004"].Значение = 0;
					
				ИначеЕсли ВидКорр = "6" Тогда
					
					// Ручное редактирование стр.050 по гр.4.
					
				Иначе
					
					Если ВидКорр = "1" Тогда
						
						ТДО["П000800001004"].Значение
						= ?(ТДО["П000800001004"].Значение < 0, -1 * ТДО["П000800001004"].Значение, ТДО["П000800001004"].Значение);
						ТДО["П000800002004"].Значение
						= ?(ТДО["П000800002004"].Значение < 0, -1 * ТДО["П000800002004"].Значение, ТДО["П000800002004"].Значение);
						ТДО["П000800003004"].Значение
						= ?(ТДО["П000800003004"].Значение < 0, -1 * ТДО["П000800003004"].Значение, ТДО["П000800003004"].Значение);
						ТДО["П000800004004"].Значение
						= ?(ТДО["П000800004004"].Значение < 0, -1 * ТДО["П000800004004"].Значение, ТДО["П000800004004"].Значение);
						
						Стр010Гр4 = ОкрЧФ(Форма, ТДО["П000800001004"].Значение);
						Стр020Гр4 = ОкрЧФ(Форма, ТДО["П000800002004"].Значение);
						Стр030Гр4 = ОкрЧФ(Форма, ТДО["П000800003004"].Значение);
						Стр040Гр4 = ОкрЧФ(Форма, ТДО["П000800004004"].Значение);
						Стр050Гр4 = Стр010Гр4 + Стр020Гр4 + Стр030Гр4 + Стр040Гр4;
						
						ТДО["П000800005004"].Значение = Стр050Гр4;
						
						ТДО["П000800001003"].Значение = ?(Стр010Гр4 > 0, "1", "");
						ТДО["П000800002003"].Значение = ?(Стр020Гр4 > 0, "1", "");
						ТДО["П000800003003"].Значение = ?(Стр030Гр4 > 0, "0", "");
						ТДО["П000800004003"].Значение = ?(Стр040Гр4 > 0, "0", "");
						ТДО["П000800005003"].Значение = ?(Стр050Гр4 > 0, "1", "");
						
					Иначе // ВидКорр в ["2","3","4","5"]
						
						ТДО["П000800001004"].Значение
						= ?(ТДО["П000800001004"].Значение > 0, -1 * ТДО["П000800001004"].Значение, ТДО["П000800001004"].Значение);
						ТДО["П000800002004"].Значение
						= ?(ТДО["П000800002004"].Значение > 0, -1 * ТДО["П000800002004"].Значение, ТДО["П000800002004"].Значение);
						ТДО["П000800003004"].Значение
						= ?(ТДО["П000800003004"].Значение > 0, -1 * ТДО["П000800003004"].Значение, ТДО["П000800003004"].Значение);
						ТДО["П000800004004"].Значение
						= ?(ТДО["П000800004004"].Значение > 0, -1 * ТДО["П000800004004"].Значение, ТДО["П000800004004"].Значение);
						
						Стр010Гр4 = ОкрЧФ(Форма, ТДО["П000800001004"].Значение);
						Стр020Гр4 = ОкрЧФ(Форма, ТДО["П000800002004"].Значение);
						Стр030Гр4 = ОкрЧФ(Форма, ТДО["П000800003004"].Значение);
						Стр040Гр4 = ОкрЧФ(Форма, ТДО["П000800004004"].Значение);
						Стр050Гр4 = Стр010Гр4 + Стр020Гр4 + Стр030Гр4 + Стр040Гр4;
						
						ТДО["П000800005004"].Значение = Стр050Гр4;
						
						ТДО["П000800001003"].Значение = ?(Стр010Гр4 < 0, "0", "");
						ТДО["П000800002003"].Значение = ?(Стр020Гр4 < 0, "0", "");
						ТДО["П000800003003"].Значение = ?(Стр030Гр4 < 0, "1", "");
						ТДО["П000800004003"].Значение = ?(Стр040Гр4 < 0, "1", "");
						ТДО["П000800005003"].Значение = ?(Стр050Гр4 < 0, "0", "");
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист09" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				РассчитыватьБ1   = ЗначениеЗаполнено(ТДО["П0009А0000100"].Значение);
				РассчитыватьБ2Б3 = ЗначениеЗаполнено(ТДО["П0009А0000200"].Значение);
				
				// Раздел Б1.
				//
				Если РассчитыватьБ1 Тогда
					
					// Стр.040 = стр.010 - стр.020 + стр.030.
					ТДО["П009Б10004003"].Значение = ОкрЧФ(Форма, ТДО["П009Б10001003"].Значение)
					- ОкрЧФ(Форма, ТДО["П009Б10002003"].Значение) + ОкрЧФ(Форма, ТДО["П009Б10003003"].Значение);
					
					// Стр.060 = стр.040 х стр.050.
					ТДО["П009Б10006003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б10004003"].Значение) * ТДО["П009Б10005003"].Значение);
					
					// Стр.080 = стр.040 - стр.070.
					ТДО["П009Б10008003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б10004003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10007003"].Значение);
					
					// Стр.090 = стр.080 х стр.050.
					ТДО["П009Б10009003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б10008003"].Значение) * ТДО["П009Б10005003"].Значение);
					
					// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
					//
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли
					= ЗначениеЗаполнено(ТДО["П009Б10000101"].Значение) И (ОкрЧФ(Форма, ТДО["П009Б10009003"].Значение) <= 10000000);
					
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б10000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							ТДО[ИмяПок].Значение = 0;
						КонецЦикла;
						
					Иначе
						
						// Стр.150 = (стр.080 - стр.100 - стр.110 - стр.120 - стр.130 - стр.140) х стр.050.
						ТДО["П009Б10015003"].Значение = ОкрЧФ(Форма,
						(ОкрЧФ(Форма, ТДО["П009Б10008003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10010003"].Значение)
						- ОкрЧФ(Форма, ТДО["П009Б10011003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10012003"].Значение)
						- ОкрЧФ(Форма, ТДО["П009Б10013003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10014003"].Значение))
						* ТДО["П009Б10005003"].Значение);
						
						// Стр.160 = стр.140 Приложения 1 к Листу 09, если стр.150 >= 0.
						// Стр.160 = 0, если стр.150 < 0.
						Если ОкрЧФ(Форма, ТДО["П009Б10015003"].Значение) < 0 Тогда
							ТДО["П009Б10016003"].Значение = 0;
						Иначе
							Сум = 0;
							РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
							Пока Обл <> Неопределено Цикл
								Сум = Сум + ОкрЧФ(Форма, Обл.Значение);
								РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
								Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
							КонецЦикла;
							ТДО["П009Б10016003"].Значение = Сум;
						КонецЕсли;
						
						// Стр.170 = стр.150 - стр.160.
						ТДО["П009Б10017003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б10015003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10016003"].Значение);
						
						// Стр.180 = стр.170 х п.10 Раздела А Листа 09 / 100, если стр.170 >= 0.
						// Стр.180 = 0, если стр.170 < 0.
						Если ОкрЧФ(Форма, ТДО["П009Б10017003"].Значение) < 0 Тогда
							ТДО["П009Б10018003"].Значение = 0;
						Иначе
							ТДО["П009Б10018003"].Значение
							= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б10017003"].Значение) * ТДО["П0009А0001001"].Значение / 100);
						КонецЕсли;
						
						// Стр.200 = стр.180 - стр.190.
						ТДО["П009Б10020003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б10018003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10019003"].Значение);
						
						// Стр.210 = стр.200 х Налоговая ставка ("стр.205") / 100.
						ТДО["П009Б10021003"].Значение
						= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б10020003"].Значение) * ТДО["П009Б10020500"].Значение / 100);
						
					КонецЕсли;
					
					// Стр.230 = стр.210 - стр.220.
					ТДО["П009Б10023003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б10021003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б10022003"].Значение);
					
				Иначе
					
					ТДО["П009Б10004003"].Значение = 0;
					ТДО["П009Б10006003"].Значение = 0;
					ТДО["П009Б10008003"].Значение = 0;
					ТДО["П009Б10009003"].Значение = 0;
					ТДО["П009Б10015003"].Значение = 0;
					ТДО["П009Б10016003"].Значение = 0;
					ТДО["П009Б10017003"].Значение = 0;
					ТДО["П009Б10018003"].Значение = 0;
					ТДО["П009Б10020003"].Значение = 0;
					ТДО["П009Б10021003"].Значение = 0;
					ТДО["П009Б10023003"].Значение = 0;
					
				КонецЕсли;
				
				Если РассчитыватьБ2Б3 Тогда
					
					// Раздел Б3 (строки 030-080).
					//
					// Стр.030 = стр.010 - стр.020.
					ТДО["П009Б30003003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б30001003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б30002003"].Значение);
					
					// Стр.050 = стр.030 х стр.040.
					ТДО["П009Б30005003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б30003003"].Значение) * ТДО["П009Б30004003"].Значение);
					
					// Стр.070 = стр.030 - стр.060.
					ТДО["П009Б30007003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б30003003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б30006003"].Значение);
					
					// Стр.080 = стр.070 х стр.040.
					ТДО["П009Б30008003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б30007003"].Значение) * ТДО["П009Б30004003"].Значение);
					
					// Раздел Б2 (строки 050-100).
					//
					// Стр.050 = стр.010 + стр.020 - стр.030 - стр.040.
					ТДО["П009Б20005003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б20001003"].Значение) + ОкрЧФ(Форма, ТДО["П009Б20002003"].Значение)
					- ОкрЧФ(Форма, ТДО["П009Б20003003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20004003"].Значение);
					
					// Стр.070 = стр.050 х стр.060.
					ТДО["П009Б20007003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б20005003"].Значение) * ТДО["П009Б20006003"].Значение);
					
					// Стр.090 = стр.050 - стр.080.
					ТДО["П009Б20009003"].Значение
					= ОкрЧФ(Форма, ТДО["П009Б20005003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20008003"].Значение);
					
					// Стр.100 = стр.090 х стр.060.
					ТДО["П009Б20010003"].Значение
					= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б20009003"].Значение) * ТДО["П009Б20006003"].Значение);
					
					// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
					//
					ВеличинаПрибыли = ОкрЧФ(Форма, ТДО["П009Б20010003"].Значение) + ОкрЧФ(Форма, ТДО["П009Б30008003"].Значение);
					
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б2
					= ЗначениеЗаполнено(ТДО["П009Б20000101"].Значение) И (ВеличинаПрибыли <= 10000000);
					
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б3
					= ЗначениеЗаполнено(ТДО["П009Б30000101"].Значение) И (ВеличинаПрибыли <= 10000000);
					
					// Раздел Б3 (строки 090-130).
					//
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б3 Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б30000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							ТДО[ИмяПок].Значение = 0;
						КонецЦикла;
						
					Иначе
						
						// Стр.090 = стр.140 Приложения 1 к Листу 09 с кодом "2".
						Сум = 0;
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							Если СокрЛП(ТДО["П009П1М100100_" + ИндексСтр].Значение) = "2" Тогда
								Сум = Сум + ОкрЧФ(Форма, Обл.Значение);
							КонецЕсли;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
						КонецЦикла;
						ТДО["П009Б30009003"].Значение = Сум;
						
						// Стр.100 = стр.080 - стр.090.
						ТДО["П009Б30010003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б30008003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б30009003"].Значение);
						
						// Стр.110 = стр.100 х п.10 Раздела А Листа 09 / 100, если стр.100 >= 0.
						// Стр.110 = 0, если стр.100 < 0.
						Если ОкрЧФ(Форма, ТДО["П009Б30010003"].Значение) < 0 Тогда
							ТДО["П009Б30011003"].Значение = 0;
						Иначе
							ТДО["П009Б30011003"].Значение = ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б30010003"].Значение)
							* ТДО["П0009А0001001"].Значение / 100);
						КонецЕсли;
						
						// Стр.130 = стр.110 - стр.120.
						ТДО["П009Б30013003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б30011003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б30012003"].Значение);
						
					КонецЕсли;
					
					// Раздел Б2 (строки 160-250).
					//
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б2 Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б20000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							ТДО[ИмяПок].Значение = 0;
						КонецЦикла;
						
					Иначе
						
						// Стр.160 = стр.090 - стр.110 - стр.120 - стр.130 - стр.140 - стр.150.
						ТДО["П009Б20016003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б20009003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20011003"].Значение)
						- ОкрЧФ(Форма, ТДО["П009Б20012003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20013003"].Значение)
						- ОкрЧФ(Форма, ТДО["П009Б20014003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20015003"].Значение);
						
						// Стр.170 = стр.160 х стр.060.
						ТДО["П009Б20017003"].Значение
						= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б20016003"].Значение) * ТДО["П009Б20006003"].Значение);
						
						// Стр.180 = стр.140 Приложения 1 к Листу 09 с кодом "1".
						Сум = 0;
						РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
						Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
						Пока Обл <> Неопределено Цикл
							Если СокрЛП(ТДО["П009П1М100100_" + ИндексСтр].Значение) = "1" Тогда
								Сум = Сум + ОкрЧФ(Форма, Обл.Значение);
							КонецЕсли;
							РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
							Обл = ТДО.Найти("П009П1М114003_" + ИндексСтр);
						КонецЦикла;
						ТДО["П009Б20018003"].Значение = Сум;
						
						// Стр.190 = стр.170 - стр.180.
						ТДО["П009Б20019003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б20017003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20018003"].Значение);
						
						// Стр.200 = стр.190 х п.10 Раздела А Листа 09 / 100, если стр.190 >= 0.
						// Стр.200 = 0, если стр.190 < 0.
						Если ОкрЧФ(Форма, ТДО["П009Б20019003"].Значение) < 0 Тогда
							ТДО["П009Б20020003"].Значение = 0;
						Иначе
							ТДО["П009Б20020003"].Значение
							= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б20019003"].Значение) * ТДО["П0009А0001001"].Значение / 100);
						КонецЕсли;
						
						// Стр.220 = стр.200 - стр.210 + стр.130 Раздела Б3.
						ТДО["П009Б20022003"].Значение = ОкрЧФ(Форма, ТДО["П009Б20020003"].Значение)
						- ОкрЧФ(Форма, ТДО["П009Б20021003"].Значение) + ОкрЧФ(Форма, ТДО["П009Б30013003"].Значение);
						
						// Стр.230 = стр.220 х Налоговая ставка ("стр.225") / 100.
						ТДО["П009Б20023003"].Значение
						= ОкрЧФ(Форма, ОкрЧФ(Форма, ТДО["П009Б20022003"].Значение) * ТДО["П009Б20022500"].Значение / 100);
						
						// Стр.250 = стр.230 - стр.240.
						ТДО["П009Б20025003"].Значение
						= ОкрЧФ(Форма, ТДО["П009Б20023003"].Значение) - ОкрЧФ(Форма, ТДО["П009Б20024003"].Значение);
						
					КонецЕсли;
					
				Иначе
					
					// Раздел Б3.
					//
					ТДО["П009Б30003003"].Значение = 0;
					ТДО["П009Б30005003"].Значение = 0;
					ТДО["П009Б30007003"].Значение = 0;
					ТДО["П009Б30008003"].Значение = 0;
					ТДО["П009Б30009003"].Значение = 0;
					ТДО["П009Б30010003"].Значение = 0;
					ТДО["П009Б30011003"].Значение = 0;
					ТДО["П009Б30013003"].Значение = 0;
					
					// Раздел Б2.
					//
					ТДО["П009Б20005003"].Значение = 0;
					ТДО["П009Б20007003"].Значение = 0;
					ТДО["П009Б20009003"].Значение = 0;
					ТДО["П009Б20010003"].Значение = 0;
					ТДО["П009Б20016003"].Значение = 0;
					ТДО["П009Б20017003"].Значение = 0;
					ТДО["П009Б20018003"].Значение = 0;
					ТДО["П009Б20019003"].Значение = 0;
					ТДО["П009Б20020003"].Значение = 0;
					ТДО["П009Б20022003"].Значение = 0;
					ТДО["П009Б20023003"].Значение = 0;
					ТДО["П009Б20025003"].Значение = 0;
					
				КонецЕсли;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П009П1М100100_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					
					РазделБ1Стр060 = 0;
					РазделБ1Стр150 = 0;
					РазделБ2Стр070 = 0;
					РазделБ2Стр170 = 0;
					РазделБ3Стр050 = 0;
					РазделБ3Стр080 = 0;
					
					Стр130 = 0;
					
					Если РассчитыватьБ1 Тогда
						
						РазделБ1Стр060 = ОкрЧФ(Форма, ТДО["П009Б10006003"].Значение);
						РазделБ1Стр150 = ОкрЧФ(Форма, ТДО["П009Б10015003"].Значение);
						Стр130 = Макс(РазделБ1Стр150, 0);
						
					ИначеЕсли РассчитыватьБ2Б3 Тогда
						
						Если СокрЛП(Обл.Значение) = "1" Тогда
							
							РазделБ2Стр070 = ОкрЧФ(Форма, ТДО["П009Б20007003"].Значение);
							РазделБ2Стр170 = ОкрЧФ(Форма, ТДО["П009Б20017003"].Значение);
							Стр130 = Макс(РазделБ2Стр170, 0);
							
						ИначеЕсли СокрЛП(Обл.Значение) = "2" Тогда
							
							РазделБ3Стр050 = ОкрЧФ(Форма, ТДО["П009Б30005003"].Значение);
							РазделБ3Стр080 = ОкрЧФ(Форма, ТДО["П009Б30008003"].Значение);
							Стр130 = Макс(РазделБ3Стр080, 0);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ТДО["П009П1М113003_" + ИндексСтр].Значение = Стр130;
					
					ВеличинаПрибылиУбытка = РазделБ1Стр060 + РазделБ2Стр070 + РазделБ3Стр050;
					
					Если ВеличинаПрибылиУбытка < 0 Тогда
						ТДО["П009П1М115003_" + ИндексСтр].Значение
						= ОкрЧФ(Форма, ТДО["П009П1М101003_" + ИндексСтр].Значение)
						- ВеличинаПрибылиУбытка;
					Иначе
						ТДО["П009П1М115003_" + ИндексСтр].Значение
						= ОкрЧФ(Форма, ТДО["П009П1М101003_" + ИндексСтр].Значение)
						- ОкрЧФ(Форма, ТДО["П009П1М114003_" + ИндексСтр].Значение);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П009П1М100100_" + ИндексСтр);
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) И ЗначениеЗаполнено(ТДО["ПризнакВключения"].Значение) Тогда
				
				Сумма = ОкрЧФ(Форма, ТДО["П000П20001003"].Значение)
				+ ОкрЧФ(Форма, ТДО["П000П20002003"].Значение) - ОкрЧФ(Форма, ТДО["П000П20003003"].Значение)
				- ОкрЧФ(Форма, ТДО["П000П20004003"].Значение) + ОкрЧФ(Форма, ТДО["П000П20005003"].Значение);
				
				// Стр.060.
				ТДО["П000П20006003"].Значение = Мин(0, Сумма);
				
				// Стр.100.
				ТДО["П000П20010003"].Значение = Макс(0, Сумма);
				
				// Стр.120.
				ТДО["П000П20012003"].Значение
				= ОкрЧФ(Форма, ТДО["П000П20010003"].Значение) - ОкрЧФ(Форма, ТДО["П000П20011003"].Значение);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Приложение2");
		Расчет(Форма, "Лист09");
		Расчет(Форма, "Лист08");
		Расчет(Форма, "Лист07");
		Расчет(Форма, "Лист06");
		Расчет(Форма, "Лист05");
		Расчет(Форма, "Лист04");
		Расчет(Форма, "Лист03Б");
		Расчет(Форма, "Лист03А");
		Расчет(Форма, "Лист02_7Г");
		Расчет(Форма, "Лист02_7В");
		Расчет(Форма, "Лист02_7Б");
		Расчет(Форма, "Лист02_7А");
		Расчет(Форма, "Лист02_6бБ");
		Расчет(Форма, "Лист02_6бА");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02_3");
		Расчет(Форма, "Лист02_2");
		Расчет(Форма, "Лист02_1");
		Расчет(Форма, "Лист02");
		
		Расчет(Форма, "Лист02_7Г");
		Расчет(Форма, "Лист02_7В");
		Расчет(Форма, "Лист02_7Б");
		Расчет(Форма, "Лист02_7А");
		Расчет(Форма, "Лист02_6бБ");
		Расчет(Форма, "Лист02_6бА");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02");
		
		Расчет(Форма, "Лист02_7Г");
		Расчет(Форма, "Лист02_7В");
		Расчет(Форма, "Лист02_7Б");
		Расчет(Форма, "Лист02_7А");
		Расчет(Форма, "Лист02_6бБ");
		Расчет(Форма, "Лист02_6бА");
		Расчет(Форма, "Лист02_6");
		Расчет(Форма, "Лист02_5");
		Расчет(Форма, "Лист02_4");
		Расчет(Форма, "Лист02");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ЕстьОбособленныеПодразделения = Форма.СтруктураРеквизитовФормы.ЕстьОбособленныеПодразделения;
	
	ПоМесту = СокрЛП(Форма.СтруктураДанныхТитульный.ПоМесту);
	
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	
	ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
	
	ОтчетныйГод = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОтчетныйМесяц = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОтчетЗаКвартал = (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
	
	ПериодичностьКвартал = Форма.СтруктураРеквизитовФормы.мПериодичность
	= Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
	
	ПериодичностьМесяц = Форма.СтруктураРеквизитовФормы.мПериодичность
	= Форма.СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц;
	
	ИмяКорневогоРаздела = ИмяКорневогоРаздела(Форма, ИмяРаздела);
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Лист02" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Листы02 = ДеревоДанных.Строки;
		
		Лист02_ПрНП_01 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "01"));
		Лист02_ПрНП_03 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "03"));
		Лист02_ПрНП_06 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "06"));
		Лист02_ПрНП_04 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "04"));
		Лист02_ПрНП_07 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "07"));
		Лист02_ПрНП_08 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "08"));
		Лист02_ПрНП_09 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "09"));
		Лист02_ПрНП_10 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "10"));
		Лист02_ПрНП_11 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "11"));
		Лист02_ПрНП_12 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "12"));
		Лист02_ПрНП_13 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "13"));
		Лист02_ПрНП_14 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "14"));
		Лист02_ПрНП_15 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "15"));
		Лист02_ПрНП_16 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "16"));
		Лист02_ПрНП_17 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "17"));
		Лист02_ПрНП_18 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "18"));
		Лист02_ПрНП_19 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Новый Структура("П000020000100", "19"));
		
		Для каждого Лист02 Из Листы02 Цикл
			
			Если ЗначениеЗаполнено(Лист02.Данные["ПризнакВключения"]) Тогда
				
				ПризнакНП = СокрЛП(Лист02.Данные["П000020000100"]);
				
				Лист02_7Г_Стр050 = 0;
				
				Лист05_Стр100 = 0;
				
				Лист06_Стр241 = 0;
				Лист06_Стр330 = 0;
				Лист06_Стр340 = 0;
				Лист06_Стр530 = 0;
				
				Лист08_Стр050 = 0;
				
				УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Ложь;
				
				Если Лист02_ПрНП_01 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_01;
				ИначеЕсли Лист02_ПрНП_03 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_03;
				ИначеЕсли Лист02_ПрНП_06 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_06;
				ИначеЕсли Лист02_ПрНП_04 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_04;
				ИначеЕсли Лист02_ПрНП_07 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_07;
				ИначеЕсли Лист02_ПрНП_08 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_08;
				ИначеЕсли Лист02_ПрНП_09 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_09;
				ИначеЕсли Лист02_ПрНП_10 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_10;
				ИначеЕсли Лист02_ПрНП_11 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_11;
				ИначеЕсли Лист02_ПрНП_12 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_12;
				ИначеЕсли Лист02_ПрНП_13 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_13;
				ИначеЕсли Лист02_ПрНП_14 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_14;
				ИначеЕсли Лист02_ПрНП_15 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_15;
				ИначеЕсли Лист02_ПрНП_16 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_16;
				ИначеЕсли Лист02_ПрНП_17 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_17;
				ИначеЕсли Лист02_ПрНП_18 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_18;
				ИначеЕсли Лист02_ПрНП_19 <> Неопределено Тогда
					УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации = Лист02 = Лист02_ПрНП_19;
				КонецЕсли;
				
				Если УчитыватьНаТекущемЛисте02ДанныеДругихЛистовВЦеломПоОрганизации Тогда
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_7Г_Поиск = Лист02_Поиск.Строки[11].Строки;
						Лист02_7Г_Стр050 = Лист02_7Г_Стр050 + СуммаПоказателяПоВеткам(Форма, Листы02_7Г_Поиск, "П0027Г0005003");
					КонецЦикла;
					
					ДеревоДанныхЛист05 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист05"]);
					
					Лист05_Стр100 = СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист05.Строки, "П000050010003");
					
					Лист06 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист06"]).Строки[0];
					
					Лист06_Стр241 = ОкрЧФ(Форма, Лист06.Данные["П000060024103"]);
					Лист06_Стр330 = ОкрЧФ(Форма, Лист06.Данные["П000060033003"]);
					Лист06_Стр340 = ОкрЧФ(Форма, Лист06.Данные["П000060034003"]);
					Лист06_Стр530 = ОкрЧФ(Форма, Лист06.Данные["П000060053003"]);
					
					ДеревоДанныхЛист08 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист08"]);
					
					Лист08_Стр050 = СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист08.Строки, "П000800005004");
					
				КонецЕсли;
				
				// Стр.010, стр.020, стр.030, стр.040, стр.050.
				//
				Если ОтчетЗаКвартал Тогда
					
					Стр010 = 0;
					Стр020 = 0;
					Стр030 = 0;
					Стр040 = 0;
					Стр050 = 0;
					
					Если СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14,15,16,17,18,19",
						",", Ложь).Найти(ПризнакНП) <> Неопределено Тогда
						
						Лист02_1 = Лист02.Строки[0].Строки[0];
						Лист02_2 = Лист02.Строки[1].Строки[0];
						Лист02_3 = Лист02.Строки[2].Строки[0];
						
						Стр010 = ОкрЧФ(Форма, Лист02_1.Данные["П000210004003"]) + Лист06_Стр241;
						Стр020 = ОкрЧФ(Форма, Лист02_1.Данные["П000210010003"]);
						Стр030 = ОкрЧФ(Форма, Лист02_2.Данные["П000220013003"]);
						Стр040 = ОкрЧФ(Форма, Лист02_2.Данные["П000220020003"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220030003"]);
						Стр050 = ОкрЧФ(Форма, Лист02_3.Данные["П000230036003"]);
						
					КонецЕсли;
					
					Лист02.Данные.Вставить("П000020001003", Стр010);
					Лист02.Данные.Вставить("П000020002003", Стр020);
					Лист02.Данные.Вставить("П000020003003", Стр030);
					Лист02.Данные.Вставить("П000020004003", Стр040);
					Лист02.Данные.Вставить("П000020005003", Стр050);
					
				Иначе
					// Ручное редактирование стр.010, стр.020, стр.030, стр.040, стр.050.
				КонецЕсли;
				
				// Стр.060.
				//
				Стр010 = ОкрЧФ(Форма, Лист02.Данные["П000020001003"]);
				Стр020 = ОкрЧФ(Форма, Лист02.Данные["П000020002003"]);
				Стр030 = ОкрЧФ(Форма, Лист02.Данные["П000020003003"]);
				Стр040 = ОкрЧФ(Форма, Лист02.Данные["П000020004003"]);
				Стр050 = ОкрЧФ(Форма, Лист02.Данные["П000020005003"]);
				
				Стр060 = Стр010 + Стр020 - Стр030 - Стр040 + Стр050 + Лист06_Стр330 - Лист06_Стр340;
				
				Лист02.Данные.Вставить("П000020006003", Стр060);
				
				// Стр.100.
				//
				Стр100 = 0;
				
				Если ЭтоКонсолидированнаяГруппа Тогда
					
					Лист02_6бА_Стр040 = 0;
					Лист02_6бА_Стр041 = 0;
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						
						Листы02_6бА_Поиск = Лист02_Поиск.Строки[6].Строки;
						
						Лист02_6бА_Стр040 = Лист02_6бА_Стр040 + СуммаПоказателяПоВеткам(Форма, Листы02_6бА_Поиск, "П0026б0004003");
						Лист02_6бА_Стр041 = Лист02_6бА_Стр041 + СуммаПоказателяПоВеткам(Форма, Листы02_6бА_Поиск, "П0026б0004103");
						
					КонецЦикла;
					
					Лист02_6бА_Сумма = ?(Лист02_6бА_Стр040 < 0, Лист02_6бА_Стр040 + Лист02_6бА_Стр041, Лист02_6бА_Стр040);
					
					ДеревоДанныхЛист05 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист05"]);
					
					Стр100 = Лист02_6бА_Сумма + СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист05.Строки, "П000050010003");
					
				Иначе
					
					Стр070 = ОкрЧФ(Форма, Лист02.Данные["П000020007003"]);
					Стр080 = ОкрЧФ(Форма, Лист02.Данные["П000020008003"]);
					
					Лист02_1_Стр200 = 0;
					Лист02_2_Стр400 = 0;
					
					Если СтрРазделить("01,02,03,04,06,07,08,09,10,11,12,13,14,15,16,17,18,19",
						",", Ложь).Найти(ПризнакНП) <> Неопределено Тогда
						
						Лист02_1 = Лист02.Строки[0].Строки[0];
						Лист02_2 = Лист02.Строки[1].Строки[0];
						
						Лист02_1_Стр200 = ОкрЧФ(Форма, Лист02_1.Данные["П000210020003"]);
						Лист02_2_Стр400 = ОкрЧФ(Форма, Лист02_2.Данные["П000220040003"]);
						
					КонецЕсли;
					
					Стр100 = Стр060 - Стр070 - Стр080 + Лист02_1_Стр200 - Лист02_2_Стр400
					+ Лист05_Стр100 + Лист06_Стр530 + Лист08_Стр050;
					
				КонецЕсли;
				
				Лист02.Данные.Вставить("П000020010003", Стр100);
				
				// Стр.110.
				//
				Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 12 Тогда
					
					Стр110 = 0;
					
					Если СтрРазделить("01,03,04,06,07,08,14,15,16,17,18,19", ",", Ложь).Найти(ПризнакНП) <> Неопределено Тогда
						
						Листы02_4 = Лист02.Строки[3].Строки;
						
						Усл = Новый Структура("П000240000100", ПризнакНП);
						Если ПризнакНП = "03" Тогда
							Усл.Вставить("П000240000200", СокрЛП(Лист02.Данные["П000020000200"]));
						ИначеЕсли ПризнакНП = "04" Тогда
							Усл.Вставить("П000240000301", СокрЛП(Лист02.Данные["П000020000301"]));
							Усл.Вставить("П000240000302", СокрЛП(Лист02.Данные["П000020000302"]));
							Усл.Вставить("П000240000303", СокрЛП(Лист02.Данные["П000020000303"]));
							Усл.Вставить("П000240000304", СокрЛП(Лист02.Данные["П000020000304"]));
						КонецЕсли;
						
						Стр110 = СуммаПоказателяПоВеткам(Форма, Листы02_4, "П000240015003", Усл);
						
					КонецЕсли;
					
					Лист02.Данные.Вставить("П000020011003", Стр110);
					
				Иначе
					// Ручное редактирование стр.110.
				КонецЕсли;
				
				// Стр.120.
				//
				Если ЗначениеЗаполнено(Лист02.Данные["П000020012000"]) Тогда
					// Ручное редактирование стр.120.
				Иначе
					Стр110 = ОкрЧФ(Форма, Лист02.Данные["П000020011003"]);
					Лист02.Данные.Вставить("П000020012003", Макс(0, Стр100 - Стр110));
				КонецЕсли;
				
				// Стр.140.
				//
				Если ПризнакНП = "02" Тогда
					
					Лист02.Данные.Вставить("П000020014003", 0);
					
				ИначеЕсли ЕстьОбособленныеПодразделения Тогда
					// Ручное редактирование стр.140.
				Иначе
					
					Лист02.Данные.Вставить("П000020014003",
					Лист02.Данные["П000020015003"] + Макс(Лист02.Данные["П000020016003"], Лист02.Данные["П000020017003"]));
					
				КонецЕсли;
				
				// Стр.190.
				//
				Стр120 = ОкрЧФ(Форма, Лист02.Данные["П000020012003"]);
				Стр150 = Лист02.Данные["П000020015003"];
				
				Стр190 = ОкрЧФ(Форма, Стр120 * Стр150 / 100);
				
				Лист02.Данные.Вставить("П000020019003", Стр190);
				
				// Стр.200.
				//
				Стр200 = 0;
				
				Если ПризнакНП = "04" Тогда
					
					Стр200 = 0;
					
				ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_6_Поиск = Лист02_Поиск.Строки[5].Строки;
						Стр200 = Стр200 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260007003");
					КонецЦикла;
					
				ИначеЕсли ЕстьОбособленныеПодразделения Тогда
					
					Усл = Новый Структура("П000250000100", ПризнакНП);
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_5_Поиск = Лист02_Поиск.Строки[4].Строки;
						Стр200 = Стр200 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250007003", Усл);
					КонецЦикла;
					
				Иначе
					
					Стр130 = ОкрЧФ(Форма, Лист02.Данные["П000020013003"]);
					Стр160 = Лист02.Данные["П000020016003"];
					Стр170 = Лист02.Данные["П000020017003"];
					
					Стр200 = ОкрЧФ(Форма, (Стр120 - Стр130) * Стр160 / 100) + ОкрЧФ(Форма, Стр130 * Стр170 / 100);
					
				КонецЕсли;
				
				Лист02.Данные.Вставить("П000020020003", Стр200);
				
				// Стр.180.
				//
				Стр180 = Стр190 + Стр200;
				
				Лист02.Данные.Вставить("П000020018003", Стр180);
				
				// Стр.210.
				//
				Стр220 = ОкрЧФ(Форма, Лист02.Данные["П000020022003"]);
				Стр230 = ОкрЧФ(Форма, Лист02.Данные["П000020023003"]);
				
				Стр210 = Стр220 + Стр230;
				
				Лист02.Данные.Вставить("П000020021003", Стр210);
				
				// Стр.260, стр.265, стр.266, стр.267.
				//
				Если ЭтоКонсолидированнаяГруппа Тогда
					
					Стр260 = 0;
					Стр265 = 0;
					Стр266 = 0;
					Стр267 = 0;
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_6_Поиск = Лист02_Поиск.Строки[5].Строки;
						Стр260 = Стр260 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260009003");
						Стр265 = Стр265 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260009503");
						Стр266 = Стр266 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260009603");
						Стр267 = Стр267 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260009703");
					КонецЦикла;
					Лист02.Данные.Вставить("П000020026003", Стр260);
					Лист02.Данные.Вставить("П000020026503", Стр265);
					Лист02.Данные.Вставить("П000020026603", Стр266);
					Лист02.Данные.Вставить("П000020026703", Стр267);
					
				ИначеЕсли ЕстьОбособленныеПодразделения Тогда
					
					Стр260 = 0;
					Стр265 = 0;
					Стр266 = 0;
					Стр267 = 0;
					
					Усл = Новый Структура("П000250000100", ПризнакНП);
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_5_Поиск = Лист02_Поиск.Строки[4].Строки;
						Стр260 = Стр260 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250009003", Усл);
						Стр265 = Стр265 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250009503", Усл);
						Стр266 = Стр266 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250009603", Усл);
						Стр267 = Стр267 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250009703", Усл);
					КонецЦикла;
					Лист02.Данные.Вставить("П000020026003", Стр260);
					Лист02.Данные.Вставить("П000020026503", Стр265);
					Лист02.Данные.Вставить("П000020026603", Стр266);
					Лист02.Данные.Вставить("П000020026703", Стр267);
					
				Иначе
					// Ручное редактирование стр.260, стр.265, стр.266, стр.267.
				КонецЕсли;
				
				// Стр.240.
				//
				Стр250 = ОкрЧФ(Форма, Лист02.Данные["П000020025003"]);
				Стр260 = ОкрЧФ(Форма, Лист02.Данные["П000020026003"]);
				
				Стр240 = Стр250 + Стр260;
				
				Лист02.Данные.Вставить("П000020024003", Стр240);
				
				// Стр.268.
				//
				Лист02.Данные.Вставить("П000020026803", Лист02_7Г_Стр050);
				
				// Стр.269.
				//
				Стр269 = 0;
				
				Если ЭтоКонсолидированнаяГруппа Тогда
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_6_Поиск = Лист02_Поиск.Строки[5].Строки;
						Стр269 = Стр269 + СуммаПоказателяПоВеткам(Форма, Листы02_6_Поиск, "П000260009803");
					КонецЦикла;
					
				ИначеЕсли ЕстьОбособленныеПодразделения Тогда
					
					Усл = Новый Структура("П000250000100", ПризнакНП);
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_5_Поиск = Лист02_Поиск.Строки[4].Строки;
						Стр269 = Стр269 + СуммаПоказателяПоВеткам(Форма, Листы02_5_Поиск, "П000250009803", Усл);
					КонецЦикла;
					
				Иначе
					
					Для каждого Лист02_Поиск Из Листы02 Цикл
						Листы02_7А_Поиск = Лист02_Поиск.Строки[8].Строки;
						Стр269 = Стр269 + СуммаПоказателяПоВеткам(Форма, Листы02_7А_Поиск, "П0027А0005003",
						Новый Структура("П0027А0000100", "5"));
					КонецЦикла;
					
				КонецЕсли;
				
				Лист02.Данные.Вставить("П000020026903", Стр269);
				
				// Стр.270, стр.271, стр.280, стр.281.
				//
				Стр267 = ОкрЧФ(Форма, Лист02.Данные["П000020026703"]);
				Стр268 = ОкрЧФ(Форма, Лист02.Данные["П000020026803"]);
				
				Лист02.Данные.Вставить("П000020027003", Макс(0, Стр190 - Стр220 - Стр250 - Стр268));
				
				Лист02.Данные.Вставить("П000020027103", Макс(0, Стр200 - Стр230 - Стр260 - Стр267 - Стр269));
				
				Лист02.Данные.Вставить("П000020028003", Макс(0, Стр220 + Стр250 + Стр268 - Стр190));
				
				Лист02.Данные.Вставить("П000020028103", Макс(0, Стр230 + Стр260 + Стр267 + Стр269 - Стр200));
				
				// Стр.359.
				//
				Если ОтчетныйМесяц = 12 Тогда
					
					Стр357 = ОкрЧФ(Форма, Лист02.Данные["П000020035703"]);
					Стр358 = ОкрЧФ(Форма, Лист02.Данные["П000020035803"]);
					
					Лист02.Данные.Вставить("П000020035903", Стр357 - Стр358);
					
				Иначе
					// Заполнение стр.359 не предусмотрено.
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Лист02_1 = Лист02.Строки[0].Строки[0];
			
			Если ЗначениеЗаполнено(Лист02_1.Данные["ПризнакВключения"]) Тогда
				
				Лист02_1.Данные.Вставить("П000210001003"
				, ОкрЧФ(Форма, Лист02_1.Данные["П000210001103"]) + ОкрЧФ(Форма, Лист02_1.Данные["П000210001203"])
				+ ОкрЧФ(Форма, Лист02_1.Данные["П000210001303"]) + ОкрЧФ(Форма, Лист02_1.Данные["П000210001403"]));
				
				Лист02_3 = Лист02.Строки[2].Строки[0];
				Лист02_1.Данные.Вставить("П000210003003", ОкрЧФ(Форма, Лист02_3.Данные["П000230034003"]));
				
				Лист02_1.Данные.Вставить("П000210004003", ОкрЧФ(Форма, Лист02_1.Данные["П000210001003"])
				+ ОкрЧФ(Форма, Лист02_1.Данные["П000210002003"]) + ОкрЧФ(Форма, Лист02_1.Данные["П000210002303"])
				+ ОкрЧФ(Форма, Лист02_1.Данные["П000210002703"]) + ОкрЧФ(Форма, Лист02_1.Данные["П000210003003"]));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Лист02_2 = Лист02.Строки[1].Строки[0];
			
			Если ЗначениеЗаполнено(Лист02_2.Данные["ПризнакВключения"]) Тогда
				
				Лист02_3 = Лист02.Строки[2].Строки[0];
				Лист02_2.Данные.Вставить("П000220008003", ОкрЧФ(Форма, Лист02_3.Данные["П000230035003"]));
				
				Лист02_2.Данные.Вставить("П000220013003", ОкрЧФ(Форма, Лист02_2.Данные["П000220001003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220002003"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220004003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220005903"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220006003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220006103"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220007003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220007203"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220008003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220009003"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220010003"])
				+ ОкрЧФ(Форма, Лист02_2.Данные["П000220011003"]) + ОкрЧФ(Форма, Лист02_2.Данные["П000220012003"]));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Лист02_3 = Лист02.Строки[2].Строки[0];
			
			Если ЗначениеЗаполнено(Лист02_3.Данные["ПризнакВключения"]) Тогда
				
				Стр030 = ОкрЧФ(Форма, Лист02_3.Данные["П000230003003"]);
				Стр040 = ОкрЧФ(Форма, Лист02_3.Данные["П000230004003"]);
				Стр060 = ОкрЧФ(Форма, Лист02_3.Данные["П000230006003"]);
				Стр100 = ОкрЧФ(Форма, Лист02_3.Данные["П000230010003"]);
				Стр120 = ОкрЧФ(Форма, Лист02_3.Данные["П000230012003"]);
				Стр140 = ОкрЧФ(Форма, Лист02_3.Данные["П000230014003"]);
				Стр180 = ОкрЧФ(Форма, Лист02_3.Данные["П000230018003"]);
				Стр190 = ОкрЧФ(Форма, Лист02_3.Данные["П000230019003"]);
				Стр201 = ОкрЧФ(Форма, Лист02_3.Данные["П000230020103"]);
				Стр210 = ОкрЧФ(Форма, Лист02_3.Данные["П000230021003"]);
				Стр211 = ОкрЧФ(Форма, Лист02_3.Данные["П000230021103"]);
				Стр220 = ОкрЧФ(Форма, Лист02_3.Данные["П000230022003"]);
				Стр221 = ОкрЧФ(Форма, Лист02_3.Данные["П000230022103"]);
				Стр240 = ОкрЧФ(Форма, Лист02_3.Данные["П000230024003"]);
				Стр250 = ОкрЧФ(Форма, Лист02_3.Данные["П000230025003"]);
				Стр260 = ОкрЧФ(Форма, Лист02_3.Данные["П000230026003"]);
				
				Стр150 = ?(Стр120 > Стр100, Макс(0, Стр120 - Стр100 - Стр140), 0);
				
				Лист02_3.Данные.Вставить("П000230015003", Стр150);
				
				Стр230 = Макс(0, Стр220 - Стр210);
				
				Лист02_3.Данные.Вставить("П000230023003", Стр230);
				
				Лист02_3.Данные.Вставить("П000230034003", Стр030 + Стр100 + Стр180 + Стр210 - Стр211 + Стр240);
				
				Лист02_3.Данные.Вставить("П000230035003", Стр040 + Стр120 + Стр190 + Стр220 - Стр221 + Стр250);
				
				Лист02_3.Данные.Вставить("П000230036003", Стр060 + Стр150 + Стр201 + Стр230 + Стр260);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_4" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Лист02_ПризнакНП = СокрЛП(Лист02.Данные["П000020000100"]);
			
			Листы02_4 = Лист02.Строки[3].Строки;
			
			Для каждого Лист02_4 Из Листы02_4 Цикл
				
				Если ЗначениеЗаполнено(Лист02_4.Данные["ПризнакВключения"]) Тогда
					
					ПризнакНП = СокрЛП(Лист02_4.Данные["П000240000100"]);
					
					Лист02_Стр100 = 0;
					
					// Стр.010.
					//
					ДеревоМнЧ = Лист02_4.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
					Стр010 = 0;
					Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
						Стр010 = Стр010 + ОкрЧФ(Форма, СтрокаМнЧ.Данные["П00024М100003"]);
					КонецЦикла;
					Лист02_4.Данные.Вставить("П000240001003", Стр010);
					
					// Стр.140.
					//
					Если ЗначениеЗаполнено(ПризнакНП) И ПризнакНП <> "05" Тогда
						Если ПризнакНП = Лист02_ПризнакНП Тогда
							Лист02_Стр100 = ОкрЧФ(Форма, Лист02.Данные["П000020010003"]);
							Лист02_4.Данные.Вставить("П000240014003", Макс(0, Лист02_Стр100));
						Иначе
							Лист02_4.Данные.Вставить("П000240014003", 0);
						КонецЕсли;
					Иначе
						// Ручное редактирование стр.140.
					КонецЕсли;
					
					// Стр.160, стр.161.
					//
					Если ОтчетныйМесяц = 12 Тогда
						
						ДеревоДанныхЛист05 = ПолучитьИзВременногоХранилища(
						Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист05"]);
						ДеревоДанныхЛист06 = ПолучитьИзВременногоХранилища(
						Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист06"]);
						
						Стр010 = ОкрЧФ(Форма, Лист02_4.Данные["П000240001003"]);
						Стр136 = ОкрЧФ(Форма, Лист02_4.Данные["П000240013603"]);
						Стр140 = ОкрЧФ(Форма, Лист02_4.Данные["П000240014003"]);
						Стр150 = ОкрЧФ(Форма, Лист02_4.Данные["П000240015003"]);
						Стр151 = ОкрЧФ(Форма, Лист02_4.Данные["П000240015103"]);
						
						// Стр.160.
						//
						Стр160 = 0;
						
						Если СтрРазделить("01,03,04,06,07,08,14,15,16,17,18,19", ",", Ложь).Найти(ПризнакНП) <> Неопределено Тогда
							
							Усл = Новый Структура("ПризнакВключения", "V");
							
							ЕстьЛист05ИлиЛист06 = Ложь;
							
							Если ВеткаУдовлетворяющаяУсловиямПоиска(ДеревоДанныхЛист05.Строки, Усл) <> Неопределено
								ИЛИ ВеткаУдовлетворяющаяУсловиямПоиска(ДеревоДанныхЛист06.Строки, Усл) <> Неопределено Тогда
								
								ЕстьЛист05ИлиЛист06 = Истина;
								
							КонецЕсли;
							
							Если Стр140 < 0 ИЛИ (Стр140 = 0 И Лист02_Стр100 < 0) Тогда
								
								Если ЕстьЛист05ИлиЛист06 Тогда
									
									Усл = Новый Структура("П000020000100", ПризнакНП);
									Если ПризнакНП = "03" Тогда
										Усл.Вставить("П000020000200", СокрЛП(Лист02_4.Данные["П000240000200"]));
									ИначеЕсли ПризнакНП = "04" Тогда
										Усл.Вставить("П000020000301", СокрЛП(Лист02_4.Данные["П000240000301"]));
										Усл.Вставить("П000020000302", СокрЛП(Лист02_4.Данные["П000240000302"]));
										Усл.Вставить("П000020000303", СокрЛП(Лист02_4.Данные["П000240000303"]));
										Усл.Вставить("П000020000304", СокрЛП(Лист02_4.Данные["П000240000304"]));
									КонецЕсли;
									
									Лист02_Стр060 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020006003", Усл);
									Лист02_Стр070 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020007003", Усл);
									
									Лист02_4_ПрНП_01 = Неопределено;
									Лист02_4_ПрНП_03 = Неопределено;
									Лист02_4_ПрНП_06 = Неопределено;
									Лист02_4_ПрНП_04 = Неопределено;
									Лист02_4_ПрНП_07 = Неопределено;
									Лист02_4_ПрНП_08 = Неопределено;
									Лист02_4_ПрНП_14 = Неопределено;
									Лист02_4_ПрНП_15 = Неопределено;
									Лист02_4_ПрНП_16 = Неопределено;
									Лист02_4_ПрНП_17 = Неопределено;
									Лист02_4_ПрНП_18 = Неопределено;
									Лист02_4_ПрНП_19 = Неопределено;
									
									Для каждого Лист02_Поиск Из ДеревоДанных.Строки Цикл
										
										Листы02_4_Поиск = Лист02_Поиск.Строки[3].Строки;
										
										Если Лист02_4_ПрНП_01 = Неопределено Тогда
											Лист02_4_ПрНП_01 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "01"));
										КонецЕсли;
										Если Лист02_4_ПрНП_03 = Неопределено Тогда
											Усл = Новый Структура;
											Усл.Вставить("П000240000100", "03");
											Усл.Вставить("П000240000200", СокрЛП(Лист02_4.Данные["П000240000200"]));
											Лист02_4_ПрНП_03 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_4_Поиск, Усл);
										КонецЕсли;
										Если Лист02_4_ПрНП_06 = Неопределено Тогда
											Лист02_4_ПрНП_06 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "06"));
										КонецЕсли;
										Если Лист02_4_ПрНП_04 = Неопределено Тогда
											Усл = Новый Структура;
											Усл.Вставить("П000240000100", "04");
											Усл.Вставить("П000240000301", СокрЛП(Лист02_4.Данные["П000240000301"]));
											Усл.Вставить("П000240000302", СокрЛП(Лист02_4.Данные["П000240000302"]));
											Усл.Вставить("П000240000303", СокрЛП(Лист02_4.Данные["П000240000303"]));
											Усл.Вставить("П000240000304", СокрЛП(Лист02_4.Данные["П000240000304"]));
											Лист02_4_ПрНП_04 = ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_4_Поиск, Усл);
										КонецЕсли;
										Если Лист02_4_ПрНП_07 = Неопределено Тогда
											Лист02_4_ПрНП_07 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "07"));
										КонецЕсли;
										Если Лист02_4_ПрНП_08 = Неопределено Тогда
											Лист02_4_ПрНП_08 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "08"));
										КонецЕсли;
										Если Лист02_4_ПрНП_14 = Неопределено Тогда
											Лист02_4_ПрНП_14 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "14"));
										КонецЕсли;
										Если Лист02_4_ПрНП_15 = Неопределено Тогда
											Лист02_4_ПрНП_15 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "15"));
										КонецЕсли;
										Если Лист02_4_ПрНП_16 = Неопределено Тогда
											Лист02_4_ПрНП_16 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "16"));
										КонецЕсли;
										Если Лист02_4_ПрНП_17 = Неопределено Тогда
											Лист02_4_ПрНП_17 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "17"));
										КонецЕсли;
										Если Лист02_4_ПрНП_18 = Неопределено Тогда
											Лист02_4_ПрНП_18 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "18"));
										КонецЕсли;
										Если Лист02_4_ПрНП_19 = Неопределено Тогда
											Лист02_4_ПрНП_19 = ВеткаУдовлетворяющаяУсловиямПоиска(
											Листы02_4_Поиск, Новый Структура("П000240000100", "19"));
										КонецЕсли;
										
									КонецЦикла;
									
									Учитывать_Лист05_Стр100_Лист06_Стр530 = Ложь;
									
									Если Лист02_4_ПрНП_01 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_01;
									ИначеЕсли Лист02_4_ПрНП_03 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_03;
									ИначеЕсли Лист02_4_ПрНП_06 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_06;
									ИначеЕсли Лист02_4_ПрНП_04 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_04;
									ИначеЕсли Лист02_4_ПрНП_07 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_07;
									ИначеЕсли Лист02_4_ПрНП_08 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_08;
									ИначеЕсли Лист02_4_ПрНП_14 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_14;
									ИначеЕсли Лист02_4_ПрНП_15 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_15;
									ИначеЕсли Лист02_4_ПрНП_16 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_16;
									ИначеЕсли Лист02_4_ПрНП_17 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_17;
									ИначеЕсли Лист02_4_ПрНП_18 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_18;
									ИначеЕсли Лист02_4_ПрНП_19 <> Неопределено Тогда
										Учитывать_Лист05_Стр100_Лист06_Стр530 = Лист02_4 = Лист02_4_ПрНП_19;
									КонецЕсли;
									
									Лист05_Стр100 = 0;
									Лист06_Стр530 = 0;
									
									Если Учитывать_Лист05_Стр100_Лист06_Стр530 Тогда
										Лист05_Стр100 = СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист05.Строки, "П000050010003");
										Лист06_Стр530 = СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист06.Строки, "П000060053003");
									КонецЕсли;
									
									Стр160 = Макс(0, Стр010 + Стр136 - ((Лист02_Стр060 - Лист02_Стр070)
									+ Макс(0, Лист05_Стр100) + Макс(0, Лист06_Стр530)));
									
								Иначе
									
									Усл = Новый Структура("П000020000100", ПризнакНП);
									Если ПризнакНП = "03" Тогда
										Усл.Вставить("П000020000200", СокрЛП(Лист02_4.Данные["П000240000200"]));
									ИначеЕсли ПризнакНП = "04" Тогда
										Усл.Вставить("П000020000301", СокрЛП(Лист02_4.Данные["П000240000301"]));
										Усл.Вставить("П000020000302", СокрЛП(Лист02_4.Данные["П000240000302"]));
										Усл.Вставить("П000020000303", СокрЛП(Лист02_4.Данные["П000240000303"]));
										Усл.Вставить("П000020000304", СокрЛП(Лист02_4.Данные["П000240000304"]));
									КонецЕсли;
									
									Лист02_Стр060 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020006003", Усл);
									Лист02_Стр070 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020007003", Усл);
									
									Стр160 = Макс(0, Стр010 + Стр136 - (Лист02_Стр060 - Лист02_Стр070));
									
								КонецЕсли;
								
							ИначеЕсли Стр140 > 0 Тогда
								
								Стр160 = Макс(0, Стр010 + Стр136 - Стр150);
								
							Иначе
								
								Стр160 = Макс(0, Стр010 + Стр136);
								
							КонецЕсли;
							
						ИначеЕсли ПризнакНП = "05" Тогда
							
							Если Стр140 < 0 ИЛИ (Стр140 = 0 И Лист02_Стр100 < 0) Тогда
								
								Стр160 = Макс(0, Стр010 + Стр136 + СуммаПоказателяПоВеткам(Форма, ДеревоДанныхЛист05.Строки, "П000050004003"));
								
							Иначе
								
								Стр160 = Макс(0, Стр010 + Стр136 - Стр150);
								
							КонецЕсли;
							
						КонецЕсли;
						
						Лист02_4.Данные.Вставить("П000240016003", Стр160);
						
						// Стр.161.
						//
						Лист02_4.Данные.Вставить("П000240016103", Стр136 - Стр151);
						
					Иначе
						// Ручное редактирование стр.160, стр.161.
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_5" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Листы02_5 = Лист02.Строки[4].Строки;
			
			Для каждого Лист02_5 Из Листы02_5 Цикл
				
				Если ЗначениеЗаполнено(Лист02_5.Данные["ПризнакВключения"]) Тогда
					
					ПризнакНП = СокрЛП(Лист02_5.Данные["П000250000100"]);
					
					РС = СокрЛП(Лист02_5.Данные["П000250000300"]);
					
					КПП = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Усл = Новый Структура("П000020000100", ПризнакНП);
					
					Если НЕ ЭтоОбособленноеПодразделение Тогда
						
						НалоговаяБазаПоОрганизации = Макс(0, СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020012003", Усл));
						
						НалоговаяБазаЗакрытыхОП = НалоговаяБазаЗакрытыхОбособленныхПодразделений(Форма, "Лист02_5", ДеревоДанных.Строки, ПризнакНП);
						
						Лист02_5.Данные.Вставить("П000250003003", НалоговаяБазаПоОрганизации);
						Лист02_5.Данные.Вставить("П000250003103", НалоговаяБазаПоОрганизации - НалоговаяБазаЗакрытыхОП);
						
					Иначе
						// Ручное редактирование стр.030, стр.031.
					КонецЕсли;
					
					Стр030 = ОкрЧФ(Форма, Лист02_5.Данные["П000250003003"]);
					Стр031 = ОкрЧФ(Форма, Лист02_5.Данные["П000250003103"]);
					Стр040 = Лист02_5.Данные["П000250004003"];
					Стр060 = Лист02_5.Данные["П000250006003"];
					
					Если РС <> "3" Тогда
						Если ЗначениеЗаполнено(Стр031) Тогда
							Стр050 = ОкрЧФ(Форма, Стр031 * Стр040 / 100);
						Иначе
							Стр050 = ОкрЧФ(Форма, Стр030 * Стр040 / 100);
						КонецЕсли;
						Лист02_5.Данные.Вставить("П000250005003", Стр050);
					Иначе
						// Ручное редактирование стр.050.
					КонецЕсли;
					
					Стр050 = ОкрЧФ(Форма, Лист02_5.Данные["П000250005003"]);
					
					Если НЕ ЭтоОбособленноеПодразделение Тогда
						
						НалоговаяБазаВБюджетСубъектаРФПоОрганизации
						= Макс(0, СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020013003", Усл));
						
						Стр051 = Мин(Стр050, ОкрЧФ(Форма, НалоговаяБазаВБюджетСубъектаРФПоОрганизации * Стр040 / 100));
						
						Лист02_5.Данные.Вставить("П000250005103", Стр051);
						
					Иначе
						// Ручное редактирование стр.051.
					КонецЕсли;
					
					Стр051 = ОкрЧФ(Форма, Лист02_5.Данные["П000250005103"]);
					
					Если НЕ ЗначениеЗаполнено(Стр051) Тогда
						
						Лист02_5.Данные.Вставить("П000250007003", ОкрЧФ(Форма, Стр050 * Стр060 / 100));
						
					ИначеЕсли Стр060 < Форма.СтруктураРеквизитовФормы.ОбщеустановленнаяНалоговаяСтавка Тогда
						
						Лист02_5.Данные.Вставить("П000250007003", ОкрЧФ(Форма, (Стр050 - Стр051) * 17 / 100 + Стр051 * Стр060 / 100));
						
					Иначе
						// Ручное редактирование стр.070.
					КонецЕсли;
					
					Стр070 = ОкрЧФ(Форма, Лист02_5.Данные["П000250007003"]);
					
					Стр080 = ОкрЧФ(Форма, Лист02_5.Данные["П000250008003"]);
					Стр090 = ОкрЧФ(Форма, Лист02_5.Данные["П000250009003"]);
					Стр097 = ОкрЧФ(Форма, Лист02_5.Данные["П000250009703"]);
					
					Лист02_7А_Стр050 = 0;
					Для каждого Лист02_Поиск Из ДеревоДанных.Строки Цикл
						Листы02_7А = Лист02_Поиск.Строки[8].Строки;
						Лист02_7А_Стр050 = Лист02_7А_Стр050 + СуммаПоказателяПоВеткам(Форма, Листы02_7А, "П0027А0005003",
						Новый Структура("П0027А0000100,П0027А0000200", РС, КПП));
					КонецЦикла;
					Лист02_5.Данные.Вставить("П000250009803", Лист02_7А_Стр050);
					
					Стр098 = ОкрЧФ(Форма, Лист02_5.Данные["П000250009803"]);
					
					СуммаНалога = Стр070 - Стр080 - Стр090 - Стр097 - Стр098;
					
					Лист02_5.Данные.Вставить("П000250010003",  Макс(0, СуммаНалога));
					Лист02_5.Данные.Вставить("П000250011003", - Мин(0, СуммаНалога));
					
					Если РС = "3" ИЛИ НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
						// Заполнение стр.120 не предусмотрено.
						Лист02_5.Данные.Вставить("П000250012003", 0);
					Иначе
						Если НЕ ЭтоОбособленноеПодразделение Тогда
							
							Лист02_Стр310 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020031003", Усл);
							
							Лист02_5.Данные.Вставить("П000250012003", ОкрЧФ(Форма, Лист02_Стр310 * Стр040 / 100));
							
						Иначе
							// Ручное редактирование стр.120.
						КонецЕсли;
					КонецЕсли;
					
					Если РС = "3"
						ИЛИ НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
						// Заполнение стр.121 не предусмотрено.
						Лист02_5.Данные.Вставить("П000250012103", 0);
					Иначе
						Если НЕ ЭтоОбособленноеПодразделение Тогда
							
							Лист02_Стр340 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020034003", Усл);
							
							Лист02_5.Данные.Вставить("П000250012103", ОкрЧФ(Форма, Лист02_Стр340 * Стр040 / 100));
							
						Иначе
							// Ручное редактирование стр.121.
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_6" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
			
			НалоговаяБазаПоОрганизации = Макс(0, СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020012003"));
			
			Лист02_Стр310 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020031003");
			Лист02_Стр340 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020034003");
			
			НалоговаяБазаЗакрытыхОП = НалоговаяБазаЗакрытыхОбособленныхПодразделений(Форма, "Лист02_6а", ДеревоДанных.Строки);
			
			СтавкаНалога = ?(ОтчетныйГод >= 2017 И ОтчетныйГод <= 2024, 17, 18);
			
			Для каждого Лист02 Из ДеревоДанных.Строки Цикл
				
				Листы02_6 = Лист02.Строки[5].Строки;
				
				Для каждого Лист02_6 Из Листы02_6 Цикл
					
					Лист02_6_КодСубъектаРФ = СокрЛП(Лист02_6.Данные["П000260000600"]);
					
					Листы02_6а = Лист02_6.Строки[0].Строки;
					
					Лист02_6_Стр040 = 0;
					Лист02_6_Стр050 = 0;
					Лист02_6_Стр051 = 0;
					Лист02_6_Стр070 = 0;
					Лист02_6_Стр095 = 0;
					Лист02_6_Стр097 = 0;
					Лист02_6_Стр098 = 0;
					
					КолЛистов02_6а = 0;
					
					Для каждого Лист02_6а Из Листы02_6а Цикл
						
						Если ЗначениеЗаполнено(Лист02_6а.Данные["ПризнакВключения"]) Тогда
							
							РС = СокрЛП(Лист02_6а.Данные["П0026а0000500"]);
							
							Лист02_6а.Данные.Вставить("П0026а0003003", НалоговаяБазаПоОрганизации);
							Лист02_6а.Данные.Вставить("П0026а0003103", НалоговаяБазаПоОрганизации - НалоговаяБазаЗакрытыхОП);
							
							Стр031 = ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0003103"]);
							Стр040 = Лист02_6а.Данные["П0026а0004003"];
							
							Если РС <> "3" Тогда
								Стр050 = ОкрЧФ(Форма, Стр031 * Стр040 / 100);
								Лист02_6а.Данные.Вставить("П0026а0005003", Стр050);
							Иначе
								// Ручное редактирование стр.050.
							КонецЕсли;
							
							Стр050 = ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0005003"]);
							
							Стр051 = ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0005103"]);
							Стр060 = Лист02_6а.Данные["П0026а0006003"];
							
							Стр070 = Макс(0, ОкрЧФ(Форма, (Стр050 - Стр051) * СтавкаНалога / 100 + Стр051 * Стр060 / 100));
							Лист02_6а.Данные.Вставить("П0026а0007003", Стр070);
							
							Если ЗначениеЗаполнено(Лист02_6_КодСубъектаРФ)
								И Лист02_6_КодСубъектаРФ = КодСубъектаРФ(Лист02_6а.Данные["П0026а0000300"]) Тогда
								
								Лист02_6_Стр040 = Лист02_6_Стр040 + Стр040;
								Лист02_6_Стр050 = Лист02_6_Стр050 + Стр050;
								Лист02_6_Стр051 = Лист02_6_Стр051 + Стр051;
								Лист02_6_Стр070 = Лист02_6_Стр070 + Стр070;
								Лист02_6_Стр095 = Лист02_6_Стр095 + ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0009503"]);
								Лист02_6_Стр097 = Лист02_6_Стр097 + ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0009703"]);
								Лист02_6_Стр098 = Лист02_6_Стр098 + ОкрЧФ(Форма, Лист02_6а.Данные["П0026а0009803"]);
								
								КолЛистов02_6а = КолЛистов02_6а + 1;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Лист02_6.Данные["ПризнакВключения"]) Тогда
						
						Лист02_6.Данные.Вставить("П000260003003", НалоговаяБазаПоОрганизации);
						Лист02_6.Данные.Вставить("П000260003103", НалоговаяБазаПоОрганизации - НалоговаяБазаЗакрытыхОП);
						
						Если ЗначениеЗаполнено(Лист02_6_КодСубъектаРФ) Тогда
							
							Лист02_6.Данные.Вставить("П000260004003", Лист02_6_Стр040);
							Лист02_6.Данные.Вставить("П000260005003", Лист02_6_Стр050);
							Лист02_6.Данные.Вставить("П000260005103", Лист02_6_Стр051);
							Лист02_6.Данные.Вставить("П000260007003", Лист02_6_Стр070);
							Лист02_6.Данные.Вставить("П000260009503", Лист02_6_Стр095);
							Лист02_6.Данные.Вставить("П000260009703", Лист02_6_Стр097);
							Лист02_6.Данные.Вставить("П000260009803", Лист02_6_Стр098);
							
							Лист02_6.Данные.Вставить("П000260000500", КолЛистов02_6а);
							
						КонецЕсли;
						
						Лист02_6_Стр070 = ОкрЧФ(Форма, Лист02_6.Данные["П000260007003"]);
						Лист02_6_Стр080 = ОкрЧФ(Форма, Лист02_6.Данные["П000260008003"]);
						Лист02_6_Стр090 = ОкрЧФ(Форма, Лист02_6.Данные["П000260009003"]);
						Лист02_6_Стр097 = ОкрЧФ(Форма, Лист02_6.Данные["П000260009703"]);
						Лист02_6_Стр098 = ОкрЧФ(Форма, Лист02_6.Данные["П000260009803"]);
						
						СуммаНалога = Лист02_6_Стр070 - Лист02_6_Стр080 - Лист02_6_Стр090 - Лист02_6_Стр097 - Лист02_6_Стр098;
						
						Лист02_6.Данные.Вставить("П000260010003",  Макс(0, СуммаНалога));
						Лист02_6.Данные.Вставить("П000260011003", - Мин(0, СуммаНалога));
						
						Если ПериодичностьКвартал И ОтчетныйМесяц <> 12 Тогда
							Лист02_6.Данные.Вставить("П000260012003", ОкрЧФ(Форма, Лист02_Стр310 * Лист02_6.Данные["П000260004003"] / 100));
						Иначе
							// Заполнение стр.120 не предусмотрено.
							Лист02_6.Данные.Вставить("П000260012003", 0);
						КонецЕсли;
						
						Если (ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11) Тогда
							Лист02_6.Данные.Вставить("П000260012103", ОкрЧФ(Форма, Лист02_Стр340 * Лист02_6.Данные["П000260004003"] / 100));
						Иначе
							// Заполнение стр.121 не предусмотрено.
							Лист02_6.Данные.Вставить("П000260012103", 0);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6бА" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
			
			Для каждого Лист02 Из ДеревоДанных.Строки Цикл
				
				Лист02_6бА = Лист02.Строки[6].Строки[0];
				
				Данные = Лист02_6бА.Данные;
				
				Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					
					// Стр.030 = стр.020 (стр.030 <= 50% от стр.010).
					Данные.Вставить("П0026б0003003", Мин(
					ОкрЧФ(Форма, Данные["П0026б0002003"]), ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П0026б0001003"]) / 2)));
					
					// Стр.031 = стр.020 - стр.030.
					Данные.Вставить("П0026б0003103", ОкрЧФ(Форма, Данные["П0026б0002003"]) - ОкрЧФ(Форма, Данные["П0026б0003003"]));
					
					// Стр.040 = 0 = - стр.020, если стр.010 = 0.
					// Иначе стр.040 = стр.010 - стр.030.
					Если ОкрЧФ(Форма, Данные["П0026б0001003"]) = 0 Тогда
						Данные.Вставить("П0026б0004003", - ОкрЧФ(Форма, Данные["П0026б0002003"]));
					Иначе
						Данные.Вставить("П0026б0004003", ОкрЧФ(Форма, Данные["П0026б0001003"]) - ОкрЧФ(Форма, Данные["П0026б0003003"]));
					КонецЕсли;
					
					// Стр.130 = стр.120 (стр.130 <= 50% от стр.110).
					Данные.Вставить("П0026б0013003", Мин(
					ОкрЧФ(Форма, Данные["П0026б0012003"]), ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П0026б0011003"]) / 2)));
					
					// Стр.131 = стр.120 - стр.130.
					Данные.Вставить("П0026б0013103", ОкрЧФ(Форма, Данные["П0026б0012003"]) - ОкрЧФ(Форма, Данные["П0026б0013003"]));
					
					// Стр.140 = 0 = - стр.120, если стр.110 = 0.
					// Иначе стр.140 = стр.110 - стр.130.
					Если ОкрЧФ(Форма, Данные["П0026б0011003"]) = 0 Тогда
						Данные.Вставить("П0026б0014003", - ОкрЧФ(Форма, Данные["П0026б0012003"]));
					Иначе
						Данные.Вставить("П0026б0014003", ОкрЧФ(Форма, Данные["П0026б0011003"]) - ОкрЧФ(Форма, Данные["П0026б0013003"]));
					КонецЕсли;
					
					// Стр.141 = стр.140 - стр.041 (стр.041 вычитается, если стр.140 > 0).
					Если ОкрЧФ(Форма, Данные["П0026б0014003"]) > 0 Тогда
						Данные.Вставить("П0026б0014103", ОкрЧФ(Форма, Данные["П0026б0014003"]) - ОкрЧФ(Форма, Данные["П0026б0004103"]));
					Иначе
						Данные.Вставить("П0026б0014103", ОкрЧФ(Форма, Данные["П0026б0014003"]));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_6бБ" Тогда
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
			
			Для каждого Лист02 Из ДеревоДанных.Строки Цикл
				
				Листы02_6бБ = Лист02.Строки[7].Строки;
				
				Лист02_6бБ_Стр270 = 0;
				Лист02_6бБ_Стр275 = 0;
				Лист02_6бБ_Стр280 = 0;
				Лист02_6бБ_Стр285 = 0;
				Лист02_6бБ_Стр290 = 0;
				Лист02_6бБ_Стр320 = 0;
				Лист02_6бБ_Стр330 = 0;
				Лист02_6бБ_Стр340 = 0;
				Лист02_6бБ_Стр350 = 0;
				Лист02_6бБ_Стр360 = 0;
				
				Для каждого Лист02_6бБ Из Листы02_6бБ Цикл
					
					Данные = Лист02_6бБ.Данные;
					
					Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
						
						НалоговаяБазаИлиУбыток = ОкрЧФ(Форма, Данные["П0026б0021003"])
						+ ОкрЧФ(Форма, Данные["П0026б0022003"]) - ОкрЧФ(Форма, Данные["П0026б0023003"])
						- ОкрЧФ(Форма, Данные["П0026б0024003"]) + ОкрЧФ(Форма, Данные["П0026б0025003"])
						- ОкрЧФ(Форма, Данные["П0026б0025503"]) - ОкрЧФ(Форма, Данные["П0026б0025603"])
						+ ОкрЧФ(Форма, Данные["П0026б0025703"]) + ОкрЧФ(Форма, Данные["П0026б0025803"]);
						
						// Стр.260 = стр.210 + стр.220 - стр.230 - стр.240 + стр.250 - стр.255 - стр.256 + стр.257 + стр.258,
						// если стр.210 + стр.220 - стр.230 - стр.240 + стр.250 - стр.255 - стр.256 + стр.257 + стр.258 >= 0.
						Данные.Вставить("П0026б0026003",  Макс(НалоговаяБазаИлиУбыток, 0));
						
						// Стр.270 = - (стр.210 + стр.220 - стр.230 - стр.240 + стр.250 - стр.255 - стр.256 + стр.257 + стр.258),
						// если стр.210 + стр.220 - стр.230 - стр.240 + стр.250 - стр.255 - стр.256 + стр.257 + стр.258 < 0.
						Данные.Вставить("П0026б0027003", - Мин(НалоговаяБазаИлиУбыток, 0));
						
						// Стр.280 = 0 (отображается "0"), если стр.270 > 0.
						Если ОкрЧФ(Форма, Данные["П0026б0027003"]) > 0 Тогда
							Данные.Вставить("П0026б0028003", 0);
						Иначе
							// Ручное редактирование стр.280.
						КонецЕсли;
						
						// Стр.285 = стр.260 - стр.280.
						Данные.Вставить("П0026б0028503", ОкрЧФ(Форма, Данные["П0026б0026003"]) - ОкрЧФ(Форма, Данные["П0026б0028003"]));
						
						// Стр.340 = 0 (отображается "0"), если стр.320 > 0.
						Если ОкрЧФ(Форма, Данные["П0026б0032003"]) > 0 Тогда
							Данные.Вставить("П0026б0034003", 0);
						Иначе
							// Ручное редактирование стр.340.
						КонецЕсли;
						
						// Стр.350 = стр.310 - стр.340.
						Данные.Вставить("П0026б0035003", ОкрЧФ(Форма, Данные["П0026б0031003"]) - ОкрЧФ(Форма, Данные["П0026б0034003"]));
						
						Лист02_6бБ_Стр270 = Лист02_6бБ_Стр270 + ОкрЧФ(Форма, Данные["П0026б0027003"]);
						Лист02_6бБ_Стр275 = Лист02_6бБ_Стр275 + ОкрЧФ(Форма, Данные["П0026б0027503"]);
						Лист02_6бБ_Стр280 = Лист02_6бБ_Стр280 + ОкрЧФ(Форма, Данные["П0026б0028003"]);
						Лист02_6бБ_Стр285 = Лист02_6бБ_Стр285 + ОкрЧФ(Форма, Данные["П0026б0028503"]);
						Лист02_6бБ_Стр290 = Лист02_6бБ_Стр290 + ОкрЧФ(Форма, Данные["П0026б0029003"]);
						Лист02_6бБ_Стр320 = Лист02_6бБ_Стр320 + ОкрЧФ(Форма, Данные["П0026б0032003"]);
						Лист02_6бБ_Стр330 = Лист02_6бБ_Стр330 + ОкрЧФ(Форма, Данные["П0026б0033003"]);
						Лист02_6бБ_Стр340 = Лист02_6бБ_Стр340 + ОкрЧФ(Форма, Данные["П0026б0034003"]);
						Лист02_6бБ_Стр350 = Лист02_6бБ_Стр350 + ОкрЧФ(Форма, Данные["П0026б0035003"]);
						Лист02_6бБ_Стр360 = Лист02_6бБ_Стр360 + ОкрЧФ(Форма, Данные["П0026б0036003"]);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Лист02_6бА = Лист02.Строки[6].Строки[0];
				
				Если ЗначениеЗаполнено(Лист02_6бА.Данные["ПризнакВключения"]) Тогда
					
					Лист02_6бА.Данные.Вставить("П0026б0001003", Лист02_6бБ_Стр285);
					Лист02_6бА.Данные.Вставить("П0026б0002003", Лист02_6бБ_Стр270);
					Лист02_6бА.Данные.Вставить("П0026б0005003", Лист02_6бБ_Стр275);
					Лист02_6бА.Данные.Вставить("П0026б0006003", Лист02_6бБ_Стр280);
					Лист02_6бА.Данные.Вставить("П0026б0007003", Лист02_6бБ_Стр290);
					Лист02_6бА.Данные.Вставить("П0026б0011003", Лист02_6бБ_Стр350);
					Лист02_6бА.Данные.Вставить("П0026б0012003", Лист02_6бБ_Стр320);
					Лист02_6бА.Данные.Вставить("П0026б0015003", Лист02_6бБ_Стр330);
					Лист02_6бА.Данные.Вставить("П0026б0016003", Лист02_6бБ_Стр340);
					Лист02_6бА.Данные.Вставить("П0026б0017003", Лист02_6бБ_Стр360);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист02_7А" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Листы02_7Б_Стр040 = 0;
		
		Листы02_7В_Стр040_РС_1 = 0;
		Листы02_7В_Стр040_РС_2 = 0;
		Листы02_7В_Стр040_РС_3 = 0;
		Листы02_7В_Стр040_РС_4 = 0;
		
		Для каждого Лист02_Поиск Из ДеревоДанных.Строки Цикл
			
			Листы02_7Б = Лист02_Поиск.Строки[9].Строки;
			
			Листы02_7Б_Стр040 = Листы02_7Б_Стр040 + СуммаПоказателяПоВеткам(Форма, Листы02_7Б, "П0027Б0004003");
			
			Листы02_7В = Лист02_Поиск.Строки[10].Строки;
			
			Листы02_7В_Стр040_РС_1 = Листы02_7В_Стр040_РС_1 + СуммаПоказателяПоВеткам(
			Форма, Листы02_7В, "П0027В0004003", Новый Структура("П0027В0000100", "1"));
			
			Листы02_7В_Стр040_РС_2 = Листы02_7В_Стр040_РС_2 + СуммаПоказателяПоВеткам(
			Форма, Листы02_7В, "П0027В0004003", Новый Структура("П0027В0000100", "2"));
			
			Листы02_7В_Стр040_РС_3 = Листы02_7В_Стр040_РС_3 + СуммаПоказателяПоВеткам(
			Форма, Листы02_7В, "П0027В0004003", Новый Структура("П0027В0000100", "3"));
			
			Листы02_7В_Стр040_РС_4 = Листы02_7В_Стр040_РС_4 + СуммаПоказателяПоВеткам(
			Форма, Листы02_7В, "П0027В0004003", Новый Структура("П0027В0000100", "4"));
			
		КонецЦикла;
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Листы02_7А = Лист02.Строки[8].Строки;
			
			Для каждого Лист02_7А Из Листы02_7А Цикл
				
				Данные = Лист02_7А.Данные;
				
				Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					
					РасчетСоставлен = СокрЛП(Данные["П0027А0000100"]);
					
					// Стр.030 (зависит от объекта составления расчета) = Сумма стр.040 Разделов Б ИЛИ Сумма стр.040 Разделов В.
					//
					Если РасчетСоставлен = "1" Тогда
						Данные.Вставить("П0027А0003003", Листы02_7В_Стр040_РС_1);
					ИначеЕсли РасчетСоставлен = "2" Тогда
						Данные.Вставить("П0027А0003003", Листы02_7В_Стр040_РС_2);
					ИначеЕсли РасчетСоставлен = "3" Тогда
						Данные.Вставить("П0027А0003003", Листы02_7В_Стр040_РС_3);
					ИначеЕсли РасчетСоставлен = "4" Тогда
						Данные.Вставить("П0027А0003003", Листы02_7В_Стр040_РС_4);
					ИначеЕсли РасчетСоставлен = "5" Тогда
						Данные.Вставить("П0027А0003003", Листы02_7Б_Стр040);
					Иначе
						Данные.Вставить("П0027А0003003", 0);
					КонецЕсли;
					
					// Стр.040 = стр.010 + стр.020 (стр.040 <= стр.030).
					Данные.Вставить("П0027А0004003", Мин(ОкрЧФ(Форма, Данные["П0027А0003003"]),
					ОкрЧФ(Форма, Данные["П0027А0001003"]) + ОкрЧФ(Форма, Данные["П0027А0002003"])));
					
					// Стр.060.
					//
					Если ОтчетныйМесяц = 12 Тогда
						// Стр.060 = стр.010 + стр.020 - стр.050.
						Данные.Вставить("П0027А0006003", ОкрЧФ(Форма, Данные["П0027А0001003"])
						+ ОкрЧФ(Форма, Данные["П0027А0002003"]) - ОкрЧФ(Форма, Данные["П0027А0005003"]));
					Иначе
						// Ручное редактирование стр.060.
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_7Б" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Листы02_Стр120 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020012003");
		Листы02_Стр200 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020020003");
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Листы02_7Б = Лист02.Строки[9].Строки;
			
			Для каждого Лист02_7Б Из Листы02_7Б Цикл
				
				Данные = Лист02_7Б.Данные;
				
				Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					
					// Стр.010 = Сумма стр.120 Листов 02.
					Данные.Вставить("П0027Б0001003", Листы02_Стр120);
					
					// Стр.030 = Сумма стр.200 Листов 02.
					Данные.Вставить("П0027Б0003003", Листы02_Стр200);
					
					// Стр.031 = стр.010 * стр.020 / 100.
					Данные.Вставить("П0027Б0003103",
					ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П0027Б0001003"]) * Данные["П0027Б0002003"] / 100));
					
					// Стр.040 = стр.030 - стр.031.
					Данные.Вставить("П0027Б0004003", ОкрЧФ(Форма, Данные["П0027Б0003003"]) - ОкрЧФ(Форма, Данные["П0027Б0003103"]));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_7В" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Листы02_7В = Лист02.Строки[10].Строки;
			
			Для каждого Лист02_7В Из Листы02_7В Цикл
				
				Данные = Лист02_7В.Данные;
				
				Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					
					// Стр.010 = Сумма стр.050 Прил. 5 к Листам 02 (по РС и КПП).
					// Стр.030 = Сумма стр.070 Прил. 5 к Листам 02 (по РС и КПП).
					//
					Листы02_5_Стр050 = 0;
					Листы02_5_Стр070 = 0;
					
					РС  = СокрЛП(Данные["П0027В0000100"]);
					КПП = СокрЛП(Данные["П0027В0000200"]);
					
					Если ЗначениеЗаполнено(РС) И ЗначениеЗаполнено(КПП) Тогда
						
						Усл = Новый Структура("П000250000300,П000250000400", РС, КПП);
						
						Для каждого Лист02_Поиск Из ДеревоДанных.Строки Цикл
							
							Листы02_5 = Лист02_Поиск.Строки[4].Строки;
							
							Листы02_5_Стр050 = Листы02_5_Стр050 + СуммаПоказателяПоВеткам(Форма, Листы02_5, "П000250005003", Усл);
							Листы02_5_Стр070 = Листы02_5_Стр070 + СуммаПоказателяПоВеткам(Форма, Листы02_5, "П000250007003", Усл);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Данные.Вставить("П0027В0001003", Листы02_5_Стр050);
					Данные.Вставить("П0027В0003003", Листы02_5_Стр070);
					
					// Стр.031 = стр.010 * стр.020 / 100.
					Данные.Вставить("П0027В0003103",
					ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П0027В0001003"]) * Данные["П0027В0002003"] / 100));
					
					// Стр.040 = стр.030 - стр.031.
					Данные.Вставить("П0027В0004003", ОкрЧФ(Форма, Данные["П0027В0003003"]) - ОкрЧФ(Форма, Данные["П0027В0003103"]));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист02_7Г" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Листы02_Стр190 = СуммаПоказателяПоВеткам(Форма, ДеревоДанных.Строки, "П000020019003");
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Листы02_7Г = Лист02.Строки[11].Строки;
			
			Для каждого Лист02_7Г Из Листы02_7Г Цикл
				
				Данные = Лист02_7Г.Данные;
				
				Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
					
					// Стр.010 = Сумма стр.190 Листов 02.
					Данные.Вставить("П0027Г0001003", Листы02_Стр190);
					
					// Стр.011.
					//
					Стр011 = 0;
					
					РС  = СокрЛП(Данные["П0027Г0000100"]);
					КПП = СокрЛП(Данные["П0027Г0000200"]);
					
					Если ЗначениеЗаполнено(РС) И РС <> "5" И ЗначениеЗаполнено(КПП) Тогда
						
						Усл = Новый Структура("П000250000300,П000250000400", РС, КПП);
						
						Для каждого Лист02_Поиск Из ДеревоДанных.Строки Цикл
							
							ПрНП = СокрЛП(Лист02_Поиск.Данные["П000020000100"]);
							
							Если ЗначениеЗаполнено(ПрНП) Тогда
								
								Усл.Вставить("П000250000100", ПрНП);
								
								Листы02_5_Стр050 = СуммаПоказателяПоВеткам(Форма, Лист02_Поиск.Строки[4].Строки, "П000250005003", Усл);
								
								Ставка = Лист02_Поиск.Данные["П000020015003"];
								
								Стр011 = Стр011 + ОкрЧФ(Форма, Листы02_5_Стр050 * Ставка / 100);
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					Данные.Вставить("П0027Г0001103", Стр011);
					
					// Стр.030 = стр.021 + стр.022 + стр.024 (стр.030 <= стр.010).
					Если РС = "5" Тогда
						Данные.Вставить("П0027Г0003003", Мин(ОкрЧФ(Форма, Данные["П0027Г0001003"]), ОкрЧФ(Форма, Данные["П0027Г0002103"])
						+ ОкрЧФ(Форма, Данные["П0027Г0002203"]) + ОкрЧФ(Форма, Данные["П0027Г0002403"])));
					Иначе
						Данные.Вставить("П0027Г0003003", 0);
					КонецЕсли;
					
					// Стр.031 = стр.021 + стр.022 + стр.024 (стр.031 <= стр.011).
					Если ЗначениеЗаполнено(РС) И РС <> "5" Тогда
						Данные.Вставить("П0027Г0003103", Мин(ОкрЧФ(Форма, Данные["П0027Г0001103"]), ОкрЧФ(Форма, Данные["П0027Г0002103"])
						+ ОкрЧФ(Форма, Данные["П0027Г0002203"]) + ОкрЧФ(Форма, Данные["П0027Г0002403"])));
					Иначе
						Данные.Вставить("П0027Г0003103", 0);
					КонецЕсли;
					
					// Стр.040 = стр.023 (стр.040 <= стр.010).
					Данные.Вставить("П0027Г0004003",
					Мин(ОкрЧФ(Форма, Данные["П0027Г0001003"]), ОкрЧФ(Форма, Данные["П0027Г0002303"])));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист03А" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				// Стр.020 = стр.021 + стр.022 + стр.023 + стр.024.
				Данные.Вставить("П0003А0002003", Макс(0
				, ОкрЧФ(Форма, Данные["П0003А0002103"]) + ОкрЧФ(Форма, Данные["П0003А0002203"])
				+ ОкрЧФ(Форма, Данные["П0003А0002303"]) + ОкрЧФ(Форма, Данные["П0003А0002403"])));
				
				// Стр.010 = стр.020 + стр.030 + стр.040 + стр.050.
				Данные.Вставить("П0003А0001003", Макс(0
				, ОкрЧФ(Форма, Данные["П0003А0002003"]) + ОкрЧФ(Форма, Данные["П0003А0003003"])
				+ ОкрЧФ(Форма, Данные["П0003А0004003"]) + ОкрЧФ(Форма, Данные["П0003А0005003"])));
				
				Если СокрЛП(Данные["П0003А0000100"]) = "1" Тогда
					Если ЗначениеЗаполнено(Данные["П0003А0001003"]) Тогда
						Данные.Вставить("П0003А0009003"
						, ОкрЧФ(Форма, Данные["П0003А0001003"])
						+ ОкрЧФ(Форма, Данные["П0003А0007003"])
						- ОкрЧФ(Форма, Данные["П0003А0008103"]));
					ИначеЕсли ЗначениеЗаполнено(Данные["П0003А0000103"]) Тогда
						Данные.Вставить("П0003А0009003"
						, ОкрЧФ(Форма, Данные["П0003А0000103"])
						- ОкрЧФ(Форма, Данные["П0003А0008103"]));
					Иначе
						Данные.Вставить("П0003А0009003", 0);
					КонецЕсли;
				Иначе
					// Расчет не предусмотрен.
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист03Б" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				// Стр.030 = стр.010 * стр.020 / 100.
				Данные.Вставить("П0003Б0003003",
				Макс(0, ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П0003Б0001003"]) * Данные["П0003Б0002003"] / 100)));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист04" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				// Стр.040 = (стр.010 - стр.020) * стр.030 / 100.
				Данные.Вставить("П000040004003", Макс(0, ОкрЧФ(Форма, (ОкрЧФ(Форма, Данные["П000040001003"])
				- ОкрЧФ(Форма, Данные["П000040002003"])) * Данные["П000040003003"] / 100)));
				
				// Стр.080 = стр.040 - стр.050 - стр.060 - стр.070.
				Данные.Вставить("П000040008003", Макс(0
				, ОкрЧФ(Форма, Данные["П000040004003"]) - ОкрЧФ(Форма, Данные["П000040005003"])
				- ОкрЧФ(Форма, Данные["П000040006003"]) - ОкрЧФ(Форма, Данные["П000040007003"])));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист05" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				// Стр.040 = стр.010 - стр.020.
				Данные.Вставить("П000050004003", ОкрЧФ(Форма, Данные["П000050001003"]) - ОкрЧФ(Форма, Данные["П000050002003"]));
				
				// Стр.060 = стр.040 - стр.050.
				Данные.Вставить("П000050006003", Макс(0,
				ОкрЧФ(Форма, Данные["П000050004003"]) - ОкрЧФ(Форма, Данные["П000050005003"])));
				
				// Стр.100 = стр.060 - стр.080.
				Данные.Вставить("П000050010003", Макс(0,
				ОкрЧФ(Форма, Данные["П000050006003"]) - ОкрЧФ(Форма, Данные["П000050008003"])));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист06" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Ветка = ДеревоДанных.Строки[0];
		
		Данные = Ветка.Данные;
		
		Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			
			// Стр.010 = стр.020 + стр.030 + стр.040 + стр.050 + стр.060 + стр.070 + стр.080 + стр.090 + стр.100 + стр.110.
			Данные.Вставить("П000060001003"
			, ОкрЧФ(Форма, Данные["П000060002003"]) + ОкрЧФ(Форма, Данные["П000060003003"])
			+ ОкрЧФ(Форма, Данные["П000060004003"]) + ОкрЧФ(Форма, Данные["П000060005003"])
			+ ОкрЧФ(Форма, Данные["П000060006003"]) + ОкрЧФ(Форма, Данные["П000060007003"])
			+ ОкрЧФ(Форма, Данные["П000060008003"]) + ОкрЧФ(Форма, Данные["П000060009003"])
			+ ОкрЧФ(Форма, Данные["П000060010003"]) + ОкрЧФ(Форма, Данные["П000060011003"]));
			
			// Стр.190 = стр.200 + стр.210 + стр.220.
			Данные.Вставить("П000060019003", ОкрЧФ(Форма, Данные["П000060020003"])
			+ ОкрЧФ(Форма, Данные["П000060021003"]) + ОкрЧФ(Форма, Данные["П000060022003"]));
			
			// Стр.240 = стр.250 + стр.260 + стр.270 + стр.280 + стр.290 + стр.300 + стр.310 + стр.320.
			Данные.Вставить("П000060024003"
			, ОкрЧФ(Форма, Данные["П000060025003"]) + ОкрЧФ(Форма, Данные["П000060026003"])
			+ ОкрЧФ(Форма, Данные["П000060027003"]) + ОкрЧФ(Форма, Данные["П000060028003"])
			+ ОкрЧФ(Форма, Данные["П000060029003"]) + ОкрЧФ(Форма, Данные["П000060030003"])
			+ ОкрЧФ(Форма, Данные["П000060031003"]) + ОкрЧФ(Форма, Данные["П000060032003"]));
			
			// Стр.330 = стр.020 + стр.030 - стр.140 - стр.200 - стр.250.
			Данные.Вставить("П000060033003", ОкрЧФ(Форма, Данные["П000060002003"])
			+ ОкрЧФ(Форма, Данные["П000060003003"]) - ОкрЧФ(Форма, Данные["П000060014003"])
			- ОкрЧФ(Форма, Данные["П000060020003"]) - ОкрЧФ(Форма, Данные["П000060025003"]));
			
			// Стр.350 = стр.040 + стр.050 - стр.150 - стр.210 - стр.260.
			Данные.Вставить("П000060035003", ОкрЧФ(Форма, Данные["П000060004003"])
			+ ОкрЧФ(Форма, Данные["П000060005003"]) - ОкрЧФ(Форма, Данные["П000060015003"])
			- ОкрЧФ(Форма, Данные["П000060021003"]) - ОкрЧФ(Форма, Данные["П000060026003"]));
			
			// Стр.370 = стр.060 - стр.160 - стр.270.
			Данные.Вставить("П000060037003", Макс(0, ОкрЧФ(Форма, Данные["П000060006003"])
			- ОкрЧФ(Форма, Данные["П000060016003"]) - ОкрЧФ(Форма, Данные["П000060027003"])));
			
			// Стр.380 = стр.070 - стр.170 - стр.280.
			Данные.Вставить("П000060038003", Макс(0, ОкрЧФ(Форма, Данные["П000060007003"])
			- ОкрЧФ(Форма, Данные["П000060017003"]) - ОкрЧФ(Форма, Данные["П000060028003"])));
			
			// Стр.390 = стр.110 - стр.180 - стр.220 - стр.320.
			Данные.Вставить("П000060039003"
			, ОкрЧФ(Форма, Данные["П000060011003"]) - ОкрЧФ(Форма, Данные["П000060018003"])
			- ОкрЧФ(Форма, Данные["П000060022003"]) - ОкрЧФ(Форма, Данные["П000060032003"]));
			
			// Стр.450 = стр.350 - стр.360.
			Данные.Вставить("П000060045003",
			Макс(0, ОкрЧФ(Форма, Данные["П000060035003"]) - ОкрЧФ(Форма, Данные["П000060036003"])));
			
			// Стр.480 = стр.460 - стр.470 + стр.471.
			Данные.Вставить("П000060048003", Макс(0, ОкрЧФ(Форма, Данные["П000060046003"])
			- ОкрЧФ(Форма, Данные["П000060047003"]) + ОкрЧФ(Форма, Данные["П000060047103"])));
			
			// Стр.481 = стр.459 - стр.471.
			Данные.Вставить("П000060048103",
			Макс(0, ОкрЧФ(Форма, Данные["П000060045903"]) - ОкрЧФ(Форма, Данные["П000060047103"])));
			
			// Стр.490 = стр.390 - стр.400.
			Данные.Вставить("П000060049003",
			Макс(0, ОкрЧФ(Форма, Данные["П000060039003"]) - ОкрЧФ(Форма, Данные["П000060040003"])));
			
			// Стр.520 = стр.500 - стр.510.
			Данные.Вставить("П000060052003",
			Макс(0, ОкрЧФ(Форма, Данные["П000060050003"]) - ОкрЧФ(Форма, Данные["П000060051003"])));
			
			// Стр.530 = стр.450 - стр.470 + стр.490 - стр.510.
			Данные.Вставить("П000060053003", Макс(0
			, ОкрЧФ(Форма, Данные["П000060045003"]) - ОкрЧФ(Форма, Данные["П000060047003"])
			+ ОкрЧФ(Форма, Данные["П000060049003"]) - ОкрЧФ(Форма, Данные["П000060051003"])));
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист07" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Ветка = ДеревоДанных.Строки[0];
		
		Данные = Ветка.Данные;
		
		Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
			
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыЛ07М1];
			
			ИтогГр3 = 0;
			ИтогГр4 = 0;
			ИтогГр6 = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				СумГр3 = ОкрЧФ(Форма, СтрокаМнЧ.Данные["П00007М100003"]);
				СумГр4 = ОкрЧФ(Форма, СтрокаМнЧ.Данные["П00007М100004"]);
				СумГр6 = ОкрЧФ(Форма, СтрокаМнЧ.Данные["П00007М100006"]);
				ИтогГр3 = ИтогГр3 + СумГр3;
				ИтогГр4 = ИтогГр4 + СумГр4;
				ИтогГр6 = ИтогГр6 + СумГр6;
				СтрокаМнЧ.Данные.Вставить("П00007М100007", СумГр3 - СумГр4 - СумГр6);
			КонецЦикла;
			Данные.Вставить("П000070000003", ИтогГр3);
			Данные.Вставить("П000070000004", ИтогГр4);
			Данные.Вставить("П000070000006", ИтогГр6);
			Данные.Вставить("П000070000007", ИтогГр3 - ИтогГр4 - ИтогГр6);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист08" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				ВидКорр = СокрЛП(Данные["П000080000501"]);
				
				Если СтрРазделить("1,2,3,4,5,6", ",", Ложь).Найти(ВидКорр) = Неопределено Тогда
					
					Данные.Вставить("П000800001003", "");
					Данные.Вставить("П000800002003", "");
					Данные.Вставить("П000800003003", "");
					Данные.Вставить("П000800004003", "");
					Данные.Вставить("П000800005003", "");
					Данные.Вставить("П000800001004", 0);
					Данные.Вставить("П000800002004", 0);
					Данные.Вставить("П000800003004", 0);
					Данные.Вставить("П000800004004", 0);
					Данные.Вставить("П000800005004", 0);
					
				ИначеЕсли ВидКорр = "6" Тогда
					
					// Ручное редактирование стр.050 по гр.4.
					
				Иначе
					
					Если ВидКорр = "1" Тогда
						
						Данные.Вставить("П000800001004",
						?(Данные["П000800001004"] < 0, -1 * Данные["П000800001004"], Данные["П000800001004"]));
						Данные.Вставить("П000800002004",
						?(Данные["П000800002004"] < 0, -1 * Данные["П000800002004"], Данные["П000800002004"]));
						Данные.Вставить("П000800003004",
						?(Данные["П000800003004"] < 0, -1 * Данные["П000800003004"], Данные["П000800003004"]));
						Данные.Вставить("П000800004004",
						?(Данные["П000800004004"] < 0, -1 * Данные["П000800004004"], Данные["П000800004004"]));
						
						Стр010Гр4 = ОкрЧФ(Форма, Данные["П000800001004"]);
						Стр020Гр4 = ОкрЧФ(Форма, Данные["П000800002004"]);
						Стр030Гр4 = ОкрЧФ(Форма, Данные["П000800003004"]);
						Стр040Гр4 = ОкрЧФ(Форма, Данные["П000800004004"]);
						Стр050Гр4 = Стр010Гр4 + Стр020Гр4 + Стр030Гр4 + Стр040Гр4;
						
						Данные.Вставить("П000800005004", Стр050Гр4);
						
						Данные.Вставить("П000800001003", ?(Стр010Гр4 > 0, "1", ""));
						Данные.Вставить("П000800002003", ?(Стр020Гр4 > 0, "1", ""));
						Данные.Вставить("П000800003003", ?(Стр030Гр4 > 0, "0", ""));
						Данные.Вставить("П000800004003", ?(Стр040Гр4 > 0, "0", ""));
						Данные.Вставить("П000800005003", ?(Стр050Гр4 > 0, "1", ""));
						
					Иначе // ВидКорр в ["2","3","4","5"]
						
						Данные.Вставить("П000800001004",
						?(Данные["П000800001004"] > 0, -1 * Данные["П000800001004"], Данные["П000800001004"]));
						Данные.Вставить("П000800002004",
						?(Данные["П000800002004"] > 0, -1 * Данные["П000800002004"], Данные["П000800002004"]));
						Данные.Вставить("П000800003004",
						?(Данные["П000800003004"] > 0, -1 * Данные["П000800003004"], Данные["П000800003004"]));
						Данные.Вставить("П000800004004",
						?(Данные["П000800004004"] > 0, -1 * Данные["П000800004004"], Данные["П000800004004"]));
						
						Стр010Гр4 = ОкрЧФ(Форма, Данные["П000800001004"]);
						Стр020Гр4 = ОкрЧФ(Форма, Данные["П000800002004"]);
						Стр030Гр4 = ОкрЧФ(Форма, Данные["П000800003004"]);
						Стр040Гр4 = ОкрЧФ(Форма, Данные["П000800004004"]);
						Стр050Гр4 = Стр010Гр4 + Стр020Гр4 + Стр030Гр4 + Стр040Гр4;
						
						Данные.Вставить("П000800005004", Стр050Гр4);
						
						Данные.Вставить("П000800001003", ?(Стр010Гр4 < 0, "0", ""));
						Данные.Вставить("П000800002003", ?(Стр020Гр4 < 0, "0", ""));
						Данные.Вставить("П000800003003", ?(Стр030Гр4 < 0, "1", ""));
						Данные.Вставить("П000800004003", ?(Стр040Гр4 < 0, "1", ""));
						Данные.Вставить("П000800005003", ?(Стр050Гр4 < 0, "0", ""));
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист09" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыЛ09П1М1];
				
				РассчитыватьБ1   = ЗначениеЗаполнено(Данные["П0009А0000100"]);
				РассчитыватьБ2Б3 = ЗначениеЗаполнено(Данные["П0009А0000200"]);
				
				// Раздел Б1.
				//
				Если РассчитыватьБ1 Тогда
					
					// Стр.040 = стр.010 - стр.020 + стр.030.
					Данные.Вставить("П009Б10004003", ОкрЧФ(Форма, Данные["П009Б10001003"])
					- ОкрЧФ(Форма, Данные["П009Б10002003"]) + ОкрЧФ(Форма, Данные["П009Б10003003"]));
					
					// Стр.060 = стр.040 х стр.050.
					Данные.Вставить("П009Б10006003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б10004003"]) * Данные["П009Б10005003"]));
					
					// Стр.080 = стр.040 - стр.070.
					Данные.Вставить("П009Б10008003", ОкрЧФ(Форма, Данные["П009Б10004003"]) - ОкрЧФ(Форма, Данные["П009Б10007003"]));
					
					// Стр.090 = стр.080 х стр.050.
					Данные.Вставить("П009Б10009003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б10008003"]) * Данные["П009Б10005003"]));
					
					// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли
					= ЗначениеЗаполнено(Данные["П009Б10000101"]) И (ОкрЧФ(Форма, Данные["П009Б10009003"]) <= 10000000);
					
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б10000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							Данные.Вставить(ИмяПок, 0);
						КонецЦикла;
						
					Иначе
						
						// Стр.150 = (стр.080 - стр.100 - стр.110 - стр.120 - стр.130 - стр.140) х стр.050.
						Данные.Вставить("П009Б10015003", ОкрЧФ(Форма,
						(ОкрЧФ(Форма, Данные["П009Б10008003"]) - ОкрЧФ(Форма, Данные["П009Б10010003"])
						- ОкрЧФ(Форма, Данные["П009Б10011003"]) - ОкрЧФ(Форма, Данные["П009Б10012003"])
						- ОкрЧФ(Форма, Данные["П009Б10013003"]) - ОкрЧФ(Форма, Данные["П009Б10014003"])) * Данные["П009Б10005003"]));
						
						// Стр.160 = стр.140 Приложения 1 к Листу 09, если стр.150 >= 0.
						// Стр.160 = 0, если стр.150 < 0.
						Если ОкрЧФ(Форма, Данные["П009Б10015003"]) < 0 Тогда
							Данные.Вставить("П009Б10016003", 0);
						Иначе
							Сум = 0;
							Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
								Сум = Сум + ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М114003"]);
							КонецЦикла;
							Данные.Вставить("П009Б10016003", Сум);
						КонецЕсли;
						
						// Стр.170 = стр.150 - стр.160.
						Данные.Вставить("П009Б10017003", ОкрЧФ(Форма, Данные["П009Б10015003"]) - ОкрЧФ(Форма, Данные["П009Б10016003"]));
						
						// Стр.180 = стр.170 х п.10 Раздела А Листа 09 / 100, если стр.170 >= 0.
						// Стр.180 = 0, если стр.170 < 0.
						Если ОкрЧФ(Форма, Данные["П009Б10017003"]) < 0 Тогда
							Данные.Вставить("П009Б10018003", 0);
						Иначе
							Данные.Вставить("П009Б10018003",
							ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б10017003"]) * Данные["П0009А0001001"] / 100));
						КонецЕсли;
						
						// Стр.200 = стр.180 - стр.190.
						Данные.Вставить("П009Б10020003", ОкрЧФ(Форма, Данные["П009Б10018003"]) - ОкрЧФ(Форма, Данные["П009Б10019003"]));
						
						// Стр.210 = стр.200 х Налоговая ставка ("стр.205") / 100.
						Данные.Вставить("П009Б10021003",
						ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б10020003"]) * Данные["П009Б10020500"] / 100));
						
					КонецЕсли;
					
					// Стр.230 = стр.210 - стр.220.
					Данные.Вставить("П009Б10023003", ОкрЧФ(Форма, Данные["П009Б10021003"]) - ОкрЧФ(Форма, Данные["П009Б10022003"]));
					
				Иначе
					
					Данные.Вставить("П009Б10004003", 0);
					Данные.Вставить("П009Б10006003", 0);
					Данные.Вставить("П009Б10008003", 0);
					Данные.Вставить("П009Б10009003", 0);
					Данные.Вставить("П009Б10015003", 0);
					Данные.Вставить("П009Б10016003", 0);
					Данные.Вставить("П009Б10017003", 0);
					Данные.Вставить("П009Б10018003", 0);
					Данные.Вставить("П009Б10020003", 0);
					Данные.Вставить("П009Б10021003", 0);
					Данные.Вставить("П009Б10023003", 0);
					
				КонецЕсли;
				
				Если РассчитыватьБ2Б3 Тогда
					
					// Раздел Б3 (строки 030-080).
					//
					// Стр.030 = стр.010 - стр.020.
					Данные.Вставить("П009Б30003003", ОкрЧФ(Форма, Данные["П009Б30001003"]) - ОкрЧФ(Форма, Данные["П009Б30002003"]));
					
					// Стр.050 = стр.030 х стр.040.
					Данные.Вставить("П009Б30005003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б30003003"]) * Данные["П009Б30004003"]));
					
					// Стр.070 = стр.030 - стр.060.
					Данные.Вставить("П009Б30007003", ОкрЧФ(Форма, Данные["П009Б30003003"]) - ОкрЧФ(Форма, Данные["П009Б30006003"]));
					
					// Стр.080 = стр.070 х стр.040.
					Данные.Вставить("П009Б30008003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б30007003"]) * Данные["П009Б30004003"]));
					
					// Раздел Б2 (строки 050-100).
					//
					// Стр.050 = стр.010 + стр.020 - стр.030 - стр.040.
					Данные.Вставить("П009Б20005003", ОкрЧФ(Форма, Данные["П009Б20001003"]) + ОкрЧФ(Форма, Данные["П009Б20002003"])
					- ОкрЧФ(Форма, Данные["П009Б20003003"]) - ОкрЧФ(Форма, Данные["П009Б20004003"]));
					
					// Стр.070 = стр.050 х стр.060.
					Данные.Вставить("П009Б20007003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б20005003"]) * Данные["П009Б20006003"]));
					
					// Стр.090 = стр.050 - стр.080.
					Данные.Вставить("П009Б20009003", ОкрЧФ(Форма, Данные["П009Б20005003"]) - ОкрЧФ(Форма, Данные["П009Б20008003"]));
					
					// Стр.100 = стр.090 х стр.060.
					Данные.Вставить("П009Б20010003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б20009003"]) * Данные["П009Б20006003"]));
					
					// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
					//
					ВеличинаПрибыли = ОкрЧФ(Форма, Данные["П009Б20010003"]) + ОкрЧФ(Форма, Данные["П009Б30008003"]);
					
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б2
					= ЗначениеЗаполнено(Данные["П009Б20000101"]) И (ВеличинаПрибыли <= 10000000);
					
					НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б3
					= ЗначениеЗаполнено(Данные["П009Б30000101"]) И (ВеличинаПрибыли <= 10000000);
					
					// Раздел Б3 (строки 090-130).
					//
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б3 Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б30000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							Данные.Вставить(ИмяПок, 0);
						КонецЦикла;
						
					Иначе
						
						// Стр.090 = стр.140 Приложения 1 к Листу 09 с кодом "2".
						Сум = 0;
						Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
							Если СокрЛП(СтрокаМнЧ.Данные["П009П1М100100"]) = "2" Тогда
								Сум = Сум + ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М114003"]);
							КонецЕсли;
						КонецЦикла;
						Данные.Вставить("П009Б30009003", Сум);
						
						// Стр.100 = стр.080 - стр.090.
						Данные.Вставить("П009Б30010003", ОкрЧФ(Форма, Данные["П009Б30008003"]) - ОкрЧФ(Форма, Данные["П009Б30009003"]));
						
						// Стр.110 = стр.100 х п.10 Раздела А Листа 09 / 100, если стр.100 >= 0.
						// Стр.110 = 0, если стр.100 < 0.
						Если ОкрЧФ(Форма, Данные["П009Б30010003"]) < 0 Тогда
							Данные.Вставить("П009Б30011003", 0);
						Иначе
							Данные.Вставить("П009Б30011003",
							ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б30010003"]) * Данные["П0009А0001001"] / 100));
						КонецЕсли;
						
						// Стр.130 = стр.110 - стр.120.
						Данные.Вставить("П009Б30013003", ОкрЧФ(Форма, Данные["П009Б30011003"]) - ОкрЧФ(Форма, Данные["П009Б30012003"]));
						
					КонецЕсли;
					
					// Раздел Б2 (строки 160-250).
					//
					Если НеЗаполнятьПоказатели_Зависимость_ВеличинаПрибыли_Б2 Тогда
						
						// Особая обработка в Листе 09: режим незаполнения показателей, зависящих от величины прибыли.
						ИменаКонтролируемыхПоказателей = ИменаКонтролируемыхПоказателей("П009Б20000101");
						Для каждого ИмяПок Из ИменаКонтролируемыхПоказателей Цикл
							Данные.Вставить(ИмяПок, 0);
						КонецЦикла;
						
					Иначе
						
						// Стр.160 = стр.090 - стр.110 - стр.120 - стр.130 - стр.140 - стр.150.
						Данные.Вставить("П009Б20016003", ОкрЧФ(Форма, Данные["П009Б20009003"]) - ОкрЧФ(Форма, Данные["П009Б20011003"])
						- ОкрЧФ(Форма, Данные["П009Б20012003"]) - ОкрЧФ(Форма, Данные["П009Б20013003"])
						- ОкрЧФ(Форма, Данные["П009Б20014003"]) - ОкрЧФ(Форма, Данные["П009Б20015003"]));
						
						// Стр.170 = стр.160 х стр.060.
						Данные.Вставить("П009Б20017003", ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б20016003"]) * Данные["П009Б20006003"]));
						
						// Стр.180 = стр.140 Приложения 1 к Листу 09 с кодом "1".
						Сум = 0;
						Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
							Если СокрЛП(СтрокаМнЧ.Данные["П009П1М100100"]) = "1" Тогда
								Сум = Сум + ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М114003"]);
							КонецЕсли;
						КонецЦикла;
						Данные.Вставить("П009Б20018003", Сум);
						
						// Стр.190 = стр.170 - стр.180.
						Данные.Вставить("П009Б20019003", ОкрЧФ(Форма, Данные["П009Б20017003"]) - ОкрЧФ(Форма, Данные["П009Б20018003"]));
						
						// Стр.200 = стр.190 х п.10 Раздела А Листа 09 / 100, если стр.190 >= 0.
						// Стр.200 = 0, если стр.190 < 0.
						Если ОкрЧФ(Форма, Данные["П009Б20019003"]) < 0 Тогда
							Данные.Вставить("П009Б20020003", 0);
						Иначе
							Данные.Вставить("П009Б20020003",
							ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б20019003"]) * Данные["П0009А0001001"] / 100));
						КонецЕсли;
						
						// Стр.220 = стр.200 - стр.210 + стр.130 Раздела Б3.
						Данные.Вставить("П009Б20022003", ОкрЧФ(Форма, Данные["П009Б20020003"]) - ОкрЧФ(Форма, Данные["П009Б20021003"])
						+ ОкрЧФ(Форма, Данные["П009Б30013003"]));
						
						// Стр.230 = стр.220 х Налоговая ставка ("стр.225") / 100.
						Данные.Вставить("П009Б20023003",
						ОкрЧФ(Форма, ОкрЧФ(Форма, Данные["П009Б20022003"]) * Данные["П009Б20022500"] / 100));
						
						// Стр.250 = стр.230 - стр.240.
						Данные.Вставить("П009Б20025003", ОкрЧФ(Форма, Данные["П009Б20023003"]) - ОкрЧФ(Форма, Данные["П009Б20024003"]));
						
					КонецЕсли;
					
				Иначе
					
					// Раздел Б3.
					//
					Данные.Вставить("П009Б30003003", 0);
					Данные.Вставить("П009Б30005003", 0);
					Данные.Вставить("П009Б30007003", 0);
					Данные.Вставить("П009Б30008003", 0);
					Данные.Вставить("П009Б30009003", 0);
					Данные.Вставить("П009Б30010003", 0);
					Данные.Вставить("П009Б30011003", 0);
					Данные.Вставить("П009Б30013003", 0);
					
					// Раздел Б2.
					//
					Данные.Вставить("П009Б20005003", 0);
					Данные.Вставить("П009Б20007003", 0);
					Данные.Вставить("П009Б20009003", 0);
					Данные.Вставить("П009Б20010003", 0);
					Данные.Вставить("П009Б20016003", 0);
					Данные.Вставить("П009Б20017003", 0);
					Данные.Вставить("П009Б20018003", 0);
					Данные.Вставить("П009Б20019003", 0);
					Данные.Вставить("П009Б20020003", 0);
					Данные.Вставить("П009Б20022003", 0);
					Данные.Вставить("П009Б20023003", 0);
					Данные.Вставить("П009Б20025003", 0);
					
				КонецЕсли;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					
					РазделБ1Стр060 = 0;
					РазделБ1Стр150 = 0;
					РазделБ2Стр070 = 0;
					РазделБ2Стр170 = 0;
					РазделБ3Стр050 = 0;
					РазделБ3Стр080 = 0;
					
					Стр130 = 0;
					
					Если РассчитыватьБ1 Тогда
						
						РазделБ1Стр060 = ОкрЧФ(Форма, Данные["П009Б10006003"]);
						РазделБ1Стр150 = ОкрЧФ(Форма, Данные["П009Б10015003"]);
						Стр130 = Макс(РазделБ1Стр150, 0);
						
					ИначеЕсли РассчитыватьБ2Б3 Тогда
						
						Если СокрЛП(СтрокаМнЧ.Данные["П009П1М100100"]) = "1" Тогда
							
							РазделБ2Стр070 = ОкрЧФ(Форма, Данные["П009Б20007003"]);
							РазделБ2Стр170 = ОкрЧФ(Форма, Данные["П009Б20017003"]);
							Стр130 = Макс(РазделБ2Стр170, 0);
							
						ИначеЕсли СокрЛП(СтрокаМнЧ.Данные["П009П1М100100"]) = "2" Тогда
							
							РазделБ3Стр050 = ОкрЧФ(Форма, Данные["П009Б30005003"]);
							РазделБ3Стр080 = ОкрЧФ(Форма, Данные["П009Б30008003"]);
							Стр130 = Макс(РазделБ3Стр080, 0);
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаМнЧ.Данные.Вставить("П009П1М113003", Стр130);
					
					ВеличинаПрибылиУбытка = РазделБ1Стр060 + РазделБ2Стр070 + РазделБ3Стр050;
					
					Если ВеличинаПрибылиУбытка < 0 Тогда
						СтрокаМнЧ.Данные.Вставить("П009П1М115003",
						ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М101003"]) - ВеличинаПрибылиУбытка);
					Иначе
						СтрокаМнЧ.Данные.Вставить("П009П1М115003",
						ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М101003"]) - ОкрЧФ(Форма, СтрокаМнЧ.Данные["П009П1М114003"]));
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Данные = Ветка.Данные;
			
			Если ЗначениеЗаполнено(Данные["ПризнакВключения"]) Тогда
				
				Сумма = ОкрЧФ(Форма, Данные["П000П20001003"])
				+ ОкрЧФ(Форма, Данные["П000П20002003"]) - ОкрЧФ(Форма, Данные["П000П20003003"])
				- ОкрЧФ(Форма, Данные["П000П20004003"]) + ОкрЧФ(Форма, Данные["П000П20005003"]);
				
				// Стр.060.
				Данные.Вставить("П000П20006003", Мин(0, Сумма));
				
				// Стр.100.
				Данные.Вставить("П000П20010003", Макс(0, Сумма));
				
				// Стр.120.
				Данные.Вставить("П000П20012003", ОкрЧФ(Форма, Данные["П000П20010003"]) - ОкрЧФ(Форма, Данные["П000П20011003"]));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяКорневогоРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОкрЧФ(Форма, ИсходноеЗначение)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ИсходноеЗначение);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П000П20006003");
	Структ.Вставить("П000П20010003");
	Структ.Вставить("П000П20012003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П009Б10004003");
	Структ.Вставить("П009Б10006003");
	Структ.Вставить("П009Б10008003");
	Структ.Вставить("П009Б10009003");
	Структ.Вставить("П009Б10015003");
	Структ.Вставить("П009Б10016003");
	Структ.Вставить("П009Б10017003");
	Структ.Вставить("П009Б10018003");
	Структ.Вставить("П009Б10020003");
	Структ.Вставить("П009Б10021003");
	Структ.Вставить("П009Б10023003");
	Структ.Вставить("П009Б20005003");
	Структ.Вставить("П009Б20007003");
	Структ.Вставить("П009Б20009003");
	Структ.Вставить("П009Б20010003");
	Структ.Вставить("П009Б20016003");
	Структ.Вставить("П009Б20017003");
	Структ.Вставить("П009Б20018003");
	Структ.Вставить("П009Б20019003");
	Структ.Вставить("П009Б20020003");
	Структ.Вставить("П009Б20022003");
	Структ.Вставить("П009Б20023003");
	Структ.Вставить("П009Б20025003");
	Структ.Вставить("П009Б30003003");
	Структ.Вставить("П009Б30005003");
	Структ.Вставить("П009Б30007003");
	Структ.Вставить("П009Б30008003");
	Структ.Вставить("П009Б30009003");
	Структ.Вставить("П009Б30010003");
	Структ.Вставить("П009Б30011003");
	Структ.Вставить("П009Б30013003");
	Структ.Вставить("П009П1М113003");
	Структ.Вставить("П009П1М115003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист09", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000800005004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист08", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00007М100007");
	Структ.Вставить("П000070000003");
	Структ.Вставить("П000070000004");
	Структ.Вставить("П000070000006");
	Структ.Вставить("П000070000007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист07", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000060001003");
	Структ.Вставить("П000060019003");
	Структ.Вставить("П000060024003");
	Структ.Вставить("П000060033003");
	Структ.Вставить("П000060035003");
	Структ.Вставить("П000060037003");
	Структ.Вставить("П000060038003");
	Структ.Вставить("П000060039003");
	Структ.Вставить("П000060045003");
	Структ.Вставить("П000060048003");
	Структ.Вставить("П000060048103");
	Структ.Вставить("П000060049003");
	Структ.Вставить("П000060052003");
	Структ.Вставить("П000060053003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист06", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000050004003");
	Структ.Вставить("П000050006003");
	Структ.Вставить("П000050010003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист05", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000040004003");
	Структ.Вставить("П000040008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист04", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0003Б0003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист03Б", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0003А0001003");
	Структ.Вставить("П0003А0002003");
	Структ.Вставить("П0003А0009003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист03А", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0027Г0001003");
	Структ.Вставить("П0027Г0001103");
	Структ.Вставить("П0027Г0003003");
	Структ.Вставить("П0027Г0003103");
	Структ.Вставить("П0027Г0004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_7Г", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0027В0001003");
	Структ.Вставить("П0027В0003003");
	Структ.Вставить("П0027В0003103");
	Структ.Вставить("П0027В0004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_7В", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0027Б0001003");
	Структ.Вставить("П0027Б0003003");
	Структ.Вставить("П0027Б0003103");
	Структ.Вставить("П0027Б0004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_7Б", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0027А0003003");
	Структ.Вставить("П0027А0004003");
	Структ.Вставить("П0027А0006003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_7А", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0026б0026003");
	Структ.Вставить("П0026б0027003");
	Структ.Вставить("П0026б0028003");
	Структ.Вставить("П0026б0028503");
	Структ.Вставить("П0026б0034003");
	Структ.Вставить("П0026б0035003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_6бБ", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0026б0001003");
	Структ.Вставить("П0026б0002003");
	Структ.Вставить("П0026б0003003");
	Структ.Вставить("П0026б0003103");
	Структ.Вставить("П0026б0004003");
	Структ.Вставить("П0026б0005003");
	Структ.Вставить("П0026б0006003");
	Структ.Вставить("П0026б0007003");
	Структ.Вставить("П0026б0011003");
	Структ.Вставить("П0026б0012003");
	Структ.Вставить("П0026б0013003");
	Структ.Вставить("П0026б0013103");
	Структ.Вставить("П0026б0014003");
	Структ.Вставить("П0026б0014103");
	Структ.Вставить("П0026б0015003");
	Структ.Вставить("П0026б0016003");
	Структ.Вставить("П0026б0017003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_6бА", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П0026а0003003");
	Структ.Вставить("П0026а0003103");
	Структ.Вставить("П0026а0005003");
	Структ.Вставить("П0026а0007003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_6а", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000260003003");
	Структ.Вставить("П000260003103");
	Структ.Вставить("П000260004003");
	Структ.Вставить("П000260005003");
	Структ.Вставить("П000260005103");
	Структ.Вставить("П000260007003");
	Структ.Вставить("П000260009503");
	Структ.Вставить("П000260009703");
	Структ.Вставить("П000260009803");
	Структ.Вставить("П000260010003");
	Структ.Вставить("П000260011003");
	Структ.Вставить("П000260012003");
	Структ.Вставить("П000260012103");
	Структ.Вставить("П000260000500");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_6", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000250003003");
	Структ.Вставить("П000250003103");
	Структ.Вставить("П000250005003");
	Структ.Вставить("П000250005103");
	Структ.Вставить("П000250007003");
	Структ.Вставить("П000250009803");
	Структ.Вставить("П000250010003");
	Структ.Вставить("П000250011003");
	Структ.Вставить("П000250012003");
	Структ.Вставить("П000250012103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_5", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000240001003");
	Структ.Вставить("П000240014003");
	Структ.Вставить("П000240016003");
	Структ.Вставить("П000240016103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_4", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000230015003");
	Структ.Вставить("П000230023003");
	Структ.Вставить("П000230034003");
	Структ.Вставить("П000230035003");
	Структ.Вставить("П000230036003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_3", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000220008003");
	Структ.Вставить("П000220013003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000210001003");
	Структ.Вставить("П000210003003");
	Структ.Вставить("П000210004003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02_1", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000020001003");
	Структ.Вставить("П000020002003");
	Структ.Вставить("П000020003003");
	Структ.Вставить("П000020004003");
	Структ.Вставить("П000020005003");
	Структ.Вставить("П000020006003");
	Структ.Вставить("П000020010003");
	Структ.Вставить("П000020011003");
	Структ.Вставить("П000020012003");
	Структ.Вставить("П000020014003");
	Структ.Вставить("П000020018003");
	Структ.Вставить("П000020019003");
	Структ.Вставить("П000020020003");
	Структ.Вставить("П000020021003");
	Структ.Вставить("П000020024003");
	Структ.Вставить("П000020026003");
	Структ.Вставить("П000020026503");
	Структ.Вставить("П000020026603");
	Структ.Вставить("П000020026703");
	Структ.Вставить("П000020026803");
	Структ.Вставить("П000020026903");
	Структ.Вставить("П000020027003");
	Структ.Вставить("П000020027103");
	Структ.Вставить("П000020028003");
	Структ.Вставить("П000020028103");
	Структ.Вставить("П000020035903");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист02", Структ);
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Тогда
		
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
		
		Если СтрРазделить("229,231,235", ",", Ложь).Найти(ПоМесту) <> Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр(
			"ru = 'Заполнение Подраздела 1.1 по данным декларации не предусмотрено при коде места представления, равном %1';
			|en = 'Заполнение Подраздела 1.1 по данным декларации не предусмотрено при коде места представления, равном %1'"),
			ПоМесту);
			Сообщение.Сообщить();
			
		Иначе
			
			СформироватьРаздел1_1();
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			ВывестиДанныеВТабличныйДокумент("Раздел1_1", НовыеНомераСтрокМногоуровнегоРаздела);
			
		КонецЕсли;
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("ПризнакВключения");
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" Тогда
		
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
		
		ЭтоКвартальныйОтчет = СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
		ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если ПоМесту = "231" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Заполнение Подраздела 1.2 по данным декларации не предусмотрено при коде места представления, равном 231';
			|en = 'Заполнение Подраздела 1.2 по данным декларации не предусмотрено при коде места представления, равном 231'");
			Сообщение.Сообщить();
			
		ИначеЕсли НЕ ((ЭтоКвартальныйОтчет И (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9))
			ИЛИ ОтчетныйМесяц = 11) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru = 'Заполнение Подраздела 1.2 по данным декларации не предусмотрено при заданном на Титульном листе коде налогового (отчетного) периода';
			|en = 'Заполнение Подраздела 1.2 по данным декларации не предусмотрено при заданном на Титульном листе коде налогового (отчетного) периода'");
			Сообщение.Сообщить();
			
		Иначе
			
			СформироватьРаздел1_2();
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			ВывестиДанныеВТабличныйДокумент("Раздел1_2", НовыеНомераСтрокМногоуровнегоРаздела);
			
		КонецЕсли;
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("ПризнакВключения");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_1()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ИНН     = СокрЛП(ТабличныйДокумент.Область("ИНН").Значение);
		КПП     = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		ИНН     = СокрЛП(СтруктураДанныхТитульный.ИНН);
		КПП     = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	
	ЭтоОрганизацияКИК = ПоМесту = "238";
	ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
	
	ДекларацияЗаНалоговыйПериод = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
	
	Если СтрРазделить("229,231,235", ",", Ложь).Найти(ПоМесту) = Неопределено Тогда
		
		ПереченьОКТМО = Новый Массив;
		
		Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
		Листы09 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист09"]).Строки;
		
		Если ЭтоКонсолидированнаяГруппа Тогда
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_6 = Лист02.Строки[5].Строки;
				Для каждого Лист02_6 Из Листы02_6 Цикл
					ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
					Если ЗначениеЗаполнено(ОКТМО) И ПереченьОКТМО.Найти(ОКТМО) = Неопределено Тогда
						ПереченьОКТМО.Добавить(ОКТМО);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ДекларацияЗаНалоговыйПериод И ВеткаУдовлетворяющаяУсловиямПоиска(
				Листы09, Новый Структура("ПризнакВключения", "V")) <> Неопределено Тогда
				ПереченьОКТМО.Добавить("КИК");
			КонецЕсли;
			
			Если ПереченьОКТМО.Количество() = 0 Тогда
				ПереченьОКТМО.Добавить("");
			КонецЕсли;
			
		Иначе
			
			ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
			Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
				
				ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
				
				СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
				РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
				СтруктураПараметров);
				
				ОКТМО = СокрЛП(ОргСведения.ОКТМО);
				
			КонецЕсли;
			ПереченьОКТМО.Добавить(ОКТМО);
			
			Если ДекларацияПоГоловнойОрганизации Тогда
				
				Если ДекларацияЗаНалоговыйПериод И ВеткаУдовлетворяющаяУсловиямПоиска(
					Листы09, Новый Структура("ПризнакВключения", "V")) <> Неопределено Тогда
					ПереченьОКТМО.Добавить("КИК");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
		
		ОбъектОтчета.ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1_1");
		
		Раздел1_1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
		
		Ветка = Раздел1_1.Строки[0];
		
		Ветка.Данные.Вставить("ПризнакВключения", "V");
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР11М1];
		
		СтрокаМнЧ = ДанныеМнЧ.Строки[0];
		СтрокаМнЧ.Данные.Вставить("П00011М101003", ПереченьОКТМО[0]);
		
		Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
		
		СуммаНалогаВФедБюдж
		= СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020027003", Усл)
		- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020028003", Усл);
		
		Если ЭтоОрганизацияКИК Тогда
			
			Если ДекларацияЗаНалоговыйПериод Тогда
				
				СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
				
				СтрокаМнЧ.Данные.Вставить("П00011М104003"
				, СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б10023003")
				+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б20025003"));
				
				СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
				
			КонецЕсли;
			
		ИначеЕсли ДекларацияПоГоловнойОрганизации Тогда
			
			ЭтоПерваяСтрокаМнЧ = Истина;
			
			Для каждого ОКТМО Из ПереченьОКТМО Цикл
				
				Если ЭтоПерваяСтрокаМнЧ Тогда
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
				Иначе
					СтрокаМнЧ = НоваяСтрока_Раздел1_1(ДанныеМнЧ);
				КонецЕсли;
				
				Если СокрЛП(ОКТМО) = "КИК" Тогда
					
					СтрокаМнЧ.Данные.Вставить("П00011М101003", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
					СтрокаМнЧ.Данные.Вставить("П00011М104003"
					, СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б10023003")
					+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б20025003"));
					
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
					
				Иначе
					
					СуммаНалогаВБюджСубРФ = 0;
					
					ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
					Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_5 = Лист02.Строки[4].Строки;
						Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
							ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
						
						ЕстьЛист02_5_РС_1 = Ложь;
						Усл = Новый Структура("П000250000300", "1");
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
								ЕстьЛист02_5_РС_1 = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ЕстьЛист02_5_РС_1 Тогда
							
							Усл = Новый Структура("П000250000100,П000250000300",
							СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "1");
							
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
								+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250010003", Усл)
								- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250011003", Усл);
							КонецЦикла;
							
						Иначе
							
							Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
							СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "4", КПП);
							
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
								+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250010003", Усл)
								- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250011003", Усл);
							КонецЦикла;
							
						КонецЕсли;
						
					Иначе
						
						Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
						СуммаНалогаВБюджСубРФ
						= СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020027103", Усл)
						- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020028103", Усл);
						
					КонецЕсли;
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
					СтрокаМнЧ.Данные.Вставить("П00011М104003", Макс(0, СуммаНалогаВФедБюдж));
					СтрокаМнЧ.Данные.Вставить("П00011М105003", Макс(0, - СуммаНалогаВФедБюдж));
					
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
					СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
					СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
					
				КонецЕсли;
				
				ЭтоПерваяСтрокаМнЧ = Ложь;
				
			КонецЦикла;
			
		ИначеЕсли ЭтоОбособленноеПодразделение Тогда
			
			СуммаНалогаВБюджСубРФ = 0;
			
			Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
				+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250010003", Усл)
				- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250011003", Усл);
			КонецЦикла;
			
			СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ);
			
			СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
			СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
			СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
			
		ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
			
			ЭтоПерваяСтрокаМнЧ = Истина;
			
			Для каждого ОКТМО Из ПереченьОКТМО Цикл
				
				Если ЭтоПерваяСтрокаМнЧ Тогда
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
				Иначе
					СтрокаМнЧ = НоваяСтрока_Раздел1_1(ДанныеМнЧ);
				КонецЕсли;
				
				Если СокрЛП(ОКТМО) = "КИК" Тогда
					
					СтрокаМнЧ.Данные.Вставить("П00011М101003", СтруктураРеквизитовФормы.ОКТМОДляРазделов);
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КИК);
					СтрокаМнЧ.Данные.Вставить("П00011М104003"
					, СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б10023003")
					+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы09, "П009Б20025003"));
					
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ);
					
				Иначе
					
					ЭтоОКТМООтветственногоУчастника = Ложь;
					Если ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов Тогда
						Усл = Новый Структура("П000260000100,П000260000200,П000260000300", ИНН, КПП, ОКТМО);
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_6 = Лист02.Строки[5].Строки;
							Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_6, Усл) <> Неопределено Тогда
								ЭтоОКТМООтветственногоУчастника = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если НЕ ЭтоОКТМООтветственногоУчастника Тогда
						СуммаНалогаВФедБюдж = 0;
					КонецЕсли;
					
					СуммаНалогаВБюджСубРФ = 0;
					
					Усл = Новый Структура("П000260000300", ОКТМО);
					Для каждого Лист02 Из Листы02 Цикл
						Листы02_6 = Лист02.Строки[5].Строки;
						СуммаНалогаВБюджСубРФ = СуммаНалогаВБюджСубРФ
						+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_6, "П000260010003", Усл)
						- СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_6, "П000260011003", Усл);
					КонецЦикла;
					
					СтрокаМнЧ.Данные.Вставить("П00011М101003", ОКТМО);
					
					СтрокаМнЧ.Данные.Вставить("П00011М103003", СтруктураРеквизитовФормы.КБК_ФБ_КГН);
					СтрокаМнЧ.Данные.Вставить("П00011М104003", Макс(0, СуммаНалогаВФедБюдж));
					СтрокаМнЧ.Данные.Вставить("П00011М105003", Макс(0, - СуммаНалогаВФедБюдж));
					
					СтрокаМнЧ.Данные.Вставить("П00011М106003", СтруктураРеквизитовФормы.КБК_БСРФ_КГН);
					СтрокаМнЧ.Данные.Вставить("П00011М107003", Макс(0, СуммаНалогаВБюджСубРФ));
					СтрокаМнЧ.Данные.Вставить("П00011М108003", Макс(0, - СуммаНалогаВБюджСубРФ));
					
				КонецЕсли;
				
				ЭтоПерваяСтрокаМнЧ = Ложь;
				
			КонецЦикла;
			
		Иначе // некорректно заполненный отчет
			
			СтрокаМнЧ.Данные.Вставить("П00011М101003", "");
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_1, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_1"]);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел1_2()
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ИНН     = СокрЛП(ТабличныйДокумент.Область("ИНН").Значение);
		КПП     = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		ИНН     = СокрЛП(СтруктураДанныхТитульный.ИНН);
		КПП     = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	
	ЭтоКвартальныйОтчет
	= СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ПоМесту <> "231" И ((ЭтоКвартальныйОтчет И (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9))
		ИЛИ ОтчетныйМесяц = 11) Тогда
		
		ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
		ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
		ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
		
		Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
		
		ЗаполнятьРаздел1_2 = Ложь;
		
		Если ЭтоОбособленноеПодразделение Тогда
			
			Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
					ЗаполнятьРаздел1_2 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
			
			Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
			Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Усл) <> Неопределено Тогда
				ЗаполнятьРаздел1_2 = Истина;
			КонецЕсли;
			
		Иначе
			
			Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,06,07,08,14,15,16,17,18,19", ",", Ложь));
			Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02, Усл) <> Неопределено Тогда
				ЗаполнятьРаздел1_2 = Истина;
			КонецЕсли;
			
			Если НЕ ЗаполнятьРаздел1_2 Тогда
				
				Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_5 = Лист02.Строки[4].Строки;
					Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
						ЗаполнятьРаздел1_2 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнятьРаздел1_2 Тогда
			
			ПереченьОКТМО = Новый Массив;
			
			Если ЭтоКонсолидированнаяГруппа Тогда
				
				Для каждого Лист02 Из Листы02 Цикл
					Листы02_6 = Лист02.Строки[5].Строки;
					Для каждого Лист02_6 Из Листы02_6 Цикл
						ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
						Если ЗначениеЗаполнено(ОКТМО) И ПереченьОКТМО.Найти(ОКТМО) = Неопределено Тогда
							ПереченьОКТМО.Добавить(ОКТМО);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				Если ПереченьОКТМО.Количество() = 0 Тогда
					ПереченьОКТМО.Добавить("");
				КонецЕсли;
				
			Иначе
				
				ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
				Если НЕ ЗначениеЗаполнено(ОКТМО) Тогда
					
					ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
					
					СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
					СтруктураРеквизитовФормы.Организация, ДатаПодписи, ОргСведения);
					РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
					СтруктураПараметров);
					
					ОКТМО = СокрЛП(ОргСведения.ОКТМО);
					
				КонецЕсли;
				ПереченьОКТМО.Добавить(ОКТМО);
				
			КонецЕсли;
			
			СочетанияЗначений = Новый Массив;
			
			Для каждого ОКТМО Из ПереченьОКТМО Цикл
				
				Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
					СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
				ИначеЕсли ОтчетныйМесяц = 9 Тогда
					Если АвансовыеПлатежиРазличаются(ОКТМО) Тогда
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "24", ОКТМО));
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
					Иначе
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
					КонецЕсли;
				Иначе //ОтчетныйМесяц = 11
					Если ЕстьАвансовыеПлатежи(ОКТМО) Тогда
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "21", ОКТМО));
					Иначе
						СочетанияЗначений.Добавить(Новый Структура("КодКвартала, ОКТМО", "", ОКТМО));
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
			
			ОбъектОтчета.ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
			СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, "Раздел1_2");
			
			Раздел1_2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
			
			Ветка = Раздел1_2.Строки[0];
			
			Ветка.Данные.Вставить("ПризнакВключения", "V");
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР12М1];
			
			ЭтоПерваяСтрокаМнЧ = Истина;
			
			ЕстьЛист02_5_ЗаполненныйПоОП = Ложь;
			Усл = Новый Структура("П000250000300", СтрРазделить("2,3,4", ",", Ложь));
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
					ЕстьЛист02_5_ЗаполненныйПоОП = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого ТекСочетаниеЗначений Из СочетанияЗначений Цикл
				
				Если ЭтоПерваяСтрокаМнЧ Тогда
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
				Иначе
					СтрокаМнЧ = ДанныеМнЧ.Строки.Добавить();
					СтрокаМнЧ.Данные = Новый Структура;
					СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
				КонецЕсли;
				
				СтрокаМнЧ.Данные.Вставить("П00012М100103", ТекСочетаниеЗначений.КодКвартала);
				СтрокаМнЧ.Данные.Вставить("П00012М101003", ТекСочетаниеЗначений.ОКТМО);
				
				СтрокаМнЧ.Данные.Вставить("П00012М111003", ?(ЭтоКонсолидированнаяГруппа,
				СтруктураРеквизитовФормы.КБК_ФБ_КГН, СтруктураРеквизитовФормы.КБК_ФБ));
				СтрокаМнЧ.Данные.Вставить("П00012М112003", 0);
				СтрокаМнЧ.Данные.Вставить("П00012М113003", 0);
				СтрокаМнЧ.Данные.Вставить("П00012М114003", 0);
				
				СтрокаМнЧ.Данные.Вставить("П00012М121003", ?(ЭтоКонсолидированнаяГруппа,
				СтруктураРеквизитовФормы.КБК_БСРФ_КГН, СтруктураРеквизитовФормы.КБК_БСРФ));
				СтрокаМнЧ.Данные.Вставить("П00012М122003", 0);
				СтрокаМнЧ.Данные.Вставить("П00012М123003", 0);
				СтрокаМнЧ.Данные.Вставить("П00012М124003", 0);
				
				ВариантРасчета = Неопределено;
				Если ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 Тогда
					ВариантРасчета = 1;
				ИначеЕсли ОтчетныйМесяц = 9 Тогда
					ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, 1);
				Иначе //ОтчетныйМесяц = 11
					ВариантРасчета = ?(ТекСочетаниеЗначений.КодКвартала = "21", 2, Неопределено);
				КонецЕсли;
				
				ЭтоОКТМООтветственногоУчастника = Ложь;
				Если ЭтоКонсолидированнаяГруппа Тогда
					Если ТекСочетаниеЗначений.ОКТМО = СтруктураРеквизитовФормы.ОКТМОДляРазделов Тогда
						Усл = Новый Структура("П000260000100,П000260000200,П000260000300", ИНН, КПП, ТекСочетаниеЗначений.ОКТМО);
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_6 = Лист02.Строки[5].Строки;
							Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_6, Усл) <> Неопределено Тогда
								ЭтоОКТМООтветственногоУчастника = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				РазделяемаяСуммаНалогаВФедБюдж = 0;
				РазделяемаяСуммаНалогаВБюджСубРФ = 0;
				
				Если ВариантРасчета = 1 Тогда
					
					Если ДекларацияПоГоловнойОрганизации Тогда
						
						Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
						РазделяемаяСуммаНалогаВФедБюдж = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020030003", Усл);
						
						Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
							
							ЕстьЛист02_5_РС_1 = Ложь;
							Усл = Новый Структура("П000250000300", "1");
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
									ЕстьЛист02_5_РС_1 = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Если ЕстьЛист02_5_РС_1 Тогда
								Усл = Новый Структура("П000250000100,П000250000300",
								СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "1");
							Иначе
								Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
								СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "4", КПП);
							КонецЕсли;
							
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250012003", Усл);
							КонецЦикла;
							
						Иначе
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
							РазделяемаяСуммаНалогаВБюджСубРФ = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020031003", Усл);
							
						КонецЕсли;
						
					ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
						
						Если ЭтоОКТМООтветственногоУчастника Тогда
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020030003", Усл);
						КонецЕсли;
						
						РазделяемаяСуммаНалогаВБюджСубРФ = 0;
						Усл = Новый Структура("П000260000300", ТекСочетаниеЗначений.ОКТМО);
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_6 = Лист02.Строки[5].Строки;
							РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
							+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_6, "П000260012003", Усл);
						КонецЦикла;
						
					ИначеЕсли ЭтоОбособленноеПодразделение Тогда
						
						РазделяемаяСуммаНалогаВБюджСубРФ = 0;
						Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
							+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250012003", Усл);
						КонецЦикла;
						
					КонецЕсли;
					
				ИначеЕсли ВариантРасчета = 2 Тогда
					
					Если ДекларацияПоГоловнойОрганизации Тогда
						
						Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
						РазделяемаяСуммаНалогаВФедБюдж = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020033003", Усл);
						
						Если ЕстьЛист02_5_ЗаполненныйПоОП Тогда
							
							ЕстьЛист02_5_РС_1 = Ложь;
							Усл = Новый Структура("П000250000300", "1");
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Усл) <> Неопределено Тогда
									ЕстьЛист02_5_РС_1 = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							РазделяемаяСуммаНалогаВБюджСубРФ = 0;
							Если ЕстьЛист02_5_РС_1 Тогда
								Усл = Новый Структура("П000250000100,П000250000300",
								СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "1");
							Иначе
								Усл = Новый Структура("П000250000100,П000250000300,П000250000400",
								СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь), "4", КПП);
							КонецЕсли;
							Для каждого Лист02 Из Листы02 Цикл
								Листы02_5 = Лист02.Строки[4].Строки;
								РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
								+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250012103", Усл);
							КонецЦикла;
							
						Иначе
							
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
							РазделяемаяСуммаНалогаВБюджСубРФ = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020034003", Усл);
							
						КонецЕсли;
						
					ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
						
						Если ЭтоОКТМООтветственногоУчастника Тогда
							Усл = Новый Структура("П000020000100", СтрРазделить("01,03,04,15,16,17,19", ",", Ложь));
							РазделяемаяСуммаНалогаВФедБюдж = СуммаПоказателяПоВеткам(ЭтаФорма, Листы02, "П000020033003", Усл);
						КонецЕсли;
						
						РазделяемаяСуммаНалогаВБюджСубРФ = 0;
						Усл = Новый Структура("П000260000300", ТекСочетаниеЗначений.ОКТМО);
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_6 = Лист02.Строки[5].Строки;
							РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
							+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_6, "П000260012103", Усл);
						КонецЦикла;
						
					ИначеЕсли ЭтоОбособленноеПодразделение Тогда
						
						РазделяемаяСуммаНалогаВБюджСубРФ = 0;
						Усл = Новый Структура("П000250000100", СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь));
						Для каждого Лист02 Из Листы02 Цикл
							Листы02_5 = Лист02.Строки[4].Строки;
							РазделяемаяСуммаНалогаВБюджСубРФ = РазделяемаяСуммаНалогаВБюджСубРФ
							+ СуммаПоказателяПоВеткам(ЭтаФорма, Листы02_5, "П000250012103", Усл);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаМнЧ.Данные.Вставить("П00012М112003", ОкрЧФ(ЭтаФорма, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
				СтрокаМнЧ.Данные.Вставить("П00012М113003", ОкрЧФ(ЭтаФорма, Цел(РазделяемаяСуммаНалогаВФедБюдж / 3)));
				СтрокаМнЧ.Данные.Вставить("П00012М114003", РазделяемаяСуммаНалогаВФедБюдж
				- СтрокаМнЧ.Данные["П00012М112003"] - СтрокаМнЧ.Данные["П00012М113003"]);
				
				СтрокаМнЧ.Данные.Вставить("П00012М122003", ОкрЧФ(ЭтаФорма, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
				СтрокаМнЧ.Данные.Вставить("П00012М123003", ОкрЧФ(ЭтаФорма, Цел(РазделяемаяСуммаНалогаВБюджСубРФ / 3)));
				СтрокаМнЧ.Данные.Вставить("П00012М124003", РазделяемаяСуммаНалогаВБюджСубРФ
				- СтрокаМнЧ.Данные["П00012М122003"] - СтрокаМнЧ.Данные["П00012М123003"]);
				
				ЭтоПерваяСтрокаМнЧ = Ложь;
				
			КонецЦикла;
			
			РегламентированнаяОтчетность.ПоместитьВКэш(Раздел1_2, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1_2"]);
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АвансовыеПлатежиРазличаются(Знач ОКТМО = Неопределено)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		КПП_ГолОрг = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
		ПоМесту    = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		КПП_ГолОрг = СокрЛП(СтруктураДанныхТитульный.КПП);
		ПоМесту    = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
	КонецЕсли;
	ОКТМО_ГолОрг = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
	
	ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
	
	Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
	
	Если ДекларацияПоГоловнойОрганизации Тогда
		
		ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
		
		ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
		ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Для каждого Лист02_5 Из Листы02_5 Цикл
				ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
				ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
				КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
					ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
					ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
				
				Прервать;
				
			КонецЦикла;
		КонецЦикла;
		
		Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
				
				Стр300 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020030003"]);
				Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И Стр300 <> Стр330 Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр120 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012003"]);
					Стр121 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
				
				Стр290 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020029003"]);
				Стр300 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020030003"]);
				Стр310 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020031003"]);
				Стр320 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020032003"]);
				Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
				Стр340 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020034003"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
					И (Стр290 <> Стр320 ИЛИ Стр300 <> Стр330 ИЛИ Стр310 <> Стр340) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоОбособленноеПодразделение Тогда
		
		ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
		ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Для каждого Лист02_5 Из Листы02_5 Цикл
				ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
				ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
				КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
				
				Стр120 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012003"]);
				Стр121 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012103"]);
				
				Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
					ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
					ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И Стр120 <> Стр121 Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
		
		Если ЗначениеЗаполнено(ОКТМО) Тогда
			
			СуммаСтр120 = 0;
			СуммаСтр121 = 0;
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_6 = Лист02.Строки[5].Строки;
				Для каждого Лист02_6 Из Листы02_6 Цикл
					Лист02_6_ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
					
					Если ЗначениеЗаполнено(Лист02_6_ОКТМО) И Лист02_6_ОКТМО = ОКТМО Тогда
						СуммаСтр120 = СуммаСтр120 + ОкрЧФ(ЭтаФорма, Лист02_6.Данные["П000260012003"]);
						СуммаСтр121 = СуммаСтр121 + ОкрЧФ(ЭтаФорма, Лист02_6.Данные["П000260012103"]);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Если СуммаСтр120 <> СуммаСтр121 Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Если ОКТМО = ОКТМО_ГолОрг Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр300 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020030003"]);
					Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И Стр300 <> Стр330 Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьАвансовыеПлатежи(Знач ОКТМО = Неопределено)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ПоМесту    = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
		КПП_ГолОрг = СокрЛП(ТабличныйДокумент.Область("КПП").Значение);
	Иначе
		ПоМесту    = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
		КПП_ГолОрг = СокрЛП(СтруктураДанныхТитульный.КПП);
	КонецЕсли;
	ОКТМО_ГолОрг = СтруктураРеквизитовФормы.ОКТМОДляРазделов;
	
	ЭтоКонсолидированнаяГруппа = ПоМесту = "218";
	ЭтоОбособленноеПодразделение = (ПоМесту = "220" ИЛИ ПоМесту = "223");
	ДекларацияПоГоловнойОрганизации = НЕ (ЭтоКонсолидированнаяГруппа ИЛИ ЭтоОбособленноеПодразделение);
	
	Листы02 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]).Строки;
	
	Если ДекларацияПоГоловнойОрганизации Тогда
		
		ЕстьЛист02_5_ЗаполненныйПоУсловию = Ложь;
		
		ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
		ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Для каждого Лист02_5 Из Листы02_5 Цикл
				ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
				ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
				КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
					ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
					ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЕстьЛист02_5_ЗаполненныйПоУсловию = Истина;
				
				Прервать;
				
			КонецЦикла;
		КонецЦикла;
		
		Если ЕстьЛист02_5_ЗаполненныйПоУсловию Тогда
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
				
				Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И ЗначениеЗаполнено(Стр330) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
			ВозможныеПризнакиРС  = СтрРазделить("1,4", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_5 = Лист02.Строки[4].Строки;
				Для каждого Лист02_5 Из Листы02_5 Цикл
					ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
					ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
					КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
					
					Стр121 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012103"]);
					
					Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
						ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
						ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			
			ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
			
			Для каждого Лист02 Из Листы02 Цикл
				ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
				
				Стр320 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020032003"]);
				Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
				Стр340 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020034003"]);
				
				Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено
					И (ЗначениеЗаполнено(Стр320) ИЛИ ЗначениеЗаполнено(Стр330) ИЛИ ЗначениеЗаполнено(Стр340)) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоОбособленноеПодразделение Тогда
		
		ВозможныеПризнакиНПЛ = СтрРазделить("01,03,06,07,08,14,15,16,18", ",", Ложь);
		ВозможныеПризнакиРС  = СтрРазделить("2,3,4", ",", Ложь);
		
		Для каждого Лист02 Из Листы02 Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Для каждого Лист02_5 Из Листы02_5 Цикл
				ПризнакНПЛ = СокрЛП(Лист02_5.Данные["П000250000100"]);
				ПризнакРС  = СокрЛП(Лист02_5.Данные["П000250000300"]);
				КПП        = СокрЛП(Лист02_5.Данные["П000250000400"]);
				
				Стр121 = ОкрЧФ(ЭтаФорма, Лист02_5.Данные["П000250012103"]);
				
				Если НЕ (ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) = Неопределено
					ИЛИ ВозможныеПризнакиРС.Найти(ПризнакРС) = Неопределено
					ИЛИ (ПризнакРС = "4" И КПП <> КПП_ГолОрг)) И ЗначениеЗаполнено(Стр121) Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЭтоКонсолидированнаяГруппа Тогда
		
		Если ЗначениеЗаполнено(ОКТМО) Тогда
			
			СуммаСтр121 = 0;
			
			Для каждого Лист02 Из Листы02 Цикл
				Листы02_6 = Лист02.Строки[5].Строки;
				Для каждого Лист02_6 Из Листы02_6 Цикл
					Лист02_6_ОКТМО = СокрЛП(Лист02_6.Данные["П000260000300"]);
					
					Если ЗначениеЗаполнено(Лист02_6_ОКТМО) И Лист02_6_ОКТМО = ОКТМО Тогда
						СуммаСтр121 = СуммаСтр121 + ОкрЧФ(ЭтаФорма, Лист02_6.Данные["П000260012103"]);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СуммаСтр121) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Если ОКТМО = ОКТМО_ГолОрг Тогда
				
				ВозможныеПризнакиНПЛ = СтрРазделить("01,03,04,15,16,17,19", ",", Ложь);
				
				Для каждого Лист02 Из Листы02 Цикл
					ПризнакНПЛ = СокрЛП(Лист02.Данные["П000020000100"]);
					
					Стр330 = ОкрЧФ(ЭтаФорма, Лист02.Данные["П000020033003"]);
					
					Если ВозможныеПризнакиНПЛ.Найти(ПризнакНПЛ) <> Неопределено И ЗначениеЗаполнено(Стр330) Тогда
						
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция НоваяСтрока_Раздел1_1(ДанныеМногострочнойЧасти)
	
	СтрокаМнЧ = ДанныеМногострочнойЧасти.Строки.Добавить();
	СтрокаМнЧ.Данные = Новый Структура;
	СтрокаМнЧ.Данные.Вставить("П00011М101003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М103003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М104003", 0);
	СтрокаМнЧ.Данные.Вставить("П00011М105003", 0);
	СтрокаМнЧ.Данные.Вставить("П00011М106003", "");
	СтрокаМнЧ.Данные.Вставить("П00011М107003", 0);
	СтрокаМнЧ.Данные.Вставить("П00011М108003", 0);
	СтрокаМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
	
	Возврат СтрокаМнЧ;
	
КонецФункции
	
#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
									  			  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляСравнения = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляЗагрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	Если СтруктураРеквизитовФормы.мПериодичность = СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц Тогда
		СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
	Иначе
		СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	КонецЕсли;
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	ТекстВыгрузки = Новый Массив;
	ТекстВыгрузки.Добавить(РезультатВыгрузки);
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													  ПараметрыВыгрузки,
													  ДеревоВыгрузки,
													  ЭтаФорма,
													  СтруктураРеквизитовФормы,
													  мСтруктураМногоуровневыхРазделов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  мДанныеОтчета,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтаФорма,
								  СтруктураРеквизитовФормы,
								  мСтруктураМногоуровневыхРазделов);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ТекущийРазделОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
			|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
			|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
			|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыеРазделы(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02_6а" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(6);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Лист02_") Тогда
		ИменаПодчиненныхРазделов = мСтруктураМногоуровневыхРазделов["Лист02"]["ИменаПодчиненныхРазделов"];
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(
		ИменаПодчиненныхРазделов.Найти(СтруктураРеквизитовФормы.НаимТекущегоРаздела) + 1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить(
	"ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
	"ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет И СтруктураРеквизитовФормы.Свойство("ПризнакВключения_Снятие") Тогда
		
		Обл = ТабличныйДокумент.Области.Найти("ПризнакВключения");
		Если Обл <> Неопределено Тогда
			Обл.Значение = "V";
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Удалить("ПризнакВключения_Снятие");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		Если ИмяСтраницы = "Лист02" Тогда
			
			ПоместитьИзАктивногоЛиста02ВПриложенияКЛисту02НаследуемыеЗначения();
			
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Если СтруктураРеквизитовФормы.Свойство("ПризнакВключения_Снятие")
		И ТабличныйДокумент.Области.Найти("ПризнакВключения") <> Неопределено Тогда
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область("ПризнакВключения");
		
		СтруктураРеквизитовФормы.Удалить("ПризнакВключения_Снятие");
		
	Иначе
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.';
		|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
	  <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
	 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
		|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", СтруктураДанныхТитульный);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма",					СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов",					ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати",						ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы",		СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц",
		ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
	
	ОбъектОтчета(ЭтотОбъект.ИмяФормы).ПечатныйБланк(ПараметрыПечати);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапуска = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаНачалаРасширенногоПериодаОтчета", ДатаНачалаРасширенногоПериодаОтчета());
	ПараметрыОтчета.Вставить("Периодичность",                       СтруктураРеквизитовФормы.мПериодичность);
	ПараметрыОтчета.Вставить("ДатаПодписи",                         ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы",        ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ИНН",                                 СтруктураДанныхТитульный.ИНН);
	ПараметрыОтчета.Вставить("КПП",                                 СтруктураДанныхТитульный.КПП);
	ПараметрыОтчета.Вставить("НомерКорректировки",                  СтруктураДанныхТитульный.НомерКорректировки);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",           СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
			Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока
				= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.';
											|en = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	Контейнер = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(Контейнер) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхТитульный = Контейнер["Титульный"];
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Лист02_") Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Лист02";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьЗагруженныеДанные();
	
	// Заполнение стр.160, стр.170 Листа 02 не предусмотрено, если есть обособленные подразделения.
	// Их обнуление выполняется в "ОбработатьНаличиеОтсутствиеОбособленныхПодразделений".
	//
	ОбработатьНаличиеОтсутствиеОбособленныхПодразделений(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОчиститьЗначенияПоказателейНеЗаполняемыхПоУсловию();
	
	РасчетНаСервере();
	
	СформироватьРаздел1_2();
	СформироватьРаздел1_1();
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженныеДанные()
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ВыполненоУсловие1 = СтруктураДанныхТитульный.ПоМесту = "220" ИЛИ СтруктураДанныхТитульный.ПоМесту = "223";
	ВыполненоУсловие2 = СтруктураДанныхТитульный.ПоМесту = "231";
	ВыполненоУсловие3 = НЕ (ОтчетныйМесяц = 3 ИЛИ ОтчетныйМесяц = 6 ИЛИ ОтчетныйМесяц = 9 ИЛИ ОтчетныйМесяц = 12);
	
	Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 ИЛИ ВыполненоУсловие3 Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			
			Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 Тогда
				
				Для каждого Пок Из Лист02.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						Лист02.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						Лист02.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Лист02_1 = Лист02.Строки[0].Строки[0];
			Для каждого Пок Из Лист02_1.Данные Цикл
				Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
					Лист02_1.Данные.Вставить(Пок.Ключ, 0);
				Иначе
					Лист02_1.Данные.Вставить(Пок.Ключ, "");
				КонецЕсли;
			КонецЦикла;
			
			Лист02_2 = Лист02.Строки[1].Строки[0];
			Для каждого Пок Из Лист02_2.Данные Цикл
				Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
					Лист02_2.Данные.Вставить(Пок.Ключ, 0);
				Иначе
					Лист02_2.Данные.Вставить(Пок.Ключ, "");
				КонецЕсли;
			КонецЦикла;
			
			Лист02_3 = Лист02.Строки[2].Строки[0];
			Для каждого Пок Из Лист02_3.Данные Цикл
				Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
					Лист02_3.Данные.Вставить(Пок.Ключ, 0);
				Иначе
					Лист02_3.Данные.Вставить(Пок.Ключ, "");
				КонецЕсли;
			КонецЦикла;
			
			Если ВыполненоУсловие1 ИЛИ ВыполненоУсловие2 Тогда
				
				Для каждого Лист02_4 Из Лист02.Строки[3].Строки Цикл
					Для каждого Пок Из Лист02_4.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							Лист02_4.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							Лист02_4.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
					ДанныеМнЧ = Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
					Пока ДанныеМнЧ.Строки.Количество() > 1 Цикл
						ДанныеМнЧ.Строки.Удалить(0);
					КонецЦикла;
					СтрокаМнЧ = ДанныеМнЧ.Строки[0];
					Для каждого Пок Из СтрокаМнЧ.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							СтрокаМнЧ.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							СтрокаМнЧ.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ВыполненоУсловие2 Тогда
				
				Для каждого Лист02_5 Из Лист02.Строки[4].Строки Цикл
					Для каждого Пок Из Лист02_5.Данные Цикл
						Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
							Лист02_5.Данные.Вставить(Пок.Ключ, 0);
						Иначе
							Лист02_5.Данные.Вставить(Пок.Ключ, "");
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
	КонецЕсли;
	
	ОчиститьПриложения4КЛисту02НеВключенныеВСоставОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаНачалаРасширенногоПериодаОтчета", ДатаНачалаРасширенногоПериодаОтчета());
	ПараметрыОтчета.Вставить("ИмяРаздела",                          СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ПараметрыОтчета.Вставить("КоординатыСтраницыРаздела",           СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы),
	ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаСервере
Функция ДатаНачалаРасширенногоПериодаОтчета()
	
	ДатаРегистрацииОрганизации
	= РегламентированнаяОтчетность.ДатаРегистрацииОрганизации(СтруктураРеквизитовФормы.Организация);
	
	ПервыйНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
	СтруктураРеквизитовФормы.Организация, ДатаРегистрацииОрганизации,
	Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
	КонецПервогоНалоговогоПериода = КонецДня(ПервыйНалоговыйПериод.Конец);
	
	Если КонецПервогоНалоговогоПериода >= КонецГода('20171231')
		И КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = КонецПервогоНалоговогоПериода Тогда
		
		Возврат НачалоДня(Мин(ПервыйНалоговыйПериод.Начало, ПервыйНалоговыйПериод.Период));
		
	КонецЕсли;
	
	Возврат НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
КонецФункции

&НаСервере
Процедура ОчиститьПриложения4КЛисту02НеВключенныеВСоставОтчета()
	
	// Особая обработка результата автозаполнения.
	//
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
	Для каждого Лист02 Из ДеревоДанных.Строки Цикл
		
		Для каждого Лист02_4 Из Лист02.Строки[3].Строки Цикл
			
			Если НЕ ЗначениеЗаполнено(Лист02_4.Данные["ПризнакВключения"]) Тогда
				
				Для каждого Пок Из Лист02_4.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						Лист02_4.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						Лист02_4.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧ = Лист02_4.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ024М1];
				Пока ДанныеМнЧ.Строки.Количество() > 1 Цикл
					ДанныеМнЧ.Строки.Удалить(0);
				КонецЦикла;
				СтрокаМнЧ = ДанныеМнЧ.Строки[0];
				Для каждого Пок Из СтрокаМнЧ.Данные Цикл
					Если ТипЗнч(Пок.Значение) = Тип("Число") Тогда
						СтрокаМнЧ.Данные.Вставить(Пок.Ключ, 0);
					Иначе
						СтрокаМнЧ.Данные.Вставить(Пок.Ключ, "");
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;

	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"		, 0);
	ДанныеКС.Вставить("КолНеОшибок"		, 0);
	ДанныеКС.Вставить("Результат"		, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"			, Истина);;
	ДанныеКС.Вставить("Отчет"			, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	ДанныеКС.Вставить("ГодОтчета"		, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"		, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОкончания"	, ДанныеКС.Отчет.ДатаОкончания);
	
	СформироватьСтруктуруДанныхКС();
	СформироватьСлужебныеДанные();
	
	ДанныеКС.Вставить("КодПоМесту"		, ДанныеКС.Титульный.ПоМесту);
	ДанныеКС.Вставить("ОтчетЗаКвартал"	, ДанныеКС.МесОтчета % 3 = 0);
	ДанныеКС.Вставить("Периодичность"	, ?(СтруктураРеквизитовФормы.мПериодичность = 
		СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц, 1, 3));
	ДанныеКС.Вставить("ЭтоГоловная"		, КодНайден(ДанныеКС.КодПоМесту, "214,215,216,225,226,228,230,234,236,237,239,246,249"));
	ДанныеКС.Вставить("ЭтоОбособленное"	, КодНайден(ДанныеКС.КодПоМесту, "220,223"));
	ДанныеКС.Вставить("ПоМесту218"		, КодНайден(ДанныеКС.КодПоМесту, "218"));
	ДанныеКС.Вставить("ЭтоГоловнаяБезОП", ДанныеКС.ЭтоГоловная И НЕ ДанныеКС.РазделЗаполнен_Лист02_5);
	ДанныеКС.Вставить("ЭтоГоловнаяСОП"	, ДанныеКС.ЭтоГоловная И ДанныеКС.РазделЗаполнен_Лист02_5);
	ДанныеКС.Вставить("КПП"				, ДанныеКС.Титульный.КПП);
	
	// Проверки Раздела 1.1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	ПроверкаКС_1_06();
	
	// Проверки Раздела 1.2
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2_доп();
	
	// Проверки Раздела 1.3
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	ПроверкаКС_1_22();
	
	// Проверки Листа 02
	ПроверкаКС_1_23();
	ПроверкаКС_1_24();
	ПроверкаКС_1_25();
	ПроверкаКС_1_26();
	ПроверкаКС_1_27();
	ПроверкаКС_1_28();
	ПроверкаКС_1_29();
	ПроверкаКС_1_30();
	ПроверкаКС_1_31();
	ПроверкаКС_1_32();
	ПроверкаКС_1_33();
	ПроверкаКС_1_34();
	ПроверкаКС_1_35();
	ПроверкаКС_1_36();
	ПроверкаКС_1_37();
	ПроверкаКС_1_38();
	ПроверкаКС_1_39();
	ПроверкаКС_1_40();
	ПроверкаКС_1_41();
	ПроверкаКС_1_42();
	ПроверкаКС_1_43();
	ПроверкаКС_1_44();
	ПроверкаКС_1_45();
	ПроверкаКС_1_46();
	ПроверкаКС_1_47();
	ПроверкаКС_1_48();
	ПроверкаКС_1_49();
	ПроверкаКС_1_50();
	ПроверкаКС_1_51();
	ПроверкаКС_1_52();
	ПроверкаКС_1_53();
	ПроверкаКС_1_54();
	ПроверкаКС_1_55();
	ПроверкаКС_1_56();
	ПроверкаКС_1_57();
	ПроверкаКС_1_58();
	ПроверкаКС_1_59();
	ПроверкаКС_1_60();
	ПроверкаКС_1_61();
	ПроверкаКС_1_62();
	ПроверкаКС_1_63();
	ПроверкаКС_1_64();
	ПроверкаКС_1_65();
	ПроверкаКС_1_66();
	ПроверкаКС_1_67();
	ПроверкаКС_1_68();
	ПроверкаКС_1_69();
	ПроверкаКС_1_70();
	ПроверкаКС_1_71();
	ПроверкаКС_1_72();
	ПроверкаКС_1_73();
	ПроверкаКС_1_74();
	ПроверкаКС_1_75();
	ПроверкаКС_1_76();
	ПроверкаКС_1_77();
	ПроверкаКС_1_78();
	ПроверкаКС_1_79();
	ПроверкаКС_1_80();
	ПроверкаКС_1_81();
	
	// Проверки Приложения 1
	ПроверкаКС_1_82();
	ПроверкаКС_1_83();
	ПроверкаКС_1_84();
	ПроверкаКС_1_85();
	
	// Проверки Приложения 2
	ПроверкаКС_1_86();
	ПроверкаКС_1_87();
	ПроверкаКС_1_88();
	ПроверкаКС_1_89();
	ПроверкаКС_1_90();
	ПроверкаКС_1_91();
	ПроверкаКС_1_92();
	ПроверкаКС_1_93();
	ПроверкаКС_1_94();
	ПроверкаКС_1_95();
	ПроверкаКС_1_96();
	ПроверкаКС_1_97();
	ПроверкаКС_1_98();
	ПроверкаКС_1_99();
	ПроверкаКС_1_100();
	
	// Проверки Приложения 3
	ПроверкаКС_1_101();
	ПроверкаКС_1_102();
	ПроверкаКС_1_103();
	ПроверкаКС_1_104();
	
	// Проверки Приложения 4
	ПроверкаКС_1_105();
	ПроверкаКС_1_106();
	ПроверкаКС_1_107();
	ПроверкаКС_1_108();
	ПроверкаКС_1_109();
	ПроверкаКС_1_110();
	ПроверкаКС_1_111();
	ПроверкаКС_1_112();
	ПроверкаКС_1_113();
	ПроверкаКС_1_114();
	ПроверкаКС_1_115();
	ПроверкаКС_1_116();
	
	// Проверки Приложения 5
	ПроверкаКС_1_117();
	ПроверкаКС_1_118();
	ПроверкаКС_1_119();
	ПроверкаКС_1_120();
	ПроверкаКС_1_121();
	ПроверкаКС_1_122();
	ПроверкаКС_1_123();
	ПроверкаКС_1_124();
	ПроверкаКС_1_125();
	ПроверкаКС_1_126();
	ПроверкаКС_1_127();
	ПроверкаКС_1_128();
	ПроверкаКС_1_129();
	ПроверкаКС_1_130();
	ПроверкаКС_1_131();
	ПроверкаКС_1_132();
	ПроверкаКС_1_133();
	ПроверкаКС_1_134();
	ПроверкаКС_1_135();
	
	// Проверки Нерегламентные
	ПроверкаКС_1_01_доп();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по налогу на прибыль организаций");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2019Кв4");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// Проверки Раздела 1.1
	ПроверкаКС_1_01();
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04();
	ПроверкаКС_1_05();
	ПроверкаКС_1_06();
	
	// Проверки Раздела 1.2
	ПроверкаКС_1_07();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2_доп();
	
	// Проверки Раздела 1.3
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	ПроверкаКС_1_22();
	
	// Проверки Листа 02
	ПроверкаКС_1_23();
	ПроверкаКС_1_24();
	ПроверкаКС_1_25();
	ПроверкаКС_1_26();
	ПроверкаКС_1_27();
	ПроверкаКС_1_28();
	ПроверкаКС_1_29();
	ПроверкаКС_1_30();
	ПроверкаКС_1_31();
	ПроверкаКС_1_32();
	ПроверкаКС_1_33();
	ПроверкаКС_1_34();
	ПроверкаКС_1_35();
	ПроверкаКС_1_36();
	ПроверкаКС_1_37();
	ПроверкаКС_1_38();
	ПроверкаКС_1_39();
	ПроверкаКС_1_40();
	ПроверкаКС_1_41();
	ПроверкаКС_1_42();
	ПроверкаКС_1_43();
	ПроверкаКС_1_44();
	ПроверкаКС_1_45();
	ПроверкаКС_1_46();
	ПроверкаКС_1_47();
	ПроверкаКС_1_48();
	ПроверкаКС_1_49();
	ПроверкаКС_1_50();
	ПроверкаКС_1_51();
	ПроверкаКС_1_52();
	ПроверкаКС_1_53();
	ПроверкаКС_1_54();
	ПроверкаКС_1_55();
	ПроверкаКС_1_56();
	ПроверкаКС_1_57();
	ПроверкаКС_1_58();
	ПроверкаКС_1_59();
	ПроверкаКС_1_60();
	ПроверкаКС_1_61();
	ПроверкаКС_1_62();
	ПроверкаКС_1_63();
	ПроверкаКС_1_64();
	ПроверкаКС_1_65();
	ПроверкаКС_1_66();
	ПроверкаКС_1_67();
	ПроверкаКС_1_68();
	ПроверкаКС_1_69();
	ПроверкаКС_1_70();
	ПроверкаКС_1_71();
	ПроверкаКС_1_72();
	ПроверкаКС_1_73();
	ПроверкаКС_1_74();
	ПроверкаКС_1_75();
	ПроверкаКС_1_76();
	ПроверкаКС_1_77();
	ПроверкаКС_1_78();
	ПроверкаКС_1_79();
	ПроверкаКС_1_80();
	ПроверкаКС_1_81();
	
	// Проверки Приложения 1
	ПроверкаКС_1_82();
	ПроверкаКС_1_83();
	ПроверкаКС_1_84();
	ПроверкаКС_1_85();
	
	// Проверки Приложения 2
	ПроверкаКС_1_86();
	ПроверкаКС_1_87();
	ПроверкаКС_1_88();
	ПроверкаКС_1_89();
	ПроверкаКС_1_90();
	ПроверкаКС_1_91();
	ПроверкаКС_1_92();
	ПроверкаКС_1_93();
	ПроверкаКС_1_94();
	ПроверкаКС_1_95();
	ПроверкаКС_1_96();
	ПроверкаКС_1_97();
	ПроверкаКС_1_98();
	ПроверкаКС_1_99();
	ПроверкаКС_1_100();
	
	// Проверки Приложения 3
	ПроверкаКС_1_101();
	ПроверкаКС_1_102();
	ПроверкаКС_1_103();
	ПроверкаКС_1_104();
	
	// Проверки Приложения 4
	ПроверкаКС_1_105();
	ПроверкаКС_1_106();
	ПроверкаКС_1_107();
	ПроверкаКС_1_108();
	ПроверкаКС_1_109();
	ПроверкаКС_1_110();
	ПроверкаКС_1_111();
	ПроверкаКС_1_112();
	ПроверкаКС_1_113();
	ПроверкаКС_1_114();
	ПроверкаКС_1_115();
	ПроверкаКС_1_116();
	
	// Проверки Приложения 5
	ПроверкаКС_1_117();
	ПроверкаКС_1_118();
	ПроверкаКС_1_119();
	ПроверкаКС_1_120();
	ПроверкаКС_1_121();
	ПроверкаКС_1_122();
	ПроверкаКС_1_123();
	ПроверкаКС_1_124();
	ПроверкаКС_1_125();
	ПроверкаКС_1_126();
	ПроверкаКС_1_127();
	ПроверкаКС_1_128();
	ПроверкаКС_1_129();
	ПроверкаКС_1_130();
	ПроверкаКС_1_131();
	ПроверкаКС_1_132();
	ПроверкаКС_1_133();
	ПроверкаКС_1_134();
	ПроверкаКС_1_135();
	
	// Проверки Нерегламентные
	ПроверкаКС_1_01_доп();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСтруктуруДанныхКС()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИсходнаяСтруктура = ОбъектОтчета.СохраненныеДанныеОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма, 
		СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
		
	ДанныеКС.Вставить("Титульный", ОбщегоНазначения.СкопироватьРекурсивно(
		ИсходнаяСтруктура.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
		
	Для каждого Раздел Из ИсходнаяСтруктура.ДанныеМногоуровневыхРазделов Цикл
		
		ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
		МассивСтраниц = Новый Массив;
		РазделЗаполнен = Ложь;
		РазделЗаполнен_Лист02_5 = Ложь;
		
		Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
				Новый Структура("Наименование, Уровень", Раздел.Ключ, 1),
				Новый Структура("Уровень", ""));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			РазделЗаполнен = РазделЗаполнен ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.ПризнакВключения);
			
			Если Раздел.Ключ = "Лист02" Тогда
				РазделЗаполнен_Лист02_5 = РазделЗаполнен_Лист02_5 ИЛИ ДанныеСтраницы.РазделЗаполнен_Лист02_5;
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
		ДанныеКС.Вставить("РазделЗаполнен_" + Раздел.Ключ, РазделЗаполнен);
		
		Если Раздел.Ключ = "Лист02" Тогда
			ДанныеКС.Вставить("РазделЗаполнен_Лист02_5", РазделЗаполнен_Лист02_5);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКС.Вставить("Раздел1_1"	, ДанныеКС.Раздел1_1[0]);
	ДанныеКС.Вставить("Раздел1_2"	, ДанныеКС.Раздел1_2[0]);
	ДанныеКС.Вставить("Раздел1_3"	, ДанныеКС.Раздел1_3[0]);
	ДанныеКС.Вставить("Лист06"		, ДанныеКС.Лист06[0]);
	ДанныеКС.Вставить("Лист07"		, ДанныеКС.Лист07[0]);
	ДанныеКС.Вставить("Приложение1"	, ДанныеКС.Приложение1[0]);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	ПредставлениеРазделов.Вставить("Р11", "Раздела 1.1");
	ПредставлениеРазделов.Вставить("Р12", "Раздела 1.2");
	ПредставлениеРазделов.Вставить("Р13", "Раздела 1.3");
	ПредставлениеРазделов.Вставить("Л02", "Листа 02");
	ПредставлениеРазделов.Вставить("П21", "Приложения 1 к Листу 02");
	ПредставлениеРазделов.Вставить("П22", "Приложения 2 к Листу 02");
	ПредставлениеРазделов.Вставить("П23", "Приложения 3 к Листу 02");
	ПредставлениеРазделов.Вставить("П24", "Приложения 4 к Листу 02");
	ПредставлениеРазделов.Вставить("П25", "Приложения 5 к Листу 02");
	ПредставлениеРазделов.Вставить("П26", "Приложения 6 к Листу 02");
	ПредставлениеРазделов.Вставить("П6А", "Приложения 6а к Листу 02");
	ПредставлениеРазделов.Вставить("ПА6", "Приложения 6б к Листу 02 (Раздел А)");
	ПредставлениеРазделов.Вставить("ПБ6", "Приложения 6б к Листу 02 (Раздел Б)");
	ПредставлениеРазделов.Вставить("П7А", "Приложения 7 к Листу 02 (Раздел А)");
	ПредставлениеРазделов.Вставить("П7Б", "Приложения 7 к Листу 02 (Раздел Б)");
	ПредставлениеРазделов.Вставить("П7В", "Приложения 7 к Листу 02 (Раздел В)");
	ПредставлениеРазделов.Вставить("П7Г", "Приложения 7 к Листу 02 (Раздел Г)");
	ПредставлениеРазделов.Вставить("Л3А", "Листа 03 (Раздел А)");
	ПредставлениеРазделов.Вставить("Л3Б", "Листа 03 (Раздел Б)");
	ПредставлениеРазделов.Вставить("Л04", "Листа 04");
	ПредставлениеРазделов.Вставить("Л05", "Листа 05");
	ПредставлениеРазделов.Вставить("Л06", "Листа 06");
	ПредставлениеРазделов.Вставить("Л07", "Листа 07");
	ПредставлениеРазделов.Вставить("Л08", "Листа 08");
	ПредставлениеРазделов.Вставить("Л09", "Листа 09");
	ПредставлениеРазделов.Вставить("ПР1", "Приложения 1");
	ПредставлениеРазделов.Вставить("ПР2", "Приложения 2");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	РазделыПоказателей.Вставить("Р11", "Раздел1_1");
	РазделыПоказателей.Вставить("Р12", "Раздел1_2");
	РазделыПоказателей.Вставить("Р13", "Раздел1_3");
	РазделыПоказателей.Вставить("Л02", "Лист02");
	РазделыПоказателей.Вставить("П21", "Лист02_1");
	РазделыПоказателей.Вставить("П22", "Лист02_2");
	РазделыПоказателей.Вставить("П23", "Лист02_3");
	РазделыПоказателей.Вставить("П24", "Лист02_4");
	РазделыПоказателей.Вставить("П25", "Лист02_5");
	РазделыПоказателей.Вставить("П26", "Лист02_6");
	РазделыПоказателей.Вставить("П6А", "Лист02_6а");
	РазделыПоказателей.Вставить("ПА6", "Лист02_6бА");
	РазделыПоказателей.Вставить("ПБ6", "Лист02_6бБ");
	РазделыПоказателей.Вставить("П7А", "Лист02_7А");
	РазделыПоказателей.Вставить("П7Б", "Лист02_7Б");
	РазделыПоказателей.Вставить("П7В", "Лист02_7В)");
	РазделыПоказателей.Вставить("П7Г", "Лист02_7Г)");
	РазделыПоказателей.Вставить("Л3А", "Лист03А)");
	РазделыПоказателей.Вставить("Л3Б", "Лист03Б)");
	РазделыПоказателей.Вставить("Л04", "Лист04");
	РазделыПоказателей.Вставить("Л05", "Лист05");
	РазделыПоказателей.Вставить("Л06", "Лист06");
	РазделыПоказателей.Вставить("Л07", "Лист07");
	РазделыПоказателей.Вставить("Л08", "Лист08");
	РазделыПоказателей.Вставить("Л09", "Лист09");
	РазделыПоказателей.Вставить("ПР1", "Приложение1");
	РазделыПоказателей.Вставить("ПР2", "Приложение2");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	МногостраничныеРазделы = Новый Массив;
	МногостраничныеРазделы.Добавить("Л02");
	МногостраничныеРазделы.Добавить("П24");
	МногостраничныеРазделы.Добавить("П25");
	МногостраничныеРазделы.Добавить("П26");
	МногостраничныеРазделы.Добавить("П6А");
	МногостраничныеРазделы.Добавить("ПБ6");
	МногостраничныеРазделы.Добавить("П7А");
	МногостраничныеРазделы.Добавить("П7Б");
	МногостраничныеРазделы.Добавить("П7В");
	МногостраничныеРазделы.Добавить("П7Г");
	МногостраничныеРазделы.Добавить("Л3А");
	МногостраничныеРазделы.Добавить("Л3Б");
	МногостраничныеРазделы.Добавить("Л04");
	МногостраничныеРазделы.Добавить("Л05");
	МногостраничныеРазделы.Добавить("Л08");
	МногостраничныеРазделы.Добавить("Л09");
	МногостраничныеРазделы.Добавить("ПР2");
	
	ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р11");
	ЦелочисленныеРазделы.Добавить("Р12");
	ЦелочисленныеРазделы.Добавить("Р13");
	ЦелочисленныеРазделы.Добавить("Л02");
	ЦелочисленныеРазделы.Добавить("П21");
	ЦелочисленныеРазделы.Добавить("П22");
	ЦелочисленныеРазделы.Добавить("П23");
	ЦелочисленныеРазделы.Добавить("П24");
	ЦелочисленныеРазделы.Добавить("П25");
	ЦелочисленныеРазделы.Добавить("П26");
	ЦелочисленныеРазделы.Добавить("П6А");
	ЦелочисленныеРазделы.Добавить("ПА6");
	ЦелочисленныеРазделы.Добавить("ПБ6");
	ЦелочисленныеРазделы.Добавить("П7А");
	ЦелочисленныеРазделы.Добавить("П7Б");
	ЦелочисленныеРазделы.Добавить("П7В");
	ЦелочисленныеРазделы.Добавить("П7Г");
	ЦелочисленныеРазделы.Добавить("Л3А");
	ЦелочисленныеРазделы.Добавить("Л3Б");
	ЦелочисленныеРазделы.Добавить("Л04");
	ЦелочисленныеРазделы.Добавить("Л05");
	ЦелочисленныеРазделы.Добавить("Л06");
	ЦелочисленныеРазделы.Добавить("Л07");
	ЦелочисленныеРазделы.Добавить("Л08");
	ЦелочисленныеРазделы.Добавить("Л09");
	ЦелочисленныеРазделы.Добавить("ПР1");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	СоответствиеСписков = Новый Соответствие;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)
	
	Если НЕ ЗначениеЗаполнено(ВходящаяМнЧасть.Уровень) Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
		Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
			
			НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
			СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
				МнЧасть.Значение.Строки.Количество());
			Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
				СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
					ПоказательСтроки.Значение);
			КонецЦикла;
			
			Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
				ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
					Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
			КонецЕсли;
				
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		Если ВходящийРаздел.Наименование = "Лист02" И ВходящийРаздел.Уровень = 1 Тогда
			Для каждого ПриложениеКЛисту02 Из СтруктураИсточник.Строки Цикл
				
				ИндексПриложения = СтруктураИсточник.Строки.Индекс(ПриложениеКЛисту02);
				КлючПриложения = мСтруктураМногоуровневыхРазделов.Лист02.ИменаПодчиненныхРазделов[ИндексПриложения];
				СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, ПриложениеКЛисту02.Строки.Количество());
				МассивСтраниц = Новый Массив;
				РазделЗаполнен = Ложь;
				
				Для каждого СтраницаПриложения Из ПриложениеКЛисту02.Строки Цикл
			
					ДанныеСтраницы = Новый Структура;
					ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + "," + (ИндексПриложения + 1) + "," +
						XMLСтрока(ПриложениеКЛисту02.Строки.Индекс(СтраницаПриложения) + 1));
					ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
						Новый Структура("Наименование, Уровень", КлючПриложения, 2),
						Новый Структура("Уровень", ""));
					МассивСтраниц.Добавить(ДанныеСтраницы);
					ДанныеСтраницы.Вставить("РазделЗаполнен_" + КлючПриложения, ЗначениеЗаполнено(ДанныеСтраницы.ПризнакВключения));
					РазделЗаполнен = РазделЗаполнен ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.ПризнакВключения);
					
				КонецЦикла;
				СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
				СтруктураПриемник.Вставить("РазделЗаполнен_" + КлючПриложения, РазделЗаполнен);
			КонецЦикла;
			
			СтруктураПриемник.Вставить("Лист02_1"	, СтруктураПриемник.Лист02_1[0]);
			СтруктураПриемник.Вставить("Лист02_2"	, СтруктураПриемник.Лист02_2[0]);
			СтруктураПриемник.Вставить("Лист02_3"	, СтруктураПриемник.Лист02_3[0]);
			СтруктураПриемник.Вставить("Лист02_6бА"	, СтруктураПриемник.Лист02_6бА[0]);
			
		КонецЕсли;
		
		Если ВходящийРаздел.Наименование = "Лист02_6" И ВходящийРаздел.Уровень = 2 Тогда
			Для каждого ПриложениеКЛисту02_6 Из СтруктураИсточник.Строки Цикл
				
				КлючПриложения = "Лист02_6а";
				СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, ПриложениеКЛисту02_6.Строки.Количество());
				МассивСтраниц = Новый Массив;
				РазделЗаполнен = Ложь;
				
				Для каждого СтраницаПриложения Из ПриложениеКЛисту02_6.Строки Цикл
			
					ДанныеСтраницы = Новый Структура;
					ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + ",1," +
						XMLСтрока(ПриложениеКЛисту02_6.Строки.Индекс(СтраницаПриложения) + 1));
					ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
						Новый Структура("Наименование, Уровень", КлючПриложения, 3),
						Новый Структура("Уровень", ""));
					МассивСтраниц.Добавить(ДанныеСтраницы);
					РазделЗаполнен = РазделЗаполнен ИЛИ ЗначениеЗаполнено(ДанныеСтраницы.ПризнакВключения);
					
				КонецЦикла;
				СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
				СтруктураПриемник.Вставить("РазделЗаполнен_" + КлючПриложения, РазделЗаполнен);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаСтроки			= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы			= Сред(Элемент.Значение, 13,1);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Многостраничный			= НЕ ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.ИмяПоказателя];
		Показатель.Страница = Источник.Страница;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + Источник.НомерСтроки;
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат();
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, 
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , 
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, РежимИтогов = 0)
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(РежимИтогов) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		Иначе
			Результат = Результат + Показатель.Значение.Итог;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КодНайден(ЗначениеКода, СтрокаКодов, Разделитель = ",")
	
	МассивКодов = СтрРазделить(СтрокаКодов, Разделитель);
	Возврат НЕ МассивКодов.Найти(ЗначениеКода) = Неопределено;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Раздела_1_1

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к доплате в федеральный бюджет в стр.040 Раздела 1.1 равна стр.270 - стр.280 ';
			|en = 'Сумма налога к доплате в федеральный бюджет в стр.040 Раздела 1.1 равна стр.270 - стр.280 '") +
		НСтр("ru = 'Листа 02 с кодами 01, 03, 04 по реквизиту ""Признак налогоплательщика""';
			|en = 'Листа 02 с кодами 01, 03, 04 по реквизиту ""Признак налогоплательщика""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("ПоказательР11", "П00011М104003_");
	Настройки.Вставить("ПоказательЛ21", "П000020027003");
	Настройки.Вставить("ПоказательЛ22", "П000020028003");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_02_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уменьшению в федеральный бюджет в стр.050 Раздела 1.1 равна стр.280 - стр.270 ';
			|en = 'Сумма налога к уменьшению в федеральный бюджет в стр.050 Раздела 1.1 равна стр.280 - стр.270 '") +
		НСтр("ru = 'Листа 02 с кодами 01, 03, 04 по реквизиту ""Признак налогоплательщика""';
			|en = 'Листа 02 с кодами 01, 03, 04 по реквизиту ""Признак налогоплательщика""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("ПоказательР11", "П00011М105003_");
	Настройки.Вставить("ПоказательЛ21", "П000020028003");
	Настройки.Вставить("ПоказательЛ22", "П000020027003");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_02_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_02_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р11С001"		, Настройки.ПоказательР11);
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, Настройки.ПоказательЛ21);
	ИменаПоказателей.Вставить("Л02С003"		, Настройки.ПоказательЛ22);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С001.Расшифровывать = Ложь;
	Показатели.Л02С003.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_1.КолвоСтрокП00011М1 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р11С001, ДанныеКС.Раздел1_1, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,04") Тогда
			Продолжить;
		КонецЕсли; 
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С003, Лист02);
	КонецЦикла;
	
	РасчетнаяСумма = Макс(0, Показатели.Л02С002.Итог + Показатели.Л02С003.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_1 
		И Код_ПН_Найден 
		И ДанныеКС.ЭтоГоловная И НЕ Показатели.Р11С001.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р11С001.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.3';
													|en = '1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.271 - стр.281 ';
			|en = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.271 - стр.281 '") +
		НСтр("ru = 'Листа 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций, ';
			|en = 'Листа 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций, '") +
		НСтр("ru = 'не имеющих обособленных подразделений (не заполнено Приложение 5 к Листу 02)';
			|en = 'не имеющих обособленных подразделений (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("ПоказательР11", "П00011М107003_");
	Настройки.Вставить("ПоказательЛ21", "П000020027103");
	Настройки.Вставить("ПоказательЛ22", "П000020028103");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.1';
													|en = '1.4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.100 - стр.110 Приложения ';
			|en = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.100 - стр.110 Приложения '") +
		НСтр("ru = '5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по ';
			|en = '5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по '") +
		НСтр("ru = 'реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено ';
			|en = 'реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02)';
			|en = 'Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл", "1");
	Настройки.Вставить("ПоказательР11", "П00011М107003_");
	Настройки.Вставить("ПоказательЛ21", "П000250010003");
	Настройки.Вставить("ПоказательЛ22", "П000250011003");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_06_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.2';
													|en = '1.4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.100 - стр.110 Приложения ';
			|en = 'Сумма налога к доплате в бюджет субъекта РФ в стр.070 Раздела 1.1 равна стр.100 - стр.110 Приложения '") +
		НСтр("ru = '5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту';
			|en = '5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту'") +
		НСтр("ru = ' ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к ';
			|en = ' ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к '") +
		НСтр("ru = 'Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.070 Раздела 1.1 = 0';
			|en = 'Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.070 Раздела 1.1 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл", "4");
	Настройки.Вставить("ПоказательР11", "П00011М107003_");
	Настройки.Вставить("ПоказательЛ21", "П000250010003");
	Настройки.Вставить("ПоказательЛ22", "П000250011003");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5';
													|en = '1.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.281 - стр.271 ';
			|en = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.281 - стр.271 '") +
		НСтр("ru = 'Листа 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций, ';
			|en = 'Листа 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций, '") +
		НСтр("ru = 'не имеющих обособленных подразделений (не заполнено Приложение 5 к Листу 02)';
			|en = 'не имеющих обособленных подразделений (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("ПоказательР11", "П00011М108003_");
	Настройки.Вставить("ПоказательЛ21", "П000020028103");
	Настройки.Вставить("ПоказательЛ22", "П000020027103");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р11С001"		, Настройки.ПоказательР11);
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, Настройки.ПоказательЛ21);
	ИменаПоказателей.Вставить("Л02С003"		, Настройки.ПоказательЛ22);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С001.Расшифровывать = Ложь;
	Показатели.Л02С003.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_1.КолвоСтрокП00011М1 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р11С001, ДанныеКС.Раздел1_1, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,06,07,08,14") Тогда
			Продолжить;
		КонецЕсли; 
		
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С003, Лист02);
	КонецЦикла;
	
	РасчетнаяСумма = Макс(0, Показатели.Л02С002.Итог + Показатели.Л02С003.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_1 
		И Код_ПН_Найден 
		И ДанныеКС.ЭтоГоловнаяБезОП И НЕ Показатели.Р11С001.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р11С001.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6.1';
													|en = '1.6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.110 - стр.100 ';
			|en = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.110 - стр.100 '") +
		НСтр("ru = 'Приложения 5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 ';
			|en = 'Приложения 5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 '") +
		НСтр("ru = 'по реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено ';
			|en = 'по реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02)';
			|en = 'Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл", "1");
	Настройки.Вставить("ПоказательР11", "П00011М108003_");
	Настройки.Вставить("ПоказательЛ21", "П000250011003");
	Настройки.Вставить("ПоказательЛ22", "П000250010003");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_06_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6.2';
													|en = '1.6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.1';
														|en = 'Раздел 1.1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1-3 ст.286 НК РФ';
													|en = 'п.1-3 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.110 - стр.100 ';
			|en = 'Сумма налога к уменьшению из бюджета субъекта РФ в стр.080 Раздела 1.1 равна стр.110 - стр.100 '") +
		НСтр("ru = 'Приложения 5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 ';
			|en = 'Приложения 5 к Листу 02 с кодами 01, 03, 06, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 '") +
		НСтр("ru = 'по реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено ';
			|en = 'по реквизиту ""Расчет составлен"", для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.080 ';
			|en = 'Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.080 '") +
		НСтр("ru = 'Раздела 1.1 = 0';
			|en = 'Раздела 1.1 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл", "4");
	Настройки.Вставить("ПоказательР11", "П00011М108003_");
	Настройки.Вставить("ПоказательЛ21", "П000250011003");
	Настройки.Вставить("ПоказательЛ22", "П000250010003");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р11С001"		, Настройки.ПоказательР11);
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С003"		, "П000250000400");
	ИменаПоказателей.Вставить("П25С004"		, Настройки.ПоказательЛ21);
	ИменаПоказателей.Вставить("П25С005"		, Настройки.ПоказательЛ22);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С001.Расшифровывать = Ложь;
	Показатели.П25С002.Расшифровывать = Ложь;
	Показатели.П25С003.Расшифровывать = Ложь;
	Показатели.П25С005.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_1.КолвоСтрокП00011М1 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р11С001, ДанныеКС.Раздел1_1, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С002, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С003, Лист02_5);
			
			Если НЕ КодНайден(Показатели.П25С001.Значение, "01,03,06,14") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ КодНайден(Показатели.П25С002.Значение, Настройки.РасчетСоставл) Тогда
				Продолжить;
			КонецЕсли; 
			Код_ПН_Найден = Истина;
			
			Если Настройки.РасчетСоставл = "4" И НЕ ДанныеКС.КПП = Показатели.П25С003.Значение Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С004, Лист02_5);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С005, Лист02_5);
		КонецЦикла;
	КонецЦикла;
	
	РасчетнаяСумма = Макс(0, Показатели.П25С004.Итог + Показатели.П25С005.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_1 И Код_ПН_Найден 
		И ДанныеКС.ЭтоГоловнаяСОП И НЕ Показатели.Р11С001.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р11С001.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1_2

&НаСервере
Процедура ПроверкаКС_1_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.1';
													|en = '1.7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.120 Раздела 1.2 равна (стр.300 Листа 02 с кодами 01, 03, 04 ';
			|en = 'Сумма авансового платежа в стр.120 Раздела 1.2 равна (стр.300 Листа 02 с кодами 01, 03, 04 '") +
		НСтр("ru = 'по реквизиту ""Признак налогоплательщика"") / 3';
			|en = 'по реквизиту ""Признак налогоплательщика"") / 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель", "П00012М112003_");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_07_1_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.2';
													|en = '1.7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.130 Раздела 1.2 равна (стр.300 Листа 02 с кодами 01, 03, 04 ';
			|en = 'Сумма авансового платежа в стр.130 Раздела 1.2 равна (стр.300 Листа 02 с кодами 01, 03, 04 '") +
		НСтр("ru = 'по реквизиту ""Признак налогоплательщика"") / 3';
			|en = 'по реквизиту ""Признак налогоплательщика"") / 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель", "П00012М113003_");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_07_1_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.3';
													|en = '1.7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Раздела 1.2 (КС 1.7.3)';
													|en = 'Проверка Раздела 1.2 (КС 1.7.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.140 Раздела 1.2 равна стр.300 Листа 02 с кодами 01, 03, 04 ';
			|en = 'Сумма авансового платежа в стр.140 Раздела 1.2 равна стр.300 Листа 02 с кодами 01, 03, 04 '") +
		НСтр("ru = 'по реквизиту ""Признак налогоплательщика"" - стр.120 - стр.130 Раздела 1.2';
			|en = 'по реквизиту ""Признак налогоплательщика"" - стр.120 - стр.130 Раздела 1.2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Строка", "140");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_07_2_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_1_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, Настройки.Показатель);
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020030003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р12С001.Расшифровывать = Ложь;
	Показатели.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,04") Тогда
			Продолжить;
		КонецЕсли; 
		
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
	КонецЦикла;
	
	РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
		Цел(Показатели.Л02С002.Итог / 3));
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловная И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, 
		Показатели.Л02С002.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_2_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, "П00012М114003_");
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020030003");
	ИменаПоказателей.Вставить("Р12С003"		, "П00012М112003_");
	ИменаПоказателей.Вставить("Р12С004"		, "П00012М113003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р12С001.Расшифровывать = Ложь;
	Показатели.Л02С001.Расшифровывать = Ложь;
	Показатели.Р12С003.Инверсия = Истина;
	Показатели.Р12С004.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,04") Тогда
			Продолжить;
		КонецЕсли; 
		
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
	КонецЦикла;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С003, ДанныеКС.Раздел1_2, Счетчик);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С004, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Макс(0, Показатели.Л02С002.Итог + Показатели.Р12С003.Итог + Показатели.Р12С004.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловная И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, 
		Показатели.Л02С002.Итог, -Показатели.Р12С003.Итог, -Показатели.Р12С004.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_08()
	
	Перем ПоказателиР1;
	Перем ПоказателиЛ2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.08';
													|en = '1.08'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Код квартала, на который начисляются авансовые платежи в стр.001 Раздела 1.2 должен быть равен ';
			|en = 'Код квартала, на который начисляются авансовые платежи в стр.001 Раздела 1.2 должен быть равен '") +
		НСтр("ru = '21 и 24, если в отчете за 9 месяцев стр.330, 340 Листа 2 не равны стр.300, 310 Листа 2 с кодами ';
			|en = '21 и 24, если в отчете за 9 месяцев стр.330, 340 Листа 2 не равны стр.300, 310 Листа 2 с кодами '") +
		НСтр("ru = '01, 03 по реквизиту ""Признак налогоплательщика""';
			|en = '01, 03 по реквизиту ""Признак налогоплательщика""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 21, 24';
													|en = '%1 = 21, 24'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код квартала';
														|en = 'Ошибочный код квартала'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателейЛ2 = Новый Структура;
	ИменаПоказателейЛ2.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателейЛ2.Вставить("Л02С002"		, "П000020030003");
	ИменаПоказателейЛ2.Вставить("Л02С003"		, "П000020031003");
	ИменаПоказателейЛ2.Вставить("Л02С004"		, "П000020033003");
	ИменаПоказателейЛ2.Вставить("Л02С005"		, "П000020034003");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиЛ2, ИменаПоказателейЛ2);
	ПоказателиЛ2.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	МассивКонтроля		= СтрРазделить("21,24", ",");
	МассивУдаления		= СтрРазделить("21,24", ",");
	МассивРасшифровки	= Новый Массив;
	КодКварталаНайден	= Истина;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1_2, Счетчик);
		МассивРасшифровки.Добавить(ПоказателиР1.Р12С001.ЗначениеСтр);
		КодКварталаНайден = КодКварталаНайден И НЕ МассивКонтроля.Найти(ПоказателиР1.Р12С001.Значение) = Неопределено;
		ИндексЭлемента = МассивУдаления.Найти(ПоказателиР1.Р12С001.Значение);
		Если НЕ ИндексЭлемента = Неопределено Тогда
			МассивУдаления.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьПоказатель(ПоказателиЛ2.Л02С001, Лист02);
		Если НЕ КодНайден(ПоказателиЛ2.Л02С001.Значение, "01,03") Тогда
			Продолжить;
		КонецЕсли; 
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиЛ2, Лист02);
		
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ДанныеКС.Периодичность = 3 И ДанныеКС.ОтчетЗаКвартал И ДанныеКС.МесОтчета = 9 
		И ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден И ДанныеКС.ЭтоГоловная 
		И НЕ(ПоказателиЛ2.Л02С002.Итог = ПоказателиЛ2.Л02С004.Итог И ПоказателиЛ2.Л02С003.Итог = ПоказателиЛ2.Л02С005.Итог)
		И НЕ ПоказателиЛ2.Л02С002.Итог + ПоказателиЛ2.Л02С003.Итог = 0 
		И НЕ ПоказателиЛ2.Л02С004.Итог + ПоказателиЛ2.Л02С005.Итог = 0 
		И НЕ(КодКварталаНайден И МассивУдаления.Количество() = 0);
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, СтрСоединить(МассивРасшифровки, ", "));
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09()
	
	Перем ПоказателиР1;
	Перем ПоказателиЛ2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.09';
													|en = '1.09'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.120, 130, 140 Раздела 1.2 должна быть равна стр.330 Листа 02 с кодами ';
			|en = 'Сумма авансовых платежей в стр.120, 130, 140 Раздела 1.2 должна быть равна стр.330 Листа 02 с кодами '") +
		НСтр("ru = '01, 03, 04 по реквизиту ""Признак налогоплательщика"", если в отчете за 9 месяцев код квартала, на ';
			|en = '01, 03, 04 по реквизиту ""Признак налогоплательщика"", если в отчете за 9 месяцев код квартала, на '") +
		НСтр("ru = 'который исчисляются авансовые платежи в стр.001 Раздела 1.2 равен 21';
			|en = 'который исчисляются авансовые платежи в стр.001 Раздела 1.2 равен 21'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 Итог [%4] = %5';
													|en = '%1 + %2 + %3 Итог [%4] = %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателейР1.Вставить("Р12С002"		, "П00012М112003_");
	ИменаПоказателейР1.Вставить("Р12С003"		, "П00012М113003_");
	ИменаПоказателейР1.Вставить("Р12С004"		, "П00012М114003_");
	ИменаПоказателейЛ2 = Новый Структура;
	ИменаПоказателейЛ2.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателейЛ2.Вставить("Л02С002"		, "П000020033003");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиЛ2, ИменаПоказателейЛ2);
	ПоказателиР1.Р12С001.Расшифровывать = Ложь;
	ПоказателиЛ2.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗаполнитьПоказатель(ПоказателиР1.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если НЕ ПоказателиР1.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1_2, Счетчик);
		
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьПоказатель(ПоказателиЛ2.Л02С001, Лист02);
		Если НЕ КодНайден(ПоказателиЛ2.Л02С001.Значение, "01,03,04") Тогда
			Продолжить;
		КонецЕсли; 
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиЛ2, Лист02);
		
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР1.Р12С002.Итог + ПоказателиР1.Р12С003.Итог + ПоказателиР1.Р12С004.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.Периодичность = 3 И ДанныеКС.ОтчетЗаКвартал И ДанныеКС.МесОтчета = 9 
		И ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И ДанныеКС.ЭтоГоловная И КодКварталаНайден И НЕ РасчетнаяСумма = ПоказателиЛ2.Л02С002.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, ПоказателиР1.Р12С002.Итог, ПоказателиР1.Р12С003.Итог, 
		ПоказателиР1.Р12С004.Итог, РасчетнаяСумма, ПоказателиЛ2.Л02С002.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10.1';
													|en = '1.10.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, ';
			|en = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, '") +
		НСтр("ru = '14 по реквизиту ""Признак налогоплательщика"") / 3 для организаций, не имеющих обособленные ';
			|en = '14 по реквизиту ""Признак налогоплательщика"") / 3 для организаций, не имеющих обособленные '") +
		НСтр("ru = 'подразделения (не заполнено Приложение 5 к Листу 02)';
			|en = 'подразделения (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель", "П00012М122003_");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_10_1_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10.2';
													|en = '1.10.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, ';
			|en = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, '") +
		НСтр("ru = '14 по реквизиту ""Признак налогоплательщика"") / 3 для организаций, не имеющих обособленные ';
			|en = '14 по реквизиту ""Признак налогоплательщика"") / 3 для организаций, не имеющих обособленные '") +
		НСтр("ru = 'подразделения (не заполнено Приложение 5 к Листу 02)';
			|en = 'подразделения (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель", "П00012М123003_");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_10_1_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10.3';
													|en = '1.10.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Раздела 1.2 (КС 1.10.3)';
													|en = 'Проверка Раздела 1.2 (КС 1.10.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, ';
			|en = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна стр.310 Листа 02 с кодами 01, 03, 06, 07, 08, '") +
		НСтр("ru = '14 по реквизиту ""Признак налогоплательщика"" - стр.220 - стр.230 Раздела 1.2 для организаций, ';
			|en = '14 по реквизиту ""Признак налогоплательщика"" - стр.220 - стр.230 Раздела 1.2 для организаций, '") +
		НСтр("ru = 'не имеющих обособленные подразделения (не заполнено Приложение 5 к Листу 02)';
			|en = 'не имеющих обособленные подразделения (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_10_2_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10_1_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, Настройки.Показатель);
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020031003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р12С001.Расшифровывать = Ложь;
	Показатели.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,06,07,08,14") Тогда
			Продолжить;
		КонецЕсли; 
		
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
	КонецЦикла;
	
	РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
		Цел(Показатели.Л02С002.Итог / 3));
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяБезОП И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, 
		Показатели.Л02С002.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10_2_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, "П00012М124003_");
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020031003");
	ИменаПоказателей.Вставить("Р12С003"		, "П00012М122003_");
	ИменаПоказателей.Вставить("Р12С004"		, "П00012М123003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р12С001.Расшифровывать = Ложь;
	Показатели.Л02С001.Расшифровывать = Ложь;
	Показатели.Р12С003.Инверсия = Истина;
	Показатели.Р12С004.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Если НЕ КодНайден(Показатели.Л02С001.Значение, "01,03,06,07,08,14") Тогда
			Продолжить;
		КонецЕсли; 
		
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
	КонецЦикла;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С003, ДанныеКС.Раздел1_2, Счетчик);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С004, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Макс(0, Показатели.Л02С002.Итог + Показатели.Р12С003.Итог + Показатели.Р12С004.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяБезОП И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, 
		Показатели.Л02С002.Итог, -Показатели.Р12С003.Итог, -Показатели.Р12С004.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11()
	
	Перем ПоказателиР1;
	Перем ПоказателиЛ2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.11';
													|en = '1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.310 Листа 02 с кодами ';
			|en = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.310 Листа 02 с кодами '") +
		НСтр("ru = '01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций не имеющих ';
			|en = '01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", для организаций не имеющих '") +
		НСтр("ru = 'обособленные подразделения (не заполнено Приложение 5 к Листу 02)';
			|en = 'обособленные подразделения (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 Итог [%4] = %5';
													|en = '%1 + %2 + %3 Итог [%4] = %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателейР1.Вставить("Р12С002"		, "П00012М122003_");
	ИменаПоказателейР1.Вставить("Р12С003"		, "П00012М123003_");
	ИменаПоказателейР1.Вставить("Р12С004"		, "П00012М124003_");
	ИменаПоказателейЛ2 = Новый Структура;
	ИменаПоказателейЛ2.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателейЛ2.Вставить("Л02С002"		, "П000020031003");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиЛ2, ИменаПоказателейЛ2);
	ПоказателиР1.Р12С001.Расшифровывать = Ложь;
	ПоказателиЛ2.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗаполнитьПоказатель(ПоказателиР1.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если ПоказателиР1.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1_2, Счетчик);
		
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьПоказатель(ПоказателиЛ2.Л02С001, Лист02);
		Если НЕ КодНайден(ПоказателиЛ2.Л02С001.Значение, "01,03,06,07,08,14") Тогда
			Продолжить;
		КонецЕсли; 
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиЛ2, Лист02);
		
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР1.Р12С002.Итог + ПоказателиР1.Р12С003.Итог + ПоказателиР1.Р12С004.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяБезОП И НЕ РасчетнаяСумма = ПоказателиЛ2.Л02С002.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, ПоказателиР1.Р12С002.Итог, ПоказателиР1.Р12С003.Итог, 
		ПоказателиР1.Р12С004.Итог, РасчетнаяСумма, ПоказателиЛ2.Л02С002.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12()
	
	Перем ПоказателиР1;
	Перем ПоказателиЛ2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.12';
													|en = '1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.340 Листа 02 с кодами ';
			|en = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.340 Листа 02 с кодами '") +
		НСтр("ru = '01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", если в отчете за 9 месяцев код ';
			|en = '01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"", если в отчете за 9 месяцев код '") +
		НСтр("ru = 'квартала, на который исчисляются авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций ';
			|en = 'квартала, на который исчисляются авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций '") +
		НСтр("ru = 'не имеющих обособленные подразделения (не заполнено Приложение 5 к Листу 02)';
			|en = 'не имеющих обособленные подразделения (не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 Итог [%4] = %5';
													|en = '%1 + %2 + %3 Итог [%4] = %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателейР1.Вставить("Р12С002"		, "П00012М122003_");
	ИменаПоказателейР1.Вставить("Р12С003"		, "П00012М123003_");
	ИменаПоказателейР1.Вставить("Р12С004"		, "П00012М124003_");
	ИменаПоказателейЛ2 = Новый Структура;
	ИменаПоказателейЛ2.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателейЛ2.Вставить("Л02С002"		, "П000020034003");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиЛ2, ИменаПоказателейЛ2);
	ПоказателиР1.Р12С001.Расшифровывать = Ложь;
	ПоказателиЛ2.Л02С001.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗаполнитьПоказатель(ПоказателиР1.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если НЕ ПоказателиР1.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1_2, Счетчик);
		
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьПоказатель(ПоказателиЛ2.Л02С001, Лист02);
		Если НЕ КодНайден(ПоказателиЛ2.Л02С001.Значение, "01,03,06,07,08,14") Тогда
			Продолжить;
		КонецЕсли; 
		Код_ПН_Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиЛ2, Лист02);
		
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР1.Р12С002.Итог + ПоказателиР1.Р12С003.Итог + ПоказателиР1.Р12С004.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.Периодичность = 3 И ДанныеКС.ОтчетЗаКвартал И ДанныеКС.МесОтчета = 9 
		И ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяБезОП И НЕ РасчетнаяСумма = ПоказателиЛ2.Л02С002.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, ПоказателиР1.Р12С002.Итог, ПоказателиР1.Р12С003.Итог, 
		ПоказателиР1.Р12С004.Итог, РасчетнаяСумма, ПоказателиЛ2.Л02С002.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.13.1';
													|en = '1.13.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель"			, "П00012М122003_");
	Настройки.Вставить("РасчетСоставл"		, "1");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_14_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.13.2';
													|en = '1.13.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Раздела 1.2 (КС 1.13.2)';
													|en = 'Проверка Раздела 1.2 (КС 1.13.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.220 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02), если ';
			|en = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02), если '") +
		НСтр("ru = 'КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.220 Раздела 1.2 = 0';
			|en = 'КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.220 Раздела 1.2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель"			, "П00012М122003_");
	Настройки.Вставить("РасчетСоставл"		, "4");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.14.1';
													|en = '1.14.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель"			, "П00012М123003_");
	Настройки.Вставить("РасчетСоставл"		, "1");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_14_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.14.2';
													|en = '1.14.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.230 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02), если ';
			|en = ') / 3, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02), если '") +
		НСтр("ru = 'КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.230 Раздела 1.2 = 0';
			|en = 'КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе стр.230 Раздела 1.2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 / 3 Итог [%3]';
													|en = '%1 = %2 / 3 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("Показатель"			, "П00012М123003_");
	Настройки.Вставить("РасчетСоставл"		, "4");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_14_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, Настройки.Показатель);
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С003"		, "П000250000400");
	ИменаПоказателей.Вставить("П25С004"		, "П000250012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С001.Расшифровывать = Ложь;
	Показатели.П25С002.Расшифровывать = Ложь;
	Показатели.П25С003.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С002, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С003, Лист02_5);
			
			Если НЕ КодНайден(Показатели.П25С001.Значение, "01,03,06,07,08,14") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ КодНайден(Показатели.П25С002.Значение, Настройки.РасчетСоставл) Тогда
				Продолжить;
			КонецЕсли; 
			Код_ПН_Найден = Истина;
			
			Если Настройки.РасчетСоставл = "4" И НЕ ДанныеКС.КПП = Показатели.П25С003.Значение Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С004, Лист02_5);
		КонецЦикла;
	КонецЦикла;
	
	РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
		Показатели.П25С004.Итог / 3);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяСОП И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, Показатели.П25С004.Итог, 
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.15.1';
													|en = '1.15.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') - стр.220 - стр.230 Раздела 1.2, для организаций, имеющих обособленные подразделения (заполнено ';
			|en = ') - стр.220 - стр.230 Раздела 1.2, для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02)';
			|en = 'Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл"		, "1");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_15_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.15.2';
													|en = '1.15.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,';
			|en = 'Сумма авансового платежа в стр.240 Раздела 1.2 равна (стр.120 Приложения 5 к Листу 02 с кодами 01, 03,'") +
		НСтр("ru = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""';
			|en = ' 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по реквизиту ""Расчет составлен""'") +
		НСтр("ru = ') - стр.220 - стр.230 Раздела 1.2, для организаций, имеющих обособленные подразделения (заполнено ';
			|en = ') - стр.220 - стр.230 Раздела 1.2, для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе ';
			|en = 'Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП Титульного листа, иначе '") +
		НСтр("ru = 'стр.240 Раздела 1.2 = 0';
			|en = 'стр.240 Раздела 1.2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 Итог [%5]';
													|en = '%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл"		, "4");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_15_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателей.Вставить("Р12С002"		, "П00012М124003_");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С003"		, "П000250000400");
	ИменаПоказателей.Вставить("П25С004"		, "П000250012003");
	ИменаПоказателей.Вставить("Р12С003"		, "П00012М122003_");
	ИменаПоказателей.Вставить("Р12С004"		, "П00012М123003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Р12С003.Инверсия = Истина;
	Показатели.Р12С004.Инверсия = Истина;
	ЗарегистрироватьФормулу(Настройки);
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С002, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С002, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С003, Лист02_5);
			
			Если НЕ КодНайден(Показатели.П25С001.Значение, "01,03,06,07,08,14") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ КодНайден(Показатели.П25С002.Значение, Настройки.РасчетСоставл) Тогда
				Продолжить;
			КонецЕсли; 
			Код_ПН_Найден = Истина;
			
			Если Настройки.РасчетСоставл = "4" И НЕ ДанныеКС.КПП = Показатели.П25С003.Значение Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С004, Лист02_5);
		КонецЦикла;
	КонецЦикла;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		ЗаполнитьПоказатель(Показатели.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если Показатели.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С003, ДанныеКС.Раздел1_2, Счетчик);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р12С004, ДанныеКС.Раздел1_2, Счетчик);
	КонецЦикла;

	РасчетнаяСумма = Макс(0, Показатели.П25С004.Итог + Показатели.Р12С003.Итог + Показатели.Р12С004.Итог);
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 И Код_ПН_Найден 
		И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяСОП И НЕ Показатели.Р12С002.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С002.Итог, 
		Показатели.П25С004.Итог, -Показатели.Р12С003.Итог, -Показатели.Р12С004.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.16.1';
													|en = '1.16.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.121 Приложения 5 к ';
			|en = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.121 Приложения 5 к '") +
		НСтр("ru = 'Листу 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по ';
			|en = 'Листу 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 1 по '") +
		НСтр("ru = 'реквизиту ""Расчет составлен"", если в отчете за 9 месяцев код квартала, на который исчисляются ';
			|en = 'реквизиту ""Расчет составлен"", если в отчете за 9 месяцев код квартала, на который исчисляются '") +
		НСтр("ru = 'авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций, имеющих обособленные ';
			|en = 'авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций, имеющих обособленные '") +
		НСтр("ru = 'подразделения (заполнено Приложение 5 к Листу 02)';
			|en = 'подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 Итог [%4] = %5';
													|en = '%1 + %2 + %3 Итог [%4] = %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл"		, "1");
	
	Если НЕ Документирование Тогда
		ПроверкаКС_1_16_код(Настройки);
	КонецЕсли;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.16.2';
													|en = '1.16.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.121 Приложения 5 к ';
			|en = 'Сумма авансовых платежей в стр.220, 230, 240 Раздела 1.2 должна быть равна стр.121 Приложения 5 к '") +
		НСтр("ru = 'Листу 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по ';
			|en = 'Листу 02 с кодами 01, 03, 06, 07, 08, 14 по реквизиту ""Признак налогоплательщика"" и кодом 4 по '") +
		НСтр("ru = 'реквизиту ""Расчет составлен"", если в отчете за 9 месяцев код квартала, на который исчисляются ';
			|en = 'реквизиту ""Расчет составлен"", если в отчете за 9 месяцев код квартала, на который исчисляются '") +
		НСтр("ru = 'авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций, имеющих обособленные ';
			|en = 'авансовые платежи в стр.001 Раздела 1.2 равен 21, для организаций, имеющих обособленные '") +
		НСтр("ru = 'подразделения (заполнено Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП ';
			|en = 'подразделения (заполнено Приложение 5 к Листу 02), если КПП Приложения 5 к Листу 02 равно КПП '") +
		НСтр("ru = 'Титульного листа, иначе стр.240 Раздела 1.2 = 0';
			|en = 'Титульного листа, иначе стр.240 Раздела 1.2 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 Итог [%4] = %5';
													|en = '%1 + %2 + %3 Итог [%4] = %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Настройки.Вставить("РасчетСоставл"		, "4");
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_16_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16_код(Настройки)
	
	Перем ПоказателиР1;
	Перем ПоказателиЛ2;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р12С001"		, "П00012М100103_");
	ИменаПоказателейР1.Вставить("Р12С002"		, "П00012М122003_");
	ИменаПоказателейР1.Вставить("Р12С003"		, "П00012М123003_");
	ИменаПоказателейР1.Вставить("Р12С004"		, "П00012М124003_");
	ИменаПоказателейЛ2 = Новый Структура;
	ИменаПоказателейЛ2.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателейЛ2.Вставить("П25С002"		, "П000250000300");
	ИменаПоказателейЛ2.Вставить("П25С003"		, "П000250000400");
	ИменаПоказателейЛ2.Вставить("П25С004"		, "П000250012103");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиЛ2, ИменаПоказателейЛ2);
	ПоказателиР1.Р12С001.Расшифровывать = Ложь;
	ПоказателиЛ2.П25С001.Расшифровывать = Ложь;
	ПоказателиЛ2.П25С002.Расшифровывать = Ложь;
	ПоказателиЛ2.П25С003.Расшифровывать = Ложь;
	ЗарегистрироватьФормулу(Настройки);
	
	КодКварталаНайден	= Ложь;
	Код_ПН_Найден		= Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗаполнитьПоказатель(ПоказателиР1.Р12С001, ДанныеКС.Раздел1_2, Счетчик);
		Если НЕ ПоказателиР1.Р12С001.Значение = "21" Тогда
			Продолжить;
		КонецЕсли;
		КодКварталаНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1_2, Счетчик);
		
	КонецЦикла;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьПоказатель(ПоказателиЛ2.П25С001, Лист02_5);
			ЗаполнитьПоказатель(ПоказателиЛ2.П25С002, Лист02_5);
			ЗаполнитьПоказатель(ПоказателиЛ2.П25С003, Лист02_5);
			
			Если НЕ КодНайден(ПоказателиЛ2.П25С001.Значение, "01,03,06,07,08,14") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ КодНайден(ПоказателиЛ2.П25С002.Значение, Настройки.РасчетСоставл) Тогда
				Продолжить;
			КонецЕсли; 
			Код_ПН_Найден = Истина;
			
			Если Настройки.РасчетСоставл = "4" И НЕ ДанныеКС.КПП = ПоказателиЛ2.П25С003.Значение Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьИРасшифроватьПоказатель(ПоказателиЛ2.П25С004, Лист02_5);
		КонецЦикла;
	КонецЦикла;
	
	РасчетнаяСумма = ПоказателиР1.Р12С002.Итог + ПоказателиР1.Р12С003.Итог + ПоказателиР1.Р12С004.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.Периодичность = 3 И ДанныеКС.ОтчетЗаКвартал И ДанныеКС.МесОтчета = 9 
		И ДанныеКС.РазделЗаполнен_Раздел1_2 
		И Код_ПН_Найден И КодКварталаНайден И ДанныеКС.ЭтоГоловнаяСОП И НЕ РасчетнаяСумма = ПоказателиЛ2.П25С004.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, ПоказателиР1.Р12С002.Итог, ПоказателиР1.Р12С003.Итог, 
		ПоказателиР1.Р12С004.Итог, РасчетнаяСумма, ПоказателиЛ2.П25С004.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_1()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.1';
													|en = '1.17.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Суммы авансовых платежей в стр.120, 130, 140, 220, 230, 240 Раздела 1.2 = 0 в случае представления ';
			|en = 'Суммы авансовых платежей в стр.120, 130, 140, 220, 230, 240 Раздела 1.2 = 0 в случае представления '") +
		НСтр("ru = 'отчета за отчетный налоговый период (год)';
			|en = 'отчета за отчетный налоговый период (год)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 + %2 + %3 + %4 + %5 + %6 Итог [%7] = 0';
													|en = '%1 + %2 + %3 + %4 + %5 + %6 Итог [%7] = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансового платежа';
														|en = 'Ошибочная сумма авансового платежа'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М112003_");
	ИменаПоказателей.Вставить("Р12С002"		, "П00012М113003_");
	ИменаПоказателей.Вставить("Р12С003"		, "П00012М114003_");
	ИменаПоказателей.Вставить("Р12С004"		, "П00012М122003_");
	ИменаПоказателей.Вставить("Р12С005"		, "П00012М123003_");
	ИменаПоказателей.Вставить("Р12С006"		, "П00012М124003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1_2, Счетчик);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели);
		Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_2 И ДанныеКС.МесОтчета = 12 
			И НЕ РасчетнаяСумма = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С001.Значение, 
			Показатели.Р12С002.Значение, Показатели.Р12С003.Значение, Показатели.Р12С004.Значение, 
			Показатели.Р12С005.Значение, Показатели.Р12С006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_2_доп()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.2.доп';
													|en = '1.17.2.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.2';
														|en = 'Раздел 1.2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Код квартала, на который начисляются авансовые платежи в стр.001 Раздела 1.2 не должен быть заполнен ';
			|en = 'Код квартала, на который начисляются авансовые платежи в стр.001 Раздела 1.2 не должен быть заполнен '") +
		НСтр("ru = 'в случае представления отчета за 1 квартал и 1 полугодие';
			|en = 'в случае представления отчета за 1 квартал и 1 полугодие'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = (...)';
													|en = '%1 = (...)'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный код квартала';
														|en = 'Ошибочный код квартала'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р12С001"		, "П00012М100103_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_2.КолвоСтрокП00012М1 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1_2, Счетчик);
	
		Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 6) И ДанныеКС.РазделЗаполнен_Раздел1_2 
			И ЗначениеЗаполнено(Показатели.Р12С001.Значение);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р12С001.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1_3

&НаСервере
Процедура ПроверкаКС_1_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.18';
													|en = '1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.3';
														|en = 'Раздел 1.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.275 НК РФ';
													|en = 'ст.275 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.120 Листа 03 (Раздел А), если код вида ';
			|en = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.120 Листа 03 (Раздел А), если код вида '") +
		НСтр("ru = 'платежа в стр.010 Раздела 1.3 = 1';
			|en = 'платежа в стр.010 Раздела 1.3 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р13С001"		, "П00013М101003_");
	ИменаПоказателей.Вставить("Р13П002"		, "П00013М204003_");
	ИменаПоказателей.Вставить("Л3АС001"		, "П0003А0012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	КодР13Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_3.КолвоСтрокП00013М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р13С001, ДанныеКС.Раздел1_3, Счетчик);
		Если НЕ Показатели.Р13С001.Значение = "1" Тогда
			Продолжить;
		КонецЕсли; 
		
		КодР13Найден = Истина;
		РасшифроватьПоказатель(Показатели.Р13С001);
		
		Для Счетчик2 = 1 По ДанныеКС.Раздел1_3["КолвоСтрокП00013М2_" + Счетчик] Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р13П002, ДанныеКС.Раздел1_3, Счетчик, Счетчик2);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Лист03А Из ДанныеКС.Лист03А Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л3АС001, Лист03А);
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_3 И КодР13Найден 
		И НЕ Показатели.Р13П002.Итог = Показатели.Л3АС001.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р13П002.Итог, Показатели.Л3АС001.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.19';
													|en = '1.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.3';
														|en = 'Раздел 1.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.281 НК РФ';
													|en = 'ст.281 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.050 Листа 03 (Раздел Б) с кодами вида дохода ';
			|en = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.050 Листа 03 (Раздел Б) с кодами вида дохода '") +
		НСтр("ru = '1, 2, если код вида платежа в стр.010 Раздела 1.3 = 2';
			|en = '1, 2, если код вида платежа в стр.010 Раздела 1.3 = 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р13С001"		, "П00013М101003_");
	ИменаПоказателей.Вставить("Р13П002"		, "П00013М204003_");
	ИменаПоказателей.Вставить("Л3БС001"		, "П0003Б0000100");
	ИменаПоказателей.Вставить("Л3БС002"		, "П0003Б0005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	КодР13Найден = Ложь;
	КодЛ3БНайден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_3.КолвоСтрокП00013М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р13С001, ДанныеКС.Раздел1_3, Счетчик);
		Если НЕ Показатели.Р13С001.Значение = "2" Тогда
			Продолжить;
		КонецЕсли; 
		
		КодР13Найден = Истина;
		РасшифроватьПоказатель(Показатели.Р13С001);
		
		Для Счетчик2 = 1 По ДанныеКС.Раздел1_3["КолвоСтрокП00013М2_" + Счетчик] Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р13П002, ДанныеКС.Раздел1_3, Счетчик, Счетчик2);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Лист03Б Из ДанныеКС.Лист03Б Цикл
		
		ЗаполнитьПоказатель(Показатели.Л3БС001, Лист03Б);
		Если НЕ КодНайден(Показатели.Л3БС001.Значение, "1,2") Тогда
			Продолжить;
		КонецЕсли; 
		
		КодЛ3БНайден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л3БС002, Лист03Б);
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_3 И КодР13Найден 
		//И КодЛ3БНайден 
		И НЕ Показатели.Р13П002.Итог = Показатели.Л3БС002.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р13П002.Итог, Показатели.Л3БС002.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.20';
													|en = '1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.3';
														|en = 'Раздел 1.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.281 НК РФ';
													|en = 'ст.281 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодами вида дохода ';
			|en = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодами вида дохода '") +
		НСтр("ru = '1, 2, если код вида платежа в стр.010 Раздела 1.3 = 3';
			|en = '1, 2, если код вида платежа в стр.010 Раздела 1.3 = 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КодР13", "3");
	Настройки.Вставить("КодЛ04", "1,2");
	
	ПроверкаКС_1_22_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.21';
													|en = '1.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.3';
														|en = 'Раздел 1.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.275 НК РФ';
													|en = 'п.2 ст.275 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодом вида дохода ';
			|en = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодом вида дохода '") +
		НСтр("ru = '4, если код вида платежа в стр.010 Раздела 1.3 = 4';
			|en = '4, если код вида платежа в стр.010 Раздела 1.3 = 4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КодР13", "4");
	Настройки.Вставить("КодЛ04", "4");
	
	ПроверкаКС_1_22_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.22';
													|en = '1.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1.3';
														|en = 'Раздел 1.3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.282 НК РФ';
													|en = 'п.2 ст.282 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодом вида дохода ';
			|en = 'Сумма налога к уплате в стр.040 Раздела 1.3 равна стр.080 Листа 04 с кодом вида дохода '") +
		НСтр("ru = '6, если код вида платежа в стр.010 Раздела 1.3 = 5';
			|en = '6, если код вида платежа в стр.010 Раздела 1.3 = 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КодР13", "5");
	Настройки.Вставить("КодЛ04", "6");
	
	ПроверкаКС_1_22_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р13С001"		, "П00013М101003_");
	ИменаПоказателей.Вставить("Р13П002"		, "П00013М204003_");
	ИменаПоказателей.Вставить("Л04С001"		, "П000040000100");
	ИменаПоказателей.Вставить("Л04С002"		, "П000040008003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	КодР13Найден = Ложь;
	КодЛ04Найден = Ложь;
	
	Для Счетчик = 1 По ДанныеКС.Раздел1_3.КолвоСтрокП00013М1 Цикл
		
		ЗаполнитьПоказатель(Показатели.Р13С001, ДанныеКС.Раздел1_3, Счетчик);
		Если НЕ Показатели.Р13С001.Значение = Настройки.КодР13 Тогда
			Продолжить;
		КонецЕсли; 
		
		КодР13Найден = Истина;
		РасшифроватьПоказатель(Показатели.Р13С001);
		
		Для Счетчик2 = 1 По ДанныеКС.Раздел1_3["КолвоСтрокП00013М2_" + Счетчик] Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р13П002, ДанныеКС.Раздел1_3, Счетчик, Счетчик2);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Лист04 Из ДанныеКС.Лист04 Цикл
		
		ЗаполнитьПоказатель(Показатели.Л04С001, Лист04);
		Если НЕ КодНайден(Показатели.Л04С001.Значение, Настройки.КодЛ04) Тогда
			Продолжить;
		КонецЕсли; 
		
		КодЛ04Найден = Истина;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л04С002, Лист04);
	КонецЦикла;
	
	Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел1_3 И КодР13Найден 
		//И КодЛ04Найден 
		И НЕ Показатели.Р13П002.Итог = Показатели.Л04С002.Итог;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Р13П002.Итог, Показатели.Л04С002.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Листа_02

&НаСервере
Процедура ПроверкаКС_1_23()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.23';
													|en = '1.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Доходы от реализации в стр.010 Листа 02 равны стр.040 Приложения 1 к Листу 02';
			|en = 'Доходы от реализации в стр.010 Листа 02 равны стр.040 Приложения 1 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма доходов от реализации';
														|en = 'Ошибочная сумма доходов от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020001003");
	ИменаПоказателей.Вставить("П21С001"		, "П000210004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П21С001, Лист02.Лист02_1);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал И НЕ ДанныеКС.РазделЗаполнен_Лист06 
			И НЕ Показатели.Л02С001.Значение = Показатели.П21С001.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П21С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.24';
													|en = '1.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Доходы от реализации в стр.010 Листа 02 для негосударственных пенсионных фондов больше или ';
			|en = 'Доходы от реализации в стр.010 Листа 02 для негосударственных пенсионных фондов больше или '") +
		НСтр("ru = 'равны стр.241 Листа 06';
			|en = 'равны стр.241 Листа 06'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма доходов от реализации';
														|en = 'Ошибочная сумма доходов от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020001003");
	ИменаПоказателей.Вставить("Л06С001"		, "П000060024103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Л06С001, ДанныеКС.Лист06);
		
	Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал И ДанныеКС.РазделЗаполнен_Лист06 
		И НЕ Показатели.Л02С001.Итог >= Показатели.Л06С001.Значение;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Итог, 
		Показатели.Л06С001.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.25';
													|en = '1.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Внереализационные доходы в стр.020 Листа 02 равны стр.100 Приложения 1 к Листу 02';
			|en = 'Внереализационные доходы в стр.020 Листа 02 равны стр.100 Приложения 1 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внереализационных доходов';
														|en = 'Ошибочная сумма внереализационных доходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020002003");
	ИменаПоказателей.Вставить("П21С001"		, "П000210010003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П21С001, Лист02.Лист02_1);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал 
			И НЕ Показатели.Л02С001.Значение = Показатели.П21С001.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П21С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.26';
													|en = '1.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Расходы, уменьшающие сумму доходов от реализации в стр.030 Листа 02 равны стр.130 ';
			|en = 'Расходы, уменьшающие сумму доходов от реализации в стр.030 Листа 02 равны стр.130 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru = 'Ошибочная сумма расходов, уменьшающих сумму доходов от реализации';
			|en = 'Ошибочная сумма расходов, уменьшающих сумму доходов от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020003003");
	ИменаПоказателей.Вставить("П22С001"		, "П000220013003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С001, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал И НЕ ДанныеКС.РазделЗаполнен_Лист06 
			И НЕ Показатели.Л02С001.Значение = Показатели.П22С001.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.27';
													|en = '1.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Внереализационные расходы в стр.040 Листа 02 равны сумме стр.200, 300 ';
			|en = 'Внереализационные расходы в стр.040 Листа 02 равны сумме стр.200, 300 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, 
		НСтр("ru = 'Ошибочная сумма внереализационных расходов';
			|en = 'Ошибочная сумма внереализационных расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020004003");
	ИменаПоказателей.Вставить("П22С001"		, "П000220020003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220030003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С001, Лист02.Лист02_2);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С002, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал 
			И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П22С001.Значение, Показатели.П22С002.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.28';
													|en = '1.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Убытки в стр.050 Листа 02 равны стр.360 Приложения 3 к Листу 02';
			|en = 'Убытки в стр.050 Листа 02 равны стр.360 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытков';
														|en = 'Ошибочная сумма убытков'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020005003");
	ИменаПоказателей.Вставить("П23С001"		, "П000230036003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П23С001, Лист02.Лист02_3);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал 
			И НЕ Показатели.Л02С001.Значение = Показатели.П23С001.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П23С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.29';
													|en = '1.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Прибыль (убыток) в стр.060 Листа 02 равны стр.010 + стр.020 - стр.030 - стр.040 + стр.050 Листа 02';
			|en = 'Прибыль (убыток) в стр.060 Листа 02 равны стр.010 + стр.020 - стр.030 - стр.040 + стр.050 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 - %5 + %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 - %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма прибыли (убытка)';
														|en = 'Ошибочная сумма прибыли (убытка)'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020006003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020001003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020002003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020003003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020004003");
	ИменаПоказателей.Вставить("Л02С006"		, "П000020005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С004.Инверсия = Истина;
	Показатели.Л02С005.Инверсия = Истина;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал И НЕ ДанныеКС.РазделЗаполнен_Лист06 
			И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, -Показатели.Л02С004.Значение, 
			-Показатели.Л02С005.Значение, Показатели.Л02С006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.30';
													|en = '1.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена из-за отсутствия стр.090 Листа 02';
													|en = 'Реализация отложена из-за отсутствия стр.090 Листа 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма льготы в стр.090 Листа 02 равна 0';
			|en = 'Сумма льготы в стр.090 Листа 02 равна 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма льготы';
														|en = 'Ошибочная сумма льготы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.31';
													|en = '1.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в стр.100 Листа 02 равна стр.060 - стр.070 - стр.080 Листа 02 + стр.200 Приложения 1 ';
			|en = 'Налоговая база в стр.100 Листа 02 равна стр.060 - стр.070 - стр.080 Листа 02 + стр.200 Приложения 1 '") +
		НСтр("ru = 'к Листу 02 - стр.400 Приложения 2 к Листу 02 + стр.100 Листов 05 + стр.530 Листа 06 + стр.050 ';
			|en = 'к Листу 02 - стр.400 Приложения 2 к Листу 02 + стр.100 Листов 05 + стр.530 Листа 06 + стр.050 '") +
		НСтр("ru = 'Листов 08, если Листы 05 или Лист 06 или Листы 08 заполнены';
			|en = 'Листов 08, если Листы 05 или Лист 06 или Листы 08 заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 + %5 - %6 + %7 + %8 + %9 Итог [%10]';
													|en = '%1 = %2 - %3 - %4 + %5 - %6 + %7 + %8 + %9 Итог [%10]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020010003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020006003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020007003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020008003");
	ИменаПоказателей.Вставить("П21С001"		, "П000210020003");
	ИменаПоказателей.Вставить("П22С001"		, "П000220040003");
	ИменаПоказателей.Вставить("Л05С001"		, "П000050010003");
	ИменаПоказателей.Вставить("Л06С001"		, "П000060053003");
	ИменаПоказателей.Вставить("Л08С001"		, "П000800005004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Инверсия = Истина;
	Показатели.Л02С004.Инверсия = Истина;
	Показатели.П22С001.Инверсия = Истина;
	
	ЗарегистрироватьФормулу(Настройки);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С003, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С004, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П21С001, Лист02.Лист02_1);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С001, Лист02.Лист02_2);
		
	КонецЦикла;
	
	Для каждого Лист05 Из ДанныеКС.Лист05 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л05С001, Лист05);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Л06С001, ДанныеКС.Лист06);
	
	Для каждого Лист08 Из ДанныеКС.Лист08 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л08С001, Лист08);
	КонецЦикла;
	
	РасчетнаяСумма = СуммаПоказателей(Показатели, 1) - Показатели.Л02С001.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал 
		И НЕ Показатели.Л02С001.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Итог, 
		Показатели.Л02С002.Итог, -Показатели.Л02С003.Итог, -Показатели.Л02С004.Итог, Показатели.П21С001.Итог, 
		-Показатели.П22С001.Итог, Показатели.Л05С001.Итог, Показатели.Л06С001.Итог, Показатели.Л08С001.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_32()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.32';
													|en = '1.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в стр.100 Листа 02 равна стр.060 - стр.070 - стр.080 Листа 02 + стр.200 Приложения 1 ';
			|en = 'Налоговая база в стр.100 Листа 02 равна стр.060 - стр.070 - стр.080 Листа 02 + стр.200 Приложения 1 '") +
		НСтр("ru = 'к Листу 02 - стр.400 Приложения 2 к Листу 02, если Листы 05, Лист 06 и Листы 08 не заполнены';
			|en = 'к Листу 02 - стр.400 Приложения 2 к Листу 02, если Листы 05, Лист 06 и Листы 08 не заполнены'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 - %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020010003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020006003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020007003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020008003");
	ИменаПоказателей.Вставить("П21С001"		, "П000210020003");
	ИменаПоказателей.Вставить("П22С001"		, "П000220040003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Инверсия = Истина;
	Показатели.Л02С004.Инверсия = Истина;
	Показатели.П22С001.Инверсия = Истина;
	
	ЗарегистрироватьФормулу(Настройки);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С003, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С004, Лист02);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П21С001, Лист02.Лист02_1);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С001, Лист02.Лист02_2);
		
	КонецЦикла;
	
	РасчетнаяСумма = СуммаПоказателей(Показатели, 1) - Показатели.Л02С001.Итог;
	Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.ОтчетЗаКвартал И НЕ ДанныеКС.РазделЗаполнен_Лист05 И 
		НЕ ДанныеКС.РазделЗаполнен_Лист06 И НЕ ДанныеКС.РазделЗаполнен_Лист08 И НЕ Показатели.Л02С001.Итог = РасчетнаяСумма;
	Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Итог, 
		Показатели.Л02С002.Итог, -Показатели.Л02С003.Итог, -Показатели.Л02С004.Итог, Показатели.П21С001.Итог, 
		-Показатели.П22С001.Итог, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_33()
	
	Перем Показатели;
	Перем ПоказателиПр;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.33';
													|en = '1.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Если налоговая база в стр.100 Листа 02 <= 0, то стр.110, 120, 130, 180, 190, 200, 270, 271, ';
			|en = 'Если налоговая база в стр.100 Листа 02 <= 0, то стр.110, 120, 130, 180, 190, 200, 270, 271, '") +
		НСтр("ru = '290, 300, 310 Листа 02 = 0';
			|en = '290, 300, 310 Листа 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы и налога';
														|en = 'Ошибочная сумма налоговой базы и налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020010003");
	
	ИменаПоказателейПр = Новый Структура;
	ИменаПоказателейПр.Вставить("Л02С002"	, "П000020011003");
	ИменаПоказателейПр.Вставить("Л02С003"	, "П000020012003");
	ИменаПоказателейПр.Вставить("Л02С004"	, "П000020013003");
	ИменаПоказателейПр.Вставить("Л02С005"	, "П000020018003");
	ИменаПоказателейПр.Вставить("Л02С006"	, "П000020019003");
	ИменаПоказателейПр.Вставить("Л02С007"	, "П000020020003");
	ИменаПоказателейПр.Вставить("Л02С008"	, "П000020027003");
	ИменаПоказателейПр.Вставить("Л02С009"	, "П000020027103");
	ИменаПоказателейПр.Вставить("Л02С010"	, "П000020029003");
	ИменаПоказателейПр.Вставить("Л02С011"	, "П000020030003");
	ИменаПоказателейПр.Вставить("Л02С012"	, "П000020031003");
	
	СформироватьПоказатели(Показатели		, ИменаПоказателей);
	СформироватьПоказатели(ПоказателиПр		, ИменаПоказателейПр);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		МассивЗначений = Новый Массив;
	
		ЗаполнитьИРасшифроватьПоказатели(Показатели		, Лист02);
		ЗаполнитьИРасшифроватьПоказатели(ПоказателиПр	, Лист02);
		
		Для каждого Элемент Из ПоказателиПр Цикл
			МассивЗначений.Добавить(Элемент.Значение.Значение);
		КонецЦикла;
		
		РасчетнаяСумма = СуммаПоказателей(ПоказателиПр);;
		Настройки.ЭтоОшибка = Показатели.Л02С001.Значение <= 0 И НЕ РасчетнаяСумма = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, СтрСоединить(МассивЗначений, ", "));
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_34()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.34';
													|en = '1.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.110 Листа 02 равна стр.150 Приложения 4 к Листу 02 для отчета за 1 квартал ';
			|en = 'Сумма убытка в стр.110 Листа 02 равна стр.150 Приложения 4 к Листу 02 для отчета за 1 квартал '") +
		НСтр("ru = 'или отчетный налоговый период';
			|en = 'или отчетный налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020011003");
	ИменаПоказателей.Вставить("П24С001"		, "П000240015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
	
		Для каждого Приложение4 Из Лист02.Лист02_4 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С001, Приложение4);
		КонецЦикла;
	
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) 
			И НЕ Показатели.Л02С001.Значение = Показатели.П24С001.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, Показатели.П24С001.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		Показатели.П24С001.Итог = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_35()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.35';
													|en = '1.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Если налоговая база в стр.100 Листа 02 > 0, то стр.120 Листа 02 равна стр.100 - стр.110 Листа 02';
			|en = 'Если налоговая база в стр.100 Листа 02 > 0, то стр.120 Листа 02 равна стр.100 - стр.110 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020010003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Инверсия = Истина;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И Показатели.Л02С002.Значение > 0 
			И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, -Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_36()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.36';
													|en = '1.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Если налоговая база в стр.100 Листа 02 = стр.110 Листа 02, то стр.120 Листа 02 = 0';
			|en = 'Если налоговая база в стр.100 Листа 02 = стр.110 Листа 02, то стр.120 Листа 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020010003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И Показатели.Л02С002.Значение = Показатели.Л02С003.Значение 
			И НЕ Показатели.Л02С001.Значение = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_37()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.37';
													|en = '1.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Налоговая база в стр.130 Листа 02 = 0';
			|en = 'Налоговая база в стр.130 Листа 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020013003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = Ложь;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_38()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.38';
													|en = '1.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в стр.140 Листа 02 = стр.150 + стр.160 Листа 02, если стр.130 Листа 02 = 0';
			|en = 'Ставка налога в стр.140 Листа 02 = стр.150 + стр.160 Листа 02, если стр.130 Листа 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020013003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020014003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020015003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020016003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	Показатели.Л02С003.Округление = Ложь;
	Показатели.Л02С004.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И Показатели.Л02С001.Значение = 0 
			И НЕ Показатели.Л02С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение, 
			Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_39()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.39';
													|en = '1.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в стр.140 Листа 02 = стр.150 + стр.170 Листа 02, если стр.130 Листа 02 = ';
			|en = 'Ставка налога в стр.140 Листа 02 = стр.150 + стр.170 Листа 02, если стр.130 Листа 02 = '") +
		НСтр("ru = 'стр.120 Листа 02 и стр.120 Листа 2 не равна 0';
			|en = 'стр.120 Листа 02 и стр.120 Листа 2 не равна 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020013003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020014003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020015003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020017003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Округление = Ложь;
	Показатели.Л02С004.Округление = Ложь;
	Показатели.Л02С005.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С004.Значение + Показатели.Л02С005.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И Показатели.Л02С001.Значение = Показатели.Л02С002.Значение 
			И НЕ Показатели.Л02С001.Значение = 0 И НЕ Показатели.Л02С003.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С003.Значение, 
			Показатели.Л02С004.Значение, Показатели.Л02С005.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.40';
													|en = '1.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога стр.140 Листа 02 не заполняется, если налоговая база в стр.130 Листа 02 < стр.120 ';
			|en = 'Ставка налога стр.140 Листа 02 не заполняется, если налоговая база в стр.130 Листа 02 < стр.120 '") +
		НСтр("ru = 'Листа 02 но не равна 0';
			|en = 'Листа 02 но не равна 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020013003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И Показатели.Л02С001.Значение > Показатели.Л02С002.Значение 
			И НЕ Показатели.Л02С002.Значение = 0 И ЗначениеЗаполнено(Показатели.Л02С003.Значение);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С003.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.41';
													|en = '1.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 = 3%, если код по реквизиту ';
			|en = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 = 3%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 1';
			|en = '""Признак налогоплательщика"" равен 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 3';
													|en = '%1 = 3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И КодНайден(Показатели.Л02С001.Значение, "01") 
			И НЕ КодНайден(ДанныеКС.КодПоМесту, "225,226,228,230,234,236,237,239,246,249") И НЕ Показатели.Л02С002.Значение = 3;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_42()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.42';
													|en = '1.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 = 0%, если код по реквизиту ';
			|en = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 = 0%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 2 или код по реквизиту ""По месту нахождения"" равен ';
			|en = '""Признак налогоплательщика"" равен 2 или код по реквизиту ""По месту нахождения"" равен '") +
		НСтр("ru = '225, 226, 228, 230, 234, 236, 237, 239, 246, 249';
			|en = '225, 226, 228, 230, 234, 236, 237, 239, 246, 249'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И (КодНайден(Показатели.Л02С001.Значение, "02") 
			ИЛИ КодНайден(ДанныеКС.КодПоМесту, "225,226,228,230,234,236,237,239,246,249")) И НЕ Показатели.Л02С002.Значение = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_43()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.43';
													|en = '1.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 <= 2%, если код по реквизиту ';
			|en = 'Ставка налога в федеральный бюджет в стр.150 Листа 02 <= 2%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 3 (резиденты Калининградской ОЭЗ)';
			|en = '""Признак налогоплательщика"" равен 3 (резиденты Калининградской ОЭЗ)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 2';
													|en = '%1 <= 2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И КодНайден(Показатели.Л02С001.Значение, "03") 
			И Показатели.Л02С002.Значение > 2;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_44()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.44';
													|en = '1.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, 
		НСтр("ru = 'Налоговая ставка может быть понижена законами субъектов РФ для отдельных категорий налогоплательщиков';
			|en = 'Налоговая ставка может быть понижена законами субъектов РФ для отдельных категорий налогоплательщиков'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 = 17%, если код по реквизиту ';
			|en = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 = 17%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 1';
			|en = '""Признак налогоплательщика"" равен 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 17';
													|en = '%1 = 17'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020016003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И КодНайден(Показатели.Л02С001.Значение, "01") И 
			НЕ КодНайден(ДанныеКС.КодПоМесту, "225,226,228,230,234,236,237,239,246,249") И НЕ Показатели.Л02С002.Значение = 17;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_45()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.45';
													|en = '1.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 = 0%, если код по реквизиту ';
			|en = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 = 0%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 2 или код по реквизиту ""По месту нахождения"" равен ';
			|en = '""Признак налогоплательщика"" равен 2 или код по реквизиту ""По месту нахождения"" равен '") +
		НСтр("ru = '225, 226, 234, 236, 238, 239, 246';
			|en = '225, 226, 234, 236, 238, 239, 246'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020016003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И (КодНайден(Показатели.Л02С001.Значение, "02") 
			ИЛИ КодНайден(ДанныеКС.КодПоМесту, "225,226,234,236,238,239,246")) И НЕ Показатели.Л02С002.Значение = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_46()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.46';
													|en = '1.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 <= 13,5%, если код по реквизиту ';
			|en = 'Ставка налога в бюджет субъекта РФ в стр.160 Листа 02 <= 13,5%, если код по реквизиту '") +
		НСтр("ru = '""Признак налогоплательщика"" равен 3 (резиденты Калининградской ОЭЗ)';
			|en = '""Признак налогоплательщика"" равен 3 (резиденты Калининградской ОЭЗ)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 13.5';
													|en = '%1 <= 13.5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020016003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С002.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И КодНайден(Показатели.Л02С001.Значение, "03") 
			И Показатели.Л02С002.Значение > 13.5;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_47()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.47';
													|en = '1.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.284 НК РФ';
													|en = 'п.1 ст.284 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в бюджет субъекта РФ в стр.170 Листа 02 = 0%';
			|en = 'Ставка налога в бюджет субъекта РФ в стр.170 Листа 02 = 0%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная величина ставки налога';
														|en = 'Ошибочная величина ставки налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020017003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С001.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = Ложь;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_48()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.48';
													|en = '1.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма исчисленного налога в стр.180 Листа 02 = стр.190 + стр.200 Листа 02';
			|en = 'Сумма исчисленного налога в стр.180 Листа 02 = стр.190 + стр.200 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020018003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020019003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение,
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_49()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.49';
													|en = '1.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма исчисленного налога в стр.190 Листа 02 = стр.120 х стр.150 Листа 02 / 100';
			|en = 'Сумма исчисленного налога в стр.190 Листа 02 = стр.120 х стр.150 Листа 02 / 100'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма исчисленного налога';
														|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020019003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020015003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			Показатели.Л02С002.Значение * Показатели.Л02С003.Значение / 100);
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение,
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_50()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.50';
													|en = '1.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма исчисленного налога в стр.200 Листа 02 = ((стр.120 - стр.130 ) х стр.160 + / 100) + ';
			|en = 'Сумма исчисленного налога в стр.200 Листа 02 = ((стр.120 - стр.130 ) х стр.160 + / 100) + '") +
		НСтр("ru = '(стр.130 х стр.170 / 100) Листа 02, для организаций, не имеющих обособленных подразделений ';
			|en = '(стр.130 х стр.170 / 100) Листа 02, для организаций, не имеющих обособленных подразделений '") +
		НСтр("ru = '(не заполнено Приложение 5 к Листу 02)';
			|en = '(не заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = ((%2 - %3) х %4 / 100) + (%3 х %5 / 100) Итог [%6]';
													|en = '%1 = ((%2 - %3) х %4 / 100) + (%3 х %5 / 100) Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма исчисленного налога';
														|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020020003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020012003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020013003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020016003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020017003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.Л02С004.Округление = Ложь;
	Показатели.Л02С005.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			((Показатели.Л02С002.Значение - Показатели.Л02С003.Значение) * Показатели.Л02С004.Значение / 100)) 
			+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			(Показатели.Л02С003.Значение * Показатели.Л02С005.Значение / 100));
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяБезОП И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, 
			Показатели.Л02С005.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_51()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.51';
													|en = '1.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.288 НК РФ';
													|en = 'п.2 ст.288 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма исчисленного налога в стр.200 Листа 02 = сумма стр.070 всех Приложений 5 к Листу 02, для ';
			|en = 'Сумма исчисленного налога в стр.200 Листа 02 = сумма стр.070 всех Приложений 5 к Листу 02, для '") +
		НСтр("ru = 'организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = 'организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма исчисленного налога';
														|en = 'Ошибочная сумма исчисленного налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020020003");
	Настройки.Вставить("ПоказательП25"		, "П000250007003");
	ПроверкаКС_1_61_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_52()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.52';
													|en = '1.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.210 Листа 02 = стр.220 + стр.230 Листа 02';
			|en = 'Сумма авансовых платежей в стр.210 Листа 02 = стр.220 + стр.230 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020021003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020022003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020023003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_53()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.53';
													|en = '1.53'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1,2 ст.286 НК РФ';
													|en = 'п.1,2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 = (стр.190 - стр.250 + стр.300) ';
			|en = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 = (стр.190 - стр.250 + стр.300) '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные авансовые платежи';
			|en = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные авансовые платежи'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 + %4 Итог [%5]';
													|en = '%1 = %2 - %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_54()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.54';
													|en = '1.54'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 отчета за 1 квартал = стр.330 ';
			|en = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 отчета за 1 квартал = стр.330 '") +
		НСтр("ru = 'Листа 02 отчета за 9 месяцев предыдущего налогового периода';
			|en = 'Листа 02 отчета за 9 месяцев предыдущего налогового периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_55()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.55';
													|en = '1.55'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1,2 ст.286 НК РФ';
													|en = 'п.1,2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 = (стр.190 - стр.250) ';
			|en = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 = (стр.190 - стр.250) '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные ';
			|en = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные '") +
		НСтр("ru = 'авансовые платежи исходя из фактически полученной прибыли';
			|en = 'авансовые платежи исходя из фактически полученной прибыли'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_56()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.56';
													|en = '1.56'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 отчета за январь = 0';
			|en = 'Сумма авансовых платежей в федеральный бюджет в стр.220 Листа 02 отчета за январь = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П000020022003");
	ПроверкаКС_1_60_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_57()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.57';
													|en = '1.57'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1,2 ст.286 НК РФ';
													|en = 'п.1,2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = (стр.200 - стр.260 + стр.310) ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = (стр.200 - стр.260 + стр.310) '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные авансовые платежи';
			|en = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные авансовые платежи'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 + %4 Итог [%5]';
													|en = '%1 = %2 - %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_58()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.58';
													|en = '1.58'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 отчета за 1 квартал = стр.340 ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 отчета за 1 квартал = стр.340 '") +
		НСтр("ru = 'Листа 02 отчета за 9 месяцев предыдущего налогового периода';
			|en = 'Листа 02 отчета за 9 месяцев предыдущего налогового периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_59()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.59';
													|en = '1.59'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1,2 ст.286 НК РФ';
													|en = 'п.1,2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = (стр.200 - стр.260) ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = (стр.200 - стр.260) '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные ';
			|en = 'Листа 02 за предыдущий отчетный период, если налогоплательщик уплачивает ежемесячные '") +
		НСтр("ru = 'авансовые платежи исходя из фактически полученной прибыли';
			|en = 'авансовые платежи исходя из фактически полученной прибыли'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_60()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.60';
													|en = '1.60'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 отчета за январь = 0';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 отчета за январь = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П000020023003");
	ПроверкаКС_1_60_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_60_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, Настройки.Показатель);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 1 И НЕ Показатели.Л02С001.Значение = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_61()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.61';
													|en = '1.61'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1,2 ст.286 НК РФ';
													|en = 'п.1,2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = сумма стр.080 всех Приложений 5 ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.230 Листа 02 = сумма стр.080 всех Приложений 5 '") +
		НСтр("ru = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020023003");
	Настройки.Вставить("ПоказательП25"		, "П000250008003");
	ПроверкаКС_1_61_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_61_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, Настройки.ПоказательЛ02);
	ИменаПоказателей.Вставить("П25С001"		, Настройки.ПоказательП25);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С001, Лист02_5);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И НЕ Показатели.Л02С001.Значение = Показатели.П25С001.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, Показатели.П25С001.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		Показатели.П25С001.Итог = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_62()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.62';
													|en = '1.62'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.240 Листа 02 = стр.250 + стр.260 Листа 02';
			|en = 'Сумма налога в стр.240 Листа 02 = стр.250 + стр.260 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020024003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020025003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020026003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_63()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.63';
													|en = '1.63'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.288 НК РФ';
													|en = 'п.2 ст.288 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в бюджет субъекта РФ в стр.260 Листа 02 = сумма стр.090 всех Приложений 5 ';
			|en = 'Сумма налога в бюджет субъекта РФ в стр.260 Листа 02 = сумма стр.090 всех Приложений 5 '") +
		НСтр("ru = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020026003");
	Настройки.Вставить("ПоказательП25"		, "П000250009003");
	ПроверкаКС_1_61_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_64()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.64';
													|en = '1.64'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.270 Листа 02 = стр.190 - стр.220 - стр.250 - стр.268 Листа 02, когда стр.190 ';
			|en = 'Сумма налога в стр.270 Листа 02 = стр.190 - стр.220 - стр.250 - стр.268 Листа 02, когда стр.190 '") +
		НСтр("ru = 'Листа 02 > стр.220 + стр.250 + стр.268 Листа 02';
			|en = 'Листа 02 > стр.220 + стр.250 + стр.268 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %2 - %3 - %4 - %5 Итог [%6], когда %2 > %3 + %4 + %5 Итог [%7]';
			|en = '%1 = %2 - %3 - %4 - %5 Итог [%6], когда %2 > %3 + %4 + %5 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020027003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020019003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020022003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020025003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020026803");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С002.Значение - Показатели.Л02С003.Значение - Показатели.Л02С004.Значение - 
			Показатели.Л02С005.Значение;
		РасчетнаяСумма2 = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение;
		УсловиеВыполнено = Показатели.Л02С002.Значение > РасчетнаяСумма2;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И УсловиеВыполнено И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, 
			Показатели.Л02С005.Значение, РасчетнаяСумма, РасчетнаяСумма2);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_65()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.65';
													|en = '1.65'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.271 Листа 02 = стр.200 - стр.230 - стр.260 - стр.267 - стр.269 Листа 02, ';
			|en = 'Сумма налога в стр.271 Листа 02 = стр.200 - стр.230 - стр.260 - стр.267 - стр.269 Листа 02, '") +
		НСтр("ru = 'когда стр.200 Листа 02 > стр.230 + стр.260 + стр.267 + стр.269 Листа 02';
			|en = 'когда стр.200 Листа 02 > стр.230 + стр.260 + стр.267 + стр.269 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %2 - %3 - %4 - %5 - %6 Итог [%7], когда %2 > %3 + %4 + %5 + %6 Итог [%8]';
			|en = '%1 = %2 - %3 - %4 - %5 - %6 Итог [%7], когда %2 > %3 + %4 + %5 + %6 Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020027103");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020020003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020023003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020026003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020026703");
	ИменаПоказателей.Вставить("Л02С006"		, "П000020026903");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С002.Значение - Показатели.Л02С003.Значение - Показатели.Л02С004.Значение - 
			Показатели.Л02С005.Значение - Показатели.Л02С006.Значение;
		РасчетнаяСумма2 = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение + 
			Показатели.Л02С006.Значение;
		УсловиеВыполнено = Показатели.Л02С002.Значение > РасчетнаяСумма2;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И УсловиеВыполнено И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, 
			Показатели.Л02С005.Значение, Показатели.Л02С006.Значение, РасчетнаяСумма, РасчетнаяСумма2);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_66()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.66';
													|en = '1.66'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.271 Листа 02 = сумма стр.100 всех Приложений 5 к Листу 02 - сумма стр.110 всех ';
			|en = 'Сумма налога в стр.271 Листа 02 = сумма стр.100 всех Приложений 5 к Листу 02 - сумма стр.110 всех '") +
		НСтр("ru = 'Приложений 5 к Листу 02, когда сумма стр.100 всех Приложений 5 к Листу 02 > сумма стр.110 всех ';
			|en = 'Приложений 5 к Листу 02, когда сумма стр.100 всех Приложений 5 к Листу 02 > сумма стр.110 всех '") +
		НСтр("ru = 'Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение ';
			|en = 'Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение '") +
		НСтр("ru = '5 к Листу 02)';
			|en = '5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %2 > %3';
													|en = '%1 = %2 - %3 Итог [%4], когда %2 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020027103");
	Настройки.Вставить("ПоказательП51"		, "П000250010003");
	Настройки.Вставить("ПоказательП52"		, "П000250011003");
	ПроверкаКС_1_69_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_67()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.67';
													|en = '1.67'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.280 Листа 02 = стр.220 + стр.250 + стр.268 - стр.190 Листа 02, когда стр.190 ';
			|en = 'Сумма налога в стр.280 Листа 02 = стр.220 + стр.250 + стр.268 - стр.190 Листа 02, когда стр.190 '") +
		НСтр("ru = 'Листа 02 < стр.220 + стр.250 + стр.268 Листа 02';
			|en = 'Листа 02 < стр.220 + стр.250 + стр.268 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %3 + %4 +%5 - %2 Итог [%6], когда %2 < %3 + %4 + %5 Итог [%7]';
			|en = '%1 = %3 + %4 +%5 - %2 Итог [%6], когда %2 < %3 + %4 + %5 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020028003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020019003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020022003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020025003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020026803");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение - 
			Показатели.Л02С002.Значение;
		РасчетнаяСумма2 = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение;
		УсловиеВыполнено = Показатели.Л02С002.Значение < РасчетнаяСумма2;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И УсловиеВыполнено И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, 
			Показатели.Л02С005.Значение, РасчетнаяСумма, РасчетнаяСумма2);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_68()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.68';
													|en = '1.68'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.281 Листа 02 = стр.230 + стр.260 + стр.267 + стр.269 - стр.200 Листа 02, ';
			|en = 'Сумма налога в стр.281 Листа 02 = стр.230 + стр.260 + стр.267 + стр.269 - стр.200 Листа 02, '") +
		НСтр("ru = 'когда стр.200 Листа 02 < стр.230 + стр.260 + стр.267 + стр.269 Листа 02';
			|en = 'когда стр.200 Листа 02 < стр.230 + стр.260 + стр.267 + стр.269 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %3 + %4 + %5 + %6 - %2 Итог [%7], когда %2 < %3 + %4 + %5 + %6 Итог [%8]';
			|en = '%1 = %3 + %4 + %5 + %6 - %2 Итог [%7], когда %2 < %3 + %4 + %5 + %6 Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020028103");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020020003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020023003");
	ИменаПоказателей.Вставить("Л02С004"		, "П000020026003");
	ИменаПоказателей.Вставить("Л02С005"		, "П000020026703");
	ИменаПоказателей.Вставить("Л02С006"		, "П000020026903");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение + 
			Показатели.Л02С006.Значение - Показатели.Л02С002.Значение;
		РасчетнаяСумма2 = Показатели.Л02С003.Значение + Показатели.Л02С004.Значение + Показатели.Л02С005.Значение + 
			Показатели.Л02С006.Значение;
		УсловиеВыполнено = Показатели.Л02С002.Значение < РасчетнаяСумма2;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И УсловиеВыполнено И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, Показатели.Л02С004.Значение, 
			Показатели.Л02С005.Значение, Показатели.Л02С006.Значение, РасчетнаяСумма, РасчетнаяСумма2);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_69()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.69';
													|en = '1.69'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.287 НК РФ';
													|en = 'п.1 ст.287 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.281 Листа 02 = сумма стр.110 всех Приложений 5 к Листу 02 - сумма стр.100 всех ';
			|en = 'Сумма налога в стр.281 Листа 02 = сумма стр.110 всех Приложений 5 к Листу 02 - сумма стр.100 всех '") +
		НСтр("ru = 'Приложений 5 к Листу 02, когда сумма стр.110 всех Приложений 5 к Листу 02 > сумма стр.100 всех ';
			|en = 'Приложений 5 к Листу 02, когда сумма стр.110 всех Приложений 5 к Листу 02 > сумма стр.100 всех '") +
		НСтр("ru = 'Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение ';
			|en = 'Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение '") +
		НСтр("ru = '5 к Листу 02)';
			|en = '5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %2 > %3';
													|en = '%1 = %2 - %3 Итог [%4], когда %2 > %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020028103");
	Настройки.Вставить("ПоказательП51"		, "П000250011003");
	Настройки.Вставить("ПоказательП52"		, "П000250010003");
	ПроверкаКС_1_69_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_69_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, Настройки.ПоказательЛ02);
	ИменаПоказателей.Вставить("П25С001"		, Настройки.ПоказательП51);
	ИменаПоказателей.Вставить("П25С002"		, Настройки.ПоказательП52);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
		КонецЦикла;
		
		РасчетнаяСумма = Показатели.П25С001.Итог - Показатели.П25С002.Итог;
		УсловиеВыполнено = Показатели.П25С001.Итог > Показатели.П25С002.Итог;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И УсловиеВыполнено 
			И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.П25С001.Итог, Показатели.П25С002.Итог, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		Показатели.П25С001.Итог = 0;
		Показатели.П25С002.Итог = 0;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_70()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.70';
													|en = '1.70'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.290 Листа 02 = стр.180 Листа 02 - стр.180 ';
			|en = 'Сумма авансовых платежей в стр.290 Листа 02 = стр.180 Листа 02 - стр.180 '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, когда стр.180 Листа 02 - стр.180 ';
			|en = 'Листа 02 за предыдущий отчетный период, когда стр.180 Листа 02 - стр.180 '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период > 0';
			|en = 'Листа 02 за предыдущий отчетный период > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %4 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %4 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_71()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.71';
													|en = '1.71'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.290 Листа 02 отчета за отчетный налоговый период (год) = 0';
			|en = 'Сумма авансовых платежей в стр.290 Листа 02 отчета за отчетный налоговый период (год) = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020029003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 12 И НЕ Показатели.Л02С001.Значение = 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_72()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.72';
													|en = '1.72'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.290 Листа 02 = стр.300 + стр.310 Листа 02';
			|en = 'Сумма авансовых платежей в стр.290 Листа 02 = стр.300 + стр.310 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020029003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020030003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020031003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И НЕ Показатели.Л02С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_73()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.73';
													|en = '1.73'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.300, 310 Листа 02 = 0, когда стр.290 Листа 02 = 0';
			|en = 'Сумма авансовых платежей в стр.300, 310 Листа 02 = 0, когда стр.290 Листа 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, %2 = 0, когда %3 = 0';
													|en = '%1 = 0, %2 = 0, когда %3 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020030003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020031003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020029003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И Показатели.Л02С003.Значение = 0
			И НЕ (Показатели.Л02С001.Значение = 0 И Показатели.Л02С002.Значение = 0);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_74()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.74';
													|en = '1.74'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.290 Листа 02 = 0, когда стр.180 Листа 02 - стр.180 ';
			|en = 'Сумма авансовых платежей в стр.290 Листа 02 = 0, когда стр.180 Листа 02 - стр.180 '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период < 0';
			|en = 'Листа 02 за предыдущий отчетный период < 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 - %3 Итог [%4] < 0';
													|en = '%1 = 0, когда %2 - %3 Итог [%4] < 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_75()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.75';
													|en = '1.75'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.290 Листа 02 отчета за 1 квартал = стр.180 Листа 02, ';
			|en = 'Сумма авансовых платежей в стр.290 Листа 02 отчета за 1 квартал = стр.180 Листа 02, '") +
		НСтр("ru = 'если стр.290 Листа 02 не равна 0';
			|en = 'если стр.290 Листа 02 не равна 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020029003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 3 И ДанныеКС.Периодичность = 3
			И ЗначениеЗаполнено(Показатели.Л02С001.Значение) И НЕ Показатели.Л02С001.Значение = Показатели.Л02С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_76()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.76';
													|en = '1.76'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.300 Листа 02 = стр.190 Листа 02 - стр.190 ';
			|en = 'Сумма авансовых платежей в стр.300 Листа 02 = стр.190 Листа 02 - стр.190 '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, когда стр.290 Листа 02 > 0';
			|en = 'Листа 02 за предыдущий отчетный период, когда стр.290 Листа 02 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %5 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %5 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_77()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.77';
													|en = '1.77'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.310 Листа 02 = стр.200 Листа 02 - стр.200 ';
			|en = 'Сумма авансовых платежей в стр.310 Листа 02 = стр.200 Листа 02 - стр.200 '") +
		НСтр("ru = 'Листа 02 за предыдущий отчетный период, когда стр.290 Листа 02 > 0';
			|en = 'Листа 02 за предыдущий отчетный период, когда стр.290 Листа 02 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %5 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %5 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_78()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.78';
													|en = '1.78'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Возможно влияние погрешности округления';
													|en = 'Возможно влияние погрешности округления'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.310 Листа 02 = сумма стр.120 всех Приложений 5 ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.310 Листа 02 = сумма стр.120 всех Приложений 5 '") +
		НСтр("ru = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)';
			|en = 'к Листу 02, для организаций, имеющих обособленные подразделения (заполнено Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательЛ02"		, "П000020031003");
	Настройки.Вставить("ПоказательП25"		, "П000250012003");
	ПроверкаКС_1_61_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_79()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.79';
													|en = '1.79'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.320 Листа 02 отчета за 9 месяцев = стр.330 + стр.340 Листа 02';
			|en = 'Сумма авансовых платежей в стр.320 Листа 02 отчета за 9 месяцев = стр.330 + стр.340 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020032003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020033003");
	ИменаПоказателей.Вставить("Л02С003"		, "П000020034003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Л02С001.Значение;
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 9 И НЕ Показатели.Л02С001.Значение = 
			РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение, Показатели.Л02С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_80()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.80';
													|en = '1.80'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.320 Листа 02 отчета за 9 месяцев = стр.290 Листа 02';
			|en = 'Сумма авансовых платежей в стр.320 Листа 02 отчета за 9 месяцев = стр.290 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020032003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020029003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02);
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 9 
			И НЕ Показатели.Л02С001.Значение = Показатели.Л02С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, 
			Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_81()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.81';
													|en = '1.81'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Лист 02';
														|en = 'Лист 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Возможно влияние погрешности округления';
													|en = 'Возможно влияние погрешности округления'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.286 НК РФ';
													|en = 'п.2 ст.286 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.340 Листа 02 отчета за 9 месяцев = сумма стр.121 ';
			|en = 'Сумма авансовых платежей в бюджет субъекта РФ в стр.340 Листа 02 отчета за 9 месяцев = сумма стр.121 '") +
		НСтр("ru = 'всех Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено ';
			|en = 'всех Приложений 5 к Листу 02, для организаций, имеющих обособленные подразделения (заполнено '") +
		НСтр("ru = 'Приложение 5 к Листу 02)';
			|en = 'Приложение 5 к Листу 02)'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020034003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250012103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С001, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С001, Лист02_5);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И ДанныеКС.МесОтчета = 9 И НЕ Показатели.Л02С001.Значение = 
			Показатели.П25С001.Итог;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.Л02С001.Значение, Показатели.П25С001.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
		Показатели.П25С001.Итог = 0;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_1

&НаСервере
Процедура ПроверкаКС_1_82()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.82';
													|en = '1.82'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1 к Листу 02';
														|en = 'Приложение 1 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Выручка от реализации в стр.010 Приложения 1 к Листу 02 больше или равна стр.011 + стр.012 + ';
			|en = 'Выручка от реализации в стр.010 Приложения 1 к Листу 02 больше или равна стр.011 + стр.012 + '") +
		НСтр("ru = 'стр.013 + стр.014 Приложения 1 к Листу 02';
			|en = 'стр.013 + стр.014 Приложения 1 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2 + %3 + %4 + %5 Итог [%6]';
													|en = '%1 >= %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выручки от реализации';
														|en = 'Ошибочная сумма выручки от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П21С001"		, "П000210001003");
	ИменаПоказателей.Вставить("П21С002"		, "П000210001103");
	ИменаПоказателей.Вставить("П21С003"		, "П000210001203");
	ИменаПоказателей.Вставить("П21С004"		, "П000210001303");
	ИменаПоказателей.Вставить("П21С005"		, "П000210001403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_1);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П21С001.Значение;
		Настройки.ЭтоОшибка = Показатели.П21С001.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П21С001.Значение, 
			Показатели.П21С002.Значение, Показатели.П21С003.Значение, Показатели.П21С004.Значение, 
			Показатели.П21С005.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_83()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.83';
													|en = '1.83'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1 к Листу 02';
														|en = 'Приложение 1 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Выручка от реализации в стр.030 Приложения 1 к Листу 02 равна стр.340 Приложения 3 к Листу 02';
			|en = 'Выручка от реализации в стр.030 Приложения 1 к Листу 02 равна стр.340 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выручки от реализации';
														|en = 'Ошибочная сумма выручки от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П21С001"		, "П000210003003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230034003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П21С001, Лист02.Лист02_1);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П23С002, Лист02.Лист02_3);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П21С001.Значение = Показатели.П23С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П21С001.Значение, 
			Показатели.П23С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_84()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.84';
													|en = '1.84'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1 к Листу 02';
														|en = 'Приложение 1 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма доходов от реализации в стр.040 Приложения 1 к Листу 02 равна стр.010 + стр.020 + ';
			|en = 'Сумма доходов от реализации в стр.040 Приложения 1 к Листу 02 равна стр.010 + стр.020 + '") +
		НСтр("ru = 'стр.023 + стр.027 + стр.030 Приложения 1 к Листу 02';
			|en = 'стр.023 + стр.027 + стр.030 Приложения 1 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]';
													|en = '%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма доходов от реализации';
														|en = 'Ошибочная сумма доходов от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П21С001"		, "П000210004003");
	ИменаПоказателей.Вставить("П21С002"		, "П000210001003");
	ИменаПоказателей.Вставить("П21С003"		, "П000210002003");
	ИменаПоказателей.Вставить("П21С004"		, "П000210002303");
	ИменаПоказателей.Вставить("П21С005"		, "П000210002703");
	ИменаПоказателей.Вставить("П21С006"		, "П000210003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_1);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П21С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П21С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П21С001.Значение, 
			Показатели.П21С002.Значение, Показатели.П21С003.Значение, Показатели.П21С004.Значение, 
			Показатели.П21С005.Значение, Показатели.П21С006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_85()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.85';
													|en = '1.85'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 1 к Листу 02';
														|en = 'Приложение 1 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма внереализационных доходов в стр.100 Приложения 1 к Листу 02 больше или равна стр.101 + ';
			|en = 'Сумма внереализационных доходов в стр.100 Приложения 1 к Листу 02 больше или равна стр.101 + '") +
		НСтр("ru = 'стр.102 + стр.103 + стр.104 + стр.105 + стр.106 Приложения 1 к Листу 02';
			|en = 'стр.102 + стр.103 + стр.104 + стр.105 + стр.106 Приложения 1 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2 + %3 + %4 + %5 + %6 + %7 Итог [%8]';
													|en = '%1 >= %2 + %3 + %4 + %5 + %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внереализационных доходов';
														|en = 'Ошибочная сумма внереализационных доходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П21С001"		, "П000210010003");
	ИменаПоказателей.Вставить("П21С002"		, "П000210010103");
	ИменаПоказателей.Вставить("П21С003"		, "П000210010203");
	ИменаПоказателей.Вставить("П21С004"		, "П000210010303");
	ИменаПоказателей.Вставить("П21С005"		, "П000210010403");
	ИменаПоказателей.Вставить("П21С006"		, "П000210010503");
	ИменаПоказателей.Вставить("П21С007"		, "П000210010603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_1);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П21С001.Значение;
		Настройки.ЭтоОшибка = Показатели.П21С001.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П21С001.Значение, 
			Показатели.П21С002.Значение, Показатели.П21С003.Значение, Показатели.П21С004.Значение, 
			Показатели.П21С005.Значение, Показатели.П21С006.Значение, Показатели.П21С007.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_2

&НаСервере
Процедура ПроверкаКС_1_86()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.86';
													|en = '1.86'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма косвенных расходов в стр.040 Приложения 2 к Листу 02 больше или равна стр.041 + ';
			|en = 'Сумма косвенных расходов в стр.040 Приложения 2 к Листу 02 больше или равна стр.041 + '") +
		НСтр("ru = 'стр.042 + стр.043 + стр.045 + стр.046 + стр.047 + стр.052 Приложения 2 к Листу 02';
			|en = 'стр.042 + стр.043 + стр.045 + стр.046 + стр.047 + стр.052 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2 + %3 + %4 + %5 + %6 + %7 + %8 Итог [%9]';
													|en = '%1 >= %2 + %3 + %4 + %5 + %6 + %7 + %8 Итог [%9]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма косвенных расходов';
														|en = 'Ошибочная сумма косвенных расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220004003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220004103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220004203");
	ИменаПоказателей.Вставить("П22С004"		, "П000220004303");
	ИменаПоказателей.Вставить("П22С005"		, "П000220004503");
	ИменаПоказателей.Вставить("П22С006"		, "П000220004603");
	ИменаПоказателей.Вставить("П22С007"		, "П000220004703");
	ИменаПоказателей.Вставить("П22С008"		, "П000220005203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение, Показатели.П22С003.Значение, Показатели.П22С004.Значение, 
			Показатели.П22С005.Значение, Показатели.П22С006.Значение, Показатели.П22С007.Значение, 
			Показатели.П22С008.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_87()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.87';
													|en = '1.87'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов в стр.047 Приложения 2 к Листу 02 равна стр.048 + стр.049 + стр.050 + ';
			|en = 'Сумма расходов в стр.047 Приложения 2 к Листу 02 равна стр.048 + стр.049 + стр.050 + '") +
		НСтр("ru = 'стр.051 Приложения 2 к Листу 02';
			|en = 'стр.051 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 Итог [%6]';
													|en = '%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220004703");
	ИменаПоказателей.Вставить("П22С002"		, "П000220004803");
	ИменаПоказателей.Вставить("П22С003"		, "П000220004903");
	ИменаПоказателей.Вставить("П22С004"		, "П000220005003");
	ИменаПоказателей.Вставить("П22С005"		, "П000220005103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П22С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение, Показатели.П22С003.Значение, Показатели.П22С004.Значение, 
			Показатели.П22С005.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_88()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.88';
													|en = '1.88'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов на НИОКР в стр.052 Приложения 2 к Листу 02 больше или равна стр.053 ';
			|en = 'Сумма расходов на НИОКР в стр.052 Приложения 2 к Листу 02 больше или равна стр.053 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов на НИОКР';
														|en = 'Ошибочная сумма расходов на НИОКР'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220005203");
	ИменаПоказателей.Вставить("П22С002"		, "П000220005303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < Показатели.П22С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_89()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.89';
													|en = '1.89'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов на НИОКР в стр.052 Приложения 2 к Листу 02 больше или равна стр.054 ';
			|en = 'Сумма расходов на НИОКР в стр.052 Приложения 2 к Листу 02 больше или равна стр.054 '") +
		НСтр("ru = 'Приложения 2 к Листу 02, если стр.054 > 0';
			|en = 'Приложения 2 к Листу 02, если стр.054 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов на НИОКР';
														|en = 'Ошибочная сумма расходов на НИОКР'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220005203");
	ИменаПоказателей.Вставить("П22С002"		, "П000220005403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П22С002.Значение = 0 И Показатели.П22С001.Значение < Показатели.П22С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_90()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.90';
													|en = '1.90'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов на НИОКР в стр.054 Приложения 2 к Листу 02 больше или равна стр.055 ';
			|en = 'Сумма расходов на НИОКР в стр.054 Приложения 2 к Листу 02 больше или равна стр.055 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов на НИОКР';
														|en = 'Ошибочная сумма расходов на НИОКР'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220005403");
	ИменаПоказателей.Вставить("П22С002"		, "П000220005503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < Показатели.П22С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_91()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.91';
													|en = '1.91'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов в стр.080 Приложения 2 к Листу 02 равна стр.350 Приложения 3 к Листу 02';
			|en = 'Сумма расходов в стр.080 Приложения 2 к Листу 02 равна стр.350 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220008003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230035003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П22С001, Лист02.Лист02_2);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П23С002, Лист02.Лист02_3);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П22С001.Значение = Показатели.П23С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П23С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_92()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.92';
													|en = '1.92'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма признанных расходов в стр.130 Приложения 2 к Листу 02 равна стр.010 + стр.020 + стр.040 + ';
			|en = 'Сумма признанных расходов в стр.130 Приложения 2 к Листу 02 равна стр.010 + стр.020 + стр.040 + '") +
		НСтр("ru = 'стр.059 + стр.060 + стр.061 + стр.070 + стр.072 + стр.080 + стр.090 + стр.100 + стр.110 + ';
			|en = 'стр.059 + стр.060 + стр.061 + стр.070 + стр.072 + стр.080 + стр.090 + стр.100 + стр.110 + '") +
		НСтр("ru = 'стр.120 Приложения 2 к Листу 02';
			|en = 'стр.120 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма признанных расходов';
														|en = 'Ошибочная сумма признанных расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220001003");
	ИменаПоказателей.Вставить("П22С003"		, "П000220002003");
	ИменаПоказателей.Вставить("П22С004"		, "П000220004003");
	ИменаПоказателей.Вставить("П22С005"		, "П000220005903");
	ИменаПоказателей.Вставить("П22С006"		, "П000220006003");
	ИменаПоказателей.Вставить("П22С007"		, "П000220006103");
	ИменаПоказателей.Вставить("П22С008"		, "П000220007003");
	ИменаПоказателей.Вставить("П22С009"		, "П000220007203");
	ИменаПоказателей.Вставить("П22С010"		, "П000220008003");
	ИменаПоказателей.Вставить("П22С011"		, "П000220009003");
	ИменаПоказателей.Вставить("П22С012"		, "П000220010003");
	ИменаПоказателей.Вставить("П22С013"		, "П000220011003");
	ИменаПоказателей.Вставить("П22С014"		, "П000220012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П22С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_93()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.93';
													|en = '1.93'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма амортизации в стр.131 Приложения 2 к Листу 02 больше или равна стр.132 ';
			|en = 'Сумма амортизации в стр.131 Приложения 2 к Листу 02 больше или равна стр.132 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма амортизации';
														|en = 'Ошибочная сумма амортизации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013103");
	ИменаПоказателей.Вставить("П22С002"		, "П000220013203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < Показатели.П22С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_94()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.94';
													|en = '1.94'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма амортизации в стр.133 Приложения 2 к Листу 02 больше или равна стр.134 ';
			|en = 'Сумма амортизации в стр.133 Приложения 2 к Листу 02 больше или равна стр.134 '") +
		НСтр("ru = 'Приложения 2 к Листу 02';
			|en = 'Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма амортизации';
														|en = 'Ошибочная сумма амортизации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013303");
	ИменаПоказателей.Вставить("П22С002"		, "П000220013403");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < Показатели.П22С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_95()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.95';
													|en = '1.95'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 должен быть заполнен, если ';
			|en = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 должен быть заполнен, если '") +
		НСтр("ru = 'стр.131 или стр.133 Приложения 2 к Листу 02 > 0';
			|en = 'стр.131 или стр.133 Приложения 2 к Листу 02 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0';
													|en = '%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан метод начисления амортизации';
														|en = 'Не указан метод начисления амортизации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013503");
	ИменаПоказателей.Вставить("П22С002"		, "П000220013103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220013303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = НЕ (Показатели.П22С002.Значение = 0 И Показатели.П22С003.Значение = 0) 
			И НЕ ЗначениеЗаполнено(Показатели.П22С001.Значение);
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_96()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.96';
													|en = '1.96'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 равен 1, если стр.131 > 0 ';
			|en = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 равен 1, если стр.131 > 0 '") +
		НСтр("ru = 'и стр.133 Приложения 2 к Листу 02 = 0, и код по месту на Титульном листе не равен 218';
			|en = 'и стр.133 Приложения 2 к Листу 02 = 0, и код по месту на Титульном листе не равен 218'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 1';
													|en = '%1 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный метод начисления амортизации';
														|en = 'Ошибочный метод начисления амортизации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013503");
	ИменаПоказателей.Вставить("П22С002"		, "П000220013103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220013303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = НЕ ДанныеКС.ПоМесту218 И Показатели.П22С002.Значение > 0 И Показатели.П22С003.Значение = 0 
			И НЕ Показатели.П22С001.Значение = "1";
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_97()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.97';
													|en = '1.97'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 равен 2, если стр.131 >= 0 ';
			|en = 'Метод начисления амортизации в стр.135 Приложения 2 к Листу 02 равен 2, если стр.131 >= 0 '") +
		НСтр("ru = 'и стр.133 Приложения 2 к Листу 02 > 0, и код по месту на Титульном листе не равен 218';
			|en = 'и стр.133 Приложения 2 к Листу 02 > 0, и код по месту на Титульном листе не равен 218'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 2';
													|en = '%1 = 2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный метод начисления амортизации';
														|en = 'Ошибочный метод начисления амортизации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220013503");
	ИменаПоказателей.Вставить("П22С002"		, "П000220013103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220013303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		Настройки.ЭтоОшибка = НЕ ДанныеКС.ПоМесту218 И Показатели.П22С002.Значение >= 0 И Показатели.П22С003.Значение > 0 
			И НЕ Показатели.П22С001.Значение = "2";
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_98()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.98';
													|en = '1.98'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма внереализационных расходов в стр.200 Приложения 2 к Листу 02 больше или равна стр.201 + ';
			|en = 'Сумма внереализационных расходов в стр.200 Приложения 2 к Листу 02 больше или равна стр.201 + '") +
		НСтр("ru = 'стр.202 + стр.204 + стр.205 + стр.206 Приложения 2 к Листу 02';
			|en = 'стр.202 + стр.204 + стр.205 + стр.206 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2 + %3 + %4 + %5 + %6 Итог [%7]';
													|en = '%1 >= %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внереализационных расходов';
														|en = 'Ошибочная сумма внереализационных расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220020003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220020103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220020203");
	ИменаПоказателей.Вставить("П22С004"		, "П000220020403");
	ИменаПоказателей.Вставить("П22С005"		, "П000220020503");
	ИменаПоказателей.Вставить("П22С006"		, "П000220020603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение, Показатели.П22С003.Значение, Показатели.П22С004.Значение, 
			Показатели.П22С005.Значение, Показатели.П22С006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_99()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.99';
													|en = '1.99'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытков в стр.300 Приложения 2 к Листу 02 больше или равна стр.301 + ';
			|en = 'Сумма убытков в стр.300 Приложения 2 к Листу 02 больше или равна стр.301 + '") +
		НСтр("ru = 'стр.302 Приложения 2 к Листу 02';
			|en = 'стр.302 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2 + %3 Итог [%4]';
													|en = '%1 >= %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внереализационных расходов';
														|en = 'Ошибочная сумма внереализационных расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220030003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220030103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220030203");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = Показатели.П22С001.Значение < РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение, Показатели.П22С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_100()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.100';
													|en = '1.100'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 2 к Листу 02';
														|en = 'Приложение 2 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма корректировки в стр.400 Приложения 2 к Листу 02 равна стр.401 + ';
			|en = 'Сумма корректировки в стр.400 Приложения 2 к Листу 02 равна стр.401 + '") +
		НСтр("ru = 'стр.402 + стр.403 Приложения 2 к Листу 02';
			|en = 'стр.402 + стр.403 Приложения 2 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма корректировки';
														|en = 'Ошибочная сумма корректировки'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П22С001"		, "П000220040003");
	ИменаПоказателей.Вставить("П22С002"		, "П000220040103");
	ИменаПоказателей.Вставить("П22С003"		, "П000220040203");
	ИменаПоказателей.Вставить("П22С004"		, "П000220040303");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_2);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П22С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П22С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П22С001.Значение, 
			Показатели.П22С002.Значение, Показатели.П22С003.Значение, Показатели.П22С004.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_3

&НаСервере
Процедура ПроверкаКС_1_101()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.101';
													|en = '1.101'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3 к Листу 02';
														|en = 'Приложение 3 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Количество объектов реализации в стр.010 Приложения 3 к Листу 02 больше или равно стр.020 ';
			|en = 'Количество объектов реализации в стр.010 Приложения 3 к Листу 02 больше или равно стр.020 '") +
		НСтр("ru = 'Приложения 3 к Листу 02, если стр.010 > 0';
			|en = 'Приложения 3 к Листу 02, если стр.010 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное количество объектов реализации';
														|en = 'Ошибочное количество объектов реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П23С001"		, "П000230001003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_3);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П23С001.Значение = 0 И Показатели.П23С001.Значение < Показатели.П23С002.Значение;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П23С001.Значение, 
			Показатели.П23С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_102()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.102';
													|en = '1.102'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3 к Листу 02';
														|en = 'Приложение 3 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма выручки от реализации в стр.340 Приложения 3 к Листу 02 равна стр.030 + ';
			|en = 'Сумма выручки от реализации в стр.340 Приложения 3 к Листу 02 равна стр.030 + '") +
		НСтр("ru = 'стр.100 + стр.180 + стр.210 - стр.211 + стр.240 Приложения 3 к Листу 02';
			|en = 'стр.100 + стр.180 + стр.210 - стр.211 + стр.240 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 - %6 + %7 Итог [%8]';
													|en = '%1 = %2 + %3 + %4 + %5 - %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выручки от реализации';
														|en = 'Ошибочная сумма выручки от реализации'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П23С001"		, "П000230034003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230003003");
	ИменаПоказателей.Вставить("П23С003"		, "П000230010003");
	ИменаПоказателей.Вставить("П23С004"		, "П000230018003");
	ИменаПоказателей.Вставить("П23С005"		, "П000230021003");
	ИменаПоказателей.Вставить("П23С006"		, "П000230021103");
	ИменаПоказателей.Вставить("П23С007"		, "П000230024003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П23С006.Инверсия = Истина;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_3);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П23С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П23С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П23С001.Значение, 
			Показатели.П23С002.Значение, Показатели.П23С003.Значение, Показатели.П23С004.Значение, 
			Показатели.П23С005.Значение, -Показатели.П23С006.Значение, Показатели.П23С007.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_103()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.103';
													|en = '1.103'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3 к Листу 02';
														|en = 'Приложение 3 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма расходов в стр.350 Приложения 3 к Листу 02 равна стр.040 + ';
			|en = 'Сумма расходов в стр.350 Приложения 3 к Листу 02 равна стр.040 + '") +
		НСтр("ru = 'стр.120 + стр.190 + стр.220 - стр.221 + стр.250 Приложения 3 к Листу 02';
			|en = 'стр.120 + стр.190 + стр.220 - стр.221 + стр.250 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 - %6 + %7 Итог [%8]';
													|en = '%1 = %2 + %3 + %4 + %5 - %6 + %7 Итог [%8]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П23С001"		, "П000230035003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230004003");
	ИменаПоказателей.Вставить("П23С003"		, "П000230012003");
	ИменаПоказателей.Вставить("П23С004"		, "П000230019003");
	ИменаПоказателей.Вставить("П23С005"		, "П000230022003");
	ИменаПоказателей.Вставить("П23С006"		, "П000230022103");
	ИменаПоказателей.Вставить("П23С007"		, "П000230025003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П23С006.Инверсия = Истина;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_3);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П23С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П23С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П23С001.Значение, 
			Показатели.П23С002.Значение, Показатели.П23С003.Значение, Показатели.П23С004.Значение, 
			Показатели.П23С005.Значение, -Показатели.П23С006.Значение, Показатели.П23С007.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_104()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.104';
													|en = '1.104'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 3 к Листу 02';
														|en = 'Приложение 3 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытков в стр.360 Приложения 3 к Листу 02 равна стр.060 + ';
			|en = 'Сумма убытков в стр.360 Приложения 3 к Листу 02 равна стр.060 + '") +
		НСтр("ru = 'стр.150 + стр.201 + стр.230 + стр.260 Приложения 3 к Листу 02';
			|en = 'стр.150 + стр.201 + стр.230 + стр.260 Приложения 3 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]';
													|en = '%1 = %2 + %3 + %4 + %5 + %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытков';
														|en = 'Ошибочная сумма убытков'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П23С001"		, "П000230036003");
	ИменаПоказателей.Вставить("П23С002"		, "П000230006003");
	ИменаПоказателей.Вставить("П23С003"		, "П000230015003");
	ИменаПоказателей.Вставить("П23С004"		, "П000230020103");
	ИменаПоказателей.Вставить("П23С005"		, "П000230023003");
	ИменаПоказателей.Вставить("П23С006"		, "П000230026003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02.Лист02_3);
		
		РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П23С001.Значение;
		Настройки.ЭтоОшибка = НЕ Показатели.П23С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П23С001.Значение, 
			Показатели.П23С002.Значение, Показатели.П23С003.Значение, Показатели.П23С004.Значение, 
			Показатели.П23С005.Значение, Показатели.П23С006.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_4

&НаСервере
Процедура ПроверкаКС_1_105()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.105';
													|en = '1.105'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.010 Приложения 4 к Листу 02 равна стр.160 - стр.161 Приложения 4 к Листу 02 ';
			|en = 'Сумма убытка в стр.010 Приложения 4 к Листу 02 равна стр.160 - стр.161 Приложения 4 к Листу 02 '") +
		НСтр("ru = 'за предыдущий налоговый период';
			|en = 'за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_106()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.106';
													|en = '1.106'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.010 Приложения 4 к Листу 02 равна стр.040 + стр.050 + стр.060 + ';
			|en = 'Сумма убытка в стр.010 Приложения 4 к Листу 02 равна стр.040 + стр.050 + стр.060 + '") +
		НСтр("ru = 'стр.070 + стр.080 + стр.090 + стр.100 + стр.110 + стр.120 + стр.130 Приложения 4 к Листу 02';
			|en = 'стр.070 + стр.080 + стр.090 + стр.100 + стр.110 + стр.120 + стр.130 Приложения 4 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240001003");
	ИменаПоказателей.Вставить("П24С002"		, "П00024М100003_");
	ИменаПоказателей.Вставить("П24С003"		, "П00024М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С001, Лист02_4);
			
			Показатели.П24С002.Итог = 0;
			Для Счетчик = 1 По Лист02_4.КолвоСтрокП00024М1 Цикл
				ЗаполнитьПоказатель(Показатели.П24С002, Лист02_4, Счетчик);
				ЗаполнитьПоказатель(Показатели.П24С003, Лист02_4, Счетчик);
				НомерСтроки = ?(ЗначениеЗаполнено(Показатели.П24С003.Значение), Показатели.П24С003.Значение, "(...)");
				Показатели.П24С002.Представление = "Строка " + НомерСтроки + " Приложения 4 к Листу 02";
				РасшифроватьПоказатель(Показатели.П24С002);
			КонецЦикла;
			
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) 
				И НЕ Показатели.П24С001.Значение = Показатели.П24С002.Итог;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Показатели.П24С002.Итог);
			ДополнитьСтруктуруОшибок(Настройки);
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_107()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.107';
													|en = '1.107'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 01, 03, 04 = ';
			|en = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 01, 03, 04 = '") +
		НСтр("ru = 'стр.100 Листа 02 с признаком налогоплательщика 01, 03, 04, если стр.100 Листа 02 > 0';
			|en = 'стр.100 Листа 02 с признаком налогоплательщика 01, 03, 04, если стр.100 Листа 02 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_109_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_108()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.108';
													|en = '1.108'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 05 = ';
			|en = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 05 = '") +
		НСтр("ru = 'стр.060 Листа 05, если стр.060 Листа 05 > 0';
			|en = 'стр.060 Листа 05, если стр.060 Листа 05 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_110_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_109()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.109';
													|en = '1.109'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 01, 03, 04 = ';
			|en = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 01, 03, 04 = '") +
		НСтр("ru = '0, если стр.100 Листа 02 с признаком налогоплательщика 01, 03, 04 <= 0';
			|en = '0, если стр.100 Листа 02 с признаком налогоплательщика 01, 03, 04 <= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_109_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_109_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020010003");
	ИменаПоказателей.Вставить("П24С001"		, "П000240000100");
	ИменаПоказателей.Вставить("П24С002"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			РасшифроватьПоказатель(Показатели.Л02С001);
			РасшифроватьПоказатель(Показатели.Л02С002);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С001, Лист02_4);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С002, Лист02_4);
			
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) И ДанныеКС.ЭтоГоловная 
				И КодНайден(Показатели.Л02С001.Значение, "01,03,04") И Показатели.П24С001.Значение = Показатели.Л02С001.Значение;
			Если Настройки.НомерКС = "1.107" Тогда
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л02С002.Значение > 0 
					И НЕ Показатели.П24С002.Значение = Показатели.Л02С002.Значение;
			Иначе
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л02С002.Значение <= 0 
					И НЕ Показатели.П24С002.Значение = 0;
			КонецЕсли;
			
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П24С002.Значение, Показатели.Л02С002.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_110()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.110';
													|en = '1.110'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 05 = ';
			|en = 'Сумма налоговой базы в стр.140 Приложения 4 к Листу 02 с признаком налогоплательщика 05 = '") +
		НСтр("ru = '0, если стр.040 Листа 05 <= 0';
			|en = '0, если стр.040 Листа 05 <= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_110_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_110_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л05С001"		, ?(Настройки.НомерКС = "1.108", "П000050006003", "П000050004003"));
	ИменаПоказателей.Вставить("П24С001"		, "П000240000100");
	ИменаПоказателей.Вставить("П24С002"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
			ЗарегистрироватьФормулу(Настройки);
			
			Показатели.Л05С001.Итог = 0;
			Для каждого Лист05 Из ДанныеКС.Лист05 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Л05С001, Лист05);
			КонецЦикла;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С001, Лист02_4);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С002, Лист02_4);
			
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) И ДанныеКС.ЭтоГоловная 
				И Показатели.П24С001.Значение = "05";
			Если Настройки.НомерКС = "1.108" Тогда
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л05С001.Итог > 0 
					И НЕ Показатели.П24С002.Значение = Показатели.Л05С001.Итог;
			Иначе
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л05С001.Итог <= 0 
					И НЕ Показатели.П24С002.Значение = 0;
			КонецЕсли;
			
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П24С002.Значение, Показатели.Л05С001.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_111()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.111';
													|en = '1.111'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 <= стр.140 Приложения 4 к Листу 02';
			|en = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 <= стр.140 Приложения 4 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240015003");
	ИменаПоказателей.Вставить("П24С002"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_4);
		
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) 
				И Показатели.П24С001.Значение > Показатели.П24С002.Значение;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Показатели.П24С002.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_112()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.112';
													|en = '1.112'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.150 - стр.151 Приложения 4 к Листу 02 <= стр.010 Приложения 4 к Листу 02, ';
			|en = 'Сумма убытка в стр.150 - стр.151 Приложения 4 к Листу 02 <= стр.010 Приложения 4 к Листу 02, '") +
		НСтр("ru = 'если стр.010 Приложения 4 к Листу 02 < стр.140 Приложения 4 к Листу 02';
			|en = 'если стр.010 Приложения 4 к Листу 02 < стр.140 Приложения 4 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 - %2 Итог [%3] <= %4, когда %4 < %5';
													|en = '%1 - %2 Итог [%3] <= %4, когда %4 < %5'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240015003");
	ИменаПоказателей.Вставить("П24С002"		, "П000240015103");
	ИменаПоказателей.Вставить("П24С003"		, "П000240001003");
	ИменаПоказателей.Вставить("П24С004"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_4);
			
			Разность = Показатели.П24С001.Значение - Показатели.П24С002.Значение;
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) И Разность > Показатели.П24С003.Значение 
				И Показатели.П24С003.Значение < Показатели.П24С004.Значение;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Показатели.П24С002.Значение, Разность, Показатели.П24С003.Значение, Показатели.П24С004.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_113()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.113';
													|en = '1.113'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчетах за 1 квартал и за год';
													|en = 'Ошибка выдается только в отчетах за 1 квартал и за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 = 0, если стр.140 Приложения 4 к Листу 02 = 0';
			|en = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 = 0, если стр.140 Приложения 4 к Листу 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0 когда %2 = 0';
													|en = '%1 = 0 когда %2 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240015003");
	ИменаПоказателей.Вставить("П24С002"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_4);
		
			Настройки.ЭтоОшибка = (ДанныеКС.МесОтчета = 3 ИЛИ ДанныеКС.МесОтчета = 12) И НЕ Показатели.П24С001.Значение = 0 
				И Показатели.П24С002.Значение = 0;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Показатели.П24С002.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_114()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.114';
													|en = '1.114'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчете за год';
													|en = 'Ошибка выдается только в отчете за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в (стр.160 - стр.161) Приложения 4 к Листу 02 = стр.010 - (стр.150 - стр.151) ';
			|en = 'Сумма убытка в (стр.160 - стр.161) Приложения 4 к Листу 02 = стр.010 - (стр.150 - стр.151) '") +
		НСтр("ru = 'Приложения 4 к Листу 02, если стр.100 Листа 02 >= 0';
			|en = 'Приложения 4 к Листу 02, если стр.100 Листа 02 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 - %2 Итог [%3] = %4 - (%5 - %6) Итог [%7]';
													|en = '%1 - %2 Итог [%3] = %4 - (%5 - %6) Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_115_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_115()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.115';
													|en = '1.115'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчете за год';
													|en = 'Ошибка выдается только в отчете за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в (стр.160 - стр.161) Приложения 4 к Листу 02 = стр.010 - стр.100 ';
			|en = 'Сумма убытка в (стр.160 - стр.161) Приложения 4 к Листу 02 = стр.010 - стр.100 '") +
		НСтр("ru = 'Листа 02, если стр.100 Листа 02 < 0';
			|en = 'Листа 02, если стр.100 Листа 02 < 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 - %2 Итог [%3] = %4 - %5 Итог [%6]';
													|en = '%1 - %2 Итог [%3] = %4 - %5 Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_115_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_115_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240016003");
	ИменаПоказателей.Вставить("П24С002"		, "П000240016103");
	ИменаПоказателей.Вставить("П24С003"		, "П000240001003");
	
	Если Настройки.НомерКС = "1.114" Тогда
		ИменаПоказателей.Вставить("П24С004"		, "П000240015003");
		ИменаПоказателей.Вставить("П24С005"		, "П000240015103");
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Л02С001"		, "П000020010003");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020000100");
	ИменаПоказателей.Вставить("П24С006"		, "П000240000100");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С001, Лист02_4);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С002, Лист02_4);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С003, Лист02_4);
	
			Если Настройки.НомерКС = "1.114" Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С004, Лист02_4);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П24С005, Лист02_4);
			КонецЕсли;
			
			ЗаполнитьПоказатель(Показатели.П24С006, Лист02_4);
			РасшифроватьПоказатель(Показатели.Л02С001);
			Разница1 = Показатели.П24С001.Значение - Показатели.П24С002.Значение;
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловная И ДанныеКС.МесОтчета = 12 
				И Показатели.Л02С002.Значение = Показатели.П24С006.Значение;
			Если Настройки.НомерКС = "1.114" Тогда
				Разница2 = Показатели.П24С003.Значение - Показатели.П24С004.Значение + Показатели.П24С005.Значение;
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л02С001.Значение >= 0 И НЕ Разница1 = Разница2;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
					Показатели.П24С001.Значение, Показатели.П24С002.Значение, Разница1, Показатели.П24С003.Значение, 
					Показатели.П24С004.Значение, Показатели.П24С005.Значение, Разница2);
			Иначе
				Разница3 = Показатели.П24С003.Значение - Показатели.Л02С001.Значение;
				Настройки.ЭтоОшибка = Настройки.ЭтоОшибка И Показатели.Л02С001.Значение < 0 И НЕ Разница1 = Разница3;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
					Показатели.П24С001.Значение, Показатели.П24С002.Значение, Разница1, Показатели.П24С003.Значение, 
					Показатели.Л02С001.Значение, Разница3);
			КонецЕсли;
			
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_116()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.116';
													|en = '1.116'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Ошибка выдается только в отчете за год';
													|en = 'Ошибка выдается только в отчете за год'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.161 Приложения 4 к Листу 02 = стр.136 - стр.151 Приложения 4 к Листу 02';
			|en = 'Сумма убытка в стр.161 Приложения 4 к Листу 02 = стр.136 - стр.151 Приложения 4 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240016103");
	ИменаПоказателей.Вставить("П24С002"		, "П000240013603");
	ИменаПоказателей.Вставить("П24С003"		, "П000240015103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_4);
			
			Разница = Показатели.П24С002.Значение - Показатели.П24С003.Значение;
			Настройки.ЭтоОшибка = ДанныеКС.МесОтчета = 12 И НЕ Показатели.П24С001.Значение = Разница;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Разница);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_5

&НаСервере
Процедура ПроверкаКС_1_117()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.117';
													|en = '1.117'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.030 Приложения 5 к Листу 02 = стр.120 Листа 02';
			|en = 'Сумма налоговой базы в стр.030 Приложения 5 к Листу 02 = стр.120 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020012003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			РасшифроватьПоказатель(Показатели.Л02С002);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Показатели.Л02С001.Значение = Показатели.П25С001.Значение
				И НЕ Показатели.П25С002.Значение = Показатели.Л02С002.Значение;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.Л02С002.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_118()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.118';
													|en = '1.118'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.031 Приложения 5 к Листу 02 = стр.120 Листа 02 - сумма стр.050 ';
			|en = 'Сумма налоговой базы в стр.031 Приложения 5 к Листу 02 = стр.120 Листа 02 - сумма стр.050 '") +
		НСтр("ru = 'всех Приложений 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен""';
			|en = 'всех Приложений 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020012003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250003103");
	ИменаПоказателей.Вставить("П25С003"		, "П000250005003");
	ИменаПоказателей.Вставить("П25С004"		, "П000250000300");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Инверсия = Истина;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Листы02_5Копия = ОбщегоНазначения.СкопироватьРекурсивно(Лист02.Лист02_5);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
			РасшифроватьПоказатель(Показатели.Л02С002);
			
			Показатели.П25С003.Итог = 0;
			Для каждого Лист02_5Копия Из Листы02_5Копия Цикл
				ЗаполнитьПоказатель(Показатели.П25С004, Лист02_5Копия);
				Если Показатели.П25С004.Значение = "3" Тогда
					ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С003, Лист02_5Копия);
				КонецЕсли;
			КонецЦикла;
			
			Разница = Показатели.Л02С002.Значение - (-Показатели.П25С003.Итог);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Показатели.Л02С001.Значение = Показатели.П25С001.Значение
				И НЕ Показатели.П25С002.Значение = Разница;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.Л02С002.Значение, -Показатели.П25С003.Итог, Разница);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_119()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.119';
													|en = '1.119'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма долей налоговых баз в стр.040 всех Приложений 5 к Листу 02 с кодами 1, 2, 4 по реквизиту ';
			|en = 'Сумма долей налоговых баз в стр.040 всех Приложений 5 к Листу 02 с кодами 1, 2, 4 по реквизиту '") +
		НСтр("ru = '""Расчет составлен""= 100%';
			|en = '""Расчет составлен""= 100%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 100';
													|en = '%1 = 100'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма долей налоговых баз';
														|en = 'Ошибочная сумма долей налоговых баз'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С003"		, "П000250004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		Показатели.П25С003.Итог = 0;
		ЕстьРаботающиеОП = Ложь;
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С002, Лист02_5);
			ЕстьРаботающиеОП = ЕстьРаботающиеОП ИЛИ КодНайден(Показатели.П25С002.Значение, "1,2,4");
			
			Если Показатели.П25С001.Значение = Показатели.Л02С001.Значение И ЗначениеЗаполнено(Показатели.П25С002.Значение) 
				И НЕ Показатели.П25С002.Значение = "3" Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С003, Лист02_5);
			КонецЕсли;
		КонецЦикла;
			
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02.РазделЗаполнен_Лист02_5 И ЕстьРаботающиеОП 
			И НЕ Показатели.П25С003.Итог = 100;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П25С003.Итог);
		ДополнитьСтруктуруОшибок(Настройки);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_120()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.120';
													|en = '1.120'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Если налоговая база в стр.120 Листа 02 > стр.120 Листа 02 предыдущего отчетного периода, то стр.040 ';
			|en = 'Если налоговая база в стр.120 Листа 02 > стр.120 Листа 02 предыдущего отчетного периода, то стр.040 '") +
		НСтр("ru = 'Приложения 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен"" = стр.040 Приложения 5 к Листу 02 ';
			|en = 'Приложения 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен"" = стр.040 Приложения 5 к Листу 02 '") +
		НСтр("ru = 'с кодом 3 по реквизиту ""Расчет составлен"" предыдущего отчетного периода';
			|en = 'с кодом 3 по реквизиту ""Расчет составлен"" предыдущего отчетного периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 100';
													|en = '%1 = 100'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная доля налоговой базы';
														|en = 'Ошибочная доля налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_121()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.121';
													|en = '1.121'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.050 Приложения 5 к Листу 02 с кодами 1, 2, 4 по реквизиту ';
			|en = 'Сумма налоговой базы в стр.050 Приложения 5 к Листу 02 с кодами 1, 2, 4 по реквизиту '") +
		НСтр("ru = '""Расчет составлен"" = стр.031 х стр.040 / 100, если стр.031 Приложения 5 к Листу 02 > 0';
			|en = '""Расчет составлен"" = стр.031 х стр.040 / 100, если стр.031 Приложения 5 к Листу 02 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С002"		, "П000250005003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250003103");
	ИменаПоказателей.Вставить("П25С004"		, "П000250004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С004.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			РасчетнаяСумма = Окр(Показатели.П25С003.Значение * Показатели.П25С004.Значение / 100);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И КодНайден(Показатели.П25С001.Значение, "1,2,4") И Показатели.П25С003.Значение > 0 
				И НЕ Показатели.П25С002.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.П25С003.Значение, Показатели.П25С004.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_122()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.122';
													|en = '1.122'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговой базы в стр.050 Приложения 5 к Листу 02 = стр.030 х стр.040 / 100, ';
			|en = 'Сумма налоговой базы в стр.050 Приложения 5 к Листу 02 = стр.030 х стр.040 / 100, '") +
		НСтр("ru = 'если стр.031 Приложения 5 к Листу 02 = 0';
			|en = 'если стр.031 Приложения 5 к Листу 02 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250005003");
	ИменаПоказателей.Вставить("П25С002"		, "П000250003003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250004003");
	ИменаПоказателей.Вставить("П25С004"		, "П000250003103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			РасчетнаяСумма = Окр(Показатели.П25С002.Значение * Показатели.П25С003.Значение / 100);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И Показатели.П25С004.Значение = 0 И НЕ Показатели.П25С001.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение, Показатели.П25С002.Значение, Показатели.П25С003.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_123()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.123';
													|en = '1.123'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налоговых баз в стр.050 всех Приложений 5 к Листу 02 с кодами 1, 2, 3, 4 по реквизиту ';
			|en = 'Сумма налоговых баз в стр.050 всех Приложений 5 к Листу 02 с кодами 1, 2, 3, 4 по реквизиту '") +
		НСтр("ru = '""Расчет составлен"" = стр.120 Листа 02';
			|en = '""Расчет составлен"" = стр.120 Листа 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налоговой базы';
														|en = 'Ошибочная сумма налоговой базы'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020012003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250005003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250000300");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		
		Показатели.П25С002.Итог = 0;
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С003, Лист02_5);
			Если Показатели.П25С001.Значение = Показатели.Л02С001.Значение И ЗначениеЗаполнено(Показатели.П25С003.Значение) Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Л02С002, Лист02);
		Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02.РазделЗаполнен_Лист02_5 
			И НЕ Показатели.П25С002.Итог = Показатели.Л02С002.Значение;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.П25С002.Итог, Показатели.Л02С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_124()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.124';
													|en = '1.124'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка налога в стр.060 Приложения 5 к Листу 02 <= 17%';
			|en = 'Ставка налога в стр.060 Приложения 5 к Листу 02 <= 17%'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 17';
													|en = '%1 <= 17'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка налога';
														|en = 'Ошибочная ставка налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С001.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И Показатели.П25С001.Значение > 17;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_125()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.125';
													|en = '1.125'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.070 Приложения 5 к Листу 02 = стр.050 х стр.060 / 100';
			|en = 'Сумма налога в стр.070 Приложения 5 к Листу 02 = стр.050 х стр.060 / 100'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250007003");
	ИменаПоказателей.Вставить("П25С002"		, "П000250005003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250006003");
	ИменаПоказателей.Вставить("П25С004"		, "П000250005103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Округление = Ложь;
	Показатели.П25С004.Расшифровывать = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			РасчетнаяСумма = Окр(Показатели.П25С002.Значение * Показатели.П25С003.Значение / 100);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И НЕ ЗначениеЗаполнено(Показатели.П25С004.Значение) И НЕ Показатели.П25С001.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение, Показатели.П25С002.Значение, Показатели.П25С003.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_126()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.126';
													|en = '1.126'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.080 Приложения 5 к Листу 02 = стр.070 - стр.090 + стр.120 Приложения 5 к Листу 02 ';
			|en = 'Сумма налога в стр.080 Приложения 5 к Листу 02 = стр.070 - стр.090 + стр.120 Приложения 5 к Листу 02 '") +
		НСтр("ru = 'предыдущего отчетного периода, если налогоплательщик уплачивает ежемесячные авансовые платежи';
			|en = 'предыдущего отчетного периода, если налогоплательщик уплачивает ежемесячные авансовые платежи'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_127()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.127';
													|en = '1.127'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.080 Приложения 5 к Листу 02 за 1 квартал = стр.121 Приложения 5 к Листу 02 ';
			|en = 'Сумма налога в стр.080 Приложения 5 к Листу 02 за 1 квартал = стр.121 Приложения 5 к Листу 02 '") +
		НСтр("ru = 'за 9 месяцев предыдущего налогового периода';
			|en = 'за 9 месяцев предыдущего налогового периода'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_128()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.128';
													|en = '1.128'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.080 Приложения 5 к Листу 02 = стр.070 - стр.090 Приложения 5 к Листу 02 ';
			|en = 'Сумма налога в стр.080 Приложения 5 к Листу 02 = стр.070 - стр.090 Приложения 5 к Листу 02 '") +
		НСтр("ru = 'предыдущего отчетного периода, если налогоплательщик уплачивает авансовые платежи исходя ';
			|en = 'предыдущего отчетного периода, если налогоплательщик уплачивает авансовые платежи исходя '") +
		НСтр("ru = 'из фактически полученной прибыли';
			|en = 'из фактически полученной прибыли'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_129()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.129';
													|en = '1.129'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.080 Приложения 5 к Листу за январь = 0';
			|en = 'Сумма налога в стр.080 Приложения 5 к Листу за январь = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250008003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И ДанныеКС.МесОтчета = 1 И НЕ Показатели.П25С001.Значение = 0;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_130()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.130';
													|en = '1.130'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.090 Приложения 5 к Листу 02 = стр.260 Листа 02 х стр.040 Приложения 5 к ';
			|en = 'Сумма налога в стр.090 Приложения 5 к Листу 02 = стр.260 Листа 02 х стр.040 Приложения 5 к '") +
		НСтр("ru = 'Листу 02 / 100';
			|en = 'Листу 02 / 100'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020026003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250009003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
			РасшифроватьПоказатель(Показатели.Л02С002);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С003, Лист02_5);
			
			РасчетнаяСумма = Окр(Показатели.Л02С002.Значение * Показатели.П25С003.Значение / 100);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Показатели.Л02С001.Значение = Показатели.П25С001.Значение
				И НЕ Показатели.П25С002.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.Л02С002.Значение, Показатели.П25С003.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_131()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.131';
													|en = '1.131'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.100 Приложения 5 к Листу 02 = стр.070 - стр.080 - стр.090 - стр.097 - стр.098 Прил';
			|en = 'Сумма налога в стр.100 Приложения 5 к Листу 02 = стр.070 - стр.080 - стр.090 - стр.097 - стр.098 Прил'") +
		НСтр("ru = 'ожения 5 к Листу 02, если (стр.080 + стр.090 + стр.097 + стр.098) < стр.070 Приложения 5 к Листу 02';
			|en = 'ожения 5 к Листу 02, если (стр.080 + стр.090 + стр.097 + стр.098) < стр.070 Приложения 5 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %2 - %3 - %4 - %5 - %6 Итог [%7], когда (%3 + %4 + %5 + %6) Итог [%8] < %2';
			|en = '%1 = %2 - %3 - %4 - %5 - %6 Итог [%7], когда (%3 + %4 + %5 + %6) Итог [%8] < %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_132_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_132()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.132';
													|en = '1.132'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма налога в стр.110 Приложения 5 к Листу 02 = стр.080 + стр.090 + стр.097 + стр.098 - стр.070 Прил';
			|en = 'Сумма налога в стр.110 Приложения 5 к Листу 02 = стр.080 + стр.090 + стр.097 + стр.098 - стр.070 Прил'") +
		НСтр("ru = 'ожения 5 к Листу 02, если (стр.080 + стр.090 + стр.097 + стр.098) > стр.070 Приложения 5 к Листу 02';
			|en = 'ожения 5 к Листу 02, если (стр.080 + стр.090 + стр.097 + стр.098) > стр.070 Приложения 5 к Листу 02'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %3 + %4 + %5 + %6 - %2 Итог [%7], когда (%3 + %4 + %5 + %6) Итог [%8] > %2';
			|en = '%1 = %3 + %4 + %5 + %6 - %2 Итог [%7], когда (%3 + %4 + %5 + %6) Итог [%8] > %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_1_132_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_132_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, ?(Настройки.НомерКС = "1.131", "П000250010003", "П000250011003"));
	ИменаПоказателей.Вставить("П25С002"		, "П000250007003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250008003");
	ИменаПоказателей.Вставить("П25С004"		, "П000250009003");
	ИменаПоказателей.Вставить("П25С005"		, "П000250009703");
	ИменаПоказателей.Вставить("П25С006"		, "П000250009803");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			РасчетнаяСумма1 = Показатели.П25С003.Значение + Показатели.П25С004.Значение + Показатели.П25С005.Значение + 
				Показатели.П25С006.Значение;
			Если Настройки.НомерКС = "1.131" Тогда
				РасчетнаяСумма2 = Показатели.П25С002.Значение - РасчетнаяСумма1;
				Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
					И РасчетнаяСумма1 < Показатели.П25С002.Значение И НЕ Показатели.П25С001.Значение = РасчетнаяСумма2;
			Иначе
				РасчетнаяСумма2 = РасчетнаяСумма1 -Показатели.П25С002.Значение;
				Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
					И РасчетнаяСумма1 > Показатели.П25С002.Значение И НЕ Показатели.П25С001.Значение = РасчетнаяСумма2;
			КонецЕсли;
			
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение, Показатели.П25С002.Значение, Показатели.П25С003.Значение, Показатели.П25С004.Значение, 
				Показатели.П25С005.Значение, Показатели.П25С006.Значение, РасчетнаяСумма2, РасчетнаяСумма1);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_133()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.133';
													|en = '1.133'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = стр.310 Листа 02 х стр.040 Приложения 5 ';
			|en = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = стр.310 Листа 02 х стр.040 Приложения 5 '") +
		НСтр("ru = 'к Листу 02 / 100, за исключением Приложений 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен""';
			|en = 'к Листу 02 / 100, за исключением Приложений 5 к Листу 02 с кодом 3 по реквизиту ""Расчет составлен""'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 / 100 Итог [%4]';
													|en = '%1 = %2 х %3 / 100 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Л02С001"		, "П000020000100");
	ИменаПоказателей.Вставить("Л02С002"		, "П000020031003");
	ИменаПоказателей.Вставить("П25С001"		, "П000250000100");
	ИменаПоказателей.Вставить("П25С002"		, "П000250012003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250004003");
	ИменаПоказателей.Вставить("П25С004"		, "П000250000300");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П25С003.Округление = Ложь;
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		ЗаполнитьПоказатель(Показатели.Л02С001, Лист02);
		ЗаполнитьПоказатель(Показатели.Л02С002, Лист02);
		
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
		
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьПоказатель(Показатели.П25С001, Лист02_5);
			ЗаполнитьПоказатель(Показатели.П25С004, Лист02_5);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С002, Лист02_5);
			РасшифроватьПоказатель(Показатели.Л02С002);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П25С003, Лист02_5);
			
			РасчетнаяСумма = Окр(Показатели.Л02С002.Значение * Показатели.П25С003.Значение / 100);
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 
				И КодНайден(Показатели.П25С004.Значение, "1,2,4") И Показатели.П25С001.Значение = Показатели.Л02С001.Значение 
				И НЕ Показатели.П25С002.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.Л02С002.Значение, Показатели.П25С003.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_134()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.134';
													|en = '1.134'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = стр.121 Приложения 5 к ';
			|en = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = стр.121 Приложения 5 к '") +
		НСтр("ru = 'Листу 02, если отчет за 9 месяцев и стр.120 Приложения 5 к Листу 02 заполнена';
			|en = 'Листу 02, если отчет за 9 месяцев и стр.120 Приложения 5 к Листу 02 заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250012003");
	ИменаПоказателей.Вставить("П25С002"		, "П000250012103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 И ДанныеКС.МесОтчета = 9
				И ЗначениеЗаполнено(Показатели.П25С001.Значение) И НЕ Показатели.П25С001.Значение = Показатели.П25С002.Значение;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С001.Значение, Показатели.П25С002.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_135()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.135';
													|en = '1.135'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 5 к Листу 02';
														|en = 'Приложение 5 к Листу 02'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = 0 и стр.121 Приложения 5 к ';
			|en = 'Сумма авансовых платежей в стр.120 Приложения 5 к Листу 02 = 0 и стр.121 Приложения 5 к '") +
		НСтр("ru = 'Листу 02 = 0, если код реквизита ""Расчет составлен"" = 3';
			|en = 'Листу 02 = 0, если код реквизита ""Расчет составлен"" = 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0; %2 = 0';
													|en = '%1 = 0; %2 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма авансовых платежей';
														|en = 'Ошибочная сумма авансовых платежей'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П25С001"		, "П000250000300");
	ИменаПоказателей.Вставить("П25С002"		, "П000250012003");
	ИменаПоказателей.Вставить("П25С003"		, "П000250012103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_5 Из Лист02.Лист02_5 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_5);
			
			Настройки.ЭтоОшибка = ДанныеКС.ЭтоГоловнаяСОП И Лист02_5.РазделЗаполнен_Лист02_5 И Показатели.П25С001.Значение = "3"
				И (ЗначениеЗаполнено(Показатели.П25С002.Значение) ИЛИ ЗначениеЗаполнено(Показатели.П25С003.Значение));
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
				Показатели.П25С002.Значение, Показатели.П25С003.Значение);
			ДополнитьСтруктуруОшибок(Настройки);

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Нерегламентные

&НаСервере
Процедура ПроверкаКС_1_01_доп()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1.доп';
													|en = '1.1.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Приложение 4 к Листу 02';
														|en = 'Приложение 4 к Листу 02'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = '2017 - 2021';
													|en = '2017 - 2021'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.2 ст.283 НК РФ';
													|en = 'п.2 ст.283 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 должна <= стр.140 Приложения 4 к Листу 02 / 2';
			|en = 'Сумма убытка в стр.150 Приложения 4 к Листу 02 должна <= стр.140 Приложения 4 к Листу 02 / 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2 / 2 Итог [%3]';
													|en = '%1 <= %2 / 2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма убытка';
														|en = 'Ошибочная сумма убытка'"));
	Заголовки.Вставить("ШаблонДопСведений"	, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеКС.ГодОтчета >= 2022 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П24С001"		, "П000240015003");
	ИменаПоказателей.Вставить("П24С002"		, "П000240014003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого Лист02 Из ДанныеКС.Лист02 Цикл
		Для каждого Лист02_4 Из Лист02.Лист02_4 Цикл
			
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, Лист02_4);
	
			РасчетнаяСумма = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
				Показатели.П24С002.Значение / 2);
			Настройки.ЭтоОшибка = Показатели.П24С001.Значение > РасчетнаяСумма;
			Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, Показатели.П24С001.Значение, 
				Показатели.П24С002.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ОбработатьНаличиеОтсутствиеОбособленныхПодразделений(ИмяРаздела)
	
	ЕстьОбособленныеПодразделения = Ложь;
	
	Если ИмяРаздела = "Титульный" Тогда
		ПоМесту = СокрЛП(ТабличныйДокумент.Область("ПоМесту").Значение);
	Иначе
		ПоМесту = СокрЛП(СтруктураДанныхТитульный["ПоМесту"]);
	КонецЕсли;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
	Если ПоМесту = "218" Тогда
		ЕстьОбособленныеПодразделения = Истина;
	Иначе
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			Листы02_5 = Лист02.Строки[4].Строки;
			Если ВеткаУдовлетворяющаяУсловиямПоиска(Листы02_5, Новый Структура("ПризнакВключения", "V")) <> Неопределено Тогда
				ЕстьОбособленныеПодразделения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОбособленныеПодразделения Тогда
		
		// Заполнение стр.160, стр.170 не предусмотрено.
		Для каждого Лист02 Из ДеревоДанных.Строки Цикл
			Лист02.Данные.Вставить("П000020016003", 0);
			Лист02.Данные.Вставить("П000020017003", 0);
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьОбособленныеПодразделения", ЕстьОбособленныеПодразделения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначенияПоказателейНеЗаполняемыхПоУсловию()
	
	ПериодичностьКвартал = СтруктураРеквизитовФормы.мПериодичность
	= СтруктураРеквизитовФормы.ПеречислениеПериодичностьКвартал;
	
	ПериодичностьМесяц = СтруктураРеквизитовФормы.мПериодичность
	= СтруктураРеквизитовФормы.ПеречислениеПериодичностьМесяц;
	
	ОтчетныйМесяц = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ОтчетЗаГод = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
	Для каждого Лист02 Из ДеревоДанных.Строки Цикл
		
		// Заполнение стр.160, стр.170 Листа 02 не предусмотрено, если есть обособленные подразделения.
		// Их обнуление выполняется в "ОбработатьНаличиеОтсутствиеОбособленныхПодразделений".
		
		ПризнакНП = СокрЛП(Лист02.Данные["П000020000100"]);
		
		Если НЕ ((ПризнакНП = "06" ИЛИ ПризнакНП = "18") И НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
			Лист02.Данные.Вставить("П000020012000", "");
		КонецЕсли;
		
		Если НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
			// Заполнение стр.290, стр.300, стр.310 не предусмотрено.
			Лист02.Данные.Вставить("П000020029003", 0);
			Лист02.Данные.Вставить("П000020030003", 0);
			Лист02.Данные.Вставить("П000020031003", 0);
		КонецЕсли;
		
		Если НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
			// Заполнение стр.320, стр.330, стр.340 не предусмотрено.
			Лист02.Данные.Вставить("П000020032003", 0);
			Лист02.Данные.Вставить("П000020033003", 0);
			Лист02.Данные.Вставить("П000020034003", 0);
		КонецЕсли;
		
		Если ОтчетныйМесяц <> 12 Тогда
			// Заполнение стр.357, стр.358, стр.359 не предусмотрено.
			Лист02.Данные.Вставить("П000020035703", 0);
			Лист02.Данные.Вставить("П000020035803", 0);
			Лист02.Данные.Вставить("П000020035903", 0);
		КонецЕсли;
		
		Для каждого Лист02_5 Из Лист02.Строки[4].Строки Цикл
			
			РС = СокрЛП(Лист02_5.Данные["П000250000300"]);
			
			Если РС = "3" ИЛИ НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
				// Заполнение стр.120 не предусмотрено.
				Лист02_5.Данные.Вставить("П000250012003", 0);
			КонецЕсли;
			
			Если РС = "3"
				ИЛИ НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
				// Заполнение стр.121 не предусмотрено.
				Лист02_5.Данные.Вставить("П000250012103", 0);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого Лист02_6 Из Лист02.Строки[5].Строки Цикл
			
			Если НЕ (ПериодичностьКвартал И ОтчетныйМесяц <> 12) Тогда
				// Заполнение стр.120 не предусмотрено.
				Лист02_6.Данные.Вставить("П000260012003", 0);
			КонецЕсли;
			
			Если НЕ ((ПериодичностьКвартал И ОтчетныйМесяц = 9) ИЛИ (ПериодичностьМесяц И ОтчетныйМесяц = 11)) Тогда
				// Заполнение стр.121 не предусмотрено.
				Лист02_6.Данные.Вставить("П000260012103", 0);
			КонецЕсли;
			
		КонецЦикла;
		
		Лист02_6бА = Лист02.Строки[6].Строки[0];
		
		Если НЕ (ОкрЧФ(ЭтаФорма, Лист02_6бА.Данные["П0026б0004003"]) < 0
			И ОкрЧФ(ЭтаФорма, Лист02_6бА.Данные["П0026б0014003"]) > 0) Тогда
			// Заполнение стр.041 не предусмотрено.
			Лист02_6бА.Данные.Вставить("П0026б0004103", 0);
		КонецЕсли;
		
		Для каждого Лист02_6бБ Из Лист02.Строки[7].Строки Цикл
			
			Если НЕ ОтчетЗаГод Тогда
				// Заполнение строк 290, 291, 360, 361 не предусмотрено.
				Лист02_6бБ.Данные.Вставить("П0026б0029003", 0);
				Лист02_6бБ.Данные.Вставить("П0026б0029103", 0);
				Лист02_6бБ.Данные.Вставить("П0026б0036003", 0);
				Лист02_6бБ.Данные.Вставить("П0026б0036103", 0);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист02"]);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   СтруктураРеквизитовФормы,
																   ДатаПодписи,
																   ТабличныйДокумент,
																   ВПрограммеИзмененаДатаПодписи);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИзменитьОКТМОРазделов(СтруктураРеквизитовФормы.ОКТМОДляРазделов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение
			+ Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1_1" ИЛИ Ячейка.Раздел = "Раздел1_2" ИЛИ Ячейка.Раздел = "Раздел1_3"
		ИЛИ Ячейка.Раздел = "Лист06" ИЛИ Ячейка.Раздел = "Лист07" ИЛИ Ячейка.Раздел = "Приложение1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Лист02" ИЛИ Ячейка.Раздел = "Лист03А" ИЛИ Ячейка.Раздел = "Лист03Б"
		ИЛИ Ячейка.Раздел = "Лист04" ИЛИ Ячейка.Раздел = "Лист05" ИЛИ Ячейка.Раздел = "Лист08"
		ИЛИ Ячейка.Раздел = "Лист09" ИЛИ Ячейка.Раздел = "Приложение2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Лист02_1" ИЛИ Ячейка.Раздел = "Лист02_2" ИЛИ Ячейка.Раздел = "Лист02_3"
		ИЛИ Ячейка.Раздел = "Лист02_6бА" Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если Ячейка.Раздел = НайденнаяПодчСтраница.КолонкаРазделыОтчетаСокрНаим Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Лист02_4" ИЛИ Ячейка.Раздел = "Лист02_5" ИЛИ Ячейка.Раздел = "Лист02_6"
		ИЛИ Ячейка.Раздел = "Лист02_6а" ИЛИ Ячейка.Раздел = "Лист02_6бБ" ИЛИ Ячейка.Раздел = "Лист02_7А"
		ИЛИ Ячейка.Раздел = "Лист02_7Б" ИЛИ Ячейка.Раздел = "Лист02_7В" ИЛИ Ячейка.Раздел = "Лист02_7Г" Тогда
		
		ИмяКорневогоРаздела = ИмяКорневогоРаздела(ЭтаФорма, Ячейка.Раздел);
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяКорневогоРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						Для каждого НайденныйПодчРаздел Из НайденнаяСтраница.ПолучитьЭлементы() Цикл
							Если НайденныйПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
								Для каждого НайденнаяПодчСтраница Из НайденныйПодчРаздел.ПолучитьЭлементы() Цикл
									Если НайденнаяПодчСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
										
										Если Ячейка.Раздел = "Лист02_6а" Тогда
											
											Для каждого НайденныйРаздел_Лист02_6а Из НайденнаяПодчСтраница.ПолучитьЭлементы() Цикл
												Если НайденныйРаздел_Лист02_6а.КолонкаНомерСтраницыРазделаОтчета
													= Число(НомераСтрокМногоуровнегоРаздела[3]) Тогда
													Для каждого НайденнаяСтраница_Лист02_6а Из НайденныйРаздел_Лист02_6а.ПолучитьЭлементы() Цикл
														Если НайденнаяСтраница_Лист02_6а.КолонкаНомерСтраницыРазделаОтчета
															= Число(НомераСтрокМногоуровнегоРаздела[4]) Тогда
															СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
															Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница_Лист02_6а.ПолучитьИдентификатор();
															Прервать;
														КонецЕсли;
													КонецЦикла;
													Прервать;
												КонецЕсли;
											КонецЦикла;
											Прервать;
											
										Иначе
											
											СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
											Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
											Прервать;
											
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"), СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						РодительскаяВетка = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1];
						
						ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(ЭлементРаздел, СтруктураРаздела, РодительскаяВетка);
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(ЭлементРаздел, Знач СтруктураРаздела, Знач РодительскаяВетка)
	
	Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
		КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
		
		Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
			
			ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
			СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
			
			ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
			НаимСтраницы = ?(СтруктураПодчРаздела.Свойство("НаимСтраницы"),
			СтруктураПодчРаздела["НаимСтраницы"], "Стр. ");
			ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы;
			ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяПодчРаздела;
			ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
			
			Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
				
				КолСтрокВДеревеДанныхПодчРаздела = Макс(РодительскаяВетка.Строки[ИндПодчРаздела].Строки.Количество(), 1);
				
				Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
					
					ЭлементПодчПодчРаздел = ЭлементПодчРаздел.ПолучитьЭлементы().Добавить();
					НаимСтраницы = "Стр. ";
					ЭлементПодчПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы
					+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
					ЭлементПодчПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
					ЭлементПодчПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
					
					ПодчРодительскаяВетка = РодительскаяВетка.Строки[ИндПодчРаздела].Строки[НомерСтраницыПодчРаздела - 1];
					
					ВывестиВДеревоРазделовОтчетаПодчиненныеЭлементы(
						ЭлементПодчПодчРаздел, СтруктураПодчРаздела, ПодчРодительскаяВетка);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			РодительЭлемента = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Пока РодительЭлемента <> Неопределено Цикл
				НомерСтраницы = РодительЭлемента.КолонкаНомерСтраницыРазделаОтчета;
				РодительЭлемента = РодительЭлемента.ПолучитьРодителя();
				Если РодительЭлемента <> Неопределено Тогда
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, НомерСтраницы);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоНомеров = НовыеНомераСтрокМногоуровнегоРаздела.Количество();
			Если (КоличествоНомеров / 2 = Цел(КоличествоНомеров / 2)) Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				
				ЭлементыТекущегоУровня = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
				Если ЭлементыТекущегоУровня[0].КолонкаРазделыОтчетаСокрНаим
					= ЭлементыТекущегоУровня[1].КолонкаРазделыОтчетаСокрНаим Тогда
					
					КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	// Разворачивание первой страницы раздела Лист 02.
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
	РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "Лист02");
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.РазделыОтчета.Развернуть(НайденнаяСтрока.ПолучитьИдентификатор());
		ЭлементНайденнойСтроки = НайденнаяСтрока.ПолучитьЭлементы()[0];
		Элементы.РазделыОтчета.Развернуть(ЭлементНайденнойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

#Область ЗаполнениеПоДаннымУведомленияКИК

&НаСервере
Функция ЕстьДоступныеУведомленияПоКИК()
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК)
		|	И УведомлениеОСпецрежимахНалогообложения.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Возврат (Выборка.Количество() > 0);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ПодобратьИзУведомленияКИКЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Для Каждого КЗ Из Результат Цикл 
			ТабличныйДокумент.Области[КЗ.Ключ].Значение = КЗ.Значение;
		КонецЦикла;
		
		ОбластьПризнакВключения = ТабличныйДокумент.Области["ПризнакВключения"];
		ОбластьПризнакВключения.Значение = "";
		ТабличныйДокументВыбор(Элементы.ТабличныйДокумент, ОбластьПризнакВключения, Ложь);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
