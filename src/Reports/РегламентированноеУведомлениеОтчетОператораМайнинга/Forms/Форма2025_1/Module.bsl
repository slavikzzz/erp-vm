#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОтчетОператораМайнинга;
	УведомлениеОСпецрежимахНалогообложения.НачальныеОперацииПриСозданииНаСервере(ЭтотОбъект);
	УведомлениеОСпецрежимахНалогообложения.СформироватьСпискиВыбора(ЭтотОбъект, "СпискиВыбора2025_1");
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗагрузитьДанные(Параметры.Ключ);
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗагрузитьДанные(Параметры.ЗначениеКопирования);
	Иначе
		Объект.РегистрацияВИФНС = Документы.УведомлениеОСпецрежимахНалогообложения.РегистрацияВФНСОрганизации(Объект.Организация);
		СформироватьДеревоСтраниц();
		УведомлениеОСпецрежимахНалогообложения.СформироватьСтруктуруДанныхУведомленияНовогоОбразца(ЭтотОбъект);
		ЗаполнитьНачальныеДанные();
	КонецЕсли;
	
	Заголовок = УведомлениеОСпецрежимахНалогообложения.ДополнитьЗаголовокУведомления(Заголовок, Объект.Организация);
	УведомлениеОСпецрежимахНалогообложения.СпрятатьКнопкиВыгрузкиОтправкиУНеактуальныхФорм(ЭтотОбъект);
	ЭтотОбъект["ТекущееИДНаименования"] = "Титульная";
	ПоказатьТекущуюСтраницу("Титульная_2025", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "УведомлениеОСпецрежимахНалогообложения_НавигацияПоОшибкам" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Найти(Параметр.ИмяСтраницы);
		УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаОповещенияНавигацииПоОшибкам(ЭтотОбъект, Параметр, Источник);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеУведомленияПриИзмененииСодержимогоОбласти(Элемент, Область)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПриИзмененииСодержимогоОбласти(ЭтотОбъект, Область, Истина);
	
	Если Область.Имя = "ДАТА_ПОДПИСИ" Тогда
		Объект.ДатаПодписи = Область.Значение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеУведомленияВыбор(Элемент, Область, СтандартнаяОбработка)
	Если УведомлениеОСпецрежимахНалогообложенияКлиент.ТиповойВыбор(ЭтотОбъект, Область, СтандартнаяОбработка) Или ЭтотОбъект["РучнойВвод"] Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда 
		УведомлениеОСпецрежимахНалогообложенияКлиент.ПредставлениеУведомленияВыбор(ЭтотОбъект, Область, СтандартнаяОбработка, Истина);
	КонецЕсли;
	
	Если Область.Имя = "КодНО" Тогда 
		СтандартнаяОбработка = Ложь;
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораРегистрацииВИФНС(ЭтотОбъект, Область.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что уведомление уже сдано?';
													|en = 'Вы уверены, что уведомление уже сдано?'"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеМайнинга

&НаКлиенте
Процедура ДанныеМайнингаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДанныеМайнингаОписание" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеНового", Ложь);
		ПараметрыФормы.Вставить("ДанныеДляРедактирования", Элемент.ТекущиеДанные.Данные);
		ПараметрыФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		ПараметрыФормы.Вставить("ЭтоНовоеУведомление", ЭтотОбъект["ЭтоНовоеУведомление"]);
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаСвМайнинг"), ПараметрыФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РедактированиеСвМайнингЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМайнингаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Элементы.ДеревоОбъектов.ТекущаяСтрока <> Неопределено
		И ДеревоОбъектов.НайтиПоИдентификатору(Элементы.ДеревоОбъектов.ТекущаяСтрока).ПолучитьРодителя() <> Неопределено Тогда 
		Добавить(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМайнингаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Удалить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеМайнингаОписаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаВДереве = ДеревоОбъектов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеНового", Ложь);
	ПараметрыФормы.Вставить("Данные", СтрокаВДереве.Данные);
	ПараметрыФормы.Вставить("СтрокаДляРедактирования", ВыбраннаяСтрока);
	
	Если СтрокаВДереве.Тип = "1" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаВводаАдресаОбъекта"), ПараметрыФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РедактированиеАдресЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрокаВДереве.Тип = "2" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаСвМайнерЮЛ"), ПараметрыФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РедактированиеФормаСвМайнерЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрокаВДереве.Тип = "3" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаСвМайнерФЛ"), ПараметрыФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РедактированиеФормаСвМайнерЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтрокаВДереве.Тип = "4" Тогда 
		ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаСвМайнерИП"), ПараметрыФормы, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РедактированиеФормаСвМайнерЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Элементы.ДеревоОбъектовДобавитьМайнераФЛ.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДеревоОбъектовДобавитьМайнераЮЛ.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДеревоОбъектовДобавитьМайнераИП.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДеревоОбъектовУдалитьОбъект.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДанныеМайнингаДобавить.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДанныеМайнингаУдалить.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДанныеМайнингаКонтекстноеМенюДобавить.Доступность = (ТекущиеДанные <> Неопределено);
	Элементы.ДанныеМайнингаКонтекстноеМенюУдалить.Доступность = (ТекущиеДанные <> Неопределено);
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ДанныеМайнинга.Очистить();
		Элементы.ДанныеМайнингаДобавить.Доступность = Истина;
		Элементы.ДанныеМайнингаКонтекстноеМенюДобавить.Доступность = Истина;
		
		Если ТекущиеДанные.Тип = "2" Или Элемент.ТекущиеДанные.Тип = "3" Или Элемент.ТекущиеДанные.Тип = "4" Тогда 
			Для Каждого Стр Из ДанныеМайнингаОбщие Цикл 
				Если Стр.УИД = Элемент.ТекущиеДанные.УИД Тогда 
					ЗаполнитьЗначенияСвойств(ДанныеМайнинга.Добавить(), Стр);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Элементы.ДанныеМайнингаДобавить.Доступность = Ложь;
			Элементы.ДанныеМайнингаУдалить.Доступность = Ложь;
			Элементы.ДанныеМайнингаКонтекстноеМенюДобавить.Доступность = Ложь;
			Элементы.ДанныеМайнингаКонтекстноеМенюУдалить.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
		Родитель = ДеревоОбъектов.НайтиПоИдентификатору(Элт).ПолучитьРодителя();
		Если Родитель = Неопределено Тогда 
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если Строка = Неопределено Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеДанныеМайнинга = Ложь;
	ПеретаскиваниеДеревоОбъектов = Ложь;
	Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
		Если ТипЗнч(Элт) = Тип("ДанныеФормыЭлементКоллекции") И ДанныеМайнинга.НайтиПоИдентификатору(Элт.ПолучитьИдентификатор()) = Элт Тогда 
			ПеретаскиваниеДанныеМайнинга = Истина;
		ИначеЕсли ТипЗнч(Элт) = Тип("Число") И ДеревоОбъектов.НайтиПоИдентификатору(Элт) <> Неопределено Тогда 
			ПеретаскиваниеДеревоОбъектов = Истина;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьРодитель = (ДеревоОбъектов.НайтиПоИдентификатору(Строка).ПолучитьРодителя() <> Неопределено);
	Если ПеретаскиваниеДанныеМайнинга И Не ПеретаскиваниеДеревоОбъектов Тогда 
		ПараметрыПеретаскивания.Действие = ?(Не ЕстьРодитель, ДействиеПеретаскивания.Отмена, ПараметрыПеретаскивания.Действие);
	ИначеЕсли Не ПеретаскиваниеДанныеМайнинга И ПеретаскиваниеДеревоОбъектов Тогда 
		ПараметрыПеретаскивания.Действие = ?(ЕстьРодитель, ДействиеПеретаскивания.Отмена, ПараметрыПеретаскивания.Действие);
	Иначе
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ПеретаскиваниеДанныеМайнинга = Ложь;
	ПеретаскиваниеДеревоОбъектов = Ложь;
	Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
		Если ТипЗнч(Элт) = Тип("ДанныеФормыЭлементКоллекции") И ДанныеМайнинга.НайтиПоИдентификатору(Элт.ПолучитьИдентификатор()) = Элт Тогда 
			ПеретаскиваниеДанныеМайнинга = Истина;
		ИначеЕсли ТипЗнч(Элт) = Тип("Число") И ДеревоОбъектов.НайтиПоИдентификатору(Элт) <> Неопределено Тогда 
			ПеретаскиваниеДеревоОбъектов = Истина;
		Иначе
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьРодитель = (ДеревоОбъектов.НайтиПоИдентификатору(Строка).ПолучитьРодителя() <> Неопределено);
	Если ЕстьРодитель И ПеретаскиваниеДанныеМайнинга И Не ПеретаскиваниеДеревоОбъектов Тогда 
		УИД = ДеревоОбъектов.НайтиПоИдентификатору(Строка).УИД;
		СтруктураПоиска = Новый Структура("УИД, СвязьТаблиц");
		Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Элт);
			ОтбСтроки = ДанныеМайнингаОбщие.НайтиСтроки(СтруктураПоиска);
			Если ОтбСтроки.Количество() = 1 Тогда 
				Элт.УИД = УИД;
				ЗаполнитьЗначенияСвойств(ОтбСтроки[0], Элт);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ДеревоОбъектов.ТекущаяСтрока = Неопределено;
		Элементы.ДеревоОбъектов.ТекущаяСтрока = Строка;
		ПересчетФлаговОшибки();
		Модифицированность = Истина;
	ИначеЕсли Не ЕстьРодитель И Не ПеретаскиваниеДанныеМайнинга И ПеретаскиваниеДеревоОбъектов Тогда 
		Папка = ДеревоОбъектов.НайтиПоИдентификатору(Строка);
		Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
			ПеретаскиваемыйЭлемент = ДеревоОбъектов.НайтиПоИдентификатору(Элт);
			ЗаполнитьЗначенияСвойств(Папка.ПолучитьЭлементы().Добавить(), ПеретаскиваемыйЭлемент);
		КонецЦикла;
		Для Каждого Элт Из ПараметрыПеретаскивания.Значение Цикл 
			ПеретаскиваемыйЭлемент = ДеревоОбъектов.НайтиПоИдентификатору(Элт);
			ПеретаскиваемыйЭлемент.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПеретаскиваемыйЭлемент);
		КонецЦикла;
		Элементы.ДеревоОбъектов.Развернуть(Папка.ПолучитьИдентификатор());
		ПересчетФлаговОшибки();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьОбъект(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовОписаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьXML(Команда)
	
	ВыгружаемыеДанные = СформироватьXMLНаСервере(УникальныйИдентификатор);
	Если ВыгружаемыеДанные <> Неопределено Тогда 
		РегламентированнаяОтчетностьКлиент.ВыгрузитьФайлы(ВыгружаемыеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьАрхив(Команда)
	Доступность = Ложь;
	РезультатВыполнения = ВыгрузитьАрхивНаСервере();
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыгрузитьАрхивНаКлиенте();
	Иначе
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыгрузитьАрхивПослеВыгрузки", ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется выгрузка в архив';
												|en = 'Выполняется выгрузка в архив'");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	СохранитьДанные();
	Оповестить("Запись_УведомлениеОСпецрежимахНалогообложения",,Объект.Ссылка);
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ПроверитьВыгрузку(ЭтотОбъект, ПроверитьВыгрузкуНаСервере());
КонецПроцедуры

&НаКлиенте
Процедура РучнойВвод(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаРучнойВвод(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВыгружатьСОшибками(Команда)
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОбработкаРазрешитьВыгружатьСОшибками(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Добавить(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеНового", Истина);
	ПараметрыФормы.Вставить("ДанныеДляРедактирования", Неопределено);
	ПараметрыФормы.Вставить("ВыбраннаяСтрока", Неопределено);
	ПараметрыФормы.Вставить("ЭтоНовоеУведомление", ЭтотОбъект["ЭтоНовоеУведомление"]);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаСвМайнинг"), ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("РедактированиеСвМайнингЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Асинх Процедура Удалить(Команда)
	Если Элементы.ДанныеМайнинга.ТекущиеДанные <> Неопределено И
		КодВозвратаДиалога.Да = Ждать ВопросАсинх("Удалить сведения?", РежимДиалогаВопрос.ДаНетОтмена) Тогда 
		
		Поиск = Новый Структура("УИД, СвязьТаблиц");
		ЗаполнитьЗначенияСвойств(Поиск, Элементы.ДанныеМайнинга.ТекущиеДанные);
		ДанныеМайнинга.Удалить(Элементы.ДанныеМайнинга.ТекущиеДанные);
		
		Строки = ДанныеМайнингаОбщие.НайтиСтроки(Поиск);
		Если ЗначениеЗаполнено(Строки) Тогда 
			ДанныеМайнингаОбщие.Удалить(Строки[0]);
		КонецЕсли;
		
		ПересчетФлаговОшибки();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдрес(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеНового", Истина);
	ПараметрыФормы.Вставить("СтрокаДляРедактирования", Неопределено);
	
	ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", "ФормаВводаАдресаОбъекта"), ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("РедактированиеАдресЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМайнераЮЛ(Команда)
	ДобавитьМайнера("ФормаСвМайнерЮЛ");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМайнераИП(Команда)
	ДобавитьМайнера("ФормаСвМайнерИП");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМайнераФЛ(Команда)
	ДобавитьМайнера("ФормаСвМайнерФЛ");
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьОбъект(Команда)
	Если Элементы.ДеревоОбъектов.ТекущиеДанные <> Неопределено И
		КодВозвратаДиалога.Да = Ждать ВопросАсинх("Удалить объект?", РежимДиалогаВопрос.ДаНетОтмена) Тогда 
		
		ВсеУИД = Новый Соответствие;
		ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
		НеобходимПересчет = (Элементы.ДеревоОбъектов.ТекущиеДанные.Тип <> "1");
		Если Элементы.ДеревоОбъектов.ТекущиеДанные.Тип = "1" Тогда
			Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл 
				ВсеУИД.Вставить(Стр.УИД, Истина);
			КонецЦикла;
		Иначе
			ВсеУИД.Вставить(ТекущиеДанные.УИД, Истина);
		КонецЕсли;
		
		Строки = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоОбъектов.ПолучитьЭлементы(), ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы());
		Строки.Удалить(ТекущиеДанные);
		КУдалению = Новый Массив;
		Для Каждого Стр Из ДанныеМайнингаОбщие Цикл 
			Если ВсеУИД[Стр.УИД] = Истина Тогда 
				КУдалению.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Стр Из КУдалению Цикл 
			ДанныеМайнингаОбщие.Удалить(Стр);
		КонецЦикла;
		
		Если НеобходимПересчет Тогда 
			ПересчетФлаговОшибки();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНачальныеДанные() Экспорт
	ДанныеУведомленияТитульный = ЭтотОбъект["ДанныеУведомления"]["Титульная"];
	ДанныеУведомленияТитульный.Вставить("КодНО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВИФНС, "Код"));
	Объект.ДатаПодписи = ТекущаяДатаСеанса();
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", Объект.ДатаПодписи);
	
	Если ЭтотОбъект["ЭтоЮЛ"] Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,ОГРН,ТелОрганизации";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННЮЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ДанныеУведомленияТитульный.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
		ДанныеУведомленияТитульный.Вставить("ОГРН", СведенияОбОрганизации.ОГРН);
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелОрганизации);
	Иначе
		СтрокаСведений = "ИННФЛ,ФИО,ОГРН,ТелДом";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Объект.Организация, Объект.ДатаПодписи, СтрокаСведений);
		ДанныеУведомленияТитульный.Вставить("ИНН", СведенияОбОрганизации.ИННФЛ);
		ДанныеУведомленияТитульный.Вставить("НаимОрг", СведенияОбОрганизации.ФИО);
		ДанныеУведомленияТитульный.Вставить("ОГРН", СведенияОбОрганизации.ОГРН);
		ДанныеУведомленияТитульный.Вставить("Тлф", СведенияОбОрганизации.ТелДом);
	КонецЕсли;
	
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Объект.РегистрацияВИФНС);
	ДанныеУведомленияТитульный.Вставить("КодНО", Реквизиты.Код);
	ДанныеУведомленияТитульный.Вставить("КПП", Реквизиты.КПП);
	
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоФизЛицу(ЭтотОбъект);
	Иначе
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоОрганизации(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСтраниц() Экспорт
	
	ДеревоСтраниц.ПолучитьЭлементы().Очистить();
	КорневойУровень = ДеревоСтраниц.ПолучитьЭлементы();
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Титульная страница";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Титульная_2025";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Титульная";
	Стр001.МакетыПФ = "Печать_Форма2025_1_Титульная";
КонецПроцедуры

&НаСервере
Процедура ПоказатьТекущуюСтраницу(ИмяМакета, ПредУИД)
	УведомлениеОСпецрежимахНалогообложения.ПоказатьТекущуюСтраницу(ЭтотОбъект, ИмяМакета, ПредУИД);
	
	Если ЭтотОбъект["ТекущееИДНаименования"] = "Титульная" Тогда 
		Если ЭтотОбъект["ЭтоЮЛ"] Тогда 
			ПредставлениеУведомления.Области["ИНН"].ТипЗначения = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(10));
			ПредставлениеУведомления.Области["ОГРН"].ТипЗначения = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(13));
		Иначе
			УведомлениеОСпецрежимахНалогообложения.ЗащитаОбласти(ЭтотОбъект, "НаимОрг");
			УведомлениеОСпецрежимахНалогообложения.ЗащитаОбласти(ЭтотОбъект, "КПП");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьДанные() Экспорт
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = УведомлениеОСпецрежимахНалогообложения.СтруктураПараметровДляСохранения(ЭтотОбъект);
	СтруктураПараметров.Вставить("ДанныеМайнингаОбщие", РеквизитФормыВЗначение("ДанныеМайнингаОбщие"));
	СтруктураПараметров.Вставить("ДеревоОбъектов", РеквизитФормыВЗначение("ДеревоОбъектов"));
	УведомлениеОСпецрежимахНалогообложения.СохранитьДанные(ЭтотОбъект, СтруктураПараметров);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СсылкаНаДанные)
	СтруктураПараметров = УведомлениеОСпецрежимахНалогообложения.ЗагрузкаДанныхУведомления(ЭтотОбъект, СсылкаНаДанные);
	ЗначениеВРеквизитФормы(СтруктураПараметров["ДанныеМайнингаОбщие"], "ДанныеМайнингаОбщие");
	ЗначениеВРеквизитФормы(СтруктураПараметров["ДеревоОбъектов"], "ДеревоОбъектов");
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьДанные();
КонецПроцедуры

&НаСервере
Функция СформироватьXMLНаСервере(УникальныйИдентификатор)
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ВыгрузитьДокумент(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь,ВыполняемоеОповещение = Неопределено) Экспорт 
	
	СохранитьДанные();
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыгрузкуНаСервере()
	СохранитьДанные();
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ПроверитьДокументСВыводомВТаблицу(УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьУведомлениеИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеСвМайнингЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекСтр = ?(ДополнительныеПараметры.СозданиеНового, ДанныеМайнинга.Добавить(), ДанныеМайнинга.НайтиПоИдентификатору(ДополнительныеПараметры.ВыбраннаяСтрока));
		ТекСтр.СвязьТаблиц = ?(ДополнительныеПараметры.СозданиеНового, Новый УникальныйИдентификатор, ТекСтр.СвязьТаблиц);
		ТекСтр.УИД = ?(ДополнительныеПараметры.СозданиеНового, Элементы.ДеревоОбъектов.ТекущиеДанные.УИД, ТекСтр.УИД);
		ЗаполнитьЗначенияСвойств(ТекСтр, Результат);
		Строки = ДанныеМайнингаОбщие.НайтиСтроки(Новый Структура("УИД, СвязьТаблиц", ТекСтр.УИД, ТекСтр.СвязьТаблиц));
		ЗаполнитьЗначенияСвойств(?(ЗначениеЗаполнено(Строки), Строки[0], ДанныеМайнингаОбщие.Добавить()), ТекСтр);
		ПересчетФлаговОшибки();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьАрхивНаСервере()
	СохранитьДанные();
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ПомещатьВАрхив", Истина);
	ПараметрыВыполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыВыполнения.Вставить("ИмяФайла", "download_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".zip");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("УведомлениеОСпецрежимахНалогообложения.ВыгрузкаВАрхив",
		ПараметрыВыполнения,
		ПараметрыВыполненияВФоне);
		
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ЭтотОбъект["АдресХранилища"] = РезультатВыполнения.АдресРезультата;
	
	Возврат РезультатВыполнения;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьАрхивНаКлиенте()
	Доступность = Истина;
	УведомлениеОСпецрежимахНалогообложенияКлиент.ВыгрузитьФайлы(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьАрхивПослеВыгрузки(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	Доступность = Истина;
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда 
		ВыгрузитьАрхивНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКодаНОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда 
		Объект.РегистрацияВИФНС = Результат;
		УстановитьДанныеПоРегистрацииВИФНС();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоРегистрацииВИФНС()
	Реквизиты = РегистрацияВНОСервер.ДанныеРегистрации(Объект.РегистрацияВИФНС);
	ПредставлениеУведомления.Области["КодНО"].Значение = Реквизиты.Код;
	ПредставлениеУведомления.Области["КПП"].Значение = Реквизиты.КПП;
	ДанныеУведомленияТитульный = ЭтотОбъект["ДанныеУведомления"]["Титульная"];
	ДанныеУведомленияТитульный.Вставить("КодНО", ПредставлениеУведомления.Области["КодНО"].Значение);
	ДанныеУведомленияТитульный.Вставить("КПП", ПредставлениеУведомления.Области["КПП"].Значение);
	Если ЗначениеЗаполнено(Реквизиты.Представитель) Тогда
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоФизЛицу(ЭтотОбъект);
	Иначе
		УведомлениеОСпецрежимахНалогообложения.УстановитьПредставителяПоОрганизации(ЭтотОбъект);
	КонецЕсли;
	
	ДанныеУведомленияТитульный.Вставить("ДАТА_ПОДПИСИ", ПредставлениеУведомления.Области["ДАТА_ПОДПИСИ"].Значение);
	ДанныеУведомленияТитульный.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПредставлениеУведомления.Области["ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ"].Значение);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеАдресЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.СозданиеНового Тогда 
			СтрокаДляРедактирования = ДеревоОбъектов.ПолучитьЭлементы().Добавить();
			СтрокаДляРедактирования.УИД = Новый УникальныйИдентификатор;
			СтрокаДляРедактирования.БезОшибок = Ложь;
		Иначе
			СтрокаДляРедактирования = ДеревоОбъектов.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаДляРедактирования);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДляРедактирования, Результат);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМайнера(ФормаМайнер)
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать объект инфраструктуры");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеНового", Истина);
	ПараметрыФормы.Вставить("СтрокаДляРедактирования", Неопределено);
	ПараметрыФормы.Вставить("ИдРодителя", 
		?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ТекущиеДанные.ПолучитьИдентификатор(), ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор()));
	
	ОткрытьФорму(СтрЗаменить(ИмяФормы, "Форма2025_1", ФормаМайнер), ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("РедактированиеФормаСвМайнерЗавершение", ЭтотОбъект, ПараметрыФормы), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеФормаСвМайнерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.СозданиеНового Тогда 
			СтрокаДляРедактирования = ДеревоОбъектов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдРодителя).ПолучитьЭлементы().Добавить();
			СтрокаДляРедактирования.УИД = Новый УникальныйИдентификатор;
			СтрокаДляРедактирования.БезОшибок = Ложь;
			СтрокаДляРедактирования.ПолучитьРодителя().БезОшибок = Ложь;
		Иначе
			СтрокаДляРедактирования = ДеревоОбъектов.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаДляРедактирования);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаДляРедактирования, Результат);
		Модифицированность = Истина;
		
		Элементы.ДеревоОбъектов.ТекущаяСтрока = СтрокаДляРедактирования.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетФлаговОшибки()
	Для Каждого Стр0 Из ДеревоОбъектов.ПолучитьЭлементы() Цикл 
		БезОшибок = Истина;
		Для Каждого Стр1 Из Стр0.ПолучитьЭлементы() Цикл 
			Стр1.БезОшибок = ЗначениеЗаполнено(ДанныеМайнингаОбщие.НайтиСтроки(Новый Структура("УИД", Стр1.УИД)));
			БезОшибок = БезОшибок И Стр1.БезОшибок;
		КонецЦикла;
		Стр0.БезОшибок = БезОшибок И (Стр0.ПолучитьЭлементы().Количество() <> 0);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
