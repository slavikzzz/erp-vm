#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт 
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт 
	Возврат Истина;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2025_1";
	Стр.ОписаниеФормы = "Приказ ФНС России от --.--.---- № ЕД-----/---@";
	Стр.ДатаНачала = '20210701';
	Стр.ДатаКонца = '20991231';

	Возврат Результат;
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2025_1" Тогда
		Возврат ЭлектронноеПредставление_Форма2025_1(Объект, УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Функция СформироватьСписокЛистов(Объект) Экспорт
	Возврат УведомлениеОСпецрежимахНалогообложения.ПечатьВСледующихВерсиях(Объект);
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт 
	Если ИмяФормы = "Форма2025_1"  Тогда 
		Возврат ПроверитьДокументСВыводомВТаблицу_Форма2025_1(
			УведомлениеОСпецрежимахНалогообложения.ДанныеУведомленияДляВыгрузки(Объект), УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу_Форма2025_1(Данные, УникальныйИдентификатор)
	ТаблицаОшибок = Новый СписокЗначений;
	УведомлениеОСпецрежимахНалогообложения.ПроверкаАктуальностиФормыПриВыгрузке(
		Данные.Объект.ИмяФормы, ТаблицаОшибок, ПолучитьТаблицуФорм());
	УведомлениеОСпецрежимахНалогообложения.ПроверкаДатВУведомлении(Данные, ТаблицаОшибок);
	
	Титульная = Данные.ДанныеУведомления.Титульная;
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаКодаНО(Титульная.КодНО, ТаблицаОшибок, "Титульная");
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаГода(Титульная, ТаблицаОшибок, "Титульная", "ОтчетГод", Истина);
	Если Титульная.ОтчетКвартал <> "21" И Титульная.ОтчетКвартал <> "22" И Титульная.ОтчетКвартал <> "23" И Титульная.ОтчетКвартал <> "24" Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан / неправильно указан отчетный квартал", "Титульная", "ОтчетКвартал"));
	КонецЕсли;
	
	ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Данные.Организация);
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаИНН(Титульная, ТаблицаОшибок, "Титульная", "ИНН", Истина, ЭтоЮЛ);
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаОГРН(Титульная, ТаблицаОшибок, "Титульная", "ОГРН", Истина, ЭтоЮЛ);
	Если Не ЗначениеЗаполнено(Титульная.НаимОрг) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указано наименование организации / ФИО ИП", "Титульная", "НаимОрг"));
	КонецЕсли;
	
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаПодписантаНалоговойОтчетности(Данные, ТаблицаОшибок, "Титульная", Истина);
	
	Если Не ЗначениеЗаполнено(Титульная.ДАТА_ПОДПИСИ) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата подписи", "Титульная", "ДАТА_ПОДПИСИ"));
	КонецЕсли;
	
	Если Данные.ДеревоОбъектов.Строки.Количество() = 0 Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не заполнены сведения об объектах майнинга", "Сведения"));
	ИначеЕсли ЗначениеЗаполнено(Данные.ДеревоОбъектов.Строки.НайтиСтроки(Новый Структура("БезОшибок", Ложь))) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Есть ошибки заполнения (выделено красным)", "Сведения"));
	КонецЕсли;
	
	Возврат ТаблицаОшибок;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	СведенияОтправки.Вставить("КодНО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОтправки, "КодНО", "0000"));
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИННФЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННФЛ), СокрЛП(СведенияОтправки.ИННФЛ), "000000000000");
		ИдентификаторОтправителя = СокрЛП(ИННФЛ);
	Иначе
		ИННЮЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННЮЛ), СокрЛП(СведенияОтправки.ИННЮЛ), "0000000000");
		КПП = ?(ЗначениеЗаполнено(СведенияОтправки.КПП), СокрЛП(СведенияОтправки.КПП), "000000000");
		ИдентификаторОтправителя = ИННЮЛ + КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда 
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)),
									Число(Сред(СведенияОтправки.ДатаДок, 4, 2)),
									Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Возврат "ON_SVMINING_" + ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОтправки, "КодНО", "0000")
		+ "_" + ИдентификаторОтправителя + "_" + ДатаФормированияФайла + "_" + Строка(Новый УникальныйИдентификатор);
КонецФункции

Процедура ИнфОбъект(ПотокXML, ДанныеХранилище)
	Данные = ДанныеХранилище.Получить();
	ПотокXML.ЗаписатьНачалоЭлемента("ИнфОбъект");
	ПотокXML.ЗаписатьАтрибут("ИдНом", Данные.ИдНом);
	Если ЗначениеЗаполнено(Данные.КадастрНом) Тогда 
		ПотокXML.ЗаписатьАтрибут("КадастрНом", Данные.КадастрНом);
	КонецЕсли;
	ПотокXML.ЗаписатьАтрибут("АдрСтрока", Данные.АдресСтрока);
	ПотокXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура СвМайнерЮЛ(ПотокXML, ДанныеХранилище)
	Данные = ДанныеХранилище.Получить();
	ПотокXML.ЗаписатьНачалоЭлемента("СвМайнерЮЛ");
	ПотокXML.ЗаписатьАтрибут("НаимЮЛПолн", Данные.НаимЮЛПолн);
	ПотокXML.ЗаписатьАтрибут("ОГРН", Данные.ОГРН);
	ПотокXML.ЗаписатьАтрибут("ИННЮЛ", Данные.ИННЮЛ);
	ПотокXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура СвМайнерФЛ(ПотокXML, ДанныеХранилище)
	Данные = ДанныеХранилище.Получить();
	ПотокXML.ЗаписатьНачалоЭлемента("СвМайнерФЛ");
	Если ЗначениеЗаполнено(Данные.ИННФЛ) Тогда 
		ПотокXML.ЗаписатьАтрибут("ИННФЛ", Данные.ИННФЛ);
	КонецЕсли;
	
	ПотокXML.ЗаписатьНачалоЭлемента("ФИО");
	ПотокXML.ЗаписатьАтрибут("Фамилия", Данные.Фамилия);
	ПотокXML.ЗаписатьАтрибут("Имя", Данные.Имя);
	Если ЗначениеЗаполнено(Данные.Отчество) Тогда 
		ПотокXML.ЗаписатьАтрибут("Отчество", Данные.Отчество);
	КонецЕсли;
	ПотокXML.ЗаписатьКонецЭлемента();
	
	ПотокXML.ЗаписатьНачалоЭлемента("УдЛичн");
	ПотокXML.ЗаписатьАтрибут("КодВидДок", Данные.КодВидДок);
	ПотокXML.ЗаписатьАтрибут("СерНомДок", Данные.СерНомДок);
	ПотокXML.ЗаписатьКонецЭлемента();
	ПотокXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура СвМайнерИП(ПотокXML, ДанныеХранилище)
	Данные = ДанныеХранилище.Получить();
	ПотокXML.ЗаписатьНачалоЭлемента("СвМайнерИП");
	ПотокXML.ЗаписатьАтрибут("ОГРНИП", Данные.ОГРН);
	ПотокXML.ЗаписатьАтрибут("ИННФЛ", Данные.ИННФЛ);
	ПотокXML.ЗаписатьНачалоЭлемента("ФИО");
	ПотокXML.ЗаписатьАтрибут("Фамилия", Данные.Фамилия);
	ПотокXML.ЗаписатьАтрибут("Имя", Данные.Имя);
	Если ЗначениеЗаполнено(Данные.Отчество) Тогда 
		ПотокXML.ЗаписатьАтрибут("Отчество", Данные.Отчество);
	КонецЕсли;
	ПотокXML.ЗаписатьКонецЭлемента();
	ПотокXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура СвМайнинг(ПотокXML, ДанныеХранилище)
	Данные = ОтчетностьМайнеров.JSONВСтруктуру(ДанныеХранилище.Получить());
	ПотокXML.ЗаписатьНачалоЭлемента("СвМайнинг");
	
	Для Каждого СтрОборуд Из Данные.Таблица_СвОборудСправоч Цикл 
		ПотокXML.ЗаписатьНачалоЭлемента("СвОборуд");
		ПотокXML.ЗаписатьНачалоЭлемента("СвОборудСправоч");
		ПотокXML.ЗаписатьАтрибут("КодОборуд", СтрОборуд.КодОборуд);
		ПотокXML.ЗаписатьАтрибут("ЗаводНом", СтрОборуд.ЗаводНом);
		ПотокXML.ЗаписатьАтрибут("КоличЧасЭкспл", СтрОборуд.КоличЧасЭкспл);
		ПотокXML.ЗаписатьКонецЭлемента();
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Для Каждого СтрОборуд Из Данные.Таблица_СвОборудПроизв Цикл 
		ПотокXML.ЗаписатьНачалоЭлемента("СвОборуд");
		ПотокXML.ЗаписатьНачалоЭлемента("СвОборудПроизвольн");
		ПотокXML.ЗаписатьАтрибут("Марка", СтрОборуд.Марка);
		ПотокXML.ЗаписатьАтрибут("Модель", СтрОборуд.Модель);
		ПотокXML.ЗаписатьАтрибут("Алгоритм", СтрОборуд.Алгоритм);
		ПотокXML.ЗаписатьАтрибут("ВычислитМощн", СтрЗаменить(СтрОборуд.ВычислитМощн, ",", "."));
		ПотокXML.ЗаписатьАтрибут("КоличЭнерг", СтрОборуд.КоличЭнерг);
		ПотокXML.ЗаписатьАтрибут("ЗаводНом", СтрОборуд.ЗаводНом);
		ПотокXML.ЗаписатьАтрибут("КоличЧасЭкспл", СтрОборуд.КоличЧасЭкспл);
		ПотокXML.ЗаписатьКонецЭлемента();
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ПотокXML.ЗаписатьНачалоЭлемента("СвВотчер");
	Если Данные.Таблица_СвВотчер.Количество() = 0 Тогда 
		ПотокXML.ЗаписатьНачалоЭлемента("ПрОтсВотчер");
		ПотокXML.ЗаписатьТекст("1");
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Для Каждого СтрВотчер Из Данные.Таблица_СвВотчер Цикл 
			ПотокXML.ЗаписатьНачалоЭлемента("СсылкаВотчер");
			ПотокXML.ЗаписатьТекст(СтрВотчер.СсылкаВотчер);
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;
	ПотокXML.ЗаписатьКонецЭлемента();
	
	Для Каждого СтрВалюта Из Данные.Таблица_СвДобытВалют Цикл 
		ПотокXML.ЗаписатьНачалоЭлемента("СвДобытВалют");
		СвДобытВалют = ОтчетностьМайнеров.JSONВСтруктуру(ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтрВалюта.Данные)));
		
		Для Каждого СтрСвВалют Из СвДобытВалют.Таблица_СвВалют Цикл
			ПотокXML.ЗаписатьНачалоЭлемента("СвВалют");
			ПотокXML.ЗаписатьАтрибут("КодВалют", СтрСвВалют.КодВалют);
			ПотокXML.ЗаписатьАтрибут("Сумма", СтрЗаменить(СтрСвВалют.Сумма, ",", "."));
			Если ЗначениеЗаполнено(СтрСвВалют.КодВалютЗачис) Тогда 
				ПотокXML.ЗаписатьАтрибут("КодВалютЗачис", СтрСвВалют.КодВалютЗачис);
			КонецЕсли;
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвДобытВалют, "Реквизит_СсылкаПул")) Тогда 
			ПотокXML.ЗаписатьНачалоЭлемента("СсылкаПул");
			ПотокXML.ЗаписатьТекст(СвДобытВалют.Реквизит_СсылкаПул);
			ПотокXML.ЗаписатьКонецЭлемента();
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента("ПрОтсПул");
			ПотокXML.ЗаписатьТекст("1");
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ПотокXML.ЗаписатьНачалоЭлемента("Тариф");
	ПотокXML.ЗаписатьТекст(СтрЗаменить(Данные.Реквизит_Тариф, ",", "."));
	ПотокXML.ЗаписатьКонецЭлемента();
	
	ПотокXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

Функция ЭлектронноеПредставление_Форма2025_1(Объект, УникальныйИдентификатор) 
	ДанныеУведомления = УведомлениеОСпецрежимахНалогообложения.ДанныеУведомленияДляВыгрузки(Объект);
	Титульная = ДанныеУведомления.ДанныеУведомления.Титульная;
	Ошибки = ПроверитьДокументСВыводомВТаблицу_Форма2025_1(ДанныеУведомления, УникальныйИдентификатор);
	УведомлениеОСпецрежимахНалогообложения.СообщитьОшибкиПриПроверкеВыгрузки(Объект, Ошибки, ДанныеУведомления);
	
	СведенияЭлектронногоПредставления = УведомлениеОСпецрежимахНалогообложения.СведенияЭлектронногоПредставления();
	ОсновныеСведения = Документы.УведомлениеОСпецрежимахНалогообложения.НачальнаяИнициализацияОбщихРеквизитовВыгрузки(Объект);
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	
	ПотокXML.ЗаписатьНачалоЭлемента("Файл");
	ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ПотокXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ПотокXML.ЗаписатьАтрибут("ВерсПрог", ОсновныеСведения.ВерсПрог);
	ПотокXML.ЗаписатьАтрибут("ВерсФорм", "4.01");
	
	ПотокXML.ЗаписатьНачалоЭлемента("Документ");
	ПотокXML.ЗаписатьАтрибут("КНД", "1111664");
	ПотокXML.ЗаписатьАтрибут("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"));
	ПотокXML.ЗаписатьАтрибут("КодНО", Титульная.КодНО);
	ПотокXML.ЗаписатьАтрибут("ОтчетГод", Титульная.ОтчетГод);
	ПотокXML.ЗаписатьАтрибут("ОтчетКвартал", Титульная.ОтчетКвартал);
	ПотокXML.ЗаписатьАтрибут("НомКорр", Формат(Титульная.НомКорр, "ЧН=0; ЧГ="));
	
	Если ОсновныеСведения.ЭтоПБОЮЛ Тогда 
		ПотокXML.ЗаписатьНачалоЭлемента("СвИП");
		ПотокXML.ЗаписатьАтрибут("ОГРНИП", Титульная.ОГРН);
		ПотокXML.ЗаписатьАтрибут("ИННФЛ", Титульная.ИНН);
		ПотокXML.ЗаписатьНачалоЭлемента("ФИО");
		
		Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Объект.Организация, ТекущаяДатаСеанса(), "ФамилияИП,ИмяИП,ОтчествоИП");
		ПотокXML.ЗаписатьАтрибут("Фамилия", Сведения.ФамилияИП);
		ПотокXML.ЗаписатьАтрибут("Имя", Сведения.ИмяИП);
		Если ЗначениеЗаполнено(Сведения.ОтчествоИП) Тогда
			ПотокXML.ЗаписатьАтрибут("Отчество", Сведения.ОтчествоИП);
		КонецЕсли;
		ПотокXML.ЗаписатьКонецЭлемента();
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		ПотокXML.ЗаписатьНачалоЭлемента("СвЮЛ");
		ПотокXML.ЗаписатьАтрибут("НаимЮЛПолн", Титульная.НаимОрг);
		ПотокXML.ЗаписатьАтрибут("ОГРН", Титульная.ОГРН);
		ПотокXML.ЗаписатьАтрибут("ИННЮЛ", Титульная.ИНН);
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Для Каждого Стр1 Из ДанныеУведомления.ДеревоОбъектов.Строки Цикл 
		ПотокXML.ЗаписатьНачалоЭлемента("СвОбъект");
		ИнфОбъект(ПотокXML, Стр1.Данные);
		Для Каждого Стр2 Из Стр1.Строки Цикл
			ПотокXML.ЗаписатьНачалоЭлемента("СвМайнер");
			Если Стр2.Тип = "2" Тогда
				СвМайнерЮЛ(ПотокXML, Стр2.Данные);
			ИначеЕсли Стр2.Тип = "3" Тогда
				СвМайнерФЛ(ПотокXML, Стр2.Данные);
			ИначеЕсли Стр2.Тип = "4" Тогда
				СвМайнерИП(ПотокXML, Стр2.Данные);
			КонецЕсли;
			
			Для Каждого Стр3 Из ДанныеУведомления.ДанныеМайнингаОбщие.НайтиСтроки(Новый Структура("УИД", Стр2.УИД)) Цикл 
				СвМайнинг(ПотокXML, Стр3.Данные);
			КонецЦикла;
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ПотокXML.ЗаписатьНачалоЭлемента("Подписант");
	Если ЗначениеЗаполнено(Титульная.Тлф) Тогда
		ПотокXML.ЗаписатьАтрибут("Тлф", Титульная.Тлф)
	КонецЕсли;
	ПотокXML.ЗаписатьНачалоЭлемента("ФИО");
	ПотокXML.ЗаписатьАтрибут("Фамилия", Объект.ПодписантФамилия);
	ПотокXML.ЗаписатьАтрибут("Имя", Объект.ПодписантИмя);
	Если ЗначениеЗаполнено(Объект.ПодписантОтчество) Тогда
		ПотокXML.ЗаписатьАтрибут("Отчество", Объект.ПодписантОтчество);
	КонецЕсли;
	ПотокXML.ЗаписатьКонецЭлемента();
	ПотокXML.ЗаписатьКонецЭлемента();
	
	ПотокXML.ЗаписатьКонецЭлемента();
	ПотокXML.ЗаписатьКонецЭлемента();
	
	Текст = ПотокXML.Закрыть();
	Текст = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(Текст, СтрНайти(Текст, Символы.ПС));
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ИдентификаторФайла + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

#КонецОбласти

#КонецЕсли