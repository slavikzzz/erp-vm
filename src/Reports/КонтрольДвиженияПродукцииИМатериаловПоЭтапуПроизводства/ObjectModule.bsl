#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ПараметрыРасположенияЭлементовУправления = ОпределитьРасположениеЭлементовУправления();

	Настройки.События.ПриСозданииНаСервере             = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере  = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма             - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ                - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ЭтаФорма.ФормаПараметры.КлючНазначенияИспользования = Параметры.ПараметрКоманды;
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Ссылка", Параметры.ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
// Параметры:
//   ЭтаФорма         - ФормаКлиентскогоПриложения - форма отчета или настроек отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - настройки для загрузки в компоновщик настроек.
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрыДанных = НастройкиОсновнойСхемы.ПараметрыДанных.Элементы;
	
	ПараметрДетализироватьПоПериоду = ПараметрыДанных.Найти("ДетализироватьПоПериоду"); 	
	ПараметрПоказыватьНазначение    = ПараметрыДанных.Найти("ПоказыватьНазначение");
	
	ДобавляемыеГруппы     = Новый Массив;
	УдаляемыеПоля         = Новый Массив;
	ДобавляемыеПоля       = Новый Массив;
	РесурсыБезДетализации = Новый Соответствие;
	
	Если ПараметрДетализироватьПоПериоду.Значение > 0 Тогда
		ДобавляемыеГруппы.Добавить(
			Новый ПолеКомпоновкиДанных(?(ПараметрДетализироватьПоПериоду.Значение = 1, "ПериодДень", "ПериодМесяц")));
	КонецЕсли;	
	
	Если ПараметрПоказыватьНазначение.Значение Тогда
		ДобавляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Назначение"));
	Иначе
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Назначение"));	
	КонецЕсли;
	
	РесурсыБезДетализации.Вставить(0, Новый Массив);
	РесурсыБезДетализации.Вставить(1, Новый Массив);
	
	МассивПолей = РесурсыБезДетализации.Получить(0);// Массив
	МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("КПередачеНаСклад"));
	
	МассивПолей = РесурсыБезДетализации.Получить(1);// Массив
	МассивПолей.Добавить(Новый ПолеКомпоновкиДанных("КПоступлению"));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ДобавляемыеГруппы"     , ДобавляемыеГруппы);
	СтруктураДействий.Вставить("УдаляемыеПоля"         , УдаляемыеПоля);
	СтруктураДействий.Вставить("ДобавляемыеПоля"       , ДобавляемыеПоля);
	СтруктураДействий.Вставить("РесурсыБезДетализации" , РесурсыБезДетализации);
	
	СтруктураНастроек = НастройкиОсновнойСхемы.Структура;
	ИндексСтруктуры   = СтруктураНастроек.Количество() - 1;
	Пока ИндексСтруктуры > -1 Цикл
		
		ЭлементНастроек = СтруктураНастроек[ИндексСтруктуры];
		
		Если ТипЗнч(ЭлементНастроек) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			НастроитьДетализацию(СтруктураНастроек, ЭлементНастроек, СтруктураДействий, ИндексСтруктуры);  
		КонецЕсли;
		
		ИндексСтруктуры = ИндексСтруктуры - 1;	
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОсновнойСхемы,
		"СтатусГрафика",
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик());
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОсновнойСхемы);
	
	// Компоновка и вывод.
	УстановитьПривилегированныйРежим(Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);

	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураЗаголовковПолейЕдиницИзмерений(), МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы.
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВспомогательныеПараметрыОтчета()
	
	ВспомогательныеПараметры = Новый Массив;
	
	ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
	ВспомогательныеПараметры.Добавить("ДетализироватьПоПериоду");
	ВспомогательныеПараметры.Добавить("ПоказыватьНазначение");	
	
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;

КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураЗаголовковПолейЕдиницИзмерений()
	
	СтруктураЗаголовков = КомпоновкаДанныхСервер.ЗаголовкиПолейЕдиницИзмерений(КомпоновщикНастроек);
	Для каждого Элемент Из СтруктураЗаголовков Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка")
			И НЕ Найти(Элемент.Значение, НСтр("ru = 'товар';
												|en = 'product'"))=0 Тогда
			
			СтруктураЗаголовков.Вставить(
				Элемент.Ключ,
				СтрЗаменить(Элемент.Значение, НСтр("ru = 'товар';
													|en = 'product'"), НСтр("ru = 'материал';
																		|en = 'material'")));
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураЗаголовков;
	
КонецФункции

Процедура НастроитьДетализацию(СтруктураНастроек, ЭлементНастроек, СтруктураДействий, Индекс)
	
	ПоляГруппировки = ЭлементНастроек.ПоляГруппировки.Элементы;
	
	Если ПоляГруппировки.Количество() > 1 Тогда
		
		Если ЭлементНастроек.Структура.Количество() > 0 Тогда
			ЭлементНастроек.Структура.Очистить();	
		КонецЕсли;
		
		ОбработатьВыбранныеПоля = Ложь;
		КоллекцияОтборов        = ЭлементНастроек.Отбор.Элементы;
		Для каждого ТекущийОтбор Из КоллекцияОтборов Цикл
			
			Если ТекущийОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТипДвижения")
			   И ТекущийОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно
			   И ТекущийОтбор.ПравоеЗначение = Перечисления.ТипыДвиженияЗапасов.Поступление Тогда
				
				ОбработатьВыбранныеПоля = Истина;
				Прервать;
				
			КонецЕсли;   
			
		КонецЦикла;	
		
		Если ОбработатьВыбранныеПоля Тогда
			
			УдалитьПоляОтчета(
				ЭлементНастроек.Выбор.Элементы, 
				"ВыбранноеПолеКомпоновкиДанных", 
				СтруктураДействий.УдаляемыеПоля);
			
			УдалитьПоляОтчета(
				ЭлементНастроек.ПоляГруппировки.Элементы, 
				"ПолеГруппировкиКомпоновкиДанных", 
				СтруктураДействий.УдаляемыеПоля, 
				СтруктураДействий.ДобавляемыеПоля);
			
			Для каждого ДобавляемоеПоле Из СтруктураДействий.ДобавляемыеПоля Цикл
				
				ПолеГруппировки = ЭлементНастроек.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование = Истина;
				ПолеГруппировки.Поле          = ДобавляемоеПоле;
				
				ПолеВыбор = ЭлементНастроек.Выбор.Элементы.Вставить(1, Тип("ВыбранноеПолеКомпоновкиДанных"));
				ПолеВыбор.Использование = Истина;
				ПолеВыбор.Поле          = ДобавляемоеПоле;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		МассивРесурсовБезДетализации = СтруктураДействий.РесурсыБезДетализации.Получить(Индекс);
		
		Для каждого ДобавляемаяГруппировка Из СтруктураДействий.ДобавляемыеГруппы Цикл
			
			НовыйЭлементНастройки = ЭлементНастроек.Структура.Добавить(ТипЗнч(ЭлементНастроек));
			
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НовыйЭлементНастройки.Отбор, ЭлементНастроек.Отбор);
						
			ЭлементГруппировки = НовыйЭлементНастройки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ЭлементГруппировки.Использование = Истина;
			ЭлементГруппировки.Поле 		 = ДобавляемаяГруппировка;
			
			МассивЧисловыхПолей = Новый Массив;
			ДоступныеПоляВыбора = ЭлементНастроек.Выбор.ДоступныеПоляВыбора.Элементы;
			Для каждого ДоступноеПоле Из ДоступныеПоляВыбора Цикл
				МассивТипов = ДоступноеПоле.Тип.Типы();
				Если МассивТипов.Количество() = 1 И МассивТипов[0] = Тип("Число") Тогда
					МассивЧисловыхПолей.Добавить(ДоступноеПоле.Поле);
				КонецЕсли;	
			КонецЦикла;	
			
			ЭлементВыбора = НовыйЭлементНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЭлементВыбора.Использование = Истина;
			ЭлементВыбора.Поле          = ДобавляемаяГруппировка;
			
			Если МассивРесурсовБезДетализации <> Неопределено Тогда
			
				ЭлементУсловногоОформления = НовыйЭлементНастройки.УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Использование               = Истина;
				ЭлементУсловногоОформления.ИспользоватьВЗаголовке      = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
					Новый ПараметрКомпоновкиДанных("Текст"), "");
				
			КонецЕсли;	
			
			ВыбранныеПоля = ЭлементНастроек.Выбор.Элементы;
			Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
				
				Если МассивЧисловыхПолей.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
					
					ЭлементВыбора = НовыйЭлементНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					ЭлементВыбора.Использование = Истина;
					ЭлементВыбора.Поле          = ВыбранноеПоле.Поле;
					
					Если МассивРесурсовБезДетализации <> Неопределено 
					   И МассивРесурсовБезДетализации.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
			
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						ОформляемоеПоле.Использование = Истина;
						ОформляемоеПоле.Поле          = ВыбранноеПоле.Поле;
			
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЭлементПорядок = НовыйЭлементНастройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			ЭлементПорядок.Использование = Истина;
			
			НовыйЭлементНастройки.ПараметрыВывода.УстановитьЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"), ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
			
			ЭлементНастроек = НовыйЭлементНастройки;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УдалитьПоляОтчета(ПоляОтчета, ИмяТипаПолеОтчета, УдаляемыеПоля, ДобавляемыеПоля = Неопределено)
	
	ИндексПолеОтчета = ПоляОтчета.Количество() - 1;
	Пока ИндексПолеОтчета > - 1 Цикл
		
		ПолеОтчета = ПоляОтчета.Получить(ИндексПолеОтчета);
		Если ТипЗнч(ПолеОтчета) = Тип(ИмяТипаПолеОтчета) Тогда
			
			Если УдаляемыеПоля.Найти(ПолеОтчета.Поле) <> Неопределено Тогда
				
				ПоляОтчета.Удалить(ПолеОтчета);
				
			ИначеЕсли ДобавляемыеПоля <> Неопределено Тогда
				
				ИндексДобавляемогоПоле = ДобавляемыеПоля.Найти(ПолеОтчета.Поле);
				Если ИндексДобавляемогоПоле <> Неопределено Тогда
					ДобавляемыеПоля.Удалить(ИндексДобавляемогоПоле);
				КонецЕсли;
				
			КонецЕсли;	   
			
		КонецЕсли;
		
		ИндексПолеОтчета = ИндексПолеОтчета - 1;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ОпределитьРасположениеЭлементовУправления()
	
	МассивНастроек              = Новый Массив;
	НастройкиЭлементаУправления = Новый Структура;
	
	НастройкиЭлементаУправления.Вставить("Поле"                     , "ДетализироватьПоПериоду");
	НастройкиЭлементаУправления.Вставить("РастягиватьПоГоризонтали" , Ложь);
	НастройкиЭлементаУправления.Вставить("АвтоМаксимальнаяШирина"   , Ложь);
	НастройкиЭлементаУправления.Вставить("Ширина"                   , 12);
	
	МассивНастроек.Добавить(НастройкиЭлементаУправления);
	
	НастройкиЭлементовУправления = Новый Структура();
	НастройкиЭлементовУправления.Вставить("ПараметрыДанных", МассивНастроек);
	
	Возврат НастройкиЭлементовУправления;
	
КонецФункции

#КонецОбласти

#КонецЕсли