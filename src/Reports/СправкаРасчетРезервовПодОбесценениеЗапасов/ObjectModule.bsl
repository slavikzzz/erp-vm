#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета = ПолучитьПараметрыОтчета(НастройкиОтчета);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыОтчета.ПериодОтчета) Тогда
	
		РезультатЗапросаПравил = ПолучитьДействующиеПравила(ПараметрыОтчета.ПериодОтчета, ПараметрыОтчета.Организация);
	
		УстановитьПериодОтчета(НастройкиОтчета, ПараметрыОтчета);
	
		Если РезультатЗапросаПравил.Пустой() Тогда
			СформироватьПустуюТаблицуДляСКД(МенеджерВременныхТаблиц);
		Иначе	
			СформироватьВременнуюТаблицуДляСКД(МенеджерВременныхТаблиц, РезультатЗапросаПравил, ПараметрыОтчета.ПериодОтчета);
		КонецЕсли;
	
	Иначе
		СформироватьПустуюТаблицуДляСКД(МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Скомпонуем и выведем результат запроса в табличный документ
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки,,, МенеджерВременныхТаблиц);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура из см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево -Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если ЗакрытиеМесяцаСервер.ЭтаФормаОткрытаИзФормыЗакрытияМесяца(ЭтаФорма) Тогда
		
		ЭтаФорма.КлючНазначенияИспользования = "КонтекстЗакрытиеМесяца";
		ФормаПараметры = ЭтаФорма.ФормаПараметры;
		
		ФормаПараметры.КлючНазначенияИспользования = ЭтаФорма.КлючНазначенияИспользования;
		
		ПериодОтчета = КонецМесяца(Параметры.ПериодРегистрации);
		ФормаПараметры.Отбор.Очистить();
		ФормаПараметры.Отбор.Вставить("ПериодОтчета", ПериодОтчета);
		Если НЕ Параметры.ВсеОрганизации Тогда
			ФормаПараметры.Отбор.Вставить("Организация", Параметры.МассивОрганизаций);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ПараметрКоманды") И Параметры.ПараметрКоманды.Количество() <> 0 Тогда
		
		ДокументРасчетаРезервов = Параметры.ПараметрКоманды[0];
		РеквизитыРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетаРезервов, "Дата,Организация");
		ПериодОтчета = КонецМесяца(РеквизитыРасчета.Дата);
		ФормаПараметры = ЭтаФорма.ФормаПараметры;
		ФормаПараметры.Отбор.Очистить();
		ФормаПараметры.Отбор.Вставить("ПериодОтчета", ПериодОтчета);
		ФормаПараметры.Отбор.Вставить("Организация", РеквизитыРасчета.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		НастроитьПараметрДанныеОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

// Настроить параметр данные отчета.
// 
// Параметры:
//  НастройкиОтчета						- НастройкиКомпоновкиДанных					- настройки отчета.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных					- настройки варианта отчета, которые будут загружены
//																						в компоновщик настроек после его инициализации.
//										- Неопределено 								- настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки, которые будут загружены в компоновщик
//																						настроек после его инициализации.
//										- Неопределено 								- пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура НастроитьПараметрДанныеОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеОтчета");

	СписокВыбора = Новый СписокЗначений;
	
	Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
		СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета';
										|en = 'In management accounting currency'"));
	КонецЕсли;
		
	СписокВыбора.Добавить(2, НСтр("ru = 'В валюте регл. учета';
									|en = 'In local accounting currency'"));
		
	ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраДанныеОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеОтчета"));
	НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеОтчета.ИдентификаторПользовательскойНастройки);
	
	Если Не НастройкаДанныеОтчета = Неопределено
		И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
		НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыОтчета(НастройкиОтчета)
	
	СтруктураПараметров = Новый Структура("ПериодОтчета,Организация");
	
	ПараметрыДанных = НастройкиОтчета.ПараметрыДанных;
	ПараметрПериод = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	ПараметрОрганизация = ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	
	Если НЕ ЗначениеЗаполнено(ПараметрПериод.Значение) Тогда
		СтруктураПараметров.ПериодОтчета = КонецМесяца(ТекущаяДатаСеанса());
	Иначе
		СтруктураПараметров.ПериодОтчета = КонецМесяца(ПараметрПериод.Значение);
	КонецЕсли;
	
	Если НЕ ПараметрОрганизация.Использование ИЛИ НЕ ЗначениеЗаполнено(ПараметрОрганизация.Значение) Тогда
		СтруктураПараметров.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Иначе
		СтруктураПараметров.Организация = ПараметрОрганизация.Значение;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьДействующиеПравила(ПериодОтчета, Организация)
	
	ЗапросПравил = Новый Запрос;
	ЗапросПравил.Текст = ТекстЗапросаПравил();
	ЗапросПравил.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(Организация);
	Иначе
		СписокОрганизаций = Организация;
	КонецЕсли;
	
	ЗапросПравил.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	ЗапросПравил.УстановитьПараметр("ВсеОрганизации", СписокОрганизаций.Количество() = 0);
	
	Возврат ЗапросПравил.Выполнить();
	
КонецФункции

Процедура УстановитьПериодОтчета(НастройкиОтчета, ПараметрыОтчета)
	
	ПараметрыДанных = НастройкиОтчета.ПараметрыДанных;
		
	ДокументРасчетаРезервов = ПолучитьДокументРасчетаРезервов(ПараметрыОтчета);	
	
	Если ЗначениеЗаполнено(ДокументРасчетаРезервов) Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Новый Граница(ДокументРасчетаРезервов.МоментВремени(), ВидГраницы.Включая));
		ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", Новый Граница(ДокументРасчетаРезервов.МоментВремени(), ВидГраницы.Включая));
	Иначе
		ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Новый Граница(ПараметрыОтчета.ПериодОтчета, ВидГраницы.Исключая));
		ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", Новый Граница(ПараметрыОтчета.ПериодОтчета, ВидГраницы.Включая));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокументРасчетаРезервов(ПараметрыОтчета)
	
	ДокументРасчетаРезервов = ПредопределенноеЗначение("Документ.РасчетРезервовПодОбесценениеЗапасов.ПустаяСсылка");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетРезервовПодОбесценениеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасчетРезервовПодОбесценениеЗапасов КАК РасчетРезервовПодОбесценениеЗапасов
	|ГДЕ
	|	РасчетРезервовПодОбесценениеЗапасов.Проведен
	|	И РасчетРезервовПодОбесценениеЗапасов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетРезервовПодОбесценениеЗапасов.Организация = &Организация");
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыОтчета.ПериодОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПараметрыОтчета.ПериодОтчета));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДокументРасчетаРезервов = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ДокументРасчетаРезервов;
		
КонецФункции

Процедура СформироватьПустуюТаблицуДляСКД(МенеджерВременныхТаблиц)
	
	ЗапросПустойВременнойТаблицы = Новый Запрос;
	ЗапросПустойВременнойТаблицы.Текст = ТекстЗапросаПустойИтоговойТаблицы();
	ЗапросПустойВременнойТаблицы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПустойВременнойТаблицы.Выполнить();
		
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуДляСКД(МенеджерВременныхТаблиц, РезультатЗапросаПравил, ПериодОтчета)
	
	ВыборкаПравил = РезультатЗапросаПравил.Выбрать();
	
	КоличествоВременныхТаблиц = 
		Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.СоздатьВременныеТаблицыОстатковПоПравилам(
			ВыборкаПравил, 
			Новый Граница(ПериодОтчета, ВидГраницы.Включая), 
			МенеджерВременныхТаблиц);
	
	ПараметрыПомещения = Новый Структура;
	ПараметрыПомещения.Вставить("ИмяВременнойТаблицы", "ТаблицаОстатковПоПравилу");
	ПараметрыПомещения.Вставить("НомерВременнойТаблицы", КоличествоВременныхТаблиц);
	Справочники.ПравилаФормированияРезервовПодОбесценениеЗапасов.ОбъединитьВременныеТаблицыОстатковВИтоговую(МенеджерВременныхТаблиц, ПараметрыПомещения);
		
КонецПроцедуры

Функция ТекстЗапросаПравил()
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаФормированияРезервовПодОбесценениеЗапасов.Ссылка КАК Правило,
	|	ПравилаФормированияРезервовПодОбесценениеЗапасов.РегламентированныйУчет КАК РегламентированныйУчет,
	|	ПравилаФормированияРезервовПодОбесценениеЗапасов.УправленческийУчет КАК УправленческийУчет
	|ИЗ
	|	Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов КАК ПравилаФормированияРезервовПодОбесценениеЗапасов
	|ГДЕ
	|	НЕ ПравилаФормированияРезервовПодОбесценениеЗапасов.ПометкаУдаления
	|	И ВЫБОР
	|		КОГДА ПравилаФормированияРезервовПодОбесценениеЗапасов.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПравилаФормированияРезервовПодОбесценениеЗапасов.НачалоДействия <= КОНЕЦПЕРИОДА(&ПериодОтчета, МЕСЯЦ)
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ПравилаФормированияРезервовПодОбесценениеЗапасов.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПравилаФормированияРезервовПодОбесценениеЗапасов.КонецДействия >= НАЧАЛОПЕРИОДА(&ПериодОтчета, МЕСЯЦ)
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА &ВсеОрганизации
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПравилаФормированияРезервовПодОбесценениеЗапасов.Владелец В (&СписокОрганизаций)
	|	КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПустойИтоговойТаблицы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка) КАК РазделУчета,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаФинансовогоУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам,
	|	ЗНАЧЕНИЕ(Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов.ПустаяСсылка) КАК Правило,
	|	0 КАК ЧистаяСтоимостьПродажиРегл,
	|	0 КАК ЧистаяСтоимостьПродажиУпр
	|ПОМЕСТИТЬ ВременнаяТаблицаОстатков
	|ГДЕ
	|	ЛОЖЬ";
	
	Возврат ТекстЗапроса
				
КонецФункции


#КонецОбласти

#КонецЕсли