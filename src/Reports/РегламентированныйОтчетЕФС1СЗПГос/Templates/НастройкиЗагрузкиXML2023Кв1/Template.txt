// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы едиственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : null,
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
	ДобавитьКолонкуВДеревоЕслиНеНайдена(П.ДеревоДляЗагрузки, "МнУр"); // для определения многоуровневых разделов
	НайденныйУзел = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ЕФС-1/СЗВ/ЗЛ")[0];
	НайденныйУзел.МнУр = Истина;
	НайденныеУзлыИерархия = УзлыПоXPath(НайденныйУзел, "//node()"); // вся иерархия подчиненных узлов любого типа
	Для Каждого ТекущийУзел Из НайденныеУзлыИерархия Цикл
		ТекущийУзел.МнУр = Истина;
		Если ТекущийУзел.Код = "СЗПГос" И ТекущийУзел.Раздел = "Раздел1" Тогда
			ТекущийУзел.Обязательность = ТекущийУзел.Обязательность + "П"; // пропустить при автоматической загрузке
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	Титульный = Неопределено;
	
	П.ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", Титульный);
	Если Титульный <> Неопределено Тогда
		
		Титульный.Предст_РегНомер = П.ПараметрыОтчета.Предст_РегНомер;
		Титульный.Предст_НаимОрг  = П.ПараметрыОтчета.Предст_НаимОрг;
		Титульный.Предст_ИНН      = П.ПараметрыОтчета.Предст_ИНН;
		
		П.ПараметрыОтчета.Свойство("Предст_КПП",     Титульный.Предст_КПП);
		П.ПараметрыОтчета.Свойство("Предст_ОКФС",    Титульный.Предст_ОКФС);
		П.ПараметрыОтчета.Свойство("Предст_ОКОГУ",   Титульный.Предст_ОКОГУ);
		П.ПараметрыОтчета.Свойство("Предст_ОКПО",    Титульный.Предст_ОКПО);
		П.ПараметрыОтчета.Свойство("Предст_ОКВЭД",   Титульный.Предст_ОКВЭД);
		П.ПараметрыОтчета.Свойство("Предст_ОГРН",    Титульный.Предст_ОГРН);
		П.ПараметрыОтчета.Свойство("Предст_Телефон", Титульный.Предст_Телефон);
		П.ПараметрыОтчета.Свойство("Предст_ЭлПочта", Титульный.Предст_ЭлПочта);
		
		Титульный.РегНомер = П.ПараметрыОтчета.РегНомер;
		Титульный.НаимОрг  = П.ПараметрыОтчета.НаимОрг;
		Титульный.ИНН      = П.ПараметрыОтчета.ИНН;
		
		П.ПараметрыОтчета.Свойство("КПП",     Титульный.КПП);
		П.ПараметрыОтчета.Свойство("ОКФС",    Титульный.ОКФС);
		П.ПараметрыОтчета.Свойство("ОКОГУ",   Титульный.ОКОГУ);
		П.ПараметрыОтчета.Свойство("ОКПО",    Титульный.ОКПО);
		П.ПараметрыОтчета.Свойство("ОКВЭД",   Титульный.ОКВЭД);
		П.ПараметрыОтчета.Свойство("ОГРН",    Титульный.ОГРН);
		П.ПараметрыОтчета.Свойство("Телефон", Титульный.Телефон);
		П.ПараметрыОтчета.Свойство("ЭлПочта", Титульный.ЭлПочта);
		
		Если ЗначениеЗаполнено(П.ПараметрыОтчета.Предст_РегНомер)
		   И ЗначениеЗаполнено(П.ПараметрыОтчета.Предст_НаимОрг)
		   И НЕ ЗначениеЗаполнено(П.ПараметрыОтчета.РегНомер) Тогда
			Титульный.ПризнакСтрахователя = "V";
		Иначе
			Титульный.ПризнакСтрахователя = "";
		КонецЕсли;
		
		П.ПараметрыОтчета.Свойство("Рук_Фамилия",   Титульный.Рук_Фамилия);
		П.ПараметрыОтчета.Свойство("Рук_Имя",       Титульный.Рук_Имя);
		П.ПараметрыОтчета.Свойство("Рук_Отчество",  Титульный.Рук_Отчество);
		П.ПараметрыОтчета.Свойство("Рук_Должность", Титульный.Рук_Должность);
		П.ПараметрыОтчета.Свойство("Предст_ОКВЭД",  Титульный.Предст_ОКВЭД);
		Если НЕ ЗначениеЗаполнено(Титульный.ОКОГУ) Тогда
			П.ПараметрыОтчета.Свойство("ОКОГУ", Титульный.ОКОГУ);
		КонецЕсли;
		
		ЧастиИмениФайлаВыгрузки = СтрРазделить(П.ПараметрыОтчета.ИмяФайлаВыгрузки, "_");
		Если ЧастиИмениФайлаВыгрузки.Количество() >= 4 И ВРег(ЧастиИмениФайлаВыгрузки[3]) = "ЕФС-1" Тогда
			Титульный.КодОргана = ЧастиИмениФайлаВыгрузки[2];
		КонецЕсли;
		
	КонецЕсли;
	
	ТипыСведений = Новый Соответствие;
	ТипыСведений.Вставить("1", "Исходные");
	ТипыСведений.Вставить("2", "Корректирующие");
	ТипыСведений.Вставить("3", "Отменяющие");

	УзлыРаздел1 = УзлыПоXPath(П.ДеревоДляЗагрузки, "//ЕФС-1/СЗВ/ЗЛ"); // многоуровневый раздел 1
	
	НомСтраницы = Новый Массив(1);
	
	Для НомСтраницыУровень1 = 1 По УзлыРаздел1.Количество() Цикл
		
		УзелРаздел1Уровень1 = УзлыРаздел1[НомСтраницыУровень1 - 1];
		
		НомСтраницы[0] = НомСтраницыУровень1;
		
		НомСтроки = Новый Массив(1);
		
		УзлыРаздел1СЗПГос = УзлыПоXPath(УзелРаздел1Уровень1, "СЗПГос");
		Для НомСтрокиУровень1 = 1 По УзлыРаздел1СЗПГос.Количество() Цикл
			
			НомСтроки[0] = НомСтрокиУровень1;
			
			УзелРаздел1СЗПГос = УзлыРаздел1СЗПГос[НомСтрокиУровень1 - 1];
			
			УзелТипСведений = УзлыПоXPath(УзелРаздел1СЗПГос, "Тип")[0];
			
			ТипСведений = ТипыСведений[УзелТипСведений.Значение];
			Если ЗначениеЗаполнено(ТипСведений) Тогда
				УзелТипСведений.Значение = ТипСведений;
			КонецЕсли;
			
			УзлыРаздел1УЗиЗП = УзлыПоXPath(УзелРаздел1СЗПГос, "УЗиЗП");
			Для НомСтрокиУровень2 = 1 По УзлыРаздел1УЗиЗП.Количество() Цикл
				
				УзелРаздел1УЗиЗП = УзлыРаздел1УЗиЗП[НомСтрокиУровень2 - 1];
				
				УзлыНетЗваний = УзлыПоXPath(УзелРаздел1УЗиЗП, "Звание/НетЗваний");
				Если ЗначениеЗаполнено(УзлыНетЗваний) И ЗначениеЗаполнено(УзлыНетЗваний[0].Значение) Тогда
					УзлыНетЗваний[0].Значение = "V";
				КонецЕсли;
				
				УзелПериодС = УзлыПоXPath(УзелРаздел1УЗиЗП, "Период/УТ2:С")[0];
				УзелНомерСтроки = СкопированныйУзел(УзелПериодС.Родитель, УзелПериодС);
				УзелНомерСтроки.Код  = "УТ2:НомерСтроки";
				УзелНомерСтроки.Ключ = "П00113М200001";
				УзелНомерСтроки.Формат = "N";
				УзелНомерСтроки.МинРазмерность  = 1;
				УзелНомерСтроки.МаксРазмерность = 5;
				УзелНомерСтроки.Значение = Формат(НомСтрокиУровень2, "ЧГ=0");
				
				УзлыРаздел1РазмерФЧ = УзлыПоXPath(УзелРаздел1УЗиЗП, "Квалификация/РазмерФЧ");
				Для Каждого УзелРаздел1РазмерФЧ Из УзлыРаздел1РазмерФЧ Цикл
					ГруппаСтрокРазмерФЧ = УзелРаздел1РазмерФЧ.Родитель.Строки.Добавить();
					ГруппаСтрокРазмерФЧ.Тип = "С";
					ГруппаСтрокРазмерФЧ.МнУр = Истина;
					ГруппаСтрокРазмерФЧ.Код = "ГруппаРазмерФЧ";
					ГруппаСтрокРазмерФЧ.Раздел = "Раздел1";
					ГруппаСтрокРазмерФЧ.Обязательность = "OM";
					ГруппаСтрокРазмерФЧ.Многостраничность = Ложь;
					ГруппаСтрокРазмерФЧ.Многострочность = Истина;
					
					УзелРаздел1РазмерФЧПодч = СкопированныйУзел(ГруппаСтрокРазмерФЧ, УзелРаздел1РазмерФЧ);
					УзелРаздел1РазмерФЧПодч.Значение = УзелРаздел1РазмерФЧ.Значение;
					
					УзелРаздел1РазмерФЧ.Родитель.Строки.Удалить(УзелРаздел1РазмерФЧ);
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаполнитьДаннымиСохраненныйДокументИзДереваДляЗагрузки(УзелРаздел1СЗПГос, П.ДанныеОтчета, П.ПараметрыОтчета, , НомСтраницы, НомСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти