#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ПодготовленныйРеглОтчет = ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет);
	
	РазделыОтчета       = ПодготовленныйРеглОтчет.РазделыОтчета;
	ДанныеРеглОтчета    = ПодготовленныйРеглОтчет.ДанныеРеглОтчета;
	ДеревоСтраницОтчета = ПодготовленныйРеглОтчет.ДеревоСтраницОтчета;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", "");
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет)
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
		
	РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	РазделыОтчета.Титульный.Период = Формат(ДанныеРеглОтчета.СтруктураРеквизитовФормы.КодОтчетногоПериода[
	"НеЗаполненКодФормыРеорганизации_" + Месяц(ПараметрыАвтоформирования.ДатаОкончания)], "ЧЦ=2; ЧВН=");
	РазделыОтчета.Титульный.ОтчетГод = Формат(ПараметрыАвтоформирования.ДатаОкончания, "ДФ=гггг");
	РазделыОтчета.Титульный.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи,
								   РазделыОтчета.Титульный);
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы, ПараметрыАвтоформирования.ДатаОкончания);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПодготовленныйРеглОтчет = Новый Структура;
	ПодготовленныйРеглОтчет.Вставить("РазделыОтчета",       РазделыОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДанныеРеглОтчета",    ДанныеРеглОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	Возврат ПодготовленныйРеглОтчет;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Персонифицированные сведения о физических лицах");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КодОтчетногоПериода");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = Новый Структура;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Сведения";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "120";
	Иначе
		СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "214";
		Если РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
			<> СтруктураРеквизитовФормы.Организация Тогда
			СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "222";
		ИначеЕсли РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(
			СтруктураРеквизитовФормы.Организация) Тогда
			СтруктураДанныхРазделов.СтруктураДанныхТитульный.ПоМесту = "335";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОтчетногоПериода(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода = Новый Структура;
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_1",  71);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_2",  72);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_3",  73);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_4",  74);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_5",  75);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_6",  76);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_7",  77);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_8",  78);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_9",  79);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_10", 80);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_11", 81);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("ЗаполненКодФормыРеорганизации_12", 82);
	
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_1",  01);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_2",  02);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_3",  03);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_4",  04);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_5",  05);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_6",  06);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_7",  07);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_8",  08);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_9",  09);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_10", 10);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_11", 11);
	СтруктураРеквизитовФормы.КодОтчетногоПериода.Вставить("НеЗаполненКодФормыРеорганизации_12", 12);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	СсылкаНаРегистрациюВНО = РеквизитЭлементаСправочника(ИмяФормы, СтруктураРеквизитовФормы.Организация);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОГРН";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
			
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
			ПоМесту = СокрЛП(СтруктураДанныхТитульный.Области.ПоМесту.Значение);
			
			Если СтруктураРеквизитовФормы.ИП И (ПоМесту = "120" ИЛИ ПоМесту = "124") Тогда
				СтруктураДанныхТитульный.Области.ОГРНИП.Значение = СокрЛП(СведенияОбОрганизации.ОГРН);
			Иначе
				СтруктураДанныхТитульный.Области.ОГРНИП.Значение = "";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
			
			СтруктураДанныхТитульный.ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
			
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
			ПоМесту = СокрЛП(СтруктураДанныхТитульный.ПоМесту);
			
			Если СтруктураРеквизитовФормы.ИП И (ПоМесту = "120" ИЛИ ПоМесту = "124") Тогда
				СтруктураДанныхТитульный.ОГРНИП = СокрЛП(СведенияОбОрганизации.ОГРН);
			Иначе
				СтруктураДанныхТитульный.ОГРНИП = "";
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(НаименованиеОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
	СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи, СсылкаНаРегистрациюВНО);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи,
										СсылкаНаРегистрациюВНО = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП   = СокрЛП(СтруктураДанныхТитульный.КПП);
		
	КонецЕсли;
	
	Если СсылкаНаРегистрациюВНО <> Неопределено Тогда
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП, СсылкаНаРегистрациюВНО.КодПоОКТМО);
		
	Иначе
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		
	КонецЕсли;
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Подписант - представитель.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ОргУп.Значение        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ОргУп        = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитЭлементаСправочника(ИмяФормы, Ссылка) Экспорт
	
	Если Ссылка.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		Возврат Ссылка.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида
	= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ВерсияФормы",                  ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",          ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",               ПараметрыЗаписи.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",  ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",             ПараметрыЗаписи.ФлПодсчетСтраниц);
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																						|en = '%1'"),
		РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов");
	
	СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьКодОтчетногоПериода(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  ДанныеРеглОтчета.СтруктураРеквизитовФормы,
										  ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	
	ИнициализироватьОбычныеРазделы(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
								   СтруктураДанныхРазделов);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = ПараметрыАвтоформирования.ДатаОкончания;
	
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, СтруктураДанныхРазделов);
	
	РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, Новый УникальныйИдентификатор,
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	
	Для Каждого Раздел Из ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов Цикл
		
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы,
										  Контейнер,
										  ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета,
																	ИмяФормыОтчета,
																	ПараметрыОтчета,
																	Контейнер);
		
		РассчитатьИтоги(
		ИмяФормы, Контейнер, ДанныеРеглОтчета.СтруктураРеквизитовФормы, ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	Возврат;
	
КонецПроцедуры

Процедура РассчитатьИтоги(ИмяФормы, Контейнер, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	
	Возврат;
	
КонецПроцедуры

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2';
				|en = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
			ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет), ПараметрыЗаписи.НаименованиеОтчета));
			
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
	
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(
	ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ПерсонифицированныеСведенияОФизическихЛицах");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		
	КонецЦикла;
	
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
		СохраненныеДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИндивидуальныйПредприниматель);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаПодписи", Титульный.ДатаПодписи);
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ОГРНИП", СокрЛП(Титульный.ОГРНИП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ПерсСвФЛ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "NO_PERSSVFL"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки501");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("112");
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("121");
	ВозможныеКодыПоМесту.Добавить("122");
	ВозможныеКодыПоМесту.Добавить("124");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("217");
	ВозможныеКодыПоМесту.Добавить("222");
	ВозможныеКодыПоМесту.Добавить("240");
	ВозможныеКодыПоМесту.Добавить("335");
	ВозможныеКодыПоМесту.Добавить("350");
	
	ВозможныеКодыПериода = Новый Массив;
	Для Ном = 1 По 12 Цикл
		ВозможныеКодыПериода.Добавить(Формат(Ном, "ЧЦ=2;ЧВН="));
	КонецЦикла;
	ВозможныеКодыПериодаРеорг = Новый Массив;
	Для Ном = 71 По 82 Цикл
		ВозможныеКодыПериодаРеорг.Добавить(Формат(Ном, "ЧЦ=2;ЧВН="));
	КонецЦикла;
	ВозможныеКодыПериодаСнятиеСУчетаИП = СтрРазделить("AC,AD,AE,BC,BD,BE,CC,CD,CE,DC,DD,DE", ",", Ложь);
	
	ВозможныеКодыФормыРеорганизции = Новый Массив;
	ВозможныеКодыФормыРеорганизции.Добавить("1");
	ВозможныеКодыФормыРеорганизции.Добавить("2");
	ВозможныеКодыФормыРеорганизции.Добавить("3");
	ВозможныеКодыФормыРеорганизции.Добавить("4");
	ВозможныеКодыФормыРеорганизции.Добавить("5");
	ВозможныеКодыФормыРеорганизции.Добавить("6");
	ВозможныеКодыФормыРеорганизции.Добавить("7");
	ВозможныеКодыФормыРеорганизции.Добавить("9");
	ВозможныеКодыФормыРеорганизции.Добавить("0");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан ИНН организации, обособленного подразделения", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ИНН организации, обособленного подразделения, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан КПП организации, обособленного подразделения", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан КПП организации, обособленного подразделения, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		Иначе
			Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
			Если Символы56КПП = "50" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"5-й и 6-й символы в КПП организации, обособленного подразделения не должны быть равны 50", "Титульный", "КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задано наименование организации, обособленного подразделения", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ПараметрыВыгрузки.ПоМесту = "124" Тогда
			ИП_ГлаваКФХ = " главы крестьянского (фермерского) хозяйства";
		Иначе
			ИП_ГлаваКФХ = " индивидуального предпринимателя";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			ОписаниеОшибки = "Не задан ИНН" + ИП_ГлаваКФХ;
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		Иначе
			ТекстСообщения = "";
			Если НЕ ИННФЛСоответствуетТребованиям(ИмяФормы, ПараметрыВыгрузки.ИННОрг, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задан ИНН" + ИП_ГлаваКФХ + "."
				+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ИНН");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Фамилия);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия" + ИП_ГлаваКФХ, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 1, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задана фамилия" + ИП_ГлаваКФХ + "."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Имя);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя" + ИП_ГлаваКФХ, "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 2, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано имя" + ИП_ГлаваКФХ + "."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если СокрЛП(ПараметрыВыгрузки.Фамилия) = "-" И СокрЛП(ПараметрыВыгрузки.Имя) = "-" Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "В ФИО" + ИП_ГлаваКФХ
			+ " не допускается использование прочерка для фамилии и имени одновременно", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.Отчество);
		Если ЗначениеЗаполнено(РеквизитФИО)
			И НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 3, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано отчество" + ИП_ГлаваКФХ + "."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПараметрыВыгрузки.ПоМесту = "120" ИЛИ ПараметрыВыгрузки.ПоМесту = "124" Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРНИП) Тогда
				ОписаниеОшибки = "Не задан ОГРНИП" + ИП_ГлаваКФХ;
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ОГРНИП");
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОГРНИП) <> 15 Тогда
				ОписаниеОшибки = "Задан ОГРНИП" + ИП_ГлаваКФХ + ", не состоящий из 15 цифр";
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ОписаниеОшибки, "Титульный", "ОГРНИП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код места, по которому представляются сведения", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан некорректный код места, по которому представляются сведения", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код периода, за который представляются сведения", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаСнятиеСУчетаИП.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан некорректный код периода, за который представляются сведения", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) <> Неопределено
		ИЛИ ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) <> Неопределено
		ИЛИ ВозможныеКодыПериодаСнятиеСУчетаИП.Найти(ПараметрыВыгрузки.Период) <> Неопределено Тогда
		
		Если ПараметрыВыгрузки.ПоМесту = "120" ИЛИ ПараметрыВыгрузки.ПоМесту = "124" Тогда
			
			МесяцОкончания = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
			ВозмПериод1 = ВозможныеКодыПериода[МесяцОкончания - 1];
			ВозмПериод2 = ВозможныеКодыПериодаСнятиеСУчетаИП[МесяцОкончания - 1];
			
			Если ПараметрыВыгрузки.Период <> ВозмПериод1 И ПараметрыВыгрузки.Период <> ВозмПериод2 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задано некорректное сочетание кода места, по которому представляются "
				+ "сведения, и кода периода, за который представляются сведения. Для кода " + ПараметрыВыгрузки.ПоМесту
				+ " места, по которому представляются сведения за " + ПредставлениеПериода(
				НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
				КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ФП = Истина") + " допустимы коды "
				+ ВозмПериод1 + ", " + ВозмПериод2 + " периода, за который представляются сведения", "Титульный", "Период");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (ПараметрыВыгрузки.ЭтоЮЛ И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ФамилияПодписанта);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 1, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задана фамилия подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ИмяПодписанта);
		Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 2, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано имя подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если СокрЛП(ПараметрыВыгрузки.ФамилияПодписанта) = "-" И СокрЛП(ПараметрыВыгрузки.ИмяПодписанта) = "-" Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"В ФИО подписанта не допускается использование прочерка для фамилии и имени одновременно",
			"Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ТекстСообщения = "";
		РеквизитФИО = СокрЛП(ПараметрыВыгрузки.ОтчествоПодписанта);
		Если ЗначениеЗаполнено(РеквизитФИО)
			И НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 3, ТекстСообщения) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Неверно задано отчество подписанта."
			+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""), "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не заданы наименование и реквизиты документа, подтверждающего "
		+ "полномочия представителя плательщика страховых взносов", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации)",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг)
			И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задано некорректное значение кода формы реорганизации (ликвидации)", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			Иначе
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации", "Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации", "Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				Иначе
					Символы56КПП = Сред(ПараметрыВыгрузки.КППРеорг, 5, 2);
					Если Символы56КПП = "50" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "5-й и 6-й символы в КПП " + ?(ПараметрыВыгрузки.ФормРеорг = "9",
						"лишенного полномочий (закрытого) обособленного подразделения", "реорганизованной организации")
						+ " не должны быть равны 50", "Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сведения.
	//
	ДеревоРаздела = ДанныеМногоуровневыхРазделов.Раздел1;
	
	Если НЕ ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Раздел1",
		СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заполнены персональные данные физических лиц и сведения о суммах выплат и иных вознаграждений в их пользу",
		"Раздел1", "П000010003001", "1");
		СтатусПроверки = Ложь;
		
	Иначе
		
		Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
			
			Данные = СтраницаРаздела.Данные;
			НомерСтраницы = Формат(ДеревоРаздела.Строки.Индекс(СтраницаРаздела) + 1, "ЧГ=");
			
			СтруктПарам = Новый Структура;
			СтруктПарам.Вставить("ПроверкаВыгрузкиСтраницы");
			СтруктПарам.Вставить("Фам", Данные.П000010004001);
			СтруктПарам.Вставить("Имя", Данные.П000010005001);
			СтруктПарам.Вставить("Отч", Данные.П000010006001);
			СтруктПарам.Вставить("СНИЛС", Данные.П000010003001);
			СтруктПарам.Вставить("НомерСтраницы", НомерСтраницы);
			ПредстСтраницы
			= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеСтраницыРазделаРеглОтчетаСодержащегоДанныеФизическихЛиц(
			СтруктПарам);
			
			ПрАннулир = СокрЛП(Данные["П000010001001"]);
			Если ЗначениеЗаполнено(ПрАннулир) Тогда
				Если ПрАннулир <> "1" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
					+ ": в строке 010 задан некорректный признак аннулирования сведений о физическом лице",
					"Раздел1", "П000010001001", НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.Вид = 0 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
					+ ": строка 010 не должна быть заполнена в случае представления первичных сведений",
					"Раздел1", "П000010001001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИННФЛ = СокрЛП(Данные["П000010002001"]);
			Если ЗначениеЗаполнено(ИННФЛ) Тогда
				ТекстСообщения = "";
				Если НЕ ИННФЛСоответствуетТребованиям(ИмяФормы, ИННФЛ, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
					+ ": в строке 020 неверно задан ИНН физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
					" " + ТекстСообщения, ""), "Раздел1", "П000010002001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			СНИЛС = СокрЛП(Данные["П000010003001"]);
			Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
				+ ": в строке 030 не задан СНИЛС физического лица", "Раздел1", "П000010003001", НомерСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ СНИЛССоответствуетТребованиям(Данные["П000010003001"], ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
				+ ": в строке 030 неверно задан СНИЛС физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел1", "П000010003001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если СокрЛП(Данные["П000010004001"]) = "" И СокрЛП(Данные["П000010005001"]) = "" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
				+ ": не заданы фамилия и (или) имя", "Раздел1", "П000010004001", НомерСтраницы);
				СтатусПроверки = Ложь;
			Иначе
				ТекстСообщения = "";
				РеквизитФИО = СокрЛП(Данные["П000010004001"]);
				Если ЗначениеЗаполнено(РеквизитФИО)
					И НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 1, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
					+ ": в строке 040 неверно задана фамилия физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
					" " + ТекстСообщения, ""), "Раздел1", "П000010004001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ТекстСообщения = "";
				РеквизитФИО = СокрЛП(Данные["П000010005001"]);
				Если ЗначениеЗаполнено(РеквизитФИО)
					И НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 2, ТекстСообщения) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
					+ ": в строке 050 неверно задано имя физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
					" " + ТекстСообщения, ""), "Раздел1", "П000010005001", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			ТекстСообщения = "";
			РеквизитФИО = СокрЛП(Данные["П000010006001"]);
			Если ЗначениеЗаполнено(РеквизитФИО)
				И НЕ РеквизитФИОСоответствуетТребованиям(ИмяФормы, РеквизитФИО, 3, ТекстСообщения) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
				+ ": в строке 060 неверно задано отчество физического лица." + ?(ЗначениеЗаполнено(ТекстСообщения),
				" " + ТекстСообщения, ""), "Раздел1", "П000010006001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если Данные["П000010007001"] < 0 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения -> " + ПредстСтраницы
				+ ": в строке 070 значение не должно быть отрицательным", "Раздел1", "П000010007001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ИННФЛСоответствуетТребованиям(ИмяФормы, Знач ИНН, ТекстСообщения)
	
	Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ТекстСообщения) Тогда
		
		Если ЗначениеЗаполнено(ТекстСообщения) И Прав(ТекстСообщения, 1) = "." Тогда
			ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения) - 1);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Символы12 = Лев(ИНН, 2);
	
	НедопустимыеСимволы12 = СтрРазделить("00,96,98", ",", Ложь);
	
	Если НедопустимыеСимволы12.Найти(Символы12) <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Недопустимы следующие значения в двух первых разрядах ИНН: %1';
										|en = 'Недопустимы следующие значения в двух первых разрядах ИНН: %1'"),
		СтрСоединить(НедопустимыеСимволы12, ", "));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СНИЛССоответствуетТребованиям(Знач СНИЛС, ТекстСообщения)
	
	ТекстСообщенияОбщий = НСтр(
	"ru = 'СНИЛС должен соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра)';
	|en = 'СНИЛС должен соответствовать одному из шаблонов: ""ХХХ-ХХХ-ХХХ-ХХ"", ""ХХХ-ХХХ-ХХХ ХХ"" (X - любая цифра)'");
	
	СНИЛС = СокрЛП(СНИЛС);
	
	Если СтрДлина(СНИЛС) <> 14 Тогда
		
		ТекстСообщения = ТекстСообщенияОбщий;
		
		Возврат Ложь;
		
	Иначе
		
		Для Ном = 1 По 14 Цикл
			
			ТекСимв = Сред(СНИЛС, Ном, 1);
			
			Если Ном = 4 ИЛИ Ном = 8 Тогда
				СНИЛССоответствуетТребованиям = ТекСимв = "-";
			ИначеЕсли Ном = 12 Тогда
				СНИЛССоответствуетТребованиям = (ТекСимв = " " ИЛИ ТекСимв = "-");
			Иначе
				СНИЛССоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
			КонецЕсли;
			
			Если НЕ СНИЛССоответствуетТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция РеквизитФИОСоответствуетТребованиям(ИмяФормы, Знач РеквизитФИО, ТипРеквизитаФИО, ТекстСообщения)
	
	Если НЕ ЗначениеЗаполнено(РеквизитФИО) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипРеквизитаФИО = 1 Тогда
		
		РеквизитФИОДлина = СтрДлина(РеквизитФИО);
		
		Если РеквизитФИОДлина > 60 Тогда
			
			ТекстСообщения = НСтр("ru = 'Фамилия должна содержать не более 60 символов';
									|en = 'Фамилия должна содержать не более 60 символов'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(РеквизитФИО, , "IV- .',()/") Тогда
			
			ТекстСообщения = НСтр(
			"ru = 'Фамилия должна быть заполнена прописными (большими) и строчными (маленькими) буквами русского алфавита;"
			+ " допускаются прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""-"" (дефис), "" """
			+ " (пробел), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), ""("" (откр. скобка), "")"" (закр. скобка),"
			+ " ""/"" (прямой слэш)'");
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если РеквизитФИОДлина = 1 Тогда
			
			Если СтрНайти("IV-.',()/", РеквизитФИО) > 0 Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве единственного символа прописные (большие) буквы ""I"", ""V"""
				+ " латинского алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая),"
				+ " ""("" (откр. скобка), "")"" (закр. скобка), ""/"" (прямой слэш)'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			НедопустимыйПервыйСимвол    = СтрНайти("IV-.',)/", Лев(РеквизитФИО, 1)) > 0;
			НедопустимыйПоследнийСимвол = СтрНайти("-.',(/",  Прав(РеквизитФИО, 1)) > 0;
			
			Если НедопустимыйПервыйСимвол И НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского"
				+ " алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), "")"" (закр. скобка),"
				+ " ""/"" (прямой слэш) и не должна содержать в качестве последнего символа ""-"" (дефис), ""."" (точку),"
				+ " "" ’ "" (апостроф), "","" (запятую), ""("" (откр. скобку), ""/"" (прямой слэш)'");
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПервыйСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского"
				+ " алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), "")"" (закр. скобка),"
				+ " ""/"" (прямой слэш)'");
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать в качестве последнего символа ""-"" (дефис), ""."" (точку), "" ’ """
				+ " (апостроф), "","" (запятую), ""("" (откр. скобку), ""/"" (прямой слэш)'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ПреСимв = ?(Ном = 1, "", Сред(РеквизитФИО, Ном - 1, 1));
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				Если Ном < РеквизитФИОДлина Тогда
					
					Если СтрНайти("-.'()/", ТекСимв) > 0 Тогда
						
						Если СтрНайти("-.'()/", Сред(РеквизитФИО, Ном + 1, 1)) > 0 Тогда
							
							Если ТекСимв = "-" И СтрНайти("-.'()/", ПреСимв) = 0 Тогда
								
								Продолжить;
								
							Иначе
								
								ТекстСообщения = НСтр(
								"ru = 'Фамилия не должна содержать сочетание (повторение) подряд двух и более символов ""."" (точка),"
								+ " ""-"" (дефис), "" ’ "" (апостроф), ""("" (откр. скобка), "")"" (закр. скобка), ""/"" (прямой слэш),"
								+ " при этом допускается сочетание двух таких символов, в котором первым указан ""-"" (дефис)'");
								
								Возврат Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли ТекСимв = " " Тогда
						
						Если Сред(РеквизитФИО, Ном + 1, 1) = " " Тогда
							
							ТекстСообщения = НСтр(
							"ru = 'Фамилия не должна содержать сочетание (повторение) подряд двух и более символов "" "" (пробел),"
							+ " если они не являются начальными или конечными'");
							
							Возврат Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоОткрСкобок = 0;
			КоличествоЗакрСкобок = 0;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				КоличествоОткрСкобок = КоличествоОткрСкобок + ?(ТекСимв = "(", 1, 0);
				КоличествоЗакрСкобок = КоличествоЗакрСкобок + ?(ТекСимв = ")", 1, 0);
				
				Если КоличествоЗакрСкобок = 1 И КоличествоОткрСкобок = 0 Тогда
					
					ТекстСообщения = НСтр(
					"ru = 'Фамилия не должна содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)';
					|en = 'Фамилия не должна содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)'");
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоОткрСкобок <> КоличествоЗакрСкобок Тогда
				
				ТекстСообщения = НСтр(
				"ru = 'Фамилия не должна содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)';
				|en = 'Фамилия не должна содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)'");
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеРеквизитаФИО = ?(ТипРеквизитаФИО = 2, "Имя ", "Отчество ");
		
		РеквизитФИОДлина = СтрДлина(РеквизитФИО);
		
		Если РеквизитФИОДлина > 60 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1должно содержать не более 60 символов';
											|en = '%1должно содержать не более 60 символов'"),
			ПредставлениеРеквизитаФИО);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НЕ СтроковыеФункцииКлиентСерверРФ.ТолькоКириллицаВСтроке(РеквизитФИО, , "IV- .',()/") Тогда
			
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = '%1должно быть заполнено прописными (большими) и строчными (маленькими) буквами русского алфавита;"
			+ " допускаются прописные (большие) буквы ""I"", ""V"" латинского алфавита, символы ""-"" (дефис), "" """
			+ " (пробел), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), ""("" (откр. скобка), "")"" (закр. скобка),"
			+ " ""/"" (прямой слэш)'"),
			ПредставлениеРеквизитаФИО);
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если РеквизитФИОДлина = 1 Тогда
			
			Если СтрНайти("IV-.',()/", РеквизитФИО) > 0 Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве единственного символа прописные (большие) буквы ""I"", ""V"""
				+ " латинского алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая),"
				+ " ""("" (откр. скобка), "")"" (закр. скобка), ""/"" (прямой слэш)'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			НедопустимыйПервыйСимвол    = СтрНайти("IV-.',)/", Лев(РеквизитФИО, 1)) > 0;
			НедопустимыйПоследнийСимвол = СтрНайти("-',(/",   Прав(РеквизитФИО, 1)) > 0;
			
			Если НедопустимыйПервыйСимвол И НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского"
				+ " алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), "")"" (закр. скобка),"
				+ " ""/"" (прямой слэш) и не должно содержать в качестве последнего символа ""-"" (дефис), "" ’ "" (апостроф),"
				+ " "","" (запятую), ""("" (откр. скобку), ""/"" (прямой слэш)'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПервыйСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве первого символа прописные (большие) буквы ""I"", ""V"" латинского"
				+ " алфавита, символы ""-"" (дефис), ""."" (точка), "" ’ "" (апостроф), "","" (запятая), "")"" (закр. скобка),"
				+ " ""/"" (прямой слэш)'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			ИначеЕсли НедопустимыйПоследнийСимвол Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать в качестве последнего символа ""-"" (дефис), "" ’ "" (апостроф), "","" (запятую),"
				+ " ""("" (откр. скобку), ""/"" (прямой слэш)'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ПреСимв = ?(Ном = 1, "", Сред(РеквизитФИО, Ном - 1, 1));
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				Если Ном < РеквизитФИОДлина Тогда
					
					Если СтрНайти("-.'()/", ТекСимв) > 0 Тогда
						
						Если СтрНайти("-.'()/", Сред(РеквизитФИО, Ном + 1, 1)) > 0 Тогда
							
							Если ТекСимв = "-" И СтрНайти("-.'()/", ПреСимв) = 0 Тогда
								
								Продолжить;
								
							Иначе
								
								ТекстСообщения = СтрШаблон(НСтр(
								"ru = '%1не должно содержать сочетание (повторение) подряд двух и более символов ""."" (точка),"
								+ " ""-"" (дефис), "" ’ "" (апостроф), ""("" (откр. скобка), "")"" (закр. скобка), ""/"" (прямой слэш),"
								+ " при этом допускается сочетание двух таких символов, в котором первым указан ""-"" (дефис)'"),
								ПредставлениеРеквизитаФИО);
								
								Возврат Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли ТекСимв = " " Тогда
						
						Если Сред(РеквизитФИО, Ном + 1, 1) = " " Тогда
							
							ТекстСообщения = СтрШаблон(НСтр(
							"ru = '%1не должно содержать сочетание (повторение) подряд двух и более символов "" "" (пробел),"
							+ " если они не являются начальными или конечными'"),
							ПредставлениеРеквизитаФИО);
							
							Возврат Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			КоличествоОткрСкобок = 0;
			КоличествоЗакрСкобок = 0;
			
			Для Ном = 1 По РеквизитФИОДлина Цикл
				
				ТекСимв = Сред(РеквизитФИО, Ном, 1);
				
				КоличествоОткрСкобок = КоличествоОткрСкобок + ?(ТекСимв = "(", 1, 0);
				КоличествоЗакрСкобок = КоличествоЗакрСкобок + ?(ТекСимв = ")", 1, 0);
				
				Если КоличествоЗакрСкобок = 1 И КоличествоОткрСкобок = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр(
					"ru = '%1не должно содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)';
					|en = '%1не должно содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)'"),
					ПредставлениеРеквизитаФИО);
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоОткрСкобок <> КоличествоЗакрСкобок Тогда
				
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = '%1не должно содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)';
				|en = '%1не должно содержать непарные символы ""("" (откр. скобка) или "")"" (закр. скобка)'"),
				ПредставлениеРеквизитаФИО);
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено) Экспорт
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		
		Данные = СтраницаРаздела.Данные;
		Для каждого Пок Из Данные Цикл
			Если ЗначениеЗаполнено(Пок.Значение)
				И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
			
			ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
			Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
				
				ДанныеМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
				МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
				Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Для каждого ИмяГрафы Из МассивИменГраф Цикл
						Если ЗначениеЗаполнено(СтрокаМнЧ.Данные[ИмяГрафы])
							И ПоказателиНеанализируемыеНаЗаполненность.Найти(ИмяГрафы) = Неопределено Тогда
							Возврат Истина;
						КонецЕсли;
					КонецЦикла;
					
					ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
					Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
						
						ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппы];
						МассивИменПодчГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяПодчГруппы]["ИменаГраф"];
						Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
							Для каждого ИмяПодчГрафы Из МассивИменПодчГраф Цикл
								Если ЗначениеЗаполнено(СтрокаПодчМнЧ.Данные[ИмяПодчГрафы])
									И ПоказателиНеанализируемыеНаЗаполненность.Найти(ИмяПодчГрафы) = Неопределено Тогда
									Возврат Истина;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
			ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
			Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
				ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
				ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
				Если ЗаполненРаздел(ИмяФормы,
									ДеревоПодчРаздела,
									ИмяПодчРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов) Тогда
					
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
			ДанныеТит.КПП = СтрЗаменить(ДанныеТит.КПП, "-", "");
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
				+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОГРНИП1" Тогда
			ДанныеТит.Вставить("ОГРНИП", "");
			Для Ном = 1 По 15 Цикл
				ДанныеТит.ОГРНИП = ДанныеТит.ОГРНИП + СокрЛП(ДанныеТит["ОГРНИП" + Ном]);
				ДанныеТит.Удалить("ОГРНИП" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ДанныеТит.Вставить("ДатаПодписи", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи);
	
	// Сохранение с последующим восстановлением номеров строк многоуровнего раздела.
	// (На случай выгрузки отчета, сохраненного в 2.0, без сохранения в 3.0.)
	СохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = СохрНомераСтрокМногоуровнегоРаздела;
	
	// Сведения.
	ИмяРаздела = "Раздел1";
	СтарТаблица = СписокСохранения.ДанныеМногостраничныхРазделов[ИмяРаздела];
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Для Инд = 0 По СтарТаблица.Количество() - 1 Цикл
		СтарСтраница = СтарТаблица[Инд];
		СтарДанные = СтарСтраница.Данные;
		Если Инд > 0 Тогда
			ДеревоРаздела.Строки.Добавить();
			ДеревоРаздела.Строки[Инд].Данные = Новый Структура;
			ДеревоРаздела.Строки[Инд].ДанныеМногострочныхЧастей = Новый Структура;
		КонецЕсли;
		Для каждого Пок Из СтарДанные Цикл
			ДеревоРаздела.Строки[Инд].Данные.Вставить(Пок.Ключ, Пок.Значение);
		КонецЦикла;
	КонецЦикла;
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоРаздела);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Удалить("ДанныеМногострочныхРазделов");
	СписокСохранения.Удалить("ДанныеМногостраничныхРазделов");
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		
		Если Стр.Код = "ПерсСвФЛ" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	// Сведения.
	// Случай заполнения содержательной части в процедуре "ЗаписатьУзелДереваВXML".
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы,
							ДеревоВыгрузки,
							ПараметрыВыгрузки,
							КодировкаФайлаВыгрузки,
							СтруктураРеквизитовФормы,
							СтруктураМногоуровневыхРазделов)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки,
	СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы,
								 СтрокаДерева,
								 ПотокXML,
								 ПараметрыВыгрузки,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
			
		ИначеЕсли СтрокаДерева.Код = "ПерсСвФЛ" Тогда
			
			СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
			СохрСтруктура = Неопределено;
			
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Дан = Ветка.Данные;
				
				ПотокXML.ЗаписатьНачалоЭлемента("ПерсСвФЛ");
				
				П000010001001 = СокрЛП(Дан["П000010001001"]);
				Если ЗначениеЗаполнено(П000010001001) Тогда
					ПотокXML.ЗаписатьАтрибут("ПрАннулир", П000010001001);
				КонецЕсли;
				П000010002001 = СокрЛП(Дан["П000010002001"]);
				Если ЗначениеЗаполнено(П000010002001) Тогда
					ПотокXML.ЗаписатьАтрибут("ИННФЛ", П000010002001);
				КонецЕсли;
				ПотокXML.ЗаписатьАтрибут("СНИЛС",   СокрЛП(Дан["П000010003001"]));
				ПотокXML.ЗаписатьАтрибут("СумВыпл", СокрЛП(Формат(Дан["П000010007001"], "ЧРД=.;ЧН=0;ЧГ=;ЧЦ=17;ЧДЦ=2")));
				
				ПотокXML.ЗаписатьНачалоЭлемента("ФИО");
				
				П000010004001 = СокрЛП(Дан["П000010004001"]);
				Если ЗначениеЗаполнено(П000010004001) Тогда
					ПотокXML.ЗаписатьАтрибут("Фамилия", П000010004001);
				КонецЕсли;
				
				П000010005001 = СокрЛП(Дан["П000010005001"]);
				Если ЗначениеЗаполнено(П000010005001) Тогда
					ПотокXML.ЗаписатьАтрибут("Имя", П000010005001);
				КонецЕсли;
				
				П000010006001 = СокрЛП(Дан["П000010006001"]);
				Если ЗначениеЗаполнено(П000010006001) Тогда
					ПотокXML.ЗаписатьАтрибут("Отчество", П000010006001);
				КонецЕсли;
				
				ПотокXML.ЗаписатьКонецЭлемента();// "ФИО"
				
				ПотокXML.ЗаписатьКонецЭлемента();// "ПерсСвФЛ"
				
			КонецЦикла;
			
			ДеревоРаздела = Неопределено;
			
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки,
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		ПараметрыПечати.СохраненныйОтчет.Организация);
		СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета",
		КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания));
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ДанныеРазделов = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(
	ИмяФормы, СтруктураРеквизитовФормы, ДанныеРазделов.Титульный);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если СтруктураМногоуровневыхРазделов.Свойство(СтраницаОтчета.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		Иначе
			
			ВывестиНаПечатьЛист(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	СтруктураРеквизитовФормы, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета + НСтр("ru = ' за ';
																				|en = ' за '")
	+ ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
	КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ФП = Истина")
	+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
	ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			
			СтрИНН = СтрИНН + "--";
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
		
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда	
		
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов,
							  ТабличныйДокумент = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + Прав(СокрЛП(ИмяФормы), 7) + "_";
	
	ИмяМЧБ = ПрефиксИменМакетов + СтруктураПараметров.ИмяСтраницы;
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(ИмяМЧБ);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	СтруктураПараметров.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
					  	   СтруктураПараметров,
					  	   МакетПечатнойФормы,
					  	   ОбщиеРеквизитыРазделов,
					  	   ДанныеРазделов,
						   ТабличныйДокумент);
					  
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
			
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
													  СтруктураПараметров,
													  ОбщиеРеквизитыРазделов,
													  СтруктураРеквизитовФормы,
													  ДанныеРазделов)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_Раздел1_Печать");
		
		СтрокМнЧ1НаЛисте = 4;
		
		// Определение количества листов.
		КолСтраницР1 = ДеревоДанныхРаздела.Строки.Количество();
		ДробКол1 = КолСтраницР1 / СтрокМнЧ1НаЛисте;
		ЦелКол1  = Цел(КолСтраницР1 / СтрокМнЧ1НаЛисте);
		КолЛистовРаздела1 = ?(ДробКол1 = ЦелКол1, ЦелКол1, ЦелКол1 + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		МассивДанныхМнЧ1ДляПечати = Новый Массив;
		ИмяП000010001001 = "П000010001001";
		ИмяП000010002001 = "П000010002001";
		ИмяП000010003001 = "П000010003001";
		ИмяП000010004001 = "П000010004001";
		ИмяП000010005001 = "П000010005001";
		ИмяП000010006001 = "П000010006001";
		ИмяП000010007001 = "П000010007001";
		
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			Приращение1КНомеру = (НомЛиста - 1) * СтрокМнЧ1НаЛисте;
			ДанныеМнЧ1ДляПечати = Новый Структура;
			Для ИндСтрокиМнЧ = 1 По СтрокМнЧ1НаЛисте Цикл
				_ИндСтрокиМнЧ = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
				ИндСПриращением = ИндСтрокиМнЧ + Приращение1КНомеру;
				
				НовИмяП000010001001 = ИмяП000010001001 + _ИндСтрокиМнЧ;
				НовИмяП000010002001 = ИмяП000010002001 + _ИндСтрокиМнЧ;
				НовИмяП000010003001 = ИмяП000010003001 + _ИндСтрокиМнЧ;
				НовИмяП000010004001 = ИмяП000010004001 + _ИндСтрокиМнЧ;
				НовИмяП000010005001 = ИмяП000010005001 + _ИндСтрокиМнЧ;
				НовИмяП000010006001 = ИмяП000010006001 + _ИндСтрокиМнЧ;
				НовИмяП000010007001 = ИмяП000010007001 + _ИндСтрокиМнЧ;
				
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010001001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010002001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010003001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010004001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010005001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010006001, "");
				ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010007001, 0);
				
				Если КолСтраницР1 >= ИндСПриращением Тогда
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010001001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010001001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010002001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010002001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010003001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010003001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010004001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010004001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010005001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010005001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010006001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010006001]);
					ДанныеМнЧ1ДляПечати.Вставить(НовИмяП000010007001,
					ДеревоДанныхРаздела.Строки[ИндСПриращением - 1].Данные[ИмяП000010007001]);
				КонецЕсли;
			КонецЦикла;
			МассивДанныхМнЧ1ДляПечати.Добавить(ДанныеМнЧ1ДляПечати);
			
		КонецЦикла;
		
		// Вывод листов.
		Для НомЛиста = 1 По КолЛистовРаздела1 Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			ДанныеМнЧ1ДляПечати = МассивДанныхМнЧ1ДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧ1ДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел1");
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ВыводитьНезаполненныеЧисловыеЗначенияКакНули = Истина;
	
	МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Показатель.Ключ;
			НовСтр.Значение = Показатель.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета);
			
		КонецЦикла;
		
	Иначе
		
		ТДО = ТабличныйДокумент.Области;
		
		Для Каждого Область Из ТДО Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
				
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = Область.Имя;
				
				Если СтрНачинаетсяС(Область.Имя, "П000010007001") И Область.Значение = 0 Тогда
					
					Постфикс = Сред(Область.Имя, 14);
					
					Если НЕ ЗначениеЗаполнено(ТДО["П000010001001" + Постфикс].Значение)
						И (ЗначениеЗаполнено(ТДО["П000010002001" + Постфикс].Значение)
						ИЛИ ЗначениеЗаполнено(ТДО["П000010003001" + Постфикс].Значение)
						ИЛИ ЗначениеЗаполнено(ТДО["П000010004001" + Постфикс].Значение)
						ИЛИ ЗначениеЗаполнено(ТДО["П000010005001" + Постфикс].Значение)
						ИЛИ ЗначениеЗаполнено(ТДО["П000010006001" + Постфикс].Значение)) Тогда
						
						НовСтр.Значение = "0";
						НовСтр.ЗначениеМЧБ = "0--------.00";
						
					Иначе
						
						НовСтр.Значение = Область.Значение;
						НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, МакетФормыОтчета);
						
					КонецЕсли;
					
				Иначе
					
					НовСтр.Значение = Область.Значение;
					НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, МакетФормыОтчета);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4)
									+ Сред(ДатаПодписиСтр, 3, 2)
									+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
											  + Сред(ДатаПодписиСтр, 3, 2)
											  + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0
			 ИЛИ ИмяОбласти = "РеквизитыПриказа" Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							
							Если ВыводитьНезаполненныеЧисловыеЗначенияКакНули И ПараметрыПечати.ИмяСтраницы <> "Раздел1" Тогда
								
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
								
							Иначе
								
								Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
									Если РезультатПоиска.Значение < 0 Тогда
										СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
									КонецЕсли;
									СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
								КонецЕсли;
								
							КонецЕсли;
							
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
														 ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область,
										?(РезультатПоиска.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(
										ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
													 ТекАдресЗначенияОбласти.ИндексЗнакоместа,
													 ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
													 ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда // Служебное поле.
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заполнить область ""%1""';
							|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета)
	
	ФорматОбласти = "";
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
						
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы, Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
			
		КонецЕсли;
		
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
		
	КонецЦикла;
	
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
		
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	
	Для Каждого Параметр Из ПараметрыФормата Цикл
		
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		
		СтрокаФормата = Сред(СтрокаФормата, 3);
		
	КонецЕсли;
	
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(ИмяФормы,
																					 Область,
																					 Знач ДробнаяЧасть,
																					 ИндексЗнакоместа = 0)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(ДробнаяЧасть) >= ИндексЗнакоместа Тогда
			ДробнаяЧасть = Сред(ДробнаяЧасть, ИндексЗнакоместа, 1);
		Иначе
			ДробнаяЧасть = ?(ЗначениеЗаполнено(ДробнаяЧасть), "0", "-");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДробнаяЧасть) Тогда
		ДробнаяЧасть = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(ДробнаяЧасть);
	Иначе
		Область.Текст = ВРЕГ(ДробнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли