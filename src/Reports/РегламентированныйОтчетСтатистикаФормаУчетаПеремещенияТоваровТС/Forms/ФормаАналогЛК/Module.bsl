&НаСервере
Перем мОбъектОтчета;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	Если Параметры.Свойство("НаправлениеПеремещения") Тогда
		Если Параметры.НаправлениеПеремещения = "ИМ" Тогда
			Графа4 = 1;
		Иначе
			Графа4 = 0;
		КонецЕсли;
	Иначе
		Графа4 = -1;
	КонецЕсли;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	ОТЧ = Новый ОписаниеТипов("Число");
	Если Параметры.Свойство("Основание") Тогда
		Инициализация(Параметры.БезОткрытияФормы, Параметры.Основание);
	Иначе
		Инициализация(Параметры.БезОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
		ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПеремещенияПриИзменении(Элемент)
	Модифицированность = Истина;
	Если Графа4 = 0 Тогда
		Графа6Код = "";
		Графа6Наименование = "";
		Графа8Код = "RU";
		Графа8Наименование = "РОССИЯ";
	Иначе
		Графа6Код = "RU";
		Графа6Наименование = "РОССИЯ";
		Графа8Код = "";
		Графа8Наименование = "";
	КонецЕсли;
	ДоступностьПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Графа9НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлВидовТранспорта");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Графа9Код));
		ОО = Новый ОписаниеОповещения("Графа9ВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтранаЕАЭСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "СтраныЕАЭСБезРоссии");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ""));
		ДополнительныеПараметры = Новый Структура;
		Если СтрНачинаетсяС(Элемент.Имя, "Графа6") Тогда 
			ДополнительныеПараметры.Вставить("Код", "Графа6Код");
			ДополнительныеПараметры.Вставить("Наименование", "Графа6Наименование");
		Иначе
			ДополнительныеПараметры.Вставить("Код", "Графа8Код");
			ДополнительныеПараметры.Вставить("Наименование", "Графа8Наименование");
		КонецЕсли;
		ОО = Новый ОписаниеОповещения("СтранаЕАЭСВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Графа5НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлСтранМира");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Графа5Код));
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Код", "Графа5Код");
		ДополнительныеПараметры.Вставить("Наименование", "Графа5Наименование");
		ОО = Новый ОписаниеОповещения("СтранаЕАЭСВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительСтранаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлСтранМира");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Заявитель_СтранаКод));
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Код", "Заявитель_СтранаКод");
		ДополнительныеПараметры.Вставить("Наименование", "Заявитель_СтранаНаименование");
		ОО = Новый ОписаниеОповещения("СтранаЕАЭСВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Графа7НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "Валюты");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Графа7Код));
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Код", Элемент.Имя);
		ОО = Новый ОписаниеОповещения("Графа7ВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "СписокДокументов");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Элементы.ДокументыОснования.ТекущиеДанные.Наименование));
		ОО = Новый ОписаниеОповещения("ДокументВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриАктивизацииСтроки(Элемент)
	Элементы.ДокументыОснованияУдалить.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПослеУдаления(Элемент)
	Элементы.ДокументыОснованияУдалить.Доступность = (Элементы.ДокументыОснования.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаГрафа123Нажатие(Элемент)
	Раздел = Прав(Элемент.Имя, 6);
	Данные = ЭтотОбъект[Раздел + "Данные"];
	
	ПараметрыФормы = Новый Структура("Раздел, Данные", Раздел, Данные);
	ИмяФормыВводаГраф123 = СтрЗаменить(ИмяФормы, "ФормаАналогЛК", "ФормаВводаГраф123ЛК");
	ВводГрафы123 = ПолучитьФорму(ИмяФормыВводаГраф123, ПараметрыФормы, ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаГрафа123НажатиеЗавершение", ЭтотОбъект, ПараметрыФормы);
	
	ВводГрафы123.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ВводГрафы123.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ВводГрафы123.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТовар(Команда)
	Если Товары.Количество() + ДокументыОснования.Количество() >= 999 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("В статистической форме перемещения товаров может содержаться максимум 999 позиций");
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("СозданиеНового", Истина);
	ПараметрыФормы.Вставить("ДоступенПодборНоменклатурыИзСправочника", СтруктураРеквизитовФормы.ДоступенПодборНоменклатурыИзСправочника);
	
	ОО = Новый ОписаниеОповещения("ВводТовараЗавершение", ЭтотОбъект, ПараметрыФормы);
	ИмяФормыВводаТовара = СтрЗаменить(ИмяФормы, "ФормаАналогЛК", "ФормаВводаТовараЛК");
	ОткрытьФорму(ИмяФормыВводаТовара, ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Товары.Удалить(Элементы.Товары.ТекущиеДанные);
	Элементы.ТоварыУдалитьТовар.Доступность = (Элементы.Товары.ТекущиеДанные <> Неопределено);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	Элементы.ТоварыУдалитьТовар.Доступность = (Элементы.Товары.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТоварыОписание" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СозданиеНового", Ложь);
		ПараметрыФормы.Вставить("ДоступенПодборНоменклатурыИзСправочника", СтруктураРеквизитовФормы.ДоступенПодборНоменклатурыИзСправочника);
		ПараметрыФормы.Вставить("ИндексРедактируемойСтроки", Товары.Индекс(Элемент.ТекущиеДанные));
		ПараметрыФормы.Вставить("Данные", Элемент.ТекущиеДанные.Данные);
		
		ОО = Новый ОписаниеОповещения("ВводТовараЗавершение", ЭтотОбъект, ПараметрыФормы);
		ИмяФормыВводаТовара = СтрЗаменить(ИмяФормы, "ФормаАналогЛК", "ФормаВводаТовараЛК");
		ОткрытьФорму(ИмяФормыВводаТовара, ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	Графа7Сумма = Товары.Итог("InvoicedCost");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработкаНомераАннулируемойФормы(Форма)
	Форма.РегНомерАннулируемойФормы = СтрЗаменить(Форма.РегНомерАннулируемойФормы, "с", "С");
	Форма.РегНомерАннулируемойФормы = СтрЗаменить(Форма.РегНомерАннулируемойФормы, "c", "С");
	Форма.РегНомерАннулируемойФормы = СтрЗаменить(Форма.РегНомерАннулируемойФормы, "C", "С");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТелефонЗаявителяСоответствуетТребованиямФТС(Телефон)
	Возврат СтрПодобнаПоРегулярномуВыражению(Телефон, "[0-9()\-\s]*");
КонецФункции

&НаКлиенте
Процедура ПроверитьПоказателиОтчета(Команда)
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если Графа4 = -1 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указано направление перемещения", , "Графа4");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Графа1Ошибка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена / неправильно заполнена графа 1", , "ГиперссылкаГрафа1");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Графа2Ошибка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена / неправильно заполнена графа 2", , "ГиперссылкаГрафа2");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Графа3Ошибка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена / неправильно заполнена графа 3", , "ГиперссылкаГрафа3");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Графа5Наименование) Или Не ЗначениеЗаполнено(Графа5Код) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 5", , "Графа5Код");
		ЕстьОшибки = Истина;
	ИначеЕсли ВРег(Графа5Код) = "RU" Или ВРег(Графа5Наименование) = "РОССИЯ" Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Торгующей страной не может быть Россия", , "Графа5Код");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Графа6Наименование) Или Не ЗначениеЗаполнено(Графа6Код) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 6", , "Графа6Код");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Графа7Код) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 7", , "Графа7Код");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Графа8Наименование) Или Не ЗначениеЗаполнено(Графа8Код) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 8", , "Графа8Код");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Графа9Наименование) Или Не ЗначениеЗаполнено(Графа9Код) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 9", , "Графа9Код");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РегНомерАннулируемойФормы) Тогда 
		ОбработкаНомераАннулируемойФормы(ЭтотОбъект);
		Если СтрДлина(РегНомерАннулируемойФормы) <> 23
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(РегНомерАннулируемойФормы, 8))
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(РегНомерАннулируемойФормы, 6))
			Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(РегНомерАннулируемойФормы, 10, 6))
			Или Сред(РегНомерАннулируемойФормы, 9, 1) <> "/"
			Или Сред(РегНомерАннулируемойФормы, 16, 2) <> "/С" Тогда 
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаОбщиеСведения;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Номер анулируемой формы должен соответствовать шаблону 8 цифр/6 цифр/«С» и 6 цифр",
				, "РегНомерАннулируемойФормы");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДокументыОснования Цикл 
		Если Не ЗначениеЗаполнено(Стр.Наименование) 
			Или Не ЗначениеЗаполнено(Стр.Номер)
			Или Не ЗначениеЗаполнено(Стр.Дата) Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
			Элементы.ДокументыОснования.ТекущаяСтрока = стр.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо заполнить дату, номер и наименование документа", , "ДокументыОснования");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	Если ДокументыОснования.Количество() = 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены документы-основания", , "ДокументыОснования");
		Возврат;
	КонецЕсли;
	
	ТоварыСОшибками = Товары.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Если ТоварыСОшибками.Количество() > 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОТоварах;
		Элементы.Товары.ТекущаяСтрока = ТоварыСОшибками[0].ПолучитьИдентификатор();
		ОбщегоНазначенияКлиент.СообщитьПользователю("Некорректно заполненные товары выделены красным цветом", , "Товары");
		Возврат;
	ИначеЕсли Товары.Количество() = 0 Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОТоварах;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнены товары", , "Товары");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Заявитель_Имя) Или Не ЗначениеЗаполнено(Заявитель_Фамилия) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указаны фамилия/имя заявителя", , "Заявитель_Фамилия");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заявитель_Телефон) Или Не ЗначениеЗаполнено(Заявитель_ЭлектроннаяПочта) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указаны телефон/электронная почта заявителя", , "Заявитель_Телефон");
		ЕстьОшибки = Истина;
	ИначеЕсли Не ТелефонЗаявителяСоответствуетТребованиямФТС(Заявитель_Телефон) Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Номер телефона должен состоять только из цифр, пробелов, дефисов и скобок", , "Заявитель_Телефон");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заявитель_СтранаКод) Или Не ЗначениеЗаполнено(Заявитель_СтранаНаименование) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указана страна", , "Заявитель_СтранаКод");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заявитель_ПолноеНаименование) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указано полное наименование заявителя", , "Заявитель_ПолноеНаименование");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заявитель_КраткоеНаименование) И СтрДлина(Заявитель_ИНН) = 10 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указано краткое наименование заявителя", , "Заявитель_КраткоеНаименование");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Заявитель_ИНН) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан ИНН", , "Заявитель_ИНН");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если СтрДлина(Заявитель_ИНН) = 10 Тогда 
		Если Не ЗначениеЗаполнено(Заявитель_ОГРН) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан ОГРН", , "Заявитель_ОГРН");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Заявитель_КПП) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОЗаявителе;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан КПП", , "Заявитель_КПП");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьОшибки И КоличествоСтрокПоМетодикеФТС() > 999 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСведенияОТоварах;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Количество товаров + документов + средств идентификации должно быть не более 999", , "Товары");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибок не обнаружено");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КоличествоСтрокПоМетодикеФТС()
	ВсегоПозиций = Товары.Количество() + ДокументыОснования.Количество();
	Для Каждого Стр Из Товары Цикл 
		ПВТ = Новый Структура("НомерТовара, ОТД", Товары.Индекс(Стр) + 1, Новый ОписаниеТипов("Дата"));
		ФормаУчетаПеремещенияТоваровТС.ЗагрузитьПараметрыДляВыгрузки(ПВТ, Стр.Данные, "Товар");
		ВсегоПозиций = ВсегоПозиций 
			+ ?(ПВТ.Товар_ДекларацияНаТовары.Количество() > 0, ПВТ.Товар_ДекларацияНаТовары.Количество() - 1, 0)
			+ ?(ПВТ.Товар_СредстваИдентификации.Количество() > 0, ПВТ.Товар_СредстваИдентификации.Количество() - 1, 0);
		Если ВсегоПозиций > 999 Тогда 
			Возврат ВсегоПозиций;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсегоПозиций;
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Загрузка статистической формы перемещения товаров из xml не поддерживается';
													|en = 'Загрузка статистической формы перемещения товаров из xml не поддерживается'"));
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	СохранитьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, Ложь, Вариант, Ложь, Автосохранение, "ФормаОтчета");
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, Ложь, ПоказателиОтчета);
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, 
					КодИФНС = "не применимо", 
					Вариант = Неопределено, 
					ВидДокументаНомерКорректировкиИзменен = Неопределено, 
					НаимТекРаздела = Неопределено) Экспорт
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
				ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			
			СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	ОбработкаНомераАннулируемойФормы(ЭтотОбъект);
	СохраняемыеПоказатели = Новый Структура;
	СохраняемыеПоказатели.Вставить("ВерсияФТС", РегламентированнаяОтчетность.ВерсияЛК_ФТС());
	СохраняемыеПоказатели.Вставить("ОбычныеРеквизитыДляСохранения", Новый Структура);
	Для Каждого Элт Из ОбычныеРеквизитыДляСохранения() Цикл 
		СохраняемыеПоказатели.ОбычныеРеквизитыДляСохранения.Вставить(Элт, ЭтотОбъект[Элт]);
	КонецЦикла;
	
	СохраняемыеПоказатели.Вставить("ДокументыОснования", РеквизитФормыВЗначение("ДокументыОснования", Тип("ТаблицаЗначений")));
	СохраняемыеПоказатели.Вставить("Товары", РеквизитФормыВЗначение("Товары", Тип("ТаблицаЗначений")));
	
	ХранилищеДанных = Новый ХранилищеЗначения(СохраняемыеПоказатели);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность   = Ложь;
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, "ФормаОтчета");
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, "ФормаОтчета");
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	ТаблицаСообщений.Очистить();
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ИменаПоказателейТолькоСтруктура");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь, Знач ДокОснование = Неопределено) Экспорт
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	СформироватьСпискиВыбора();
	
	НадписьЗаполнить = "<Заполнить>";
	Графа1Надпись = НадписьЗаполнить;
	Графа2Надпись = НадписьЗаполнить;
	Графа3Надпись = НадписьЗаполнить;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
		Основание = Неопределено;
		СписокОснований.Очистить();
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФТС");
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
	Для Каждого Элт Из ОбычныеРеквизитыДляСохранения() Цикл
		Если Элементы.Найти(Элт) <> Неопределено Тогда 
			Элементы[Элт].УстановитьДействие("ПриИзменении", "ПриИзмененииРеквизита");
		КонецЕсли;
	КонецЦикла;
	
	РазложениеИмениФормы = СтрРазделить(ИмяФормы, ".");
	ЗаполняемыеСвойства = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(РазложениеИмениФормы[1], РазложениеИмениФормы[3]);
	Если ТипЗнч(ЗаполняемыеСвойства) = Тип("Структура") Тогда 
		СтруктураРеквизитовФормы.Вставить("ЗаполнениеНаОснованииРеализацииИВвоза", ЗаполняемыеСвойства.Свойство("ЭК"));
		СтруктураРеквизитовФормы.Вставить("ЗаполнениеНаОснованииВвоза", ЗаполняемыеСвойства.Свойство("ИМ"));
		СтруктураРеквизитовФормы.Вставить("ДоступенПодборНоменклатурыИзСправочника", ЗаполняемыеСвойства.Свойство("ДоступенПодборНоменклатурыИзСправочника"));
		ИмяФормыПодбораОснований = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗаполняемыеСвойства, "ИмяФормыПодбораОснований", "");
	Иначе
		СтруктураРеквизитовФормы.Вставить("ЗаполнениеНаОснованииРеализацииИВвоза", Ложь);
		СтруктураРеквизитовФормы.Вставить("ЗаполнениеНаОснованииВвоза", Ложь);
		СтруктураРеквизитовФормы.Вставить("ДоступенПодборНоменклатурыИзСправочника", Ложь);
	КонецЕсли;
	
	Элементы.ФормаЗаполнитьДаннымиПервичногоДокумента.Видимость = СтруктураРеквизитовФормы.ЗаполнениеНаОснованииРеализацииИВвоза
		Или СтруктураРеквизитовФормы.ЗаполнениеНаОснованииВвоза;
	
	Попытка
		Если ЗначениеЗаполнено(ДокОснование) Тогда
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(ДокОснование);
			
			РазложениеИмениФормы = СтрРазделить(ИмяФормы, ".");
			ДанныеПервичногоДокумента = Неопределено;
			ПараметрыОтчета = Новый Структура("МассивДокументов,НаправлениеПеремещения", МассивДокументов, ?(Графа4 = 1, "ИМ", "ЭК"));
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(РазложениеИмениФормы[1], РазложениеИмениФормы[3], ПараметрыОтчета, ДанныеПервичногоДокумента);
			
			ДополнитьКонтакты(ДанныеПервичногоДокумента.РеквизитыШапка);
			ЗагрузитьДокументы(ДанныеПервичногоДокумента.ТаблицаДокументы);
			ЗагрузитьТовары(ДокОснование, ДанныеПервичногоДокумента);
			ЗагрузитьСведенияОЗаявителе(ДанныеПервичногоДокумента.РеквизитыШапка);
			ЗагрузитьГрафа1(ДанныеПервичногоДокумента.РеквизитыШапка);
			ЗагрузитьГрафа2(ДанныеПервичногоДокумента.РеквизитыШапка);
			ЗагрузитьГрафа3(ДанныеПервичногоДокумента.РеквизитыШапка);
			ЗагрузитьПрочиеДанные(ДанныеПервичногоДокумента.РеквизитыШапка);
			Основание = ДокОснование;
			СписокОснований.Очистить();
			СписокОснований.Добавить(ДокОснование);
		КонецЕсли;
	Исключение
		Основание = Неопределено;
		СписокОснований.Очистить();
	КонецПопытки;
	
	УстановитьЗаголовок();
	ДоступностьПолей(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция НаименованиеСтраныПоКоду(КодСтраныИзСправочникаФТС)
	Если СтрДлина(КодСтраныИзСправочникаФТС) = 2 Тогда 
		КлСтранМира = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлСтранМира").ТаблицаЗначений;
		ОтбСтроки = КлСтранМира.НайтиСтроки(Новый Структура("Код", КодСтраныИзСправочникаФТС));
		Если ОтбСтроки.Количество() = 1 Тогда 
			Возврат ОтбСтроки[0].Название;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДополнитьКонтакты(РеквизитыШапка)
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(РеквизитыШапка.Организация) Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			РеквизитыШапка.Организация, РеквизитыШапка.Дата, "ТелОтвСтатистика,АдресЭлПочтыОтвСтатистика");
		РеквизитыШапка.Вставить("ОргАдресЭлПочты", СведенияОбОрганизации.АдресЭлПочтыОтвСтатистика);
		РеквизитыШапка.Вставить("ОргТелефонИсп", СведенияОбОрганизации.ТелОтвСтатистика);
	Иначе
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			РеквизитыШапка.Организация, РеквизитыШапка.Дата, "АдресЭлПочтыИП,ТелСлуж");
		РеквизитыШапка.Вставить("ОргАдресЭлПочты", СведенияОбОрганизации.АдресЭлПочтыИП);
		РеквизитыШапка.Вставить("ОргТелефонИсп", СведенияОбОрганизации.ТелСлуж);
	КонецЕсли;
	
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.ОргСтранаКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.ОргСтранаНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.ОтвЛицоФинУрСтранаКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.ОтвЛицоФинУрСтранаНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.ОтправительСтранаКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.ОтправительСтранаНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.ПолучательСтранаКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.ПолучательСтранаНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.СтранаНазначенияКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.СтранаНазначенияНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.СтранаОтправленияКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.СтранаОтправленияНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
	НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(РеквизитыШапка.ТоргующаяСтранаКод);
	Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
		РеквизитыШапка.ТоргующаяСтранаНаименование = НаименованиеИзСправочникаФТС;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовок()
	Заголовок = Метаданные.Отчеты.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Формы.ФормаАналогЛК.Синоним
		+ РегламентированнаяОтчетность.ВерсияЛК_ФТС()
		+ " за " + ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), 
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП=Истина");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбычныеРеквизитыДляСохранения()
	РеквизитыДляСохранения =  "РегНомерАннулируемойФормы,Графа4,Графа5Код,Графа5Наименование,Графа6Код,Графа6Наименование,Графа7Код,Графа7Сумма,"
			+"Графа8Код,Графа8Наименование,Графа9Код,Графа9Наименование,Заявитель_Должность,Заявитель_Имя,Заявитель_Индекс,Заявитель_ИНН,"
			+"Заявитель_КПП,Заявитель_КраткоеНаименование,Заявитель_НаселенныйПункт,Заявитель_Область,Заявитель_ОГРН,Заявитель_Отчество,"
			+"Заявитель_ПолноеНаименование,Заявитель_Свидетельство,Заявитель_СтранаКод,Заявитель_СтранаНаименование,Заявитель_Телефон,"
			+"Заявитель_УлицаНомерДома,Заявитель_Фамилия,Заявитель_ЭлектроннаяПочта,Комментарий,Заявитель_Дом,Заявитель_Район,"
			+"Графа1Надпись,Графа2Надпись,Графа3Надпись,Графа1Данные,Графа2Данные,Графа3Данные,Заявитель_Комната,"
			+"Графа1Ошибка,Графа2Ошибка,Графа3Ошибка,Основание,СписокОснований";
	Возврат СтрРазделить(РеквизитыДляСохранения, ",", Ложь);
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
		И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
		И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СтруктураРеквизитовФормы.мСохраненныйДок, "ДатаПодписи,ЕдиницаИзмерения,ТочностьЕдиницыИзмерения,Комментарий");
	ДатаПодписи = РеквизитыДокумента.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = РеквизитыДокумента.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = РеквизитыДокумента.ТочностьЕдиницыИзмерения;
	Комментарий = РеквизитыДокумента.Комментарий;

	СохраняемыеПоказатели = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Для Каждого Элт Из ОбычныеРеквизитыДляСохранения() Цикл 
		СохраняемыеПоказатели.ОбычныеРеквизитыДляСохранения.Свойство(Элт, ЭтотОбъект[Элт]);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(СохраняемыеПоказатели.ДокументыОснования, "ДокументыОснования");
	ЗначениеВРеквизитФормы(СохраняемыеПоказатели.Товары, "Товары");
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	Модифицированность   = Ложь;
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиАналогЛК");
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код");
			ТаблСписка.Колонки.Добавить("Название");
			ТаблСписка.Колонки.Добавить("Фильтр1");
			ТаблСписка.Колонки.Добавить("Фильтр2");
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблСписка.Добавить();
				НовСтрока.Код = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				НовСтрока.Название = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				НовСтрока.Фильтр1 = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				НовСтрока.Фильтр2 = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 4).Текст);
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "НапрПеремещения",
		2, , "", КоллекцияСписковВыбора["НапрПеремещения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлСтранМира",
		2, , "Выбор страны", КоллекцияСписковВыбора["КлСтранМира"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлВидовТранспорта",
		2, , "Выбор вида транспорта", КоллекцияСписковВыбора["КлВидовТранспорта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлВалют",
		2, , "Выбор валюты", КоллекцияСписковВыбора["КлВалют"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Валюты",
		2, , "Выбор валюты", КоллекцияСписковВыбора["Валюты"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СписокДокументов",
		2, , "Выбор документа", КоллекцияСписковВыбора["СписокДокументов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлЕдИзмерения",
		2, , "Выбор единицы измерения", КоллекцияСписковВыбора["КлЕдИзмерения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ВидыУдостЛичности",
		2, , "", КоллекцияСписковВыбора["ВидыУдостЛичности"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Гр19",
		2, , "Выбор кода дополнительной информации", КоллекцияСписковВыбора["Гр19"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Гр11",
		2, , "Выбор ТНВЭД", КоллекцияСписковВыбора["Гр11"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "СтраныЕАЭСБезРоссии",
		2, , "Выбор страны ЕАЭС", КоллекцияСписковВыбора["СтраныЕАЭСБезРоссии"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ОрганизационноПравовыеФормы",
		2, , "Выбор организационно-правовой формы", КоллекцияСписковВыбора["ОрганизационноПравовыеФормы"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодыДокументов",
		2, , "Выбор документа физического лица", КоллекцияСписковВыбора["КодыДокументов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодУровняМаркировки",
		2, , "Выбор кода уровня маркировки", КоллекцияСписковВыбора["КодУровняМаркировки"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодВидаСредстваИдентификации",
		2, , "Выбор кода средства идентификации", КоллекцияСписковВыбора["КодВидаСредстваИдентификации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ОКАТО",
		2, , "Выбор кода ОКАТО", КоллекцияСписковВыбора["ОКАТО"]);
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьПолей(Форма)
	Элементы = Форма.Элементы;
	Элементы.Графа6Код.ТолькоПросмотр = (Форма.Графа4 <> 0);
	Элементы.Графа6Наименование.ТолькоПросмотр = (Форма.Графа4 <> 0);
	Элементы.Графа8Код.ТолькоПросмотр = (Форма.Графа4 <> 1);
	Элементы.Графа8Наименование.ТолькоПросмотр = (Форма.Графа4 <> 1);
	Элементы.ГиперссылкаГрафа1.Заголовок = Форма.Графа1Надпись;
	Элементы.ГиперссылкаГрафа2.Заголовок = Форма.Графа2Надпись;
	Элементы.ГиперссылкаГрафа3.Заголовок = Форма.Графа3Надпись;
	
	Элементы.ТоварыДобавитьТовар.Доступность = (Форма.Товары.Количество() + Форма.ДокументыОснования.Количество() < 999);
	Элементы.ТоварыУдалитьТовар.Доступность = (Форма.Товары.Количество() > 0);
	
	Элементы.ДекорацияГрафаОшибка1.Видимость = Форма.Графа1Ошибка Или (Форма.Графа1Надпись = Форма.НадписьЗаполнить);
	Элементы.ДекорацияГрафаОшибка2.Видимость = Форма.Графа2Ошибка Или (Форма.Графа2Надпись = Форма.НадписьЗаполнить);
	Элементы.ДекорацияГрафаОшибка3.Видимость = Форма.Графа3Ошибка Или (Форма.Графа3Надпись = Форма.НадписьЗаполнить);
	
	Элементы.ДекорацияЗаявительКраткоеНаименованиеОбязательность.Видимость = (СтрДлина(Форма.Заявитель_ИНН) = 10);
КонецПроцедуры

&НаКлиенте
Процедура Графа9ВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		Графа9Код = "";
		Графа9Наименование = "";
	Иначе 
		Графа9Код = РезультатВыбора["Код"];
		Графа9Наименование = РезультатВыбора["Название"];
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтранаЕАЭСВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		ЭтотОбъект[ДополнительныеПараметры.Код] = "";
		ЭтотОбъект[ДополнительныеПараметры.Наименование] = "";
	Иначе 
		ЭтотОбъект[ДополнительныеПараметры.Код] = РезультатВыбора["Код"];
		ЭтотОбъект[ДополнительныеПараметры.Наименование] = РезультатВыбора["Название"];
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Графа7ВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтотОбъект[ДополнительныеПараметры.Код] = РезультатВыбора["Код"];
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда 
		Элементы.ДокументыОснования.ТекущиеДанные.Наименование = РезультатВыбора["Название"];
	Иначе
		Элементы.ДокументыОснования.ТекущиеДанные.Наименование = "";
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	Модифицированность = Истина;
	Элементы.ДекорацияЗаявительКраткоеНаименованиеОбязательность.Видимость = (СтрДлина(Заявитель_ИНН) = 10);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаГрафа123НажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Результат.Свойство("Данные", ЭтотОбъект[ДополнительныеПараметры.Раздел + "Данные"]);
		Результат.Свойство("Описание", ЭтотОбъект[ДополнительныеПараметры.Раздел + "Надпись"]);
		Результат.Свойство("КорректностьЗаполнения", ЭтотОбъект[ДополнительныеПараметры.Раздел + "Ошибка"]);
		Если ЭтотОбъект[ДополнительныеПараметры.Раздел + "Ошибка"] Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Данные заполнены некорректно", , ЭтотОбъект[ДополнительныеПараметры.Раздел + "Надпись"]);
		КонецЕсли;
		ДоступностьПолей(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводТовараЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.СозданиеНового Тогда 
			ТекушаяСтрока = Товары.Добавить();
		Иначе
			ТекушаяСтрока = Товары[Результат.ИндексРедактируемойСтроки];
		КонецЕсли;
		ТекушаяСтрока.Описание = Результат.Описание;
		ТекушаяСтрока.Данные = Результат.Данные;
		ТекушаяСтрока.ЕстьОшибка = Результат.КорректностьЗаполнения;
		ТекушаяСтрока.InvoicedCost = Результат.InvoicedCost;
		
		Если ТекушаяСтрока.ЕстьОшибка Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Данные заполнены некорректно", , Товары);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	СохранитьНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция УсловиеВыполнено(Владелец, ПараметрыВыгрузки, Условие, ИмяРаздела = "Титульный", Узел = Неопределено) Экспорт
	Попытка
		РезультатВычисленияВыражения = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
			СтрЗаменить(Условие, "&", "Параметры."), ПараметрыВыгрузки);
		Возврат (Истина = РезультатВычисленияВыражения);
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ИмяФормы, "СхемаВыгрузкиXMLЛК_5_24_0");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	ТаблицыДляУдаления = Новый Соответствие;
	Для Каждого КЗ Из ПараметрыВыгрузки Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("ТаблицаЗначений") Тогда 
			ТаблицыДляУдаления.Вставить(КЗ.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КЗ Из ТаблицыДляУдаления Цикл 
		ПараметрыВыгрузки.Удалить(КЗ.Ключ);
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, Узел)
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И МаксШирина = 10 Тогда 
			
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда 
			ЗначениеПоказателя = ОТЧ.ПривестиЗначение(ЗначениеПоказателя);
		КонецЕсли;
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		Если СтрНайти(Узел.Значение, ".") > 0 Тогда 
			Пока Прав(Узел.Значение, 1) = "0" Цикл 
				Узел.Значение = Лев(Узел.Значение, СтрДлина(Узел.Значение) - 1);
			КонецЦикла;
			Если Прав(Узел.Значение, 1) = "." Тогда
				Узел.Значение = Лев(Узел.Значение, СтрДлина(Узел.Значение) - 1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				Если Стр.Многострочность 
					И Стр.Тип = "П"
					И ПараметрыВыгрузки.Свойство(Стр.Раздел)
					И ТипЗнч(ПараметрыВыгрузки[Стр.Раздел]) = Тип("ТаблицаЗначений") Тогда 
					
					Для НомСтр = 1 По ПараметрыВыгрузки[Стр.Раздел].Количество() Цикл
						ТекущееЗначениеМногострочногоЭлемента = ПараметрыВыгрузки[Стр.Раздел][НомСтр - 1][Стр.Ключ];
						Если ЗначениеЗаполнено(ТекущееЗначениеМногострочногоЭлемента) Тогда 
							НовыйУзел = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ВывестиПоказательВXML(НовыйУзел, ТекущееЗначениеМногострочногоЭлемента);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ЗначениеЗаполнено(НомерСтроки) 
					И ПараметрыВыгрузки.Свойство(Стр.Раздел)
					И ТипЗнч(ПараметрыВыгрузки[Стр.Раздел]) = Тип("ТаблицаЗначений") Тогда 
					
					ЗначениеПоказателя = ПараметрыВыгрузки[Стр.Раздел][НомерСтроки - 1][Стр.Ключ];
					ЗначениеПоказателя = ?(ТипЗнч(ЗначениеПоказателя) = Тип("Дата"), Формат(ЗначениеПоказателя, "ДФ=yyyy-MM-dd"), ЗначениеПоказателя);
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			Если ПараметрыВыгрузки.Свойство(Сред(Стр.ЗначениеПоУмолчанию, 2)) Тогда 
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			КонецЕсли;
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
				Иначе
					ВывестиПоказательВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда
			Если Стр.Многострочность 
				И ПараметрыВыгрузки.Свойство(Стр.Раздел)
				И ТипЗнч(ПараметрыВыгрузки[Стр.Раздел]) = Тип("ТаблицаЗначений") Тогда 
				КоличествоСтрок = ПараметрыВыгрузки[Стр.Раздел].Количество();
				Если КоличествоСтрок > 0 Тогда 
					Для НомСтр = 1 По КоличествоСтрок Цикл
						Если ЗначениеЗаполнено(Стр.Ключ) Тогда 
							ТекущееЗначениеМногострочногоЭлемента = ПараметрыВыгрузки[Стр.Раздел][НомСтр - 1][Стр.Ключ];
							Если ЗначениеЗаполнено(ТекущееЗначениеМногострочногоЭлемента) Тогда 
								НовыйУзел = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ВывестиПоказательВXML(НовыйУзел, ТекущееЗначениеМногострочногоЭлемента);
								ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
							КонецЕсли;
						Иначе
							НовыйУзел = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) 
			И РегламентированнаяОтчетность.УзелПуст(Узел) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Прототип_GoodsInfo = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(ДеревоВыгрузки, "StaticForm/GoodsInfo", "Код");
	Для Каждого Стр Из Товары Цикл
		GoodsInfo = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Прототип_GoodsInfo);
		ПараметрыВыгрузкиСтрокиТовара = Новый Структура("НомерТовара, ОТД", Товары.Индекс(Стр) + 1, Новый ОписаниеТипов("Дата"));
		ФормаУчетаПеремещенияТоваровТС.ЗагрузитьПараметрыДляВыгрузки(ПараметрыВыгрузкиСтрокиТовара, Стр.Данные, "Товар");
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товары_CIMQuantity",
			ПараметрыВыгрузкиСтрокиТовара.Товар_СредстваИдентификации.Количество());
			
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товар_CountryCodeRU", (ПараметрыВыгрузкиСтрокиТовара.Товар_CountryCode = "RU"));
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товар_CountryCodeBY", (ПараметрыВыгрузкиСтрокиТовара.Товар_CountryCode = "BY"));
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товар_CountryCodeKZ", (ПараметрыВыгрузкиСтрокиТовара.Товар_CountryCode = "KZ"));
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товар_CountryCodeAM", (ПараметрыВыгрузкиСтрокиТовара.Товар_CountryCode = "AM"));
		ПараметрыВыгрузкиСтрокиТовара.Вставить("Товар_CountryCodeKG", (ПараметрыВыгрузкиСтрокиТовара.Товар_CountryCode = "KG"));
		
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузкиСтрокиТовара, GoodsInfo);
		ЗаполнитьДаннымиУзел(ПараметрыВыгрузкиСтрокиТовара, GoodsInfo);
		
		IdentificationMeansListDetails = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(GoodsInfo,
				"DTIdentificationMeansDetails/IdentificationMeansDetails", "Код");
		
		Для Каждого Стр Из ПараметрыВыгрузкиСтрокиТовара.Товар_СредстваИдентификации Цикл
			AggregationKindCode = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansListDetails,
				"AggregationKindCode", "Код");
				
			Индекс = СтрНайти(Стр.AggregationKindCode, "-");
			ВывестиПоказательВXML(AggregationKindCode, ?(Индекс > 0 , СокрЛП(Лев(Стр.AggregationKindCode, Индекс - 1)), Стр.AggregationKindCode));
			
			Индекс = СтрНайти(Стр.IdentificationMeansKindCode, "-");
			IdentificationMeansKindCode_Значение = ?(Индекс > 0 , СокрЛП(Лев(Стр.IdentificationMeansKindCode, Индекс - 1)), Стр.IdentificationMeansKindCode);
			Если ЗначениеЗаполнено(Стр.LastIdentificationMeansItemDetails) Тогда 
				IdentificationMeansRangeDetails = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansListDetails,
					"IdentificationMeansRangeDetails", "Код");
				IdentificationMeansRangeDetails = РегламентированнаяОтчетность.СкопироватьУзел(
					IdentificationMeansRangeDetails.Родитель, IdentificationMeansRangeDetails);
				
				IdentificationMeansKindCode = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansRangeDetails,
					"FirstIdentificationMeansItemDetails/IdentificationMeansKindCode", "Код");
				ВывестиПоказательВXML(IdentificationMeansKindCode, IdentificationMeansKindCode_Значение);
				
				IdentifacationMeansUnitCharacterValueId = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansRangeDetails,
					"FirstIdentificationMeansItemDetails/IdentificationMeansDataUnitDetails/IdentifacationMeansUnitCharacterValueId", "Код");
				ВывестиПоказательВXML(IdentifacationMeansUnitCharacterValueId, Стр.FirstIdentificationMeansItemDetails);
				
				IdentificationMeansKindCode = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansRangeDetails,
					"LastIdentificationMeansItemDetails/IdentificationMeansKindCode", "Код");
				ВывестиПоказательВXML(IdentificationMeansKindCode, IdentificationMeansKindCode_Значение);
				
				IdentifacationMeansUnitCharacterValueId = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansRangeDetails,
					"LastIdentificationMeansItemDetails/IdentificationMeansDataUnitDetails/IdentifacationMeansUnitCharacterValueId", "Код");
				ВывестиПоказательВXML(IdentifacationMeansUnitCharacterValueId, Стр.LastIdentificationMeansItemDetails);
			Иначе
				IdentificationMeansItemDetails = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansListDetails,
					"IdentificationMeansListDetails/IdentificationMeansItemDetails", "Код");
				IdentificationMeansItemDetails = РегламентированнаяОтчетность.СкопироватьУзел(
					IdentificationMeansItemDetails.Родитель, IdentificationMeansItemDetails);
				
				IdentificationMeansKindCode = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansItemDetails,
					"IdentificationMeansKindCode", "Код");
				ВывестиПоказательВXML(IdentificationMeansKindCode, IdentificationMeansKindCode_Значение);
				
				IdentifacationMeansUnitCharacterValueId = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(IdentificationMeansItemDetails,
					"IdentificationMeansDataUnitDetails/IdentifacationMeansUnitCharacterValueId", "Код");
				ВывестиПоказательВXML(IdentifacationMeansUnitCharacterValueId, Стр.FirstIdentificationMeansItemDetails);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыВыгрузкиСтрокиТовара.Товар_СредстваИдентификации.Количество() = 0 Тогда
			DTIdentificationMeansDetails = УведомлениеОСпецрежимахНалогообложения.НайтиУзелВДеревеПоПути(GoodsInfo, "DTIdentificationMeansDetails", "Код");
			РегламентированнаяОтчетность.УдалитьУзел(DTIdentificationMeansDetails);
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(Прототип_GoodsInfo);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	Возврат "Export_" + Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd_HHmmss") + ".xml";
КонецФункции

&НаСервере
Процедура ДополнитьПростыеРеквизиты(ПараметрыВыгрузки)
	ПростыеРеквизиты = "Заявитель_УлицаНомерДома,Заявитель_НаселенныйПункт,Заявитель_Область,Заявитель_Индекс,Заявитель_СтранаНаименование,"
		+ "Заявитель_СтранаКод,Заявитель_КПП,Заявитель_ИНН,Заявитель_ОГРН,Заявитель_Свидетельство,Заявитель_КраткоеНаименование,Заявитель_Имя,"
		+ "Заявитель_ПолноеНаименование,Заявитель_Должность,Заявитель_ЭлектроннаяПочта,Заявитель_Телефон,Заявитель_Отчество,Заявитель_Фамилия,"
		+ "Графа9Код,Графа9Наименование,РегНомерАннулируемойФормы,Графа7Код,Графа7Сумма,Графа6Код,Графа6Наименование,"
		+ "Графа5Код,Графа5Наименование,Графа8Код,Графа8Наименование,Заявитель_Дом,Заявитель_Комната,Заявитель_Район";
		
	Для Каждого Элт Из СтрРазделить(ПростыеРеквизиты, ",", Ложь) Цикл 
		ПараметрыВыгрузки.Вставить(Элт, ЭтотОбъект[Элт]);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДополнитьТабличныеЧасти(ПараметрыВыгрузки)
	ПараметрыВыгрузки.Вставить("ДокументыОснования", ДанныеФормыВЗначение(ДокументыОснования, Тип("ТаблицаЗначений")));
КонецПроцедуры

&НаСервере
Процедура ДополнитьВременныеРеквизитыТовара(ПараметрыВыгрузки)
	ПараметрыВыгрузки.Вставить("Товар_Manufacturer", Истина);
	ПараметрыВыгрузки.Вставить("Товар_TraceGoodsQuantity", Истина);
	ПараметрыВыгрузки.Вставить("Товар_TraceMeasureUnitQualifierCode", Истина);
	ПараметрыВыгрузки.Вставить("Товар_TraceMeasureUnitQualifierName", Истина);
	ПараметрыВыгрузки.Вставить("Товар_GoodsQuantity", Истина);
	ПараметрыВыгрузки.Вставить("Товар_MeasureUnitQualifierName", Истина);
	ПараметрыВыгрузки.Вставить("Товар_MeasureUnitQualifierCode", Истина);
	
	ПараметрыВыгрузки.Вставить("Товар_CountryCodeRU", Истина);
	ПараметрыВыгрузки.Вставить("Товар_CountryCodeBY", Истина);
	ПараметрыВыгрузки.Вставить("Товар_CountryCodeKZ", Истина);
	ПараметрыВыгрузки.Вставить("Товар_CountryCodeAM", Истина);
	ПараметрыВыгрузки.Вставить("Товар_CountryCodeKG", Истина);
КонецПроцедуры

&НаСервере
Процедура ДополнитьГрафы123(ПараметрыВыгрузки, Префикс)
	Данные = ЭтотОбъект[Префикс + "Данные"];
	ФормаУчетаПеремещенияТоваровТС.ЗагрузитьПараметрыДляВыгрузки(ПараметрыВыгрузки, Данные, Префикс);
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ОТД", Новый ОписаниеТипов("Дата"));
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ДатаФормирования", XMLСтрока(ТекущаяДатаСеанса()));
	ПараметрыВыгрузки.Вставить("ReportingDate", Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=yyyy-MM"));
	ПараметрыВыгрузки.Вставить("DocumentID", Строка(Новый УникальныйИдентификатор));
	Если Графа4 = 0 Тогда 
		ПараметрыВыгрузки.Вставить("CustomsProcedure", "ЭК");
	ИначеЕсли Графа4 = 1 Тогда 
		ПараметрыВыгрузки.Вставить("CustomsProcedure", "ИМ");
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	ДополнитьПростыеРеквизиты(ПараметрыВыгрузки);
	ДополнитьТабличныеЧасти(ПараметрыВыгрузки);
	ДополнитьВременныеРеквизитыТовара(ПараметрыВыгрузки);
	ДополнитьГрафы123(ПараметрыВыгрузки, "Графа1");
	ДополнитьГрафы123(ПараметрыВыгрузки, "Графа2");
	ДополнитьГрафы123(ПараметрыВыгрузки, "Графа3");
	
	Если Не ПараметрыВыгрузки.Свойство("Графа1_ОКАТО")
		И Не ПараметрыВыгрузки.Свойство("Графа2_ОКАТО")
		И Не ПараметрыВыгрузки.Свойство("Графа3_ОКАТО") Тогда 
		
		ТаблицаРегионОКАТО = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКАТО").ТаблицаЗначений;
		Для Инд = 1 По 3 Цикл 
			ИНН = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузки, "Графа" + Инд + "_RFINN", "");
			ПараметрыВыгрузки.Вставить("Графа" + Инд + "_ОКАТО", ОКАТОПоИНН(ИНН, ТаблицаРегионОКАТО));
		КонецЦикла;
	КонецЕсли;
	Возврат ПараметрыВыгрузки;
КонецФункции

&НаСервере
Функция ОКАТОПоИНН(ИНН, ТаблицаРегионОКАТО)
	Регион = Лев(ИНН, 2);
	Если Не СтрПодобнаПоРегулярномуВыражению(Регион, "[0-9]{2}") Тогда 
		Возврат "";
	КонецЕсли;
	
	ОтбСтроки = ТаблицаРегионОКАТО.НайтиСтроки(Новый Структура("Фильтр1", Регион));
	Возврат ?(ЗначениеЗаполнено(ОтбСтроки), ОтбСтроки[0].Код, "");
КонецФункции

&НаСервере
Функция ПредставлениеГрафа12(ПараметрыВыгрузкиСтрокиТовара)
	Представление = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_GoodsDescription", "");
	
	ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_Manufacturer", "");
	Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
		Представление = Представление + ", производитель " + ТекущийПараметр;
		ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_RFINN", "");
		Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
			Представление = Представление + ", ИНН " + ТекущийПараметр;
		КонецЕсли;
		ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_RFKPP", "");
		Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
			Представление = Представление + ", КПП " + ТекущийПараметр;
		КонецЕсли;
		ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_RFOGRN", "");
		Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
			Представление = Представление + ", ОГРН " + ТекущийПараметр;
		КонецЕсли;
		ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_ОКАТО", "");
		Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
			Представление = Представление + ", ОКАТО " + ТекущийПараметр;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПараметр = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_TraceGoodsQuantity", "");
	Если ЗначениеЗаполнено(ТекущийПараметр) Тогда 
		Представление = Представление + ", " + ТекущийПараметр + "/" 
			+ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыгрузкиСтрокиТовара, "Товар_TraceMeasureUnitQualifierCode", "");
	КонецЕсли;
	
	Для Каждого Стр Из ПараметрыВыгрузкиСтрокиТовара.Товар_СредстваИдентификации Цикл 
		Если ЗначениеЗаполнено(Стр.FirstIdentificationMeansItemDetails) Тогда 
			Представление = Представление + ", " + Стр.FirstIdentificationMeansItemDetails;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.LastIdentificationMeansItemDetails) Тогда 
			Представление = Представление + ", " + Стр.LastIdentificationMeansItemDetails;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Представление;
КонецФункции

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю("Перед формированием печатных форм необходимо определить"
			+ "в системе принтер и задать его в качестве используемого по умолчанию!");
			
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	ПечатныйБланк = ОбъектОтчета(ИмяФормы).ПолучитьМакет("ПечатныйБланк");
	ОсновнаяЧасть1 = ПечатныйБланк.ПолучитьОбласть("ОсновнаяЧасть1");
	ОсновнаяЧасть2 = ПечатныйБланк.ПолучитьОбласть("ОсновнаяЧасть2");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ОсновнаяЧасть1.Области.АннулируемаяФорма.Значение = РегНомерАннулируемойФормы;
	ОсновнаяЧасть1.Области.ОтправительКоды.Значение = Графа1Надпись;
	ОсновнаяЧасть1.Области.ПолучательРеквизиты.Значение = Графа2Надпись;
	ОсновнаяЧасть1.Области.НаправлениеПеремещения.Значение = ?(Графа4 = 0, "ЭК", ?(Графа4 = 0, "ИМ", ""));
	ОсновнаяЧасть1.Области.КодВалютыЦеныТовара.Значение = Графа7Код;
	ОсновнаяЧасть1.Области.ОбщаяЦенаТоваров.Значение = Графа7Сумма;
	ОсновнаяЧасть1.Области.ТоргующаяСтранаНаименование.Значение = Графа5Наименование;
	ОсновнаяЧасть1.Области.ТоргующаяСтранаКод.Значение = Графа5Код;
	ОсновнаяЧасть1.Области.СтранаОтправленияНаименование.Значение = Графа8Наименование;
	ОсновнаяЧасть1.Области.СтранаОтправленияКод.Значение = Графа8Код;
	ОсновнаяЧасть1.Области.СтранаНазначенияНаименование.Значение = Графа6Наименование;
	ОсновнаяЧасть1.Области.СтранаНазначенияКод.Значение = Графа6Код;
	ОсновнаяЧасть1.Области.ВидТранспортаНаименование.Значение = Графа9Наименование;
	ОсновнаяЧасть1.Области.ВидТранспортаКод.Значение = Графа9Код;
	ОсновнаяЧасть1.Области.ОтвЛицоФинУрРеквизиты.Значение = Графа3Надпись;
	ПечатнаяФорма.Вывести(ОсновнаяЧасть1);
	
	Для Каждого Стр Из ДокументыОснования Цикл 
		ДокументСтрока = ПечатныйБланк.ПолучитьОбласть("ДокументСтрока");
		ДокументСтрока.Области.ДокСтрока.Значение = Стр.Наименование + " №" + Стр.Номер + " от " + Формат(Стр.Дата, "ДЛФ=DD");
		ПечатнаяФорма.Вывести(ДокументСтрока);
	КонецЦикла;
	ПечатнаяФорма.Вывести(ПечатныйБланк.ПолучитьОбласть("ДокументСтрока"));
	
	Если Товары.Количество() = 0 Тогда 
		ПечатнаяФорма.Вывести(ПечатныйБланк.ПолучитьОбласть("ТоварСтрока"));
	Иначе
		Для Каждого Стр Из Товары Цикл 
			ТоварСтрока = ПечатныйБланк.ПолучитьОбласть("ТоварСтрока");
			ТоварСтрока.Области.ПорНом.Значение = Товары.Индекс(Стр) + 1;
			
			ПараметрыВыгрузкиСтрокиТовара = Новый Структура("НомерТовара, ОТД", Товары.Индекс(Стр) + 1, Новый ОписаниеТипов("Дата"));
			ФормаУчетаПеремещенияТоваровТС.ЗагрузитьПараметрыДляВыгрузки(ПараметрыВыгрузкиСтрокиТовара, Стр.Данные, "Товар");
			ТоварСтрока.Области.НаименованиеТовара.Значение = ПредставлениеГрафа12(ПараметрыВыгрузкиСтрокиТовара);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_GoodsTNVEDCode", ТоварСтрока.Области.КодТовара.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_InvoicedCost", ТоварСтрока.Области.ЦенаТовараВыбВал.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_StatisticalCostUSD", ТоварСтрока.Области.ЦенаТовараВалДоллар.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_CountryName", ТоварСтрока.Области.СтранаТовараНаименование.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_CountryCode", ТоварСтрока.Области.СтранаТовараКод.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_NetWeightQuantity", ТоварСтрока.Области.ВесТовара.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_StatisticalCostRUB", ТоварСтрока.Области.ЦенаТовараВалРубль.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_GoodsQuantity", ТоварСтрока.Области.ЕдИзмТовараКво.Значение);
			ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_MeasureUnitQualifierName", ТоварСтрока.Области.ЕдИзмТовараКратко.Значение);
			Если ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_ДополнительнаяИнформация") Тогда 
				ДополнительнаяИнформация = "";
				Для Каждого ДопИнфо Из ПараметрыВыгрузкиСтрокиТовара.Товар_ДополнительнаяИнформация Цикл 
					ДополнительнаяИнформация = ДополнительнаяИнформация + 
						?(ЗначениеЗаполнено(ДополнительнаяИнформация), ", ", "") + ДопИнфо.AdditionalInformation;
				КонецЦикла;
				ТоварСтрока.Области.ДопСведения.Значение = ДополнительнаяИнформация;
			КонецЕсли;
			Если ПараметрыВыгрузкиСтрокиТовара.Свойство("Товар_ДекларацияНаТовары") Тогда 
				ДекларацияОписание = "";
				Для Каждого Декларация Из ПараметрыВыгрузкиСтрокиТовара.Товар_ДекларацияНаТовары Цикл 
					ДекларацияОписание = ДекларацияОписание + ?(ЗначениеЗаполнено(ДекларацияОписание), ", ", "")
						+ Декларация.CustomsCode + "/" + Декларация.RegistrationDate + "/" + Декларация.GTDNumber
						+ ?(ЗначениеЗаполнено(Декларация.GoodsNumeric), "/" + Декларация.GoodsNumeric, "");
				КонецЦикла;
				ТоварСтрока.Области.Декларация.Значение = ДекларацияОписание;
			КонецЕсли;
			
			ПечатнаяФорма.Вывести(ТоварСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОтчетныйПериодСтрокой = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=MMyyyy; ДП=------");
	ОсновнаяЧасть2.Области.ОтчетныйМесяцМ1.Значение = Сред(ОтчетныйПериодСтрокой, 1, 1);
	ОсновнаяЧасть2.Области.ОтчетныйМесяцМ2.Значение = Сред(ОтчетныйПериодСтрокой, 2, 1);
	ОсновнаяЧасть2.Области.ОтчетныйМесяцГ1.Значение = Сред(ОтчетныйПериодСтрокой, 3, 1);
	ОсновнаяЧасть2.Области.ОтчетныйМесяцГ2.Значение = Сред(ОтчетныйПериодСтрокой, 4, 1);
	ОсновнаяЧасть2.Области.ОтчетныйМесяцГ3.Значение = Сред(ОтчетныйПериодСтрокой, 5, 1);
	ОсновнаяЧасть2.Области.ОтчетныйМесяцГ4.Значение = Сред(ОтчетныйПериодСтрокой, 6, 1);
	ОсновнаяЧасть2.Области.ОргДолжностьИсп.Значение = Заявитель_Должность;
	ОсновнаяЧасть2.Области.ОргИсполнитель.Значение = Заявитель_Фамилия + " " + Заявитель_Имя + " " + Заявитель_Отчество;
	ОсновнаяЧасть2.Области.ОргТелефонИсп.Значение = Заявитель_Телефон;
	ОсновнаяЧасть2.Области.ОргАдресЭлПочты.Значение = Заявитель_ЭлектроннаяПочта;
	ОсновнаяЧасть2.Области.ПолнСокрНаим.Значение = Заявитель_ПолноеНаименование + " / " + Заявитель_КраткоеНаименование;
	ОсновнаяЧасть2.Области.ИннКппОгрн.Значение = Заявитель_ОГРН + "/" + Заявитель_ИНН + "/" + Заявитель_КПП;
	ОсновнаяЧасть2.Области.ОргПочтовыйАдрес.Значение = Заявитель_СтранаНаименование + ", " + Заявитель_Индекс 
		+ ", " + Заявитель_Область + ", " + Заявитель_НаселенныйПункт + ", " + Заявитель_УлицаНомерДома
		+ ", " + Заявитель_Дом + ", " + Заявитель_Комната;
	
	ПечатнаяФорма.Вывести(ОсновнаяЧасть2);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Статистическая форма учета перемещения товаров");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
		ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1. Формируется печатная форма...';
			|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	ОбщегоНазначения.СообщитьПользователю("Проверка выгрузки доступна в форме по кнопке ""Проверить""");
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНаОснованииЗаявленияОВвозе

&НаКлиенте
Процедура ЗаполнитьДаннымиПервичногоДокументаКлиент(Команда)
	ОО = Новый ОписаниеОповещения("ЗаполнитьДаннымиПервичногоДокументаПослеВыбора", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Организация", СтруктураРеквизитовФормы.Организация);
	
	Если Графа4 = 0 Тогда
		Если ЗначениеЗаполнено(ИмяФормыПодбораОснований) Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
			ПараметрыФормы.Вставить("Статформа", Истина);
			ПараметрыФормы.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
			ПараметрыФормы.Вставить("ТоргующаяСтранаКод", Графа5Код);
			ПараметрыФормы.Вставить("НаправлениеПеремещения", "ЭК");
			ПараметрыФормы.Вставить("ВидТранспортаКод", Графа9Код);
			
			ОткрытьФорму(ИмяФормыПодбораОснований, ПараметрыФормы, ЭтотОбъект, , , , ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли СтруктураРеквизитовФормы.ЗаполнениеНаОснованииРеализацииИВвоза Тогда
			ИмяОткрываемойФормы = "Документ.РеализацияТоваровУслуг.ФормаВыбора";
			ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю("Заполнение при экспорте не поддерживается");
		КонецЕсли;
	ИначеЕсли Графа4 = 1 Тогда
		Если ЗначениеЗаполнено(ИмяФормыПодбораОснований) Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
			ПараметрыФормы.Вставить("НаправлениеПеремещения", "ИМ");
			ПараметрыФормы.Вставить("ВидТранспортаКод", Графа9Код);
			
			ИмяОткрываемойФормы = ИмяФормыПодбораОснований;
		Иначе
			ИмяОткрываемойФормы = "Документ.ЗаявлениеОВвозеТоваров.ФормаВыбора";
		КонецЕсли;
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо выбрать направление перемещения", , "Графа4");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДокумента(Ссылка)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дата, Организация, Ссылка");
КонецФункции

&НаКлиенте
Асинх Процедура ЗаполнитьДаннымиПервичногоДокументаПослеВыбора(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Дата, Организация, Ссылка");
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если Результат.Количество() > 0 Тогда
			РеквизитыДокумента = РеквизитыДокумента(Результат[0]);
		Иначе
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Результат);
	Иначе
		РеквизитыДокумента = РеквизитыДокумента(Результат);
	КонецЕсли;
	
	Если НачалоМесяца(РеквизитыДокумента.Дата) <> НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда 
		РезультатВопроса = Ждать ВопросАсинх("Период документа не совпадает с периодом отчета. Изменить период отчета?", РежимДиалогаВопрос.ДаНетОтмена);
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = НачалоМесяца(РеквизитыДокумента.Дата);
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = КонецМесяца(РеквизитыДокумента.Дата);
			Модифицированность = Истина;
		ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДаннымиПервичногоДокумента(Результат);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПервичногоДокумента(Ссылки)
	Попытка
		ТекстСообщения = "Не удалось выполнить заполнение на основании ";
		СписокОснований.Очистить();
		Если ТипЗнч(Ссылки) = Тип("Массив") Тогда
			Основание = ?(Ссылки.Количество() = 1, Ссылки[0], Неопределено);
			МассивДокументов = Ссылки;
			Для каждого СсылкаДокументаОснования Из Ссылки Цикл
				СписокОснований.Добавить(СсылкаДокументаОснования);
			КонецЦикла;
		Иначе
			Основание = Ссылки;
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(Ссылки);
			СписокОснований.Добавить(СсылкаДокументаОснования);
		КонецЕсли;
		
		Если Графа4 = 1 Тогда
			ТекстСообщения = ТекстСообщения + "заявления о ввозе";
			
			Если СтруктураРеквизитовФормы.ЗаполнениеНаОснованииРеализацииИВвоза Тогда
				РазложениеИмениФормы = СтрРазделить(ИмяФормы, ".");
				ДанныеПервичногоДокумента = Неопределено;
				ПараметрыОтчета = Новый Структура("МассивДокументов,НаправлениеПеремещения", МассивДокументов, "ИМ");
				РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(РазложениеИмениФормы[1], РазложениеИмениФормы[3], ПараметрыОтчета, ДанныеПервичногоДокумента);
			Иначе
				РазложениеИмениФормы = СтрРазделить(ИмяФормы, ".");
				ДанныеПервичногоДокумента = Неопределено;
				ПараметрыОтчета = Новый Структура("МассивДокументов,НаправлениеПеремещения", МассивДокументов, "ИМ");
				РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(РазложениеИмениФормы[1], РазложениеИмениФормы[3], ПараметрыОтчета, ДанныеПервичногоДокумента);
				
				Если Не ДанныеПервичногоДокумента.Свойство("ШтрихкодыУпаковок") Тогда 
					ДанныеПервичногоДокумента.Вставить("ШтрихкодыУпаковок", Неопределено);
				КонецЕсли;
				Если ДанныеПервичногоДокумента.ТаблицаТоварыДляВыгрузки.Колонки.Найти("ПрослеживаемыйТовар") = Неопределено Тогда 
					ДанныеПервичногоДокумента.ТаблицаТоварыДляВыгрузки.Колонки.Добавить("ПрослеживаемыйТовар", Новый ОписаниеТипов("Булево"));
				КонецЕсли;
				Для Каждого КолонкаТаблицы Из СтрРазделить("ДопСведения,ДопСведенияКод,КолвоПрослеживаемогоТовараВЕдИзмеренияТНВЭД," 
					+ "ЕдИзмеренияТНВЭДПрослеживаемогоТовара,КодЕдИзмеренияТНВЭДПрослеживаемогоТовара", ",") Цикл 
					
					Если ДанныеПервичногоДокумента.ТаблицаТоварыДляВыгрузки.Колонки.Найти(КолонкаТаблицы) = Неопределено Тогда 
						ДанныеПервичногоДокумента.ТаблицаТоварыДляВыгрузки.Колонки.Добавить(КолонкаТаблицы);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			РазложениеИмениФормы = СтрРазделить(ИмяФормы, ".");
			ДанныеПервичногоДокумента = Неопределено;
			ПараметрыОтчета = Новый Структура("МассивДокументов,НаправлениеПеремещения", МассивДокументов, "ЭК");
			РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(РазложениеИмениФормы[1], РазложениеИмениФормы[3], ПараметрыОтчета, ДанныеПервичногоДокумента);
		КонецЕсли;
		
		Товары.Очистить();
		ДополнитьКонтакты(ДанныеПервичногоДокумента.РеквизитыШапка);
		ЗагрузитьДокументы(ДанныеПервичногоДокумента.ТаблицаДокументы);
		Для Каждого Ссылка Из МассивДокументов Цикл
			ЗагрузитьТовары(Ссылка, ДанныеПервичногоДокумента);
		КонецЦикла;
		ЗагрузитьСведенияОЗаявителе(ДанныеПервичногоДокумента.РеквизитыШапка);
		ЗагрузитьГрафа1(ДанныеПервичногоДокумента.РеквизитыШапка);
		ЗагрузитьГрафа2(ДанныеПервичногоДокумента.РеквизитыШапка);
		ЗагрузитьГрафа3(ДанныеПервичногоДокумента.РеквизитыШапка);
		ЗагрузитьПрочиеДанные(ДанныеПервичногоДокумента.РеквизитыШапка);
		ДоступностьПолей(ЭтотОбъект);
		УстановитьЗаголовок();
		Модифицированность = Истина;
	Исключение
		Товары.Очистить();
		ДокументыОснования.Очистить();
		Основание = Неопределено;
		СписокОснований.Очистить();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументы(ТаблицаДокументы)
	ДокументыОснования.Очистить();
	Для Каждого Стр Из ТаблицаДокументы Цикл
		НовСтр = ДокументыОснования.Добавить();
		НовСтр.Наименование = Стр.НаименованиеДокумента;
		НовСтр.Номер = Стр.НомерДокумента;
		НовСтр.Дата = Стр.ДатаДокумента;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция СтруктураТовар(СтрокаТовар)
	ПоказателиГрафы = Новый Структура;
	ПоказателиГрафы.Вставить("MeasureUnitQualifierName", СтрокаТовар.ЕдИзмТовараКратко);
	ПоказателиГрафы.Вставить("MeasureUnitQualifierCode", СтрокаТовар.ЕдИзмТовараКод);
	ПоказателиГрафы.Вставить("GoodsQuantity", СтрокаТовар.ЕдИзмТовараКво);
	ПоказателиГрафы.Вставить("StatisticalCostRUB", СтрокаТовар.ЦенаТовараВалРубль);
	ПоказателиГрафы.Вставить("NetWeightQuantity", СтрокаТовар.ВесТовара);
	ПоказателиГрафы.Вставить("CountryName", СтрокаТовар.СтранаТовараНаименование);
	ПоказателиГрафы.Вставить("CountryCode", СтрокаТовар.СтранаТовараКод);
	ПоказателиГрафы.Вставить("StatisticalCostUSD", СтрокаТовар.ЦенаТовараВалДоллар);
	ПоказателиГрафы.Вставить("InvoicedCost", СтрокаТовар.ЦенаТовараВыбВал);
	ПоказателиГрафы.Вставить("Manufacturer", Строка(СтрокаТовар.Производитель));
	ПоказателиГрафы.Вставить("GoodsDescription", СтрокаТовар.НаименованиеТовара);
	ПоказателиГрафы.Вставить("GoodsTNVEDCode", СтрокаТовар.КодТовара);
	
	СтруктураТовар = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТовар);
	ПоказателиГрафы.Вставить("RFOGRN", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТовар, "ПроизводительОГРН", ""));
	ПоказателиГрафы.Вставить("RFINN", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТовар, "ПроизводительИНН", ""));
	ПоказателиГрафы.Вставить("RFKPP", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТовар, "ПроизводительКПП", ""));
	ПоказателиГрафы.Вставить("RBUNP", "");
	ПоказателиГрафы.Вставить("RBIdentificationNumber", "");
	ПоказателиГрафы.Вставить("RKBIN", "");
	ПоказателиГрафы.Вставить("RKIIN", "");
	ПоказателиГрафы.Вставить("RAUNN", "");
	ПоказателиГрафы.Вставить("KGINN", "");
	ПоказателиГрафы.Вставить("KGOKPO", "");
	ПоказателиГрафы.Вставить("RASocialServiceNumber", "");
	ПоказателиГрафы.Вставить("RASocialServiceCertificate", "");
	ПоказателиГрафы.Вставить("ОКАТО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураТовар, "ПроизводительОКАТО", ""));
	ДополнитьОКАТОПОИНН(ПоказателиГрафы);
	
	Если СтрокаТовар.ПрослеживаемыйТовар Тогда
		ПоказателиГрафы.Вставить("TraceGoodsQuantity", СтрокаТовар.КолвоПрослеживаемогоТовараВЕдИзмеренияТНВЭД);
		ПоказателиГрафы.Вставить("TraceMeasureUnitQualifierName", СтрокаТовар.ЕдИзмеренияТНВЭДПрослеживаемогоТовара);
		ПоказателиГрафы.Вставить("TraceMeasureUnitQualifierCode", СтрокаТовар.КодЕдИзмеренияТНВЭДПрослеживаемогоТовара);
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый ТаблицаЗначений;
	ДополнительнаяИнформация.Колонки.Добавить("AdditionalInformationCode");
	ДополнительнаяИнформация.Колонки.Добавить("AdditionalInformation");
	СтруктураДопСведения = Новый Структура("ДопСведенияКод, ДопСведения");
	ЗаполнитьЗначенияСвойств(СтруктураДопСведения, СтрокаТовар);
	Если ЗначениеЗаполнено(СтруктураДопСведения.ДопСведенияКод) Тогда
		НовСтр = ДополнительнаяИнформация.Добавить();
		НовСтр.AdditionalInformationCode = СтруктураДопСведения.ДопСведенияКод;
		НовСтр.AdditionalInformation = СтруктураДопСведения.ДопСведения;
	КонецЕсли;
	ПоказателиГрафы.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
	
	СредстваИдентификации = Новый ТаблицаЗначений;
	СредстваИдентификации.Колонки.Добавить("AggregationKindCode");
	СредстваИдентификации.Колонки.Добавить("IdentificationMeansKindCode");
	СредстваИдентификации.Колонки.Добавить("FirstIdentificationMeansItemDetails");
	СредстваИдентификации.Колонки.Добавить("LastIdentificationMeansItemDetails");
	ПоказателиГрафы.Вставить("СредстваИдентификации", СредстваИдентификации);
	
	ДекларацияНаТовары = Новый ТаблицаЗначений;
	ДекларацияНаТовары.Колонки.Добавить("CustomsCode");
	ДекларацияНаТовары.Колонки.Добавить("RegistrationDate");
	ДекларацияНаТовары.Колонки.Добавить("GTDNumber");
	ДекларацияНаТовары.Колонки.Добавить("GoodsNumeric");
	Если ЗначениеЗаполнено(СтрокаТовар.НомерТаможеннойДекларации) Тогда
		НовСтр = ДекларацияНаТовары.Добавить();
		НовСтр.CustomsCode = СтрокаТовар.КодТО;
		НовСтр.RegistrationDate = РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрокаТовар.ДатаРегистрацииСтр);
		НовСтр.GTDNumber = СокрЛП(СтрокаТовар.НомерДок);
		НовСтр.GoodsNumeric = СтрокаТовар.ДекларацияНом;
	КонецЕсли;
	ПоказателиГрафы.Вставить("ДекларацияНаТовары", ДекларацияНаТовары);
	
	Возврат ПоказателиГрафы;
КонецФункции

&НаСервере
Процедура ЗагрузитьТовары(Ссылка, ДанныеПервичногоДокумента)
	ТаблицаТоварыДляВыгрузки = ДанныеПервичногоДокумента.ТаблицаТоварыДляВыгрузки;
	ШтрихкодыУпаковок = ДанныеПервичногоДокумента.ШтрихкодыУпаковок;
	ТаблицаДопСведения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПервичногоДокумента, "ТаблицаДопСведения");
	
	Отбор = Новый Структура("ДокументСсылка, Номенклатура", Ссылка, Неопределено);
	Для Каждого Стр Из ТаблицаТоварыДляВыгрузки Цикл
		Если Стр.ДокументСсылка <> Ссылка Тогда 
			Продолжить;
		КонецЕсли;
		
		НаименованиеИзСправочникаФТС = НаименованиеСтраныПоКоду(Стр.СтранаТовараКод);
		Если ЗначениеЗаполнено(НаименованиеИзСправочникаФТС) Тогда 
			Стр.СтранаТовараНаименование = НаименованиеИзСправочникаФТС;
		КонецЕсли;
		
		СтруктураТовара = СтруктураТовар(Стр);
		Отбор.Номенклатура = Стр.Номенклатура;
		Если ТипЗнч(ШтрихкодыУпаковок) = Тип("ТаблицаЗначений") Тогда 
			Для Каждого ШК Из ШтрихкодыУпаковок.НайтиСтроки(Отбор) Цикл 
				НовСтр = СтруктураТовара.СредстваИдентификации.Добавить();
				НовСтр.AggregationKindCode = ШК.КодУровняМаркировки;
				НовСтр.IdentificationMeansKindCode = ШК.КодВидаСтредстваИдентификации;
				НовСтр.FirstIdentificationMeansItemDetails = ШК.ЕдиничныйКод;
			КонецЦикла;
		КонецЕсли;
		Если ТипЗнч(ТаблицаДопСведения) = Тип("ТаблицаЗначений") Тогда 
			Для Каждого ДС Из ТаблицаДопСведения.НайтиСтроки(Отбор) Цикл 
				НовСтр = СтруктураТовара.ДополнительнаяИнформация.Добавить();
				НовСтр.AdditionalInformationCode = ДС.Код;
				НовСтр.AdditionalInformation = ДС.ДополнительнаяИнформация;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Товары.Добавить(),
			ФормаУчетаПеремещенияТоваровТС.СформироватьСтруктуруТовараПриЗагрузке(СтруктураТовара));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСведенияОЗаявителе(Реквизиты)
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Реквизиты.Организация) Тогда 
		СтрокаСведений = "ИННЮЛ,НаимЮЛПол,КППЮЛ,НаимЮЛСокр,ОГРН,ТелОтвСтатистика,ДолжнОтвСтатистика,АдресЭлПочтыОтвСтатистика,ФИООтвСтатистика";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Реквизиты.Организация, Реквизиты.Дата, СтрокаСведений);
		Заявитель_ПолноеНаименование = СведенияОбОрганизации.НаимЮЛПол;
		Заявитель_КраткоеНаименование = СведенияОбОрганизации.НаимЮЛСокр;
		Заявитель_ОГРН = СведенияОбОрганизации.ОГРН;
		Заявитель_ИНН = СведенияОбОрганизации.ИННЮЛ;
		Заявитель_КПП = СведенияОбОрганизации.КППЮЛ;
		
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИООтвСтатистика);
		Заявитель_Фамилия = ФИО.Фамилия;
		Заявитель_Имя = ФИО.Имя;
		Заявитель_Отчество = ФИО.Отчество;
		Заявитель_ЭлектроннаяПочта = СведенияОбОрганизации.АдресЭлПочтыОтвСтатистика;
		Заявитель_Должность = СведенияОбОрганизации.ДолжнОтвСтатистика;
		Заявитель_Телефон = ФормаУчетаПеремещенияТоваровТС.ТелефонВФорматСтатформы(СведенияОбОрганизации.ТелОтвСтатистика);
	Иначе 
		СтрокаСведений = "ИННФЛ,ФИО,ОГРН,ФамилияИП,ИмяИП,ОтчествоИП,АдресЭлПочтыИП,ТелСлуж";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Реквизиты.Организация, Реквизиты.Дата, СтрокаСведений);
		Заявитель_ПолноеНаименование = СведенияОбОрганизации.ФИО;
		Заявитель_ОГРН = СведенияОбОрганизации.ОГРН;
		Заявитель_ИНН = СведенияОбОрганизации.ИННФЛ;
		Заявитель_Фамилия = СведенияОбОрганизации.ФамилияИП;
		Заявитель_Имя = СведенияОбОрганизации.ИмяИП;
		Заявитель_Отчество = СведенияОбОрганизации.ОтчествоИП;
		Заявитель_ЭлектроннаяПочта = СведенияОбОрганизации.АдресЭлПочтыИП;
		Заявитель_Телефон = ФормаУчетаПеремещенияТоваровТС.ТелефонВФорматСтатформы(СведенияОбОрганизации.ТелСлуж);
	КонецЕсли;
	
	Заявитель_СтранаКод = Реквизиты.ОргСтранаКод;
	Заявитель_СтранаНаименование = Реквизиты.ОргСтранаНаименование;
	Заявитель_Индекс = Реквизиты.ОргИндекс;
	Заявитель_Область = Реквизиты.ОргОбласть;
	Заявитель_НаселенныйПункт = Реквизиты.ОргНаселенныйПункт;
	Заявитель_УлицаНомерДома = Реквизиты.ОргУлицаНомерДома;
КонецПроцедуры

&НаСервере
Функция ПустаяСтруктураГраф123()
	ПоказателиГрафы = Новый Структура;
	Для Каждого Элт Из СтрРазделить(ФормаУчетаПеремещенияТоваровТС.ПростыеПоказателиГрафы123(), ",") Цикл 
		ПоказателиГрафы.Вставить(Элт);
	КонецЦикла;
	
	ТаблицаКонтакты = Новый ТаблицаЗначений;
	ТаблицаКонтакты.Колонки.Добавить("Phone");
	ТаблицаКонтакты.Колонки.Добавить("E_mail");
	ПоказателиГрафы.Вставить("CommunicationDetails", ТаблицаКонтакты);
	
	Возврат ПоказателиГрафы;
КонецФункции

&НаСервере
Функция ОбщиеПоказателиГраф13(Реквизиты)
	ПоказателиГрафы = ПустаяСтруктураГраф123();
	
	ПоказателиГрафы.Вставить("OrganizationName", Реквизиты.ОтправительНаименование);
	ПоказателиГрафы.Вставить("BusinessEntityTypeName", Реквизиты.Отправитель_ФормаСобственности);
	ПоказателиГрафы.Вставить("CounryName", Реквизиты.ОргСтранаНаименование);
	ПоказателиГрафы.Вставить("CountryCode", Реквизиты.ОргСтранаКод);
	ПоказателиГрафы.Вставить("PostalCode", Реквизиты.ОтвЛицоФинУрИндекс);
	ПоказателиГрафы.Вставить("Region", Реквизиты.ОргОбласть);
	ПоказателиГрафы.Вставить("City", Реквизиты.ОргНаселенныйПункт);
	ПоказателиГрафы.Вставить("StreetHouse", Реквизиты.ОргУлицаНомерДома);
	ПоказателиГрафы.Вставить("RFINN", Реквизиты.ОтвЛицоФинУрРФ_ИНН);
	ПоказателиГрафы.Вставить("RFKPP", Реквизиты.ОтвЛицоФинУрРФ_КПП);
	ПоказателиГрафы.Вставить("RFOGRN", Реквизиты.ОтвЛицоФинУрРФ_ОГРН);
	ПоказателиГрафы.Вставить("IdentityCardCode", Реквизиты.ОтвЛицоФинУрПасВидДок);
	ПоказателиГрафы.Вставить("IdentityCardName", Реквизиты.ОтвЛицоФинУрПасНаименование);
	ПоказателиГрафы.Вставить("IdentityCardSeries", Реквизиты.ОтвЛицоФинУрПасСерДок);
	ПоказателиГрафы.Вставить("IdentityCardNumber", Реквизиты.ОтвЛицоФинУрПасНомерДок);
	ПоказателиГрафы.Вставить("IdentityCardDate", Реквизиты.ОтвЛицоФинУрПасДатаДок);
	ПоказателиГрафы.Вставить("IdentityCardOrganizationName", Реквизиты.ОтвЛицоФинУрПасОрг);
	ПоказателиГрафы.Вставить("ОКАТО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "ОтвЛицоФинУрОКАТО"));
	ДополнитьОКАТОПОИНН(ПоказателиГрафы);
	
	Если ЗначениеЗаполнено(Реквизиты.ОргТелефонИсп) И ЗначениеЗаполнено(Реквизиты.ОргАдресЭлПочты) Тогда 
		НовСтр = ПоказателиГрафы.CommunicationDetails.Добавить();
		НовСтр.Phone = Реквизиты.ОргТелефонИсп;
		НовСтр.E_mail = Реквизиты.ОргАдресЭлПочты;
	КонецЕсли;
	
	Возврат ПоказателиГрафы;
КонецФункции

&НаСервере
Функция ОбщиеПоказателиГраф23(Реквизиты)
	ПоказателиГрафы = ПустаяСтруктураГраф123();
	
	ПоказателиГрафы.Вставить("OrganizationName", Реквизиты.ПолучательНаименование);
	ПоказателиГрафы.Вставить("BusinessEntityTypeName", Реквизиты.Получатель_ФормаСобственности);
	ПоказателиГрафы.Вставить("CounryName", Реквизиты.ОргСтранаНаименование);
	ПоказателиГрафы.Вставить("CountryCode", Реквизиты.ОргСтранаКод);
	ПоказателиГрафы.Вставить("PostalCode", Реквизиты.ОтвЛицоФинУрИндекс);
	ПоказателиГрафы.Вставить("Region", Реквизиты.ОргОбласть);
	ПоказателиГрафы.Вставить("City", Реквизиты.ОргНаселенныйПункт);
	ПоказателиГрафы.Вставить("StreetHouse", Реквизиты.ОргУлицаНомерДома);
	ПоказателиГрафы.Вставить("RFINN", Реквизиты.ОтвЛицоФинУрРФ_ИНН);
	ПоказателиГрафы.Вставить("RFKPP", Реквизиты.ОтвЛицоФинУрРФ_КПП);
	ПоказателиГрафы.Вставить("RFOGRN", Реквизиты.ОтвЛицоФинУрРФ_ОГРН);
	ПоказателиГрафы.Вставить("IdentityCardCode", Реквизиты.ОтвЛицоФинУрПасВидДок);
	ПоказателиГрафы.Вставить("IdentityCardName", Реквизиты.ОтвЛицоФинУрПасНаименование);
	ПоказателиГрафы.Вставить("IdentityCardSeries", Реквизиты.ОтвЛицоФинУрПасСерДок);
	ПоказателиГрафы.Вставить("IdentityCardNumber", Реквизиты.ОтвЛицоФинУрПасНомерДок);
	ПоказателиГрафы.Вставить("IdentityCardDate", Реквизиты.ОтвЛицоФинУрПасДатаДок);
	ПоказателиГрафы.Вставить("IdentityCardOrganizationName", Реквизиты.ОтвЛицоФинУрПасОрг);
	ПоказателиГрафы.Вставить("ОКАТО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "ОтвЛицоФинУрОКАТО"));
	ДополнитьОКАТОПОИНН(ПоказателиГрафы);
	
	Если ЗначениеЗаполнено(Реквизиты.ОргТелефонИсп) И ЗначениеЗаполнено(Реквизиты.ОргАдресЭлПочты) Тогда 
		НовСтр = ПоказателиГрафы.CommunicationDetails.Добавить();
		НовСтр.Phone = Реквизиты.ОргТелефонИсп;
		НовСтр.E_mail = Реквизиты.ОргАдресЭлПочты;
	КонецЕсли;
	
	Возврат ПоказателиГрафы;
КонецФункции

&НаСервере
Процедура ЗагрузитьГрафа1(Реквизиты)
	Если Графа4 = 0 Тогда 
		ПоказателиГрафы = ОбщиеПоказателиГраф13(Реквизиты);
	Иначе
		ПоказателиГрафы = ПустаяСтруктураГраф123();
		ПоказателиГрафы.Вставить("OrganizationName", Реквизиты.ОтправительНаименование);
		ПоказателиГрафы.Вставить("BusinessEntityTypeName", Реквизиты.Отправитель_ФормаСобственности);
		ПоказателиГрафы.Вставить("CounryName", Реквизиты.ОтправительСтранаНаименование);
		ПоказателиГрафы.Вставить("CountryCode", Реквизиты.ОтправительСтранаКод);
		ПоказателиГрафы.Вставить("PostalCode", Реквизиты.ОтправительИндекс);
		ПоказателиГрафы.Вставить("Region", Реквизиты.ОтправительОбласть);
		ПоказателиГрафы.Вставить("City", Реквизиты.ОтправительНаселенныйПункт);
		ПоказателиГрафы.Вставить("StreetHouse", Реквизиты.ОтправительУлицаНомерДома);
		ПоказателиГрафы.Вставить("IdentityCardCode", Реквизиты.Отправитель_ВидДокКод);
		ПоказателиГрафы.Вставить("IdentityCardName", Реквизиты.Отправитель_ВидДокНаим);
		ПоказателиГрафы.Вставить("IdentityCardSeries", Реквизиты.Отправитель_СерДок);
		ПоказателиГрафы.Вставить("IdentityCardNumber", Реквизиты.Отправитель_НомДок);
		ПоказателиГрафы.Вставить("IdentityCardDate", Реквизиты.Отправитель_ДатаДок);
		ПоказателиГрафы.Вставить("IdentityCardOrganizationName", Реквизиты.Отправитель_ОргДок);
		ПоказателиГрафы.Вставить("KGINN", Реквизиты.ОтправительКГ_ИНН);
		ПоказателиГрафы.Вставить("KGOKPO", Реквизиты.ОтправительКГ_ОКПО);
		ПоказателиГрафы.Вставить("RAUNN", Реквизиты.ОтправительРА_УНН);
		ПоказателиГрафы.Вставить("RASocialServiceNumber", Реквизиты.ОтправительРА_Соц);
		ПоказателиГрафы.Вставить("RBUNP", Реквизиты.ОтправительРБ_УНП);
		ПоказателиГрафы.Вставить("RKBIN", Реквизиты.ОтправительРК_БИН);
		ПоказателиГрафы.Вставить("RKIIN", Реквизиты.ОтправительРК_ИИН);
		ПоказателиГрафы.Вставить("RFOGRN", Реквизиты.ОтправительРФ_ОГРН);
		ПоказателиГрафы.Вставить("RFINN", Реквизиты.ОтправительРФ_ИНН);
		ПоказателиГрафы.Вставить("RFKPP", Реквизиты.ОтправительРФ_КПП);
		ПоказателиГрафы.Вставить("ОКАТО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "ОтправительОКАТО"));
		ДополнитьОКАТОПОИНН(ПоказателиГрафы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Отправитель_Тел) И ЗначениеЗаполнено(Реквизиты.Отправитель_Почта) Тогда 
		НовСтр = ПоказателиГрафы.CommunicationDetails.Добавить();
		НовСтр.Phone = Реквизиты.Отправитель_Тел;
		НовСтр.E_mail = Реквизиты.Отправитель_Почта;
	КонецЕсли;
	
	РезультатЗагрузки = ФормаУчетаПеремещенияТоваровТС.СформироватьСтруктуруГраф123ПриЗагрузке(ПоказателиГрафы, "Раздел1");
	Графа1Ошибка = РезультатЗагрузки.ФлагОшибки;
	Графа1Данные = РезультатЗагрузки.JSON;
	Графа1Надпись = РезультатЗагрузки.ТекстовоеОписание;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрафа2(Реквизиты)
	Если Графа4 = 0 Тогда
		ПоказателиГрафы = ПустаяСтруктураГраф123();
		ПоказателиГрафы.Вставить("OrganizationName", Реквизиты.ПолучательНаименование);
		ПоказателиГрафы.Вставить("BusinessEntityTypeName", Реквизиты.Получатель_ФормаСобственности);
		ПоказателиГрафы.Вставить("CounryName", Реквизиты.ПолучательСтранаНаименование);
		ПоказателиГрафы.Вставить("CountryCode", Реквизиты.ПолучательСтранаКод);
		ПоказателиГрафы.Вставить("PostalCode", Реквизиты.ПолучательИндекс);
		ПоказателиГрафы.Вставить("Region", Реквизиты.ПолучательОбласть);
		ПоказателиГрафы.Вставить("City", Реквизиты.ПолучательНаселенныйПункт);
		ПоказателиГрафы.Вставить("StreetHouse", Реквизиты.ПолучательУлицаНомерДома);
		ПоказателиГрафы.Вставить("IdentityCardCode", Реквизиты.Получатель_ВидДокКод);
		ПоказателиГрафы.Вставить("IdentityCardName", Реквизиты.Получатель_ВидДокНаим);
		ПоказателиГрафы.Вставить("IdentityCardSeries", Реквизиты.Получатель_СерДок);
		ПоказателиГрафы.Вставить("IdentityCardNumber", Реквизиты.Получатель_НомДок);
		ПоказателиГрафы.Вставить("IdentityCardDate", Реквизиты.Получатель_ДатаДок);
		ПоказателиГрафы.Вставить("IdentityCardOrganizationName", Реквизиты.Получатель_ОргДок);
		ПоказателиГрафы.Вставить("KGINN", Реквизиты.ПолучательКГ_ИНН);
		ПоказателиГрафы.Вставить("KGOKPO", Реквизиты.ПолучательКГ_ОКПО);
		ПоказателиГрафы.Вставить("RAUNN", Реквизиты.ПолучательРА_УНН);
		ПоказателиГрафы.Вставить("RASocialServiceNumber", Реквизиты.ПолучательРА_Соц);
		ПоказателиГрафы.Вставить("RBUNP", Реквизиты.ПолучательРБ_УНП);
		ПоказателиГрафы.Вставить("RKBIN", Реквизиты.ПолучательРК_БИН);
		ПоказателиГрафы.Вставить("RKIIN", Реквизиты.ПолучательРК_ИИН);
		ПоказателиГрафы.Вставить("RFOGRN", Реквизиты.ПолучательРФ_ОГРН);
		ПоказателиГрафы.Вставить("RFINN", Реквизиты.ПолучательРФ_ИНН);
		ПоказателиГрафы.Вставить("RFKPP", Реквизиты.ПолучательРФ_КПП);
		ПоказателиГрафы.Вставить("ОКАТО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Реквизиты, "ПолучательОКАТО"));
		ДополнитьОКАТОПОИНН(ПоказателиГрафы);
	Иначе
		ПоказателиГрафы = ОбщиеПоказателиГраф23(Реквизиты);
	КонецЕсли;
	
	РезультатЗагрузки = ФормаУчетаПеремещенияТоваровТС.СформироватьСтруктуруГраф123ПриЗагрузке(ПоказателиГрафы, "Раздел2");
	Графа2Ошибка = РезультатЗагрузки.ФлагОшибки;
	Графа2Данные = РезультатЗагрузки.JSON;
	Графа2Надпись = РезультатЗагрузки.ТекстовоеОписание;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрафа3(Реквизиты)
	РезультатЗагрузки = ФормаУчетаПеремещенияТоваровТС.СформироватьСтруктуруГраф123ПриЗагрузке(
		?(Графа4 = 0, ОбщиеПоказателиГраф13(Реквизиты), ОбщиеПоказателиГраф23(Реквизиты)), "Раздел3");
	
	Графа3Ошибка = РезультатЗагрузки.ФлагОшибки;
	Графа3Данные = РезультатЗагрузки.JSON;
	Графа3Надпись = РезультатЗагрузки.ТекстовоеОписание;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПрочиеДанные(Реквизиты)
	Если Реквизиты.НаправлениеПеремещения = "ИМ" Тогда
		Графа4 = 1;
	Иначе
		Графа4 = 0;
	КонецЕсли;
	Графа5Код = Реквизиты.ТоргующаяСтранаКод;
	Графа5Наименование = Реквизиты.ТоргующаяСтранаНаименование;
	Графа6Код = Реквизиты.СтранаНазначенияКод;
	Графа6Наименование = Реквизиты.СтранаНазначенияНаименование;
	Графа7Код = Реквизиты.ВалютаТовараКод;
	Графа7Сумма = Реквизиты.ОбщаяЦенаТоваров;
	Графа8Код = Реквизиты.СтранаОтправленияКод;
	Графа8Наименование = Реквизиты.СтранаОтправленияНаименование;
	Графа9Код = Реквизиты.ВидТранспортаКод;
	Графа9Наименование = Реквизиты.ВидТранспортаНаименование;
КонецПроцедуры

&НаСервере
Процедура ДополнитьОКАТОПОИНН(ПоказателиГрафы)
	ОКАТО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоказателиГрафы, "ОКАТО");
	RFINN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПоказателиГрафы, "RFINN");
	Если Не ЗначениеЗаполнено(ОКАТО) И ЗначениеЗаполнено(RFINN) Тогда 
		ПоказателиГрафы.Вставить("ОКАТО", ОКАТОПоИНН(RFINN, РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКАТО").ТаблицаЗначений));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

