#Область ОписаниеПеременных

&НаСервере
Перем мОбъектОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОТД = Новый ОписаниеТипов("Дата");
	ОТЧ = Новый ОписаниеТипов("Число");
	ДоступенПодборНоменклатурыИзСправочника = Параметры.ДоступенПодборНоменклатурыИзСправочника;
	СозданиеНового = Параметры.СозданиеНового;
	ИндексРедактируемойСтроки = Параметры.ИндексРедактируемойСтроки;
	ЗагрузитьДанные(Параметры.Данные);
	
	ДоступностьПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьСписки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтранаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "КлСтранМира");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", CountryCode));
		ОО = Новый ОписаниеОповещения("СтранаВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "КлЕдИзмерения");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", MeasureUnitQualifierCode));
		ОО = Новый ОписаниеОповещения("ЕдиницаИзмеренияВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.Имя = "GoodsTNVEDCode" Тогда 
		ВыборТНВЭДИзВстроенногоСписка(СтандартнаяОбработка);
	Иначе
		ЗапрашиваемыеПоказатели = "Наименование,КодТНВЭД,Производитель,ПроизводительИНН,ПроизводительКПП,
			|ПроизводительОГРН,ЕдИзмТовараКод,ЕдИзмТовараКратко,СтранаТовараКод,СтранаТовараНаименование,
			|КодЕдИзмеренияТНВЭДПрослеживаемогоТовара,ЕдИзмеренияТНВЭДПрослеживаемогоТовара,
			|Графа19Соответствие, СписокНомеровТаможеннойДекларации";
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(
			СтандартнаяОбработка, Новый ОписаниеОповещения("НоменклатураВыборЗавершение", ЭтотОбъект), ЭтотОбъект, ЗапрашиваемыеПоказатели);
			
		Если СтандартнаяОбработка Тогда 
			ВыборТНВЭДИзВстроенногоСписка(СтандартнаяОбработка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборТНВЭДИзВстроенногоСписка(СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "Гр11");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", GoodsTNVEDCode));
		ОО = Новый ОписаниеОповещения("ТНВЭДВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрослеживаемостьЕИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "КлЕдИзмерения");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", TraceMeasureUnitQualifierCode));
		ОО = Новый ОписаниеОповещения("ПрослеживаемостьЕИВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОКАТОНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ВладелецФормы, "ОКАТО");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ""));
		ОО = Новый ОписаниеОповещения("ОКАТОВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительнаяИнформация

&НаКлиенте
Процедура ДополнительнаяИнформацияПриАктивизацииСтроки(Элемент)
	Элементы.ДополнительнаяИнформацияДополнительнаяИнформацияУдалить.Доступность =
		(Элементы.ДополнительнаяИнформация.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "Гр19");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ДополнительнаяИнформация[ВыбраннаяСтрока].AdditionalInformationCode));
		ОО = Новый ОписаниеОповещения("ДополнительнаяИнформацияВыборЗавершение", ЭтотОбъект, ВыбраннаяСтрока);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Ок(Команда)
	Если Не ЗначениеЗаполнено(InvoicedCost)
		Или Не ЗначениеЗаполнено(GoodsDescription)
		Или Не ЗначениеЗаполнено(GoodsTNVEDCode) Тогда 
		
		Если Не ЗначениеЗаполнено(GoodsTNVEDCode) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 11", , "GoodsTNVEDCode");
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(GoodsDescription) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 12", , "GoodsDescription");
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(InvoicedCost) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 13", , "InvoicedCost");
			Возврат;
		КонецЕсли;
	Иначе
		Закрыть(РезультатЗакрытия());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	ОписаниеОповещенияОЗакрытии = Неопределено;
	Закрыть(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияДобавить(Команда)
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "Гр19");
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрВводаПоля.ТекстПриВыборе);
		ПараметрыФормы.Вставить("ТаблицаЗначений", ПараметрВводаПоля.ТаблицаЗначений);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ""));
		ОО = Новый ОписаниеОповещения("ДополнительнаяИнформацияВыборЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОО, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияУдалить(Команда)
	ДополнительнаяИнформация.Удалить(Элементы.ДополнительнаяИнформация.ТекущиеДанные);
	Элементы.ДополнительнаяИнформацияДополнительнаяИнформацияУдалить.Доступность =
		(Элементы.ДополнительнаяИнформация.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПоказатели(Команда)
	ОчиститьСообщения();
	ЕстьОшибки = Ложь;
	
	Если Не СоотношениеКурсаДолларРубльКорректно(StatisticalCostUSD, StatisticalCostRUB) Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отношение стоимости RUB/USD, не соответствует курсу", , "StatisticalCostRUB");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(GoodsTNVEDCode) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 11", , "GoodsTNVEDCode");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(GoodsDescription) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 12", , "GoodsDescription");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(InvoicedCost) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 13", , "InvoicedCost");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(CountryCode) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 15, код страны", , "CountryCode");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(CountryName) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 15, наименование страны", , "CountryName");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(NetWeightQuantity) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена графа 16", , "NetWeightQuantity");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если (GoodsQuantity <> Цел(GoodsQuantity)) И (MeasureUnitQualifierCode = "796" Или MeasureUnitQualifierCode = "715") Тогда 
		Элементы.Страницы.ТекущаяСтраница = Элементы.Основное;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Для единиц измерения ""штука"" и ""пара"" количество должно быть целым числом", , "GoodsQuantity");
		ЕстьОшибки = Истина;
	КонецЕсли;
	Если "RU" = CountryCode Тогда 
		Если Не ЗначениеЗаполнено(Manufacturer) Тогда 
			Элементы.Страницы.ТекущаяСтраница = Элементы.Производитель;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан производитель", , "Manufacturer");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОКАТО) Тогда 
			Элементы.Страницы.ТекущаяСтраница = Элементы.Производитель;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан код ОКАТО", , "ОКАТО");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(RFINN, Истина, "")
			И Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(RFINN, Ложь, "") Тогда 
			Элементы.Страницы.ТекущаяСтраница = Элементы.Производитель;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан / неправильно указан ИНН", , "RFINN");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(RFOGRN, Истина, "")
			И Не РегламентированныеДанныеКлиентСервер.ОГРНСоответствуетТребованиям(RFOGRN, Ложь, "") Тогда 
			Элементы.Страницы.ТекущаяСтраница = Элементы.Производитель;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан / неправильно указан ОГРН", , "RFOGRN");
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(RFKPP) И Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(RFKPP, "") Тогда 
			Элементы.Страницы.ТекущаяСтраница = Элементы.Производитель;
			ОбщегоНазначенияКлиент.СообщитьПользователю("Неправильно указан КПП", , "RFKPP");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из ДекларацияНаТовары Цикл 
		Если СтрДлина(Стр.CustomsCode) <> 8 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Графа20;
			Элементы.ДекларацияНаТовары.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Код таможенного органа должен состоять из 8 символов", , "ДекларацияНаТовары");
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
		Если СтрДлина(Стр.GTDNumber) <> 7 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Графа20;
			Элементы.ДекларацияНаТовары.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Порядковый номер документа должен состоять из 7 символов", , "ДекларацияНаТовары");
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Стр.RegistrationDate) Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.Графа20;
			Элементы.ДекларацияНаТовары.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена дата документа", , "ДекларацияНаТовары");
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СредстваИдентификации Цикл 
		Если Не ЗначениеЗаполнено(Стр.AggregationKindCode)
			Или Не ЗначениеЗаполнено(Стр.IdentificationMeansKindCode)
			Или Не ЗначениеЗаполнено(Стр.FirstIdentificationMeansItemDetails) Тогда 
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.Маркировка;
			Элементы.СредстваИдентификации.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнен код уровня/код вида/начальный номер", , "СредстваИдентификации");
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Ошибок не обнаружено");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДатаИзСтрокиЛюбогоФормата(СтрДата)
	Возврат РегламентированнаяОтчетностьЗагрузка.ДатаИзСтрокиЛюбогоФормата(СтрДата);
КонецФункции

&НаКлиенте
Процедура НоменклатураВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда 
		GoodsDescription = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "Наименование");
		GoodsTNVEDCode = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "КодТНВЭД");
		MeasureUnitQualifierCode = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ЕдИзмТовараКод");
		MeasureUnitQualifierName = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ЕдИзмТовараКратко");
		Manufacturer = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "Производитель");
		RFINN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ПроизводительИНН");
		RFKPP = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ПроизводительКПП");
		RFOGRN = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ПроизводительОГРН");
		ОКАТО = "";
		CountryCode = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "СтранаТовараКод");
		CountryName = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "СтранаТовараНаименование");
		TraceMeasureUnitQualifierCode = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "КодЕдИзмеренияТНВЭДПрослеживаемогоТовара");
		TraceMeasureUnitQualifierName = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "ЕдИзмеренияТНВЭДПрослеживаемогоТовара");
		
		Графа19Соответствие = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "Графа19Соответствие");
		ДополнительнаяИнформация.Очистить();
		Если ТипЗнч(Графа19Соответствие) = Тип("Соответствие") Тогда 
			Для Каждого КЗ Из Графа19Соответствие Цикл 
				НовСтр = ДополнительнаяИнформация.Добавить();
				НовСтр.AdditionalInformationCode = КЗ.Ключ;
				НовСтр.AdditionalInformation = КЗ.Значение;
			КонецЦикла;
		КонецЕсли;
		
		СписокНомеровТаможеннойДекларации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыбора, "СписокНомеровТаможеннойДекларации");
		ДекларацияНаТовары.Очистить();
		Если ТипЗнч(СписокНомеровТаможеннойДекларации) = Тип("СписокЗначений") Тогда 
			Для Каждого Элт Из СписокНомеровТаможеннойДекларации Цикл
				НовСтр = ДекларацияНаТовары.Добавить();
				НовСтр.CustomsCode = Элт.Значение.КодТО;
				НовСтр.GTDNumber = Элт.Значение.НомерДок;
				НовСтр.GoodsNumeric = Элт.Значение.ДекларацияНом;
				НовСтр.RegistrationDate = ДатаИзСтрокиЛюбогоФормата(Элт.Значение.ДатаРегистрацииСтр);
			КонецЦикла;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоотношениеКурсаДолларРубльКорректно(StatisticalCostUSD, StatisticalCostRUB)
	Возврат ФормаУчетаПеремещенияТоваровТС.СоотношениеКурсаДолларРубльКорректно(StatisticalCostUSD, StatisticalCostRUB);
КонецФункции

&НаКлиенте
Процедура СформироватьСписки()
	Список = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
		ЭтотОбъект.ВладелецФормы, "КодУровняМаркировки").ТаблицаЗначений;
	Для Каждого Стр Из Список Цикл 
		Если Не ЗначениеЗаполнено(Стр.Код) Тогда 
			Продолжить;
		КонецЕсли;
		Элементы.СредстваИдентификацииAggregationKindCode.СписокВыбора.Добавить(Стр.Код, Стр.Название);
	КонецЦикла;
	Список = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
		ЭтотОбъект.ВладелецФормы, "КодВидаСредстваИдентификации").ТаблицаЗначений;
	Для Каждого Стр Из Список Цикл 
		Если Не ЗначениеЗаполнено(Стр.Код) Тогда 
			Продолжить;
		КонецЕсли;
		Элементы.СредстваИдентификацииIdentificationMeansKindCode.СписокВыбора.Добавить(Стр.Код, Стр.Название);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДоступностьПолей(Форма)
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаRU.Видимость = (Форма.CountryCode = "RU");
	Элементы.ГруппаBY.Видимость = (Форма.CountryCode = "BY");
	Элементы.ГруппаKZ.Видимость = (Форма.CountryCode = "KZ");
	Элементы.ГруппаAM.Видимость = (Форма.CountryCode = "AM");
	Элементы.ГруппаKG.Видимость = (Форма.CountryCode = "KG");
	
	Элементы.ОКАТО.Видимость = (Форма.CountryCode = "RU") Или (Форма.CountryCode = "BY")
		Или (Форма.CountryCode = "KZ") Или (Форма.CountryCode = "AM") Или (Форма.CountryCode = "KG");
КонецПроцедуры

&НаСервере
Функция РезультатЗакрытия()
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("СозданиеНового", СозданиеНового);
	РезультатЗакрытия.Вставить("ИндексРедактируемойСтроки", ИндексРедактируемойСтроки);
	РезультатЗакрытия.Вставить("InvoicedCost", InvoicedCost);
	РезультатЗакрытия.Вставить("Данные", ФормаУчетаПеремещенияТоваровТС.СформироватьJSONТовар(ЭтотОбъект));
	РезультатЗакрытия.Вставить("Описание", ФормаУчетаПеремещенияТоваровТС.СформироватьОписаниеТовара(ЭтотОбъект));
	РезультатЗакрытия.Вставить("КорректностьЗаполнения", ФормаУчетаПеремещенияТоваровТС.ПроверитьЗаполнениеПоказателейТовара(ЭтотОбъект));
	Возврат РезультатЗакрытия;
КонецФункции

&НаКлиенте
Процедура СтранаВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		CountryCode = "";
		CountryName = "";
	Иначе 
		CountryCode = РезультатВыбора["Код"];
		CountryName = РезультатВыбора["Название"];
	КонецЕсли;
	ДоступностьПолей(ЭтотОбъект);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		MeasureUnitQualifierCode = "";
		MeasureUnitQualifierName = "";
	Иначе 
		MeasureUnitQualifierCode = РезультатВыбора["Код"];
		MeasureUnitQualifierName = РезультатВыбора["Название"];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТНВЭДВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		GoodsTNVEDCode = "";
		Если Не ДоступенПодборНоменклатурыИзСправочника Тогда 
			GoodsDescription = "";
		КонецЕсли;
	Иначе 
		GoodsTNVEDCode = РезультатВыбора["Код"];
		Если Не ДоступенПодборНоменклатурыИзСправочника Тогда 
			GoodsDescription = РезультатВыбора["Название"];
		КонецЕсли;
		
		ТаблицаЗначений = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "Гр11").ТаблицаЗначений;
		ОтобранныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Код", GoodsTNVEDCode));
		Если ОтобранныеСтроки.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		КодЕИ = ОтобранныеСтроки[0].Фильтр1;
		Если КодЕИ = "166" Тогда 
			MeasureUnitQualifierCode = "";
			MeasureUnitQualifierName = "";
			Возврат;
		КонецЕсли;
		ТаблицаЗначений = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект.ВладелецФормы, "КлЕдИзмерения").ТаблицаЗначений;
		ОтобранныеСтроки = ТаблицаЗначений.НайтиСтроки(Новый Структура("Код", КодЕИ));
		Если ОтобранныеСтроки.Количество() = 0 Тогда 
			MeasureUnitQualifierCode = "";
			MeasureUnitQualifierName = "";
			Возврат;
		КонецЕсли;
		MeasureUnitQualifierCode = ОтобранныеСтроки[0]["Код"];
		MeasureUnitQualifierName = ОтобранныеСтроки[0]["Название"];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрослеживаемостьЕИВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		TraceMeasureUnitQualifierCode = "";
		TraceMeasureUnitQualifierName = "";
	Иначе 
		TraceMeasureUnitQualifierCode = РезультатВыбора["Код"];
		TraceMeasureUnitQualifierName = РезультатВыбора["Название"];
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформацияВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Или Не ЗначениеЗаполнено(РезультатВыбора["Код"]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Число") Тогда 
		НовСтр = ДополнительнаяИнформация[ДополнительныеПараметры];
	Иначе
		НовСтр = ДополнительнаяИнформация.Добавить();
	КонецЕсли;
	НовСтр.AdditionalInformationCode = РезультатВыбора["Код"];
	НовСтр.AdditionalInformation = РезультатВыбора["Название"];
	Элементы.ДополнительнаяИнформацияДополнительнаяИнформацияУдалить.Доступность =
		(Элементы.ДополнительнаяИнформация.ТекущиеДанные <> Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(Данные)
	Если Не ЗначениеЗаполнено(Данные) Тогда 
		Возврат;
	КонецЕсли;
	
	ФормаУчетаПеремещенияТоваровТС.ЗагрузитьДанныеВФорму(ЭтотОбъект, Данные)
КонецПроцедуры

&НаКлиенте
Процедура ОКАТОВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОКАТО = РезультатВыбора["Код"];
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти
