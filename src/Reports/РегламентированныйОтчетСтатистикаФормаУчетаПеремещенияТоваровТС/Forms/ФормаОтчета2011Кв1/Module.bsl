#Область ОписаниеПеременных

&НаСервере
Перем мОбъектОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мИдГруппы_1 = "П0001000001";
	СтруктураРеквизитовФормы.мИдГруппы_2 = "П0001000002";
	КолИсхСтрокИдГруппы_1 = 1;
	КолИсхСтрокИдГруппы_2 = 1;
	КолКолонокИдГруппы_1 = 4;
	КолКолонокИдГруппы_2 = 13;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_1, СтруктураРеквизитовФормы.мИдГруппы_1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, СтруктураРеквизитовФормы.мИдГруппы_2);

	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_1, КолИсхСтрокИдГруппы_1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, КолИсхСтрокИдГруппы_2);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_1, КолКолонокИдГруппы_1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, КолКолонокИдГруппы_2);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_1,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2,     Новый СписокЗначений);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы_1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, "МногострочнаяЧасть2");
	
	СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура = Новый Массив;
	СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Добавить("ЕдИзмТовараКод");
	СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Добавить("ДокВыбор");
	СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Добавить("ДокНомер");
	СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Добавить("ДокДата");
		
	СтруктураРеквизитовФормы.мВерсияФормы = "11/06/2011";
	СтруктураРеквизитовФормы.мКодОтчета   = "1000000";
	ИмяРаздела = "ФормаОтчета";
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;

	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)

	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;

	ЗаполнитьПоказателиИзРеквизитовФормыНаКлиенте();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли СтрНайти(Область.Имя, "ДатаЗаполнения") = 1 Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводДатыЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОписаниеОповещения, ДатаПодписи, , ЧастиДаты.Дата);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ОргПочтовыйАдрес" Тогда

		СтандартнаяОбработка = Ложь;

		ЗначенияПолей = Новый СписокЗначений;
		
		СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
		
		Если НЕ СтруктураАдреса = Неопределено Тогда
			
			ЗначенияПолей.Добавить(СтруктураАдреса.Индекс,          "Индекс");
			ЗначенияПолей.Добавить(СтруктураАдреса.Регион,          "Регион");
			ЗначенияПолей.Добавить(СтруктураАдреса.Район,           "Район");
			ЗначенияПолей.Добавить(СтруктураАдреса.Город,           "Город");
			ЗначенияПолей.Добавить(СтруктураАдреса.НаселенныйПункт, "НаселенныйПункт");
			ЗначенияПолей.Добавить(СтруктураАдреса.Улица,           "Улица");
			ЗначенияПолей.Добавить(СтруктураАдреса.Дом,             "Дом");
			ЗначенияПолей.Добавить(СтруктураАдреса.Корпус,          "Корпус");
			ЗначенияПолей.Добавить(СтруктураАдреса.Квартира,        "Квартира");
			
		КонецЕсли;
			
		РоссийскийАдрес = Новый Соответствие;
		
		РоссийскийАдрес.Вставить("Индекс",	        "");
		РоссийскийАдрес.Вставить("Регион",          "");
		РоссийскийАдрес.Вставить("Район",           "");
		РоссийскийАдрес.Вставить("Город",           "");
		РоссийскийАдрес.Вставить("НаселенныйПункт", "");
		РоссийскийАдрес.Вставить("Улица",           "");
		РоссийскийАдрес.Вставить("Дом",             "");
		РоссийскийАдрес.Вставить("Корпус",          "");
		РоссийскийАдрес.Вставить("Квартира",        "");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
		ПараметрыФормы.Вставить("ЗначенияПолей",           ЗначенияПолей);
		ПараметрыФормы.Вставить("Представление",           РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки));
		ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
					
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
		
		ТипЗначения = Тип("ОписаниеОповещения");
		ПараметрыКонструктора = Новый Массив(3);
		ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
		ПараметрыКонструктора[1] = ЭтаФорма;
		ПараметрыКонструктора[2] = ДополнительныеПараметры;
		
		Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
		
	ИначеЕсли СтрНайти(Область.Имя, "Отправитель") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПустаяСтрока(СтруктураРеквизитовФормы.НапрПеремещения) Тогда
			ПоказатьПредупреждение(, "Выберите направление перемещения товаров (графа 4)");
			Возврат;
		КонецЕсли; 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтправительИндекс", СтруктураРеквизитовФормы.ОтправительИндекс);
		ПараметрыФормы.Вставить("ОтправительНаименование", СтруктураРеквизитовФормы.ОтправительНаименование);
		ПараметрыФормы.Вставить("ОтправительНаселенныйПункт", СтруктураРеквизитовФормы.ОтправительНаселенныйПункт);
		ПараметрыФормы.Вставить("ОтправительОбласть", СтруктураРеквизитовФормы.ОтправительОбласть);
		ПараметрыФормы.Вставить("ОтправительРБ_УНП", СтруктураРеквизитовФормы.ОтправительРБ_УНП);
		ПараметрыФормы.Вставить("ОтправительРК_БИН", СтруктураРеквизитовФормы.ОтправительРК_БИН);
		ПараметрыФормы.Вставить("ОтправительРК_ИИН", СтруктураРеквизитовФормы.ОтправительРК_ИИН);
		ПараметрыФормы.Вставить("ОтправительРФ_ИНН", СтруктураРеквизитовФормы.ОтправительРФ_ИНН);
		ПараметрыФормы.Вставить("ОтправительРФ_КПП", СтруктураРеквизитовФормы.ОтправительРФ_КПП);
		ПараметрыФормы.Вставить("ОтправительРФ_ОГРН", СтруктураРеквизитовФормы.ОтправительРФ_ОГРН);
		ПараметрыФормы.Вставить("ОтправительСтранаКод", СтруктураРеквизитовФормы.ОтправительСтранаКод);
		ПараметрыФормы.Вставить("ОтправительСтранаНаименование", СтруктураРеквизитовФормы.ОтправительСтранаНаименование);
		ПараметрыФормы.Вставить("ОтправительУлицаНомерДома", СтруктураРеквизитовФормы.ОтправительУлицаНомерДома);
		
		ВводРеквизитов = ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаВводаГрафа1", ПараметрыФормы, ЭтаФорма);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ВводРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ВводРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВводРеквизитов.Открыть();
	
		Возврат;
		
	ИначеЕсли СтрНайти(Область.Имя, "Получатель") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПустаяСтрока(СтруктураРеквизитовФормы.НапрПеремещения) Тогда
			ПоказатьПредупреждение(, "Выберите направление перемещения товаров (графа 4)");
			Возврат;
		КонецЕсли; 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПолучательИндекс", СтруктураРеквизитовФормы.ПолучательИндекс);
		ПараметрыФормы.Вставить("ПолучательНаименование", СтруктураРеквизитовФормы.ПолучательНаименование);
		ПараметрыФормы.Вставить("ПолучательНаселенныйПункт", СтруктураРеквизитовФормы.ПолучательНаселенныйПункт);
		ПараметрыФормы.Вставить("ПолучательОбласть", СтруктураРеквизитовФормы.ПолучательОбласть);
		ПараметрыФормы.Вставить("ПолучательРБ_УНП", СтруктураРеквизитовФормы.ПолучательРБ_УНП);
		ПараметрыФормы.Вставить("ПолучательРК_БИН", СтруктураРеквизитовФормы.ПолучательРК_БИН);
		ПараметрыФормы.Вставить("ПолучательРК_ИИН", СтруктураРеквизитовФормы.ПолучательРК_ИИН);
		ПараметрыФормы.Вставить("ПолучательРФ_ИНН", СтруктураРеквизитовФормы.ПолучательРФ_ИНН);
		ПараметрыФормы.Вставить("ПолучательРФ_КПП", СтруктураРеквизитовФормы.ПолучательРФ_КПП);
		ПараметрыФормы.Вставить("ПолучательРФ_ОГРН", СтруктураРеквизитовФормы.ПолучательРФ_ОГРН);
		ПараметрыФормы.Вставить("ПолучательСтранаКод", СтруктураРеквизитовФормы.ПолучательСтранаКод);
		ПараметрыФормы.Вставить("ПолучательСтранаНаименование", СтруктураРеквизитовФормы.ПолучательСтранаНаименование);
		ПараметрыФормы.Вставить("ПолучательУлицаНомерДома", СтруктураРеквизитовФормы.ПолучательУлицаНомерДома);
		
		ВводРеквизитов = ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаВводаГрафа2", ПараметрыФормы, ЭтаФорма);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ВводРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ВводРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВводРеквизитов.Открыть();
	
		Возврат;
		 
	ИначеЕсли СтрНайти(Область.Имя, "ОтвЛицоФинУр") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтвЛицоФинУр", СтруктураРеквизитовФормы.ОтвЛицоФинУр);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрИндекс", СтруктураРеквизитовФормы.ОтвЛицоФинУрИндекс);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрНаименование", СтруктураРеквизитовФормы.ОтвЛицоФинУрНаименование);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрНаселенныйПункт", СтруктураРеквизитовФормы.ОтвЛицоФинУрНаселенныйПункт);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрОбласть", СтруктураРеквизитовФормы.ОтвЛицоФинУрОбласть);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПасВидДок", СтруктураРеквизитовФормы.ОтвЛицоФинУрПасВидДок);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПасДатаДок", СтруктураРеквизитовФормы.ОтвЛицоФинУрПасДатаДок);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПасНаименование", СтруктураРеквизитовФормы.ОтвЛицоФинУрПасНаименование);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПасНомерДок", СтруктураРеквизитовФормы.ОтвЛицоФинУрПасНомерДок);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПасОрг", СтруктураРеквизитовФормы.ОтвЛицоФинУрПасОрг);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодИндекс", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодИндекс);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодНаименование", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодНаименование);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодНаселенныйПункт);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодОбласть", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодОбласть);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодРФ_ИНН", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодРФ_ИНН);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодРФ_КПП", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодРФ_КПП);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодРФ_ОГРН);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодСтранаКод", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодСтранаКод);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодСтранаНаименование", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодСтранаНаименование);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", СтруктураРеквизитовФормы.ОтвЛицоФинУрПодУлицаНомерДома);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрРФ_ИНН", СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_ИНН);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрРФ_КПП", СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_КПП);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрРФ_ОГРН", СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_ОГРН);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрСтранаКод", СтруктураРеквизитовФормы.ОтвЛицоФинУрСтранаКод);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрСтранаНаименование", СтруктураРеквизитовФормы.ОтвЛицоФинУрСтранаНаименование);
		ПараметрыФормы.Вставить("ОтвЛицоФинУрУлицаНомерДома", СтруктураРеквизитовФормы.ОтвЛицоФинУрУлицаНомерДома);

		ВводРеквизитов = ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаВводаГрафа3", ПараметрыФормы, ЭтаФорма);
		
		КопироватьДанныеФормы(ВидыУдостЛичности, ВводРеквизитов.ВидыУдостЛичности);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ВводРеквизитов.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ВводРеквизитов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВводРеквизитов.Открыть();
	
		Возврат;  
		
	ИначеЕсли СтрНайти(Область.Имя, "ДокСтрока") > 0 И СтрНайти(Область.Имя, "УдалитьСтроку") = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НомСтроки = Число(Сред(СтрЗаменить(Область.Имя, "ДокСтрока", ""), 2));
				
		ТаблицаБлока = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы_1, ТаблицаБлока);
		ТаблицаБлока = ЭтаФорма[ТаблицаБлока];
		Если ТаблицаБлока <> Неопределено Тогда
			СтрокаДанных = ТаблицаБлока.Получить(НомСтроки - 1);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ДокВыбор", СтрокаДанных.ДокВыбор);
			ПараметрыФормы.Вставить("ДокДата", СтрокаДанных.ДокДата);
			ПараметрыФормы.Вставить("ДокНомер", СтрокаДанных.ДокНомер);
			ВводДокумента = ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС.Форма.ФормаВводаДокумента", ПараметрыФормы);
			
			ЗаполнитьЗначенияСвойств(ВводДокумента, СтрокаДанных);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент, СтрокаДанных", Область, Элемент, СтрокаДанных);
			ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборДокСтрокаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ВводДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ВводДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ВводДокумента.Открыть();
		
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	Если ИмяГруппы = мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы_1] Тогда 
		ТестовоеИмя = "ДокСтрока_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
	ИначеЕсли ИмяГруппы = мСтруктураМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы_2] Тогда 
		ТестовоеИмя = "КодТовара_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
	Иначе
		Возврат;
	КонецЕсли;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
	Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
		ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтрокуНаСервере();
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	    
	// Выполним проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
								|en = 'Не выбрана удаляемая строка многострочного раздела.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?';
																				|en = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФТС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы_1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы_2");
	СтруктураРеквизитовФормы.Вставить("мСоответствияМнгЧ");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ИменаПоказателейТолькоСтруктура");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("НапрПеремещения", "");
	СтруктураРеквизитовФормы.Вставить("ОргИндекс", "");
	СтруктураРеквизитовФормы.Вставить("ОргНаселенныйПункт", "");
	СтруктураРеквизитовФормы.Вставить("ОргОбласть", "");
	СтруктураРеквизитовФормы.Вставить("ОргСтранаКод", "");
	СтруктураРеквизитовФормы.Вставить("ОргСтранаНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОргУлицаНомерДома", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУр", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрИндекс", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрНаселенныйПункт", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрОбласть", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПасВидДок", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПасНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПасНомерДок", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПасОрг", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодИндекс", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодОбласть", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрРФ_КПП", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрСтранаКод", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрСтранаНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтвЛицоФинУрУлицаНомерДома", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительИндекс", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительНаселенныйПункт", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительОбласть", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРБ_УНП", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРК_БИН", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРК_ИИН", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРФ_ИНН", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРФ_КПП", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительРФ_ОГРН", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительСтранаКод", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительСтранаНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ОтправительУлицаНомерДома", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательИндекс", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательНаселенныйПункт", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательОбласть", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРБ_УНП", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРК_БИН", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРК_ИИН", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРФ_ИНН", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРФ_КПП", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательРФ_ОГРН", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательСтранаКод", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательСтранаНаименование", "");
	СтруктураРеквизитовФормы.Вставить("ПолучательУлицаНомерДома", "");
	СтруктураРеквизитовФормы.Вставить("СтранаНазначения", "");
	СтруктураРеквизитовФормы.Вставить("СтранаОтправления", "");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
		
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ТекТабличноеПоле = ТабличныйДокумент;
		
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
			
			мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
			
			СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
			
			Для НСтр = 1 По  ИсходноеКоличествоСтрокГруппы Цикл

				СтрокаГруппы = СтруктураГруппы.Добавить();

				НомерСтроки = Формат(НСтр, "ЧГ=0");
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Найти(ИмяКолонки) <> Неопределено Тогда
						Продолжить;
					КонецЕсли; 
			
					Если СтрокаГруппы.Свойство(ИмяКолонки) Тогда
						
						КодПоказателя = ИмяКолонки + "_" + НомерСтроки;
						ОбластьЯчейки = ТекТабличноеПоле.Области[КодПоказателя];
						
						Если ОбластьЯчейки.СодержитЗначение Тогда
							ЗначениеЯчейки = ОбластьЯчейки.Значение;
						Иначе
							ЗначениеЯчейки = ОбластьЯчейки.Текст;
						КонецЕсли;
						
						СтрокаГруппы[ИмяКолонки] = ЗначениеЯчейки;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;

	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураДанныхФормы = Неопределено Тогда
		СформироватьСтруктуруДанныхФормы();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФТС");
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруДанныхФормы();
	
	СтруктураДанныхФормы = Новый Структура;
	СтруктураДанныхФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураДанныхФормы.Вставить("НапрПеремещения", "");
	СтруктураДанныхФормы.Вставить("ОргИндекс", "");
	СтруктураДанныхФормы.Вставить("ОргНаселенныйПункт", "");
	СтруктураДанныхФормы.Вставить("ОргОбласть", "");
    СтруктураДанныхФормы.Вставить("ОргСтранаКод", "");
	СтруктураДанныхФормы.Вставить("ОргСтранаНаименование", "");
	СтруктураДанныхФормы.Вставить("ОргУлицаНомерДома", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУр", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрИндекс", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрНаименование", "");
    СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрНаселенныйПункт", "");
    СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрОбласть", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПасВидДок", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПасДатаДок", '00010101');
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПасНаименование", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПасНомерДок", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПасОрг", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодИндекс", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодНаименование", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодНаселенныйПункт", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодОбласть", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодРФ_ИНН", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодРФ_КПП", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодРФ_ОГРН", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодСтранаКод", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодСтранаНаименование", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрПодУлицаНомерДома", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрРФ_ИНН", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрРФ_КПП", "");
    СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрРФ_ОГРН", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрСтранаКод", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрСтранаНаименование", "");
	СтруктураДанныхФормы.Вставить("ОтвЛицоФинУрУлицаНомерДома", "");
	СтруктураДанныхФормы.Вставить("ОтправительИндекс", "");
	СтруктураДанныхФормы.Вставить("ОтправительНаименование", "");
    СтруктураДанныхФормы.Вставить("ОтправительНаселенныйПункт", "");
    СтруктураДанныхФормы.Вставить("ОтправительОбласть", "");
	СтруктураДанныхФормы.Вставить("ОтправительРБ_УНП", "");
	СтруктураДанныхФормы.Вставить("ОтправительРК_БИН", "");
	СтруктураДанныхФормы.Вставить("ОтправительРК_ИИН", "");
	СтруктураДанныхФормы.Вставить("ОтправительРФ_ИНН", "");
	СтруктураДанныхФормы.Вставить("ОтправительРФ_КПП", "");
	СтруктураДанныхФормы.Вставить("ОтправительРФ_ОГРН", "");
	СтруктураДанныхФормы.Вставить("ОтправительСтранаКод", "");
	СтруктураДанныхФормы.Вставить("ОтправительСтранаНаименование", "");
	СтруктураДанныхФормы.Вставить("ОтправительУлицаНомерДома", "");
	СтруктураДанныхФормы.Вставить("ПолучательИндекс", "");
	СтруктураДанныхФормы.Вставить("ПолучательНаименование", "");
	СтруктураДанныхФормы.Вставить("ПолучательНаселенныйПункт", "");
	СтруктураДанныхФормы.Вставить("ПолучательОбласть", "");
	СтруктураДанныхФормы.Вставить("ПолучательРБ_УНП", "");
    СтруктураДанныхФормы.Вставить("ПолучательРК_БИН", "");
	СтруктураДанныхФормы.Вставить("ПолучательРК_ИИН", "");
	СтруктураДанныхФормы.Вставить("ПолучательРФ_ИНН", "");
	СтруктураДанныхФормы.Вставить("ПолучательРФ_КПП", "");
	СтруктураДанныхФормы.Вставить("ПолучательРФ_ОГРН", "");
	СтруктураДанныхФормы.Вставить("ПолучательСтранаКод", "");
    СтруктураДанныхФормы.Вставить("ПолучательСтранаНаименование", "");
    СтруктураДанныхФормы.Вставить("ПолучательУлицаНомерДома", "");
	СтруктураДанныхФормы.Вставить("СтранаНазначения", "");
	СтруктураДанныхФормы.Вставить("СтранаОтправления", "");
	
КонецПроцедуры

&НаСервере
 Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
   	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы_1;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы_2;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 6;
							  	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
                                            
	ПериодОтчетаФормат = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=ддММгггг");
	ТабличныйДокумент.Области.ОтчетныйМесяцМ1.Значение = Сред(ПериодОтчетаФормат, 3, 1);
	ТабличныйДокумент.Области.ОтчетныйМесяцМ2.Значение = Сред(ПериодОтчетаФормат, 4, 1);
	ТабличныйДокумент.Области.ОтчетныйМесяцГ1.Значение = Сред(ПериодОтчетаФормат, 5, 1);
	ТабличныйДокумент.Области.ОтчетныйМесяцГ2.Значение = Сред(ПериодОтчетаФормат, 6, 1);
	ТабличныйДокумент.Области.ОтчетныйМесяцГ3.Значение = Сред(ПериодОтчетаФормат, 7, 1);
	ТабличныйДокумент.Области.ОтчетныйМесяцГ4.Значение = Сред(ПериодОтчетаФормат, 8, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "КППЮЛ"); // КПП
		Сведения.Добавить("", "ОГРН");  // ОГРН
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");

	КонецЕсли;

	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ = "";
		КППЮЛ = "";
		ОГРН  = "";
		АдрПочт    = "";
		НаимЮЛПол  = "";

		ОргСведения.Свойство("ИННЮЛ",           ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",           ИННЮЛ);
		ОргСведения.Свойство("ОГРН",            ОГРН);
		ОргСведения.Свойство("АдрПочт",         АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",       НаимЮЛПол);
		
		СтруктАдрПочт = АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдрПочт);
		
		//заполняет реквизиты формы
		Форма.СтруктураРеквизитовФормы.ОргИндекс =  СтруктАдрПочт.Индекс;
		Форма.СтруктураРеквизитовФормы.ОргСтранаКод = СтруктАдрПочт.СтранаКод;
		Форма.СтруктураРеквизитовФормы.ОргСтранаНаименование = СтруктАдрПочт.СтранаНаименование;
		Форма.СтруктураРеквизитовФормы.ОргОбласть = СтруктАдрПочт.Область;
		Форма.СтруктураРеквизитовФормы.ОргНаселенныйПункт = СтруктАдрПочт.НаселенныйПункт;
		Форма.СтруктураРеквизитовФормы.ОргУлицаНомерДома = СтруктАдрПочт.УлицаНомерДома; 
		
	КонецЕсли;
	
	ФИОИсп   = "";
	ДолжнИсп = "";
	ТелИсп   = "";
	АдресЭлПочтыИсп = "";
	
	ОргСведения.Свойство("ФИОИсп",          ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",        ДолжнИсп);
	ОргСведения.Свойство("ТелИсп", 		    ТелИсп);
	ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);

	мФормаОтчета = Форма.ТабличныйДокумент;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда

		мФормаОтчета.Области.ОргИсполнитель.Значение  = ФИОИсп;
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		мФормаОтчета.Области.ОргТелефонИсп.Значение   = ТелИсп;
        мФормаОтчета.Области.ОргАдресЭлПочты.Значение = АдресЭлПочтыИсп;

		Возврат;
		
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (НЕ ЗначениеЗаполнено(мФормаОтчета.Области.ОргПочтовыйАдрес.Значение)) Тогда

		Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			мФормаОтчета.Области.ОргПочтовыйАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			
			мФормаОтчета.Области.ОргПочтовыйАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(мФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(мФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(мФормаОтчета.Области.ОргТелефонИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(мФормаОтчета.Области.ОргАдресЭлПочты.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		мФормаОтчета.Области.ОргАдресЭлПочты.Значение = АдресЭлПочтыИсп;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(мФормаОтчета.Области.НаправлениеПеремещения.Значение) Тогда
		
		мФормаОтчета.Области.НаправлениеПеремещения.Значение = "ИМ";
		Форма.СтруктураРеквизитовФормы.НапрПеремещения = мФормаОтчета.Области.НаправлениеПеремещения.Значение;
		ИзмНаправлениеПеремещения(Форма);
		ЗаполнитьПоказателиИзРеквизитовФормы(Форма);
	
	КонецЕсли;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем мАдресвФорматеДляВыгрузки;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              					      = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий               						  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
    	
	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	Если СписокСохранения.Свойство("мАдресвФорматеДляВыгрузки", мАдресвФорматеДляВыгрузки) Тогда
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = мАдресвФорматеДляВыгрузки;
	Иначе
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ТабличныйДокумент.Области.ОргПочтовыйАдрес.Значение;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ЭлементСтруктуры.Ключ, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
				
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );

	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Если ИмяТекТабличноеПоле = "ПоказателиФормыОтчета" Тогда
			ЭтаФорма.СтруктураДанныхФормы = Новый Структура;
			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				ЭтаФорма.СтруктураДанныхФормы.Вставить(Показатель.Ключ, Показатель.Значение);
			КонецЦикла;
			мАдресвФорматеДляВыгрузки = ПоказателиТаблПоле.мАдресвФорматеДляВыгрузки;
		Иначе
			ТекТабличноеПоле    = ЭтаФорма["ТабличныйДокумент"];
			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				ИмяПоказателя       = Показатель.Ключ;
				ЗначениеПоказателя  = Показатель.Значение;
				
				// установим значение в таблице
				Если НЕ ТекТабличноеПоле.Области[ИмяПоказателя] = Неопределено Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма.СтруктураРеквизитовФормы, ЭтаФорма.СтруктураДанныхФормы);
	
	ТабличныйДокумент.Области.ОргПочтовыйАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

    Модифицированность   = Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзмНаправлениеПеремещения(Форма)
	
	мФормаОтчета = Форма.ТабличныйДокумент;
	
	Если Форма.СтруктураРеквизитовФормы.НапрПеремещения = "ИМ" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "БЕЛАРУСЬ";
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "РОССИЯ";
		Форма.СтруктураРеквизитовФормы.СтранаОтправления = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаОтправленияКод.Значение);
		Форма.СтруктураРеквизитовФормы.ОтправительСтранаКод = мФормаОтчета.Области.СтранаОтправленияКод.Значение;
		Форма.СтруктураРеквизитовФормы.ОтправительСтранаНаименование = мФормаОтчета.Области.СтранаОтправленияНаименование.Значение;
		Форма.СтруктураРеквизитовФормы.СтранаНазначения  = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаНазначенияКод.Значение);
		Форма.СтруктураРеквизитовФормы.ПолучательСтранаКод = мФормаОтчета.Области.СтранаНазначенияКод.Значение;
		Форма.СтруктураРеквизитовФормы.ПолучательСтранаНаименование = мФормаОтчета.Области.СтранаНазначенияНаименование.Значение;
	ИначеЕсли Форма.СтруктураРеквизитовФормы.НапрПеремещения = "ЭК" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "РОССИЯ";
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "БЕЛАРУСЬ";
		Форма.СтруктураРеквизитовФормы.СтранаОтправления = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаОтправленияКод.Значение);
		Форма.СтруктураРеквизитовФормы.ОтправительСтранаКод = мФормаОтчета.Области.СтранаОтправленияКод.Значение;
		Форма.СтруктураРеквизитовФормы.ОтправительСтранаНаименование = мФормаОтчета.Области.СтранаОтправленияНаименование.Значение;
		Форма.СтруктураРеквизитовФормы.СтранаНазначения  = СтранаКраткоПоКоду(мФормаОтчета.Области.СтранаНазначенияКод.Значение);
		Форма.СтруктураРеквизитовФормы.ПолучательСтранаКод = мФормаОтчета.Области.СтранаНазначенияКод.Значение;
		Форма.СтруктураРеквизитовФормы.ПолучательСтранаНаименование = мФормаОтчета.Области.СтранаНазначенияНаименование.Значение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтранаКраткоПоКоду(КодСтраныИзКлассификатора)
	
	СоответствиеСокращений = Новый Соответствие;
	СоответствиеСокращений.Вставить("RU", "РФ");
	СоответствиеСокращений.Вставить("BY", "РБ");
	СоответствиеСокращений.Вставить("KZ", "РК");
	СтранаКратко = СоответствиеСокращений.Получить(СокрЛП(КодСтраныИзКлассификатора));
	Если СтранаКратко = Неопределено Тогда
		СтранаКратко = СоответствиеСокращений[0];
	КонецЕсли;
	Возврат СтранаКратко;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоказателиИзРеквизитовФормыНаКлиенте() Экспорт

	ЗаполнитьПоказателиИзРеквизитовФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиИзРеквизитовФормыНаСервере() Экспорт

	ЗаполнитьПоказателиИзРеквизитовФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказателиИзРеквизитовФормы(Форма)

	мФормаОтчета = Форма.ТабличныйДокумент;
		
	//Заполнение показателей из реквизитов формы
	мФормаОтчета.Области.НаправлениеПеремещения.Значение = Форма.СтруктураРеквизитовФормы.НапрПеремещения;
	
	Если Форма.СтруктураРеквизитовФормы.СтранаОтправления = "РФ" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "РОССИЯ";
		мФормаОтчета.Области.ОтправительКоды.Значение = Форма.СтруктураРеквизитовФормы.ОтправительРФ_ИНН + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительРФ_КПП), "", " / " + Форма.СтруктураРеквизитовФормы.ОтправительРФ_КПП);
			
	ИначеЕсли Форма.СтруктураРеквизитовФормы.СтранаОтправления = "РБ" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "БЕЛАРУСЬ";
		мФормаОтчета.Области.ОтправительКоды.Значение = Форма.СтруктураРеквизитовФормы.ОтправительРБ_УНП;
			
	ИначеЕсли Форма.СтруктураРеквизитовФормы.СтранаОтправления = "РК" Тогда
		мФормаОтчета.Области.СтранаОтправленияКод.Значение = "KZ";
		мФормаОтчета.Области.СтранаОтправленияНаименование.Значение = "КАЗАХСТАН";
		мФормаОтчета.Области.ОтправительКоды.Значение = Форма.СтруктураРеквизитовФормы.ОтправительРК_БИН + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительРК_ИИН), "", " / " + Форма.СтруктураРеквизитовФормы.ОтправительРК_ИИН);
			
	КонецЕсли; 
		
	ОтправительРеквизиты = СокрЛП(СтрЗаменить(Форма.СтруктураРеквизитовФормы.ОтправительНаименование, Символы.ПС, " "));
	ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительИндекс), "", ", " + Форма.СтруктураРеквизитовФормы.ОтправительИндекс);
	ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительСтранаНаименование), "", ", " + Форма.СтруктураРеквизитовФормы.ОтправительСтранаНаименование);
	ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительОбласть), "", ", " + Форма.СтруктураРеквизитовФормы.ОтправительОбласть);
	ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительНаселенныйПункт), "", ", " + Форма.СтруктураРеквизитовФормы.ОтправительНаселенныйПункт);
	ОтправительРеквизиты = ОтправительРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтправительУлицаНомерДома), "", ", " + Форма.СтруктураРеквизитовФормы.ОтправительУлицаНомерДома);
	мФормаОтчета.Области.ОтправительРеквизиты.Значение = ОтправительРеквизиты;
        		
	Если Форма.СтруктураРеквизитовФормы.СтранаНазначения = "РФ" Тогда
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "RU";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "РОССИЯ";
		мФормаОтчета.Области.ПолучательКоды.Значение = Форма.СтруктураРеквизитовФормы.ПолучательРФ_ИНН + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательРФ_КПП), "", " / " + Форма.СтруктураРеквизитовФормы.ПолучательРФ_КПП);
			
	ИначеЕсли Форма.СтруктураРеквизитовФормы.СтранаНазначения = "РБ" Тогда
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "BY";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "БЕЛАРУСЬ";
		мФормаОтчета.Области.ПолучательКоды.Значение = Форма.СтруктураРеквизитовФормы.ПолучательРБ_УНП;			
			
	ИначеЕсли Форма.СтруктураРеквизитовФормы.СтранаНазначения = "РК" Тогда
		мФормаОтчета.Области.СтранаНазначенияКод.Значение = "KZ";
		мФормаОтчета.Области.СтранаНазначенияНаименование.Значение = "КАЗАХСТАН";
		мФормаОтчета.Области.ПолучательКоды.Значение = Форма.СтруктураРеквизитовФормы.ПолучательРК_БИН + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательРК_ИИН), "", " / " + Форма.СтруктураРеквизитовФормы.ПолучательРК_ИИН);
			
	КонецЕсли;  
		
	ПолучательРеквизиты = СокрЛП(СтрЗаменить(Форма.СтруктураРеквизитовФормы.ПолучательНаименование, Символы.ПС, " "));
	ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательИндекс), "", ", " + Форма.СтруктураРеквизитовФормы.ПолучательИндекс);
	ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательСтранаНаименование), "", ", " + Форма.СтруктураРеквизитовФормы.ПолучательСтранаНаименование);
	ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательОбласть), "", ", " + Форма.СтруктураРеквизитовФормы.ПолучательОбласть);
	ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательНаселенныйПункт), "", ", " + Форма.СтруктураРеквизитовФормы.ПолучательНаселенныйПункт);
	ПолучательРеквизиты = ПолучательРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ПолучательУлицаНомерДома), "", ", " + Форма.СтруктураРеквизитовФормы.ПолучательУлицаНомерДома);
	мФормаОтчета.Области.ПолучательРеквизиты.Значение = ПолучательРеквизиты;
		
	ОтвЛицоФинУрКоды = Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_ИНН;
	Если Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУр = "ОРГ" ИЛИ Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУр = "ПОД" Тогда
		ОтвЛицоФинУрКоды = ОтвЛицоФинУрКоды + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_КПП), "", " / " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрРФ_КПП);
	КонецЕсли;
	мФормаОтчета.Области.ОтвЛицоФинУрКоды.Значение = ОтвЛицоФинУрКоды;
		
	ОтвЛицоФинУрРеквизиты = СокрЛП(СтрЗаменить(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрНаименование, Символы.ПС, " "));
	ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрИндекс), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрИндекс);
	ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрСтранаНаименование), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрСтранаНаименование);
	ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрОбласть), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрОбласть);
	ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрНаселенныйПункт), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрНаселенныйПункт);
	ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрУлицаНомерДома), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрУлицаНомерДома);
		
	Если Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУр = "ПОД" Тогда
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(ОтвЛицоФинУрРеквизиты), "", ", ");
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + СокрЛП(СтрЗаменить(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодНаименование, Символы.ПС, " "));
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодИндекс), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодИндекс);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодСтранаНаименование), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодСтранаНаименование);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодОбласть), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодОбласть);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодНаселенныйПункт), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодНаселенныйПункт);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодУлицаНомерДома), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПодУлицаНомерДома);
			
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУр = "ФЛ_" Тогда	
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ПустаяСтрока(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПасНомерДок), "", ", " + Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПасНомерДок);
		ОтвЛицоФинУрРеквизиты = ОтвЛицоФинУрРеквизиты + ?(ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПасДатаДок), ", " + Формат(Форма.СтруктураРеквизитовФормы.ОтвЛицоФинУрПасДатаДок, "ДФ=yyyy-MM-dd"), "");
		
	КонецЕсли; 
				
	мФормаОтчета.Области.ОтвЛицоФинУрРеквизиты.Значение = ОтвЛицоФинУрРеквизиты;
		
	мФормаОтчета.Области.КодВалютыЦеныТовара.Значение = мФормаОтчета.Области.ВалютаТовараКод_1.Значение;
		
	ТаблицаБлока = Неопределено;
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы_1, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	Если ТаблицаБлока <> Неопределено Тогда
		Для НомСтроки = 1 По ТаблицаБлока.Количество() Цикл
			СтрокаДанных = ТаблицаБлока.Получить(НомСтроки - 1);
			ИмяПоказателя = "ДокСтрока" + "_" + Формат(НомСтроки, "ЧГ=");
			ДокСтрока = СокрЛП(СтрокаДанных.ДокВыбор) + ?(ПустаяСтрока(СтрокаДанных.ДокНомер), "", " № " + СокрЛП(СтрокаДанных.ДокНомер));
			ДокСтрока = ДокСтрока + ?(ЗначениеЗаполнено(СтрокаДанных.ДокДата), " от " + Формат(СтрокаДанных.ДокДата,"ДФ=yyyy-MM-dd" ), "");
		    мФормаОтчета.Области[ИмяПоказателя].Значение = ДокСтрока;
		КонецЦикла; 
	КонецЕсли;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	мФормаОтчета = Форма.ТабличныйДокумент;
	
	Если ЗначениеЗаполнено(Форма.ДатаПодписи) Тогда 
		ДатаПодписиФормат = Формат(Форма.ДатаПодписи, "ДФ=ддММгггг");
	Иначе
		ДатаПодписиФормат = "        ";
	КонецЕсли;
	мФормаОтчета.Области.ДатаЗаполненияД1.Значение = Сред(ДатаПодписиФормат, 1, 1);
	мФормаОтчета.Области.ДатаЗаполненияД2.Значение = Сред(ДатаПодписиФормат, 2, 1);
	мФормаОтчета.Области.ДатаЗаполненияМ1.Значение = Сред(ДатаПодписиФормат, 3, 1);
	мФормаОтчета.Области.ДатаЗаполненияМ2.Значение = Сред(ДатаПодписиФормат, 4, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ1.Значение = Сред(ДатаПодписиФормат, 5, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ2.Значение = Сред(ДатаПодписиФормат, 6, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ3.Значение = Сред(ДатаПодписиФормат, 7, 1);
	мФормаОтчета.Области.ДатаЗаполненияГ4.Значение = Сред(ДатаПодписиФормат, 8, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
    	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДатыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаПодписи = Ответ;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
	Модифицированность = Истина;
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(СтруктураРезультатаВвода, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СтруктураРезультатаВвода <> Неопределено  Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма.СтруктураРеквизитовФормы, СтруктураРезультатаВвода);
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборДокСтрокаЗавершение(СтруктураРезультатаВвода, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	СтрокаДанных = ДополнительныеПараметры.СтрокаДанных;
	
	Если СтруктураРезультатаВвода <> Неопределено  Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтруктураРезультатаВвода);
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,"
								  + РоссийскийАдрес_["Индекс"] + ","
								  + РоссийскийАдрес_["Регион"] + ","
								  + РоссийскийАдрес_["Район"] + ","
								  + РоссийскийАдрес_["Город"] + ","
								  + РоссийскийАдрес_["НаселенныйПункт"] + ","
								  + РоссийскийАдрес_["Улица"] + ","
								  + РоссийскийАдрес_["Дом"] + ","
								  + РоссийскийАдрес_["Корпус"] + ","
								  + РоссийскийАдрес_["Квартира"];
								  
		Если СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "643,,,,,,,,," Тогда
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

		СтруктураАдреса = АдресВФормате9ЗапятыхВСтруктуруПорталаТСНаКлиенте(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
		
		СтруктураРеквизитовФормы.ОргИндекс =  СтруктураАдреса.Индекс;
		СтруктураРеквизитовФормы.ОргСтранаКод = СтруктураАдреса.СтранаКод;
		СтруктураРеквизитовФормы.ОргСтранаНаименование = СтруктураАдреса.СтранаНаименование;
		СтруктураРеквизитовФормы.ОргОбласть = СтруктураАдреса.Область;
		СтруктураРеквизитовФормы.ОргНаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
		СтруктураРеквизитовФормы.ОргУлицаНомерДома = СтруктураАдреса.УлицаНомерДома; 
		
		ТабличныйДокумент.Области.ОргПочтовыйАдрес.Значение = СтруктураАдреса.Представление;

		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя) Экспорт

	ПозРазд = 0;
	ИмяПоказателяВСтруктуре = ИмяПоказателя;
	ИмяПоказателяДлина = СтрДлина(ИмяПоказателя);
	Для Поз = 1 По ИмяПоказателяДлина  Цикл
		Сим = Сред(ИмяПоказателя, ИмяПоказателяДлина - Поз + 1, 1);
		Если Сим = "_" Тогда
			 ПозРазд = ИмяПоказателяДлина - Поз + 1;
		     Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПозРазд > 0 Тогда
		ЧастьПослеРазделителя = Сред(ИмяПоказателя, ПозРазд + 1);
		
		ЭтоЧисло = Истина;
		Попытка
			ЧастьПослеРазделителяЧисло = Число(ЧастьПослеРазделителя);
		Исключение
			ЭтоЧисло = Ложь;
		КонецПопытки;
		
		Если ЭтоЧисло Тогда
			ИмяПоказателяВСтруктуре = Лев(ИмяПоказателя, ПозРазд - 1);
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураГруппы = Неопределено;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство("ИмяПоказателяВСтруктуре") <> Неопределено Тогда
			Возврат СтруктураГруппы.Количество();
		КонецЕсли;
	КонецЦикла;

	Возврат 0;
	
КонецФункции

&НаКлиенте
Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТСНаКлиенте(АдресВФормате9Запятых) Экспорт
	
	Возврат АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых);
		
КонецФункции

&НаСервере
Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТСНаСервере(АдресВФормате9Запятых) Экспорт
	
	Возврат АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресВФормате9ЗапятыхВСтруктуруПорталаТС(АдресВФормате9Запятых)
	 
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("СтранаКод");
	СтруктураАдреса.Вставить("СтранаНаименование");
	СтруктураАдреса.Вставить("Область");
	СтруктураАдреса.Вставить("НаселенныйПункт");
	СтруктураАдреса.Вставить("УлицаНомерДома");
	СтруктураАдреса.Вставить("Представление", АдресВФормате9Запятых); 
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = СтрНайти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	ТекПредставление = "";
	
	ТипДома     = "дом";
    Если КоличествоЗапятых > 9 Тогда
		ТипДома = ?(ПустаяСтрока(СоставляющиеАдреса[10]), ТипДома, СоставляющиеАдреса[10]);
	КонецЕсли;	
	ТипКорпуса  = "корпус";
    Если КоличествоЗапятых > 10 Тогда
		ТипКорпуса = ?(ПустаяСтрока(СоставляющиеАдреса[11]), ТипКорпуса, СоставляющиеАдреса[11]);
	КонецЕсли;	
	ТипКвартиры = "кв.";
    Если КоличествоЗапятых > 11 Тогда
		ТипКвартиры = ?(ПустаяСтрока(СоставляющиеАдреса[12]), ТипКвартиры, СоставляющиеАдреса[12]);
	КонецЕсли;	

	Регион = "";
	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Регион) Тогда
			Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(Регион);
		КонецЕсли;
	КонецЕсли;
	
	АдрКодСтраны = СоставляющиеАдреса[0];
	АдрИндекс = СоставляющиеАдреса[1];
	АдрНазваниеРегиона = Регион;
	АдрРайон = СоставляющиеАдреса[3];
	АдрГород = СоставляющиеАдреса[4];
	АдрНаселенныйПункт = СоставляющиеАдреса[5];
	АдрУлица = СоставляющиеАдреса[6];
	АдрДом = СоставляющиеАдреса[7];
	АдрКорпус = СоставляющиеАдреса[8];
	АдрКвартира = СоставляющиеАдреса[9];
	АдрПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдресВФормате9Запятых);
	
	СтруктураАдреса.Вставить("Индекс", АдрИндекс);
	СтруктураАдреса.Вставить("СтранаКод", ?(АдрКодСтраны = "643", "RU", ""));
	СтруктураАдреса.Вставить("СтранаНаименование", ?(АдрКодСтраны = "643", "РОССИЯ", ""));
	СтруктураАдреса.Вставить("Область", АдрНазваниеРегиона + ?(ПустаяСтрока(АдрРайон), "", ", " + АдрРайон));
	СтруктураАдреса.Вставить("НаселенныйПункт", АдрГород + ?(ПустаяСтрока(АдрНаселенныйПункт), "", ", " + АдрНаселенныйПункт));
	СтруктураАдреса.Вставить("УлицаНомерДома", АдрУлица + ", " + ТипДома + " № " + АдрДом + ?(ПустаяСтрока(АдрКорпус), "", ", " + ТипКорпуса + " " + АдрКорпус)
							+ ?(ПустаяСтрока(АдрКвартира), "", ", " + ТипКвартиры + " " + АдрКвартира));
    СтруктураАдреса.Вставить("Представление", АдрПредставлениеАдреса);
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаСервере
Функция СуществуетСправочник(ИмяСправочника) Экспорт

	Если Метаданные.Справочники.Найти(ИмяСправочника) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьРеквизитСправочника(ИмяСправочника, ИмяРеквизитаСправочника) Экспорт

	Если НЕ СуществуетСправочник(ИмяСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;		
		
	Если Метаданные.Справочники[ИмяСправочника].Реквизиты.Найти(ИмяРеквизитаСправочника) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Функция ПолучитьСсылкуИзРезультатаЗапроса(ТекстЗапроса, ЗначениеОтбора = "")
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("ЗначениеОтбора", ЗначениеОтбора);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Получить(0);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСведенияИзСправочника(ЗначениеЭлемента, ИмяСправочника, ВыбранноеЗначение = Неопределено, ВыполняемоеОповещение = Неопределено) Экспорт
	
	ИмяРеквизита = "НаименованиеПолное";
	Если ИмяСправочника = "ФизическиеЛица" Тогда
		ИмяРеквизита = "Наименование";
	КонецЕсли;
	
	ЗначениеОтбора = СокрП(ЗначениеЭлемента);
	ДлЗначения = ?(СтрДлина(ЗначениеОтбора) = 0, 1, СтрДлина(ЗначениеОтбора));
	ДлЗначенияСтр = Формат(ДлЗначения, "ЧН=; ЧГ=");
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	%Справочник%.Ссылка,
	|	%Справочник%.%ИмяРеквизита%
	|ИЗ
	|	Справочник.%Справочник% КАК %Справочник%
	|ГДЕ
	|	ВЫРАЗИТЬ(%Справочник%.%ИмяРеквизита% КАК Строка(" + ДлЗначенияСтр + ")) = &ЗначениеОтбора";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Справочник%", ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяРеквизита%", ИмяРеквизита);
	
	НачЗначениеВыбора = ПолучитьСсылкуИзРезультатаЗапроса(ТекстЗапроса, ЗначениеОтбора);
	
	СтруктураСведений = Новый Структура("Адрес, Наименование, ИНН, КПП, ОГРН");
	
	ПараметрыФормы = Новый Структура("ТолькоПросмотр", Истина);
	Если ЗначениеЗаполнено(НачЗначениеВыбора) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", НачЗначениеВыбора);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ФормаВыбора = ПолучитьФорму("Справочник." + ИмяСправочника + ".ФормаВыбора", ПараметрыФормы);
	
	Если ИмяСправочника = "Организации" Тогда
		
		ЭлементОтбора = ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение = СтруктураРеквизитовФормы.Организация;
		
		ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
						
	КонецЕсли; 
		
	ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ИмяСправочника, СтруктураСведений", ВыполняемоеОповещение, ИмяСправочника, СтруктураСведений); 
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСведенияИзСправочникаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСведенияИзСправочникаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
    ИмяСправочника = ДополнительныеПараметры.ИмяСправочника;
    СтруктураСведений = ДополнительныеПараметры.СтруктураСведений;
    
    Если ВыбранноеЗначение = Неопределено Тогда
        СтруктураВозврата = Новый Структура("ВыбранноеЗначение, СтруктураСведений", ВыбранноеЗначение, СтруктураСведений);
        ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураВозврата);
        Возврат;
    КонецЕсли;
    
    Если ИмяСправочника = "Организации" Тогда
        
        Сведения = Новый СписокЗначений;
        Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование ЮЛ
        Сведения.Добавить("", "АдрЮР");     // Юридический адрес
        Сведения.Добавить("", "ИННЮЛ");     // ИНН
        Сведения.Добавить("", "КППЮЛ");     // КПП
        Сведения.Добавить("", "ОГРН");      // ОГРН
        
        ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ВыбранноеЗначение, ДатаПодписи, Сведения);
        
        ЗначениеСвойства = "";
        ОргСведения.Свойство("НаимЮЛПол", ЗначениеСвойства);
        СтруктураСведений.Вставить("Наименование", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("АдрЮР", ЗначениеСвойства);
        СтруктураСведений.Вставить("Адрес", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("ИННЮЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("ИНН", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("КППЮЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("КПП", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("ОГРН",    ЗначениеСвойства);
        СтруктураСведений.Вставить("ОГРН", ЗначениеСвойства);
        
    ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
        
        Сведения = Новый СписокЗначений;
        Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование ЮЛ
        Сведения.Добавить("", "АдрЮР");   // Юридический адрес
        Сведения.Добавить("", "ИННЮЛ");     // ИНН
        Сведения.Добавить("", "КППЮЛ");     // КПП
        
        ОргСведения = ПолучитьСведенияОКонтрагенте(ВыбранноеЗначение, ДатаПодписи, Сведения);
        
        ЗначениеСвойства = "";
        ОргСведения.Свойство("НаимЮЛПол", ЗначениеСвойства);
        СтруктураСведений.Вставить("Наименование", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("АдрЮР", ЗначениеСвойства);
        СтруктураСведений.Вставить("Адрес", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("ИННЮЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("ИНН", ЗначениеСвойства);
        ЗначениеСвойства = "";
        ОргСведения.Свойство("КППЮЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("КПП", ЗначениеСвойства);
        
    ИначеЕсли ИмяСправочника = "ФизическиеЛица" Тогда		
        
        Сведения = Новый СписокЗначений;
        Сведения.Добавить("", "НаименованиеФЛ");
        Сведения.Добавить("", "АдрФЛ");   	   
        Сведения.Добавить("", "ИННФЛ");     	   
        Сведения.Добавить("", "УдостоверенияФЛ"); 
        
        СведенияФЛ = ПолучитьСведенияОФизЛице(ВыбранноеЗначение, ДатаПодписи, Сведения);
        
        ЗначениеСвойства = "";
        СведенияФЛ.Свойство("НаименованиеФЛ", ЗначениеСвойства);
        СтруктураСведений.Вставить("Наименование", ЗначениеСвойства);
        ЗначениеСвойства = "";
        СведенияФЛ.Свойство("АдрФЛ", ЗначениеСвойства);
        СтруктураСведений.Вставить("Адрес", ЗначениеСвойства);
        ЗначениеСвойства = "";
        СведенияФЛ.Свойство("ИННФЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("ИНН", ЗначениеСвойства);
        ЗначениеСвойства = "";
        СведенияФЛ.Свойство("УдостоверенияФЛ",   ЗначениеСвойства);
        СтруктураСведений.Вставить("Удостоверения", ЗначениеСвойства);
        
    КонецЕсли;
    
    СтруктураВозврата = Новый Структура("ВыбранноеЗначение, СтруктураСведений", ВыбранноеЗначение, СтруктураСведений);
    ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, СтруктураВозврата);

КонецПроцедуры

&НаСервере
Функция ПолучитьСведенияОКонтрагенте(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если Организация = Неопределено ИЛИ Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Контрагенты") Тогда
		Возврат ОргСведения;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ПБОЮЛ = (Не РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация));
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);

	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("НаимЮЛПол");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("ИННЮЛ");
		СписокПоказателей.Добавить("КППЮЛ");
		
	ИначеЕсли ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда

		СписокПоказателейСтрока = СписокПоказателей;
		СписокПоказателей = Новый Массив;
		ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить(ИмяПоказателя);
			ВхождениеЗапятой = СтрНайти(СписокПоказателейСтрока, ",");
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить(ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "АдрЮР" Тогда

			Результат = ПолучитьСУчетомКэшаДляКонтрагента(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = СокрЛП(Организация.ИНН);
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			Значение = Организация.КПП;

		КонецЕсли;

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции

&НаСервере
Функция ПолучитьСУчетомКэшаДляКонтрагента(Кэш, Параметр, ФизЛицо = Неопределено)

	Перем ЗначениеПараметра;
	Перем Ставки;

	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Возврат ЗначениеПараметра;
	КонецЕсли;

	Если Параметр = "ЮрАдресОрганизации" Тогда
		
		ЭлементЮрАдрес = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		
		Результат = Неопределено;
		
		Для Каждого Элемент Из Кэш.Организация.КонтактнаяИнформация Цикл
			
			Если Элемент.Вид.Наименование = ЭлементЮрАдрес.Наименование Тогда
				
				Результат = Элемент;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьСведенияОФизЛице (Знач ФизЛицо, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	СведенияФЛ = Новый Структура;
	
	Если ФизЛицо = Неопределено ИЛИ ФизЛицо = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат СведенияФЛ;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);

	ФизЛицо = ФизЛицо.ПолучитьОбъект();
	ФизЛицо.Прочитать();
		
	СведенияФЛ.Вставить("НаименованиеФЛ", ФизЛицо.Наименование);

	Попытка
		Адрес = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
		Результат = ФизЛицо.КонтактнаяИнформация.НайтиСтроки(Адрес);
		Если Результат.Количество() > 0 Тогда
			СведенияФЛ.Вставить("АдрФЛ", РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат[0]));
		КонецЕсли;
		 
		СведенияФЛ.Вставить("ИННФЛ", ФизЛицо.ИНН);
		
		Результат = Новый Структура("ВидДокумента, Серия, Номер, ДатаВыдачи, КемВыдан", "", "", "", "", "");
		Удостоверения = РегистрыСведений.ДокументыФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо.Ссылка));
		Если Удостоверения.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, Удостоверения[0]);
			СведенияФЛ.Вставить("УдостоверенияФЛ", Результат);
		КонецЕсли;
	Исключение КонецПопытки;
	
	Возврат СведенияФЛ;
	
КонецФункции

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
								|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'");

		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы_1 Тогда
		КолонкаТаблицыИмя = "ДокСтрока";
		ВысотаСтроки = 1;
	Иначе
		КолонкаТаблицыИмя = "СлужебныйВерхОбласти";
		ВысотаСтроки = 6;
	КонецЕсли;
	
	ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + КолСтрокСтр;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если СтрНайти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;
    	
	РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		Если Форма.СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Найти(КолонкаТаблицыИмя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
				
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
			
			ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
				Если СтрНайти(ИмяОбластиЯчейки, "ВалютаТовараКод") > 0 Тогда  //назначим валюту товара по первой строке
					ОбластьЯчейки.Значение = ТекТабличноеПоле.Области["ВалютаТовараКод_1"].Значение;
				КонецЕсли;	
       		КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
    
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы_1 Тогда
		КолонкаТаблицыИмя = "ДокСтрока";
	Иначе
		КолонкаТаблицыИмя = "КодТовара";
	КонецЕсли;
	
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + КолСтрокСтр1;
	
	Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы["ТабличныйДокумент"];
    
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
    
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере();
			
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма);
	
	СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];

	Если ИмяГруппы = ЭтаФорма.СтруктураРеквизитовФормы.мИдГруппы_1 Тогда
		КолонкаТаблицыИмя = "ДокСтрока";
		ВысотаСтроки = 1;
	Иначе
		КолонкаТаблицыИмя = "СлужебныйВерхОбласти";
		ВысотаСтроки = 6;
	КонецЕсли;
	
	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
		
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		НомерГрафы = 1;
		
		КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = КолонкаТаблицыИмя + "_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
		
		// Определим область удаляемой строки
		НазначитьИмяОбластиМЧ = Ложь;
		УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти,);
		Если СтрНайти(УдаляемаяОбласть.Имя, "МногострочнаяЧасть") Тогда
			НазначитьИмяОбластиМЧ = Истина;
			ИмяМногострочнойЧасти = УдаляемаяОбласть.Имя;
		КонецЕсли;
			
		РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Если НазначитьИмяОбластиМЧ Тогда
			ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
		КонецЕсли;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
						
						Если СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Найти(КолонкаТаблицыИмя) = Неопределено Тогда 
							
							ИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтр;
							НовоеИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + (НСтр - 1);
							
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
							ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
							
							Если НомерГрафы = 1 Тогда
								ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
								ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
							КонецЕсли;
							
							Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
								// обновляем порядковый номер строки
								
								СтарыйНомер = Число(ТекСтрока[КолонкаТаблицыИмя]);
								НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
								ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								
								// обновляем значение элемента таблицы значений
								ТекСтрока[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
							КонецЕсли;
						КонецЕсли;						
					КонецЕсли;
					
				КонецЦикла;				
			КонецЦикла;
			
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда		
					Если СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Найти(КолонкаТаблицыИмя) = Неопределено Тогда 
						
						НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
						НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
						ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
						ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
						
						Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
							
							ПервыйНомерВГруппе = 1;
							
							// обновляем порядковый номер строки
							НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
							
							СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
				
			КонецЦикла;
		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы_1 Тогда
		КолонкаТаблицыИмя = "ДокСтрока";
	Иначе
		КолонкаТаблицыИмя = "КодТовара";
	КонецЕсли;
				
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
		
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + НомТекущейСтроки;
	
	Элементы["ТабличныйДокумент"].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы["ТабличныйДокумент"];
	ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма) Экспорт
		
	ТекТабличноеПоле = Форма.Элементы["ТабличныйДокумент"];
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы_1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы_2;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ПозРазд = 0;
	ИмяАктивногоРаздела = ИмяТекущейОбласти;
	ИмяТекущейОбластиДлина = СтрДлина(ИмяТекущейОбласти);
	Для Поз = 1 По ИмяТекущейОбластиДлина  Цикл
		Сим = Сред(ИмяТекущейОбласти, ИмяТекущейОбластиДлина - Поз + 1, 1);
		Если Сим = "_" Тогда
			 ПозРазд = ИмяТекущейОбластиДлина - Поз + 1;
		     Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Если ПозРазд > 0 Тогда
		
		ЧастьПослеРазделителя = Сред(ИмяТекущейОбласти, ПозРазд + 1);
		
		ЭтоЧисло = Истина;
		Попытка
			ЧастьПослеРазделителяЧисло = Число(ЧастьПослеРазделителя);
		Исключение
			ЭтоЧисло = Ложь;
		КонецПопытки;
		
		Если ЭтоЧисло Тогда
			ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ПозРазд - 1);
		КонецЕсли; 
		
	КонецЕсли; 

	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы_1 Тогда
		КолонкаТаблицыИмя = "ДокСтрока";
		ВысотаСтроки = 1;
	Иначе
		КолонкаТаблицыИмя = "СлужебныйВерхОбласти";
		ВысотаСтроки = 6;
	КонецЕсли;
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				Если Форма.СтруктураРеквизитовФормы.ИменаПоказателейТолькоСтруктура.Найти(КолонкаТаблицыИмя) = Неопределено Тогда 
					
					НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
						// задаем значение ячейки
						ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
						
					Иначе
						// устанавливаем порядковый номер строки
						ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ИмяОбласти = СтруктураРеквизитовФормы.мСоответствияМнгЧ[ИмяГруппы];

	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяОбласти);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяОбласти].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области[ИмяОбласти].Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + ?(СтрНайти(Область.Имя, "НаименованиеТовара") > 0, 4, 0) + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяОбласти].Верх, , ТекТабличноеПоле.Области[ИмяОбласти].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = ИмяОбласти;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, "ФормаОтчета");
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?';
		|en = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, "ФормаОтчета");
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, "ФормаОтчета");
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ИмяТекТабличногоПоля    = "ТабличныйДокумент";

	ПоказателиТекущегоЛиста = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);
	ПоказателиОтчета.Вставить(ИмяТекТабличногоПоля, ПоказателиТекущегоЛиста);
	
	СобратьДанныеРеквизитовФормы();
	ПоказателиОтчета.Вставить("ПоказателиФормыОтчета", ЭтаФорма.СтруктураДанныхФормы);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
    	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("мАдресвФорматеДляВыгрузки", СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)

	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
		
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция СобратьДанныеРеквизитовФормы()

	ЗаполнитьЗначенияСвойств(ЭтаФорма.СтруктураДанныхФормы, ЭтаФорма.СтруктураРеквизитовФормы);
	
	СтруктураДанныхФормы.Вставить("мАдресвФорматеДляВыгрузки", СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	СтруктураДанныхФормы.Вставить("ОргИндекс", СтруктураРеквизитовФормы.ОргИндекс); 
	СтруктураДанныхФормы.Вставить("ОргСтранаКод", СтруктураРеквизитовФормы.ОргСтранаКод); 
	СтруктураДанныхФормы.Вставить("ОргСтранаНаименование", СтруктураРеквизитовФормы.ОргСтранаНаименование); 
	СтруктураДанныхФормы.Вставить("ОргОбласть", СтруктураРеквизитовФормы.ОргОбласть); 
	СтруктураДанныхФормы.Вставить("ОргНаселенныйПункт", СтруктураРеквизитовФормы.ОргНаселенныйПункт); 
	СтруктураДанныхФормы.Вставить("ОргУлицаНомерДома", СтруктураРеквизитовФормы.ОргУлицаНомерДома);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
			
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	ОбластиСтроки = Новый Структура;
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Вывести(ЭтаФорма.ТабличныйДокумент);
	ТабДок.УдалитьОбласть(ТабДок.Области["ДобавлениеСтроки1"], ТипСмещенияТабличногоДокумента.ПоВертикали);
	ТабДок.УдалитьОбласть(ТабДок.Области["ДобавлениеСтроки2"], ТипСмещенияТабличногоДокумента.ПоВертикали);
	МассивТабДок = Новый Массив;
	МассивТабДок.Добавить(ТабДок.ПолучитьОбласть());
	Попытка
		ПоШиринеСтраницы = ТабДок.ПроверитьПрисоединение(МассивТабДок);
	Исключение
		ПоШиринеСтраницы = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет информации о текущем принтере. Документ выводится без разбивки на страницы.';
								|en = 'Нет информации о текущем принтере. Документ выводится без разбивки на страницы.'");
		Сообщение.Сообщить();
	КонецПопытки;

	Если НЕ ПоШиринеСтраницы Тогда
		ОбластиСтроки.Вставить("Документ", ТабДок.ПолучитьОбласть());
	Иначе
		ТД = Новый ТабличныйДокумент;
		НачНомСтр = 1; НомСтраницы = 1;
		ОбластиСтроки.Вставить("Страница" + НомСтраницы, ТД);
		НазваниеЗаключительнойЧасти = "ОсновнаяЧасть3";
		НомерПоследнейСтрокиМнЧ = ТабДок.Область(НазваниеЗаключительнойЧасти).Верх - 5;
		НомерСтрокиПустойОбласти = ТабДок.Область(НазваниеЗаключительнойЧасти).Верх;
		Для НомСтр = НачНомСтр По ТабДок.ВысотаТаблицы Цикл
		    ОбластьТабДок = ТабДок.Область(НомСтр,, НомСтр,);
			Если ОбластьТабДок.ВместеСоСледующим ИЛИ (НомСтр = НомерПоследнейСтрокиМнЧ) Тогда
				Продолжить;
			КонецЕсли;
			СекцияТабДок = ТабДок.ПолучитьОбласть(НачНомСтр,, НомСтр,);
			НачНомСтр = НомСтр + 1;
			Если НЕ ТД.ПроверитьВывод(СекцияТабДок) Тогда
				ТД = Новый ТабличныйДокумент;
				НомСтраницы = НомСтраницы + 1;
				ОбластиСтроки.Вставить("Страница" + НомСтраницы, ТД);
				ТД.Вывести(ТабДок.ПолучитьОбласть(НомерСтрокиПустойОбласти,, НомерСтрокиПустойОбласти,));
			КонецЕсли;	
			ТД.Вывести(СекцияТабДок);
		КонецЦикла;
		Если ТабДок.КоличествоСтраниц() <> НомСтраницы Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Разделение на страницы прошло некорректно!';
									|en = 'Разделение на страницы прошло некорректно!'");
			Сообщение.Сообщить();
		КонецЕсли;	
	КонецЕсли;	
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = ложь;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ПечатнаяФорма.Вывести(Обл.Значение);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Статистическая форма перемещения товаров");
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл 
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = 0;
		Обл1.Формат = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл
		Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Ложь Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл
		Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Ложь Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда       
        Возврат;        
    Иначе       
        Очистить();      
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт

	ОчиститьТабличноеПоле();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;
	    
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле() Экспорт

	Перем СписокПоказателейНеПодлежащихОчистке;
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдресЭлПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтовыйАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияД1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияД2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияМ1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияМ2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияГ1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияГ2");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияГ3");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаЗаполненияГ4");
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;
		
	//Очищает значения показателей в реквизитах формы
	
	Для Каждого Реквизит Из ЭтаФорма.СтруктураДанныхФормы Цикл
		Если ЭтаФорма.СтруктураРеквизитовФормы[Реквизит.Ключ] <> Неопределено Тогда
			ПустоеЗначениеТипа = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЭтаФорма.СтруктураРеквизитовФормы[Реквизит.Ключ]));
			ЭтаФорма.СтруктураРеквизитовФормы[Реквизит.Ключ] = ПустоеЗначениеТипа;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.ОргИндекс = ""; 
	СтруктураРеквизитовФормы.ОргСтранаКод = ""; 
	СтруктураРеквизитовФормы.ОргСтранаНаименование = ""; 
	СтруктураРеквизитовФормы.ОргОбласть = ""; 
	СтруктураРеквизитовФормы.ОргНаселенныйПункт = ""; 
	СтруктураРеквизитовФормы.ОргУлицаНомерДома = "";
	
	УдалитьМногстрочнуюЧасть(СтруктураРеквизитовФормы.мИдГруппы_1, 1);
	УдалитьМногстрочнуюЧасть(СтруктураРеквизитовФормы.мИдГруппы_2, 6);
	ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	ЗаполнитьПоказателиИзРеквизитовФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМногстрочнуюЧасть(ИмяГруппы, ВысотаСтроки)
	
	Перем ПромТаблицаДопСтрокРаздела;
	
	ИмяГруппыДопСтрок = ИмяГруппы;
	
	СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппыДопСтрок];
	
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.

		// Получим таблицу значений, содержащую данные дополнительных строк.
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		
		ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];

		ИсходноеКоличествоСтрокГруппы = 0;
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);

		ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();

		Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
			// Имеются дополнительные строки.
			// Удаляем их.

			НСтр = ПромТаблицаДопСтрокРаздела.Количество();
			Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл

				ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
				
				НомерГрафы = 1;
			
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		        				
				ИмяПервойЯчейкиУдаляемойСтроки  = КолонкаТаблицыИмя + "_" + НСтр;

				// область первой ячейки удаляемой строки многострочного раздела
				ОбластьЯчейки = ТабличныйДокумент.Области[ИмяПервойЯчейкиУдаляемойСтроки];

				// номера строк удаляемой области
				НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
				НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки - 1;
                				
				РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТабличныйДокумент, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
				
				// удаляем из структуры многострочного раздела соответствующую строку
				ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);

				НСтр = НСтр - 1;

			КонецЦикла;

		КонецЕсли;
		
		ПромТаблицаДопСтрокРаздела.Удалить(0);
		ПромТаблицаДопСтрокРаздела.Добавить();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ТабличныйДокумент";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
КонецПроцедуры 

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	ОбщегоНазначения.СообщитьПользователю("Проверка выгрузки не предусмотрена");
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	ОбщегоНазначенияКлиент.СообщитьПользователю("Выгрузка не предусмотрена");
	Возврат Ложь;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	ОбщегоНазначения.СообщитьПользователю("Выгрузка не предусмотрена");
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтрисоватьЗначкиУдаленияСтрок(Форма)
	
	ТабДок = Форма.ТабличныйДокумент;
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
