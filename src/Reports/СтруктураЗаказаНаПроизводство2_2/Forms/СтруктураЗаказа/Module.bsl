#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиФормы();
	
	Если Параметры.Свойство("Заказы") Тогда
		Если Параметры.Заказы.ВГраница() = 0 Тогда
			Заказы.ЗагрузитьЗначения(Параметры.Заказы);
		Иначе
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Заказы.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
				|ГДЕ
				|	Заказы.Ссылка В(&Заказы)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Заказы.Приоритет.РеквизитДопУпорядочивания,
				|	Заказы.Подразделение.РеквизитДопУпорядочивания,
				|	Заказы.Очередь");
			Запрос.УстановитьПараметр("Заказы", Параметры.Заказы);
			Заказы.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Заказ") Тогда
		Заказы.Добавить(Параметры.Заказ);
	ИначеЕсли Параметры.Свойство("Этап") Тогда
		Заказы.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Этап, "Распоряжение"));
		ОтборЭтап = Параметры.Этап;
		ПоказыватьЭтапы = Истина;
	Иначе
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Отчет не предназначен для интерактивного открытия.';
								|en = 'The report is not designed for interactive opening.'");
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	НавигационнаяСсылка = "";
	
	ГрафикИспользуется = УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства();
	Элементы.ДиаграммаГанта.Видимость = ГрафикИспользуется;
	Элементы.ДиагностикаЭтапа.Видимость = ГрафикИспользуется;
	Элементы.КонтекстноеМенюДиаграммаГанта.Видимость = ГрафикИспользуется;
	Элементы.КонтекстноеМенюДиагностикаЭтапа.Видимость = ГрафикИспользуется;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	ОбновитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперации", 0.1, Истина);
		
	ИначеЕсли Заказы.Количество() <> 0 Тогда
		
		РазвернутьСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДлительнаяОперация = Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборЭтапНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Проведен", Истина);
	
	Если Заказы.Количество() = 1 Тогда
		Отбор.Вставить("Распоряжение", Заказы[0].Значение);
	ИначеЕсли Элементы.СтруктураЗаказов.ТекущиеДанные <> Неопределено
		И Не Элементы.СтруктураЗаказов.ТекущиеДанные.Заказ.Пустая() Тогда
		Отбор.Вставить("Распоряжение", Элементы.СтруктураЗаказов.ТекущиеДанные.Заказ);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ОтборЭтап);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
		"Документ.ЭтапПроизводства2_2.ФормаВыбора",
		ПараметрыФормы,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьВыполненноеПриИзменении(Элемент)
	
	ПриИзмененииНастроекОтображенияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЭтапыПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказыватьЭтапы");
	ПриИзмененииНастроекОтображенияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииОтбораНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭтапПриИзменении(Элемент)
	
	ПриИзмененииОтбораНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЭтапов

&НаКлиенте
Процедура СтруктураЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если СтрокаДерева.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Этап);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Номенклатура);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПродукция() Тогда
		
		ОткрытьСтрокуЗаказаНаПроизводства(СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЗаказ()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПрочиеИзделия() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Заказ);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикатДругогоЗаказа() Тогда
		
		ОткрытьФормуСтруктурыПолуфабрикатаДругогоЗаказа(СтрокаДерева);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиСоздатьЭтапы() Тогда
		
		ОткрытьФормуСозданияЭтапов(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаказовПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Элемент.ДанныеСтроки(Строка);
	
	Если НЕ СтрокаДерева.ПотомкиВыведены Тогда
		ДостроитьДеревоЭтапов(СтрокаДерева);
	КонецЕсли;
	
	Источник = Дерево.НайтиПоИдентификатору(СтрокаДерева.Источник);
	Источник.Развернута = Истина;
	
	Если Не ПоказыватьЭтапы
		И (Источник.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ Источник.ТипСтроки = ТипСтрокиПродукция()) Тогда
		Для каждого ИсточникЭтап Из Источник.ПолучитьЭлементы() Цикл
			ИсточникЭтап.Развернута = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураЗаказовПередСворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Элемент.ДанныеСтроки(Строка);
	
	Если СтрокаДерева <> Неопределено Тогда
		
		Источник = Дерево.НайтиПоИдентификатору(СтрокаДерева.Источник);
		Источник.Развернута = Ложь;
		
		Если Не ПоказыватьЭтапы 
			И (Источник.ТипСтроки = ТипСтрокиПолуфабрикат()
				ИЛИ Источник.ТипСтроки = ТипСтрокиПродукция()) Тогда
			Для каждого ИсточникЭтап Из Источник.ПолучитьЭлементы() Цикл
				ИсточникЭтап.Развернута = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГанта(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Заказ);
		
		ОткрытьФорму(
			"Отчет.ДиаграммаПроизводстваЗаказа.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			ТекущиеДанные.Заказ);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция() Тогда
		
		Если НЕ ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Распоряжение", ТекущиеДанные.Заказ);
			ПараметрыФормы.Вставить("ПартияПроизводства", ТекущиеДанные.ПартияПроизводства);
			
			ОткрытьФорму(
				"Отчет.ДиаграммаПроизводстваПартииЗапуска.ФормаОбъекта",
				ПараметрыФормы,
				ЭтотОбъект,
				ТекущиеДанные.ПартияПроизводства);
			
		Иначе
			
			ПартииПроизводства = ПартииПроизводстваИзделия(ТекущиеДанные.Источник);
			Если ПартииПроизводства.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Формирование отчета для выбранной строки недоступно';
										|en = 'Cannot generate the report for the selected line'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Производство запланировано несколькими партиями, для формирования отчета необходимо выбрать этап производства';
										|en = 'Production is planned in several lots. To generate a report, you must select the production stage'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Этап);
		
		ОткрытьФорму(
			"Отчет.ДиаграммаСмежныхЭтаповПроизводства.ФормаОбъекта",
			ПараметрыФормы,
			ЭтотОбъект,
			ТекущиеДанные.Этап);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Формирование отчета для выбранной строки недоступно';
				|en = 'Cannot generate the report for the selected line'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДиагностикаЭтапа(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПараметрКоманды", ТекущиеДанные.Этап);
		
		ОткрытьФорму(
			"Отчет.ДиагностикаЭтапаПроизводства.Форма",
			ПараметрыФормы,
			ЭтотОбъект,
			ТекущиеДанные.Этап);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для формирования отчета необходимо выбрать этап производства';
				|en = 'To generate a report, select a production stage'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦепочкуЭтапов(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат() Тогда
		
		Если НЕ ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
			
			УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
				ТекущиеДанные.Заказ,
				ТекущиеДанные.ПартияПроизводства,,
				ЭтаФорма);
			
		Иначе
			
			ПартииПроизводства = ПартииПроизводстваИзделия(ТекущиеДанные.Источник);
			Если ПартииПроизводства.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
										|en = 'Cannot perform the selected action for the current line'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Производство запланировано несколькими партиями, для изменения необходимо выбрать этап производства';
										|en = 'Production is planned in several lots. To change, you must select the production stage'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап()
		И НЕ ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			ТекущиеДанные.Заказ,
			ТекущиеДанные.ПартияПроизводства,,
			ЭтаФорма);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
				|en = 'Cannot perform the selected action for the current line'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЦепочкуЭтапов(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЦепочкуЭтаповЗавершение", ЭтаФорма, ТекущиеДанные.Заказ);
	
		Представление = УправлениеПроизводствомВызовСервера.ПредставлениеЗаказа(ТекущиеДанные.Заказ,"");
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить на удаление все этапы заказа %1?';
										|en = 'Mark all stages of order %1 for deletion?'"), Представление);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат() Тогда
		
		ПартияПроизводства = ТекущиеДанные.ПартияПроизводства;
		Если НЕ ЗначениеЗаполнено(ПартияПроизводства) Тогда
			ПартияПроизводства = ПартииПроизводстваИзделия(ТекущиеДанные.Источник);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЦепочкуЭтаповЗавершение",
				ЭтаФорма,
				ПартияПроизводства);
				
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Пометить на удаление цепочки этапов?';
					|en = 'Mark stage chains for deletion?'"),
				РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
					|en = 'Cannot perform the selected action for the current line'"));
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап()
		И Не ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПометитьНаУдалениеЦепочкуЭтаповЗавершение",
			ЭтаФорма,
			ТекущиеДанные.ПартияПроизводства);
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Пометить на удаление цепочки этапов?';
				|en = 'Mark stage chains for deletion?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
				|en = 'Cannot perform the selected action for the current line'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеЦепочкуЭтаповЗавершение(РезультатВопроса, ПараметрыПроцедуры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(
		"ПометитьНаУдалениеЭтапыПроизводства",
		НСтр("ru = 'Пометка на удаление этапов производства';
			|en = 'Production stage deletion mark'"),
		"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
		ПараметрыПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПартию(Команда)
	
	ОчиститьСообщения();
	
	ПартияПроизводства = Неопределено;
	Этап = Неопределено;
	
	ТекущиеДанные = Элементы.СтруктураЗаказов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"СтруктураЗаказов");
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиПродукция()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат() Тогда
		
		Если НЕ ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
			
			ПартияПроизводства = ТекущиеДанные.ПартияПроизводства;
			
		Иначе
			
			ПартииПроизводства = ПартииПроизводстваИзделия(ТекущиеДанные.Источник);
			Если ПартииПроизводства.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
										|en = 'Cannot perform the selected action for the current line'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Производство запланировано несколькими партиями, для изменения необходимо выбрать этап производства';
										|en = 'Production is planned in several lots. To change, you must select the production stage'");
			КонецЕсли;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтап()
		И НЕ ТекущиеДанные.ПартияПроизводства.Пустая() Тогда
		
		ПартияПроизводства = ТекущиеДанные.ПартияПроизводства;
		Этап = ТекущиеДанные.Этап;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для текущей строки невозможно выполнить выбранное действие';
				|en = 'Cannot perform the selected action for the current line'"));
		
	КонецЕсли;
	
	Если ПартияПроизводства <> Неопределено Тогда
		
		Если ЗначениеРеквизитаОбъекта(ПартияПроизводства, "ТипПроцесса") 
				= ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для заказов с типом производственного процесса ""Без спецификаций"" изменение партии недоступно';
					|en = 'For order with ""No BOM"" production process type, lot change is not available'"));
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму(
			"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
			Новый Структура("ПартияПроизводства, Этап", ПартияПроизводства, Этап),
			ЭтаФорма,
			ПартияПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

&НаКлиенте
Процедура ОбновитьДанныеНаКлиенте()
	
	ОбновитьДанныеНаСервере();
	
	Если НачатьОжиданиеДлительнойОперации Тогда
		НачатьОжиданиеДлительнойОперации();
	Иначе
		РазвернутьСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Заказы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнформационнуюПанель();
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ОтменитьДлительнуюОперацию(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", ОтборНоменклатура);
	Отбор.Вставить("Этап", ОтборЭтап);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Заказы", Заказы.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("Дерево", РеквизитФормыВЗначение("Дерево"));
	ПараметрыПроцедуры.Вставить("Отбор", Отбор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Структура заказа на производство""';
			|en = 'Generate the ""Production order structure"" report'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.СтруктураЗаказаНаПроизводство2_2.Сформировать",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		НачатьОжиданиеДлительнойОперации = Истина;
		
	Иначе
		
		ОбработатьРезультатФормированияВФоне(ДлительнаяОперация);
		
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьДлительнуюОперацию(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьДанныеВФонеЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		ОчиститьИПоказатьСтруктуруЗаказов();
	Иначе
		ОбработатьРезультатФормированияВФоне(Результат);
		РазвернутьСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатФормированияВФоне(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ЗначениеВРеквизитФормы(
			ПолучитьИзВременногоХранилища(Результат.АдресРезультата),
			"Дерево");
		
		ВывестиСтруктуру(Истина);
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
	Иначе
		
		ОчиститьИПоказатьСтруктуруЗаказов();
		
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИПоказатьСтруктуруЗаказов()
	
	СтруктураЗаказов.ПолучитьЭлементы().Очистить();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНастроекОтображенияНаКлиенте()
	
	ПриИзмененииНастроекОтображенияНаСервере();
	РазвернутьСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастроекОтображенияНаСервере()
	
	Настройки = Новый Структура;
	Настройки.Вставить("СкрыватьВыполненное", СкрыватьВыполненное);
	Настройки.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючФормы(),
		"",
		Настройки);
	
	Если Не ПоказыватьЭтапы И Не ОтборЭтап.Пустая() Тогда
		ОтборЭтап = Неопределено;
		ПриИзмененииОтбораНаСервере();
	Иначе
		ВывестиСтруктуру(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораНаКлиенте()
	
	ПриИзмененииОтбораНаСервере();
	РазвернутьСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	ДанныеОбновлены = Ложь;
	Если ЕстьОтбор(ЭтаФорма) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", ОтборНоменклатура);
		Отбор.Вставить("Этап", ОтборЭтап);
		
		ДеревоКопия = РеквизитФормыВЗначение("Дерево");
		Отчеты.СтруктураЗаказаНаПроизводство2_2.НастроитьОтборСтрок(ДеревоКопия, Отбор);
		ЗначениеВРеквизитФормы(ДеревоКопия, "Дерево");
		
		ДанныеОбновлены = Истина;
		
	КонецЕсли;
	
	ВывестиСтруктуру(ДанныеОбновлены);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЭтапов

&НаКлиенте
Процедура СформироватьЭтапыПроизводства(Команда)
	
	МассивСсылок = Заказы.ВыгрузитьЗначения();
	Если МассивСсылок.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьПараметрыИСформироватьЭтапы(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяУточнитьЭтап(Команда)
	
	ПараметрыОткрытия = Новый Структура("СтруктураОтборов", Новый Структура("ТребуетсяУточнение", Истина));
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.Диспетчирование", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуТребуетсяСформироватьЭтапыНажатие(Элемент)
	
	СкрытьКомандуТребуетсяСформироватьЭтапы = Истина;
	ОбновитьИнформационнуюПанель();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапы(Распоряжения)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьПараметрыИСформироватьЭтапыЗавершение", 
			ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.ПараметрыФормированияЭтапов", 
		Новый Структура("Распоряжения", Распоряжения),
		ЭтаФорма,
		УникальныйИдентификатор,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыИСформироватьЭтапыЗавершение(Результат, Распоряжения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание(
		"СформироватьЭтапыПроизводства",
		НСтр("ru = 'Формирование этапов производства';
			|en = 'Generate production stages'"),
		"Документы.ЭтапПроизводства2_2.СформироватьЭтапы",
		Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДерева

&НаСервере
Функция ВывестиСтруктуру(ДанныеОбновлены)
	
	ЕстьОтбор = ЕстьОтбор(ЭтаФорма);
	
	ТекСтроки = Неопределено;
	Если Не ЕстьОтбор
		И Не ДанныеОбновлены
		И Элементы.СтруктураЗаказов.ТекущаяСтрока <> Неопределено Тогда
		ТекСтроки = Новый Массив;
		Строка = Дерево.НайтиПоИдентификатору(
			СтруктураЗаказов.НайтиПоИдентификатору(Элементы.СтруктураЗаказов.ТекущаяСтрока).Источник);
		Пока Строка <> Неопределено Цикл
			ТекСтроки.Добавить(Строка.ПолучитьИдентификатор());
			Строка = Строка.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	СтруктураЗаказов.ПолучитьЭлементы().Очистить();
	РазвернутыеСтроки.Очистить();
	ТекущаяСтрока = -1;
	
	Для каждого Заказ Из Дерево.ПолучитьЭлементы() Цикл
		
		Если ЕстьОтбор И Не Заказ.Отбор Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаказ = СтруктураЗаказов.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаказ, Заказ);
		СтрокаЗаказ.Источник = Заказ.ПолучитьИдентификатор();
		// Развернутые строки
		Если Заказ.Развернута Тогда
			РазвернутыеСтроки.Добавить(СтрокаЗаказ.ПолучитьИдентификатор());
		КонецЕсли;
		// Текущая строка
		Если ЕстьОтбор
			ИЛИ (ТекСтроки <> Неопределено И ТекСтроки.Найти(СтрокаЗаказ.Источник) <> Неопределено) Тогда
			ТекущаяСтрока = СтрокаЗаказ.ПолучитьИдентификатор();
		КонецЕсли;
		
		СтрокаЗаказ.ПотомкиВыведены = Истина;
		
		Для каждого Продукция Из Заказ.ПолучитьЭлементы() Цикл
			
			Если ЕстьОтбор И Не Продукция.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			Если Продукция.ТипСтроки = ТипСтрокиПрочиеИзделия()
				И (
					НЕ ПоказыватьЭтапы
					ИЛИ СкрыватьВыполненное И ВсеЭтапыВыполнены(Продукция)
				  ) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПродукция = СтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПродукция, Продукция);
			СтрокаПродукция.Источник = Продукция.ПолучитьИдентификатор();
			// Развернутые строки
			Если Продукция.Развернута Тогда
				РазвернутыеСтроки.Добавить(СтрокаПродукция.ПолучитьИдентификатор());
			КонецЕсли;
			// Текущая строка
			Если ЕстьОтбор
				ИЛИ (ТекСтроки <> Неопределено И ТекСтроки.Найти(СтрокаПродукция.Источник) <> Неопределено) Тогда
				ТекущаяСтрока = СтрокаПродукция.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если Продукция.Развернута Тогда
				ДобавитьВДеревоПотомковНоменклатуры(
					СтрокаПродукция.ПолучитьЭлементы(),
					Продукция.ПолучитьЭлементы(),
					ЭтаФорма,
					ТекСтроки);
				СтрокаПродукция.ПотомкиВыведены = Истина;
			Иначе
				НастроитьВыводПотомковНоменклатуры(Продукция, СтрокаПродукция, ЭтаФорма);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВДеревоПотомковНоменклатуры(Приемник, Источник, Форма, ТекСтроки)
	
	ЕстьОтбор = ЕстьОтбор(Форма);
	
	Для каждого Строка Из Источник Цикл
		
		Если Строка.ТипСтроки = ТипСтрокиСоздатьЭтапы() Тогда
			
			НоваяСтрока = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ПотомкиВыведены = Истина;
			Продолжить;
			
		КонецЕсли;
		
		// Тип строки - этап
		Если Форма.ПоказыватьЭтапы Тогда
			
			Если ПоказыватьЭтап(Строка, Форма) Тогда
				
				НоваяСтрока = Приемник.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Источник = Строка.ПолучитьИдентификатор();
				// Развернутые строки
				Если Строка.Развернута Тогда
					Форма.РазвернутыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
				КонецЕсли;
				// Текущая строка
				Если ЕстьОтбор
					ИЛИ (ТекСтроки <> Неопределено И ТекСтроки.Найти(НоваяСтрока.Источник) <> Неопределено) Тогда
					Форма.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
				Если Строка.Развернута Тогда
					ДобавитьВДеревоПотомковЭтапа(
						НоваяСтрока.ПолучитьЭлементы(),
						Строка,
						Форма,
						ТекСтроки);
					НоваяСтрока.ПотомкиВыведены = Истина;
				Иначе
					Если ИмеютсяПотомкиЭтапа(Строка, Форма) Тогда
						НоваяСтрока.ПотомкиВыведены = Ложь;
						НоваяСтрока.ПолучитьЭлементы().Добавить();
					Иначе
						НоваяСтрока.ПотомкиВыведены = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ИмеютсяПотомкиЭтапа(Строка, Форма) Тогда
				ДобавитьВДеревоПотомковЭтапа(Приемник, Строка, Форма, ТекСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВДеревоПотомковЭтапа(Приемник, ДанныеЭтапа, Форма, ТекСтроки)
	
	ЕстьОтбор = ЕстьОтбор(Форма);
	
	Для каждого Строка Из ДанныеЭтапа.ПолучитьЭлементы() Цикл
		
		Если ПоказыватьНоменклатуру(Строка, ДанныеЭтапа, Форма) Тогда
			
			НоваяСтрока = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Источник = Строка.ПолучитьИдентификатор();
			// Развернутые строки
			Если Строка.Развернута Тогда
				Форма.РазвернутыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			// Текущая строка
			Если ЕстьОтбор
				ИЛИ (ТекСтроки <> Неопределено И ТекСтроки.Найти(НоваяСтрока.Источник) <> Неопределено) Тогда
				Форма.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если Строка.Развернута Тогда
				ДобавитьВДеревоПотомковНоменклатуры(
					НоваяСтрока.ПолучитьЭлементы(),
					Строка.ПолучитьЭлементы(),
					Форма,
					ТекСтроки);
				НоваяСтрока.ПотомкиВыведены = Истина;
			Иначе
				НастроитьВыводПотомковНоменклатуры(Строка, НоваяСтрока, Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДостроитьДеревоЭтапов(СтрокаДерева)
	
	Потомки = СтрокаДерева.ПолучитьЭлементы();
	
	ПустойПотомок = Потомки[0];
	Потомки.Удалить(ПустойПотомок);
	
	СтрокаИсточник = Дерево.НайтиПоИдентификатору(СтрокаДерева.Источник);
	
	Если СтрокаДерева.ТипСтроки = ТипСтрокиПродукция()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПрочиеИзделия() Тогда
		
		ДобавитьВДеревоПотомковНоменклатуры(
			Потомки,
			СтрокаИсточник.ПолучитьЭлементы(),
			ЭтаФорма,
			Неопределено);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЭтап() Тогда
		
		ДобавитьВДеревоПотомковЭтапа(Потомки, СтрокаИсточник, ЭтаФорма, Неопределено);
		
	КонецЕсли;
	
	СтрокаДерева.ПотомкиВыведены = Истина;
	
КонецПроцедуры

&НаСервере
Функция ВсеЭтапыВыполнены(СтрокаДереваПродукция)
	
	Результат = Истина;
	
	Для каждого Строка Из СтрокаДереваПродукция.ПолучитьЭлементы() Цикл
		Если Не Строка.Выполнен Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВыводПотомковНоменклатуры(ДанныеНоменклатуры, СтрокаНоменклатура, Форма)
	
	Потомки = СтрокаНоменклатура.ПолучитьЭлементы();
	
	Если ИмеютсяПотомкиНоменклатуры(ДанныеНоменклатуры, Форма) Тогда
		СтрокаНоменклатура.ПотомкиВыведены = Ложь;
		Потомки.Добавить();
	Иначе
		СтрокаНоменклатура.ПотомкиВыведены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмеютсяПотомкиЭтапа(ДанныеЭтапа, Форма)
	
	Результат = Ложь;
	
	Для каждого ДанныеНоменклатуры Из ДанныеЭтапа.ПолучитьЭлементы() Цикл
		Если ПоказыватьНоменклатуру(ДанныеНоменклатуры, ДанныеЭтапа, Форма) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьНоменклатуру(ДанныеНоменклатуры, ДанныеЭтапаРодителя, Форма)
	
	Результат = Истина;
	
	ЕстьОтбор = ЕстьОтбор(Форма);
	Если ЕстьОтбор И Не ДанныеНоменклатуры.Отбор Тогда
		Результат = Ложь;
	ИначеЕсли Форма.СкрыватьВыполненное Тогда
		Результат = Не ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапаРодителя, Истина)
			ИЛИ Не ЭтапВыполненПолуфабрикатПроизведен(ДанныеНоменклатуры, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмеютсяПотомкиНоменклатуры(ДанныеНоменклатуры, Форма)
	
	Результат = Ложь;
	
	Для каждого Элемент Из ДанныеНоменклатуры.ПолучитьЭлементы() Цикл
		
		Если Элемент.ТипСтроки = ТипСтрокиЭтап() Тогда
			
			Если Форма.ПоказыватьЭтапы Тогда
					
				Если ПоказыватьЭтап(Элемент, Форма) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
					
			Иначе
					
				Если ИмеютсяПотомкиЭтапа(Элемент, Форма) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ТипСтроки = ТипСтрокиСоздатьЭтапы() Тогда
			
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьЭтап(ДанныеЭтапа, Форма)
	
	Если Форма.ПоказыватьЭтапы Тогда
		ЕстьОтбор = ЕстьОтбор(Форма);
		Если ЕстьОтбор И Не ДанныеЭтапа.Отбор Тогда
			Результат = Ложь;
		ИначеЕсли Форма.СкрыватьВыполненное Тогда
			Результат = Не ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапа, Истина);
		Иначе
			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Для каждого Строка Из РазвернутыеСтроки Цикл
		Если НЕ Элементы.СтруктураЗаказов.Развернут(Строка.Значение) Тогда
			Элементы.СтруктураЗаказов.Развернуть(Строка.Значение, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтрока <> -1 Тогда
		Элементы.СтруктураЗаказов.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЗаказ()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПродукция()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПолуфабрикат()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЭтап()
	
	Возврат 4;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПолуфабрикатДругогоЗаказа()
	
	Возврат 5;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПрочиеИзделия()
	
	Возврат 7;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиСоздатьЭтапы()
	
	Возврат 6;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтапВыполненПолуфабрикатПроизведен(ДанныеЭтапаПолуфабриката, ЭтоЭтап)
	
	Если ЭтоЭтап Тогда
		Результат = ДанныеЭтапаПолуфабриката.Выполнен;
	Иначе
		Результат = ДанныеЭтапаПолуфабриката.КоличествоФакт
			>= (ДанныеЭтапаПолуфабриката.КоличествоПлан - ДанныеЭтапаПолуфабриката.КоличествоОтменено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОтбор(Форма)
	Возврат Не(Форма.ОтборНоменклатура.Пустая() И Форма.ОтборЭтап.Пустая());
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ОчиститьСообщения();
	
	РезультатЗапуска = ЗапуститьФоновоеЗаданиеНаСервере(
		НаименованиеЗадания,
		ИмяПроцедуры,
		ПараметрыПроцедуры);
	
	Если РезультатЗапуска.НачатьОжидание Тогда
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьВФонеЗавершение", ЭтотОбъект, Новый Структура("ИмяЗадания", ИмяЗадания)),
			ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект));
		
	Иначе
		
		ОбработатьЗавершениеЗаданияНаКлиенте(ИмяЗадания, РезультатЗапуска.РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	НачатьОжидание = Истина;
	РезультатЗадания = Неопределено;
	
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		
		НачатьОжидание = Ложь;
		РезультатЗадания = ОбработатьЗавершениеЗаданияНаСервере(ДлительнаяОперация);
		
		ДлительнаяОперация = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("НачатьОжидание, РезультатЗадания", НачатьОжидание, РезультатЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатЗадания = ОбработатьЗавершениеЗаданияНаСервере(Результат);
		
		ОбработатьЗавершениеЗаданияНаКлиенте(ДопПараметры.ИмяЗадания, РезультатЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданияНаКлиенте(ИмяЗадания, РезультатЗадания)

	Если ИмяЗадания = "СформироватьЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОФормированииЭтаповПроизводства(
			РезультатЗадания, УникальныйИдентификатор);
		
	ИначеЕсли ИмяЗадания = "ПометитьНаУдалениеЭтапыПроизводства" Тогда
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(
			РезультатЗадания);
		
	КонецЕсли;
	
	ОбновитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция ОбработатьЗавершениеЗаданияНаСервере(Результат)
	
	РезультатЗадания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		
		Если ТипЗнч(РезультатЗадания) = Тип("Структура") И РезультатЗадания.Свойство("Сообщения") Тогда
			
			Для каждого Сообщение Из РезультатЗадания.Сообщения Цикл
			
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗадания;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	#Область СкрытьИнформационнуюСтроку
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовИнформационнаяСтрокаГиперссылка.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикатДругогоЗаказа());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область СкрытьНазначениеПолуфабриката
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиПродукция();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти

	#Область ПустоеКоличествоВСтрокаБезДанных
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПлан.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФакт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицит.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоОтменено.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиЗаказ());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	#КонецОбласти
	
	#Область СкрытьКартинкиВСтроках
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНомерКартинки.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиЗаказ());
	ЗначенияОтбора.Добавить(ТипСтрокиПродукция());
	ЗначенияОтбора.Добавить(ТипСтрокиСоздатьЭтапы());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ИтогиПоКоличеству
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПланИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФактИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицитИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоОтмененоИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовТекстОбщееКоличество.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПланИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФактИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицитИтого.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоОтмененоИтого.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовТекстОбщееКоличество.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПланИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоПлан");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФактИтого");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.КоличествоФакт");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Партия производства';
																|en = 'Production lot'"));
	
	#КонецОбласти
	
	#Область СоздатьЭтапы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНомерКартинки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовПредставлениеСтроки.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиСоздатьЭтапы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовИнформационнаяСтрокаГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиСоздатьЭтапы();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать этапы';
																|en = 'Create stages'"));
	
	#КонецОбласти
	
	#Область ЦветФонаЗаказ
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЗаказ();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	#КонецОбласти
	
	#Область ШрифтПродукция
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПродукция());
	ЗначенияОтбора.Добавить(ТипСтрокиПрочиеИзделия());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	#КонецОбласти
	
	#Область ВыделитьСветлосерым
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЭтап();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказов.Имя);
	
	ЗначенияОтбора = Новый СписокЗначений;
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикат());
	ЗначенияОтбора.Добавить(ТипСтрокиПолуфабрикатДругогоЗаказа());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ЗначенияОтбора;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведенРодитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);
	
	#КонецОбласти
	
	#Область ВыделитьКрасным
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовДатаОкончанияПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ВыполненПроизведен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ДатаОкончанияПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ДатаОкончанияПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	#КонецОбласти
	
	#Область ФактЭтапаНаСтороне
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицит.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЭтап();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ЭтапПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	
	#КонецОбласти
	
	#Область КоличествоЭтапаБезСпецификации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоПлан.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоФакт.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоДефицит.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураЗаказовКоличествоОтменено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЭтап();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураЗаказов.ЭтапПроизводствоБезСпецификации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Заказы) Тогда
		
		Если Заказы.Количество() = 1 Тогда
			
			ДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказы[0].Значение, "Номер, Дата");
		
			НомерЗаказа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ДанныеЗаказа.Номер, Ложь, Истина);
			ДатаЗаказа = Формат(ДанныеЗаказа.Дата, "ДЛФ=D");
			
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Структура заказа на производство № %1 от %2';
					|en = 'Structure of production order No. %1 dated %2'"),
				НомерЗаказа,
				ДатаЗаказа);
			
		Иначе
			
			Заголовок = НСтр("ru = 'Структура заказов на производство';
							|en = 'Production order structure'");
			
		КонецЕсли;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Структура заказа на производство (не выбран заказ)';
						|en = 'Production order structure (order is not selected)'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ПоказыватьЭтапы") 
		ИЛИ Инициализация Тогда
		
		Элементы.ОтборЭтап.Видимость = Форма.ПоказыватьЭтапы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиФормы()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючФормы(), "");
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючФормы()
	
	Возврат "Отчет.СтруктураЗаказаНаПроизводство2_2.СтруктураЗаказа";
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформационнуюПанель()
	
	ВидимостьКоманды = НЕ СкрытьКомандуТребуетсяСформироватьЭтапы И Заказы.Количество() <> 0;
	
	Если ВидимостьКоманды Тогда
		
		МассивСсылок = Заказы.ВыгрузитьЗначения();
		Если Документы.ЗаказНаПроизводство2_2.ТребуетсяУточнитьЭтапы(МассивСсылок) Тогда
			Элементы.КартинкаТребуетсяСформироватьЭтапы.Видимость = Ложь;
			Элементы.НадписьТребуетсяСформироватьЭтапы.Видимость  = Ложь;
			Элементы.СформироватьЭтапыПроизводства.Видимость      = Ложь;
			Элементы.ТребуетсяУточнитьЭтап.Видимость              = Истина;
		Иначе
			Элементы.КартинкаТребуетсяСформироватьЭтапы.Видимость = Истина;
			Элементы.НадписьТребуетсяСформироватьЭтапы.Видимость  = Истина;
			Элементы.СформироватьЭтапыПроизводства.Видимость      = Истина;
			Элементы.ТребуетсяУточнитьЭтап.Видимость              = Ложь;
			ВидимостьКоманды = Документы.ЗаказНаПроизводство2_2.ТребуетсяСформироватьЭтапыПоСпецификации(МассивСсылок);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаТребуетсяСформироватьЭтапы.Видимость = ВидимостьКоманды;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуЗаказаНаПроизводства(ТекущиеДанные)
	
	ДанныеСтроки = УправлениеПроизводствомКлиентСервер.СтруктураПродукцииЗаказа();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
	ДанныеСтроки.Склад         = ТекущиеДанные.Склад;
	ДанныеСтроки.Подразделение = ТекущиеДанные.Склад;
	
	УправлениеПроизводствомКлиент.ОткрытьСтрокуЗаказаНаПроизводства(ТекущиеДанные.Заказ, ДанныеСтроки, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСтруктурыПолуфабрикатаДругогоЗаказа(ТекущиеДанные)
	
	ПараметрЗаказы = Новый Массив;
	ПараметрЗаказы.Добавить(ТекущиеДанные.Заказ);
	
	ПараметрыФормы = Новый Структура("Заказы", ПараметрЗаказы);
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
		ПараметрыФормы,
		ЭтотОбъект,
		ТекущиеДанные.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСозданияЭтапов(ТекущиеДанные)
	
	СтрокаПотребности = ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаПотребности.ПолучитьРодителя().ТипСтроки = ТипСтрокиЗаказ() Тогда
		
		ЗначенияРеквизитов = ЗначенияРеквизитовОбъекта(СтрокаПотребности.Заказ, "ТипПроизводственногоПроцесса, ПартияПроизводства");
		
		ТипПроизводственногоПроцесса = ЗначенияРеквизитов.ТипПроизводственногоПроцесса;
		ПартияПроизводства           = ЗначенияРеквизитов.ПартияПроизводства;
		
	Иначе
		
		ТипПроизводственногоПроцесса = СтрокаПотребности.ТипПроцесса;
		ПартияПроизводства           = Неопределено;
		
	КонецЕсли;
	
	Дефицит = Новый Массив;
	
	КоличествоКСозданию = СтрокаПотребности.КоличествоПлан
		- СтрокаПотребности.КоличествоОтменено
		- СтрокаПотребности.КоличествоСоздано;
	
	Если КоличествоКСозданию > 0 Тогда
		
		Продукция = Новый Структура;
		
		Продукция.Вставить("Номенклатура",             СтрокаПотребности.Номенклатура);
		Продукция.Вставить("Характеристика",           СтрокаПотребности.Характеристика);
		Продукция.Вставить("Назначение",               СтрокаПотребности.Назначение);
		Продукция.Вставить("СписатьНаРасходы",         СтрокаПотребности.СписатьНаРасходы);
		Продукция.Вставить("СтатьяРасходов",           СтрокаПотребности.СтатьяРасходов);
		Продукция.Вставить("АналитикаРасходов",        СтрокаПотребности.АналитикаРасходов);
		Продукция.Вставить("АналитикаАктивовПассивов", СтрокаПотребности.АналитикаАктивовПассивов);
		Продукция.Вставить("Количество",               КоличествоКСозданию);
		Продукция.Вставить("КоличествоУпаковок",       КоличествоКСозданию);
		
		Если СтрокаПотребности.ТипПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка") Тогда
			Продукция.Вставить("Склад", СтрокаПотребности.Склад);
		Иначе
			Продукция.Вставить("Получатель", СтрокаПотребности.Склад);
		КонецЕсли;
		
		Дефицит.Добавить(Продукция);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			СтрокаПотребности.Заказ,
			ПартияПроизводства,
			Дефицит,
			ЭтотОбъект);
		
	Иначе
		
		УправлениеПроизводствомКлиент.ОткрытьФормуСозданияНовойЦепочкиЭтапов(
			СтрокаПотребности.Заказ,
			ТипПроизводственногоПроцесса,
			СтрокаПотребности.НазначениеПродукция,
			Дефицит,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

&НаСервере
Функция ПартииПроизводстваИзделия(ИдентификаторСтроки)
	
	Результат = Новый Массив;
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева.ПартияПроизводства.Пустая() Тогда
		
		Для каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
			Если Результат.Найти(Строка.ПартияПроизводства) = Неопределено Тогда
				Результат.Добавить(Строка.ПартияПроизводства);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Результат.Добавить(СтрокаДерева.ПартияПроизводства);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
