#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ОКТМО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		НаименованиеОрганизации = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ИНН", ИНН);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "КПП", КПП);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "НаимОрг", НаименованиеОрганизации);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ОтчетнаяДата", ДатаПодписи);
		
		СтруктураРеквизитовФормы.ОКТМОДляРазделов = СведенияОбОрганизации.ОКТМО;
		
		СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = СокрЛП(НаименованиеОрганизации);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи);
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР11М1   = "П00011М1";
	СтруктураРеквизитовФормы.мИдГруппыР11М2   = "П00011М2";
	СтруктураРеквизитовФормы.мИдГруппыР21М1   = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппыР31М1   = "П00031М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00011М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00011М100101");
	ИменаГраф.Добавить("П00011М100102");
	ИменаГраф.Добавить("П00011М100103");
	ИменаГраф.Добавить("П00011М100104");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР11М1,
		Новый Структура( "ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00011М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00011М200101");
	ИменаГраф.Добавить("П00011М200102");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР11М2,
		Новый Структура( "ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М100101");
	ИменаГраф.Добавить("П00021М100102");
	ИменаГраф.Добавить("П00021М100103");
	ИменаГраф.Добавить("П00021М100104");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР21М1,
		Новый Структура( "ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00031М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00031М100101");
	ИменаГраф.Добавить("П00031М100102");
	ИменаГраф.Добавить("П00031М100103");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР31М1,
		Новый Структура( "ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
			ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР11М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР11М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("КонсолидированныйОтчет", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НаимСтраницы", "Консолидированный ОПУ");
	СтруктураМногоуровневыхРазделов.Вставить("КонсолидированныйОПУ", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("НаимСтраницы", "Консолидированный ОДДС");
	СтруктураМногоуровневыхРазделов.Вставить("КонсолидированныйОДДС", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР21М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("ОтчетностьУчастникаОПУ");
	ИменаПодчиненныхРазделов.Добавить("ОтчетностьУчастникаОДДС");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураМногоуровневыхРазделов.Вставить("ОтчетностьУчастника", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "ОПУ");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "ОтчетностьУчастника");
	СтруктураМногоуровневыхРазделов.Вставить("ОтчетностьУчастникаОПУ", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "ОДДС");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "ОтчетностьУчастника");
	СтруктураМногоуровневыхРазделов.Вставить("ОтчетностьУчастникаОДДС", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР31М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("ОтчетностьУчастникаБезЮЛОПУ");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураМногоуровневыхРазделов.Вставить("ОтчетностьУчастникаБезЮЛ", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("НаимСтраницы", "ОПУ");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "ОтчетностьУчастникаБезЮЛ");
	СтруктураМногоуровневыхРазделов.Вставить("ОтчетностьУчастникаБезЮЛОПУ", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы, Элем.Ключ, СтруктураМногоуровневыхРазделов,
			ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы, Элем.Ключ, ТекВетка, СтруктураМногоуровневыхРазделов,
			ТабличныйДокумент, СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
						СтруктураРеквизитовФормы, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы, ИмяПодчРаздела, СтруктураМногоуровневыхРазделов,
				ТабличныйДокумент, СтруктураРеквизитовФормы);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы, ИмяПодчРаздела, ПодчВетка, СтруктураМногоуровневыхРазделов,
				ТабличныйДокумент, СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СтруктураДанныхРазделов["СтруктураДанных" + ИмяРаздела] = ДанныеТабличногоДокумента(ИмяФормы,
			ИмяРаздела, СтруктураМногоуровневыхРазделов, ТабличныйДокумент, СтруктураРеквизитовФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы, ПоОбособленномуПодразделению = Ложь) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Консолидированная финансовая отчетность МГК");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_НеКГН");
	СтруктураРеквизитовФормы.Вставить("СоответствиеНомераМесяцаКодуОтчетногоПериода_КГН");
	СтруктураРеквизитовФормы.Вставить("мПоМесту", "214");
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьКвартал", Перечисления.Периодичность.Квартал);
	СтруктураРеквизитовФормы.Вставить("ПеречислениеПериодичностьМесяц", Перечисления.Периодичность.Месяц);
	СтруктураРеквизитовФормы.Вставить("НалоговыеОрганы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОКТМОДляРазделов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресРезультата");
	СтруктураРеквизитовФормы.Вставить("КС_АдресРасшифровки");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "17/08/2022");
		СтруктураРеквизитовФормы.Вставить("ОписаниеТиповЧислоЕ",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2)));
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР11М2");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР21М1");
		СтруктураРеквизитовФормы.Вставить("мИдГруппыР31М1");
		СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
		СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
		СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
		СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
		СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
		СтруктураРеквизитовФормы.Вставить("ОбщеустановленнаяНалоговаяСтавка", 17);
		СтруктураРеквизитовФормы.Вставить("ПоОбособленномуПодразделению", ПоОбособленномуПодразделению);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция СтруктураСтраницОтчета(ИмяФормы, ПоОбособленномуПодразделению = Ложь) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "КонсолидированныйОтчет";
	СтрокаУровня1.Представление      = "Консолидированный отчет";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "КонсолидированныйОПУ";
	СтрокаУровня1.Представление      = "Консолидированный ОПУ";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "КонсолидированныйОДДС";
	СтрокаУровня1.Представление      = "Консолидированный ОДДС";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "ОтчетностьУчастника";
	СтрокаУровня1.Представление      = "Отчетность участника МГК";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "ОтчетностьУчастникаБезЮЛ";
	СтрокаУровня1.Представление      = "Отчетность участника МГК без ЮЛ";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Процедура ПоказатьПериод(ИмяФормы, СтруктураДанныхТитульный, СтруктураРеквизитовФормы) Экспорт
	
	ОтчетныйГод = Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ОтчетГод", ОтчетныйГод);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета =
		ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
			КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный,
	ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	ДокументПредставителя = "";
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		КодНО = "0023";
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			КПП = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			КПП = СокрЛП(СтруктураДанныхТитульный.КПП);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФамилияРук, ИмяРук, ОтчествоРук");
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ФамилияПодписанта",  СведенияОбОрганизации.ФамилияРук);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ИмяПодписанта",      СведенияОбОрганизации.ИмяРук);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ОтчествоПодписанта", СведенияОбОрганизации.ОтчествоРук);
		
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ДокУпПред", "");
		
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ПрПодп1", "Х");
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ПрПодп2", "");
		
	Иначе
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Подписант);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ФамилияПодписанта",  ФИОПодписанта.Фамилия);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ИмяПодписанта",      ФИОПодписанта.Имя);
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ОтчествоПодписанта", ФИОПодписанта.Отчество);
		
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ДокУпПред", ДокументПредставителя);
		
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ПрПодп1", "");
		УстановитьЗначениеПоказателя(СтруктураДанныхТитульный, "ПрПодп2", "Х");
		
	КонецЕсли;
	
	Если ТипПодписанта = "1" Тогда
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = ПараметрыЗаписи.Периодичность;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		ПоказателиОтчета = Новый Структура;
		ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
		
		СписокСохранения = Новый Структура;
		СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
		ДанныеМногоуровневыхРазделов = Новый Структура;
		Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
			СтруктураРаздела = Элем.Значение;
			Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
				ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
					ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
			КонецЕсли;
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
		
		СписокСохранения.Вставить("ВерсияФормы",                 ПараметрыЗаписи.ВерсияФормы);
		СписокСохранения.Вставить("ФлОтклВыборЗначений",         ПараметрыЗаписи.ФлОтклВыборЗначений);
		СписокСохранения.Вставить("Автозаполнение",              ПараметрыЗаписи.Автозаполнение);
		СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
		СписокСохранения.Вставить("ФлПодсчетСтраниц",            ПараметрыЗаписи.ФлПодсчетСтраниц);
		СписокСохранения.Вставить("ОКТМОДляРазделов", ПараметрыЗаписи.ОКТМОДляРазделов);
		СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
			ПараметрыЗаписи.ФлПроверятьСоотношенияПриПечатиИВыгрузки);
		
		СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
		
		Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
			ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);
			Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
				СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
			КонецЕсли;
		КонецЕсли;
		
		ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения);
		
		ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц
			= Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
			
	КонецЕсли;
	
	Попытка
		ДокументРегламентированныйОтчет.Записать();
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																						|en = '%1'"),
			РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьВариантыЗаполнения(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураВариантыЗаполнения,
										 ТаблицаСоставПоказателей = Неопределено) Экспорт
	
	МакетСоставаПоказателей = ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",
			Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность     = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита       = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			стрВариантЗаполнения
			= РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ?(ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			Если КодПоказателя = "П000200032003" ИЛИ КодПоказателя = "П000200033003" ИЛИ КодПоказателя = "П000200034003"
				ИЛИ КодПоказателя = "П000260000601" Тогда
				
				чВариантЗаполнения = 5;
				
			КонецЕсли;
			
			Если ТипЗнч(ТаблицаСоставПоказателей) = Тип("ТаблицаЗначений") Тогда
				
				НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
				НоваяСтрока.ИмяПоляТаблДокумента     = ИмяСтраницы;
				НоваяСтрока.КодПоказателяПоСоставу   = КодПоказателя;
				НоваяСтрока.КодПоказателяПоФорме     = КодПоказателяПоФорме;
				НоваяСтрока.ПризнМногострочности     = ПризнМногострочность;
				НоваяСтрока.ТипДанныхПоказателя      = ТипДанныхРеквизита;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
				
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя = ?(НЕ ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
			
			МассивВариантовЗаполненияСтраниц = Новый Массив;
			МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
			
			СтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "Прибыль");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов = Неопределено) Экспорт
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		
		ДанныеОтчета = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), Раздел.Значение);
		КонецЦикла;
		
		Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
			ДанныеОтчета.Вставить(Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок_Дата", ТекущаяДатаСеанса());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ПараметрыВыгрузки.ДатаДок_Дата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    "0023");
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	Если ЗначениеЗаполнено(Титульный.ПрОрг1) Тогда
		ПараметрыВыгрузки.Вставить("ПрОрг", "1");
	ИначеЕсли ЗначениеЗаполнено(Титульный.ПрОрг2) Тогда
		ПараметрыВыгрузки.Вставить("ПрОрг", "2");
	Иначе
		ПараметрыВыгрузки.Вставить("ПрОрг", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ФинГод", Титульный.ОтчетГод);
	ПараметрыВыгрузки.Вставить("ОтчДата", Формат(Титульный.ОтчетнаяДата, "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ОтчДатаПред", Формат(Титульный.ОтчетнаяДатаПред, "ДФ=дд.ММ.гггг"));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
		СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.Телефон));
	ПараметрыВыгрузки.Вставить("ЭлАдрес", СокрЛП(Титульный.ЭлектроннаяПочта));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	Если ЗначениеЗаполнено(Титульный.ПрПодп1) Тогда
		ПараметрыВыгрузки.Вставить("ПрПодп",  "1");
		ПараметрыВыгрузки.Вставить("НаимДокПред", "");
	ИначеЕсли ЗначениеЗаполнено(Титульный.ПрПодп2) Тогда
		ПараметрыВыгрузки.Вставить("ПрПодп",  "2");
		ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	Иначе
		ПараметрыВыгрузки.Вставить("ПрПодп",  "0");
		ПараметрыВыгрузки.Вставить("НаимДокПред", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  Титульный.ФамилияПодписанта);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      Титульный.ИмяПодписанта);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", Титульный.ОтчествоПодписанта);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "СвКонсФинОтчМГК");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "UT_SVKONSFINOTCH"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки,
	СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	#Область ТитульныйЛист
	
	ИмяРаздела = "Титульный";
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указано наименование организации';
				|en = 'Не указано наименование организации'"), ИмяРаздела, "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПрОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указан признак организации';
				|en = 'Не указан признак организации'"), ИмяРаздела, "ПрОрг1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указан ИНН организации';
				|en = 'Не указан ИНН организации'"), ИмяРаздела, "ИНН");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ПараметрыВыгрузки.ИННОрг, "([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{8}")
		ИЛИ НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННОрг, Ложь) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'У организации указан некорректный ИНН';
				|en = 'У организации указан некорректный ИНН'"), ИмяРаздела, "ИНН");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указан КПП организации';
				|en = 'Не указан КПП организации'"), ИмяРаздела, "КПП");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.КППСоответствуетТребованиямФНС(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'У организации указан некорректный КПП';
				|en = 'У организации указан некорректный КПП'"), ИмяРаздела, "КПП");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОтчДата) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указана отчетная дата';
				|en = 'Не указана отчетная дата'"), ИмяРаздела, "ОтчетнаяДата");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОтчДатаПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указана отчетная дата предыдущего периода';
				|en = 'Не указана отчетная дата предыдущего периода'"), ИмяРаздела, "ОтчетнаяДатаПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НСтр("ru = 'Не указана фамилия подписанта';
														|en = 'Не указана фамилия подписанта'"), ИмяРаздела, "ФамилияПодписанта");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, НСтр("ru = 'Не указано имя подписанта';
														|en = 'Не указано имя подписанта'"), ИмяРаздела, "ИмяПодписанта");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			НСтр("ru = 'Не указаны наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика';
				|en = 'Не указаны наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика'"),
			ИмяРаздела, "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КонсолидированныйОтчет
	
	ИмяРаздела = "КонсолидированныйОтчет";
	
	Показатели = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела].Строки[0].Данные;
	
	ИмяПоказателя = "П000110006201";
	ЗначениеПоказателя = Показатели[ИмяПоказателя];
	Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
		ТекстСообщения = НСтр("ru = 'В консолидированном отчете о финансовом положении не указан код валюты';
								|en = 'В консолидированном отчете о финансовом положении не указан код валюты'");
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
			ИмяРаздела, ИмяПоказателя, "1");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
		ТекстСообщения = НСтр("ru = 'В консолидированном отчете о финансовом положении указан некорректный код валюты';
								|en = 'В консолидированном отчете о финансовом положении указан некорректный код валюты'");
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
			ИмяРаздела, ИмяПоказателя, "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	МСЧ = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела].Строки[0].ДанныеМногострочныхЧастей.П00011М1;
	МСЧ_Заполнена = Ложь;
	Для НомСтроки = 1 По МСЧ.Строки.Количество() Цикл
		СтрокаМСЧ = МСЧ.Строки[НомСтроки - 1];
		СтрокаЗаполнена = ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаМСЧ, ИмяРаздела,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		Если СтрокаЗаполнена Тогда
			МСЧ_Заполнена = Истина;
			
			ИмяПоказателя = "П00011М100101";
			ЗначениеПоказателя = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 примечаний к выручке консолидированного отчета о финансовом положении не указан код страны';
												|en = 'В строке %1 примечаний к выручке консолидированного отчета о финансовом положении не указан код страны'"),
					СтрЧГ0(НомСтроки));
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
					ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), "1");
				СтатусПроверки = Ложь;
				
			ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 примечаний к выручке консолидированного отчета о финансовом положении указан некорректный код страны';
												|en = 'В строке %1 примечаний к выручке консолидированного отчета о финансовом положении указан некорректный код страны'"),
					СтрЧГ0(НомСтроки));
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
					ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), "1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МСЧ_Заполнена Тогда
		ТекстСообщения = НСтр("ru = 'В консолидированном отчете о финансовом положении не заполнены примечания к выручке';
								|en = 'В консолидированном отчете о финансовом положении не заполнены примечания к выручке'");
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, "П00011М100101_1", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	МСЧ = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела].Строки[0].ДанныеМногострочныхЧастей.П00011М2;
	МСЧ_Заполнена = Ложь;
	Для НомСтроки = 1 По МСЧ.Строки.Количество() Цикл
		СтрокаМСЧ = МСЧ.Строки[НомСтроки - 1];
		СтрокаЗаполнена = ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаМСЧ, ИмяРаздела,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		Если СтрокаЗаполнена Тогда
			МСЧ_Заполнена = Истина;
			
			ИмяПоказателя = "П00011М200101";
			ЗначениеПоказателя = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении не указан код страны';
												|en = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении не указан код страны'"),
					СтрЧГ0(НомСтроки));
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
					ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), "1");
				СтатусПроверки = Ложь;
				
			ИначеЕсли СтрДлина(ЗначениеПоказателя) <> 3
			      ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПоказателя) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении указан некорректный код страны';
												|en = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении указан некорректный код страны'"),
					СтрЧГ0(НомСтроки));
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
					ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), "1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			ИмяПоказателя = "П00011М200102";
			ЗначениеПоказателя = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении не указано наименование компании';
												|en = 'В строке %1 перечня компаний группы консолидированного отчета о финансовом положении не указано наименование компании'"),
					СтрЧГ0(НомСтроки));
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
					ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), "1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ МСЧ_Заполнена Тогда
		ТекстСообщения = НСтр("ru = 'В консолидированном отчете о финансовом положении не заполнен перечень компаний группы';
								|en = 'В консолидированном отчете о финансовом положении не заполнен перечень компаний группы'");
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, "П00011М200101_1", "1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетностьУчастника
	
	ИмяРаздела = "ОтчетностьУчастника";
	СтраницыРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела].Строки;
	
	Для НомерСтраницы = 1 По СтраницыРаздела.Количество() Цикл
		СтраницаРаздела = СтраницыРаздела[НомерСтраницы - 1];
		СтраницаЗаполнена = ЗаполненаСтраницаРаздела(ИмяФормы, СтраницаРаздела, ИмяРаздела,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		Если НЕ СтраницаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		Показатели = СтраницаРаздела.Данные;
		
		ИмяПоказателя = "П000210000001";
		Если НЕ ЗначениеЗаполнено(Показатели[ИмяПоказателя]) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника не заполнено наименование участника';
											|en = 'На странице %1 раздела отчетности участника не заполнено наименование участника'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПоказателя = "П000210000003";
		ЗначениеПоказателя = СокрЛП(Показатели[ИмяПоказателя]);
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника не заполнен код государства (территории) регистрации (инкорпорации)';
											|en = 'На странице %1 раздела отчетности участника не заполнен код государства (территории) регистрации (инкорпорации)'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли СтрДлина(ЗначениеПоказателя) <> 3
		      ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЗначениеПоказателя) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника указан некорректный код государства (территории) регистрации (инкорпорации)';
											|en = 'На странице %1 раздела отчетности участника указан некорректный код государства (территории) регистрации (инкорпорации)'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		ИмяПоказателя = "П000210000004";
		Если НЕ ЗначениеЗаполнено(Показатели[ИмяПоказателя]) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника не заполнена доля участия';
											|en = 'На странице %1 раздела отчетности участника не заполнена доля участия'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПоказателя = "П000210006201";
		ЗначениеПоказателя = Показатели[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника не заполнен код валюты';
											|en = 'На странице %1 раздела отчетности участника не заполнен код валюты'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника указан некорректный код валюты';
											|en = 'На странице %1 раздела отчетности участника указан некорректный код валюты'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		МСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей.П00021М1;
		МСЧ_Заполнена = Ложь;
		Для НомСтроки = 1 По МСЧ.Строки.Количество() Цикл
			СтрокаМСЧ = МСЧ.Строки[НомСтроки - 1];
			СтрокаЗаполнена = ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаМСЧ, ИмяРаздела,
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если СтрокаЗаполнена Тогда
				МСЧ_Заполнена = Истина;
				
				ИмяПоказателя = "П00021М100101";
				ЗначениеПоказателя = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника в строке %2 примечаний к выручке не заполнен код страны';
													|en = 'На странице %1 раздела отчетности участника в строке %2 примечаний к выручке не заполнен код страны'"),
						СтрЧГ0(НомерСтраницы), СтрЧГ0(НомСтроки));
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
						ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), НомерСтраницы);
					СтатусПроверки = Ложь;
					
				ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника в строке %2 примечаний к выручке указан некорректный код страны';
													|en = 'На странице %1 раздела отчетности участника в строке %2 примечаний к выручке указан некорректный код страны'"),
						СтрЧГ0(НомерСтраницы), СтрЧГ0(НомСтроки));
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
						ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), НомерСтраницы);
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ МСЧ_Заполнена Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника не заполнены примечания к выручке';
											|en = 'На странице %1 раздела отчетности участника не заполнены примечания к выручке'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, "П00021М100101_1", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ОтчетностьУчастникаБезЮЛ
	
	ИмяРаздела = "ОтчетностьУчастникаБезЮЛ";
	СтраницыРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов[ИмяРаздела].Строки;
	
	Для НомерСтраницы = 1 По СтраницыРаздела.Количество() Цикл
		СтраницаРаздела = СтраницыРаздела[НомерСтраницы - 1];
		СтраницаЗаполнена = ЗаполненаСтраницаРаздела(ИмяФормы, СтраницаРаздела, ИмяРаздела,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		Если НЕ СтраницаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		Показатели = СтраницаРаздела.Данные;
		
		ИмяПоказателя = "П000310000001";
		Если НЕ ЗначениеЗаполнено(Показатели[ИмяПоказателя]) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнено наименование участника';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнено наименование участника'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПоказателя = "П000310000003";
		ЗначениеПоказателя = СокрЛП(Показатели[ИмяПоказателя]);
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнен код государства (территории) регистрации (инкорпорации)';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнен код государства (территории) регистрации (инкорпорации)'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ указан некорректный код государства (территории) регистрации (инкорпорации)';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ указан некорректный код государства (территории) регистрации (инкорпорации)'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		ИмяПоказателя = "П000310000004";
		Если НЕ ЗначениеЗаполнено(Показатели[ИмяПоказателя]) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнена доля участия';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнена доля участия'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ИмяПоказателя = "П000310006201";
		ЗначениеПоказателя = Показатели[ИмяПоказателя];
		Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнен код валюты';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ не заполнен код валюты'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ЗначениеПоказателя, "[0-9]{3}") Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ указан некорректный код валюты';
											|en = 'На странице %1 раздела отчетности участника без образования ЮЛ указан некорректный код валюты'"),
				СтрЧГ0(НомерСтраницы));
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения, ИмяРаздела, ИмяПоказателя, НомерСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		МСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей.П00031М1;
		Для НомСтроки = 1 По МСЧ.Строки.Количество() Цикл
			СтрокаМСЧ = МСЧ.Строки[НомСтроки - 1];
			СтрокаЗаполнена = ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы, СтрокаМСЧ, ИмяРаздела,
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если СтрокаЗаполнена Тогда
				ИмяПоказателя = "П00031М100101";
				ЗначениеПоказателя = СокрЛП(СтрокаМСЧ.Данные[ИмяПоказателя]);
				Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'На странице %1 раздела отчетности участника без образования ЮЛ в строке %2 производных финансовых инструментов не указано наименование';
													|en = 'На странице %1 раздела отчетности участника без образования ЮЛ в строке %2 производных финансовых инструментов не указано наименование'"),
						СтрЧГ0(НомерСтраницы), СтрЧГ0(НомСтроки));
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, ТекстСообщения,
						ИмяРаздела, ИмяПоказателя + "_" + СтрЧГ0(НомСтроки), НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	#КонецОбласти
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(ИмяФормы,
									  СтраницаРаздела,
									  ИмяРаздела,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтраницаРаздела(ИмяФормы, Знач СтраницаРаздела, Знач ИмяРаздела, СтруктураРеквизитовФормы,
	СтруктураМногоуровневыхРазделов, ДопПараметры = Неопределено)
	
	ПоказателиНеанализируемыеНаЗаполненность =
		ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом =
		ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела)["ИменаНемногострочныхПоказателей"];
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом)
			И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ИмяФормы,
											 ДеревоМнЧ,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ИмяФормы,
								ДеревоПодчРаздела,
								ИмяПодчРаздела,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов,
								ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаМногострочнаяЧасть(ИмяФормы,
									Знач ДеревоМнЧ,
									Знач ИмяРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов,
									ДопПараметры = Неопределено)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
											   СтрокаМнЧ,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
										  Знач СтрокаМнЧ,
										  Знач ИмяРаздела,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов,
										  ДопПараметры = Неопределено)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность =
		ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом =
		ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела)["ИменаМногострочныхПоказателей"];
	
	Для Каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗаполненПоказатель(ИмяФормы, Пок.Ключ, Пок.Значение, ИменаЧисловыхПоказателейСНастраиваемымФорматом)
			И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
													   СтрокаПодчМнЧ,
													   ИмяРаздела,
													   СтруктураРеквизитовФормы,
													   СтруктураМногоуровневыхРазделов,
													   ДопПараметры) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненПоказатель(ИмяФормы,
						   ИмяПоказателя,
						   ЗначениеПоказателя,
						   ИменаЧисловыхПоказателейСНастраиваемымФорматом,
						   ДопПараметры = Неопределено)
	
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Число")
		И ИменаЧисловыхПоказателейСНастраиваемымФорматом.Найти(ИмяПоказателя) <> Неопределено Тогда
		Возврат Окр(ЗначениеПоказателя) <> 0;
	Иначе
		Возврат ЗначениеЗаполнено(ЗначениеПоказателя);
	КонецЕсли;
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Функция ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела) Экспорт
	
	ИменаМногострочныхПоказателей   = Новый Массив;
	ИменаНемногострочныхПоказателей = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("ИменаМногострочныхПоказателей",   ИменаМногострочныхПоказателей);
	Результат.Вставить("ИменаНемногострочныхПоказателей", ИменаНемногострочныхПоказателей);
	
	Возврат Результат;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, Знач ИмяРаздела, ДопПараметры = Неопределено)
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

// Добавляет описание ошибки в таблицу сообщений об ошибках проверки выгрузки.
// 
// Параметры:
//   ИмяФормы - Строка -
//   ТаблицаОшибок - ТаблицаЗначений -
//   Описание - Строка -
//   Раздел - Строка -
//   ИмяЯчейки - Строка -
//   НомерСтраницы - Строка - 
//
Процедура СообщитьВТС(ИмяФормы, ТаблицаОшибок, Описание, Раздел, ИмяЯчейки, НомерСтраницы = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ТаблицаОшибок, Описание, Раздел, ИмяЯчейки, НомерСтраницы);
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Экспорт
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Процедура ДополнитьСохраненныеПоказателиОтчета(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы) Экспорт
	
	Владелец = Новый Структура;
	Владелец.Вставить("СоответствиеЕдиницыИзмеренияДелителю",
		СтруктураРеквизитовФормы.СоответствиеЕдиницыИзмеренияДелителю);
	Владелец.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.КодИМНС));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф",   СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП1));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыОрг));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИНН_Реорг));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КПП_Реорг));
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "UT_SVKONSFINOTCH");
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
					СокрЛП(ПараметрыВыгрузки.ИННОрг),
					СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
		Макет = ПолучитьМакет("СхемаВыгрузки501");
	Иначе
		Макет = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ВыгрузкаВозможна(ИмяФормы,
						 ПараметрыВыгрузки,
						 РезультатВыгрузки,
						 СтруктураРеквизитовФормы,
						 ДеревоВыгрузки,
						 ДанныеОтчета) Экспорт
						 
	СтатусПроверки = Истина;
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ЗаполнитьСоответствиеОКАТОСубъектамРФ(ИмяФормы, СоответствиеОКАТОСубъектамРФ) Экспорт
	
	Если СоответствиеОКАТОСубъектамРФ = Неопределено Тогда
		
		СоответствиеОКАТОСубъектамРФ = Новый ТаблицаЗначений;
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("КодСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("НазваниеСубъекта");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("МаскаОКАТО");
		СоответствиеОКАТОСубъектамРФ.Колонки.Добавить("ДлинаМаски");
		
	КонецЕсли;	
	
	МакетСоставаПоказателей = Новый ТабличныйДокумент;
	
	ОбластьДанных = МакетСоставаПоказателей.Области.ОКАТОПоСубъектам;
	
	ВерхОбласти = ОбластьДанных.Верх;
	НизОбласти = ОбластьДанных.Низ;
	
	Для НомСтр = ВерхОбласти По НизОбласти Цикл
		
		КодСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
		НазваниеСубъекта = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
		МаскаОКАТО = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
		
		Если НЕ ПустаяСтрока(КодСубъекта) И НЕ ПустаяСтрока(МаскаОКАТО) Тогда
			НоваяСтрока = СоответствиеОКАТОСубъектамРФ.Добавить();
			НоваяСтрока.КодСубъекта = КодСубъекта;
			НоваяСтрока.НазваниеСубъекта = НазваниеСубъекта;
			НоваяСтрока.МаскаОКАТО = МаскаОКАТО;
			
			НоваяСтрока.ДлинаМаски = СтрДлина(НоваяСтрока.МаскаОКАТО);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОКАТОСубъектамРФ.Сортировать("ДлинаМаски Убыв, МаскаОКАТО");
	
КонецПроцедуры

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(ИмяФормы, СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		ПараметрыВыгрузки, УзелРодитель);
		
	// Консолидированная отчетность.
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["КонсолидированныйОтчет"];
	Узел_КонсОтчФинПол = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "КонсОтчФинПол");
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		ДеревоРаздела.Строки[0].Данные, Узел_КонсОтчФинПол);
		
	МногострочнаяЧасть = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей.П00011М1;
	ПрототипУзла_ПримВыруч = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_КонсОтчФинПол, "ПримВыруч");
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		Экземпляр_ПримВыруч = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_ПримВыруч);
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМСЧ.Данные, Экземпляр_ПримВыруч);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПримВыруч);
	
	МногострочнаяЧасть = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей.П00011М2;
	ПрототипУзла_ПеречКомГрупп = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_КонсОтчФинПол, "ПеречКомГрупп");
	Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
		Экземпляр_ПеречКомГрупп = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_ПеречКомГрупп);
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			СтрокаМСЧ.Данные, Экземпляр_ПеречКомГрупп);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПеречКомГрупп);
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["КонсолидированныйОПУ"];
	Узел_КонсОтчПрибУб = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_КонсОтчФинПол, "КонсОтчПрибУб");
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		ДеревоРаздела.Строки[0].Данные, Узел_КонсОтчПрибУб);
	
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["КонсолидированныйОДДС"];
	Узел_ОтчДвижДенСр = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_КонсОтчФинПол, "ОтчДвижДенСр");
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
		ДеревоРаздела.Строки[0].Данные, Узел_ОтчДвижДенСр);
	
	// Сведения участника МГК.
	ПрототипУзла_СвУчМГК = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СвУчМГК");
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["ОтчетностьУчастника"];
	
	Для Каждого Ветка Из ДеревоРаздела.Строки Цикл
		Экземпляр_СвУчМГК = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_СвУчМГК);
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Данные, Экземпляр_СвУчМГК);
		
		Узел_ФинОтчет = ПолучитьПодчиненныйЭлемент(ИмяФормы, Экземпляр_СвУчМГК, "ФинОтчет");
		
		Узел_ОтчПрибУб = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ФинОтчет, "ОтчПрибУб");
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Строки[0].Строки[0].Данные, Узел_ОтчПрибУб);
		
		Узел_ОтчДвижДенСр = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ФинОтчет, "ОтчДвижДенСр");
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Строки[1].Строки[0].Данные, Узел_ОтчДвижДенСр);
		
		МногострочнаяЧасть = Ветка.ДанныеМногострочныхЧастей.П00021М1;
		ПрототипУзла_ПримВыруч = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ФинОтчет, "ПримВыруч");
		Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
			Экземпляр_ПримВыруч = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_ПримВыруч);
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМСЧ.Данные, Экземпляр_ПримВыруч);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПримВыруч);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СвУчМГК);
	
	// Сведения участника МГК без ЮЛ.
	ПрототипУзла_СвУчИСБОЮЛМГК = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СвУчИСБОЮЛМГК");
	ДеревоРаздела = ДанныеМногоуровневыхРазделов["ОтчетностьУчастникаБезЮЛ"];
	
	Для Каждого Ветка Из ДеревоРаздела.Строки Цикл
		Экземпляр_СвУчИСБОЮЛМГК = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_СвУчИСБОЮЛМГК);
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Данные, Экземпляр_СвУчИСБОЮЛМГК);
		
		Узел_ФинОтчет = ПолучитьПодчиненныйЭлемент(ИмяФормы, Экземпляр_СвУчИСБОЮЛМГК, "ФинОтчет");
		
		Узел_ОтчПрибУб = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ФинОтчет, "ОтчПрибУб");
		ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
			Ветка.Строки[0].Строки[0].Данные, Узел_ОтчПрибУб);
		
		МногострочнаяЧасть = Ветка.ДанныеМногострочныхЧастей.П00031М1;
		ПрототипУзла_ПрФинИнстр = ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел_ФинОтчет, "ПрФинИнстр");
		Для Каждого СтрокаМСЧ Из МногострочнаяЧасть.Строки Цикл
			Экземпляр_ПрФинИнстр = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(ПрототипУзла_ПрФинИнстр);
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				СтрокаМСЧ.Данные, Экземпляр_ПрФинИнстр);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ПрФинИнстр);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_СвУчИСБОЮЛМГК);
	
КонецПроцедуры

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
						  СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
						  ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		ДанныеРазделов = Новый Структура;
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
				РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, ДанныеРазделов.Титульный);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",		   ВидПечати);
		
		Если СтруктураМногоуровневыхРазделов.Свойство(СтраницаОтчета.ИмяСтраницы) Тогда
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы, СтруктураПараметров, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов);
		Иначе
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, ОбщиеРеквизитыРазделов, СтруктураРеквизитовФормы,
				ДанныеРазделов);
		КонецЕсли;
	
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(СтруктураРеквизитовФормы, ,
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	//@skip-check bsl-legacy-check-dynamic-feature-access
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
		+ "' за '"
		+ ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
		                       КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
		                       "ФП = Истина")
		+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		СтрИНН = СокрЛП(СтрИНН);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	СтрКПП = "";
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы, СтруктураПараметров, ОбщиеРеквизитыРазделов,
	СтруктураРеквизитовФормы, ДанныеРазделов)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	АдресДанныхРаздела = СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела];
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(АдресДанныхРаздела);
	
	Для НомерСтраницы = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
		ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы, ДанныеРазделов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметров, ОбщиеРеквизитыРазделов, СтруктураРеквизитовФормы,
	ДанныеРазделов, ТабличныйДокумент = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + СтрЗаменить(ИмяФормы, "ФормаОтчета", "") + "_";
	
	ИмяМЧБ = ПрефиксИменМакетов + СтруктураПараметров.ИмяСтраницы;
	
	МакетПечатнойФормы = ПолучитьМакет(ИмяМЧБ);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
	
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   ТабличныйДокумент,
						   СтруктураРеквизитовФормы);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент,
								 СтруктураРеквизитовФормы)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ПараметрыПечати.ИмяСтраницы = "Лист03В" Тогда
		МакетФормыОтчета = ПолучитьМакет(ИмяФормы + "_Лист03Б");
	ИначеЕсли НРег(Прав(ПараметрыПечати.ИмяСтраницы, 5)) = "_прод" Тогда
		МакетФормыОтчета = ПолучитьМакет(ИмяФормы + "_"
		+ Лев(ПараметрыПечати.ИмяСтраницы, СтрДлина(ПараметрыПечати.ИмяСтраницы) - 5));
	Иначе
		МакетФормыОтчета = ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
	КонецЕсли;
		
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
			
			НовСтр = Показатели.Добавить();
			
			НовСтр.Имя 		   = Показатель.Ключ;
			НовСтр.Значение    = Показатель.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы);
			
		КонецЦикла;
		
	Иначе
		ИсходныйМакет = ТабличныйДокумент;
		
		Для Каждого Область Из ИсходныйМакет.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			   И Область.СодержитЗначение = Истина Тогда
				
				НовСтр = Показатели.Добавить();
				
				НовСтр.Имя 		   = Область.Имя;
				НовСтр.Значение    = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, МакетФормыОтчета, СтруктураРеквизитовФормы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН2";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН3";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);

	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП2";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП3";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
						   + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;

	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
								ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
									ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заполнить область ""%1""';
							|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета, СтруктураРеквизитовФормы)
	
	ФорматОбласти = "";
			
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
			
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
					
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Если НЕ Область = Неопределено
		   И Область.ТипЗначения.КвалификаторыЧисла.Разрядность
		   = СтруктураРеквизитовФормы.ОписаниеТиповЧислоЕ.КвалификаторыЧисла.Разрядность
		   И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти
		   = СтруктураРеквизитовФормы.ОписаниеТиповЧислоЕ.КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
			
			СоотвСтрокаФормата.Вставить("ЧДЦ", "0");
			СоотвСтрокаФормата.Вставить("ЧРД", ",");
			СоотвСтрокаФормата.Вставить("ЧС", "0");
			
		КонецЕсли;
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	
	КореньИмениОбласти = Неопределено;
	
	СтрИндексЗнакоместа = "";
	
	ИндексЗнакоместа = 0;
	
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
		
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);

КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы,
								   Область,
								   Знач Значение,
								   ИндексЗнакоместа = 0,
								   Дополнять_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(Дополнять_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь,
							Элементы = Неопределено) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для Каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для Каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Если Элементы = Неопределено Тогда
				ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			Иначе
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для Каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;

		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для Каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина,
						  Элементы);
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьФорматВывода(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы, ТабличныйДокумент) Экспорт
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		СтруктураРеквизитовФормы.мСтрокаФормата
			= "; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	ИменаЧисловыхПоказателейСНастраиваемымФорматом = ИменаЧисловыхПоказателейСНастраиваемымФорматом(ИмяФормы, ИмяРаздела);
	
	ИменаНемногострочныхПоказателей = ИменаЧисловыхПоказателейСНастраиваемымФорматом["ИменаНемногострочныхПоказателей"];
	ИменаМногострочныхПоказателей   = ИменаЧисловыхПоказателейСНастраиваемымФорматом["ИменаМногострочныхПоказателей"];
	
	Для Каждого ИмяПоказателя Из ИменаНемногострочныхПоказателей Цикл
		
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
		ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя];
		ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
		Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
			ЧислоЕЗнак = Новый ОписаниеТипов("Число",
				Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
				ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
		КонецЕсли;
		ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
		ФорматируемаяОбласть.Формат
		= "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + СтруктураРеквизитовФормы.мСтрокаФормата;
		
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из ИменаМногострочныхПоказателей Цикл
		
		Если ИмяПоказателя = "П00013М204003" Тогда
			
			Для Каждого ФорматируемаяОбласть Из ТабличныйДокумент.Области Цикл
				
				Если СтрНачинаетсяС(ФорматируемаяОбласть.Имя, ИмяПоказателя) Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число",
							Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
							ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность
						+ СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			НСтр = 1;
			
			Пока ТабличныйДокумент.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")) <> Неопределено Цикл
				
				ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
				ФорматируемаяОбласть = ТабличныйДокумент.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=")];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
						Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,
						ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность
					+ СтруктураРеквизитовФормы.мСтрокаФормата;
				НСтр = НСтр + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Установливает значение показателя в месте размещения данных.
//
// Параметры:
//   РазмещениеДанных - ТабличныйДокумент, Структура -
//   ИмяПоказателя - Строка -
//   ЗначениеПоказателя - Число, Дата, Строка -
//
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		Если РазмещениеДанных.Области[ИмяПоказателя].СодержитЗначение Тогда
			РазмещениеДанных.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Иначе
			РазмещениеДанных.Области[ИмяПоказателя].Текст = ЗначениеПоказателя;
		КонецЕсли;
	Иначе
		РазмещениеДанных[ИмяПоказателя] = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

#Область Обертки

Функция СтрЧГ0(ФорматируемоеЧисло, ДлинаСтроки = 0)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(ФорматируемоеЧисло, ДлинаСтроки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
