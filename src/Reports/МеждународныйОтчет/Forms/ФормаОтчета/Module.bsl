#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Отчет доступен только для контекстного вызова
	Если НЕ Параметры.Свойство("СформироватьОтчет") Тогда
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Отчет не предназначен для ручного запуска.';
								|en = 'The report is not designed for manual launch.'");
	КонецЕсли;
	
	Элементы.ГруппаОтборПоНаправлению.Видимость = Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям();
	
	Отчет.КратностьСумм = Перечисления.ВидыПредставленияЧисел.БезИзменений;
	Если Параметры.Свойство("Отбор") Тогда
		
		ЗаполнитьЗначенияСвойств(Отчет, Параметры.Отбор);
		
	КонецЕсли;
	
	Если Параметры.Свойство("АдресХранилища") Тогда
		
		АдресХранилища = Параметры.АдресХранилища;
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
	Если Параметры.СформироватьОтчет Тогда
		
		СформироватьОтчет = Параметры.СформироватьОтчет;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрыРасшифровки") Тогда
		ПараметрыРасшифровки = Параметры.ПараметрыРасшифровки; //Структура
		ЗаполнитьЗначенияСвойств(Отчет, ПараметрыРасшифровки);
		ЗаполнитьЗначенияСвойств(Отчет, ПараметрыРасшифровки.Отбор);
		Если ПараметрыРасшифровки.Отбор.Свойство("Организация") И ЗначениеЗаполнено(ПараметрыРасшифровки.Отбор.Организация) Тогда
			ИспользоватьОтборПоОрганизациям = Истина;
			Если ТипЗнч(ПараметрыРасшифровки.Отбор.Организация) = Тип("Массив") Тогда
				МассивОрганизация = ПараметрыРасшифровки.Отбор.Организация;
			Иначе
				МассивОрганизация = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыРасшифровки.Отбор.Организация);
			КонецЕсли;
			Организации.ЗагрузитьЗначения(МассивОрганизация);
			ПараметрыРасшифровки.Удалить("Организация");
		КонецЕсли;
		Если ПараметрыРасшифровки.Отбор.Свойство("Подразделение") И ЗначениеЗаполнено(ПараметрыРасшифровки.Отбор.Подразделение) Тогда
			ИспользоватьОтборПоПодразделениям = Истина;
			Если ТипЗнч(ПараметрыРасшифровки.Отбор.Подразделение) = Тип("Массив") Тогда
				МассивПодразделений = ПараметрыРасшифровки.Отбор.Подразделение;
			Иначе
				МассивПодразделений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыРасшифровки.Отбор.Подразделение);
			КонецЕсли;
			Подразделения.ЗагрузитьЗначения(МассивПодразделений);
			ПараметрыРасшифровки.Удалить("Подразделение");
		КонецЕсли;
		Если ПараметрыРасшифровки.Отбор.Свойство("НаправлениеДеятельности") И ЗначениеЗаполнено(ПараметрыРасшифровки.Отбор.НаправлениеДеятельности) Тогда
			ИспользоватьОтборПоНаправлениям = Истина;
			Если ТипЗнч(ПараметрыРасшифровки.Отбор.НаправлениеДеятельности) = Тип("Массив") Тогда
				МассивНаправленийДеятельности = ПараметрыРасшифровки.Отбор.НаправлениеДеятельности;
			Иначе
				МассивНаправленийДеятельности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыРасшифровки.Отбор.НаправлениеДеятельности);
			КонецЕсли;
			Направления.ЗагрузитьЗначения(МассивНаправленийДеятельности);
			ПараметрыРасшифровки.Удалить("НаправлениеДеятельности");
		КонецЕсли;
		ПараметрыРасшифровки.Показатель.Вставить("Отбор", ПараметрыРасшифровки.Отбор);
		Если ПараметрыРасшифровки.Свойство("ВидСубконто") Тогда
			ПараметрыРасшифровки.Показатель.Вставить("ВидСубконто", ПараметрыРасшифровки.ВидСубконто);
		КонецЕсли;
		ПериодОтчета = ПараметрыРасшифровки.ПериодОтчета; // СтандартныйПериод - 
		Отчет.НачалоПериода = ПериодОтчета.ДатаНачала;
		Отчет.КонецПериода = ПериодОтчета.ДатаОкончания;
		Ресурс = ПараметрыРасшифровки.Ресурс;
		ДанныеПоказателя = ПоместитьВоВременноеХранилище(ПараметрыРасшифровки.Показатель, УникальныйИдентификатор);
		ПоказательРасшифровки = ПараметрыРасшифровки.Показатель; // Структура -  
		ПроизводныйПоказатель = ПоказательРасшифровки.Ссылка;
		Заголовок = НСтр("ru = 'Расшифровка показателя:';
						|en = 'Indicator drill-down:'")+ " " + ПоказательРасшифровки.НаименованиеДляПечати;
		
		Элементы.ГруппаДополнительнаяКоманднаяПанель.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьРесурсОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ ЗначениеЗаполнено(ПроизводныйПоказатель) Тогда
		ОбновитьТекстЗаголовка(ЭтаФорма);
	КонецЕсли;
	
	ИБФайловая = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроизводныйПоказатель) Тогда
		УстановитьВидимостьПанелиНастроек(Ложь);
	КонецЕсли;
	
	Если СформироватьОтчет Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		ПодключитьОбработчикОжидания("СформироватьНепосредственно", 0.1, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	Элементы.ПанельНастроек.Пометка = Элементы.ГруппаПанельНастроек.Видимость;
	
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
	РассчитатьПоказатели(ОсновнойПоказатель);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	ВариантМодифицирован					= Ложь;
	ПользовательскиеНастройкиМодифицированы = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)

	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ВидОтчета", Отчет.ВидОтчета);
	ДанныеОтчета.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ДанныеОтчета.Вставить("КонецПериода", Отчет.КонецПериода);
	ДанныеОтчета.Вставить("КратностьСумм", Отчет.КратностьСумм);
	ДанныеОтчета.Вставить("СкрыватьНастройкиПриФормированииОтчета", СкрыватьНастройкиПриФормированииОтчета);
	ДанныеОтчета.Вставить("Организации", Организации.ВыгрузитьЗначения());
	ДанныеОтчета.Вставить("Подразделения", Подразделения.ВыгрузитьЗначения());
	
	Настройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", ДанныеОтчета);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)

	ВидОтчета = Отчет.ВидОтчета;
	КомплектОтчетности = Отчет.КомплектОтчетности;
	
	Если НЕ Параметры.Свойство("ПараметрыРасшифровки") Тогда
		Если Настройки <> Неопределено И Настройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДанныеОтчета = Настройки.ДополнительныеСвойства.ДанныеОтчета;
			Если ТипЗнч(ДанныеОтчета) = Тип("Структура") Тогда
				ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеОтчета);
				ЗаполнитьЗначенияСвойств(Отчет, ДанныеОтчета);
				Организации.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
				Организации.ЗагрузитьЗначения(ДанныеОтчета.Организации);
				Подразделения.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
				Подразделения.ЗагрузитьЗначения(ДанныеОтчета.Подразделения);
				ИспользоватьОтборПоОрганизациям = Организации.Количество();
				ИспользоватьОтборПоПодразделениям = Подразделения.Количество();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Элементы.ПанельНастроек.Заголовок = НСтр("ru = 'Быстрые настройки';
											|en = 'Quick settings'");
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		Отчет.ВидОтчета = ВидОтчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомплектОтчетности) Тогда
		Отчет.КомплектОтчетности = КомплектОтчетности;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ПараметрыРасшифровки") Тогда
		ОбновитьТекстЗаголовка(ЭтаФорма);
	КонецЕсли;
	
	УстановитьТекущийГодВПустойПериод();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)

	СформироватьНепосредственно();

КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроек(Команда)

	УстановитьВидимостьПанелиНастроек(Не Элементы.ГруппаПанельНастроек.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	НаименованиеВидаОтчета = Строка(Отчет.ВидОтчета);
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?';
							|en = 'Report not generated. Generate?'");

		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект, Новый Структура("НаименованиеВидаОтчета", НаименованиеВидаОтчета)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОтправитьПоЭлектроннойПочтеФрагмент(НаименованиеВидаОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НаименованиеВидаОтчета = ДополнительныеПараметры.НаименованиеВидаОтчета;
	
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьНепосредственно();
	
	ОтправитьПоЭлектроннойПочтеФрагмент(НаименованиеВидаОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеФрагмент(Знач НаименованиеВидаОтчета)
	
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ЭтаФорма.Результат, УникальныйИдентификатор));
	Вложение.Вставить("Представление", НаименованиеВидаОтчета);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = НаименованиеВидаОтчета;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд расчета показателей.

&НаКлиенте
Процедура ВыбратьПоказательНажатие(Элемент)

	Меню = МенюВидовПоказателей(Элементы.КомандыВидовПоказателей);
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ПослеВыбораПоказателя", ЭтотОбъект), Меню, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднее(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМинимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаксимум(Команда)
	РассчитатьПоказатели(Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПоказатели(Команда)
	РазвернутьОбластьПоказателей = Не Элементы.РассчитатьВсеПоказатели.Пометка;
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоказатели(Команда)
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	ОбновитьДатыПериода(); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьДатыПериода();
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьДатыПериода();
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомплектОтчетностиПриИзменении(Элемент)
	
	КомплектОтчетностиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КомплектОтчетностиПриИзмененииСервер()
	
	СписокОтчетов = Элементы.ВидОтчета.СписокВыбора;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОтчетов.ВидФинансовогоОтчета КАК ВидФинансовогоОтчета
	|ИЗ
	|	Справочник.КомплектыФинансовыхОтчетов.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Отчет.КомплектОтчетности);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОтчетов.Добавить(Выборка.ВидФинансовогоОтчета);
	КонецЦикла;
	
	Если СписокОтчетов.Количество() > 0 Тогда
		Отчет.ВидОтчета = СписокОтчетов[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрОтчетаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	МеждународнаяОтчетностьКлиент.ОбработкаРасшифровкиОтчета(ЭтаФорма, Элемент, Расшифровка);

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ПодключитьОбработчикОжидания("РассчитатьПоказателиДинамически", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьНепосредственно()
	
	ОчиститьСообщения();
	
	РезультатВыполнения = СформироватьОтчетСервер();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелиНастроек(Показать)
	
	Элементы.ГруппаПанельНастроек.Видимость = Показать;
	Элементы.ПанельНастроек.Пометка = Элементы.ГруппаПанельНастроек.Видимость;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()

	ОтборОтчета = Новый Структура;
	Если ИспользоватьОтборПоОрганизациям Тогда
		ОтборОтчета.Вставить("Организация", Организации.ВыгрузитьЗначения());
	КонецЕсли;
	Если ИспользоватьОтборПоПодразделениям Тогда
		ОтборОтчета.Вставить("Подразделение", Подразделения.ВыгрузитьЗначения());
	КонецЕсли;
	Если ИспользоватьОтборПоНаправлениям Тогда
		ОтборОтчета.Вставить("НаправлениеДеятельности", Направления.ВыгрузитьЗначения());
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Отчет.ВидОтчета, 
							"ВыводитьКодСтроки,ВыводитьПримечание,ЗаголовокКодаСтроки,ЗаголовокПримечания,ЯзыкОтчета");
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВыводитьКодСтроки",         Реквизиты.ВыводитьКодСтроки);
	ПараметрыОтчета.Вставить("ВыводитьПримечание",        Реквизиты.ВыводитьПримечание);
	ПараметрыОтчета.Вставить("ЗаголовокКодаСтроки",       Реквизиты.ЗаголовокКодаСтроки);
	ПараметрыОтчета.Вставить("ЗаголовокПримечания",       Реквизиты.ЗаголовокПримечания);
	ПараметрыОтчета.Вставить("ЯзыкОтчета",                Реквизиты.ЯзыкОтчета);
	ПараметрыОтчета.Вставить("ПериодОтчета",              МеждународнаяОтчетностьСервер.ПериодОтчета(
												Отчет.НачалоПериода, КонецДня(Отчет.КонецПериода)));
	ПараметрыОтчета.Вставить("Отбор",                     ОтборОтчета);
	ПараметрыОтчета.Вставить("КомплектОтчетности",        Отчет.КомплектОтчетности);
	ПараметрыОтчета.Вставить("ВидОтчета",                 Отчет.ВидОтчета);
	ПараметрыОтчета.Вставить("Ресурс",                    Ресурс);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",         ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	ПараметрыОтчета.Вставить("ИдентификаторФормыОтчета",  УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("КратностьСумм",             Отчет.КратностьСумм);
	Если НЕ ПроизводныйПоказатель.Пустая() Тогда
		ПоказательРасшифровки = ПолучитьИзВременногоХранилища(ДанныеПоказателя);
		ПараметрыОтчета.Вставить("ДанныеПоказателя",      ПоказательРасшифровки);
		ПараметрыОтчета.Вставить("АдресДанныхПоказателя", ДанныеПоказателя);
	КонецЕсли;
	ПараметрыОтчета.Вставить("ДатаФормированияОтчета", ТекущаяДатаСеанса());
	
	Возврат ПараметрыОтчета;

КонецФункции

&НаКлиенте
Процедура ОбновитьДатыПериода()

	Если ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоМесяца(Отчет.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
		Отчет.КонецПериода = КонецМесяца(Отчет.КонецПериода);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	Отчет = Форма.Отчет;
	ЗаголовокОтчета = НСтр("ru = 'Международный отчет';
							|en = 'Financial report'");
	Если ЗначениеЗаполнено(Отчет.ВидОтчета) Тогда
		ЗаголовокОтчета = Строка(Отчет.ВидОтчета);
	КонецЕсли;
	
	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийГодВПустойПериод()
	
	Если НЕ ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоГода(ТекущаяДатаСеанса());
		Отчет.КонецПериода = КонецГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетСервер()

	УстановитьТекущийГодВПустойПериод();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		МеждународнаяОтчетностьСервер.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		ИмяПроцедуры = "МеждународнаяОтчетностьСервер.СформироватьОтчет";
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ИмяПроцедуры,
			ПараметрыОтчета,
			ОтчетыУТКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));

		АдресХранилища	   = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(ИБФайловая);
	КонецЕсли;
	
	МеждународнаяОтчетностьКлиентСервер.СкрыватьНастройкиПриФормированииОтчета(ЭтаФорма);
	Модифицированность = Ложь;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(ИБФайловая = Неопределено)

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат = РезультатВыполнения.Результат;

	Если ИБФайловая = Неопределено Тогда
		ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
	Если НЕ ИБФайловая И РезультатВыполнения.Свойство("СообщенияОбОшибках") Тогда
		Для Каждого Сообщение Из РезультатВыполнения.СообщенияОбОшибках Цикл
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	Если НЕ ЗначениеЗаполнено(Отчет.ВидОтчета) Тогда
		ЗаполнитьЗначенияСвойств(Отчет, РезультатВыполнения);
	КонецЕсли;
	
	Если Параметры.Свойство("ПользовательскиеНастройки") Тогда
		Если Параметры.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеОтчета") Тогда
			ДанныеОтчета = Параметры.ПользовательскиеНастройки.ДополнительныеСвойства.ДанныеОтчета;
			Если ТипЗнч(ДанныеОтчета) = Тип("ХранилищеЗначения") Тогда
				ДанныеОтчета = ДанныеОтчета.Получить();
				ЗаполнитьЗначенияСвойств(Отчет, ДанныеОтчета);
				Ресурс = ДанныеОтчета.Ресурс;
				Организации.ЗагрузитьЗначения(ДанныеОтчета.Организации.ВыгрузитьЗначения());
				ИспользоватьОтборПоОрганизациям = Организации.Количество() > 0;
				Подразделения.ЗагрузитьЗначения(ДанныеОтчета.Подразделения.ВыгрузитьЗначения());
				ИспользоватьОтборПоПодразделениям = Подразделения.Количество() > 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьРесурсОтчета();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРесурсОтчета()
	
	Если ЗначениеЗаполнено(Отчет.ВидОтчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПланыСчетов.ПланСчетов КАК ПланСчетов
		|ИЗ
		|	Справочник.ВидыФинансовыхОтчетов.ПланыСчетов КАК ТаблицаПланыСчетов
		|ГДЕ
		|	ТаблицаПланыСчетов.Ссылка = &ВидОтчета";
		Запрос.УстановитьПараметр("ВидОтчета", Отчет.ВидОтчета);
		ПланыСчетовОтчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПланСчетов");
		
		МеждународнаяОтчетностьСервер.ЗаполнитьСписокРесурсовОтчета(Элементы.Ресурс, ВалютыРесурсов, ПланыСчетовОтчета);
		
		Если Элементы.Ресурс.СписокВыбора.Количество() > 0
			И (Ресурс = "" ИЛИ Элементы.Ресурс.СписокВыбора.НайтиПоЗначению(Ресурс) = Неопределено) Тогда
			Ресурс = Элементы.Ресурс.СписокВыбора[0].Значение;
		КонецЕсли;
		
		Элементы.Ресурс.Видимость =  Элементы.Ресурс.СписокВыбора.Количество() > 0;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РасчетПоказателей

// Параметры:
//  Родитель - ГруппаФормы
//  Меню - Неопределено
//       - СписокЗначений
// 
// Возвращаемое значение:
//  - Неопределено
//  - СписокЗначений
//
&НаКлиенте
Функция МенюВидовПоказателей(Родитель, Меню = Неопределено)

	Если Меню = Неопределено Тогда
		Меню = Новый СписокЗначений;
	КонецЕсли;

	ЭлементыМеню = Родитель.ПодчиненныеЭлементы; // ЭлементыФормы

	Для Каждого Элемент Из ЭлементыМеню Цикл

		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") Тогда
			Меню.Добавить(Элемент.Имя, Элемент.Заголовок, ОсновнойПоказатель = Элемент.Имя);
		Иначе
			МенюВидовПоказателей(Элемент, Меню);
		КонецЕсли;

	КонецЦикла;

	ЭлементМеню = Меню.НайтиПоЗначению(Элементы.РассчитатьВсеПоказатели.Имя);

	Если ЭлементМеню <> Неопределено Тогда
		ЭлементМеню.Пометка = РазвернутьОбластьПоказателей;
	КонецЕсли;

	Возврат Меню;

КонецФункции

&НаКлиенте
Процедура ПослеВыбораПоказателя(ВыбранныйПоказатель, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныйПоказатель) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйПоказатель.Значение = Элементы.РассчитатьВсеПоказатели.Имя Тогда

		РазвернутьОбластьПоказателей = Не Элементы.РассчитатьВсеПоказатели.Пометка;
		ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);

	Иначе
		РассчитатьПоказатели(ВыбранныйПоказатель.Значение);
	КонецЕсли;

КонецПроцедуры

// Выполняет расчет и вывод показателей выделенной области ячеек.
// См. обработчик события ОтчетТабличныйДокументПриАктивизацииОбласти.
//
&НаКлиенте
Процедура РассчитатьПоказателиДинамически()

	РассчитатьПоказатели();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(ТекущаяКоманда = "")

	Показатель = "";
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "Результат", ТекущаяКоманда, 2);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
