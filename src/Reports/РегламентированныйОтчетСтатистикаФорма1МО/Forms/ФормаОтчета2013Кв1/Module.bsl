&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "20/12/2013";
	// Код отчета, равен коду по ОКУД.
	СтруктураРеквизитовФормы.мКодОтчета   = "0601022";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2013Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	ФормироватьСтруктуруСвойствСтраниц();
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Документ скопирован.
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	// 0 - нет
	// 1 - есть одна многострочная часть
	// 2 - и более, точное кол-во число многострочных частей на листе
	// Позволяет записывать многострочность в многостраничных документ либо как ТаблицуЗначений, либо как Структуру
	// В случае, если как Структура, то необходима еще одна процедура СформироватьСтруктуруДанныхДопСтрокСтраницы
	// Только для Многостраничных документов !
	// 3. Будет ли очищаться раздел по кнопки "Очистить"
	// 4. Если раздел многостраничный, параметр МногостраничностьВРазделе = Истина, тогда имя поля, по которому
	// будет осуществляться Представление доп. страницы
	// 5. Есть ли в разделе значения, отображаемые в квадратном представлении
	// 6. Обязательный раздел для выгрузки или нет
	// 7. Обязательный раздел для выгрузки или нет
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                    = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			
			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "по состоянию на 31 декабря "
		+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " года";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " года";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " по состоянию на 31 декабря " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрНайти(Область.Имя, "R") = 1 Тогда 
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	ИначеЕсли Лев(Область.Имя, 8) = "СтатусМО" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Область.Значение = Не Область.Значение;
		
		Если Область.Значение Тогда
			
			мФормаОтчета = ЭтаФорма.ПолеТабличногоДокументаФормаОтчета;
			
			мФормаОтчета.Области["СтатусМО10"].Значение = ?(мФормаОтчета.Области["СтатусМО10"].Имя = Область.Имя, Истина, Ложь);
			мФормаОтчета.Области["СтатусМО11"].Значение = ?(мФормаОтчета.Области["СтатусМО11"].Имя = Область.Имя, Истина, Ложь);
			мФормаОтчета.Области["СтатусМО12"].Значение = ?(мФормаОтчета.Области["СтатусМО12"].Имя = Область.Имя, Истина, Ложь);
			мФормаОтчета.Области["СтатусМО13"].Значение = ?(мФормаОтчета.Области["СтатусМО13"].Имя = Область.Имя, Истина, Ложь);
			мФормаОтчета.Области["СтатусМО15"].Значение = ?(мФормаОтчета.Области["СтатусМО15"].Имя = Область.Имя, Истина, Ложь);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И (Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти >= 0
			И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти <= 3) Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				Если Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 3 Тогда
					ОтображениеНуля = "0.000";
				ИначеЕсли Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 2 Тогда
					ОтображениеНуля = "0.00";
				ИначеЕсли Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 1 Тогда
					ОтображениеНуля = "0.0";
				ИначеЕсли Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
					ОтображениеНуля = "0";
				КонецЕсли;
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	РасчетНаКлиенте(, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	
	мФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	// Строка 2 = сумме строк 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11, 2.12, 2.13.
	ТекСумма = 0;
	Для НомСтр = 1 По 13 Цикл
		ТекСумма = ТекСумма
				 + мФормаОтчета.Области["П002" + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "000"].Значение;
	КонецЦикла;
	мФормаОтчета.Области["П002000000"].Значение = ТекСумма;
	
	// Строка 3 = сумме строк 3.1-3.10.
	ТекСумма = 0;
	Для НомСтр = 1 По 10 Цикл
		ТекСумма = ТекСумма
				 + мФормаОтчета.Области["П003" + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "000"].Значение;
	КонецЦикла;
	мФормаОтчета.Области["П003000000"].Значение = ТекСумма;
	
	// Строка 4.1 = сумме строк 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8.
	ТекСумма = 0;
	Для НомСтр = 2 По 8 Цикл
		ТекСумма = ТекСумма
				 + мФормаОтчета.Области["П004" + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "000"].Значение;
	КонецЦикла;
	мФормаОтчета.Области["П004001000"].Значение = ТекСумма;
	
	// Строка 4.1.1 = сумме строк 4.2.1, 4.3.1, 4.4.1, 4.5.1, 4.6.1, 4.7.1, 4.8.1.
	ТекСумма = 0;
	Для НомСтр = 2 По 8 Цикл
		ТекСумма = ТекСумма
				 + мФормаОтчета.Области["П004" + Формат(НомСтр, "ЧЦ=3; ЧВН=; ЧГ=") + "001"].Значение;
	КонецЦикла;
	мФормаОтчета.Области["П004001001"].Значение = ТекСумма;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?';
																				|en = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда        
		Возврат;        
	Иначе        
		Очистить();        
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();

	// Устанавливаем флаг модифицированности формы.
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;
	
	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки, не подлежащие очистке.
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;
	
	Расчет(Форма, "", "");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?';
		|en = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	// Формируем список сохранения.
	СписокСохранения = Новый Структура();
	
	// Вставляем данные редактируемых ячеек таблицы.
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многострочных разделов.
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);
	
	// Вставляем данные вариантов автозаполнения ячеек.
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	
	// Вставляем версию формы.
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
								|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбластиСтроки = Новый Структура;
	
	Для Каждого Обл Из ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Если Обл.Имя = "ПолеНомерКорректировки" Тогда 
				Продолжить;
			КонецЕсли;
			ОбластиСтроки.Вставить(Обл.Имя, ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ПечатнаяФорма.Вывести(Обл.Значение);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 1-МО");
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьНомерКорректировки(СтруктураРеквизитовФормы.мПечатныеФормы[0].Значение);
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

// Заполняет дату подписания отчета должностными лицами, в зависимости от
// наличия данных по этим лицам.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	// Процедура "заглушка", для роОчистить.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru = 'В ходе выгрузки были найдены ошибки.';
							|en = 'В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
								|en = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " по состоянию на 31 декабря " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2013Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// Проверка показателей раздела.
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задан код ОКПО организации!", ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задано наименование организации!", ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Дополнительно, для формы 1-МО.
	СтатусМОЗаполнен = Ложь;
	Для КодСтатуса = 10 По 15 Цикл
		Если КодСтатуса = 14 Тогда
			Продолжить;
		КонецЕсли;
		Если ПараметрыВыгрузки["СтатусМО" + Формат(КодСтатуса, "ЧГ=")] Тогда
			СтатусМОЗаполнен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не СтатусМОЗаполнен Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указан статус муниципального образования!",
			ИмяПоляТаблДокумента, "СтатусМО13");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указана должность лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	ПоказателиНеанализируемыеНаЗаполненность.Добавить("ПР00000000");
	
	// Проверка на незаполненный отчет.
	Если НЕ РегламентированнаяОтчетность.ПроверитьРазделыНаНаличиеИнформации(ЭтаФорма, ДеревоВыгрузки, ИмяПоляТаблДокумента, ПоказателиНеанализируемыеНаЗаполненность) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Отчет не заполнен!",
		ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// КОНТРОЛЬ показателей формы (Указания по заполнению Формы 1-МО).
	
	// Территория.
	// Строка 1 > 0.
	Если Не (ПараметрыВыгрузки["ПР01000000"] > 0) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 1 должно быть больше нуля!",
			ИмяПоляТаблДокумента, "П001000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Объекты бытового обслуживания.
	// Если строка 2.6 ≠ 0, то строка 2.6.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР02006000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР02006001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 2.6 не равно нулю, то значение в строке 2.6.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П002006001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 2.7 ≠ 0, то строка 2.7.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР02007000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР02007001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 2.7 не равно нулю, то значение в строке 2.7.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П002007001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 2.9 ≠ 0, то строка 2.9.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР02009000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР02009001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 2.9 не равно нулю, то значение в строке 2.9.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П002009001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 2.10 ≠ 0, то строка 2.10.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР02010000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР02010001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 2.10 не равно нулю, то значение в строке 2.10.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П002010001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Объекты розничной торговли и общественного питания.
	// Строка 4.1 ≥ строке 4.9.
	Если Не (ПараметрыВыгрузки["ПР04001000"] >= ПараметрыВыгрузки["ПР04009000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 4.1 должно быть больше или равно значению в строке 4.9!",
			ИмяПоляТаблДокумента, "П004001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 4.1 ≠ 0, то строка 4.1.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04001001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.1 не равно нулю, то значение в строке 4.1.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004001001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 4.1.1 ≥ строке 4.9.1.
	Если Не (ПараметрыВыгрузки["ПР04001001"] >= ПараметрыВыгрузки["ПР04009001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 4.1.1 должно быть больше или равно значению в строке 4.9.1!",
			ИмяПоляТаблДокумента, "П004001001");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 4.2 ≠ 0, то строка 4.2.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04002000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04002001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.2 не равно нулю, то значение в строке 4.2.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004002001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.3 ≠ 0, то строка 4.3.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04003000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04003001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.3 не равно нулю, то значение в строке 4.3.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004003001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.4 ≠ 0, то строка 4.4.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04004000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04004001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.4 не равно нулю, то значение в строке 4.4.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004004001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.5 ≠ 0, то строка 4.5.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04005000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04005001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.5 не равно нулю, то значение в строке 4.5.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004005001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.6 ≠ 0, то строка 4.6.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04006000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04006001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.6 не равно нулю, то значение в строке 4.6.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004006001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.7 ≠ 0, то строка 4.7.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04007000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04007001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.7 не равно нулю, то значение в строке 4.7.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004007001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.8 ≠ 0, то строка 4.8.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04008000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04008001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.8 не равно нулю, то значение в строке 4.8.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004008001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.9 ≠ 0, то строка 4.9.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04009000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04009001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.9 не равно нулю, то значение в строке 4.9.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004009001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.10 ≠ 0, то строка 4.10.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04010000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04010001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.10 не равно нулю, то значение в строке 4.10.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004010001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.12 ≠ 0, то строка 4.12.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР04012000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04012001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.12 не равно нулю, то значение в строке 4.12.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004012001");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.14 ≠ 0, то строки 4.14.1 ≠ 0, 4.14.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР04014000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04014001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.14 не равно нулю, то значение в строке 4.14.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004014001");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР04014002"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.14 не равно нулю, то значение в строке 4.14.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П004014002");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.15 ≠ 0, то строки 4.15.1 ≠ 0, 4.15.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР04015000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04015001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.15 не равно нулю, то значение в строке 4.15.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004015001");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР04015002"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.15 не равно нулю, то значение в строке 4.15.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П004015002");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 4.16 ≠ 0, то строки 4.16.1 ≠ 0, 4.16.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР04016000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР04016001"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.16 не равно нулю, то значение в строке 4.16.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П004016001");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР04016002"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 4.16 не равно нулю, то значение в строке 4.16.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П004016002");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 4.17 ≥ сумме строк 4.17.1, 4.17.2, 4.17.3, 4.17.4.
	Если Не (ПараметрыВыгрузки["ПР04017000"]
		  >= ПараметрыВыгрузки["ПР04017001"]
		   + ПараметрыВыгрузки["ПР04017002"]
		   + ПараметрыВыгрузки["ПР04017003"]
		   + ПараметрыВыгрузки["ПР04017004"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 4.17 должно быть больше или равно сумме значений в строках 4.17.1, 4.17.2, 4.17.3, 4.17.4!",
			ИмяПоляТаблДокумента, "П004017000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Спортивные сооружения.
	// Строка 5 ≥ строке 5.1.
	Если Не (ПараметрыВыгрузки["ПР05000000"] >= ПараметрыВыгрузки["ПР05001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5 должно быть больше или равно значению в строке 5.1!",
			ИмяПоляТаблДокумента, "П005000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5 ≥ сумме строк 5.2, 5.3, 5.4, 5.5.
	Если Не (ПараметрыВыгрузки["ПР05000000"]
		  >= ПараметрыВыгрузки["ПР05002000"]
		   + ПараметрыВыгрузки["ПР05003000"]
		   + ПараметрыВыгрузки["ПР05004000"]
		   + ПараметрыВыгрузки["ПР05005000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5 должно быть больше или равно сумме значений в строках 5.2, 5.3, 5.4, 5.5!",
			ИмяПоляТаблДокумента, "П005000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5.1 ≥ сумме строк 5.2.1, 5.3.1, 5.4.1, 5.5.1.
	Если Не (ПараметрыВыгрузки["ПР05001000"]
		  >= ПараметрыВыгрузки["ПР05002001"]
		   + ПараметрыВыгрузки["ПР05003001"]
		   + ПараметрыВыгрузки["ПР05004001"]
		   + ПараметрыВыгрузки["ПР05005001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5.1 должно быть больше или равно сумме значений в строках 5.2.1, 5.3.1, 5.4.1, 5.5.1!",
			ИмяПоляТаблДокумента, "П005001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5.2 ≥ строке 5.2.1.
	Если Не (ПараметрыВыгрузки["ПР05002000"] >= ПараметрыВыгрузки["ПР05002001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5.2 должно быть больше или равно значению в строке 5.2.1!",
			ИмяПоляТаблДокумента, "П005002000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5.3 ≥ строке 5.3.1.
	Если Не (ПараметрыВыгрузки["ПР05003000"] >= ПараметрыВыгрузки["ПР05003001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5.3 должно быть больше или равно значению в строке 5.3.1!",
			ИмяПоляТаблДокумента, "П005003000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5.4 ≥ строке 5.4.1.
	Если Не (ПараметрыВыгрузки["ПР05004000"] >= ПараметрыВыгрузки["ПР05004001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5.4 должно быть больше или равно значению в строке 5.4.1!",
			ИмяПоляТаблДокумента, "П005004000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 5.5 ≥ строке 5.5.1.
	Если Не (ПараметрыВыгрузки["ПР05005000"] >= ПараметрыВыгрузки["ПР05005001"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 5.5 должно быть больше или равно значению в строке 5.5.1!",
			ИмяПоляТаблДокумента, "П005005000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 6 ≥ строке 6.1.
	Если Не (ПараметрыВыгрузки["ПР06000000"] >= ПараметрыВыгрузки["ПР06001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 6 должно быть больше или равно значению в строке 6.1!",
			ИмяПоляТаблДокумента, "П006000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строки 6 ≠ 0 и 6.1 ≠ 0, то строка 7 ≠ 0.
	Если ПараметрыВыгрузки["ПР06000000"] <> 0 И ПараметрыВыгрузки["ПР06001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР07000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 6 и 6.1 не равны нулю, то значение в строке 7 не равно нулю!",
				ИмяПоляТаблДокумента, "П007000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Переработка и вывоз отходов.
	// Строка 8 ≥ строке 8.1.
	Если Не (ПараметрыВыгрузки["ПР08000000"] >= ПараметрыВыгрузки["ПР08001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 8 должно быть больше или равно значению в строке 8.1!",
			ИмяПоляТаблДокумента, "П008000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Коммунальная сфера.
	// Строка 15 ≥ строке 15.1.
	Если Не (ПараметрыВыгрузки["ПР15000000"] >= ПараметрыВыгрузки["ПР15001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 15 должно быть больше или равно значению в строке 15.1!",
			ИмяПоляТаблДокумента, "П015000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 15 ≥ строке 15.2.
	Если Не (ПараметрыВыгрузки["ПР15000000"] >= ПараметрыВыгрузки["ПР15002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 15 должно быть больше или равно значению в строке 15.2!",
			ИмяПоляТаблДокумента, "П015000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 17 ≥ строке 17.1.
	Если Не (ПараметрыВыгрузки["ПР17000000"] >= ПараметрыВыгрузки["ПР17001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 17 должно быть больше или равно значению в строке 17.1!",
			ИмяПоляТаблДокумента, "П017000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 18 ≥ строке 18.1.
	Если Не (ПараметрыВыгрузки["ПР18000000"] >= ПараметрыВыгрузки["ПР18001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 18 должно быть больше или равно значению в строке 18.1!",
			ИмяПоляТаблДокумента, "П018000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 18 ≥ строке 18.2.
	Если Не (ПараметрыВыгрузки["ПР18000000"] >= ПараметрыВыгрузки["ПР18002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 18 должно быть больше или равно значению в строке 18.2!",
			ИмяПоляТаблДокумента, "П018000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 19 ≥ строке 19.1.
	Если Не (ПараметрыВыгрузки["ПР19000000"] >= ПараметрыВыгрузки["ПР19001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 19 должно быть больше или равно значению в строке 19.1!",
			ИмяПоляТаблДокумента, "П019000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 19 ≥ строке 19.2.
	Если Не (ПараметрыВыгрузки["ПР19000000"] >= ПараметрыВыгрузки["ПР19002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 19 должно быть больше или равно значению в строке 19.2!",
			ИмяПоляТаблДокумента, "П019000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 20 ≥ строке 20.1.
	Если Не (ПараметрыВыгрузки["ПР20000000"] >= ПараметрыВыгрузки["ПР20001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 20 должно быть больше или равно значению в строке 20.1!",
			ИмяПоляТаблДокумента, "П020000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 20 ≥ строке 20.2.
	Если Не (ПараметрыВыгрузки["ПР20000000"] >= ПараметрыВыгрузки["ПР20002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 20 должно быть больше или равно значению в строке 20.2!",
			ИмяПоляТаблДокумента, "П020000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Учреждения социального обслуживания населения.
	// Если строка 21 ≠ 0, то строка 21.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР21000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР21001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 21 не равно нулю, то значение в строке 21.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П021001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 21 ≠ 0, то строка 22 ≠ 0.
	Если ПараметрыВыгрузки["ПР21000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР22000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 21 не равно нулю, то значение в строке 22 не равно нулю!",
				ИмяПоляТаблДокумента, "П022000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 23 ≠ 0, то строка 23.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР23000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР23001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 23 не равно нулю, то значение в строке 23.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П023001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 24.1 ≥ 0, то строки 24.4 ≥ 0, 24.7 ≥ 0.
	Если ПараметрыВыгрузки["ПР24001000"] >= 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР24004000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.1 больше или равно нулю, то значение в строке 24.4 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024004000");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР24007000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.1 больше или равно нулю, то значение в строке 24.7 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024007000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 24.2 ≥ 0, то строки 24.5 ≥ 0, 24.8 ≥ 0.
	Если ПараметрыВыгрузки["ПР24002000"] >= 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР24005000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.2 больше или равно нулю, то значение в строке 24.5 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024005000");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР24008000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.2 больше или равно нулю, то значение в строке 24.8 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024008000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 24.3 ≥ 0, то строки 24.6 ≥ 0, 24.9 ≥ 0.
	Если ПараметрыВыгрузки["ПР24003000"] >= 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР24006000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.3 больше или равно нулю, то значение в строке 24.6 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024006000");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР24009000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 24.3 больше или равно нулю, то значение в строке 24.9 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П024009000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 25 ≥ 0, то строка 26 ≥ 0.
	Если ПараметрыВыгрузки["ПР25000000"] >= 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР26000000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 25 больше или равно нулю, то значение в строке 26 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П026000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 27 ≥ 0, то строка 28 ≥ 0.
	Если ПараметрыВыгрузки["ПР27000000"] >= 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР28000000"] >= 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 27 больше или равно нулю, то значение в строке 28 должно быть больше или равно нулю!",
				ИмяПоляТаблДокумента, "П028000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Общеобразовательные организации.
	// Если строки 29 ≠ 0 и 29.1 ≠ 0, то строка 30 ≠ 0 (кроме организаций на капитальном ремонте).
	Если ПараметрыВыгрузки["ПР29000000"] <> 0 И ПараметрыВыгрузки["ПР29001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР30000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 29 и 29.1 не равны нулю, то значение в строке 30 не равно нулю (кроме организаций на кап. ремонте)!",
				ИмяПоляТаблДокумента, "П030000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строки 31 ≠ 0 и 31.1 ≠ 0, то строка 32 ≠ 0 (кроме организаций на капитальном ремонте).
	Если ПараметрыВыгрузки["ПР31000000"] <> 0 И ПараметрыВыгрузки["ПР31001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР32000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 31 и 31.1 не равны нулю, то значение в строке 32 не равно нулю (кроме организаций на кап. ремонте)!",
				ИмяПоляТаблДокумента, "П032000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Организация здравоохранения.
	// Если строка 33 ≠ 0, то строка 34 ≠ 0.
	Если ПараметрыВыгрузки["ПР33000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР34000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 33 не равно нулю, то значение в строке 34 не равно нулю!",
				ИмяПоляТаблДокумента, "П034000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 33.1 ≠ 0, то строка 34.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР33001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР34001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 33.1 не равно нулю, то значение в строке 34.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П034001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 45 ≥ строке 45.1.
	Если Не (ПараметрыВыгрузки["ПР45000000"] >= ПараметрыВыгрузки["ПР45001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 45 должно быть больше или равно значению в строке 45.1!",
			ИмяПоляТаблДокумента, "П045000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 45 ≠ 0, то строка 46 ≠ 0.
	Если ПараметрыВыгрузки["ПР45000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР46000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 45 не равно нулю, то значение в строке 46 не равно нулю!",
				ИмяПоляТаблДокумента, "П046000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 47 ≥ сумме строк 47.1, 47.2, 47.3.
	Если Не (ПараметрыВыгрузки["ПР47000000"]
		  >= ПараметрыВыгрузки["ПР47001000"]
		   + ПараметрыВыгрузки["ПР47002000"]
		   + ПараметрыВыгрузки["ПР47003000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 47 должно быть больше или равно сумме значений в строках 47.1, 47.2, 47.3!",
			ИмяПоляТаблДокумента, "П047000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 47 ≠ 0, то строка 48 ≠ 0.
	Если ПараметрыВыгрузки["ПР47000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР48000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 47 не равно нулю, то значение в строке 48 не равно нулю!",
				ИмяПоляТаблДокумента, "П048000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 45 ≠ 0, то строки 49 ≠ 0 и 50 ≠ 0.
	Если ПараметрыВыгрузки["ПР45000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР49000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 45 не равно нулю, то значение в строке 49 не равно нулю!",
				ИмяПоляТаблДокумента, "П049000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Не (ПараметрыВыгрузки["ПР50000000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 45 не равно нулю, то значение в строке 50 не равно нулю!",
				ИмяПоляТаблДокумента, "П050000000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Учреждения культуры и искусства.
	// Если строки 51 и 51.1 ≠ 0, то строка 51.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР51000000"] <> 0 И ПараметрыВыгрузки["ПР51001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР51002000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 51 и 51.1 не равны нулю, то значение в строке 51.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П051002000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 51.2 ≥ строке 51.3.
	Если Не (ПараметрыВыгрузки["ПР51002000"] >= ПараметрыВыгрузки["ПР51003000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 51.2 должно быть больше или равно значению в строке 51.3!",
			ИмяПоляТаблДокумента, "П051002000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строки 52 и 52.1 ≠ 0, то строка 52.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР52000000"] <> 0 И ПараметрыВыгрузки["ПР52001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР52002000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 52 и 52.1 не равны нулю, то значение в строке 52.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П052002000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 52.2 ≥ строке 52.3.
	Если Не (ПараметрыВыгрузки["ПР52002000"] >= ПараметрыВыгрузки["ПР52003000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 52.2 должно быть больше или равно значению в строке 52.3!",
			ИмяПоляТаблДокумента, "П052002000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строки 53 и 53.1 ≠ 0, то строка 53.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР53000000"] <> 0 И ПараметрыВыгрузки["ПР53001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР53002000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 53 и 53.1 не равны нулю, то значение в строке 53.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П053002000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 53.2 ≥ строке 53.3.
	Если Не (ПараметрыВыгрузки["ПР53002000"] >= ПараметрыВыгрузки["ПР53003000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 53.2 должно быть больше или равно значению в строке 53.3!",
			ИмяПоляТаблДокумента, "П053002000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 54 ≠ 0, то строка 54.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР54000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР54001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 54 не равно нулю, то значение в строке 54.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П054001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 54.1 ≥ строке 54.2.
	Если Не (ПараметрыВыгрузки["ПР54001000"] >= ПараметрыВыгрузки["ПР54002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 54.1 должно быть больше или равно значению в строке 54.2!",
			ИмяПоляТаблДокумента, "П054001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 55 ≠ 0, то строка 55.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР55000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР55001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 55 не равно нулю, то значение в строке 55.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П055001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 55.1 ≥ строке 55.2.
	Если Не (ПараметрыВыгрузки["ПР55001000"] >= ПараметрыВыгрузки["ПР55002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 55.1 должно быть больше или равно значению в строке 55.2!",
			ИмяПоляТаблДокумента, "П055001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 56 ≠ 0, то строка 56.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР56000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР56001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 56 не равно нулю, то значение в строке 56.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П056001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 56.1 ≥ строке 56.2.
	Если Не (ПараметрыВыгрузки["ПР56001000"] >= ПараметрыВыгрузки["ПР56002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 56.1 должно быть больше или равно значению в строке 56.2!",
			ИмяПоляТаблДокумента, "П056001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строка 57 ≠ 0, то строка 57.1 ≠ 0.
	Если ПараметрыВыгрузки["ПР57000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР57001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 57 не равно нулю, то значение в строке 57.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П057001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 57.1 ≥ строке 57.2.
	Если Не (ПараметрыВыгрузки["ПР57001000"] >= ПараметрыВыгрузки["ПР57002000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 57.1 должно быть больше или равно значению в строке 57.2!",
			ИмяПоляТаблДокумента, "П057001000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Если строки 58 и 58.1 ≠ 0, то строка 58.2 ≠ 0.
	Если ПараметрыВыгрузки["ПР58000000"] <> 0 И ПараметрыВыгрузки["ПР58001000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР58002000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значения в строках 58 и 58.1 не равны нулю, то значение в строке 58.2 не равно нулю!",
				ИмяПоляТаблДокумента, "П058002000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Строка 58.2 ≥ строке 58.3.
	Если Не (ПараметрыВыгрузки["ПР58002000"] >= ПараметрыВыгрузки["ПР58003000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 58.2 должно быть больше или равно значению в строке 58.3!",
			ИмяПоляТаблДокумента, "П058002000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Организации охраны общественного порядка.
	// Если строка 59≠0, то строка 59.1≠0.
	Если ПараметрыВыгрузки["ПР59000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР59001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 59 не равно нулю, то значение в строке 59.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П059001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если строка 60≠0, то строка 60.1≠0.
	Если ПараметрыВыгрузки["ПР60000000"] <> 0 Тогда
		Если Не (ПараметрыВыгрузки["ПР60001000"] <> 0) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
				"Не выполнено условие контроля: если значение в строке 60 не равно нулю, то значение в строке 60.1 не равно нулю!",
				ИмяПоляТаблДокумента, "П060001000");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Ввод жилья.
	// Строка 62 ≥ строке 62.1.
	Если Не (ПараметрыВыгрузки["ПР62000000"] >= ПараметрыВыгрузки["ПР62001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 62 должно быть больше или равно значению в строке 62.1!",
			ИмяПоляТаблДокумента, "П062000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Муниципальные услуги.
	// Строка 63 ≥ строке 63.1.
	Если Не (ПараметрыВыгрузки["ПР63000000"] >= ПараметрыВыгрузки["ПР63001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 63 должно быть больше или равно значению в строке 63.1!",
			ИмяПоляТаблДокумента, "П063000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Строка 64 ≥ строке 64.1.
	Если Не (ПараметрыВыгрузки["ПР64000000"] >= ПараметрыВыгрузки["ПР64001000"]) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не выполнено условие контроля: значение в строке 64 должно быть больше или равно значению в строке 64.1!",
			ИмяПоляТаблДокумента, "П064000000");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодФормы + "_"
					+ Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ ОтчетныйПериод
					+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
					+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодыИФ.КодФормы + "_"
					+ КодыИФ.Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ КодыИФ.ОтчетныйПериод + "__"
					+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2013Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Для Каждого ЭлемСтруктуры Из ТабДокумент Цикл
		
		ПараметрыВыгрузки.Вставить(СтрЗаменить(ЭлемСтруктуры.Ключ, "П0", "ПР"), ЭлемСтруктуры.Значение);
		
	КонецЦикла;
	
	// Дополнительно, для формы 1-МО.
	Для КодСтатуса = 10 По 15 Цикл
		Если КодСтатуса = 14 Тогда
			Продолжить;
		КонецЕсли;
		Если ТабДокумент["СтатусМО" + Формат(КодСтатуса, "ЧГ=")] Тогда
			ПараметрыВыгрузки.Вставить("ПР00000000", Число(КодСтатуса));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
