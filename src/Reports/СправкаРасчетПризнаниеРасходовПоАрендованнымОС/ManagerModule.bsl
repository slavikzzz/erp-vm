#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеКомпоновкиМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьДанныеРасшифровки", Ложь);
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка", Истина);
	
	Возврат ПараметрыИсполнения;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета) + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВысотаШапки",Результат.ВысотаТаблицы); 
	
КонецПроцедуры

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	НачалоПериода = ?(ПараметрыОтчета.СНачалаГода, НачалоГода(ПараметрыОтчета.НачалоПериода), ПараметрыОтчета.НачалоПериода);
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, ПараметрыОтчета.КонецПериода);

		
	Возврат "Справка-расчет ""Признание расходов по арендованным ОС""" + ПредставлениеПериода;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут.
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, 
			"НачалоПериода", 
			?(ПараметрыОтчета.СначалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),НачалоДня(ПараметрыОтчета.НачалоПериода)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, 
			"КонецПериода", 
			КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ПоддержкаПБУ18",
		УчетнаяПолитика.ПоддержкаПБУ18(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода));
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);

	Таблица = КомпоновщикНастроек.Настройки.Структура;
	
	МассивПоказателей 	= Новый Массив;
	ВыводитьТолькоБУ 	= Ложь;
	
	Если ПараметрыОтчета.ПоказательНУ Тогда 
		СтрокаГруппировки = "НУ";
		МассивПоказателей.Добавить("НУ");
	ИначеЕсли ПараметрыОтчета.ПоказательВР Тогда					
		СтрокаГруппировки = "СРазницами";
		МассивПоказателей.Добавить("БУ");
		МассивПоказателей.Добавить("ПР");
		МассивПоказателей.Добавить("ВР");
	Иначе
		СтрокаГруппировки = "БУ";
		МассивПоказателей.Добавить("БУ");
		ВыводитьТолькоБУ = Истина;
	КонецЕсли;

	ГруппировкаКонтрагент = НайтиПоИмени(Таблица,"ГруппировкаКонтрагент" + СтрокаГруппировки);
	ГруппировкаДоговор = НайтиПоИмени(Таблица,"ГруппировкаДоговор" + СтрокаГруппировки);
	ГруппировкаПериодРасчета = НайтиПоИмени(Таблица,"ГруппировкаПериодРасчета" + СтрокаГруппировки);
	
	ГруппировкаКонтрагент.Использование = Истина;
	ГруппировкаДоговор.Использование = Истина;
	ГруппировкаПериодРасчета.Использование = Истина;
	
	// Установим отбор, чтобы не показывать строки с только нулевыми суммами
	
	МассивСумм = Новый Массив;
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	ОтборГруппировки = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения =  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	МассивСумм.Добавить("ЗадолженностьНачальныйОстаток");
	МассивСумм.Добавить("ЗадолженностьПриход");
	МассивСумм.Добавить("ЗадолженностьПриходНДС");
	МассивСумм.Добавить("ЗадолженностьРасход");
	МассивСумм.Добавить("ЗадолженностьРасходНДС");
	МассивСумм.Добавить("ЗадолженностьКонечныйОстаток");
	Для Каждого ИмяСумм Из МассивСумм Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм,0,ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;

	МассивСумм.Очистить();
	МассивСумм.Добавить("Амортизация");
	МассивСумм.Добавить("СуммаПлатежа");
	МассивСумм.Добавить("КорректировкаАмортизации");
	МассивСумм.Добавить("ИтогоАмортизация");
	МассивСумм.Добавить("ВсегоРасходыПоАренде");

	Для Каждого ИмяСумм Из МассивСумм Цикл
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ИмяСумм + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	МассивГруппировок = Новый Массив;
	МассивГруппировок.Добавить(ГруппировкаКонтрагент);
	МассивГруппировок.Добавить(ГруппировкаДоговор);
	МассивГруппировок.Добавить(ГруппировкаПериодРасчета);
	
	Для Каждого ИмяГруппировки Из МассивГруппировок Цикл
	
		Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		Если ИмяГруппировки = ГруппировкаКонтрагент Тогда
	 		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Контрагент");
	 	ИначеЕсли ИмяГруппировки = ГруппировкаДоговор Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Договор");
		ИначеЕсли ИмяГруппировки = ГруппировкаПериодРасчета Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ПериодРасчета");
		КонецЕсли;
		
		Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьНачальныйОстаток");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьПриходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасход");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьРасходНДС");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"ЗадолженностьКонечныйОстаток");

		// Вывод названий суммовых покателей
		Если ПараметрыОтчета.ПоказательВР Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Показатели." + ИмяПоказателя);
			КонецЦикла;
			
		КонецЕсли;
		
		// Расходы по амортизациии
		Если ПараметрыОтчета.ПоказательВР Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
		Иначе
			ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		КонецЕсли;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "Амортизация" + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;

		Если Не ВыводитьТолькоБУ Тогда
			// Расходы по арендным платежам
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "СуммаПлатежа" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;

			// Корректировка амортизации
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "КорректировкаАмортизации" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;

			// Итого расходы по амортизации
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
			Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ИтогоАмортизация" + ИмяПоказателя);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;		
		
		// Всего расходы по аренде
		Если Не ВыводитьТолькоБУ Тогда 
			Группа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
			ПодГруппа	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение 		= РасположениеПоляКомпоновкиДанных.Вертикально;
		Иначе
			ПодГруппа = ИмяГруппировки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПодГруппа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
		КонецЕсли;
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ПодГруппа, "ВсегоРасходыПоАренде" + ИмяПоказателя);
			КонецЕсли;	
		КонецЦикла;
	
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		ВысотаШапки = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ВысотаШапки = 0;
	КонецЕсли;
	
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество() + ВысотаШапки); 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры                                          

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	Область = Результат.НайтиТекст("###",Результат.Область("r1c1"));
	Пока НЕ Область = Неопределено Цикл
		
		Область.Текст = Формат(СтрЗаменить(Область.Текст,"###",""),"ЧДЦ=2");
		Область.Примечание.Текст = "Ожидается изменение результатов
		|регламентной операции ""Амортизация"",
		|рекомендуется выполнить ее повторно и
		|проверить проводки начисления амортизации";
		Область.Примечание.ЦветФона = WebЦвета.АкварельноСиний;
		Область.Примечание.Шрифт = Метаданные.ЭлементыСтиля.ШрифтВажнойНадписи.Значение;
		Область = Результат.НайтиТекст("###",Область);
		
	КонецЦикла;	
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Если ПараметрыОтчета.Свойство("ВысотаШапки") Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСлева = 1;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ПризнаниеРасходовПоАрендованнымОС", "Признание расходов по арендованным ОС"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#КонецЕсли