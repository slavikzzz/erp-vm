#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		МодульУчетНДФЛВХО = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				МодульУчетНДФЛВХО.ЗаменитьВЗапросеПеречислениеНДФЛВБюджет(НаборДанных.Запрос);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "&ПеречислениеНДФЛВБюджет", "НЕОПРЕДЕЛЕНО");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПериодНалоговый
		= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодНалоговый"));
		
	Если ПериодНалоговый.Использование Тогда
		КонецНалоговогоПериода
			= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецНалоговогоПериода"));
		Если ПериодНалоговый.Значение.ДатаОкончания = Дата('00010101') Тогда
			КонецНалоговогоПериода.Значение = МаксимальнаяДата();
		Иначе
			КонецНалоговогоПериода.Значение = ПериодНалоговый.Значение.ДатаОкончания;
		КонецЕсли;
		КонецНалоговогоПериода.Использование = Истина;
	КонецЕсли;
	
	ПериодРасчета
		= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодРасчета"));
		
	Если ПериодРасчета.Использование Тогда
		КонецПериодаРасчета
			= НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериодаРасчета"));
		Если ПериодРасчета.Значение.ДатаОкончания = Дата('00010101') Тогда
			КонецПериодаРасчета.Значение = МаксимальнаяДата();
		Иначе
			КонецПериодаРасчета.Значение = ПериодРасчета.Значение.ДатаОкончания;
		КонецЕсли;
		КонецПериодаРасчета.Использование = Истина;
	КонецЕсли;
	
	// Отображение полей с суммами до и после превышения, суммами выплаченных доходов при типовых настройках
	ПараметрВыводитьСуммыДоСПревышения = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьСуммыДоСПревышения"));
	ВыводитьСуммыДоСПревышения = ПараметрВыводитьСуммыДоСПревышения.Значение;
	
	ПараметрВыводитьВыплаченныеДоходы = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьВыплаченныеДоходы"));
	ВыводитьВыплаченныеДоходы = ПараметрВыводитьВыплаченныеДоходы.Значение;
	
	ПоляДоСПревышения = Новый СписокЗначений;
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.Исчислено"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ИсчисленоСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ИсчисленоСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ИсчисленоСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ИсчисленоСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.Удержано"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.УдержаноСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.УдержаноСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.УдержаноСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.УдержаноСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.Возвращено"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ВозвращеноСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ВозвращеноСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ВозвращеноСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ВозвращеноСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноАванса"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноАвансаСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноАвансаСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноАвансаСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноАвансаСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноНалогаНаПрибыль"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноНалогаНаПрибыльСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноНалогаНаПрибыльСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноНалогаНаПрибыльСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ЗачтеноНалогаНаПрибыльСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПереданоНаВзыскание"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПереданоНаВзысканиеСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПереданоНаВзысканиеСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПереданоНаВзысканиеСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПереданоНаВзысканиеСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.Перечислено"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПеречисленоСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПеречисленоСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПеречисленоСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ПеречисленоСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьУдержать"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьУдержатьСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьУдержатьСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьУдержатьСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьУдержатьСПревышенияПоСтавке22"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьПеречислить"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьПеречислитьСПревышения"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьПеречислитьСПревышенияПоСтавке18"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьПеречислитьСПревышенияПоСтавке20"));
	ПоляДоСПревышения.Добавить(Новый ПолеКомпоновкиДанных("Налог.ОсталосьПеречислитьСПревышенияПоСтавке22"));
	
	ПоляВыплаты = Новый СписокЗначений;
	ПоляВыплаты.Добавить(Новый ПолеКомпоновкиДанных("Доход.Выплачено"));
	ПоляВыплаты.Добавить(Новый ПолеКомпоновкиДанных("Доход.ОсталосьВыплатить"));
	
	Для Каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			КолонкиТаблицы = ЭлементСтруктуры.Колонки;
			Для Каждого КолонкаТаблицы Из КолонкиТаблицы Цикл
				Если КолонкаТаблицы.Выбор.Элементы.Количество() = 1 Тогда
					ГруппаВыбранныхПолей = КолонкаТаблицы.Выбор.Элементы.Получить(0);
					Если ТипЗнч(ГруппаВыбранныхПолей) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
						ПоляГруппы = ГруппаВыбранныхПолей.Элементы;
						Для Каждого ВыбранноеПоле Из ПоляГруппы Цикл
							Если ПараметрВыводитьСуммыДоСПревышения.Использование И ПоляДоСПревышения.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено Тогда
								ВыбранноеПоле.Использование = ВыводитьСуммыДоСПревышения;
							ИначеЕсли ПараметрВыводитьВыплаченныеДоходы.Использование И ПоляВыплаты.НайтиПоЗначению(ВыбранноеПоле.Поле) <> Неопределено Тогда
								ВыбранноеПоле.Использование = ВыводитьВыплаченныеДоходы;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ДокументРезультат.Очистить();
	               
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ВнешниеНаборыДанных = Отчеты.АнализНДФЛДетальный.ВнешниеНаборыДанных();
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МаксимальнаяДата()
	Возврат Дата(3999, 12, 31, 23, 59, 59);
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.';
						|en = 'Invalid object call on the client.'");
#КонецЕсли