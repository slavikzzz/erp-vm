#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗаполнитьПараметрыКомпоновки(Форма.Параметры, КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//       Пользовательские настройки для загрузки в компоновщик настроек.
//
// См. синтакс-помощник "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере"
//    в синтакс-помощнике.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ЗаполнитьПараметрыКомпоновки(Форма.Параметры, КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов") Тогда
		ПолеАналоги = Новый ПолеКомпоновкиДанных("Аналоги");
		Для каждого Группировка Из Настройки.Структура Цикл
			Для каждого Элемент Из Группировка.Выбор.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
					И Элемент.Поле = ПолеАналоги Тогда
					Группировка.Выбор.Элементы.Удалить(Элемент);
					ПолеАналоги = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПолеАналоги = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);	
	
	ВнешниеНаборыДанных = СформироватьВнешниеНаборыДанных(Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыКомпоновки(Параметры, Настройки)
	
	Для каждого Имя Из СтрРазделить("Спецификация,Номенклатура,Характеристика,Количество,НаправлениеДеятельности,ЗаказНаПроизводство", ",") Цикл
		Если Параметры.Свойство(Имя) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, Имя, Параметры[Имя]);
		КонецЕсли;
	КонецЦикла;
	
	Назначения = Неопределено;
	Если Параметры.Свойство("АдресНазначения") 
			И ЭтоАдресВременногоХранилища(Параметры.АдресНазначения) Тогда
		Назначения = ПолучитьИзВременногоХранилища(Параметры.АдресНазначения);
	КонецЕсли;
	Если Назначения = Неопределено Тогда
		Назначения = Новый ТаблицаЗначений;
		Назначения.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		Назначения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Назначения", Новый ХранилищеЗначения(Назначения));
	
	Изделия = Неопределено;
	Если Параметры.Свойство("АдресИзделия") 
			И ЭтоАдресВременногоХранилища(Параметры.АдресИзделия) Тогда
		Изделия = ПолучитьИзВременногоХранилища(Параметры.АдресИзделия);
	КонецЕсли;
	Если Изделия = Неопределено Тогда
		Изделия = Новый ТаблицаЗначений;
		Изделия.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Изделия.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		Изделия.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
		Изделия.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Изделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
		Изделия.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "Изделия", Новый ХранилищеЗначения(Изделия));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ТипДанныхВыходныеИзделия", ТипДанныхВыходныеИзделия());
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ТипДанныхПобочныеИзделия", ТипДанныхПобочныеИзделия());
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ТипДанныхМатериалы", ТипДанныхМатериалы());
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ТипДанныхТрудозатраты", ТипДанныхТрудозатраты());
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ТипДанныхЭтапы", ТипДанныхЭтапы());
	
КонецПроцедуры

Функция СформироватьВнешниеНаборыДанных(Настройки)
	
	Результат = Новый Структура;
	
	// Получение параметров
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Спецификация");
	Спецификация = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Номенклатура");
	Номенклатура = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Характеристика");
	Характеристика = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Количество");
	Количество = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Назначения");
	ХранилищеНазначения = Параметр.Значение; //ХранилищеЗначения
	Назначения = ?(Параметр <> Неопределено, ХранилищеНазначения.Получить(), Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "Изделия");
	ХранилищеИзделия = Параметр.Значение; //ХранилищеЗначения
	Изделия = ?(Параметр <> Неопределено, ХранилищеИзделия.Получить(), Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "НаправлениеДеятельности");
	НаправлениеДеятельности = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(Настройки, "ЗаказНаПроизводство");
	ЗаказНаПроизводство = ?(Параметр <> Неопределено, Параметр.Значение, Неопределено);
	
	// Чтение данных спецификации
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуре();
	ДанныеПоНоменклатуре.Спецификация = Спецификация;
	ДанныеПоНоменклатуре.Номенклатура = Номенклатура;
	ДанныеПоНоменклатуре.Характеристика = Характеристика;
	ДанныеПоНоменклатуре.Количество = Количество;
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных();
	ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
	
	ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(
		ДанныеПоНоменклатуре, ПараметрыВыборки);
	
	// Выходные изделия
	ВыходныеИзделия = ДанныеСпецификации.ВыходныеИзделия;
	ВыходныеИзделия.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Число"));
	ВыходныеИзделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ВыходныеИзделия.Колонки.Добавить("ЗаказНаПроизводство", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2"));
	
	ТипыПолучатель = Новый Массив;
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыПолучатель.Добавить(Тип("СправочникСсылка.Склады"));
	ОписаниеТипов = Новый ОписаниеТипов(ТипыПолучатель);
	ВыходныеИзделия.Колонки.Добавить("Получатель", ОписаниеТипов);
	ВыходныеИзделия.ЗагрузитьКолонку(ВыходныеИзделия.ВыгрузитьКолонку("Склад"), "Получатель");
	
	Если Изделия <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
		Для Индекс = -(ВыходныеИзделия.Количество()-1) По 0 Цикл
			
			Строка = ВыходныеИзделия[-Индекс];
			Строка.ТипДанных = ТипДанныхВыходныеИзделия();
			
			НомерСтроки = 1;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
			Для каждого ЗначенияЗаполнения Из Изделия.НайтиСтроки(СтруктураПоиска) Цикл
				Если ЗначенияЗаполнения.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество > ЗначенияЗаполнения.Количество Тогда
					НоваяСтрока = ВыходныеИзделия.Вставить(-Индекс + НомерСтроки);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияЗаполнения, "ЗаказНаПроизводство, Получатель, Назначение, Количество");
					
					Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
					ЗначенияЗаполнения.Количество = 0;
					НомерСтроки = НомерСтроки + 1;
				Иначе
					ЗаполнитьЗначенияСвойств(Строка, ЗначенияЗаполнения, "ЗаказНаПроизводство, Получатель, Назначение");
					ЗначенияЗаполнения.Количество  = ЗначенияЗаполнения.Количество - Строка.Количество;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Вставить("ВыходныеИзделия", ВыходныеИзделия);
	
	// Побочные изделия
	ПобочныеИзделия = ДанныеСпецификации.ВозвратныеОтходы;
	ПобочныеИзделия.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Число"));
	ПобочныеИзделия.ЗаполнитьЗначения(ТипДанныхПобочныеИзделия(), "ТипДанных");
	Результат.Вставить("ПобочныеИзделия", ПобочныеИзделия);
	
	// Материалы
	Материалы = ДанныеСпецификации.МатериалыИУслуги;
	Материалы.Колонки.Добавить("Аналоги", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	Материалы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	
	Если Назначения <> Неопределено Тогда
		
		Итог = Назначения.Итог("Количество");
		ВГраница = Назначения.Количество()-1;
		
		Для ИндексМатериал = -Материалы.Количество()+1 По 0 Цикл
			
			Строка = Материалы[-ИндексМатериал];
			
			Если Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе Тогда
				Продолжить;
			КонецЕсли;
			
			Остаток = Строка.Количество;
			Для ИндексНазначение = 0 По ВГраница Цикл
				
				СтрокаНазначение = Назначения[ИндексНазначение];
				
				НоваяСтрока = Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Назначение = СтрокаНазначение.Назначение;
				НоваяСтрока.Количество = ?(ИндексНазначение = ВГраница,
					Остаток,
					Строка.Количество * СтрокаНазначение.Количество/Итог);
					
				Остаток = Остаток - НоваяСтрока.Количество;
				
			КонецЦикла;
			
			Материалы.Удалить(Строка);
			
		КонецЦикла;
		
		Материалы.Сортировать("НомерСтроки");
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(Материалы, "НомерСтроки");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАналогиМатериалов") Тогда
		
		ПараметрыВыбора = АналогиМатериалов.ПараметрыВыбораАналогов(
			Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
		// Товары
		Товары = Материалы.Скопировать(,
			"Этап,НомерСтроки,Номенклатура,Характеристика,Склад,Назначение,Обособленно,Количество,КлючСвязи,ПрименениеМатериала");
		Товары.Колонки.Этап.Имя = "Ссылка";
		Товары.Колонки.КлючСвязи.Имя = "КлючСвязиСпецификация";
		Товары.Колонки.ПрименениеМатериала.Имя = "Комментарий";
		Товары.Колонки.Добавить("КоличествоВсего", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		ПараметрыВыбора.ПараметрыТоваров.Товары = ПоместитьВоВременноеХранилище(Товары);
		
		// Параметры
		ТаблицаПараметров = ПараметрыВыбора.ПараметрыАналогов.ТаблицаПараметров;
		
		Для каждого Строка Из ДанныеСпецификации.Этапы Цикл
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			СтрокаТаблицы.ДатаДействияРазрешений = НачалоДня(ТекущаяДатаСеанса());
			СтрокаТаблицы.Ссылка = Строка.Этап;
			СтрокаТаблицы.Подразделение = Строка.Подразделение;
			
			СтрокаТаблицы.НаправлениеДеятельности = НаправлениеДеятельности;			
			СтрокаТаблицы.ЗаказНаПроизводство = ЗаказНаПроизводство;
			СтрокаТаблицы.Спецификация = Спецификация;
			СтрокаТаблицы.Изделие = Номенклатура;
			СтрокаТаблицы.ХарактеристикаИзделия = Характеристика;
			
		КонецЦикла;
		
		ПараметрыВыбора.ПараметрыАналогов.ТаблицаПараметров = ПоместитьВоВременноеХранилище(ТаблицаПараметров);
		
		ТаблицаЗамен = АналогиМатериалов.ПолучитьТаблицуЗамены(ПараметрыВыбора);
		Если ТаблицаЗамен <> Неопределено Тогда
			
			ТаблицаЗамен.Индексы.Добавить("ЭтоАналог");
			Материалы.Индексы.Добавить("НомерСтроки");
			
			ОтборНомерСтроки = Новый Структура("НомерСтроки");
			
			НайденныеСтроки = ТаблицаЗамен.НайтиСтроки(Новый Структура("ЭтоАналог", Ложь));
			Для каждого СтрокаТаблицыЗамены Из НайденныеСтроки Цикл
				
				ЗаполнитьЗначенияСвойств(ОтборНомерСтроки, СтрокаТаблицыЗамены);
				
				СтрокаМатериалы = Материалы.НайтиСтроки(ОтборНомерСтроки)[0];
				СтрокаМатериалы.Аналоги = СтрокаМатериалы.Количество - СтрокаТаблицыЗамены.Количество;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Материалы.Номенклатура       КАК Номенклатура,
		|	Материалы.Характеристика     КАК Характеристика,
		|	Материалы.Склад              КАК Склад,
		|	Материалы.Назначение         КАК Назначение,
		|	Материалы.Обособленно        КАК Обособленно,
		|	Материалы.Этап               КАК Этап,
		|	Материалы.ПодразделениеЭтапа КАК ПодразделениеЭтапа,
		|	Материалы.НомерСтроки        КАК НомерСтроки,
		|	Материалы.Аналоги            КАК Аналоги,
		|	Материалы.Количество         КАК Количество
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	&Материалы КАК Материалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Номенклатура                    КАК Номенклатура,
		|	Материалы.Характеристика                  КАК Характеристика,
		|	Материалы.Склад                           КАК Склад,
		|	Материалы.Назначение                      КАК Назначение,
		|	Материалы.Обособленно                     КАК Обособленно,
		|	Материалы.Этап                            КАК Этап,
		|	Материалы.ПодразделениеЭтапа              КАК ПодразделениеЭтапа,
		|	Материалы.НомерСтроки                     КАК НомерСтроки,
		|	Материалы.Аналоги                         КАК Аналоги,
		|	Материалы.Количество                      КАК Требуется,
		|	ЕСТЬNULL(ОбособленныеОстатки.Свободно, 0) КАК НаличиеПодЗаказ,
		|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0)    КАК СвободныйОстаток,
		|	&ТипДанныхМатериалы                       КАК ТипДанных
		|ИЗ
		|	Материалы КАК Материалы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ОбособленныеОстатки
		|		ПО Материалы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И Материалы.Номенклатура = ОбособленныеОстатки.Номенклатура
		|			И Материалы.Характеристика = ОбособленныеОстатки.Характеристика
		|			И Материалы.Склад = ОбособленныеОстатки.Склад
		|			И Материалы.Назначение = ОбособленныеОстатки.Назначение
		|			И ОбособленныеОстатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК СвободныеОстатки
		|		ПО Материалы.Номенклатура = СвободныеОстатки.Номенклатура
		|			И Материалы.Характеристика = СвободныеОстатки.Характеристика
		|			И Материалы.Склад = СвободныеОстатки.Склад
		|			И СвободныеОстатки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И СвободныеОстатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)");
	Запрос.УстановитьПараметр("Материалы", Материалы);
	Запрос.УстановитьПараметр("ТипДанныхМатериалы", ТипДанныхМатериалы());
	
	Результат.Вставить("Материалы", Запрос.Выполнить().Выгрузить());
	
	// Трудозатраты
	Трудозатраты = ДанныеСпецификации.Трудозатраты;
	Трудозатраты.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Число"));
	Трудозатраты.Колонки.Добавить("Трудоемкость", Новый ОписаниеТипов("Число"));
	
	ВидыРабот = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Трудозатраты.ВыгрузитьКолонку("ВидРабот"),
		"Трудоемкость, КратностьТрудоемкости");
	Для каждого Строка Из Трудозатраты Цикл
		
		Строка.ТипДанных = ТипДанныхТрудозатраты();
		
		Если ВидыРабот[Строка.ВидРабот].КратностьТрудоемкости <> 0 Тогда
			Строка.Трудоемкость = Окр(Строка.Количество
				* ВидыРабот[Строка.ВидРабот].Трудоемкость
				/ ВидыРабот[Строка.ВидРабот].КратностьТрудоемкости, 3);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Трудозатраты", Трудозатраты);
	
	// Этапы
	Этапы = ДанныеСпецификации.Этапы;
	Этапы.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Число"));
	Этапы.ЗаполнитьЗначения(ТипДанныхЭтапы(), "ТипДанных");
	Результат.Вставить("Этапы", Этапы);
	
	Возврат Результат;

КонецФункции

Функция ТипДанныхВыходныеИзделия()
	
	Возврат 1;
	
КонецФункции

Функция ТипДанныхПобочныеИзделия()
	
	Возврат 2;
	
КонецФункции

Функция ТипДанныхМатериалы()
	
	Возврат 3;
	
КонецФункции

Функция ТипДанныхТрудозатраты()
	
	Возврат 4;
	
КонецФункции

Функция ТипДанныхЭтапы()
	
	Возврат 5;
	
КонецФункции

#КонецОбласти

#КонецЕсли