#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Организация, "ДатаРегистрации");
	
	ОбновитьНастройкиОтчета();
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	Отчет.ПоказательНУ = Истина;
	Отчет.НаборПоказателейОтчета = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	
	Если ПодключитьОбработчикОжидания Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		
	ИначеЕсли Отчет.РежимРасшифровки Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		
	Иначе
		
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(),
			Истина);
		
	КонецЕсли;
	
	Отчет.НаборПоказателейОтчета = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИСформировать(ПараметрыОтчета) Экспорт
	
	Если ТипЗнч(ПараметрыОтчета) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Отчет, ПараметрыОтчета);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОтчета);
		
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
	
	ОткрытьИСформироватьНаСервере();
	
	ЭтотОбъект.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ВариантМодифицирован                    = Ложь;
	ПользовательскиеНастройкиМодифицированы = НЕ Отчет.РежимРасшифровки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки, ИспользуютсяСтандартныеНастройки)
	
	Если ИспользуютсяСтандартныеНастройки Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
	Если Не Параметры.Организация.Пустая() Тогда
		Отчет.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.ОткрытьВПериодеОсвобожденияОтНалогов Тогда
		ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
		Отчет.НачалоПериода = ПериодОсвобождения.Начало;
		Отчет.КонецПериода = ПериодОсвобождения.Конец;
	КонецЕсли;
	
	Если Параметры.Свойство("НачалоПериода") И ЗначениеЗаполнено(Параметры.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоКвартала(Параметры.НачалоПериода);
	КонецЕсли;
	Если Параметры.Свойство("КонецПериода") И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Отчет.КонецПериода = КонецКвартала(Параметры.КонецПериода);
	КонецЕсли;
	
	ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Организация, "ДатаРегистрации");;
	
	ОбновитьНастройкиОтчета();
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, Элементы.Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПриИзмененииПериода(Элемент);
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", Отчет.НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода", Отчет.КонецПериода);
	ПараметрыВыбора.Вставить("НарастающимИтогом", Истина);
	ПараметрыВыбора.Вставить("МинимальныйПериод", НачалоКвартала(ДатаРегистрацииОрганизации));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.Период, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
		
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// Совместимость с БП.
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультат

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	БухгалтерскиеОтчетыКлиент.НачатьРасчетСуммыВыделенныхЯчеек(
		Элементы.Результат,
		ЭтотОбъект,
		"Подключаемый_РезультатПриАктивизацииПодключаемый");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОформление

&НаКлиенте
Процедура МакетОформленияПриИзменении(Элемент)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Отчет.КомпоновщикНастроек.Настройки, "МакетОформления", МакетОформления);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодвалПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЕдиницуИзмеренияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	Отчет.КонецПериода  = КонецКвартала(ДобавитьМесяц(Отчет.КонецПериода, -3));
	Отчет.НачалоПериода = НачалоГода(Отчет.КонецПериода);
	
	ПриИзмененииПериода(Элементы.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	Отчет.КонецПериода  = КонецКвартала(ДобавитьМесяц(Отчет.КонецПериода, 3));
	Отчет.НачалоПериода = НачалоГода(Отчет.КонецПериода);
	
	ПриИзмененииПериода(Элементы.Период);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если РезультатВыполнения.Статус <> "Выполнено" Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ИначеЕсли Не РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда 
		БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе
		СкрытьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Организация, "ДатаРегистрации");
	
	ОбновитьНастройкиОтчета();
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	БухгалтерскиеОтчетыКлиентСервер.ОрганизацияПриИзменении(ЭтотОбъект, Отчет.Организация);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьИСформироватьНаСервере()
	
	// Организация и период отчета перезаполнены из входящих параметров.
	// Надо обновить дату регистрации организации...
	ДатаРегистрацииОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Организация, "ДатаРегистрации");
	// ...и обработать изменение периода.
	ПриИзмененииПериодаНаСервере();
	
	Если НЕ НалоговыйПериодПропущен Тогда
		СформироватьОтчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт

	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("Статус", "Выполнено");
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ВыводитьЗаголовок);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал"   , ВыводитьПодвал);
	Отчет.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки              = "";
	Отчет.КомпоновщикНастроек.Настройки.Порядок.ИдентификаторПользовательскойНастройки            = "";
	Отчет.КомпоновщикНастроек.Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = "";
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет", ПараметрыОтчета, ПараметрыВыполнения);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресРезультата;

	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;

	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                      , Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода"                    , НачалоКвартала(Отчет.КонецПериода)); // Данные справки-расчета формируются поквартально.
	ПараметрыОтчета.Вставить("КонецПериода"                     , Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	
	ПараметрыОтчета.Вставить("ДатаНачалаДеятельности"           , ДатаРегистрацииОрганизации);
	ПараметрыОтчета.Вставить("НалоговыйПериодРасширен"          , НалоговыйПериодРасширен);
	
	ПараметрыОтчета.Вставить("ОбъектНалогообложения",
		УчетнаяПолитика.ОбъектНалогообложенияУСН(Отчет.Организация, Отчет.КонецПериода));
	
	ПараметрыОтчета.Вставить("УменьшатьНалогНаТорговыйСбор",
		УчетУСНПСНСервер.ЕстьПравоУменьшатьНалогНаТорговыйСбор(Отчет.Организация, Отчет.КонецПериода));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыОтчета,
		Отчеты.СправкаРасчетНалогаУСН.ДанныеПревышенияГраницыПримененияОсновнойСтавкиУСН(
			Отчет.Организация, Отчет.КонецПериода));
	
	ПараметрыОтчета.Вставить("ПоказательБУ"                     , Ложь);
	ПараметрыОтчета.Вставить("ПоказательНУ"                     , Истина);
	ПараметрыОтчета.Вставить("ПоказательПР"                     , Ложь);
	ПараметрыОтчета.Вставить("ПоказательВР"                     , Ложь);
	
	ПараметрыОтчета.Вставить("РежимРасшифровки"                 , Отчет.РежимРасшифровки);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"                , ДанныеРасшифровки);
	ПараметрыОтчета.Вставить("МакетОформления"                  , МакетОформления);	
	ПараметрыОтчета.Вставить("КлючТекущегоВарианта"             , КлючТекущегоВарианта);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"              , БухгалтерскиеОтчеты.ИмяОтчета(ЭтотОбъект));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ВыводитьЕдиницуИзмерения"         , ВыводитьЕдиницуИзмерения);
	ПараметрыОтчета.Вставить("ОтветственноеЛицо"                , ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры"));
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	
	НачалоПериода = НачалоГода(Отчет.НачалоПериода);
	КонецПериода  = КонецКвартала(Отчет.КонецПериода);
	
	ЧастиЗаголовка = Новый Массив;
	
	Если Форма.КлючТекущегоВарианта = "РасчетТорговогоСбораУменьшающегоНалог" Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Расчет торгового сбора, уменьшающего налог УСН за';
									|en = 'Calculation of the sales charge reducing STS tax for'"));
	Иначе
		ЭтоКонецГода = КонецПериода = КонецГода(КонецПериода);
		
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Расчет';
									|en = 'Calculation'"));
		ЧастиЗаголовка.Добавить(?(ЭтоКонецГода, НСтр("ru = 'налога УСН';
													|en = 'STS tax'"), НСтр("ru = 'авансового платежа по налогу УСН';
																				|en = 'advance payment by STS tax'")));
		ЧастиЗаголовка.Добавить(НСтр("ru = 'за';
									|en = 'for'"));
	КонецЕсли;
	
	ЧастиЗаголовка.Добавить(
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, Истина));
		
	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЧастиЗаголовка.Добавить(БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация));
	КонецЕсли;
	
	Форма.Заголовок = СтрСоединить(ЧастиЗаголовка, " ");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Параметры");
	СписокПолей.Добавить("Ресурсы");
	СписокПолей.Добавить("Группировки");
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Подразделение");
		
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
	Элементы.УменьшитьПериод.Доступность =
		НачалоКвартала(Отчет.КонецПериода) > НачалоКвартала(Форма.ДатаРегистрацииОрганизации);
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Форма.НалоговыйПериодРасширен;
	
	Элементы.ГруппаКоманднаяПанель.Видимость = НЕ Форма.НалоговыйПериодПропущен;
	Элементы.Результат.Видимость             = НЕ Форма.НалоговыйПериодПропущен;
	Элементы.НастройкиОтчета.Видимость       = НЕ Форма.НалоговыйПериодПропущен;
	
	Форма.Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		Отчет.НачалоПериода, Отчет.КонецПериода, Истина);
		
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ВернутьОрганизацииНаУСНЗаПериод(Отчет.НачалоПериода, Отчет.КонецПериода));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтчета()
	
	// Платежи по налогу УСН рассчитываются нарастающим итогом с начала года.
	Отчет.НачалоПериода = НачалоГода(Отчет.НачалоПериода);
	Отчет.КонецПериода  = КонецКвартала(Отчет.КонецПериода);
	
	МинимальныйПериод = НачалоКвартала(ДатаРегистрацииОрганизации);
	
	Если НачалоКвартала(Отчет.КонецПериода) < МинимальныйПериод Тогда
		Отчет.КонецПериода  = КонецКвартала(МинимальныйПериод);
		Отчет.НачалоПериода = НачалоГода(Отчет.КонецПериода);
	КонецЕсли;
	
	НалоговыйПериодРасширен = УчетУСНПСНСервер.НалоговыйПериодРасширен(Отчет.Организация, Отчет.КонецПериода, ДатаРегистрацииОрганизации);
	НалоговыйПериодПропущен = УчетУСНПСНСервер.НалоговыйПериодПропущен(Отчет.Организация, Отчет.КонецПериода, ДатаРегистрацииОрганизации);
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ПояснениеПереносНалоговогоПериода();
	
КонецПроцедуры

&НаСервере
Функция ПояснениеПереносНалоговогоПериода()
	
	ФорматнаяСтрокаПериода = "ДЛФ=D";
	
	Если НалоговыйПериодПропущен Тогда
		
		ГодОтчета = Год(Отчет.КонецПериода);
		
		ШаблонПояснения = НСтр("ru = 'Налог за %1 год уплачивать не нужно. Период с даты регистрации %2 по %3 учитывается в налоговых платежах за %4 год.';
								|en = 'No need to pay tax for %1. Period from the registration date %2 until %3 is included in tax payments for %4.'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения,
			Формат(ГодОтчета, "ЧГ=0"),
			Формат(ДатаРегистрацииОрганизации, ФорматнаяСтрокаПериода),
			Формат(КонецГода(ДатаРегистрацииОрганизации), ФорматнаяСтрокаПериода),
			Формат(ГодОтчета + 1, "ЧГ=0"));
		
	ИначеЕсли НалоговыйПериодРасширен Тогда
		
		ШаблонПояснения = НСтр("ru = 'Период с даты регистрации %1 по %2 включается в расчет %3 за %4';
								|en = 'Period from registration date %1 to %2 is included in calculation %3 for %4'");
		
		ТекстВидПериода = ?(КонецКвартала(Отчет.КонецПериода) = КонецГода(Отчет.КонецПериода),
			НСтр("ru = 'налога';
				|en = 'tax'"),
			НСтр("ru = 'авансового платежа';
				|en = 'advance payment'"));
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПояснения,
			Формат(ДатаРегистрацииОрганизации, ФорматнаяСтрокаПериода),
			Формат(КонецГода(ДатаРегистрацииОрганизации), ФорматнаяСтрокаПериода),
			ТекстВидПериода,
			ПредставлениеПериода(НачалоГода(Отчет.НачалоПериода), КонецКвартала(Отчет.КонецПериода), "ФП = Истина"));
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат         = РезультатВыполнения.Результат;
	ДанныеРасшифровки = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
					
			БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	ЗапуститьФормированиеОтчета();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыбораЗначенияОтбора() Экспорт
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата"              , Отчет.КонецПериода);
	СписокПараметров.Вставить("Номенклатура"      , Неопределено);
	СписокПараметров.Вставить("Склад"             , Неопределено);
	СписокПараметров.Вставить("Организация"       , Отчет.Организация);
	СписокПараметров.Вставить("Контрагент"        , Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Возврат СписокПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода(Элемент)
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, Отчет.НачалоПериода, Отчет.КонецПериода);
	
	ПриИзмененииПериодаНаСервере();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаНаСервере()
	
	Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода, Истина);
	
	ОбновитьНастройкиОтчета();
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Отчет.Организация, Отчет.КонецПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьОрганизацииНаУСНЗаПериод(НачалоПериода, КонецПериода)
	
	Возврат УчетнаяПолитикаПереопределяемый.ОрганизацииНаУСНЗаПериод(НачалоПериода, КонецПериода);
	
КонецФункции

#КонецОбласти
