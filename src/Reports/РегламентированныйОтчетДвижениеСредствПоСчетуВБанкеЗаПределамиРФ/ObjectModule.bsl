#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Функция СформироватьАвтоматическиРеглОтчет(ПараметрыАвтоформирования, КорректирующийОтчет) Экспорт
	
	ИмяФормы = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	ПодготовленныйРеглОтчет = ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет);
	
	РазделыОтчета       = ПодготовленныйРеглОтчет.РазделыОтчета;
	ДанныеРеглОтчета    = ПодготовленныйРеглОтчет.ДанныеРеглОтчета;
	ДеревоСтраницОтчета = ПодготовленныйРеглОтчет.ДеревоСтраницОтчета;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ПараметрыАвтоформирования.ИсточникОтчета);
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", ПараметрыАвтоформирования.ИмяФормыОтчета);
	ПараметрыЗаписи.Вставить("Организация", ПараметрыАвтоформирования.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ПараметрыЗаписи.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет);
	ПараметрыЗаписи.Вставить("Ошибки", ПараметрыАвтоформирования.Ошибки);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", 0);
	ПараметрыЗаписи.Вставить("Комментарий", ?(ПараметрыАвтоформирования.Свойство("КомментарийАвтозаполнения"),
	ПараметрыАвтоформирования["КомментарийАвтозаполнения"], ""));
	ПараметрыЗаписи.Вставить("КодИФНС", РазделыОтчета.Титульный.НалоговыйОрган);
	ПараметрыЗаписи.Вставить("КПП", РазделыОтчета.Титульный.КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", ДанныеРеглОтчета.СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", Ложь);
	ПараметрыЗаписи.Вставить("Автозаполнение", Ложь);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", Неопределено);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", Неопределено);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", Ложь);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	ПараметрыЗаписи.Вставить("Вариант", ?(КорректирующийОтчет, 1, 0));
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", ДанныеРеглОтчета.СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	Возврат ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи);
	
КонецФункции

Функция ПодготовленныйРеглОтчет(ИмяФормы, ПараметрыАвтоформирования, КорректирующийОтчет)
	
	РазделыОтчета = РазделыРеглОтчета(ИмяФормы);
	
	ДанныеРеглОтчета = Новый Структура;
	ДанныеРеглОтчета.Вставить("ДатаПодписи", ТекущаядатаСеанса());
	
	ПараметрыАвтоФормирования.Вставить("ДатаПодписи", ДанныеРеглОтчета.ДатаПодписи);
	
	ПараметрыАвтоФормирования.Вставить("НомерКорректировки", ?(КорректирующийОтчет, 1, 0));
	
	ЗаполнитьРеглОтчет(ИмяФормы,
					   ПараметрыАвтоформирования,
					   КорректирующийОтчет,
					   РазделыОтчета,
					   ДанныеРеглОтчета);
	
	РазделыОтчета.Титульный.НомерКорректировки = ПараметрыАвтоФормирования.НомерКорректировки;
	
	РазделыОтчета.Титульный.ДатаПодписи = ДанныеРеглОтчета.ДатаПодписи;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ВидДокумента = ?(КорректирующийОтчет, 1, 0);
	
	ЗаполнитьСведенияОбОрганизации(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.ДатаПодписи,
								   РазделыОтчета.Титульный);
	
	ДеревоСтраницОтчета = СтруктураСтраницОтчета(ИмяФормы, ПараметрыАвтоформирования.ДатаОкончания);
	
	ДанныеРеглОтчета.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	ПодготовленныйРеглОтчет = Новый Структура;
	ПодготовленныйРеглОтчет.Вставить("РазделыОтчета",       РазделыОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДанныеРеглОтчета",    ДанныеРеглОтчета);
	ПодготовленныйРеглОтчет.Вставить("ДеревоСтраницОтчета", ДеревоСтраницОтчета);
	
	Возврат ПодготовленныйРеглОтчет;
	
КонецФункции

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Движение средств по счету в банке за пределами РФ");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ4М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ5М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ6М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ7М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ11М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыЛ12М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("НастройкиАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилищеСообщенияПослеАвтозаполнения");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
	Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыЛ4М1  = "П000Л4М1";
	СтруктураРеквизитовФормы.мИдГруппыЛ5М1  = "П000Л5М1";
	СтруктураРеквизитовФормы.мИдГруппыЛ6М1  = "П000Л6М1";
	СтруктураРеквизитовФормы.мИдГруппыЛ7М1  = "П000Л7М1";
	СтруктураРеквизитовФормы.мИдГруппыЛ11М1 = "П00Л11М1";
	СтруктураРеквизитовФормы.мИдГруппыЛ12М1 = "П00Л12М1";
	
	// Группа П000Л4М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000Л4М100001");
	ИменаГраф.Добавить("П000Л4М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ5М1);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ4М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П000Л5М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000Л5М100001");
	ИменаГраф.Добавить("П000Л5М100002");
	ИменаГраф.Добавить("П000Л5М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ5М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000Л6М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000Л6М100001");
	ИменаГраф.Добавить("П000Л6М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ7М1);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ6М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П000Л7М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П000Л7М100001");
	ИменаГраф.Добавить("П000Л7М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ7М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П000Л11М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00Л11М100001");
	ИменаГраф.Добавить("П00Л11М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ11М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П000Л12М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00Л12М100001");
	ИменаГраф.Добавить("П00Л12М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыЛ12М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Лист2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ4М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ6М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Листы3_7", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураМногоуровневыхРазделов.Вставить("Лист8", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Лист9", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ11М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыЛ12М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураМногоуровневыхРазделов.Вставить("Листы10_12", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист2";
	СтрокаУровня1.Представление      = "Сведения о счете";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Листы3_7";
	СтрокаУровня1.Представление      = "Движение средств";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист8";
	СтрокаУровня1.Представление      = "Иные финансовые активы";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Лист9";
	СтрокаУровня1.Представление      = "Сведения об ЭСП";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Листы10_12";
	СтрокаУровня1.Представление      = "Переводы средств";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции	

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	СсылкаНаРегистрациюВНО = РеквизитЭлементаСправочника(ИмяФормы, СтруктураРеквизитовФормы.Организация);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ОГРН, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		ТекОГРН = СокрЛП(СведенияОбОрганизации.ОГРН);
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
			ОГРН = "";
			ОГРНИП = ТекОГРН;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
			ОГРН = ТекОГРН;
			ОГРНИП = "";
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
			
			СтруктураДанныхТитульный.Области.ОГРН.Значение   = ОГРН;
			СтруктураДанныхТитульный.Области.ОГРНИП.Значение = ОГРНИП;
			
			СтруктураДанныхТитульный.Области.ТелОрганизации.Значение = ТелОрганизации;
			
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
			
			СтруктураДанныхТитульный.ОГРН   = ОГРН;
			СтруктураДанныхТитульный.ОГРНИП = ОГРНИП;
			
			СтруктураДанныхТитульный.ТелОрганизации = ТелОрганизации;
			
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
	СтруктураРеквизитовФормы, СтруктураДанныхТитульный, ДатаПодписи, СсылкаНаРегистрациюВНО);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи,
										СсылкаНаРегистрациюВНО = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП   = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП   = СокрЛП(СтруктураДанныхТитульный.КПП);
		
	КонецЕсли;
	
	Если СсылкаНаРегистрациюВНО <> Неопределено Тогда
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП, СсылкаНаРегистрациюВНО.КодПоОКТМО);
		
	Иначе
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		
	КонецЕсли;
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			ТипПодписанта = "3";
		КонецЕсли;
	Иначе
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение       = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргПодписант.Значение = Подписант;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение    = ДокументПредставителя;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп       = ТипПодписанта;
		СтруктураДанныхТитульный.ОргПодписант = Подписант;
		СтруктураДанныхТитульный.ДокУпПред    = ДокументПредставителя;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитЭлементаСправочника(ИмяФормы, Ссылка) Экспорт
	
	Если Ссылка.Метаданные().Реквизиты.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		Возврат Ссылка.РегистрацияВНалоговомОргане;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазделыРеглОтчета(ИмяФормы) Экспорт
	
	РазделыОтчета = Новый Структура;
	РазделыОтчета.Вставить("Титульный", Новый Структура);
	
	РазделыОтчета.Вставить("ДанныеМногоуровневыхРазделов", Новый Структура);
	
	Возврат РазделыОтчета;
	
КонецФункции

Функция ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) Экспорт
	
	ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
	
	ДокументРегламентированныйОтчет.ИсточникОтчета           = ПараметрыЗаписи.ИсточникОтчета;
	ДокументРегламентированныйОтчет.НаименованиеОтчета       = ПараметрыЗаписи.НаименованиеОтчета;
	ДокументРегламентированныйОтчет.ДатаНачала               = ПараметрыЗаписи.ДатаНачала;
	ДокументРегламентированныйОтчет.ДатаОкончания            = ПараметрыЗаписи.ДатаОкончания;
	ДокументРегламентированныйОтчет.Периодичность            = Перечисления.Периодичность.Квартал;
	ДокументРегламентированныйОтчет.ВыбраннаяФорма           = ПараметрыЗаписи.ИмяФормыОтчета;
	ДокументРегламентированныйОтчет.Организация              = ПараметрыЗаписи.Организация;
	ДокументРегламентированныйОтчет.ДатаПодписи              = ПараметрыЗаписи.ДатаПодписи;
	ДокументРегламентированныйОтчет.ЕдиницаИзмерения         = ПараметрыЗаписи.ЕдиницаИзмерения;
	ДокументРегламентированныйОтчет.ТочностьЕдиницыИзмерения = ПараметрыЗаписи.ТочностьЕдиницыИзмерения;
	ДокументРегламентированныйОтчет.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	ДокументРегламентированныйОтчет.Комментарий              = ПараметрыЗаписи.Комментарий;
	ДокументРегламентированныйОтчет.КодНалоговогоОргана      = ПараметрыЗаписи.КодИФНС;
	ДокументРегламентированныйОтчет.КПП                      = ПараметрыЗаписи.КПП;
	ДокументРегламентированныйОтчет.Вид                      = ПараметрыЗаписи.Вариант;
	ДокументРегламентированныйОтчет.ФорматВыгрузки           = "Автоматически";
	ДокументРегламентированныйОтчет.ПредставлениеВида
	= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ДокументРегламентированныйОтчет.Вид);
	
	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", ПараметрыЗаписи.РазделыОтчета.Титульный);
	
	СписокСохранения = Новый Структура;
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого Элем Из ПараметрыЗаписи.СтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			ПараметрыЗаписи.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ВерсияФормы",                  ПараметрыЗаписи.ВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений",          ПараметрыЗаписи.ФлОтклВыборЗначений);
	СписокСохранения.Вставить("Автозаполнение",               ПараметрыЗаписи.Автозаполнение);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена",  ПараметрыЗаписи.ПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц",             ПараметрыЗаписи.ФлПодсчетСтраниц);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", ПараметрыЗаписи.СохранятьРасшифровку);
	
	Если ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(ПараметрыЗаписи.АдресВременногоХранилищаРасшифровки);
		Если ПараметрыЗаписи.СохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
	ДокументРегламентированныйОтчет.ДанныеОтчета = Новый ХранилищеЗначения(СписокСохранения, Новый СжатиеДанных(9));
	
	ДокументРегламентированныйОтчет.ДеревоНастройкиСтраниц = Новый ХранилищеЗначения(ПараметрыЗаписи.ДеревоСтраницОтчета);
	
	Попытка
		
		ДокументРегламентированныйОтчет.Записать();
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
	Исключение
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																						|en = '%1'"),
		РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		
		РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи, ТекстСообщения);
		
		ДокументРегламентированныйОтчет.Разблокировать();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИнициализироватьМногоуровневыйРаздел(ИмяФормы,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ИмяРаздела) Экспорт
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанныхРаздела = Новый ДеревоЗначений;
	ДеревоДанныхРаздела.Колонки.Добавить("Данные");
	ДеревоДанныхРаздела.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
													ИмяРаздела,
													СтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	ИнициализироватьПодчиненныеРазделы(ИмяФормы,
									   ИмяРаздела,
									   ТекВетка,
									   СтруктураМногоуровневыхРазделов,
									   ТабличныйДокумент,
									   СтруктураРеквизитовФормы);
	
	Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела) Тогда
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела, Неопределено);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
КонецПроцедуры

Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчет(ИмяФормы,
							 ПараметрыАвтоформирования,
							 КорректирующийОтчет,
							 РазделыОтчета,
							 ДанныеРеглОтчета)
	
	ИсточникОтчета = ПараметрыАвтоформирования.ИсточникОтчета;
	ИмяФормыОтчета = ПараметрыАвтоформирования.ИмяФормыОтчета;
	
	Организация = ПараметрыАвтоформирования.Организация;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДатаНачала", ПараметрыАвтоформирования.ДатаНачала);
	ДопПараметры.Вставить("ДатаОкончания", ПараметрыАвтоформирования.ДатаОкончания);
	
	ДанныеРеглОтчета.Вставить("СтруктураРеквизитовФормы");
	ДанныеРеглОтчета.Вставить("СтруктураМногоуровневыхРазделов");
	
	СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
										  ДанныеРеглОтчета.СтруктураРеквизитовФормы,
										  ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
	
	ИнициализироватьОбычныеРазделы(ИмяФормы,
								   ДанныеРеглОтчета.СтруктураРеквизитовФормы,
								   ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов,
								   СтруктураДанныхРазделов);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация = ПараметрыАвтоформирования.Организация;
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.Организация);
	
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ПараметрыАвтоформирования.ДатаНачала;
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ПараметрыАвтоформирования.ДатаОкончания;
	
	ЗаполнитьПериодОтчета(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы);
	
	ЗаполнитьЗначенияПоУмолчанию(ИмяФормы, ДанныеРеглОтчета.СтруктураРеквизитовФормы, СтруктураДанныхРазделов);
	
	РазделыОтчета.Титульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, Новый УникальныйИдентификатор,
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("НастройкиАвтозаполнения", ?(ПараметрыАвтоформирования.Свойство("НастройкиАвтозаполнения"),
		ПараметрыАвтоформирования.НастройкиАвтозаполнения, Неопределено));
	ПараметрыОтчета.Вставить("Организация",             ПараметрыАвтоформирования.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", НачалоДня(ПараметрыАвтоформирования.ДатаНачала));
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  КонецДня(ПараметрыАвтоформирования.ДатаОкончания));
	ПараметрыОтчета.Вставить("НомерКорректировки",      ПараметрыАвтоформирования.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",             ПараметрыАвтоформирования.ДатаПодписи);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",
	ДанныеРеглОтчета.СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Титульный", РазделыОтчета.Титульный);
	
	Для Каждого Раздел Из ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов Цикл
		
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			ДанныеРеглОтчета.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыАвтоформирования.Свойство("ЗаполнятьВнешнимиДанными")
	   И ПараметрыАвтоформирования.ЗаполнятьВнешнимиДанными = Истина Тогда
		
		ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы,
										  Контейнер,
										  ПараметрыАвтоформирования.ВнешниеДанные);
		
	Иначе
		
		РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИсточникОтчета,
																	ИмяФормыОтчета,
																	ПараметрыОтчета,
																	Контейнер);
		
		РассчитатьИтоги(
		ИмяФормы, Контейнер, ДанныеРеглОтчета.СтруктураРеквизитовФормы, ДанныеРеглОтчета.СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПериодОтчета(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист2"]);
	
	ДеревоРаздела.Строки[0].Данные.Вставить("П000Л20000001",
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ДеревоРаздела.Строки[0].Данные.Вставить("П000Л20000002",
	НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист2"]);
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист9"]);
	
	ДеревоРаздела.Строки[0].Данные.Вставить("П000Л90000001",
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ДеревоРаздела.Строки[0].Данные.Вставить("П000Л90000002",
	НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, Новый УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист9"]);
	
КонецПроцедуры

Процедура ЗаполнитьРеглОтчетВнешнимиДанными(ИмяФормы, Приемник, Источник)
	
	Возврат;
	
КонецПроцедуры

Процедура РассчитатьИтоги(ИмяФормы, Контейнер, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	
	ИмяРаздела = "Листы3_7";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	ИмяГруппыМнЧЛ4М1 = СтруктураРеквизитовФормы.мИдГруппыЛ4М1;
	СтруктураГруппыМнЧЛ4М1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ4М1];
	ИменаГрафМнЧЛ4М1 = СтруктураГруппыМнЧЛ4М1["ИменаГраф"];
	
	ИмяГруппыМнЧЛ6М1 = СтруктураРеквизитовФормы.мИдГруппыЛ6М1;
	СтруктураГруппыМнЧЛ6М1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ6М1];
	ИменаГрафМнЧЛ6М1 = СтруктураГруппыМнЧЛ6М1["ИменаГраф"];
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДеревоМнЧЛ4М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ4М1];
		ДеревоМнЧЛ6М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ6М1];
		
		Сумма = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧЛ4М1.Строки Цикл
			Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П000Л4М100002"], 2);
		КонецЦикла;
		Ветка.Данные.Вставить("П000Л30000003", Сумма);
		
		Сумма = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧЛ6М1.Строки Цикл
			Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П000Л6М100002"], 2);
		КонецЦикла;
		Ветка.Данные.Вставить("П000Л30000004", Сумма);
		
		Ветка.Данные.Вставить("П000Л30000005", Окр(Ветка.Данные["П000Л30000002"], 2)
		+ Ветка.Данные["П000Л30000003"] - Ветка.Данные["П000Л30000004"]);
		
	КонецЦикла;
	
	ИмяРаздела = "Лист8";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		Ветка.Данные.Вставить("П000Л80000005", Окр(Ветка.Данные["П000Л80000002"], 2)
		+ Окр(Ветка.Данные["П000Л80000003"], 2) - Окр(Ветка.Данные["П000Л80000004"], 2));
		
	КонецЦикла;
	
	ИмяРаздела = "Листы10_12";
	ИмяГлРаздела = ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов);
	ДеревоДанных = Контейнер[ИмяГлРаздела];
	
	ИмяГруппыМнЧЛ11М1 = СтруктураРеквизитовФормы.мИдГруппыЛ11М1;
	СтруктураГруппыМнЧЛ11М1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ11М1];
	ИменаГрафМнЧЛ11М1 = СтруктураГруппыМнЧЛ11М1["ИменаГраф"];
	
	ИмяГруппыМнЧЛ12М1 = СтруктураРеквизитовФормы.мИдГруппыЛ12М1;
	СтруктураГруппыМнЧЛ12М1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ12М1];
	ИменаГрафМнЧЛ12М1 = СтруктураГруппыМнЧЛ12М1["ИменаГраф"];
	
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДеревоМнЧЛ11М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ11М1];
		ДеревоМнЧЛ12М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ12М1];
		
		Сумма = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧЛ11М1.Строки Цикл
			Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П00Л11М100002"], 2);
		КонецЦикла;
		Ветка.Данные.Вставить("П00Л100000003", Сумма);
		
		Сумма = 0;
		Для каждого СтрокаМнЧ Из ДеревоМнЧЛ12М1.Строки Цикл
			Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П00Л12М100002"], 2);
		КонецЦикла;
		Ветка.Данные.Вставить("П00Л100000004", Сумма);
		
		Ветка.Данные.Вставить("П00Л100000005", Окр(Ветка.Данные["П00Л100000002"], 2)
		+ Ветка.Данные["П00Л100000003"] - Ветка.Данные["П00Л100000004"]);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяГлРаздела(ИмяФормы, ИмяРаздела, СтруктураМногоуровневыхРазделов)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = СтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	Возврат ИмяГлРаздела;
	
КонецФункции

Функция ЗаписатьРеглОтчет(ИмяФормы, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет")
			И НЕ ПараметрыЗаписи.СохраняемыйРеглОтчет.Пустая() Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет.ПолучитьОбъект();
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		ИначеЕсли ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			
			ДокументРегламентированныйОтчет = ПараметрыЗаписи.СохраняемыйРеглОтчет;
			
			РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
			
		Иначе
			
			РегламентированнаяОтчетность.ДобавитьОшибкуФормированияРеглОтчета(ПараметрыЗаписи,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2';
				|en = 'Неверный тип входящего параметра (%1) при автоматическом формировании формы %2'"),
			ТипЗнч(ПараметрыЗаписи.СохраняемыйРеглОтчет), ПараметрыЗаписи.НаименованиеОтчета));
			
			Возврат Неопределено;
			
		КонецЕсли
		
	Иначе
		
		ДокументРегламентированныйОтчет = Документы.РегламентированныйОтчет.СоздатьДокумент();
		
		РегламентированнаяОтчетность.ЗаблокироватьДокумент(ДокументРегламентированныйОтчет);
		
		ДокументРегламентированныйОтчет.Дата = ПараметрыЗаписи.ДатаОкончания;
		ДокументРегламентированныйОтчет.УстановитьВремя();
		ДокументРегламентированныйОтчет.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	ПараметрыЗаписи.СохраняемыйРеглОтчет = ДокументРегламентированныйОтчет;
	
	Если ЗаписатьДокумент(ИмяФормы, ПараметрыЗаписи) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДокументРегламентированныйОтчет.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ИмяФормы	      = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
	
	ИнициализироватьМногоуровневыеРазделы(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(
	ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы,
											 ДеревоВыгрузки,
											 ПараметрыВыгрузки,
											 КодировкаФайлаВыгрузки,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДвижениеСредствПоСчетуВБанкеЗаПределамиРФ");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(
	ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
		
	КонецЦикла;
	
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
	
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
		СохраненныеДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог",   РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("НомКорр",    Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ИдФайлКорр", СокрЛП(Титульный.ИдФайлКорр));
	
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",   СокрЛП(Титульный.НалоговыйОрган));
	
	ПараметрыВыгрузки.Вставить("ДатаКонцаОтчетногоПериода", СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("ИННОрг", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.ИНН));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("ОГРН",    СокрЛП(Титульный.ОГРН));
	
	ПараметрыВыгрузки.Вставить("НаимФил",   СокрЛП(Титульный.НаимФил));
	ПараметрыВыгрузки.Вставить("АдрФил",    СокрЛП(Титульный.АдрФил));
	ПараметрыВыгрузки.Вставить("КодСтраны", СокрЛП(Титульный.КодСтраны));
	
	ПараметрыВыгрузки.Вставить("ОГРНИП",   СокрЛП(Титульный.ОГРНИП));
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",       СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("ПодписантИНН", СокрЛП(Титульный.ПодписантИНН));
	ПараметрыВыгрузки.Вставить("ПодписантТел", СокрЛП(Титульный.ПодписантТел));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти1", "ОтчИнСчет");
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти2", "ОтчИнЭСП");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки,
	?(СтруктураРеквизитовФормы.мСохраненныйДок.Вид = 0, "UT_OTULSCHIN0", "UT_OTULSCHIN2")));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
		
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки505");
		
	Иначе// "ФормаОтчета2023Кв4"
		
		Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки504");
		
	КонецЕсли;
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
									 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Титульный лист.
	//
	Если СтруктураРеквизитовФормы.мСохраненныйДок.Вид > 0 И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИдФайлКорр) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан идентификатор корректируемого файла (имя корректируемого (отменяемого) первичного файла (без расширения))",
		"Титульный", "ИдФайлКорр");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан ИНН индивидуального предпринимателя - резидента", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ИНН индивидуального предпринимателя - резидента, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задана фамилия индивидуального предпринимателя - резидента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задано имя индивидуального предпринимателя - резидента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРНИП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан ОГРНИП", "Титульный", "ОГРНИП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОГРНИП) <> 15 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ОГРНИП, не состоящий из 15 цифр", "Титульный", "ОГРНИП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан ИНН юридического лица - резидента", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ИНН юридического лица - резидента, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан КПП", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан КПП, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задано наименование юридического лица - резидента", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задан ОГРН", "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОГРН) <> 13 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ОГРН, не состоящий из 13 цифр", "Титульный", "ОГРН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.НаимФил)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрФил)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КодСтраны) Тогда
			
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимФил) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задано наименование филиала, представительства или иного подразделения юридического лица"
				+ " - резидента, расположенного за пределами территории Российской Федерации", "Титульный", "НаимФил");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрФил) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задано место нахождения филиала, представительства или иного подразделения юридического лица"
				+ "- резидента, расположенного за пределами территории Российской Федерации", "Титульный", "АдрФил");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодСтраны) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не задан код страны филиала, представительства или иного подразделения юридического лица - резидента,"
				+ " расположенного за пределами территории Российской Федерации", "Титульный", "КодСтраны");
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодСтраны) <> 3 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан код страны филиала, представительства или иного подразделения юридического лица - резидента, "
				+ "расположенного за пределами территории Российской Федерации, не состоящий из 3 цифр", "Титульный", "КодСтраны");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.КодСтраны = "643" ИЛИ ПараметрыВыгрузки.КодСтраны = "010" Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Код страны филиала, представительства или иного подразделения юридического лица - резидента, "
				+ "расположенного за пределами территории Российской Федерации, не должен быть равен 643 или 010",
				"Титульный", "КодСтраны");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "1" ИЛИ ПараметрыВыгрузки.ПрПодп = "2" Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПодписантИНН) Тогда
		Если ПараметрыВыгрузки.ПрПодп = "3" Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не должен быть заполнен ИНН подписанта, если признак подписанта равен ""3""",
			"Титульный", "ПодписантИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ПодписантИНН) <> 12 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан ИНН подписанта, не состоящий из 12 цифр", "Титульный", "ПодписантИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ЗаполненРаздел1
	= ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист2"],
	"Лист2", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Листы3_7"],
	"Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист8"],
	"Лист8", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ЗаполненРаздел2
	= ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист9"],
	"Лист9", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Листы10_12"],
	"Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.Вид = 999 Тогда
		
		Если ЗаполненРаздел1 ИЛИ ЗаполненРаздел2 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Листы 2-12 не должны быть заполнены при отмене сообщения (значении номера корректировки, равном 999)",
			"Титульный", "НомерКорректировки");
			СтатусПроверки = Ложь;
		Конецесли;
		
	Иначе
		
		Если ЗаполненРаздел1 И ЗаполненРаздел2 Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Не допускается одновременное заполнение Листов 2-8 и Листов 9-12", "Лист2", "П000Л20000001", "1");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ (ЗаполненРаздел1 ИЛИ ЗаполненРаздел2) Тогда
			
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Листы 2-8 или Листы 9-12 должны быть заполнены", "Лист2", "П000Л20000003", "1");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЗаполненРаздел1 Тогда
			
			// Лист 2.
			//
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист2"];
			НомСтраницы = "1";
			Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Лист2",
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
				
				Ветка = ДеревоРаздела.Строки[0];
				
				ВозможнаяЛеваяГраница  = НачалоКвартала(ПараметрыВыгрузки.ДатаКонцаОтчетногоПериода);
				ВозможнаяПраваяГраница = КонецДня(ПараметрыВыгрузки.ДатаКонцаОтчетногоПериода);
				
				П000Л20000001_ВходитВРазрешенныйПериод = Ложь;
				ЗначПок = Ветка.Данные["П000Л20000001"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения о счете: не задана дата начала отчетного периода",
					"Лист2", "П000Л20000001", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок, ВозможнаяЛеваяГраница, ВозможнаяПраваяГраница) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: задана дата начала отчетного периода, выходящая за пределы периода с "
					+ Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг") + " по " + Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"),
					"Лист2", "П000Л20000001", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					П000Л20000001_ВходитВРазрешенныйПериод = Истина;
				КонецЕсли;
				
				П000Л20000002_ВходитВРазрешенныйПериод = Ложь;
				ЗначПок = Ветка.Данные["П000Л20000002"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения о счете: не задана дата окончания отчетного периода",
					"Лист2", "П000Л20000002", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок, ВозможнаяЛеваяГраница, ВозможнаяПраваяГраница) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: задана дата окончания отчетного периода, выходящая за пределы периода с "
					+ Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг") + " по " + Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"),
					"Лист2", "П000Л20000002", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					П000Л20000002_ВходитВРазрешенныйПериод = Истина;
				КонецЕсли;
				
				Если П000Л20000001_ВходитВРазрешенныйПериод И П000Л20000002_ВходитВРазрешенныйПериод
					И Ветка.Данные["П000Л20000001"] > Ветка.Данные["П000Л20000002"] Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: дата начала отчетного периода не может быть позднее даты окончания",
					"Лист2", "П000Л20000001", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "ПризнакиОрганизацииЛист2");
				
				ПрОрг = СокрЛП(Ветка.Данные["П000Л20000003"]);
				
				Если НЕ ЗначениеЗаполнено(ПрОрг) Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задан признак организации", "Лист2", "П000Л20000003", НомСтраницы);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ВозмКоды.МассивЗначений.Найти(ПрОрг) = Неопределено Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: некорректно задан признак организации. Возможны значения: "
					+ ВозмКоды.СтрокаЗначений, "Лист2", "П000Л20000003", НомСтраницы);
					СтатусПроверки = Ложь;
					
				ИначеЕсли ПрОрг = "1" Тогда
					
					ИменаПровПоказателей = Новый Массив;
					ИменаПровПоказателей.Добавить("П000Л2ВОФР001");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР002");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР003");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР004");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР005");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР006");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР007");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР008");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР009");
					ИменаПровПоказателей.Добавить("П000Л2ВОФР010");
					Для каждого ИмяПок Из ИменаПровПоказателей Цикл
						Если ЗначениеЗаполнено(Ветка.Данные[ИмяПок]) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,
							"Сведения о счете: вид иной организации финансового рынка не должен быть задан, "
							+ "если признак организации равен 1", "Лист2", ИмяПок, НомСтраницы);
							СтатусПроверки = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ПрОрг = "2" Тогда
					
					ЗаполненПризнакПрисутствия = Ложь;
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка "
						+ "(небанковская кредитная организация)", "Лист2", "П000Л2ВОФР001", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка "
						+ "(небанковская кредитная организация). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР001", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (страховщик, "
						+ "осуществляющий деятельность по добровольному страхованию жизни)", "Лист2", "П000Л2ВОФР002", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (страховщик, "
						+ "осуществляющий деятельность по добровольному страхованию жизни). Возможны значения: 0, 1",
						"Лист2", "П000Л2ВОФР002", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (профессиональный участник "
						+ "рынка ценных бумаг, осуществляющий брокерскую деятельность, и (или) деятельность по управлению ценными "
						+ "бумагами, и (или) депозитарную деятельность)", "Лист2", "П000Л2ВОФР003", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (профессиональный "
						+ "участник рынка ценных бумаг, осуществляющий брокерскую деятельность, и (или) деятельность по управлению "
						+ "ценными бумагами, и (или) депозитарную деятельность). Возможны значения: 0, 1",
						"Лист2", "П000Л2ВОФР003", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (управляющий по договору "
						+ "доверительного управления имуществом)", "Лист2", "П000Л2ВОФР004", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (управляющий по договору"
						+ " доверительного управления имуществом). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР004", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР005"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка "
						+ "(негосударственный пенсионный фонд)", "Лист2", "П000Л2ВОФР005", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка "
						+ "(негосударственный пенсионный фонд). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР005", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР006"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка "
						+ "(акционерный инвестиционный фонд)", "Лист2", "П000Л2ВОФР006", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка "
						+ "(акционерный инвестиционный фонд). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР006", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР007"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (управляющая компания "
						+ "инвестиционного фонда, паевого инвестиционного фонда или негосударственного пенсионного фонда)",
						"Лист2", "П000Л2ВОФР007", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (управляющая компания"
						+ " инвестиционного фонда, паевого инвестиционного фонда или негосударственного пенсионного фонда)."
						+ " Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР007", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР008"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (центральный контрагент)",
						"Лист2", "П000Л2ВОФР008", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка "
						+ "(центральный контрагент). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР008", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР009"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (управляющий товарищ "
						+ "инвестиционного товарищества)", "Лист2", "П000Л2ВОФР009", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (управляющий товарищ"
						+ " инвестиционного товарищества). Возможны значения: 0, 1", "Лист2", "П000Л2ВОФР009", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л2ВОФР010"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: не задан вид иной организации финансового рынка (иная организация или структура "
						+ "без образования юридического лица, которая в рамках своей деятельности принимает от клиентов денежные "
						+ "средства или иные финансовые активы для хранения, управления, инвестирования и (или) осуществления иных "
						+ "сделок в интересах клиента либо прямо или косвенно за счет клиента)", "Лист2", "П000Л2ВОФР010", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан вид иной организации финансового рынка (иная организация или "
						+ "структура без образования юридического лица, которая в рамках своей деятельности принимает от клиентов "
						+ "денежные средства или иные финансовые активы для хранения, управления, инвестирования и (или) осуществления "
						+ "иных сделок в интересах клиента либо прямо или косвенно за счет клиента). Возможны значения: 0, 1",
						"Лист2", "П000Л2ВОФР010", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					Если НЕ ЗаполненПризнакПрисутствия Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: хотя бы один из видов иной организации финансового рынка "
						+ "должен принимать значение 1", "Лист2", "П000Л2ВОФР001", НомСтраницы);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л20000004"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задано наименование", "Лист2", "П000Л20000004", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
					ЗначПок, Истина, " 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^?") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: наименование должно быть заполнено с использованием букв латинского алфавита,"
					+ " пробелов и символов 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^? (также должно соблюдаться следующее"
					+ " соответствие символов и кодов ASCII: "" - 0022; ` - 0060; @ - 0040; № - 2116; $ - 0024; ' - 0027;"
					+ " ~ - 007E; _ - 005F; / - 002F; | - 007C; \ - 005C; ^ - 005E)", "Лист2", "П000Л20000004", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л20000005"]);
				Если ЗначениеЗаполнено(ЗначПок) ИЛИ ПрОрг = "1" Тогда
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: SWIFT код или БИК должен быть задан, если признак организации равен 1",
						"Лист2", "П000Л20000005", НомСтраницы);
						СтатусПроверки = Ложь;
					Иначе
						Если СтрДлина(ЗначПок) < 3 ИЛИ СтрДлина(ЗначПок) > 25 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,
							"Сведения о счете: задан SWIFT код или БИК недопустимой длины. Возможна длина от 3 до 25 символов",
							"Лист2", "П000Л20000005", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ЗначПок, Истина, "0123456789") Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,
							"Сведения о счете: SWIFT код или БИК должен быть заполнен только цифрами и буквами латинского"
							+ " алфавита", "Лист2", "П000Л20000005", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л20000007"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задан полный адрес", "Лист2", "П000Л20000007", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
					ЗначПок, Истина, " 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^?") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: полный адрес должен быть заполнен с использованием букв латинского алфавита,"
					+ " пробелов и символов 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^? (также должно соблюдаться следующее"
					+ " соответствие символов и кодов ASCII: "" - 0022; ` - 0060; @ - 0040; № - 2116; $ - 0024; ' - 0027;"
					+ " ~ - 007E; _ - 005F; / - 002F; | - 007C; \ - 005C; ^ - 005E)", "Лист2", "П000Л20000007", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л20000008"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задан код страны", "Лист2", "П000Л20000008", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: задан код страны, не состоящий из 3 цифр", "Лист2", "П000Л20000008", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ЗначПок = "643" ИЛИ ЗначПок = "010" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: код страны не должен быть равен 643 или 010", "Лист2", "П000Л20000008", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л20000009"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задан номер счета (вклада)", "Лист2", "П000Л20000009", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ЗначПок, Истина, "0123456789") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: номер счета (вклада) должен быть заполнен только цифрами и буквами латинского алфавита",
					"Лист2", "П000Л20000009", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "ПризнакиИспользования");
				
				ПрЛичнИсп = СокрЛП(Ветка.Данные["П000Л20000016"]);
				
				Если ПараметрыВыгрузки.ЭтоИП Тогда
					
					Если НЕ ЗначениеЗаполнено(ПрЛичнИсп) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения о счете: не задан признак личного (совместного) "
						+ "использования счета (вклада) физическим лицом - резидентом", "Лист2", "П000Л20000016", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКоды.МассивЗначений.Найти(ПрЛичнИсп) = Неопределено Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: некорректно задан признак личного (совместного) использования счета (вклада) физическим "
						+ "лицом - резидентом. Возможны значения: " + ВозмКоды.СтрокаЗначений, "Лист2", "П000Л20000016", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(ПрЛичнИсп) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения о счете: не должен быть задан признак личного (совместного) "
						+ "использования счета (вклада) физическим лицом - резидентом", "Лист2", "П000Л20000016", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л20000010"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: не задана дата открытия счета (вклада)", "Лист2", "П000Л20000010", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: задана дата открытия счета (вклада), выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Лист2", "П000Л20000010", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ЗначПок_ = Ветка.Данные["П000Л20000011"];
					Если ЗначениеЗаполнено(ЗначПок_) И ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок_) И (ЗначПок_ < ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения о счете: дата закрытия счета (вклада) не должна быть меньше даты открытия счета",
						"Лист2", "П000Л20000011", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л20000011"];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Сведения о счете: задана дата закрытия счета (вклада), выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Лист2", "П000Л20000011", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л20000012"];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения о счете: задана дата договора, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Лист2", "П000Л20000012", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л20000014"];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, 
					"Сведения о счете: задана дата выдачи разрешения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Лист2", "П000Л20000014", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			Иначе
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не заполнены сведения о счете", "Лист2", "П000Л20000003", "1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			// Листы 3-7.
			//
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Листы3_7"];
			
			ЗаполненыЛисты3_7 = ЗаполненРаздел(ИмяФормы, ДеревоРаздела,
			"Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если ЗаполненыЛисты3_7 Тогда
				
				Для каждого Ветка Из ДеревоРаздела.Строки Цикл
					
					НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					// Лист 3.
					//
					ЗначПок = СокрЛП(Ветка.Данные["П000Л30000001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы
						+ ": не задан код валюты", "Листы3_7", "П000Л30000001", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы
						+ ": задан код валюты, не состоящий из 3 цифр", "Листы3_7", "П000Л30000001", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Лист 4.
					//
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ4М1];
					
					Если Ветка.Данные["П000Л30000003"] > 0 И НЕ ЗаполненаМногострочнаяЧасть(ИмяФормы,
						ДанныеМнЧ, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": должен быть "
						+ "заполнен Лист 4 при заполненной строке ""Зачислено денежных средств за отчетный период - всего""",
						"Листы3_7", "П000Л4М100001_1", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
							СтрокаМнЧ, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П000Л4М100001"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 4 не задан код вида операции", "Листы3_7", "П000Л4М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 4 задан код вида операции, не состоящий из 5 символов",
								"Листы3_7", "П000Л4М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СтрокаМнЧ.Данные["П000Л4М100002"];
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 4 не задана сумма", "Листы3_7", "П000Л4М100002_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							// Лист 5.
							//
							ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ5М1];
							
							Для каждого СтрокаМнЧПодч Из ДанныеМнЧПодч.Строки Цикл
								Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
									СтрокаМнЧПодч, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
									ИндСтрокиМнЧПодч = ДанныеМнЧПодч.Строки.Индекс(СтрокаМнЧПодч);
									НомСтрокиПодч = Формат(ИндСтрокиМнЧПодч + 1, "ЧГ=");
									
									ТекстСообщения = "";
									ЗначПок = СокрЛП(СтрокаМнЧПодч.Данные["П000Л5М100001"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 4: в строке " + НомСтрокиПодч + " Листа 5 не задан уникальный номер контракта",
										"Листы3_7", "П000Л5М100001_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли НЕ НомерКонтрактаСоответствуетТребованиям(ИмяФормы, ЗначПок, ТекстСообщения) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 4: в строке " + НомСтрокиПодч + " Листа 5 неверно задан уникальный номер контракта."
										+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
										"Листы3_7", "П000Л5М100001_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									Если СтрокаМнЧПодч.Данные["П000Л5М100002"] = 0 И СтрокаМнЧПодч.Данные["П000Л5М100003"] = 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 4: в строке " + НомСтрокиПодч + " Листа 5 не задана сумма в наличной или "
										+ "безналичной форме", "Листы3_7", "П000Л5М100002_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					// Лист 6.
					//
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ6М1];
					
					Если Ветка.Данные["П000Л30000004"] > 0 И НЕ ЗаполненаМногострочнаяЧасть(ИмяФормы,
						ДанныеМнЧ, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы
						+ ": должен быть заполнен Лист 6 при заполненной строке ""Списано денежных средств за отчетный период - всего""",
						"Листы3_7", "П000Л6М100001_1", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
							СтрокаМнЧ, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П000Л6М100001"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 6 не задан код вида операции", "Листы3_7", "П000Л6М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 6 задан код вида операции, не состоящий из 5 символов",
								"Листы3_7", "П000Л6М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СтрокаМнЧ.Данные["П000Л6М100002"];
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 6 не задана сумма", "Листы3_7", "П000Л6М100002_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							// Лист 7.
							//
							ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ7М1];
							
							Для каждого СтрокаМнЧПодч Из ДанныеМнЧПодч.Строки Цикл
								Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
									СтрокаМнЧПодч, "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
									ИндСтрокиМнЧПодч = ДанныеМнЧПодч.Строки.Индекс(СтрокаМнЧПодч);
									НомСтрокиПодч = Формат(ИндСтрокиМнЧПодч + 1, "ЧГ=");
									
									ТекстСообщения = "";
									ЗначПок = СокрЛП(СтрокаМнЧПодч.Данные["П000Л7М100001"]);
									Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 6: в строке " + НомСтрокиПодч + " Листа 7 не задан уникальный номер контракта",
										"Листы3_7", "П000Л7М100001_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									ИначеЕсли НЕ НомерКонтрактаСоответствуетТребованиям(ИмяФормы, ЗначПок, ТекстСообщения) Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 6: в строке " + НомСтрокиПодч + " Листа 7 неверно задан уникальный номер контракта."
										+ ?(ЗначениеЗаполнено(ТекстСообщения), " " + ТекстСообщения, ""),
										"Листы3_7", "П000Л7М100001_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
									
									Если СтрокаМнЧПодч.Данные["П000Л7М100002"] = 0 Тогда
										СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Движение средств -> Страница " + НомСтраницы + " -> Строка "
										+ НомСтроки + " Листа 6: в строке " + НомСтрокиПодч + " Листа 7 не задана сумма",
										"Листы3_7", "П000Л7М100002_" + НомСтроки + "_" + НомСтрокиПодч, НомСтраницы);
										СтатусПроверки = Ложь;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Лист 8.
			//
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист8"];
			
			ЗаполненыЛисты8 = ЗаполненРаздел(ИмяФормы, ДеревоРаздела,
			"Лист8", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если ЗаполненыЛисты8 Тогда
				
				Для каждого Ветка Из ДеревоРаздела.Строки Цикл
					
					НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л80000001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан код валюты", "Лист8", "П000Л80000001", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": задан код валюты, не состоящий из 3 цифр", "Лист8", "П000Л80000001", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗаполненПризнакПрисутствия = Ложь;
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (ценные бумаги)", "Лист8", "П000Л8ВФА0001", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (ценные бумаги). Возможны значения: 0, 1",
						"Лист8", "П000Л8ВФА0001", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (производные финансовые инструменты)",
						"Лист8", "П000Л8ВФА0002", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (производные финансовые инструменты). "
						+ "Возможны значения: 0, 1", "Лист8", "П000Л8ВФА0002", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (доли участия в уставном (складочном) капитале юридического лица)",
						"Лист8", "П000Л8ВФА0003", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (доли участия в уставном (складочном) капитале "
						+ "юридического лица). Возможны значения: 0, 1", "Лист8", "П000Л8ВФА0003", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (доли участия в иностранной структуре без образования "
						+ "юридического лица)", "Лист8", "П000Л8ВФА0004", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (доли участия в иностранной структуре без образования "
						+ "юридического лица). Возможны значения: 0, 1", "Лист8", "П000Л8ВФА0004", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0005"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (права требования из договора страхования)",
						"Лист8", "П000Л8ВФА0005", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (права требования из договора страхования). "
						+ "Возможны значения: 0, 1", "Лист8", "П000Л8ВФА0005", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					ЗначПок = СокрЛП(Ветка.Данные["П000Л8ВФА0006"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": не задан вид иного финансового актива (иные финансовые активы, не включенные в вышеуказанный перечень)",
						"Лист8", "П000Л8ВФА0006", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ЗначПок <> "0" И ЗначПок <> "1" Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": некорректно задан вид иного финансового актива (иные финансовые активы, не включенные в вышеуказанный "
						+ "перечень). Возможны значения: 0, 1", "Лист8", "П000Л8ВФА0006", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗаполненПризнакПрисутствия = ЗаполненПризнакПрисутствия ИЛИ ЗначПок = "1";
					
					Если НЕ ЗаполненПризнакПрисутствия Тогда
						
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Иные финансовые активы -> Страница " + НомСтраницы
						+ ": хотя бы один из видов иных финансовых активов должен принимать значение 1",
						"Лист8", "П000Л8ВФА0001", НомСтраницы);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ЗаполненыЛисты3_7 И НЕ ЗаполненыЛисты8 Тогда
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Не заполнены сведения о движении денежных средств и(или) сведения об иных финансовых активах",
				"Листы3_7", "П000Л30000001", "1");
				СтатусПроверки = Ложь;
				
			Конецесли;
			
		ИначеЕсли ЗаполненРаздел2 Тогда
			
			// Лист 9.
			//
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист9"];
			НомСтраницы = "1";
			Если ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Лист9",
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
				
				Ветка = ДеревоРаздела.Строки[0];
				
				ВозможнаяПраваяГраница = КонецДня(ПараметрыВыгрузки.ДатаКонцаОтчетногоПериода);
				
				П000Л90000001_ВходитВРазрешенныйПериод = Ложь;
				ЗначПок = Ветка.Данные["П000Л90000001"];
				ВозможнаяЛеваяГраница  = НачалоГода(ПараметрыВыгрузки.ДатаКонцаОтчетногоПериода);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задана дата начала отчетного периода",
					"Лист9", "П000Л90000001", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок, ВозможнаяЛеваяГраница, ВозможнаяПраваяГраница) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: задана дата начала отчетного периода, выходящая за пределы периода с "
					+ Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг") + " по " + Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"),
					"Лист9", "П000Л90000001", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					П000Л90000001_ВходитВРазрешенныйПериод = Истина;
				КонецЕсли;
				
				П000Л90000002_ВходитВРазрешенныйПериод = Ложь;
				ЗначПок = Ветка.Данные["П000Л90000002"];
				ВозможнаяЛеваяГраница  = НачалоКвартала(ПараметрыВыгрузки.ДатаКонцаОтчетногоПериода);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задана дата окончания отчетного периода",
					"Лист9", "П000Л90000002", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок, ВозможнаяЛеваяГраница, ВозможнаяПраваяГраница) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: задана дата окончания отчетного периода, выходящая за пределы периода с "
					+ Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг") + " по " + Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"),
					"Лист9", "П000Л90000002", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					П000Л90000002_ВходитВРазрешенныйПериод = Истина;
				КонецЕсли;
				
				Если П000Л90000001_ВходитВРазрешенныйПериод И П000Л90000002_ВходитВРазрешенныйПериод
					И Ветка.Данные["П000Л90000001"] > Ветка.Данные["П000Л90000002"] Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: дата начала отчетного периода не может быть позднее даты окончания",
					"Лист9", "П000Л90000001", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "ПризнакиОрганизацииЛист9");
				
				ПрОрг = СокрЛП(Ветка.Данные["П000Л90000003"]);
				
				Если НЕ ЗначениеЗаполнено(ПрОрг) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задан признак организации",
					"Лист9", "П000Л90000003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмКоды.МассивЗначений.Найти(ПрОрг) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: некорректно задан признак организации. Возможны значения: "
					+ ВозмКоды.СтрокаЗначений, "Лист9", "П000Л90000003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л90000004"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задано наименование",
					"Лист9", "П000Л90000004", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
					ЗначПок, Истина, " 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^?") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: наименование должно быть заполнено с использованием букв латинского алфавита,"
					+ " пробелов и символов 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^? (также должно соблюдаться следующее"
					+ " соответствие символов и кодов ASCII: "" - 0022; ` - 0060; @ - 0040; № - 2116; $ - 0024; ' - 0027;"
					+ " ~ - 007E; _ - 005F; / - 002F; | - 007C; \ - 005C; ^ - 005E)", "Лист9", "П000Л90000004", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л90000005"]);
				Если ЗначениеЗаполнено(ЗначПок) ИЛИ ПрОрг = "1" Тогда
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения об ЭСП: SWIFT код или БИК должен быть задан, если признак организации равен 1",
						"Лист9", "П000Л90000005", НомСтраницы);
						СтатусПроверки = Ложь;
					Иначе
						Если СтрДлина(ЗначПок) < 3 ИЛИ СтрДлина(ЗначПок) > 25 Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,
							"Сведения об ЭСП: задан SWIFT код или БИК недопустимой длины. Возможна длина от 3 до 25 символов",
							"Лист9", "П000Л90000005", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ЗначПок, Истина, "0123456789") Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки,
							"Сведения об ЭСП: SWIFT код или БИК должен быть заполнен только цифрами и буквами латинского"
							+ " алфавита", "Лист9", "П000Л90000005", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л90000007"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задан полный адрес",
					"Лист9", "П000Л90000007", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(
					ЗначПок, Истина, " 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^?") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: полный адрес должен быть заполнен с использованием букв латинского алфавита,"
					+ " пробелов и символов 0123456789!""`@#№$%&'()[]<>{}*+~=_-.,:;/|\^? (также должно соблюдаться следующее"
					+ " соответствие символов и кодов ASCII: "" - 0022; ` - 0060; @ - 0040; № - 2116; $ - 0024; ' - 0027;"
					+ " ~ - 007E; _ - 005F; / - 002F; | - 007C; \ - 005C; ^ - 005E)", "Лист9", "П000Л90000007", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л90000008"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задан код страны",
					"Лист9", "П000Л90000008", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: задан код страны, не состоящий из 3 цифр",
					"Лист9", "П000Л90000008", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ЗначПок = "643" ИЛИ ЗначПок = "010" Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: код страны не должен быть равен 643 или 010",
					"Лист9", "П000Л90000008", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П000Л90000009"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задан идентификатор электронного средства платежа",
					"Лист9", "П000Л90000009", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ЗначПок, Истина, "0123456789") Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: идентификатор электронного средства платежа должен быть заполнен "
					+ "только цифрами и буквами латинского алфавита", "Лист9", "П000Л90000009", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2023Кв4") Тогда
					
					ВозмКоды = ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, "ПризнакиИспользования");
					
					ПрЛичнИсп = СокрЛП(Ветка.Данные["П000Л90000012"]);
					
					Если ПараметрыВыгрузки.ЭтоИП Тогда
						
						Если НЕ ЗначениеЗаполнено(ПрЛичнИсп) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не задан признак личного "
							+ "(совместного) использования электронного средства платежа физическим лицом - резидентом",
							"Лист9", "П000Л90000012", НомСтраницы);
							СтатусПроверки = Ложь;
						ИначеЕсли ВозмКоды.МассивЗначений.Найти(ПрЛичнИсп) = Неопределено Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: некорректно задан признак личного "
							+ "(совместного) использования электронного средства платежа физическим лицом - резидентом. Возможны значения: "
							+ ВозмКоды.СтрокаЗначений, "Лист9", "П000Л90000012", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					Иначе
						
						Если ЗначениеЗаполнено(ПрЛичнИсп) Тогда
							СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Сведения об ЭСП: не должен быть задан признак личного "
							+ "(совместного) использования электронного средства платежа физическим лицом - резидентом",
							"Лист9", "П000Л90000012", НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л90000010"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: не задана дата предоставления права использования электронного средства платежа",
					"Лист9", "П000Л90000010", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: задана дата предоставления права использования электронного средства платежа, "
					+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Лист9", "П000Л90000010", НомСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ЗначПок_ = Ветка.Данные["П000Л90000011"];
					Если ЗначениеЗаполнено(ЗначПок_) И ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок_) И (ЗначПок_ < ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Сведения об ЭСП: дата прекращения права использования электронного средства платежа "
						+ "не должна быть меньше даты предоставления права использования электронного средства платежа",
						"Лист9", "П000Л90000011", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000Л90000011"];
				Если ЗначениеЗаполнено(ЗначПок) И НЕ ДатаВходитВРазрешенныйПериод(ИмяФормы, ЗначПок) Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Сведения об ЭСП: задана дата прекращения права использования электронного средства платежа, "
					+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Лист9", "П000Л90000011", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			Иначе
				
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не заполнены сведения об ЭСП", "Лист9", "П000Л90000001", "1");
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			// Листы 10-12.
			//
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Листы10_12"];
			
			ЗаполненыЛисты10_12 = ЗаполненРаздел(ИмяФормы, ДеревоРаздела, "Листы10_12",
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			
			Если ЗаполненыЛисты10_12 Тогда
				
				Для каждого Ветка Из ДеревоРаздела.Строки Цикл
					
					НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
					
					// Лист 10.
					//
					ЗначПок = СокрЛП(Ветка.Данные["П00Л100000001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы
						+ ": не задан код валюты", "Листы10_12", "П00Л100000001", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы
						+ ": задан код валюты, не состоящий из 3 цифр", "Листы10_12", "П00Л100000001", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Лист 11.
					//
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ11М1];
					
					Если Ветка.Данные["П00Л100000003"] > 0 И НЕ ЗаполненаМногострочнаяЧасть(ИмяФормы,
						ДанныеМнЧ, "Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Переводы средств -> Страница " + НомСтраницы + ": должен быть заполнен Лист 11 "
						+ "при заполненной строке ""Зачислено денежных средств на электронное средство платежа - всего""",
						"Листы10_12", "П00Л11М100001_1", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
							СтрокаМнЧ, "Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00Л11М100001"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 11 не задан код вида операции",
								"Листы10_12", "П00Л11М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 11 задан код вида операции, не состоящий из 5 символов",
								"Листы10_12", "П00Л11М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СтрокаМнЧ.Данные["П00Л11М100002"];
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 11 не задана сумма", "Листы10_12", "П00Л11М100002_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Лист 12.
					//
					ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ12М1];
					
					Если Ветка.Данные["П00Л100000004"] > 0 И НЕ ЗаполненаМногострочнаяЧасть(ИмяФормы,
						ДанныеМнЧ, "Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Переводы средств -> Страница " + НомСтраницы + ": должен быть заполнен Лист 12 "
						+ "при заполненной строке ""Списано денежных средств с электронного средства платежа - всего""",
						"Листы10_12", "П00Л12М100001_1", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
							СтрокаМнЧ, "Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов) Тогда
							ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
							НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
							
							ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00Л12М100001"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 12 не задан код вида операции",
								"Листы10_12", "П00Л12М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 12 задан код вида операции, не состоящий из 5 символов",
								"Листы10_12", "П00Л12М100001_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СтрокаМнЧ.Данные["П00Л12М100002"];
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Переводы средств -> Страница " + НомСтраницы + ": в строке "
								+ НомСтроки + " Листа 12 не задана сумма", "Листы10_12", "П00Л12М100002_" + НомСтроки, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
					
					СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не заполнены сведения о переводах средств",
					"Листы10_12", "П00Л100000001", "1");
					СтатусПроверки = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяФормы, ИмяГруппыЗначений)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
		
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2024Кв2");
		
	ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2023Кв4") Тогда
		
		МакетСоставаПоказателей = ЭтотОбъект.ПолучитьМакет("СпискиВыбора2023Кв4");
		
	КонецЕсли;
	
	МассивЗначений = Неопределено;
	СтрокаЗначений = Неопределено;
	
	Область = МакетСоставаПоказателей.Области.Найти(ИмяГруппыЗначений);
	Если Область <> Неопределено Тогда
		МассивЗначений = Новый Массив;
		ВерхОбласти = Область.Верх;
		НизОбласти  = Область.Низ;
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			ТекЗначение = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если ЗначениеЗаполнено(ТекЗначение) Тогда
				МассивЗначений.Добавить(ТекЗначение);
			КонецЕсли;
		КонецЦикла;
		СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	КонецЕсли;
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

Функция НомерКонтрактаСоответствуетТребованиям(ИмяФормы, Знач НомерКонтракта, ТекстСообщения)
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
		
		ТекстСообщенияОбщий = НСтр("ru='Уникальный номер контракта должен соответствовать одному из шаблонов: "
		+ """ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х"", ""ХХХХХХХХ/ХХХХ/GUХХ/Х/Х"" (X - число от 0 до 9)'");
		
	Иначе// ФормаОтчета2023Кв4
		
		ТекстСообщенияОбщий = НСтр(
		"ru = 'Уникальный номер контракта должен соответствовать шаблону ""ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х"" (X - число от 0 до 9)';
		|en = 'Уникальный номер контракта должен соответствовать шаблону ""ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х"" (X - число от 0 до 9)'");
		
	КонецЕсли;
	
	НомерКонтракта = СокрЛП(НомерКонтракта);
	
	Если СтрДлина(НомерКонтракта) <> 22 Тогда
		
		ТекстСообщения = ТекстСообщенияОбщий;
		
		Возврат Ложь;
		
	Иначе
		
		Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
			
			Если (Сред(НомерКонтракта, 15, 1) = "G" ИЛИ Сред(НомерКонтракта, 16, 1) = "U")
				И Сред(НомерКонтракта, 15, 2) <> "GU" Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По 22 Цикл
			
			ТекСимв = Сред(НомерКонтракта, Ном, 1);
			
			Если Ном = 9 ИЛИ Ном = 14 ИЛИ Ном = 19 ИЛИ Ном = 21 Тогда
				
				НомерКонтрактаСоответствуетТребованиям = ТекСимв = "/";
				
			ИначеЕсли Ном = 15 И ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
				
				НомерКонтрактаСоответствуетТребованиям = СтрНайти("1234567890G", ТекСимв) > 0;
				
			ИначеЕсли Ном = 16 И ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2024Кв2") Тогда
				
				НомерКонтрактаСоответствуетТребованиям = СтрНайти("1234567890U", ТекСимв) > 0;
				
			Иначе
				
				НомерКонтрактаСоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
				
			КонецЕсли;
			
			Если НЕ НомерКонтрактаСоответствуетТребованиям Тогда
				
				ТекстСообщения = ТекстСообщенияОбщий;
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ЗаполненРаздел(ИмяФормы,
					   Знач ДеревоРаздела,
					   Знач ИмяРаздела,
					   СтруктураРеквизитовФормы,
					   СтруктураМногоуровневыхРазделов,
					   ДопПараметры = Неопределено) Экспорт
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(ИмяФормы,
									  СтраницаРаздела,
									  ИмяРаздела,
									  СтруктураРеквизитовФормы,
									  СтруктураМногоуровневыхРазделов,
									  ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтраницаРаздела(ИмяФормы,
								 Знач СтраницаРаздела,
								 Знач ИмяРаздела,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 ДопПараметры = Неопределено)
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ИмяФормы,
											 ДеревоМнЧ,
											 ИмяРаздела,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ИмяФормы,
								ДеревоПодчРаздела,
								ИмяПодчРаздела,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов,
								ДопПараметры) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаМногострочнаяЧасть(ИмяФормы,
									Знач ДеревоМнЧ,
									Знач ИмяРаздела,
									СтруктураРеквизитовФормы,
									СтруктураМногоуровневыхРазделов,
									ДопПараметры = Неопределено)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
											   СтрокаМнЧ,
											   ИмяРаздела,
											   СтруктураРеквизитовФормы,
											   СтруктураМногоуровневыхРазделов,
											   ДопПараметры) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
										  Знач СтрокаМнЧ,
										  Знач ИмяРаздела,
										  СтруктураРеквизитовФормы,
										  СтруктураМногоуровневыхРазделов,
										  ДопПараметры = Неопределено)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность
	= ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, ИмяРаздела, ДопПараметры);
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(ИмяФормы,
													   СтрокаПодчМнЧ,
													   ИмяРаздела,
													   СтруктураРеквизитовФормы,
													   СтруктураМногоуровневыхРазделов,
													   ДопПараметры) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоказателиНеанализируемыеНаЗаполненность(ИмяФормы, Знач ИмяРаздела, ДопПараметры = Неопределено)
	
	ИменаПоказателей = Новый Массив;
	
	ИменаПоказателей.Добавить("П000Л20000001");
	ИменаПоказателей.Добавить("П000Л20000002");
	
	ИменаПоказателей.Добавить("П000Л90000001");
	ИменаПоказателей.Добавить("П000Л90000002");
	
	Возврат ИменаПоказателей;
	
КонецФункции

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	Возврат;
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти1
			ИЛИ Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти2 Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если (РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти1") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти1)
				ИЛИ (РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти2") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти2) Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.НомКорр <> "999" Тогда
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		ДанныеМногоуровневыхРазделов = СохрСтруктура.ДанныеМногоуровневыхРазделов;
		СохрСтруктура = Неопределено;
		
		ЗаполненРаздел1
		= ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист2"],
		"Лист2", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
		ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Листы3_7"],
		"Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
		ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист8"],
		"Лист8", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ЗаполненРаздел2
		= ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Лист9"],
		"Лист9", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
		ИЛИ ЗаполненРаздел(ИмяФормы, ДанныеМногоуровневыхРазделов["Листы10_12"],
		"Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		Если УзелРодитель.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти1 И ЗаполненРаздел1 Тогда
			
			// Лист 2.
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист2"];
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы,
			СтруктураМногоуровневыхРазделов, ДеревоРаздела.Строки[0].Данные, УзелРодитель);
			
			СвСчетИно = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СвСчетИно");
			
			// Листы 3-7.
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Листы3_7"];
			СведДС = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвСчетИно, "СведДС");
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				// Лист 3.
				ЭкзСведДС = СкопироватьУзел(ИмяФормы, СвСчетИно, СведДС, СвСчетИно.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзСведДС.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Листы 4.
				ЗачДС = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДС, "ЗачДС");
				ЗачДСКод = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЗачДС, "ЗачДСКод");
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ4М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					ЭкзЗачДСКод = СкопироватьУзел(ИмяФормы, ЗачДС, ЗачДСКод, ЗачДС.Строки.Количество() - 1);
					Для каждого Эл Из ЭкзЗачДСКод.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					
					// Листы 5.
					ЗачДСКонтрУБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзЗачДСКод, "ЗачДСКонтрУБ");
					ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ5М1];
					Для каждого СтрокаМнЧПодч Из ДанныеМнЧПодч.Строки Цикл
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						СтрокаМнЧПодч.Данные, СкопироватьУзел(ИмяФормы, ЭкзЗачДСКод, ЗачДСКонтрУБ, ЭкзЗачДСКод.Строки.Количество() - 1));
					КонецЦикла;
					
				КонецЦикла;
				
				// Листы 6.
				СписДС = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведДС, "СписДС");
				СписДСКод = ПолучитьПодчиненныйЭлемент(ИмяФормы, СписДС, "СписДСКод");
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ6М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					ЭкзСписДСКод = СкопироватьУзел(ИмяФормы, СписДС, СписДСКод, СписДС.Строки.Количество() - 1);
					Для каждого Эл Из ЭкзСписДСКод.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(ИмяФормы, Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					
					// Листы 7.
					СписДСКонтрУБ = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСписДСКод, "СписДСКонтрУБ");
					ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ7М1];
					Для каждого СтрокаМнЧПодч Из ДанныеМнЧПодч.Строки Цикл
						ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
						СтрокаМнЧПодч.Данные, СкопироватьУзел(ИмяФормы, ЭкзСписДСКод, СписДСКонтрУБ, ЭкзСписДСКод.Строки.Количество() - 1));
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Лист 8.
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист8"];
			СведФА = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвСчетИно, "СведФА");
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
				Ветка.Данные, СкопироватьУзел(ИмяФормы, СвСчетИно, СведФА, СвСчетИно.Строки.Количество() - 1));
			КонецЦикла;
			
		ИначеЕсли УзелРодитель.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти2 И ЗаполненРаздел2 Тогда
			
			// Лист 9.
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Лист9"];
			ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы,
			СтруктураМногоуровневыхРазделов, ДеревоРаздела.Строки[0].Данные, УзелРодитель);
			
			СвЭСПИно = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель, "СвЭСПИно");
			
			// Листы 10-12.
			ДеревоРаздела = ДанныеМногоуровневыхРазделов["Листы10_12"];
			СведЭСП = ПолучитьПодчиненныйЭлемент(ИмяФормы, СвЭСПИно, "СведЭСП");
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				// Лист 10.
				ЭкзСведЭСП = СкопироватьУзел(ИмяФормы, СвЭСПИно, СведЭСП, СвЭСПИно.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзСведЭСП.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(ИмяФормы, Эл, Ветка.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Листы 11.
				ЗачСред = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведЭСП, "ЗачСред");
				ЗачСредКод = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЗачСред, "ЗачСредКод");
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ11М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, ЗачСред, ЗачСредКод, ЗачСред.Строки.Количество() - 1));
				КонецЦикла;
				
				// Листы 12.
				СписСред = ПолучитьПодчиненныйЭлемент(ИмяФормы, ЭкзСведЭСП, "СписСред");
				СписСредКод = ПолучитьПодчиненныйЭлемент(ИмяФормы, СписСред, "СписСредКод");
				ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыЛ12М1];
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов,
					СтрокаМнЧ.Данные, СкопироватьУзел(ИмяФормы, СписСред, СписСредКод, СписСред.Строки.Количество() - 1));
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы,
							ДеревоВыгрузки,
							ПараметрыВыгрузки,
							КодировкаФайлаВыгрузки,
							СтруктураРеквизитовФормы,
							СтруктураМногоуровневыхРазделов)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки,
	СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы,
								 СтрокаДерева,
								 ПотокXML,
								 ПараметрыВыгрузки,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки,
			СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки,
				СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПечатногоБланка

Функция ПечатныйБланк(ПараметрыПечати) Экспорт
	
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем ДанныеРазделов;
	Перем ВидПечати;
	Перем ДеревоВыбранныхСтраниц;
	Перем ДанныеМногоуровневыхРазделов;
	
	ИмяФормы = ПараметрыПечати.ВыбраннаяФорма;
	
	ПечатныйБланкФормируетсяВФорматеPDF = Ложь;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы) Тогда
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		ПараметрыПечати.Свойство("СохраненныйОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
		СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		ПараметрыПечати.СохраненныйОтчет.Организация);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов) Тогда
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДеревоВыбранныхСтраниц", ДеревоВыбранныхСтраниц) Тогда
		ДеревоВыбранныхСтраниц = ПараметрыПечати.СохраненныйОтчет.ДеревоНастройкиСтраниц.Получить();
		ПечатныйБланкФормируетсяВФорматеPDF = Истина;
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ВидПечати", ВидПечати) Тогда
		ВидПечати = "";
	КонецЕсли;
	
	Если НЕ ПараметрыПечати.Свойство("ДанныеРазделов", ДанныеРазделов) Тогда
		
		ДанныеРазделов = Новый Структура;
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
		
		Для Каждого Раздел Из ПоказателиОтчета Цикл
			
			ДанныеРазделов.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
				РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
		КонецЦикла;
		
		Если СохрСтруктура.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
			
			Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
				
				РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, Новый УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста(
	ИмяФормы, СтруктураРеквизитовФормы, ДанныеРазделов.Титульный);
	
	ЗаполненРаздел1
	= ЗаполненРаздел(ИмяФормы, ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанныхЛист2"]), "Лист2", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанныхЛисты3_7"]), "Листы3_7", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанныхЛист8"]), "Лист8", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	ЗаполненРаздел2
	= ЗаполненРаздел(ИмяФормы, ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанныхЛист9"]), "Лист9", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов)
	ИЛИ ЗаполненРаздел(ИмяФормы, ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
	"АдресВоВрХранилищеДеревоДанныхЛисты10_12"]), "Листы10_12", СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
	
	Для Каждого СтраницаОтчета Из ДеревоВыбранныхСтраниц.Строки Цикл
		
		Если СтраницаОтчета.ВыводНаПечать = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтраницаОтчета.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтраницаОтчета.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтраницаОтчета.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтраницаОтчета.ИмяОбластиТабличногоПоля);
		Структурапараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЗаполненРаздел1",    ЗаполненРаздел1);
		СтруктураПараметров.Вставить("ЗаполненРаздел2",    ЗаполненРаздел2);
		СтруктураПараметров.Вставить("СтруктураМногоуровневыхРазделов", СтруктураМногоуровневыхРазделов);
		
		Если СтруктураМногоуровневыхРазделов.Свойство(СтраницаОтчета.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		Иначе
			
			ВывестиНаПечатьЛист(ИмяФормы,
			СтруктураПараметров,
			ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы,
			ДанныеРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	СтруктураРеквизитовФормы, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Если НЕ ПечатныйБланкФормируетсяВФорматеPDF Тогда
		Возврат "";
	КонецЕсли;
	
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		
		ПакетОтображаемыхДокументов.Состав.Добавить(Лист.Значение[0]);
		
	КонецЦикла;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
	
	ПакетОтображаемыхДокументов.ЗаписатьФайлДляПечати(ИмяВременногоФайла);
	
	ФайлПечатногоБланка = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлПечатногоБланка, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ИмяФайлаПечатногоБланка = СтруктураРеквизитовФормы.НаименованиеОтчета
							+ НСтр("ru = ' за ';
									|en = ' за '")
							+ ПредставлениеПериода(
								НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала),
								КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),
								"ФП = Истина")
							+ " (" + СтруктураРеквизитовФормы.мСохраненныйДок.Организация + ").pdf";
	
	ПечатныйБланк = Новый Структура;
	ПечатныйБланк.Вставить("АдресПечатногоБланка", АдресВоВременномХранилище);
	ПечатныйБланк.Вставить("ИмяФайлаПечатногоБланка",
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПечатногоБланка));
	
	Возврат ПечатныйБланк;
	
КонецФункции

Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста(ИмяФормы, СтруктураРеквизитовФормы, СтруктураДанныхТитульный)
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	СтрИНН = "";
	
	Если СтруктураДанныхТитульный.Свойство("ИНН", СтрИНН) Тогда
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			
			СтрИНН = СтрИНН + "--";
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрКПП = "";
	
	Если СтруктураДанныхТитульный.Свойство("КПП", СтрКПП) Тогда
		
		Для Ном = 1 По СтрДлина(СтрКПП) Цикл
			
			МассивКПП[Ном - 1] = Сред(СтрКПП, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаПодписи = "";
	
	Если СтруктураДанныхТитульный.Свойство("ДатаПодписи", ДатаПодписи) Тогда	
		
		Если ТипЗнч(ДатаПодписи) = Тип("Строка") Тогда 
			
			СтрДатаПодписи = Лев(СтрЗаменить(ДатаПодписи, ".", ""), 8);
			
		ИначеЕсли ТипЗнч(ДатаПодписи) = Тип("Дата") Тогда 
			
			Если ЗначениеЗаполнено(ДатаПодписи) Тогда 
				
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(ДатаПодписи, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
				
			Иначе
				
				СтрДатаПодписи = "        ";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

Процедура ВывестиНаПечатьЛист(ИмяФормы,
							  СтруктураПараметров,
							  ОбщиеРеквизитыРазделов,
							  СтруктураРеквизитовФормы,
							  ДанныеРазделов,
							  ТабличныйДокумент = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк" + Прав(СокрЛП(ИмяФормы), 7) + "_";
	
	ИмяМЧБ = ПрефиксИменМакетов + СтруктураПараметров.ИмяСтраницы;
	
	МакетПечатнойФормы = ЭтотОбъект.ПолучитьМакет(ИмяМЧБ);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу  = 5;
	МакетПечатнойФормы.ПолеСлева  = 5;
		
	ЗаполнитьПечатнуюФорму(ИмяФормы,
						   СтруктураПараметров,
						   МакетПечатнойФормы,
						   ОбщиеРеквизитыРазделов,
						   ДанныеРазделов,
						   ТабличныйДокумент);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая("",
														  СтруктураПараметров,
														  ТабличныйДокумент,
														  СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(ИмяФормы,
													  СтруктураПараметров,
													  ОбщиеРеквизитыРазделов,
													  СтруктураРеквизитовФормы,
													  ДанныеРазделов)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИмяТекРаздела = "Лист2" ИЛИ ИмяТекРаздела = "Лист8" ИЛИ ИмяТекРаздела = "Лист9" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для каждого Пок Из Ветка.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Особая обработка: если раздел не заполнен, не выводить автоматически установленные в экранной форме
			// реквизиты отчетного периода.
			//
			Если ИмяТекРаздела = "Лист2" И НЕ СтруктураПараметров.ЗаполненРаздел1 Тогда
				
				Обл = ТабличныйДокумент.Области.Найти("П000Л20000001");
				Если Обл <> Неопределено Тогда
					Обл.Очистить();
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("П000Л20000002");
				Если Обл <> Неопределено Тогда
					Обл.Очистить();
				КонецЕсли;
				
			ИначеЕсли ИмяТекРаздела = "Лист9" И НЕ СтруктураПараметров.ЗаполненРаздел2 Тогда
				
				Обл = ТабличныйДокумент.Области.Найти("П000Л90000001");
				Если Обл <> Неопределено Тогда
					Обл.Очистить();
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("П000Л90000002");
				Если Обл <> Неопределено Тогда
					Обл.Очистить();
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Листы3_7" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Вывод Листа 3.
			//
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			НемногострочныйДанные = Ветка.Данные;
			Для каждого Пок Из НемногострочныйДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист3");
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
			
			// Определение количества Листов 4.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыЛ4М1;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			СтрокМнЧНаЛисте = 27;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения Листов 4.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод Листов 4.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				НемногострочныйДанные = Ветка.Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист4");
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
			// Листы 5 (выводятся на печать по условию).
			//
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИмяГруппыМнЧПодч = СтруктураРеквизитовФормы.мИдГруппыЛ5М1;
				ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧПодч];
				
				Если ЗаполненаМногострочнаяЧасть(ИмяФормы, ДанныеМнЧПодч, ИмяТекРаздела,
					СтруктураРеквизитовФормы, СтруктураПараметров["СтруктураМногоуровневыхРазделов"]) Тогда
					
					// Определение количества Листов 5.
					//
					ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧПодч]["ИменаГраф"];
					СтрокМнЧНаЛисте = 8;
					
					КолСтрокМнЧ = ДанныеМнЧПодч.Строки.Количество();
					ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
					ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
					КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Подготовка многострочных данных для заполнения Листов 5.
					//
					МассивДанныхМнЧДляПечати = Новый Массив;
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
						ДанныеМнЧДляПечати = Новый Структура;
						Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
							_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
							ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
							Если ИндСПриращением > ДанныеМнЧПодч.Строки.Количество() Тогда
								Прервать;
							КонецЕсли;
							ДанныеМнЧДляПечати.Вставить("П000Л4М100001_1", СтрокаМнЧ.Данные["П000Л4М100001"]);
							Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
								ДанныеМнЧДляПечати.Вставить(
								ИмяГрафы + "_1" + _ИндСтроки, ДанныеМнЧПодч.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
							КонецЦикла;
						КонецЦикла;
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					КонецЦикла;
					
					// Вывод Листов 5.
					//
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела);
						
						НемногострочныйДанные = Ветка.Данные;
						Для каждого Пок Из НемногострочныйДанные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
							ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧПодч + "_1"
							+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
							ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧПодч, ИмяОбластиПреемника);
						КонецЦикла;
						
						ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
						Для каждого Пок Из ДанныеМнЧДляПечати Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Для каждого Обл Из ТабличныйДокумент.Области Цикл
							Если СтрНачинаетсяС(Обл.Имя, "П000Л5М100001") И НЕ ЗначениеЗаполнено(Обл.Значение) Тогда
								Обл.Значение = "--------/----/----/-/-";
							КонецЕсли;
						КонецЦикла;
						
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист5");
						ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
						СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Определение количества Листов 6.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыЛ6М1;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			СтрокМнЧНаЛисте = 27;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения Листов 6.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод Листов 6.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				НемногострочныйДанные = Ветка.Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист6");
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
			// Листы 7 (выводятся на печать по условию).
			//
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИмяГруппыМнЧПодч = СтруктураРеквизитовФормы.мИдГруппыЛ7М1;
				ДанныеМнЧПодч = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧПодч];
				
				Если ЗаполненаМногострочнаяЧасть(ИмяФормы, ДанныеМнЧПодч, ИмяТекРаздела,
					СтруктураРеквизитовФормы, СтруктураПараметров["СтруктураМногоуровневыхРазделов"]) Тогда
					
					// Определение количества Листов 7.
					//
					ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧПодч]["ИменаГраф"];
					СтрокМнЧНаЛисте = 12;
					
					КолСтрокМнЧ = ДанныеМнЧПодч.Строки.Количество();
					ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
					ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
					КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Подготовка многострочных данных для заполнения Листов 7.
					//
					МассивДанныхМнЧДляПечати = Новый Массив;
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
						ДанныеМнЧДляПечати = Новый Структура;
						Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
							_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
							ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
							Если ИндСПриращением > ДанныеМнЧПодч.Строки.Количество() Тогда
								Прервать;
							КонецЕсли;
							ДанныеМнЧДляПечати.Вставить("П000Л6М100001_1", СтрокаМнЧ.Данные["П000Л6М100001"]);
							Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
								ДанныеМнЧДляПечати.Вставить(
								ИмяГрафы + "_1" + _ИндСтроки, ДанныеМнЧПодч.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
							КонецЦикла;
						КонецЦикла;
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					КонецЦикла;
					
					// Вывод Листов 7.
					//
					Для НомЛиста = 1 По КолЛистовРаздела Цикл
						
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(МакетРаздела);
						
						НемногострочныйДанные = Ветка.Данные;
						Для каждого Пок Из НемногострочныйДанные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
							ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧПодч + "_1"
							+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
							ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧПодч, ИмяОбластиПреемника);
						КонецЦикла;
						
						ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
						Для каждого Пок Из ДанныеМнЧДляПечати Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
						
						Для каждого Обл Из ТабличныйДокумент.Области Цикл
							Если СтрНачинаетсяС(Обл.Имя, "П000Л7М100001") И НЕ ЗначениеЗаполнено(Обл.Значение) Тогда
								Обл.Значение = "--------/----/----/-/-";
							КонецЕсли;
						КонецЦикла;
						
						СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
						СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист7");
						ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
						СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Листы10_12" Тогда
		
		МакетРаздела = ЭтотОбъект.ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Вывод Листа 10.
			//
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			НемногострочныйДанные = Ветка.Данные;
			Для каждого Пок Из НемногострочныйДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист10");
			ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
			СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
			
			// Определение количества Листов 11.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыЛ11М1;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			СтрокМнЧНаЛисте = 27;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения Листов 11.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод Листов 11.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				НемногострочныйДанные = Ветка.Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист11");
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
			// Определение количества Листов 12.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыЛ12М1;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			СтрокМнЧНаЛисте = 27;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения Листов 12.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			КонецЦикла;
			
			// Вывод Листов 12.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				НемногострочныйДанные = Ветка.Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ
					+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Лист12");
				ВывестиНаПечатьЛист(ИмяФормы, СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов,
				СтруктураРеквизитовФормы, ДанныеРазделов, ТабличныйДокумент);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФорму(ИмяФормы,
								 ПараметрыПечати,
								 МакетПечатнойФормы,
								 ОбщиеРеквизитыРазделов,
								 ДанныеРазделов,
								 ТабличныйДокумент)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		МакетФормыОтчета = ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ПараметрыПечати.ИмяСтраницы);
		
		Для Каждого Показатель Из ДанныеРазделов[ПараметрыПечати.ИмяСтраницы] Цикл
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Показатель.Ключ;
			
			НовСтр.Значение = Показатель.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Область.СодержитЗначение = Истина Тогда
				
				НовСтр = Показатели.Добавить();
				НовСтр.Имя = Область.Имя;
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ИмяФормы, Область, ТабличныйДокумент);
				
				// Особая обработка: если раздел заполнен, переопределить формат представления нуля для некоторых показателей.
				//
				Если Область.Значение = 0
					И ((ПараметрыПечати.ЗаполненРаздел1
					И (Область.Имя = "П000Л30000003" ИЛИ Область.Имя = "П000Л30000004"
					ИЛИ Область.Имя = "П000Л80000003" ИЛИ Область.Имя = "П000Л80000004"))
					ИЛИ (ПараметрыПечати.ЗаполненРаздел2
					И (Область.Имя = "П00Л100000003" ИЛИ Область.Имя = "П00Л100000004"))) Тогда
					
					НовСтр.Значение = "0-----------------.00";
					НовСтр.ЗначениеМЧБ = НовСтр.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4)
									+ Сред(ДатаПодписиСтр, 3, 2)
									+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4)
											  + Сред(ДатаПодписиСтр, 3, 2)
											  + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетПечатнойФормы.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(ИмяФормы, Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
														 ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа < ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(ИмяФормы, Область,
										?(РезультатПоиска.ЗначениеМЧБ = "-", "-", СтрЦелаяЧасть),
										ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(
										ИмяФормы, Область, СтрДробнаяЧасть,
										ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка.
									// Присваивать ничего не будем, но считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ,
													 ТекАдресЗначенияОбласти.ИндексЗнакоместа,
													 ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка")
													 ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда // Служебное поле.
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заполнить область ""%1""';
							|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(ИмяФормы, Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеМЧБ(ИмяФормы, Показатель, МакетФормыОтчета)
	
	ФорматОбласти = "";
	
	Область = МакетФормыОтчета.Области.Найти(?(ТипЗнч(Показатель) = Тип("КлючИЗначение"), 
		Показатель.Ключ, Показатель.Имя));
	
	Если НЕ Область = Неопределено Тогда
		
		ФорматОбласти = Область.Формат;
		
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Показатель.Значение);
	
	Если ТипЗначения = Тип("Число") Тогда
		
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ИмяФормы, ФорматОбласти);
		
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		
		Результат = Формат(Показатель.Значение, СобратьСтрокуФормата(ИмяФормы, СоотвСтрокаФормата));
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		
		Результат = СокрЛП(Показатель.Значение);
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		
		Результат = Формат(Показатель.Значение, ?(ПустаяСтрока(ФорматОбласти), "ДФ=ddMMyyyy", ФорматОбласти));
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		
		Результат = Формат(Показатель.Значение, ФорматОбласти);
		
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

Функция АдресЗначенияОбласти(ИмяФормы, Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

Процедура ПрисвоитьЗначениеОбласти(ИмяФормы, Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьСтрокуФормата(ИмяФормы, Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
			
		КонецЕсли;
		
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
		
	КонецЦикла;
	
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
		
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Функция СобратьСтрокуФормата(ИмяФормы, ПараметрыФормата)
	
	СтрокаФормата = "";
	
	Для Каждого Параметр Из ПараметрыФормата Цикл
		
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		
		СтрокаФормата = Сред(СтрокаФормата, 3);
		
	КонецЕсли;
	
	Возврат СтрокаФормата;
	
КонецФункции

Процедура ПрисвоитьЗначениеОбластиДробнойЧастиПриРазделенииНаМЧБНаЦелуюИДробнуюЧасть(ИмяФормы,
																					 Область,
																					 Знач ДробнаяЧасть,
																					 ИндексЗнакоместа = 0)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(ДробнаяЧасть) >= ИндексЗнакоместа Тогда
			ДробнаяЧасть = Сред(ДробнаяЧасть, ИндексЗнакоместа, 1);
		Иначе
			ДробнаяЧасть = ?(ЗначениеЗаполнено(ДробнаяЧасть), "0", "-");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДробнаяЧасть) Тогда
		ДробнаяЧасть = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(ДробнаяЧасть);
	Иначе
		Область.Текст = ВРЕГ(ДробнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ВставитьДопСтроку(ИмяФормы,
							СтруктураРеквизитовФормы,
							ТабличныйДокумент,
							Знач ИмяГруппы,
							Знач ИмяОбластиПреемника,
							ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь) Экспорт
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяФормы,
						  СтруктураРеквизитовФормы,
						  ТабличныйДокумент,
						  ИмяПодчГруппы,
						  ИмяОбластиПреемникаДляПодчОбласти,
						  Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли