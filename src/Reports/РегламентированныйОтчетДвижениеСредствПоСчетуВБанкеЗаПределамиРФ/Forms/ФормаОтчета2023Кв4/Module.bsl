
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруРеквизитовФормы(Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически
	= Параметры.СформироватьФормуОтчетаАвтоматически;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		Элементы.ФормаОткрытьФормуКонтекстныхНовостей.Видимость = Истина;
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.Отчет.РО_ДвижениеСредствПоСчетуВБанкеЗаПредРФ",
			ИмяФормы(ЭтаФорма.ИмяФормы),
			,
			НСтр("ru = 'Новости: Движение средств по счету в банке за пределами РФ';
				|en = 'Новости: Движение средств по счету в банке за пределами РФ'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ОбъектОтчета.ИнициализироватьМногострочныеЧасти(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	ОбъектОтчета.ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													   СтруктураРеквизитовФормы,
													   мСтруктураМногоуровневыхРазделов);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.ИнициализироватьОбычныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы,
								 				мСтруктураМногоуровневыхРазделов,
								 				СтруктураДанныхРазделов);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗначениеВДанныеФормы(ОбъектОтчета.СтруктураСтраницОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), ЭтаФорма["мДеревоСтраницОтчета"]);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ИзменилсяПериодОтчета = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ИзменилсяПериодОтчета
			= НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)
			<> НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	НастройкиВидимости = РегламентированнаяОтчетность.НастройкиВидимостиЭлементовФормы(ЭтаФорма);
	СтруктураРеквизитовФормы.Вставить("НастройкиВидимостиЭлементовФормы", НастройкиВидимости);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Если НЕ СтруктураРеквизитовФормы.НастройкиВидимостиЭлементовФормы.ПостояннаяВидимость Тогда
			Элементы.Заполнить.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено И ИзменилсяПериодОтчета)
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ЗаполнитьПериодОтчета();
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено
		ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		
		ОбъектОтчета.ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													СтруктураРеквизитовФормы,
													ДатаПодписи,
													ТабличныйДокумент);
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ СтруктураРеквизитовФормы.ИП Тогда
			
			ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист2"]);
			Для каждого Ветка Из ДеревоРаздела.Строки Цикл
				
				Если Ветка.Данные.Свойство("П000Л20000016") Тогда
					Ветка.Данные.Вставить("П000Л20000016", "");
				КонецЕсли;
				
			КонецЦикла;
			РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоРаздела,
			УникальныйИдентификатор, СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхЛист2"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
	КонецЕсли;
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.дв.ден.б.за пр.23к4", '20240301') Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов)
	
	Если СтруктураДанныхРазделов.СтруктураДанныхТитульный.Количество() > 0 Тогда
		ЭтаФорма.СтруктураДанныхТитульный = СтруктураДанныхРазделов.СтруктураДанныхТитульный;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормы(ЭтаФорма.ИмяФормы), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		Если Показатель.Значение[1] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = Истина;
			Если СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2023Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Лист 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л20000003", 1, ,
	"Выбор признака организации", КоллекцияСписковВыбора["ПризнакиОрганизацииЛист2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л20000016", 1, ,
	"Выбор признака использования", КоллекцияСписковВыбора["ПризнакиИспользования"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР001", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР002", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР003", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР004", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР005", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР006", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР007", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР008", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР009", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л2ВОФР010", 1, ,
	"Выбор вида организации финансового рынка", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	
	//Лист 8.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0001", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0002", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0003", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0004", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0005", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л8ВФА0006", 1, ,
	"Выбор вида иного финансового актива", КоллекцияСписковВыбора["ПризнакиОтсутствияПрисутствия"]);
	
	//Лист 9.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л90000003", 1, ,
	"Выбор признака организации", КоллекцияСписковВыбора["ПризнакиОрганизацииЛист9"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000Л90000012", 1, ,
	"Выбор признака использования", КоллекцияСписковВыбора["ПризнакиИспользования"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодОтчета()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьПериодОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует,
										   Вариант,
										   ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,
										   Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
				СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										НаимТекРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РазделыРеглОтчета = ОбъектОтчета.РазделыРеглОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	РазделыРеглОтчета.Титульный = СтруктураДанныхТитульный;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИсточникОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыЗаписи.Вставить("ИмяФормыОтчета", СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыЗаписи.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыЗаписи.Вставить("ДатаНачала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыЗаписи.Вставить("ДатаОкончания", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыЗаписи.Вставить("СохраняемыйРеглОтчет", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыЗаписи.Вставить("ДатаПодписи", ДатаПодписи);
	ПараметрыЗаписи.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыЗаписи.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыЗаписи.Вставить("Комментарий", Комментарий);
	ПараметрыЗаписи.Вставить("КодИФНС", КодИФНС);
	ПараметрыЗаписи.Вставить("КПП", КПП);
	ПараметрыЗаписи.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыЗаписи.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	ПараметрыЗаписи.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	ПараметрыЗаписи.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыЗаписи.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыЗаписи.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыЗаписи.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыЗаписи.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыЗаписи.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыЗаписи.Вставить("ДеревоСтраницОтчета", РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	ПараметрыЗаписи.Вставить("Вариант", СтруктураРеквизитовФормы.мВариант);
	ПараметрыЗаписи.Вставить("РазделыОтчета", РазделыРеглОтчета);
	ПараметрыЗаписи.Вставить("НаименованиеОтчета", СтруктураРеквизитовФормы.НаименованиеОтчета);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Если ОбъектОтчета.ЗаписатьДокумент(СтруктураРеквизитовФормы.мВыбраннаяФорма, ПараметрыЗаписи) = Ложь Тогда
	
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПараметрыЗаписи.Ошибки[0];
			Сообщение.Сообщить();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = ОбъектОтчета(ЭтаФорма.ИмяФормы).СохраненныеДанныеОтчета(
	СтруктураРеквизитовФормы.мВыбраннаяФорма, СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена",
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "КодСтраны" ИЛИ Область.Имя = "П000Л20000008" ИЛИ Область.Имя = "П000Л90000008" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
		"Справочник.СтраныМира.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода страны";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения
		= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Область.Имя = "П000Л30000001" ИЛИ Область.Имя = "П000Л80000001" ИЛИ Область.Имя = "П00Л100000001" Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор кода валюты";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(
			Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ТДО = ТабличныйДокумент.Области;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000Л20000001" Тогда
		
		ВозможнаяЛеваяГраница  = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ВозможнаяПраваяГраница = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Если НЕ (ЗначПоказателя >= ВозможнаяЛеваяГраница И ЗначПоказателя <= ВозможнаяПраваяГраница) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр(
				"ru = 'Дата начала отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено';
				|en = 'Дата начала отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено'"),
				Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг"), Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"));
				Сообщение.Сообщить();
			Иначе
				ЗначПоказателя_ = ТДО.Найти("П000Л20000002").Значение;
				Если (ЗначПоказателя_ >= ВозможнаяЛеваяГраница И ЗначПоказателя_ <= ВозможнаяПраваяГраница)
					И ТДО.Найти("П000Л20000001").Значение > ТДО.Найти("П000Л20000002").Значение Тогда
					Область.Очистить();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр(
					"ru = 'Дата начала отчетного периода не может быть позднее даты окончания. Значение очищено';
					|en = 'Дата начала отчетного периода не может быть позднее даты окончания. Значение очищено'");
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000Л20000002" Тогда
		
		ВозможнаяЛеваяГраница  = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ВозможнаяПраваяГраница = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Если НЕ (ЗначПоказателя >= ВозможнаяЛеваяГраница И ЗначПоказателя <= ВозможнаяПраваяГраница) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр(
				"ru = 'Дата окончания отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено';
				|en = 'Дата окончания отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено'"),
				Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг"), Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"));
				Сообщение.Сообщить();
			Иначе
				ЗначПоказателя_ = ТДО.Найти("П000Л20000001").Значение;
				Если (ЗначПоказателя_ >= ВозможнаяЛеваяГраница И ЗначПоказателя_ <= ВозможнаяПраваяГраница)
					И ТДО.Найти("П000Л20000001").Значение > ТДО.Найти("П000Л20000002").Значение Тогда
					Область.Очистить();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр(
					"ru = 'Дата окончания отчетного периода не может быть раньше даты начала. Значение очищено';
					|en = 'Дата окончания отчетного периода не может быть раньше даты начала. Значение очищено'"); 
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000Л90000001" Тогда
		
		ВозможнаяПраваяГраница = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			ВозможнаяЛеваяГраница = НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если НЕ (ЗначПоказателя >= ВозможнаяЛеваяГраница И ЗначПоказателя <= ВозможнаяПраваяГраница) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр(
				"ru = 'Дата начала отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено';
				|en = 'Дата начала отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено'"),
				Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг"), Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"));
				Сообщение.Сообщить();
			Иначе
				ЗначПоказателя_ = ТДО.Найти("П000Л90000002").Значение;
				ВозможнаяЛеваяГраница = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				Если (ЗначПоказателя_ >= ВозможнаяЛеваяГраница И ЗначПоказателя_ <= ВозможнаяПраваяГраница)
					И ТДО.Найти("П000Л90000001").Значение > ТДО.Найти("П000Л90000002").Значение Тогда
					Область.Очистить();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр(
					"ru = 'Дата начала отчетного периода не может быть позднее даты окончания. Значение очищено';
					|en = 'Дата начала отчетного периода не может быть позднее даты окончания. Значение очищено'");
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000Л90000002" Тогда
		
		ВозможнаяПраваяГраница = КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			ВозможнаяЛеваяГраница = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			Если НЕ (ЗначПоказателя >= ВозможнаяЛеваяГраница И ЗначПоказателя <= ВозможнаяПраваяГраница) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон(НСтр(
				"ru = 'Дата окончания отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено';
				|en = 'Дата окончания отчетного периода не должна выходить за пределы периода с %1 по %2. Значение очищено'"),
				Формат(ВозможнаяЛеваяГраница, "ДФ=дд.ММ.гггг"), Формат(ВозможнаяПраваяГраница, "ДФ=дд.ММ.гггг"));  
				Сообщение.Сообщить();
			Иначе
				ЗначПоказателя_ = ТДО.Найти("П000Л90000001").Значение;
				ВозможнаяЛеваяГраница = НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				Если (ЗначПоказателя_ >= ВозможнаяЛеваяГраница И ЗначПоказателя_ <= ВозможнаяПраваяГраница)
					И ТДО.Найти("П000Л90000001").Значение > ТДО.Найти("П000Л90000002").Значение Тогда
					Область.Очистить();
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр(
					"ru = 'Дата окончания отчетного периода не может быть раньше даты начала. Значение очищено';
					|en = 'Дата окончания отчетного периода не может быть раньше даты начала. Значение очищено'"); 
					Сообщение.Сообщить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П000Л5М100001") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П000Л7М100001") Тогда
		
		ТекстСообщенияОбщий = НСтр(
		"ru = 'Уникальный номер контракта должен соответствовать шаблону ""ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х"" (X - число от 0 до 9). Значение очищено';
		|en = 'Уникальный номер контракта должен соответствовать шаблону ""ХХХХХХХХ/ХХХХ/ХХХХ/Х/Х"" (X - число от 0 до 9). Значение очищено'");
		
		НомерКонтракта = СокрЛП(ЗначПоказателя);
		
		Если СтрДлина(НомерКонтракта) <> 22 Тогда
			
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщенияОбщий;
			Сообщение.Сообщить();
			
		Иначе
			
			Для Ном = 1 По 22 Цикл
				
				ТекСимв = Сред(НомерКонтракта, Ном, 1);
				
				Если Ном = 9 ИЛИ Ном = 14 ИЛИ Ном = 19 ИЛИ Ном = 21 Тогда
					НомерКонтрактаСоответствуетТребованиям = ТекСимв = "/";
				Иначе
					НомерКонтрактаСоответствуетТребованиям = СтрНайти("1234567890", ТекСимв) > 0;
				КонецЕсли;
				
				Если НЕ НомерКонтрактаСоответствуетТребованиям Тогда
					
					Область.Значение = "";
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщенияОбщий;
					Сообщение.Сообщить();
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна "
			+ ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
	СтруктураРеквизитовФормы, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок = ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
		|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах(СсылкаНаРегистрациюВНО)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьСведенияОПодписантах(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ДатаПодписи,
											   СсылкаНаРегистрациюВНО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		
		КодСтраны = КодСтраны(Результат);
		
		Если Область.Значение = КодСтраны Тогда
			Область.Очистить();
		Иначе
			Область.Значение = КодСтраны;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат <> Неопределено Тогда
		
		КодВалюты = КодВалюты(Результат);
		
		Если Область.Значение = КодВалюты Тогда
			Область.Очистить();
		Иначе
			Область.Значение = КодВалюты;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КодСтраны(Ссылка)
	
	Возврат СокрЛП(Ссылка.Код);
	
КонецФункции

&НаСервере
Функция КодВалюты(Ссылка)
	
	Возврат СокрЛП(Ссылка.Код);
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		Секция_ИдФайлКорр = ТДО.Секция_ИдФайлКорр;
		ОблИдФайлКорр = ТДО.ИдФайлКорр;
		Если ТДО.НомерКорректировки.Значение > 0 Тогда
			Секция_ИдФайлКорр.Видимость = Истина;
			РазрешитьВводДанныхВОбласть(Форма, ОблИдФайлКорр);
		Иначе
			Секция_ИдФайлКорр.Видимость = Ложь;
			ЗапретитьВводДанныхВОбласть(Форма, ОблИдФайлКорр);
		КонецЕсли;
		
		ОблНаимФил = ТДО.НаимФил;
		ОблАдрФил = ТДО.АдрФил;
		ОблКодСтраны = ТДО.КодСтраны;
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимФил);
			ЗапретитьВводДанныхВОбласть(Форма, ОблАдрФил);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодСтраны);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблНаимФил);
			РазрешитьВводДанныхВОбласть(Форма, ОблАдрФил);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодСтраны);
		КонецЕсли;
		
		ОблПодписантИНН = ТДО.ПодписантИНН;
		Если СокрЛП(ТДО.ПрПодп.Значение) = "3" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОблПодписантИНН);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОблПодписантИНН);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист2" Тогда
		
		ПрОрг = СокрЛП(ТДО["П000Л20000003"].Значение);
		
		ТДО["СекцияПояснение_ВОФР"].Видимость = ПрОрг <> "2";
		
		Для каждого Обл Из ТДО Цикл
			Если СтрНачинаетсяС(Обл.Имя, "П000Л2ВОФР") Тогда
				Если ПрОрг = "2" Тогда
					РазрешитьВводДанныхВОбласть(Форма, Обл);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, Обл);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТДО.Найти("П000Л20000016");
		Если Обл <> Неопределено Тогда
			Если Форма.СтруктураРеквизитовФормы.ИП Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Листы3_7" ИЛИ ИмяРаздела = "Лист8" ИЛИ ИмяРаздела = "Листы10_12" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист9" Тогда
		
		Обл = ТДО.Найти("П000Л90000012");
		Если Обл <> Неопределено Тогда
			Если Форма.СтруктураРеквизитовФормы.ИП Тогда
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	ОбрабатываемаяОбласть.Защита = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	ОбрабатываемаяОбласть.Защита = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(Форма, ИмяРаздела)
	
	Для каждого Обл Из Форма.ТабличныйДокумент.Области Цикл
		
		Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Истина И НЕ Обл.Защита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"]
			ИЛИ Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_5"] Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		Форма.СтруктураРеквизитовФормы, Обл.Имя);
		Если ИмяГруппы = Неопределено Тогда
			ИмяПоиска = Обл.Имя;
		Иначе
			ИмяПоиска = Лев(Обл.Имя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска)
			И Форма.СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели[ИмяПоиска][0] Тогда
			Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_3"];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ОбъектОтчета.ВставитьДопСтроку(ЭтаФорма.ИмяФормы,
											   СтруктураРеквизитовФормы,
											   ТабличныйДокумент,
											   ЭлемСтруктуры.Ключ,
											   ИмяОбластиПреемника);
				Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Листы3_7" ИЛИ ИмяРаздела = "Лист8" ИЛИ ИмяРаздела = "Листы10_12" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	НовВетка = ДеревоРаздела.Строки.Добавить();
	ОбъектОтчета.ИнициализироватьПодчиненныеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													ИмяРаздела,
													НовВетка,
													мСтруктураМногоуровневыхРазделов,
													ТабличныйДокумент,
													СтруктураРеквизитовФормы);
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ОбъектОтчета.ДанныеТабличногоДокумента(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																 ИмяРаздела,
																 мСтруктураМногоуровневыхРазделов,
																 ТабличныйДокумент,
																 СтруктураРеквизитовФормы);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ИндексыВыделенныхСтраницРаздела = ИндексыВыделенныхСтраницРаздела();
	
	Если ИндексыВыделенныхСтраницРаздела <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИндексыВыделенныхСтраницРаздела", ИндексыВыделенныхСтраницРаздела);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Удалить выделенные страницы?';
							|en = 'Удалить выделенные страницы?'");
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
							|en = 'Удалить текущую страницу?'");
		
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Листы3_7" ИЛИ ИмяРаздела = "Лист8" ИЛИ ИмяРаздела = "Листы10_12" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела, ДополнительныеПараметры)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ИндексыВыделенныхСтраницРаздела") Тогда
		
		СписокИндексовУдаляемыхСтраниц = Новый СписокЗначений;
		СписокИндексовУдаляемыхСтраниц.ЗагрузитьЗначения(ДополнительныеПараметры["ИндексыВыделенныхСтраницРаздела"]);
		СписокИндексовУдаляемыхСтраниц.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИндексыУдаляемыхСтраниц = СписокИндексовУдаляемыхСтраниц.ВыгрузитьЗначения();
		
		ИндексПоследнейУдаляемойСтраницы = ИндексыУдаляемыхСтраниц[0];
		ИндексПоследнейСтраницы = ДеревоДанных.Строки.Количество() - 1;
		
		Если ИндексПоследнейУдаляемойСтраницы = ИндексПоследнейСтраницы Тогда
			СтраницаДляФокусированияПослеУдаления = Неопределено;
		Иначе
			СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ИндексПоследнейУдаляемойСтраницы + 1];
		КонецЕсли;
		
		Для каждого ИндексУдаляемойСтраницы Из ИндексыУдаляемыхСтраниц Цикл
			ДеревоДанных.Строки.Удалить(ИндексУдаляемойСтраницы);
		КонецЦикла;
		
		Если СтраницаДляФокусированияПослеУдаления = Неопределено Тогда
			Если ДеревоДанных.Строки.Количество() = 0 Тогда
				ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыйРаздел(СтруктураРеквизитовФормы.мВыбраннаяФорма,
				СтруктураРеквизитовФормы, мСтруктураМногоуровневыхРазделов, ИмяРаздела);
				ДеревоДанных = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[0];
			Иначе
				СтраницаДляФокусированияПослеУдаления = ДеревоДанных.Строки[ДеревоДанных.Строки.Количество() - 1];
			КонецЕсли;
		КонецЕсли;
		
		НомСтраницыПослеУдаления = ДеревоДанных.Строки.Индекс(СтраницаДляФокусированияПослеУдаления) + 1;
		
	Иначе
		
		НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
		НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		
		НомСтраницыПослеУдаления
		= ?(НомУдаляемойСтраницы = НомПоследнейСтраницы, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
		
		ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ИндексыВыделенныхСтраницРаздела()
	
	ИндексыВыделенныхСтраниц = Неопределено;
	
	Если ТипЗнч(Элементы.РазделыОтчета.ВыделенныеСтроки) = Тип("Массив")
		И Элементы.РазделыОтчета.ВыделенныеСтроки.Количество() > 1 Тогда
		
		ИндексыВыделенныхСтраниц = Новый Массив;
		Для каждого ИдентификаторСтроки Из Элементы.РазделыОтчета.ВыделенныеСтроки Цикл
			
			ЭлементДерева = РазделыОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если ЭлементДерева.КолонкаРазделыОтчетаСокрНаим <> СтруктураРеквизитовФормы.НаимТекущегоРаздела
				ИЛИ ЭлементДерева.ПолучитьРодителя() = Неопределено
				ИЛИ ЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			ИндексыВыделенныхСтраниц.Добавить(ЭлементДерева.КолонкаНомерСтраницыРазделаОтчета - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИндексыВыделенныхСтраниц;
	
КонецФункции

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяТекОбласти);
		Координаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ОбъектОтчета.ВставитьДопСтроку(ЭтаФорма.ИмяФормы,
									   СтруктураРеквизитовФормы,
									   ТабличныйДокумент,
									   ИмяГруппы,
									   ИмяОбластиПреемника);
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
		
		ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
		
		СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
		
		ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											СтруктураРеквизитовФормы,
											мСтруктураМногоуровневыхРазделов,
											СтруктураДанныхРазделов,
											ТабличныйДокумент,
											СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
								|en = 'Не выбрана удаляемая строка многострочного раздела'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = РегламентированнаяОтчетностьКлиентСервер.СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = РегламентированнаяОтчетностьКлиентСервер.ИндексПоказателя(ИмяОбласти);
	
	ТекИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
		"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
			ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ПреКоординаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем Индекс, ИндексСтр, ИндексПодч, ИндексПодчСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Листы3_7" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела И ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			Сумма = 0;
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П000Л4М100002_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Сумма = Сумма + Окр(Обл.Значение, 2);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П000Л4М100002_" + ИндексСтр);
			КонецЦикла;
			ТДО["П000Л30000003"].Значение = Сумма;
			
			Сумма = 0;
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П000Л6М100002_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Сумма = Сумма + Окр(Обл.Значение, 2);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П000Л6М100002_" + ИндексСтр);
			КонецЦикла;
			ТДО["П000Л30000004"].Значение = Сумма;
			
			ТДО["П000Л30000005"].Значение = Окр(ТДО["П000Л30000002"].Значение, 2)
			+ ТДО["П000Л30000003"].Значение - ТДО["П000Л30000004"].Значение;
			
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Лист8" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ТДО["П000Л80000005"].Значение = Окр(ТДО["П000Л80000002"].Значение, 2)
				+ Окр(ТДО["П000Л80000003"].Значение, 2) - Окр(ТДО["П000Л80000004"].Значение, 2);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Листы10_12" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Сумма = 0;
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00Л11М100002_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма + Окр(Обл.Значение, 2);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00Л11М100002_" + ИндексСтр);
				КонецЦикла;
				ТДО["П00Л100000003"].Значение = Сумма;
				
				Сумма = 0;
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00Л12М100002_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма + Окр(Обл.Значение, 2);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00Л12М100002_" + ИндексСтр);
				КонецЦикла;
				ТДО["П00Л100000004"].Значение = Сумма;
				
				ТДО["П00Л100000005"].Значение = Окр(ТДО["П00Л100000002"].Значение, 2)
				+ ТДО["П00Л100000003"].Значение - ТДО["П00Л100000004"].Значение;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Листы3_7" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧЛ4М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыЛ4М1;
		СтруктураГруппыМнЧЛ4М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ4М1];
		ИменаГрафМнЧЛ4М1 = СтруктураГруппыМнЧЛ4М1["ИменаГраф"];
		
		ИмяГруппыМнЧЛ6М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыЛ6М1;
		СтруктураГруппыМнЧЛ6М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ6М1];
		ИменаГрафМнЧЛ6М1 = СтруктураГруппыМнЧЛ6М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧЛ4М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ4М1];
			ДеревоМнЧЛ6М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ6М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ4М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ4М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ4М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ6М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ6М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ6М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧЛ4М1.Строки Цикл
				Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П000Л4М100002"], 2);
			КонецЦикла;
			Ветка.Данные.Вставить("П000Л30000003", Сумма);
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧЛ6М1.Строки Цикл
				Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П000Л6М100002"], 2);
			КонецЦикла;
			Ветка.Данные.Вставить("П000Л30000004", Сумма);
			
			Ветка.Данные.Вставить("П000Л30000005", Окр(Ветка.Данные["П000Л30000002"], 2)
			+ Ветка.Данные["П000Л30000003"] - Ветка.Данные["П000Л30000004"]);
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ4М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ4М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ4М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ6М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ6М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ6М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Лист8" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
			КонецЕсли;
			
			Ветка.Данные.Вставить("П000Л80000005", Окр(Ветка.Данные["П000Л80000002"], 2)
			+ Окр(Ветка.Данные["П000Л80000003"], 2) - Окр(Ветка.Данные["П000Л80000004"], 2));
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Листы10_12" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧЛ11М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыЛ11М1;
		СтруктураГруппыМнЧЛ11М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ11М1];
		ИменаГрафМнЧЛ11М1 = СтруктураГруппыМнЧЛ11М1["ИменаГраф"];
		
		ИмяГруппыМнЧЛ12М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыЛ12М1;
		СтруктураГруппыМнЧЛ12М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧЛ12М1];
		ИменаГрафМнЧЛ12М1 = СтруктураГруппыМнЧЛ12М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧЛ11М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ11М1];
			ДеревоМнЧЛ12М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧЛ12М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ11М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ11М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ11М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ12М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ12М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ12М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧЛ11М1.Строки Цикл
				Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П00Л11М100002"], 2);
			КонецЦикла;
			Ветка.Данные.Вставить("П00Л100000003", Сумма);
			
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧЛ12М1.Строки Цикл
				Сумма = Сумма + Окр(СтрокаМнЧ.Данные["П00Л12М100002"], 2);
			КонецЦикла;
			Ветка.Данные.Вставить("П00Л100000004", Сумма);
			
			Ветка.Данные.Вставить("П00Л100000005", Окр(Ветка.Данные["П00Л100000002"], 2)
			+ Ветка.Данные["П00Л100000003"] - Ветка.Данные["П00Л100000004"]);
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ11М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ11М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ11М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧЛ12М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧЛ12М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧЛ12М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П00Л100000005");
	Структ.Вставить("П00Л100000003");
	Структ.Вставить("П00Л100000004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Листы10_12", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000Л80000005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Лист8", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000Л30000005");
	Структ.Вставить("П000Л30000003");
	Структ.Вставить("П000Л30000004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Листы3_7", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
									  			  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляСравнения = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
										|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыОтчета = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   мДанныеОтчета,
																   СтруктураРеквизитовФормы);
	
	ДеревоДляЗагрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	ТекстВыгрузки = Новый Массив;
	ТекстВыгрузки.Добавить(РезультатВыгрузки);
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												  мДанныеОтчета,
												  СтруктураРеквизитовФормы,
												  мСтруктураМногоуровневыхРазделов);
	
	ПараметрыВыгрузки = ОбъектОтчета.СформироватьСтруктуруПараметров(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																	 мДанныеОтчета,
																	 СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	Если НЕ ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
													  ПараметрыВыгрузки,
													  ДеревоВыгрузки,
													  ЭтаФорма,
													  СтруктураРеквизитовФормы,
													  мСтруктураМногоуровневыхРазделов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  мДанныеОтчета,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтаФорма,
								  СтруктураРеквизитовФормы,
								  мСтруктураМногоуровневыхРазделов);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
	"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			Оп = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(Оп, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		КонецЕсли;
	Иначе
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	РасчетНаСервере();
	
	ДопПараметры = Новый Структура("НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ИнициализироватьМногоуровневыеРазделы(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																		  СтруктураРеквизитовФормы,
																		  мСтруктураМногоуровневыхРазделов);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
		|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
		|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	ДанныеРазделов = Новый Структура;
	ДанныеРазделов.Вставить("Титульный", ЭтаФорма["СтруктураДанныхТитульный"]);
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыбраннаяФорма",                  СтруктураРеквизитовФормы.мВыбраннаяФорма);
	ПараметрыПечати.Вставить("ДанныеРазделов",                  ДанныеРазделов);
	ПараметрыПечати.Вставить("ВидПечати",                       ВидПечати);
	ПараметрыПечати.Вставить("СтруктураРеквизитовФормы",        СтруктураРеквизитовФормы);
	ПараметрыПечати.Вставить("СтруктураМногоуровневыхРазделов", мСтруктураМногоуровневыхРазделов);
	ПараметрыПечати.Вставить("ДеревоВыбранныхСтраниц",
	ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений")));
	
	ОбъектОтчета.ПечатныйБланк(ПараметрыПечати);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.АвтозаполнениеБудетРеализованоВБудущихВерсиях(ЭтотОбъект) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("ИДОтчета",                ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыОтчета.Вставить("ИДРедакцииОтчета",        ИмяФормы(ЭтаФорма.ИмяФормы));
	ПараметрыОтчета.Вставить("Организация",             СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	Оп = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ПараметрыОтчета);
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуНастроекПередАвтозаполнениемРеглОтчета(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ТекстПриОтказе") И ТипЗнч(Результат["ТекстПриОтказе"]) = Тип("Строка")
			И ЗначениеЗаполнено(Результат["ТекстПриОтказе"]) Тогда
			
			ТекстПриОтказе = СокрЛП(Результат["ТекстПриОтказе"]);
			ТекстПриОтказе = ?(Прав(ТекстПриОтказе, 1) = ".", ТекстПриОтказе, ТекстПриОтказе + ".");
			
			ПоказатьПредупреждение(, СтрШаблон(НСтр("ru = '%1
			|Автоматическое заполнение прервано';
			|en = '%1
			|Автоматическое заполнение прервано'"), ТекстПриОтказе));
			
		ИначеЕсли Результат.Свойство("НастройкиАвтозаполнения") Тогда
			
			СтруктураРеквизитовФормы.Вставить("НастройкиАвтозаполнения", Результат["НастройкиАвтозаполнения"]);
			
			РезультатЗапуска = ЗаполнитьАвтоНаСервере();
			
			Если РезультатЗапуска.Статус = "Выполнено" Тогда
				РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
				Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока
					= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
				КонецЕсли;
				ВывестиСообщенияПослеАвтозаполнения();
			ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
				ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
				ПараметрыОжидания = ПараметрыОжидания();
				ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	СтруктураДанныхРазделов = ОбъектОтчета.СтруктураДанныхРазделов(СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
	ОбъектОтчета.СохранитьДанныеРаздела(СтруктураРеквизитовФормы.мВыбраннаяФорма,
										СтруктураРеквизитовФормы,
										мСтруктураМногоуровневыхРазделов,
										СтруктураДанныхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы.НаимТекущегоРаздела);
						
	ОбновитьСтруктурыДанныхРазделов(СтруктураДанныхРазделов);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
	СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("НастройкиАвтозаполнения",      СтруктураРеквизитовФормы.НастройкиАвтозаполнения);
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",      НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",       КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("НомерКорректировки",           СтруктураДанныхТитульный.НомерКорректировки);
	ПараметрыОтчета.Вставить("ДатаПодписи",                  СтруктураДанныхТитульный.ДатаПодписи);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилищеСообщенияПослеАвтозаполнения",
	СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	
	// Помещение данных в контейнер.
	Контейнер = Новый Структура();
	Контейнер.Вставить("Титульный", СтруктураДанныхТитульный);
	Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
			Контейнер.Вставить(Раздел.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормы(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
	ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			ВывестиСообщенияПослеАвтозаполнения();
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется';
											|en = 'Отчет формируется'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные() Экспорт
	
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения",
	ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения));
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилищеСообщенияПослеАвтозаполнения);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	КонецЕсли;
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = Неопределено;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер)
		И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		// Получение данных из контейнера.
		СтруктураДанныхТитульный = Контейнер["Титульный"];
		Для каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
			Если НЕ Раздел.Значение.Свойство("Подчиненность") Тогда
				РегламентированнаяОтчетность.ПоместитьВКэш(Контейнер[Раздел.Ключ], УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		РасчетНаСервере();
		
		Если Элементы.Расшифровать.Видимость Тогда
			Элементы.Расшифровать.Доступность = Истина;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета",             НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",              КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ПараметрыОтчета.Вставить("ИмяРаздела",                          СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ПараметрыОтчета.Вставить("КоординатыСтраницыРаздела",           СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
	ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормы(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщенияПослеАвтозаполнения()
	
	Если ТипЗнч(СтруктураРеквизитовФормы.СообщенияПослеАвтозаполнения) = Тип("Массив") Тогда
		
		ОчиститьСообщения();
		
		Для каждого ТекстСообщения Из СтруктураРеквизитовФормы.СообщенияПослеАвтозаполнения Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон(НСтр("ru = '%1';
											|en = '%1'"), ТекстСообщения);
			Сообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("СообщенияПослеАвтозаполнения", Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Новости

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ="))
			<> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	Оп = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(
		СтруктураРеквизитовФормы, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Лист2" ИЛИ Ячейка.Раздел = "Лист9" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Ячейка.Раздел = "Листы3_7" ИЛИ Ячейка.Раздел = "Лист8" ИЛИ Ячейка.Раздел = "Листы10_12" Тогда
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = "Стр. ";
						Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
							НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
						КонецЕсли;
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
			= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
			ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
			1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
				ТекстЗаголовка = "Удалить страницу";
				Если ИндексыВыделенныхСтраницРаздела() <> Неопределено Тогда
					ТекстЗаголовка = "Удалить выделенные страницы";
				КонецЕсли;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Заголовок = ТекстЗаголовка;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).ЗаполнитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мВыбраннаяФорма,
																   СтруктураРеквизитовФормы,
																   ДатаПодписи,
																   ТабличныйДокумент,
																   Неопределено,
																   ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапуска = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапуска <> Неопределено И РезультатЗапуска.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
	ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Оп = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Оп = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(Оп, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оп = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормы(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
