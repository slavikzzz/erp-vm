#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		Дата = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.ПараметрКоманды, "ЖелательнаяДатаПлатежа");
	
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Дата", Дата);
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Документ", Параметры.ПараметрКоманды);
		
	КонецЕсли;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Если НЕ ИспользоватьНесколькоВалют Тогда
		ПараметрВалюта = СхемаКомпоновкиДанных.Параметры.Найти("Валюта");
		ПараметрВыводОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ВыводОтчета");
		ПараметрВалюта.ОграничениеИспользования = Истина;
		ПараметрВалюта.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрВалюта.Значение = Константы.ВалютаУправленческогоУчета.Получить();
		ПараметрВалюта.ЗапрещатьНезаполненныеЗначения = Ложь;
		ПараметрВалюта.ВключатьВДоступныеПоля = Ложь;
		ПараметрВыводОтчета.ОграничениеИспользования = Истина;
		ПараметрВыводОтчета.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрВыводОтчета.Значение = 1;
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, ЭтаФорма, СхемаКомпоновкиДанных, "");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - Произвольный - 
//       Параметры контекста, в котором используется отчет.
//       Используется для передачи в параметрах метода ОтчетыСервер.ПодключитьСхему().
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено когда пользовательские настройки не надо загружать (уже загружены ранее).
//
// Примеры:
// 1. Компоновщик отчета инициализируется на основании схемы из общих макетов:
//	Если КлючСхемы <> "1" Тогда
//		КлючСхемы = "1";
//		СхемаКД = ПолучитьОбщийМакет("МояОбщаяСхемаКомпоновки");
//		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//	КонецЕсли;
//
// 2. Схема зависит от значения параметра, выведенного в пользовательские настройки отчета:
//	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
//		ПолноеИмяОбъектаМетаданных = "";
//		Для Каждого ЭлементКД Из НовыеПользовательскиеНастройкиКД.Элементы Цикл
//			Если ТипЗнч(ЭлементКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
//				ИмяПараметра = Строка(ЭлементКД.Параметр);
//				Если ИмяПараметра = "ОбъектМетаданных" Тогда
//					ПолноеИмяОбъектаМетаданных = ЭлементКД.Значение;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЦикла;
//		Если КлючСхемы <> ПолноеИмяОбъектаМетаданных Тогда
//			КлючСхемы = ПолноеИмяОбъектаМетаданных;
//			СхемаКД = Новый СхемаКомпоновкиДанных;
//			// Наполнение схемы...
//			ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКД, КлючСхемы);
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючВарианта = "ИспользованияЛимитовРасходаДенежныхСредствКонтекст" Тогда
		ПараметрВалюта = СхемаКомпоновкиДанных.Параметры.Найти("Валюта");
		ПараметрВалюта.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		
		ПараметрВыводОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ВыводОтчета");
		ПараметрВыводОтчета.ОграничениеИспользования = Истина;
		ПараметрВыводОтчета.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	#Область УстановкаОбязательныхПараметров
	
	ПараметрДокумент = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Документ");
	ПараметрДата = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Дата");
	
	// Обработка параметра "Дата"
	РеквизитыЗаявки = Новый Структура("Дата, ЖелательнаяДатаПлатежа, Валюта");
	Если ЗначениеЗаполнено(ПараметрДокумент.Значение) Тогда
		ЗаполнитьЗначенияСвойств(
			РеквизитыЗаявки, 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрДокумент.Значение, "Дата, ЖелательнаяДатаПлатежа, Валюта"));
	
		Если ЗначениеЗаполнено(РеквизитыЗаявки.ЖелательнаяДатаПлатежа) Тогда
			ИспользуемаяДата = РеквизитыЗаявки.ЖелательнаяДатаПлатежа;
		Иначе 
			ИспользуемаяДата = РеквизитыЗаявки.Дата;
		КонецЕсли;
	Иначе
		Если ТипЗнч(ПараметрДата.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			ИспользуемаяДата = ПараметрДата.Значение.Дата;
		ИначеЕсли ТипЗнч(ПараметрДата.Значение) = Тип("Дата") Тогда
			ИспользуемаяДата = ПараметрДата.Значение;
		Иначе
			ИспользуемаяДата = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КэшПредставлений", Новый Соответствие, Истина);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Дата", ИспользуемаяДата, Истина);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ПараметрВыводОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыводОтчета");
	ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	
	ПолеВыводитьАналитикиФакта = Новый ПолеКомпоновкиДанных("ПараметрыДанных.ВыводитьАналитикиФакта");
	Для каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеВыводитьАналитикиФакта Тогда
			// Служебное поле для структуры отчета отключается при расшифровке.
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Обработка валюты
	Если ПараметрВыводОтчета.Значение = 0 Тогда // В валюте документа
		ПараметрВалюта.Значение = РеквизитыЗаявки.Валюта;
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	Иначе
		Если Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек, "Валюта", Константы.ВалютаУправленческогоУчета.Получить());
			
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "РежимРасшифровкиПоРегистратору", Ложь);
	
	#КонецОбласти 
	
	ЛимитыДействующиеНаДату = ЛимитыРасходованияДенежныхСредствСервер.ПравилаЛимитовНаДату(ИспользуемаяДата);
	
	ВнешниеНаборы = Новый Структура("ЛимитыРасходаДенежныхСредств, ДействующиеЛимиты");
	
	Если ЛимитыДействующиеНаДату.Количество() > 0 Тогда
		
		Документ = ПараметрДокумент.Значение;
		ВалютаДокумента = ПараметрВалюта.Значение;
		
		ОтборРасшифровки = ПолучитьОтборРасшифровкиДляПолученияДанных(КомпоновщикНастроек);
		ПланФактЛимитов = ЛимитыРасходованияДенежныхСредствСервер.ПланФактЛимитов(ИспользуемаяДата, Документ, ВалютаДокумента, ОтборРасшифровки);
		Данные = ПреобразоватьПланФактЛимитовДляВыводаВОтчет(ПланФактЛимитов, ОтборРасшифровки);
		
		Если ОтборРасшифровки.РасшифровкаПоРегистратору Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек, "РежимРасшифровкиПоРегистратору", Истина);
		КонецЕсли;
		
		Если Данные.Количество() > 0 Тогда
			ВнешниеНаборы.ЛимитыРасходаДенежныхСредств = Данные;
		Иначе
			ЛимитыРасходаДенежныхСредствПустой = Новый ТаблицаЗначений;
			Для Каждого ПолеНабораДанных Из СхемаКомпоновкиДанных.НаборыДанных.ЛимитыРасходаДенежныхСредств.Поля Цикл 
				ЛимитыРасходаДенежныхСредствПустой.Колонки.Добавить(ПолеНабораДанных.Поле, ПолеНабораДанных.ТипЗначения, ПолеНабораДанных.Заголовок);
			КонецЦикла;
			
			ВнешниеНаборы.ЛимитыРасходаДенежныхСредств = ЛимитыРасходаДенежныхСредствПустой;
		КонецЕсли;
			
		ВнешниеНаборы.ДействующиеЛимиты = ЛимитыДействующиеНаДату.ПравилаЛимитов;
	Иначе
		ДействующиеЛимитыПустой = Новый ТаблицаЗначений;
		Для Каждого ПолеНабораДанных Из СхемаКомпоновкиДанных.НаборыДанных.ДействующиеЛимиты.Поля Цикл 
			ДействующиеЛимитыПустой.Колонки.Добавить(ПолеНабораДанных.Поле, ПолеНабораДанных.ТипЗначения, ПолеНабораДанных.Заголовок);
		КонецЦикла;
		
		ВнешниеНаборы.ДействующиеЛимиты = ДействующиеЛимитыПустой;
	КонецЕсли;
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	// Обработка валюты
	ПараметрВыводОтчета	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВыводОтчета");
	ПараметрДокумент	= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Документ");
	ПараметрВалюта		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	
	Если ПараметрВыводОтчета.Значение = 0 
		И Не ЗначениеЗаполнено(ПараметрДокумент.Значение) Тогда // В валюте документа
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"Документ", 
			НСтр("ru = 'Не заполнено поле ""Лимиты, применяемые для документа"".';
				|en = '""Limits applied for the document"" is not filled in.'"),
			""); 
		
	ИначеЕсли ПараметрВыводОтчета.Значение = 1
		И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		И Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда // В валюте
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, 
			"Валюта", 
			НСтр("ru = 'Не заполнено поле ""Валюта"".';
				|en = '""Currency"" is not filled in.'"),
			""); 
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОтборРасшифровкиДляПолученияДанных(КомпоновщикНастроек)
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	ОтборДляПланФакта = Новый Структура;
	ОтборДляПланФакта.Вставить("ИспользоватьОтбор", Ложь);
	ОтборДляПланФакта.Вставить("РасшифровкаПоРегистратору", Ложь);
	
	ЕстьОтборПоПравилуЛимитов = Ложь;
	ЕстьОтборыПоАналитике = Ложь;
	Если Настройки.Отбор.Элементы.Количество() = 0 Тогда
		// Расшифровка по регистратору возможна только при наличии отбора по правилу лимитов.
		Возврат ОтборДляПланФакта;
	КонецЕсли;
	
	ЗначенияОтбораПоАналитике = Новый ТаблицаЗначений;
	ЗначенияОтбораПоАналитике.Колонки.Добавить("ПолеКомпоновки");
	ЗначенияОтбораПоАналитике.Колонки.Добавить("НомерАналитикиВИерархии");
	ЗначенияОтбораПоАналитике.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ЗначенияОтбораПоАналитике.Колонки.Добавить("АналитикаФакта", Новый ОписаниеТипов("Булево"));
	ЗначенияОтбораПоАналитике.Колонки.Добавить("Значение");
	
	МаксимальноеКоличествоАналитикВЛимитах = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик() + 2;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитикВЛимитах Цикл
		НоваяСтрока = ЗначенияОтбораПоАналитике.Добавить();
		НоваяСтрока.ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Аналитика" + НомерАналитики);
		НоваяСтрока.НомерАналитикиВИерархии = НомерАналитики;
		
		НоваяСтрока = ЗначенияОтбораПоАналитике.Добавить();
		НоваяСтрока.ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Аналитика" + НомерАналитики + "Факт");
		НоваяСтрока.НомерАналитикиВИерархии = НомерАналитики;
		НоваяСтрока.АналитикаФакта = Истина;
	КонецЦикла;
	
	Если Настройки.Отбор.Элементы.Количество() > 0 Тогда
		ОтборДляПланФакта.ИспользоватьОтбор = Истина;
		
		Для каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МодельБюджетирования") Тогда
				ОтборДляПланФакта.Вставить("МодельБюджетирования", ЭлементОтбора.ПравоеЗначение);
				ОтборДляПланФакта.ИспользоватьОтбор = Истина;
			КонецЕсли;
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоЛимитов") Тогда
				ОтборДляПланФакта.Вставить("ПравилоЛимитов", ЭлементОтбора.ПравоеЗначение);
				ЕстьОтборПоПравилуЛимитов = Истина;
			КонецЕсли;
			СтрокаОтбораПоАналитике = ЗначенияОтбораПоАналитике.Найти(ЭлементОтбора.ЛевоеЗначение, "ПолеКомпоновки");
			Если Не СтрокаОтбораПоАналитике = Неопределено Тогда
				ЕстьОтборыПоАналитике = Истина;
				СтрокаОтбораПоАналитике.Используется = Истина;
				СтрокаОтбораПоАналитике.Значение = ЭлементОтбора.ПравоеЗначение;
				ОтборДляПланФакта.ИспользоватьОтбор = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Аналитики факта выводятся только тогда, когда факт существует,
	// а значения по аналитикам плана может не быть. Поэтому для корректного расчета
	// план-факта необходимо исключить последние пустые аналитики из отбора
	// (до первой с конца заполненной аналитики). Если аналитика плана заполнена, значит
	// в оборотах бюджета есть запись по данному значению аналитики. Если не заполнена, то возможно записи нет,
	// и необходимо получить план с некоторым избытком для корректности расчета.
	ОтключаемыйОтборПлана = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитикВЛимитах Цикл
		НомерАналитикиСКонца = МаксимальноеКоличествоАналитикВЛимитах - НомерАналитики + 1;
		СтрокаОтбораПлан = ЗначенияОтбораПоАналитике.НайтиСтроки(Новый Структура("НомерАналитикиВИерархии, АналитикаФакта", НомерАналитикиСКонца, Ложь));
		Если СтрокаОтбораПлан.Количество() Тогда
			Если СтрокаОтбораПлан[0].Используется
				И ЗначениеЗаполнено(СтрокаОтбораПлан[0].Значение) Тогда
				Прервать;
			Иначе
				ОтключаемыйОтборПлана.Добавить(СтрокаОтбораПлан[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаОтбора Из ОтключаемыйОтборПлана Цикл
		СтрокаОтбора.Используется = Ложь;
	КонецЦикла;
	
	Если ЕстьОтборыПоАналитике И ЕстьОтборПоПравилуЛимитов Тогда
		// В отчете аналитики выстроены в соответствии с иерархией, указанной в правиле лимитов.
		// Получим настройки иерархии для перевода отбора по аналитике отчета в отбор по измерениям (аналитикам) плана и факта.
		
		ОтборПоАналитикамПлана = Новый Массив;
		ОтборПоАналитикамФакта = Новый Массив;
		
		ПравилаЛимитов = Новый Массив;
		ПравилаЛимитов.Добавить(ОтборДляПланФакта.ПравилоЛимитов);
		
		ИерархияПоПравилам = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитикПоПравиламСУказаниемКолонокИсточника(
			ПравилаЛимитов);
		
		ИерархияАналитик = ИерархияПоПравилам.Получить(ОтборДляПланФакта.ПравилоЛимитов);
		Для каждого СтрокаОтбораПоАналитике Из ЗначенияОтбораПоАналитике Цикл
			Если НЕ СтрокаОтбораПоАналитике.Используется Тогда
				Продолжить;
			КонецЕсли;
			СтрокаИерархии = ИерархияАналитик.Найти(СтрокаОтбораПоАналитике.НомерАналитикиВИерархии, "НомерВИерархииСредиИспользуемых");
			Если НЕ СтрокаИерархии = Неопределено Тогда
				ИмяИзмеренияНомерАналитики = СтрокаИерархии.ПутьКАналитике;
				ИзмерениеВидАналитики = СтрокаИерархии.ИзмерениеВидАналитики;
				ЭлементОтбора = Новый Структура;
				ЭлементОтбора.Вставить("ИмяИзмеренияНомерАналитики", ИмяИзмеренияНомерАналитики);
				ЭлементОтбора.Вставить("ИзмерениеВидАналитики", ИзмерениеВидАналитики);
				ЭлементОтбора.Вставить("Значение", СтрокаОтбораПоАналитике.Значение);
				
				Если СтрокаОтбораПоАналитике.АналитикаФакта Тогда
					ОтборПоАналитикамФакта.Добавить(ЭлементОтбора);
				Иначе
					ОтборПоАналитикамПлана.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОтборПоАналитикамПлана.Количество() > 0 Тогда
			ОтборДляПланФакта.Вставить("ОтборПоАналитикамПлана", ОтборПоАналитикамПлана);
		КонецЕсли;
		Если ОтборПоАналитикамФакта.Количество() > 0 Тогда
			ОтборДляПланФакта.Вставить("ОтборПоАналитикамФакта", ОтборПоАналитикамФакта);
		КонецЕсли;
	КонецЕсли;
	Если Настройки.Структура.Количество() > 0 Тогда
		ЭлементСтруктуры = Настройки.Структура[0];
		ПоляГруппировки = Неопределено;
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			ПоляГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Строки.Количество() > 0 Тогда
				ПоляГруппировки = ЭлементСтруктуры.Строки[0].ПоляГруппировки.Элементы;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ПоляГруппировки = Неопределено
			И ПоляГруппировки.Количество() = 1
			И ПоляГруппировки[0].Поле = Новый ПолеКомпоновкиДанных("Регистратор") Тогда
			
			Если ЕстьОтборПоПравилуЛимитов Тогда
				ОтборДляПланФакта.РасшифровкаПоРегистратору = Истина;
			Иначе
				ТекстСообщения = НСтр("ru = 'Расшифровка по регистратору может использоваться только в рамках правила лимитов.';
										|en = 'Drill-down by recorder can only be used within the limit rule.'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтборДляПланФакта;
	
КонецФункции

Функция ПреобразоватьПланФактЛимитовДляВыводаВОтчет(ПланФактЛимитов, ОтборРасшифровки)
	
	Если ПланФактЛимитов.Количество() > 0 Тогда
		ИспользуемыеПравилаЛимитов = ПланФактЛимитов.ВыгрузитьКолонку("Правило");
		ИспользуемыеПравилаЛимитов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИспользуемыеПравилаЛимитов);
		
		ИерархияАналитикПоПравилам = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитикПоПравиламСУказаниемКолонокИсточника(
			ИспользуемыеПравилаЛимитов);
	Иначе
		ИерархияАналитикПоПравилам = Новый Соответствие;
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования"));
	ТаблицаРезультат.Колонки.Добавить("ТипЛимита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЛимитовРасходованияДС"));
	ТаблицаРезультат.Колонки.Добавить("ПериодичностьЛимита", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаРезультат.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРезультат.Колонки.Добавить("СуммаПлан", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаРезультат.Колонки.Добавить("СуммаФакт", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаРезультат.Колонки.Добавить("Регистратор");
	
	// Используется для вывода измерений факта после вывода измерений плана.
	ТаблицаРезультат.Колонки.Добавить("КоличествоИспользуемыхИзмеренийАналитик", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	ТаблицаРезультат.Колонки.Добавить("ЭтоСтрокаФакта", Новый ОписаниеТипов("Булево"));
	
	МаксимальноеКоличествоАналитикБюджетирования = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	МаксимальноеКоличествоАналитикЛимитов = МаксимальноеКоличествоАналитикБюджетирования + 2; // Измерения "Организация" и "Подразделение".
	
	Для СчетчикАналитик = 1 По МаксимальноеКоличествоАналитикЛимитов Цикл
		ТаблицаРезультат.Колонки.Добавить("Аналитика" + СчетчикАналитик);
		ТаблицаРезультат.Колонки.Добавить("Аналитика" + СчетчикАналитик + "Факт");
		ТаблицаРезультат.Колонки.Добавить("ИзмерениеВидАналитики" + СчетчикАналитик);
	КонецЦикла;
	
	ЗаполнятьРегистратор = ОтборРасшифровки.ИспользоватьОтбор
	                     И ОтборРасшифровки.РасшифровкаПоРегистратору
	                     И ПланФактЛимитов.Колонки.Найти("Регистратор") <> Неопределено;
	
	КолонкиЗаполнения = "Правило, ТипЛимита, ПериодичностьЛимита, Валюта, СуммаПлан, СуммаФакт, ЭтоСтрокаФакта"
		+ ?(ЗаполнятьРегистратор, ", Регистратор", "");
	
	Для Каждого СтрокаПланФакт Из ПланФактЛимитов Цикл
		
		ТаблицаИерархииАналитик = ИерархияАналитикПоПравилам.Получить(СтрокаПланФакт.Правило);
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПланФакт, КолонкиЗаполнения);
		
		Для СчетчикАналитик = 1 По МаксимальноеКоличествоАналитикЛимитов Цикл
			НоваяСтрока["Аналитика" + СчетчикАналитик] = Null;
			НоваяСтрока["Аналитика" + СчетчикАналитик + "Факт"] = Null;
			НоваяСтрока["ИзмерениеВидАналитики" + СчетчикАналитик] = Неопределено;
		КонецЦикла;
		
		СчетчикАналитик = 0;
		Для каждого СтрокаИерархии Из ТаблицаИерархииАналитик Цикл
			Если НЕ СтрокаИерархии.Используется Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаПланФакт.СуммаПлан = 0
				И СтрокаПланФакт.СуммаФакт = 0
				И НЕ СтрокаПланФакт.ИмеетСтрокиФакта Тогда
				// Вывод только правила с пустыми суммами. Аналитику не выводим.
				Продолжить;
			КонецЕсли;
			СчетчикАналитик = СчетчикАналитик + 1;
			НоваяСтрока["Аналитика" + СчетчикАналитик] = СтрокаПланФакт[СтрокаИерархии.ПутьКАналитике];
			НоваяСтрока["Аналитика" + СчетчикАналитик + "Факт"] = СтрокаПланФакт[СтрокаИерархии.ПутьКАналитике + "Факт"];
			НоваяСтрока["ИзмерениеВидАналитики" + СчетчикАналитик] = СтрокаИерархии.ИзмерениеВидАналитики;
		КонецЦикла;
		НоваяСтрока.КоличествоИспользуемыхИзмеренийАналитик = СчетчикАналитик;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#КонецЕсли