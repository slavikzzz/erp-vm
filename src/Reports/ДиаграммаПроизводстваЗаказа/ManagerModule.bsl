#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Формирует отчет.
//
// Параметры:
//  Параметры  - Структура - параметры формирования отчета:
//		* ЭтапПроизводства - ДокументСсылка.ЭтапПроизводства2_2 - диагностируемый этап.
//		* СтатусГрафика - Число - статус диагностируемого графика.
//		* РежимОтображения - Число - режим отображения отчета (см. функцию РежимыОтображения).
//  АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат формирования отчета.
//
Процедура СформироватьОтчет(Параметры, АдресХранилища) Экспорт
	
	ДиаграммаГанта = Новый ДиаграммаГанта;
	
	НастроитьОбщиеСвойстваДиаграммы(ДиаграммаГанта);
	
	Распоряжение = Параметры.Распоряжение;
	РежимОтображения = Параметры.РежимОтображения;
	СтатусГрафика = Параметры.СтатусГрафика;
	Границы = Новый Структура("Начало, Окончание", '39991231', '00010101');
	
	Если РежимОтображения = РежимПоПодразделениям()
		ИЛИ РежимОтображения = РежимПоВидамРабочихЦентров() Тогда
		
		СформироватьОтчетПоИсполнителям(ДиаграммаГанта, Распоряжение, РежимОтображения, СтатусГрафика, Границы);
		
	ИначеЕсли РежимОтображения = РежимПоПартиямЗапуска() Тогда
		
		СформироватьОтчетПоПартиямЗапуска(ДиаграммаГанта, Распоряжение, СтатусГрафика, Границы);
		
	КонецЕсли;
	
	НастроитьШкалуВремениДиаграммы(ДиаграммаГанта, Границы);
	
	ПоместитьВоВременноеХранилище(ДиаграммаГанта, АдресХранилища);
	
КонецПроцедуры

// Возвращает режимы отображения отчета.
// 
// Возвращаемое значение:
//  СписокЗначений - список, в котором значение - это числовой код режима,
//		а представление - представление режима.
//
Функция РежимыОтображения() Экспорт
	
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(
		РежимПоПодразделениям(),
		НСтр("ru = 'По подразделениям';
			|en = 'By business units'"));
		
	Результат.Добавить(
		РежимПоВидамРабочихЦентров(),
		НСтр("ru = 'По видам рабочих центров';
			|en = 'By work center types'"));
		
	Результат.Добавить(
		РежимПоПартиямЗапуска(),
		НСтр("ru = 'По партиям запуска';
			|en = 'By release lots'"));
	
	Возврат Результат;
	
КонецФункции

#Область КомандыПодменюОтчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений.
//  - Неопределено.
//
Функция ДобавитьКомандуГрафикПроизводстваЗаказа(КомандыОтчетов) Экспорт

	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ДиаграммаПроизводстваЗаказа)
		И УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор               = Метаданные.Отчеты.ДиаграммаПроизводстваЗаказа.ПолноеИмя();
		КомандаОтчет.Представление               = НСтр("ru = 'График производства';
														|en = 'Production schedule'");
		КомандаОтчет.Менеджер                    = "Отчет.ДиаграммаПроизводстваЗаказа";
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность      = "Обычное";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоПодразделениямИВидамРабочихЦентров

Процедура СформироватьОтчетПоИсполнителям(ДиаграммаГанта, Распоряжение, РежимОтображения, СтатусГрафика, Границы)
	
	ДиаграммаГанта.Обновление = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	График = ГрафикПоИсполнителям(Распоряжение, РежимОтображения, СтатусГрафика, Границы);
	УстановитьПривилегированныйРежим(Ложь);
	
	Серия = СерияПоУмолчанию(ДиаграммаГанта);
	
	Исполнитель = Неопределено;
	Для Индекс = 0 По График.Количество()-1 Цикл
		
		Строка = График[Индекс];
		Если Исполнитель = Неопределено
			ИЛИ НЕ Исполнитель = Строка.Исполнитель Тогда
			
			Точка = УстановитьТочкуИсполнитель(ДиаграммаГанта, Строка);
			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
			
		КонецЕсли;
		
		ДобавитьИнтервалИсполнитель(Значение, Строка);
		
	КонецЦикла;
	
	ДиаграммаГанта.Обновление = Ложь;
	
КонецПроцедуры

Функция ГрафикПоИсполнителям(Распоряжение, РежимОтображения, СтатусГрафика, Границы)
	
	Результат = ИнициализироватьГрафикПоИсполнителям();
	
	Запрос = ИнициализироватьЗапросПоИсполнителям(Распоряжение, РежимОтображения, СтатусГрафика);
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаИтоги.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Границы, ВыборкаИтоги);
		
		ВыборкаИсполнитель = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИсполнитель.Следующий() Цикл
			
			ПредыдущаяСтрока = Неопределено;
			
			Выборка = ВыборкаИсполнитель.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если ПредыдущаяСтрока = Неопределено
					ИЛИ (ПредыдущаяСтрока.Окончание + 1) < Выборка.Начало Тогда
					
					НоваяСтрока = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					
					ПредыдущаяСтрока = НоваяСтрока;
					
				Иначе
					
					ПредыдущаяСтрока.Окончание = Макс(ПредыдущаяСтрока.Окончание, Выборка.Окончание);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьГрафикПоИсполнителям()
	
	ТипыИсполнителей = Новый Массив;
	ТипыИсполнителей.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыИсполнителей.Добавить(Тип("СправочникСсылка.ВидыРабочихЦентров"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов(ТипыИсполнителей));
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	Возврат Результат;
	
КонецФункции

Функция ИнициализироватьЗапросПоИсполнителям(Распоряжение, РежимОтображения, СтатусГрафика)
	
	Если РежимОтображения = РежимПоПодразделениям() Тогда
		ТекстЗапроса = ТекстЗапросаГрафикПоПодразделениям(СтатусГрафика);
	Иначе
		ТекстЗапроса = ТекстЗапросаГрафикПоВидамРЦ(СтатусГрафика);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик());
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаГрафикПоПодразделениям(СтатусГрафика)
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		Результат = 
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Подразделение КАК Исполнитель,
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Подразделение.Представление КАК Представление,
		|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК Начало,
		|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа КАК Окончание
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель,
		|	Начало,
		|	Окончание
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	ОБЩИЕ,
		|	Исполнитель";
		
	Иначе
		
		Результат = 
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Подразделение КАК Исполнитель,
		|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа КАК Начало,
		|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа КАК Окончание
		|ПОМЕСТИТЬ ВТГрафик
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТГрафик.Исполнитель КАК Исполнитель,
		|	ВТГрафик.Исполнитель.Представление КАК Представление,
		|	ВТГрафик.Начало КАК Начало,
		|	ВТГрафик.Окончание КАК Окончание
		|ИЗ
		|	ВТГрафик КАК ВТГрафик
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Подразделение,
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.Подразделение.Представление,
		|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
		|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
		|	И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
		|				(ВЫБРАТЬ
		|					ВТГРафик.ЭтапПроизводства
		|				ИЗ
		|					ВТГРафик)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель,
		|	Начало,
		|	Окончание
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	ОБЩИЕ,
		|	Исполнитель";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаГрафикПоВидамРЦ(СтатусГрафика)
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		Результат = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра КАК Исполнитель,
		|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.Представление КАК Представление,
		|	ДоступностьВидовРабочихЦентров.ДатаИнтервала КАК Начало,
		|	ВЫБОР ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ЧАС)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ДЕНЬ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, НЕДЕЛЯ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ДЕНЬ)
		|	КОНЕЦ КАК Окончание
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
		|ГДЕ
		|	ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И ВЫРАЗИТЬ(ДоступностьВидовРабочихЦентров.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Распоряжение
		|	И ДоступностьВидовРабочихЦентров.Занято <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель,
		|	Начало,
		|	Окончание
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	ОБЩИЕ,
		|	Исполнитель";
		
	Иначе
		
		Результат = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра КАК Исполнитель,
		|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.Представление КАК Представление,
		|	ДоступностьВидовРабочихЦентров.ДатаИнтервала КАК Начало,
		|	ВЫБОР ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ЧАС)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ДЕНЬ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, НЕДЕЛЯ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|			ТОГДА КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ДоступностьВидовРабочихЦентров.ДатаИнтервала, ДЕНЬ)
		|	КОНЕЦ КАК Окончание
		|ИЗ
		|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
		|ГДЕ
		|	ДоступностьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2
		|	И ВЫРАЗИТЬ(ДоступностьВидовРабочихЦентров.Регистратор КАК Документ.ЭтапПроизводства2_2).Распоряжение = &Распоряжение
		|	И ДоступностьВидовРабочихЦентров.Занято <> 0
		|	И НЕ ДоступностьВидовРабочихЦентров.Регистратор В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПланированиеЗагрузки.ЭтапПроизводства КАК Регистратор
		|				ИЗ
		|					РегистрСведений.ПланированиеЗагрузкиВидовРабочихЦентров КАК ПланированиеЗагрузки
		|				ГДЕ
		|					ПланированиеЗагрузки.Распоряжение = &Распоряжение
		|					И ПланированиеЗагрузки.СтатусГрафика = &СтатусГрафика)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланированиеЗагрузки.ВидРабочегоЦентра,
		|	ПланированиеЗагрузки.ВидРабочегоЦентра.Представление,
		|	ПланированиеЗагрузки.ДатаИнтервала,
		|	ВЫБОР ПланированиеЗагрузки.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
		|			ТОГДА КОНЕЦПЕРИОДА(ПланированиеЗагрузки.ДатаИнтервала, ЧАС)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|			ТОГДА КОНЕЦПЕРИОДА(ПланированиеЗагрузки.ДатаИнтервала, ДЕНЬ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|			ТОГДА КОНЕЦПЕРИОДА(ПланированиеЗагрузки.ДатаИнтервала, НЕДЕЛЯ)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|			ТОГДА КОНЕЦПЕРИОДА(ПланированиеЗагрузки.ДатаИнтервала, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ПланированиеЗагрузки.ДатаИнтервала, ДЕНЬ)
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.ПланированиеЗагрузкиВидовРабочихЦентров КАК ПланированиеЗагрузки
		|ГДЕ
		|	ПланированиеЗагрузки.Распоряжение = &Распоряжение
		|	И ПланированиеЗагрузки.СтатусГрафика = &СтатусГрафика
		|
		|УПОРЯДОЧИТЬ ПО
		|	Исполнитель,
		|	Начало,
		|	Окончание
		|ИТОГИ
		|	МИНИМУМ(Начало),
		|	МАКСИМУМ(Окончание)
		|ПО
		|	ОБЩИЕ,
		|	Исполнитель";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьТочкуИсполнитель(ДиаграммаГанта, Данные)
	
	Результат = ДиаграммаГанта.УстановитьТочку(Данные.Исполнитель);
	Результат.Текст = Данные.Представление;
	Результат.Расшифровка = Данные.Исполнитель;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьИнтервалИсполнитель(Значение, Данные)
	
	Интервал = Значение.Добавить();
	Интервал.Начало = Данные.Начало;
	Интервал.Конец = Данные.Окончание;
	Интервал.Текст = ТекстИнтервалаДиаграммы(Данные.Начало, Данные.Окончание);
	Интервал.Цвет = WebЦвета.Зеленый;
	
КонецПроцедуры

#КонецОбласти

#Область ПоПартиямЗапуска

Процедура СформироватьОтчетПоПартиямЗапуска(ДиаграммаГанта, Распоряжение, СтатусГрафика, Границы)
	
	ДиаграммаГанта.Обновление = Ложь;
	
	Данные = ГрафикИЗависимостиПоПартиямЗапуска(Распоряжение, СтатусГрафика);
	ВыборкаИзделия = Данные.ВыборкаИзделия;
	
	Если ВыборкаИзделия.Количество() > 0 Тогда
		
		Серия = СерияПоУмолчанию(ДиаграммаГанта);
		
		Интервалы = Новый ТаблицаЗначений;
		Интервалы.Колонки.Добавить("ПартияПроизводства");
		Интервалы.Колонки.Добавить("Интервал");
		
		Интервалы.Индексы.Добавить("ПартияПроизводства");
		
		Пока ВыборкаИзделия.Следующий() Цикл
			
			Границы.Начало = МИН(Границы.Начало, ВыборкаИзделия.Начало);
			Границы.Окончание = МАКС(Границы.Окончание, ВыборкаИзделия.Окончание);
			
			Точка = УстановитьТочкуПартияЗапуска(ДиаграммаГанта, ВыборкаИзделия);
			Значение = ДиаграммаГанта.ПолучитьЗначение(Точка, Серия);
			Интервал = ДобавитьИнтервалПартияЗапуска(Значение, ВыборкаИзделия);
			
			НоваяСтрока = Интервалы.Добавить();
			НоваяСтрока.ПартияПроизводства = ВыборкаИзделия.ПартияПроизводства;
			НоваяСтрока.Интервал = Интервал;
			
		КонецЦикла;
		
		ТипЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "ТипПроизводственногоПроцесса");
		Если ТипЗаказа <> Перечисления.ТипыПроизводственныхПроцессов.Ремонт Тогда
			
			ДобавитьСвязиИнтервалов(Данные.Зависимости, Интервалы)
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Ложь;
	
КонецПроцедуры

// Возвращает график и зависимости по партиям запуска
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ.
//  СтатусГрафика - Число - статус графика производства.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * ВыборкаИзделия - ВыборкаИзРезультатаЗапроса - содержит:
//   * Зависимости - ТаблицаЗначений - 
//
Функция ГрафикИЗависимостиПоПартиямЗапуска(Распоряжение, СтатусГрафика)
	
	ТекстыЗапросовПакета = Новый Массив;
	
	Если СтатусГрафика = СтатусРабочийГрафик() Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ПартияПроизводства КАК ПартияПроизводства,
		|	МИНИМУМ(ГрафикЭтаповПроизводства2_2.НачалоЭтапа) КАК Начало,
		|	МАКСИМУМ(ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа) КАК Окончание
		|ПОМЕСТИТЬ ВТГрафикПроизводства
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства.ПартияПроизводства
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартияПроизводства";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
		|	ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
		|	ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа
		|ПОМЕСТИТЬ ВТГрафикПоСтатусу
		|ИЗ
		|	РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|ГДЕ
		|	ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|	И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ЭтапПроизводства.ПартияПроизводства КАК ПартияПроизводства,
		|	МИНИМУМ(ВложенныйЗапрос.НачалоЭтапа) КАК Начало,
		|	МАКСИМУМ(ВложенныйЗапрос.ОкончаниеЭтапа) КАК Окончание
		|ПОМЕСТИТЬ ВТГрафикПроизводства
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТГрафикПоСтатусу.ЭтапПроизводства КАК ЭтапПроизводства,
		|		ВТГрафикПоСтатусу.НачалоЭтапа КАК НачалоЭтапа,
		|		ВТГрафикПоСтатусу.ОкончаниеЭтапа КАК ОкончаниеЭтапа
		|	ИЗ
		|		ВТГрафикПоСтатусу КАК ВТГрафикПоСтатусу
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ГрафикЭтаповПроизводства2_2.ЭтапПроизводства,
		|		ГрафикЭтаповПроизводства2_2.НачалоЭтапа,
		|		ГрафикЭтаповПроизводства2_2.ОкончаниеЭтапа
		|	ИЗ
		|		РегистрСведений.ГрафикЭтаповПроизводства2_2 КАК ГрафикЭтаповПроизводства2_2
		|	ГДЕ
		|		ГрафикЭтаповПроизводства2_2.Распоряжение = &Распоряжение
		|		И ГрафикЭтаповПроизводства2_2.СтатусГрафика = &СтатусРабочийГрафик
		|		И НЕ ГрафикЭтаповПроизводства2_2.ЭтапПроизводства В
		|					(ВЫБРАТЬ
		|						ВТГРафикПоСтатусу.ЭтапПроизводства
		|					ИЗ
		|						ВТГРафикПоСтатусу)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ЭтапПроизводства.ПартияПроизводства
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартияПроизводства";
		
	КонецЕсли;
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изделия.Ссылка КАК Отправитель,
	|	Изделия.ЭтапПотребитель КАК Получатель
	|ПОМЕСТИТЬ ВТСвязиНоменклатуры
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
	|		ПО Изделия.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Распоряжение = &Распоряжение
	|	И Документ.Проведен
	|	И НЕ Изделия.Отменено
	|	И Изделия.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Изделия.Ссылка,
	|	Изделия.ЭтапПотребитель
	|ИЗ
	|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Изделия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
	|		ПО Изделия.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Распоряжение = &Распоряжение
	|	И Документ.Проведен
	|	И НЕ Изделия.Отменено
	|	И Изделия.ЭтапПотребитель <> ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.ПартияПроизводства          КАК ПартияПроизводства,
	|	График.Начало                      КАК Начало,
	|	График.Окончание                   КАК Окончание,
	|	Партия.ОсновноеИзделиеНоменклатура КАК Номенклатура,
	|	Партия.ОсновноеИзделиеНоменклатура.Представление КАК НоменклатураПредставление
	|ИЗ
	|	ВТГрафикПроизводства КАК График
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК Партия
	|		ПО График.ПартияПроизводства = Партия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало,
	|	Окончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапОтправитель.ПартияПроизводства КАК ПартияПроизводства,
	|	ЭтапПолучатель.ПартияПроизводства КАК СледующийЭтап
	|ИЗ
	|	ВТСвязиНоменклатуры КАК ВТСвязиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапОтправитель
	|		ПО ВТСвязиНоменклатуры.Отправитель = ЭтапОтправитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПолучатель
	|		ПО ВТСвязиНоменклатуры.Получатель = ЭтапПолучатель.Ссылка
	|ГДЕ
	|	ЭтапОтправитель.ПартияПроизводства <> ЭтапПолучатель.ПартияПроизводства";
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("СтатусГрафика", СтатусГрафика);
	Запрос.УстановитьПараметр("СтатусРабочийГрафик", СтатусРабочийГрафик());
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	МаксИндекс = МассивРезультатов.ВГраница();
	
	Результат = Новый Структура;
	
	Результат.Вставить(
		"ВыборкаИзделия",
		МассивРезультатов[МаксИндекс-1].Выбрать());
	
	Результат.Вставить(
		"Зависимости",
		МассивРезультатов[МаксИндекс].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьТочкуПартияЗапуска(ДиаграммаГанта, ВыборкаИзделия)
	
	ЗначениеТочки = ВыборкаИзделия.ПартияПроизводства;
	Результат = ДиаграммаГанта.УстановитьТочку(ЗначениеТочки);
	
	Результат.Текст = ВыборкаИзделия.НоменклатураПредставление;
	Результат.Расшифровка = ВыборкаИзделия.ПартияПроизводства;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьИнтервалПартияЗапуска(Значение, ВыборкаИзделия)
	
	Результат = Значение.Добавить();
	Результат.Начало = ВыборкаИзделия.Начало;
	Результат.Конец = ВыборкаИзделия.Окончание;
	Результат.Текст = ТекстИнтервалаДиаграммы(ВыборкаИзделия.Начало, ВыборкаИзделия.Окончание);
	Результат.Расшифровка = Новый Структура("ПартияПроизводства", ВыборкаИзделия.ПартияПроизводства);
	Результат.Цвет = WebЦвета.Зеленый;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСвязиИнтервалов(Зависимости, Интервалы)
	
	Для каждого СтрокаЗависимость Из Зависимости Цикл
		
		НайденнаяСтрока = Интервалы.Найти(СтрокаЗависимость.ПартияПроизводства, "ПартияПроизводства");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			
			Интервал = НайденнаяСтрока.Интервал; // ИнтервалДиаграммыГанта - 
			
			НайденнаяСтрока = Интервалы.Найти(СтрокаЗависимость.СледующийЭтап, "ПартияПроизводства");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				СледующийИнтервал = НайденнаяСтрока.Интервал;
				
				Связь = Интервал.Добавить(СледующийИнтервал);
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция РежимПоПодразделениям()
	
	Возврат 0;
	
КонецФункции

Функция РежимПоВидамРабочихЦентров()
	
	Возврат 1;
	
КонецФункции

Функция РежимПоПартиямЗапуска()

	Возврат 2;
	
КонецФункции

Процедура НастроитьОбщиеСвойстваДиаграммы(ДиаграммаГанта)
	
	ДиаграммаГанта.АвтоОпределениеПолногоИнтервала = Ложь;
	ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	ДиаграммаГанта.Окантовка = Ложь;
	ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ДиаграммаГанта.ВертикальнаяПрокрутка = Истина;
	ДиаграммаГанта.ОтображатьПустыеЗначения = Ложь;
	ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.НеОтображать;
	ДиаграммаГанта.ОбластьПостроения.Право = 1;
	
КонецПроцедуры

Функция СтатусРабочийГрафик()
	
	Возврат РегистрыСведений.ГрафикЭтаповПроизводства2_2.СтатусРабочийГрафик();
	
КонецФункции

Функция СерияПоУмолчанию(ДиаграммаГанта)
	
	Возврат ДиаграммаГанта.УстановитьСерию("ГрафикПроизводства");
	
КонецФункции

Процедура НастроитьШкалуВремениДиаграммы(ДиаграммаГанта, Границы)
	
	Если НЕ ЗначениеЗаполнено(Границы.Окончание) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиШкалы = УправлениеПроизводствомКлиентСервер.НастройкиШкалыДиаграммыГантаВРежимеВсеДанные(
		Границы.Начало, Границы.Окончание, 9);
	
	ШкалаВремениЭлементы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	Для Индекс = 1 По ШкалаВремениЭлементы.Количество()-1 Цикл
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[Индекс]);
	КонецЦикла;
	
	ЭлементШкалы = ШкалаВремениЭлементы.Добавить();
	ЭлементШкалы.Единица = НастройкиШкалы.Единица;
	ЭлементШкалы.Формат = НастройкиШкалы.Формат;
	
	Если ШкалаВремениЭлементы.Количество() = 2 Тогда
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[0]);
	КонецЕсли;
	
	ДиаграммаГанта.УстановитьПолныйИнтервал(
		НастройкиШкалы.НачалоПолногоИнтервала,
		НастройкиШкалы.ОкончаниеПолногоИнтервала);
	
КонецПроцедуры

Функция ТекстИнтервалаДиаграммы(Начало, Окончание)
	
	ФорматнаяСтрока = УправлениеПроизводством.ФорматнаяСтрокаДляДатыГрафикаПроизводства();
	ФорматНачало = Формат(Начало, ФорматнаяСтрока);
	ФорматОкончание = Формат(Окончание, ФорматнаяСтрока);
	
	Если ФорматНачало = ФорматОкончание Тогда
		Результат = ФорматНачало;
	Иначе
		Результат = ФорматНачало + " - " + ФорматОкончание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли