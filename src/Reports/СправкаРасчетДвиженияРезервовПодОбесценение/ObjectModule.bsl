#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	УстановитьЗначенияПараметровОтчета(НастройкиОтчета);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура из см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево -Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = ЭтаФорма.Параметры;
	
	Если ЗакрытиеМесяцаСервер.ЭтаФормаОткрытаИзФормыЗакрытияМесяца(ЭтаФорма) Тогда
		
		ЭтаФорма.КлючНазначенияИспользования = "КонтекстЗакрытиеМесяца";
		ФормаПараметры = ЭтаФорма.ФормаПараметры;
		
		ФормаПараметры.КлючНазначенияИспользования = ЭтаФорма.КлючНазначенияИспользования;
		
		ФормаПараметры.Отбор.Очистить();
		ФормаПараметры.Отбор.Вставить("ПериодОтчета", КонецМесяца(Параметры.ПериодРегистрации));
		Если НЕ Параметры.ВсеОрганизации Тогда
			ФормаПараметры.Отбор.Вставить("Организация", Параметры.МассивОрганизаций);
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ПараметрКоманды") И Параметры.ПараметрКоманды.Количество() <> 0 Тогда
		
		ДокументРасчетаРезервов = Параметры.ПараметрКоманды[0];
		РеквизитыРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетаРезервов, "Дата,Организация");
		ФормаПараметры = ЭтаФорма.ФормаПараметры;
		ФормаПараметры.Отбор.Очистить();
		ФормаПараметры.Отбор.Вставить("ПериодОтчета", КонецМесяца(РеквизитыРасчета.Дата));
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(РеквизитыРасчета.Организация);
		ФормаПараметры.Отбор.Вставить("Организация", МассивОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		НастроитьПараметрДанныеОтчета(Контекст.НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначенияПараметровОтчета(НастройкиОтчета)
	
	ПараметрыДанных = НастройкиОтчета.ПараметрыДанных;
	
	ПараметрыДанных.УстановитьЗначениеПараметра("ПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22());
	ПараметрыДанных.УстановитьЗначениеПараметра("ДатаПереходаНаПартионныйУчетВерсии22", РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	ХозОперацииПеремещения = РасчетСебестоимостиПрикладныеАлгоритмы.ХозяйственныеОперацииПеремещений();
	ПараметрыДанных.УстановитьЗначениеПараметра("ХозОперацииПеремещения", ХозОперацииПеремещения);
	
КонецПроцедуры

// Настроить параметр данные отчета.
// 
// Параметры:
//  НастройкиОтчета						- НастройкиКомпоновкиДанных					- настройки отчета.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных					- настройки варианта отчета, которые будут загружены
//																						в компоновщик настроек после его инициализации.
//										- Неопределено 								- настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки, которые будут загружены в компоновщик
//																						настроек после его инициализации.
//										- Неопределено 								- пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура НастроитьПараметрДанныеОтчета(НастройкиОтчета, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	ПараметрДанныеОтчета = СхемаКомпоновкиДанных.Параметры.Найти("ДанныеОтчета");

	СписокВыбора = Новый СписокЗначений;
	
	Если РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
		СписокВыбора.Добавить(1, НСтр("ru = 'В валюте упр. учета';
										|en = 'In management accounting currency'"));
	КонецЕсли;
		
	СписокВыбора.Добавить(2, НСтр("ru = 'В валюте регл. учета';
									|en = 'In local accounting currency'"));
		
	ПараметрДанныеОтчета.УстановитьДоступныеЗначения(СписокВыбора);
	
	Если НовыеНастройкиКД = Неопределено
		Или НовыеПользовательскиеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраДанныеОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДанныеОтчета"));
	НастройкаДанныеОтчета = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ЗначениеПараметраДанныеОтчета.ИдентификаторПользовательскойНастройки);
	
	Если Не НастройкаДанныеОтчета = Неопределено
		И СписокВыбора.НайтиПоЗначению(НастройкаДанныеОтчета.Значение) = Неопределено Тогда
		НастройкаДанныеОтчета.Значение = СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли