
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/10/2021";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР21М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР32М1");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		// Установка в разделе 1 значений кода по ОКТМО и КБК.
		//
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
			РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
			СтруктураПараметров);
			
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
			
		КонецЕсли;
		
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		ДанныеМнЧР1М1 = ДеревоРаздела1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		ДанныеМнЧР1М1.Строки[0].Данные.Вставить("П00001М101000", ОргОКТМО);
		
		ДанныеМнЧР1М2 = ДанныеМнЧР1М1.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		ДанныеМнЧР1М2.Строки[0].Данные.Вставить("П00001М202000", "18210302390011001110");
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела1, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если ТипЗнч(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = Тип("Дата")
		И СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета >= '20240601'
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.акц.нефт.сырье 21к4") Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения", СтруктураРеквизитовФормы.Организация, ДатаПодписи);
	
	ТабличныйДокумент.Области.ПоМесту.Значение
	= ?(РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров), "213", "214");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1  = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР1М2  = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппыР21М1 = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппыР32М1 = "П00032М1";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М101000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М2);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М202000");
	ИменаГраф.Добавить("П00001М203000");
	ИменаГраф.Добавить("П00001М204000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М118003");
	ИменаГраф.Добавить("П00021М118004");
	ИменаГраф.Добавить("П00021М119003");
	ИменаГраф.Добавить("П00021М120003");
	ИменаГраф.Добавить("П00021М121003");
	ИменаГраф.Добавить("П00021М122003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР21М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00032М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00032М101003");
	ИменаГраф.Добавить("П00032М102003");
	ИменаГраф.Добавить("П00032М103003");
	ИменаГраф.Добавить("П00032М104003");
	ИменаГраф.Добавить("П00032М105003");
	ИменаГраф.Добавить("П00032М106003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР32М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел21");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 2");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР21М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел2");
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 2.1");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел21", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР32М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 3");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2021Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М202000", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020000103", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030000103", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000030001003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = КодПериода + 70;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодПериода, "ЧЦ=2;ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц   = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "П000210014003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение");
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024 Тогда
			СписокКодов.Добавить(1,     "1");
		ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2023 Тогда
			СписокКодов.Добавить(0.833, "0,833");
		ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2022 Тогда
			СписокКодов.Добавить(0.667, "0,667");
		Иначе
			СписокКодов.Добавить(0.5,   "0,500");
		КонецЕсли;
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли (Область.Имя = "П000210015003" ИЛИ СтрНачинаетсяС(Область.Имя, "П00032М105003"))
		И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение");
		СписокКодов.Добавить(1.5, "1,5 - в отношении произв. мощностей в Республике Хакасия и Красноярском крае");
		СписокКодов.Добавить(1.4, "1,4 - в отношении произв. мощностей в Республике Тыва и Иркутской области");
		СписокКодов.Добавить(1.3, "1,3 - в отношении произв. мощностей в Ямало-Ненецком автономном округе, Республике Коми,
		|Ненецком автономном округе, Республике Саха (Якутия), Республике Бурятия");
		СписокКодов.Добавить(1.1, "1,1 - в отношении произв. мощностей в Тюменской, Кемеровской, Новосибирской и Томской областях,
		|Забайкальском крае, Ханты-Мансийском автономном округе - Югре");
		СписокКодов.Добавить(1.05, "1,05 - в отношении произв. мощностей в Омской области, Алтайском крае, Республике Алтай");
		СписокКодов.Добавить(1, "1 - в отношении произв. мощностей в иных субъектах Российской Федерации");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00021М118003") ИЛИ СтрНачинаетсяС(Область.Имя, "П00021М118004") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Постфикс = Сред(Область.Имя, 14);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОтображатьВыборГода", Истина);
		ДопПараметры.Вставить("ОтображатьМесяцы", Истина);
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ДополнительныеПараметры", ДопПараметры);
		
		МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01."
		+ СокрЛП(ТабличныйДокумент.Область("П00021М118003" + Постфикс).Значение)
		+ СокрЛП(ТабличныйДокумент.Область("П00021М118004" + Постфикс).Значение));
		Если ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
			ПараметрыВыбора.Вставить("НачалоПериода", МесяцИГод_Дата);
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(МесяцИГод_Дата));
		Иначе
			ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ОблКодПериода", ТабличныйДокумент.Область("П00021М118003" + Постфикс));
		СтруктПарам.Вставить("ОблГодПериода", ТабличныйДокумент.Область("П00021М118004" + Постфикс));
		СтруктПарам.Вставить("Область", Область);
		СтруктПарам.Вставить("Элемент", Элемент);
		
		Оп = Новый ОписаниеОповещения("ВыбратьМесяцИГодЗавершение", ЭтотОбъект, СтруктПарам);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборОтчетногоПериода",
		ПараметрыВыбора, ЭтаФорма, , , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Область.Имя = "П000210002503" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "0 - нет");
		СписокКодов.Добавить(1, "1 - есть");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли Область.Имя = "П000310004003" ИЛИ Область.Имя = "П000310014503" ИЛИ Область.Имя = "П000310025503" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "0 - отрицательный или равен 0 (нулю)   ");
		СписокКодов.Добавить(1, "1 - положительный");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли Область.Имя = "П000310018003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2026 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СписокКодов = Новый СписокЗначений;
			СписокКодов.Добавить(0, "Пустое значение                 ");
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 Тогда
				СписокКодов.Добавить(52300, "52 300 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2022 Тогда
				СписокКодов.Добавить(55200, "55 200 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2023 Тогда
				СписокКодов.Добавить(56900, "56 900 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2024 Тогда
				СписокКодов.Добавить(58650, "58 650 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2025 Тогда
				СписокКодов.Добавить(60450, "60 450 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2026 Тогда
				СписокКодов.Добавить(62300, "62 300 рублей за 1 тонну");
			КонецЕсли;
			
			Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
			Новый Структура("Элемент,Область", Элемент, Область));
			
			ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокКодов.НайтиПоЗначению(Область.Значение));
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000310019003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение");
		СписокКодов.Добавить(0.68, "0,68");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	ИначеЕсли Область.Имя = "П000310029003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2026 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			СписокКодов = Новый СписокЗначений;
			СписокКодов.Добавить(0, "Пустое значение                 ");
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 Тогда
				СписокКодов.Добавить(50700, "50 700 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2022 Тогда
				СписокКодов.Добавить(52250, "52 250 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2023 Тогда
				СписокКодов.Добавить(53850, "53 850 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2024 Тогда
				СписокКодов.Добавить(55500, "55 500 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2025 Тогда
				СписокКодов.Добавить(57200, "57 200 рублей за 1 тонну");
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2026 Тогда
				СписокКодов.Добавить(58950, "58 950 рублей за 1 тонну");
			КонецЕсли;
			
			Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
			Новый Структура("Элемент,Область", Элемент, Область));
			
			ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
			СписокКодов.НайтиПоЗначению(Область.Значение));
			
		КонецЕсли;
		
	ИначеЕсли Область.Имя = "П000310030003" И НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодов = Новый СписокЗначений;
		СписокКодов.Добавить(0, "Пустое значение");
		СписокКодов.Добавить(0.65, "0,65");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект,
		Новый Структура("Элемент,Область", Элемент, Область));
		
		ПоказатьВыборИзСписка(Оп, СписокКодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокКодов.НайтиПоЗначению(Область.Значение));
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М101000") Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
									|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М202000")
		ИЛИ ИмяПоказателя = "П000020001003"
		ИЛИ ИмяПоказателя = "П000030001003" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
									|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000210003003" ИЛИ ИмяПоказателя = "П000210004003" Тогда
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("НомерДоговора", ТабличныйДокумент.Область("П000210003003").Значение);
		СтруктПарам.Вставить("ДатаДоговора", ТабличныйДокумент.Область("П000210004003").Значение);
		СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницы_Раздел21(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел21(СтруктПарам);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяПарногоПоказателя = Неопределено;
	ОблПарногоПоказателя = Неопределено;
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М203000") ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00001М204000") Тогда
		Постфикс = Сред(ИмяПоказателя, СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1);
		ИмяПарногоПоказателя = ?(СтрНачинаетсяС(ИмяПоказателя, "П00001М203000"),
		"П00001М204000" + Постфикс, "П00001М203000" + Постфикс);
		ОблПарногоПоказателя = ТабличныйДокумент.Области.Найти(ИмяПарногоПоказателя);
	ИначеЕсли ИмяПоказателя = "П000030002003" ИЛИ ИмяПоказателя = "П000030002503" Тогда
		ИмяПарногоПоказателя = ?(ИмяПоказателя = "П000030002003", "П000030002503", "П000030002003");
		ОблПарногоПоказателя = ТабличныйДокумент.Области.Найти(ИмяПарногоПоказателя);
	ИначеЕсли ИмяПоказателя = "П000310006003" ИЛИ ИмяПоказателя = "П000310007003" Тогда
		ИмяПарногоПоказателя = ?(ИмяПоказателя = "П000310006003", "П000310007003", "П000310006003");
		ОблПарногоПоказателя = ТабличныйДокумент.Области.Найти(ИмяПарногоПоказателя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяПарногоПоказателя) И ЗначениеЗаполнено(ОблПарногоПоказателя) Тогда
		ЗначПарногоПоказателя = ОблПарногоПоказателя.Значение;
		Если ЗначениеЗаполнено(ЗначПоказателя) И ЗначениеЗаполнено(ЗначПарногоПоказателя) Тогда
			ОблПарногоПоказателя.Очистить();
			Стр1 = Сред(ИмяПоказателя, 9, 3);
			Стр2 = Сред(ИмяПарногоПоказателя, 9, 3);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не допускается одновременное заполнение строки %1 и строки %2. Значение в строке %2 очищено';
			|en = 'Не допускается одновременное заполнение строки %1 и строки %2. Значение в строке %2 очищено'"),
			Стр1, Стр2);
			Сообщение.Сообщить();
			РасчетНаКлиенте(ИмяРаздела, ИмяПарногоПоказателя);
			Мофицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна "
			+ ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
	// Особая обработка.
	Если ИмяРаздела = "Раздел3" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
		|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодПериода = Формат(Месяц(РезультатВыбора.КонецПериода), "ЧЦ=2;ЧВН=");
	ГодПериода = Формат(Год(РезультатВыбора.КонецПериода), "ЧГ=");
	
	Если СокрЛП(ДополнительныеПараметры.ОблКодПериода.Значение) <> КодПериода
		ИЛИ СокрЛП(ДополнительныеПараметры.ОблГодПериода.Значение) <> ГодПериода Тогда
		ДополнительныеПараметры.ОблКодПериода.Значение = КодПериода;
		ДополнительныеПараметры.ОблГодПериода.Значение = ГодПериода;
	Иначе
		ДополнительныеПараметры.ОблКодПериода.Значение = "";
		ДополнительныеПараметры.ОблГодПериода.Значение = "";
	КонецЕсли;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныеПараметры.Область.Значение Тогда
			ДополнительныеПараметры.Область.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		ТДО["СекцияПояснение"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел21" ИЛИ ИмяРаздела = "Раздел3" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел21" Тогда
			
			ЕстьДоговор = ТДО.Найти("П000210002503").Значение = 1;
			
			Если ЕстьДоговор Тогда
				ТДО["РеквизитыДоговора"].Видимость = Истина;
				ТДО["ПсевдоРеквизитыДоговора"].Видимость = Ложь;
			Иначе
				ТДО["П000210003003"].Очистить();
				ТДО["П000210004003"].Очистить();
				ТДО["РеквизитыДоговора"].Видимость = Ложь;
				ТДО["ПсевдоРеквизитыДоговора"].Видимость = Истина;
			КонецЕсли;
			
			// Стр.050.
			РезультатПроверки = ПроверкаВыполненияУсловийАвторасчетаСтроки050Раздела21(Форма, Форма.ТабличныйДокумент);
			Если НЕ (РезультатПроверки.ВыполненоУсловие1
				ИЛИ РезультатПроверки.ВыполненоУсловие2
				ИЛИ РезультатПроверки.ВыполненоУсловие3) Тогда
				// Ручное редактирование стр.050.
				РазрешитьВводДанныхВОбласть(Форма, ТДО["П000210005003"]);
				Инд = АвтоРасчПоказатели.Найти("П000210005003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяРаздела = "Раздел3" Тогда
			
			Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024 Тогда
				
				// Ручное редактирование стр.060 (подр. 3.1), стр.070.
				
			Иначе
				
				Если ТДО["П000310003003"].Значение + ТДО["П000310004503"].Значение + ТДО["П000310005003"].Значение >= 0 Тогда
					// Ручное редактирование стр.060 (подр. 3.1).
					РазрешитьВводДанныхВОбласть(Форма, ТДО["П000310006003"]);
					Инд = АвтоРасчПоказатели.Найти("П000310006003");
					Если Инд <> Неопределено Тогда
						АвтоРасчПоказатели.Удалить(Инд);
					КонецЕсли;
				Иначе
					// Ручное редактирование стр.070.
					РазрешитьВводДанныхВОбласть(Форма, ТДО["П000310007003"]);
					Инд = АвтоРасчПоказатели.Найти("П000310007003");
					Если Инд <> Неопределено Тогда
						АвтоРасчПоказатели.Удалить(Инд);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимРаздела, ВеткаРаздела = Неопределено)
	
	СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела);
	
	Если Модифицированность Тогда
		
		РасчетНаСервере();
		
		ОблУдалитьСтраницуЗначокТекст = Неопределено;
		ОблУдалитьСтраницуЗначокГиперссылка = Неопределено;
		ОблУдалитьСтраницуТекст = Неопределено;
		ОблУдалитьСтраницуГиперссылка = Неопределено;
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено Тогда
			ОблУдалитьСтраницуЗначокТекст = ОблУдалитьСтраницуЗначок.Текст;
			ОблУдалитьСтраницуЗначокГиперссылка = ОблУдалитьСтраницуЗначок.Гиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницуТекст = ОблУдалитьСтраницу.Текст;
			ОблУдалитьСтраницуГиперссылка = ОблУдалитьСтраницу.Гиперссылка;
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокумент(НаимРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено
			И ОблУдалитьСтраницуЗначокТекст <> Неопределено
			И ОблУдалитьСтраницуЗначокГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницуЗначок.Текст = ОблУдалитьСтраницуЗначокТекст;
			ОблУдалитьСтраницуЗначок.Гиперссылка = ОблУдалитьСтраницуЗначокГиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено
			И ОблУдалитьСтраницуТекст <> Неопределено
			И ОблУдалитьСтраницуГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = ОблУдалитьСтраницуТекст;
			ОблУдалитьСтраницу.Гиперссылка = ОблУдалитьСтраницуГиперссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		ДобавитьСтраницуУровня1(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня1(ИмяРаздела)
	
	ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИмяГлавногоРаздела"];
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
		Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела1 = НайденнаяСтраница1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел3" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		УдалитьСтраницуУровня1(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня1(ИмяРаздела)
	
	ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИмяГлавногоРаздела"];
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела1 = НайденнаяСтраница1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		
		Модифицированность = Истина;
		
		СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
								|en = 'Не выбрана удаляемая строка многострочного раздела'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	Модифицированность = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Стр060 = ТДО["П000210006003"].Значение;
				Стр070 = ТДО["П000210007003"].Значение;
				Стр090 = ТДО["П000210009003"].Значение;
				Стр100 = ТДО["П000210010003"].Значение;
				Стр105 = ТДО["П000210010503"].Значение;
				Стр110 = ТДО["П000210011003"].Значение;
				Стр115 = ТДО["П000210011503"].Значение;
				Стр120 = ТДО["П000210012003"].Значение;
				Стр125 = ТДО["П000210012503"].Значение;
				Стр130 = ТДО["П000210013003"].Значение;
				Стр135 = ТДО["П000210013503"].Значение;
				Стр140 = ТДО["П000210014003"].Значение;
				Стр150 = ТДО["П000210015003"].Значение;
				Стр190 = 0;
				Стр200 = 0;
				Стр210 = 0;
				Стр220 = 0;
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00021М119003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Стр190 = Стр190 + Обл.Значение;
					Стр200 = Стр200 + ТДО["П00021М120003_" + ИндексСтр].Значение;
					Стр210 = Стр210 + ТДО["П00021М121003_" + ИндексСтр].Значение;
					Стр220 = Стр220 + ТДО["П00021М122003_" + ИндексСтр].Значение;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00021М119003_" + ИндексСтр);
				КонецЦикла;
				
				// Стр.080.
				Если Стр090 = 0 Тогда
					ТДО["П000210008003"].Значение = 0;
				Иначе
					ТДО["П000210008003"].Значение = Окр(
					(Стр090 - 0.55 * (Стр100 + Стр105 - Стр190) - 0.3 * (Стр110 + Стр115 - Стр200)
					- 0.065 * (Стр120 + Стр125 - Стр210) - (Стр130 + Стр135 - Стр220)) / Стр090, 4);
				КонецЕсли;
				Стр080 = ТДО["П000210008003"].Значение;
				
				// Стр.050.
				РезультатПроверки = ПроверкаВыполненияУсловийАвторасчетаСтроки050Раздела21(Форма, Форма.ТабличныйДокумент);
				Если РезультатПроверки.ВыполненоУсловие1 Тогда
					ТДО["П000210005003"].Значение = Окр(((Стр060 * 7.3 - 182.5) * 0.3 + 29.2) * Стр070 * Стр080 * Стр140 * Стр150);
				ИначеЕсли РезультатПроверки.ВыполненоУсловие2 Тогда
					ТДО["П000210005003"].Значение = Окр(20 * Стр070 * Стр140);
				ИначеЕсли РезультатПроверки.ВыполненоУсловие3 Тогда
					ТДО["П000210005003"].Значение = 0;
				Иначе
					// Ручное редактирование стр.050.
				КонецЕсли;
				Стр050 = ТДО["П000210005003"].Значение;
				
				// Стр.020.
				ТДО["П000210002003"].Значение = Окр(Стр050 * Стр090);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Стр.040 (подр. 3.1).
				ТДО["П000310004003"].Значение = ?(ТДО["П000310004503"].Значение > 0, 1, 0);
				
				// Стр.050 (подр. 3.1).
				Стр050 = 0;
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти("П00032М103003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Стр050 = Стр050 + Обл.Значение;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = ТДО.Найти("П00032М103003_" + ИндексСтр);
				КонецЦикла;
				ТДО["П000310005003"].Значение = Стр050;
				
				Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024 Тогда
					
					// Ручное редактирование стр.060 (подр. 3.1), стр.070.
					
				Иначе
					
					// Стр.060 (подр. 3.1), стр.070.
					Если ТДО["П000310003003"].Значение + ТДО["П000310004503"].Значение + ТДО["П000310005003"].Значение >= 0 Тогда
						// Ручное редактирование стр.060 (подр. 3.1).
						ТДО["П000310007003"].Значение = 0;
					Иначе
						ТДО["П000310006003"].Значение = 0;
						// Ручное редактирование стр.070.
					КонецЕсли;
					
				КонецЕсли;
				
				// Стр.150.
				Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20230901' Тогда
					
					Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20231001' Тогда
						Квр = 1;
					Иначе
						Квр = 0.5;
					КонецЕсли;
					
					ТДО["П000310015003"].Значение = Окр((ТДО["П000310016003"].Значение - ТДО["П000310018003"].Значение) * Квр);
					
				Иначе
					
					ТДО["П000310015003"].Значение = ТДО["П000310016003"].Значение - ТДО["П000310018003"].Значение;
					
				КонецЕсли;
				
				// Стр.145.
				ТДО["П000310014503"].Значение = ?(ТДО["П000310015003"].Значение > 0, 1, 0);
				
				// Стр.260.
				Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20230901' Тогда
					
					Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20231001' Тогда
						Квр = 1;
					Иначе
						Квр = 0.5;
					КонецЕсли;
					
					ТДО["П000310026003"].Значение = Окр((ТДО["П000310027003"].Значение - ТДО["П000310029003"].Значение) * Квр);
					
				Иначе
					
					ТДО["П000310026003"].Значение = ТДО["П000310027003"].Значение - ТДО["П000310029003"].Значение;
					
				КонецЕсли;
				
				// Стр.255.
				ТДО["П000310025503"].Значение = ?(ТДО["П000310026003"].Значение > 0, 1, 0);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Для каждого Ветка_2 Из ДеревоДанных.Строки Цикл
			
			Стр015 = 0;
			Для каждого Ветка Из Ветка_2.Строки[0].Строки Цикл
				Стр015 = Стр015 + Ветка.Данные["П000210002003"];
			КонецЦикла;
			Ветка_2.Данные.Вставить("П000020001503", Стр015);
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Для каждого Ветка_2 Из ДеревоДанных.Строки Цикл
			
			Для каждого Ветка Из Ветка_2.Строки[0].Строки Цикл
				
				Данные = Ветка.Данные;
				
				Стр060 = Данные["П000210006003"];
				Стр070 = Данные["П000210007003"];
				Стр090 = Данные["П000210009003"];
				Стр100 = Данные["П000210010003"];
				Стр105 = Данные["П000210010503"];
				Стр110 = Данные["П000210011003"];
				Стр115 = Данные["П000210011503"];
				Стр120 = Данные["П000210012003"];
				Стр125 = Данные["П000210012503"];
				Стр130 = Данные["П000210013003"];
				Стр135 = Данные["П000210013503"];
				Стр140 = Данные["П000210014003"];
				Стр150 = Данные["П000210015003"];
				Стр190 = 0;
				Стр200 = 0;
				Стр210 = 0;
				Стр220 = 0;
				ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР21М1];
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					Стр190 = Стр190 + СтрокаМнЧ.Данные["П00021М119003"];
					Стр200 = Стр200 + СтрокаМнЧ.Данные["П00021М120003"];
					Стр210 = Стр210 + СтрокаМнЧ.Данные["П00021М121003"];
					Стр220 = Стр220 + СтрокаМнЧ.Данные["П00021М122003"];
				КонецЦикла;
				
				// Стр.080.
				Если Данные["П000210009003"] = 0 Тогда
					Данные.Вставить("П000210008003", 0);
				Иначе
					Данные.Вставить("П000210008003", Окр(
					(Стр090 - 0.55 * (Стр100 + Стр105 - Стр190) - 0.3 * (Стр110 + Стр115 - Стр200)
					- 0.065 * (Стр120 + Стр125 - Стр210) - (Стр130 + Стр135 - Стр220)) / Стр090, 4));
				КонецЕсли;
				Стр080 = Данные["П000210008003"];
				
				// Стр.050.
				РезультатПроверки = ПроверкаВыполненияУсловийАвторасчетаСтроки050Раздела21(Форма, Ветка);
				Если РезультатПроверки.ВыполненоУсловие1 Тогда
					Данные.Вставить("П000210005003", Окр(((Стр060 * 7.3 - 182.5) * 0.3 + 29.2) * Стр070 * Стр080 * Стр140 * Стр150));
				ИначеЕсли РезультатПроверки.ВыполненоУсловие2 Тогда
					Данные.Вставить("П000210005003", Окр(20 * Стр070 * Стр140));
				ИначеЕсли РезультатПроверки.ВыполненоУсловие3 Тогда
					Данные.Вставить("П000210005003", 0);
				Иначе
					// Ручное редактирование стр.050.
				КонецЕсли;
				Стр050 = Данные["П000210005003"];
				
				// Стр.020.
				Данные.Вставить("П000210002003", Окр(Стр050 * Стр090));
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			// Стр.040 (подр. 3.1).
			Ветка.Данные.Вставить("П000310004003", ?(Ветка.Данные["П000310004503"] > 0, 1, 0));
			
			// Стр.050 (подр. 3.1).
			Стр050 = 0;
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР32М1];
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				Стр050 = Стр050 + СтрокаМнЧ.Данные["П00032М103003"];
			КонецЦикла;
			Ветка.Данные.Вставить("П000310005003", Стр050);
			
			Если Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024 Тогда
				
				// Ручное редактирование стр.060 (подр. 3.1), стр.070.
				
			Иначе
				
				// Стр.060 (подр. 3.1), стр.070.
				Если Ветка.Данные["П000310003003"] + Ветка.Данные["П000310004503"] + Ветка.Данные["П000310005003"] >= 0 Тогда
					// Ручное редактирование стр.060 (подр. 3.1).
					Ветка.Данные.Вставить("П000310007003", 0);
				Иначе
					Ветка.Данные.Вставить("П000310006003", 0);
					// Ручное редактирование стр.070.
				КонецЕсли;
				
			КонецЕсли;
			
			// Стр.150.
			Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20230901' Тогда
				
				Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20231001' Тогда
					Квр = 1;
				Иначе
					Квр = 0.5;
				КонецЕсли;
				
				Ветка.Данные.Вставить("П000310015003", Окр((Ветка.Данные["П000310016003"] - Ветка.Данные["П000310018003"]) * Квр));
				
			Иначе
				
				Ветка.Данные.Вставить("П000310015003", Ветка.Данные["П000310016003"] - Ветка.Данные["П000310018003"]);
				
			КонецЕсли;
			
			// Стр.145.
			Ветка.Данные.Вставить("П000310014503", ?(Ветка.Данные["П000310015003"] > 0, 1, 0));
			
			// Стр.260.
			Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20230901' Тогда
				
				Если НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= '20231001' Тогда
					Квр = 1;
				Иначе
					Квр = 0.5;
				КонецЕсли;
				
				Ветка.Данные.Вставить("П000310026003", Окр((Ветка.Данные["П000310027003"] - Ветка.Данные["П000310029003"]) * Квр));
				
			Иначе
				
				Ветка.Данные.Вставить("П000310026003", Ветка.Данные["П000310027003"] - Ветка.Данные["П000310029003"]);
				
			КонецЕсли;
			
			// Стр.255.
			Ветка.Данные.Вставить("П000310025503", ?(Ветка.Данные["П000310026003"] > 0, 1, 0));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 3.
	Структ = Новый Структура;
	Структ.Вставить("П000310004003");
	Структ.Вставить("П000310005003");
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2024 Тогда
		
		// Ручное редактирование стр.060 (подр. 3.1), стр.070.
		
	Иначе
		
		Структ.Вставить("П000310006003");
		Структ.Вставить("П000310007003");
		
	КонецЕсли;
	
	Структ.Вставить("П000310014503");
	Структ.Вставить("П000310015003");
	Структ.Вставить("П000310025503");
	Структ.Вставить("П000310026003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
	// Раздел 2.1.
	Структ = Новый Структура;
	Структ.Вставить("П000210002003");
	Структ.Вставить("П000210005003");
	Структ.Вставить("П000210008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел21", Структ);
	
	// Раздел 2.
	Структ = Новый Структура;
	Структ.Вставить("П000020001503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверкаВыполненияУсловийАвторасчетаСтроки050Раздела21(Форма, СтраницаРаздела)
	
	Перем Индекс, ИндексСтр;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ВыполненоУсловие1", Ложь);
	РезультатПроверки.Вставить("ВыполненоУсловие2", Ложь);
	РезультатПроверки.Вставить("ВыполненоУсловие3", Ложь);
	
	Если ТипЗнч(СтраницаРаздела) = Тип("ТабличныйДокумент") Тогда
		
		ТДО = СтраницаРаздела.Области;
		
		Стр060 = ТДО["П000210006003"].Значение;
		Стр090 = ТДО["П000210009003"].Значение;
		Стр100 = ТДО["П000210010003"].Значение;
		Стр105 = ТДО["П000210010503"].Значение;
		Стр110 = ТДО["П000210011003"].Значение;
		Стр115 = ТДО["П000210011503"].Значение;
		Стр120 = ТДО["П000210012003"].Значение;
		Стр125 = ТДО["П000210012503"].Значение;
		Стр130 = ТДО["П000210013003"].Значение;
		Стр135 = ТДО["П000210013503"].Значение;
		Стр160 = ТДО["П000210016003"].Значение;
		Стр170 = ТДО["П000210017003"].Значение;
		Стр190 = 0;
		Стр200 = 0;
		Стр210 = 0;
		Стр220 = 0;
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = ТДО.Найти("П00021М119003_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Стр190 = Стр190 + Обл.Значение;
			Стр200 = Стр200 + ТДО["П00021М120003_" + ИндексСтр].Значение;
			Стр210 = Стр210 + ТДО["П00021М121003_" + ИндексСтр].Значение;
			Стр220 = Стр220 + ТДО["П00021М122003_" + ИндексСтр].Значение;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти("П00021М119003_" + ИндексСтр);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтраницаРаздела) = Тип("СтрокаДереваЗначений") Тогда
		
		Данные = СтраницаРаздела.Данные;
		
		Стр060 = Данные["П000210006003"];
		Стр090 = Данные["П000210009003"];
		Стр100 = Данные["П000210010003"];
		Стр105 = Данные["П000210010503"];
		Стр110 = Данные["П000210011003"];
		Стр115 = Данные["П000210011503"];
		Стр120 = Данные["П000210012003"];
		Стр125 = Данные["П000210012503"];
		Стр130 = Данные["П000210013003"];
		Стр135 = Данные["П000210013503"];
		Стр160 = Данные["П000210016003"];
		Стр170 = Данные["П000210017003"];
		Стр190 = 0;
		Стр200 = 0;
		Стр210 = 0;
		Стр220 = 0;
		ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[Форма.СтруктураРеквизитовФормы.мИдГруппыР21М1];
		Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
			Стр190 = Стр190 + СтрокаМнЧ.Данные["П00021М119003"];
			Стр200 = Стр200 + СтрокаМнЧ.Данные["П00021М120003"];
			Стр210 = Стр210 + СтрокаМнЧ.Данные["П00021М121003"];
			Стр220 = Стр220 + СтрокаМнЧ.Данные["П00021М122003"];
		КонецЦикла;
		
	Иначе
		
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	Если Стр090 <> 0 Тогда
		
		ПромежуточноеЗначение = ((Стр100 + Стр105 - Стр190) + (Стр110 + Стр115 - Стр200)
		+ (Стр120 + Стр125 - Стр210) + (Стр130 + Стр135 - Стр220)) / Стр090;
		
		РезультатПроверки.Вставить("ВыполненоУсловие1",
		Стр060 > 25 И Стр160 = 0 И Стр170 = 0 И ПромежуточноеЗначение >= 0.75);
		
		РезультатПроверки.Вставить("ВыполненоУсловие2",
		Стр060 <= 25 И Стр160 = 0 И Стр170 = 0 И ПромежуточноеЗначение >= 0.75);
		
		РезультатПроверки.Вставить("ВыполненоУсловие3", ПромежуточноеЗначение < 0.75);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
										|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцНефт");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_AKCNEFT"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПериода      = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12",",", Ложь);
	ВозможныеКодыПериодаРеорг = СтрРазделить("71,72,73,74,75,76,77,78,79,80,81,82",",", Ложь);
	
	ВозможныеКодыПоМесту = ВозможныеЗначенияИзСпискаВыбораПоказателя("ПоМесту");
	
	ВозможныеКодыФормыРеорганизции = ВозможныеЗначенияИзСпискаВыбораПоказателя("КодФормыРеорганизации");
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.МассивЗначений.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Код места представления декларации должен принимать одно из значений: "
		+ ВозможныеКодыПоМесту.СтрокаЗначений, "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации)", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		Иначе
			Если ВозможныеКодыФормыРеорганизции.МассивЗначений.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Код формы реорганизации (ликвидации) может принимать одно из значений: "
				+ ВозможныеКодыФормыРеорганизции.СтрокаЗначений, "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	НомСтраницы = "1";
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
			НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
			
			ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М101000"]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС("Строка " + НомСтроки + " раздела 1: не" + ?(ДлинаЗначПок = 0, "", "верно")
				+ " задан код по ОКТМО", "Раздел1", "П00001М101000_" + НомСтроки, НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
			КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
			
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
				НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
				
				Текст_СтрокаГруппыСтрок
				= ?(КолСтрокПодчМнЧ = 1, "", "в строке " + НомСтрокиПодчМнЧ + " группы строк 020-040 ");
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаПодчМнЧ.Данные["П00001М202000"]));
				Если ДлинаЗначПок <> 20 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 1: " + Текст_СтрокаГруппыСтрок
					+ "не" + ?(ДлинаЗначПок = 0, "", "верно") + " задан код бюджетной классификации",
					"Раздел1", "П00001М202000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		СообщитьВТС("Не заполнен раздел 1", "Раздел1", "П00001М101000_1", НомСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	ЗаполненРаздел2 = ЗаполненРаздел(ДеревоРаздела, "Раздел2");
	
	Если ЗаполненРаздел2 Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если СокрЛП(Ветка.Данные["П000020000103"]) <> "678" Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": код вида подакцизного товара должен быть равен 678",
				"Раздел2", "П000020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000020001003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": не" + ?(ДлинаЗначПок = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Раздел 2.1.
			//
			Для каждого ПодчВетка Из Ветка.Строки[0].Строки Цикл
				
				НомПодчСтраницы = Формат(Ветка.Строки[0].Строки.Индекс(ПодчВетка) + 1, "ЧГ=");
				
				КоординатыПодчВетки = НомСтраницы + "," + НомПодчСтраницы;
				
				ПрДог    = ПодчВетка.Данные["П000210002503"];
				НомерДог = СокрЛП(ПодчВетка.Данные["П000210003003"]);
				ДатаДог  = ПодчВетка.Данные["П000210004003"];
				
				Если ПрДог <> 0 И ПрДог <> 1 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница " + НомПодчСтраницы
					+ ": задан некорректный признак наличия договора. Возможны значения: 0, 1", "Раздел21", "П000210002503",
					КоординатыПодчВетки);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ПрДог = 1 Тогда
					Если Не ЗначениеЗаполнено(НомерДог) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница " + НомПодчСтраницы
						+ ": не задан номер договора при признаке наличия договора, равном 1", "Раздел21", "П000210003003",
						КоординатыПодчВетки);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ДатаДог) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница " + НомПодчСтраницы
						+ ": не задана дата договора при признаке наличия договора, равном 1", "Раздел21", "П000210004003",
						КоординатыПодчВетки);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ДатаДог) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница " + НомПодчСтраницы
						+ ": задана дата договора, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Раздел21", "П000210004003", КоординатыПодчВетки);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
				КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
						
						НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
						Текст_СтрокаГруппыСтрок = ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 180-220 ");
						
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М118003"]);
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница "
							+ НомПодчСтраницы + ": " + Текст_СтрокаГруппыСтрок + "не задан код налогового периода",
							"Раздел21", "П00021М118003_" + НомСтроки, КоординатыПодчВетки);
							СтатусПроверки = Ложь;
						КонецЕсли;
						ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М118004"]);
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + " -> Раздел 2.1 -> Страница "
							+ НомПодчСтраницы + ": " + Текст_СтрокаГруппыСтрок + "не задан год налогового периода",
							"Раздел21", "П00021М118004_" + НомСтроки, КоординатыПодчВетки);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	
	ЗаполненРаздел3 = ЗаполненРаздел(ДеревоРаздела, "Раздел3");
	
	Если ЗаполненРаздел3 Тогда
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если СокрЛП(Ветка.Данные["П000030000103"]) <> "678" Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": код вида подакцизного товара должен быть равен 678",
				"Раздел3", "П000030000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000030001003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": не" + ?(ДлинаЗначПок = 0, "", "верно")
				+ " задан код бюджетной классификации", "Раздел3", "П000030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = Ветка.Данные["П000310004003"];
			Если ЗначПок <> 0 И ЗначПок <> 1 Тогда
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
				+ ": задан некорректный признак величины Кдемп. Возможны значения: 0, 1", "Раздел3", "П000310004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненыСведения_АБ = ЗначениеЗаполнено(Ветка.Данные["П000310013003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310014003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310014503"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310015003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310016003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310017003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310018003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310019003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310023003"]);
			
			ЗаполненыСведения_ДТ = ЗначениеЗаполнено(Ветка.Данные["П000310024003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310025003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310025503"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310026003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310027003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310028003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310029003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310030003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П000310034003"]);
			
			Если НЕ ЗаполненыСведения_АБ И НЕ ЗаполненыСведения_ДТ Тогда
				
				СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": не заполнен подраздел 3.1.1 и(или) подраздел 3.1.2",
				"Раздел3", "П000310013003", НомСтраницы);
				СтатусПроверки = Ложь;
				
			Иначе
				
				ЗначПок = Ветка.Данные["П000310014503"];
				Если ЗначПок <> 0 И ЗначПок <> 1 Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
					+ ": задан некорректный признак показателя (Даб). Возможны значения: 0, 1",
					"Раздел3", "П000310014503", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = Ветка.Данные["П000310025503"];
				Если ЗначПок <> 0 И ЗначПок <> 1 Тогда
					СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы
					+ ": задан некорректный признак показателя (Ддт). Возможны значения: 0, 1",
					"Раздел3", "П000310025503", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР32М1];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					
					НомСтроки = Формат(ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Текст_СтрокаГруппыСтрок
					= ?(КолСтрокМнЧ = 1, "", "в строке " + НомСтроки + " группы строк 010-060 подраздела 3.2 ");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00032М101003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок
						+ "не задан номер инвестиционного соглашения", "Раздел3", "П00032М101003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаМнЧ.Данные["П00032М102003"]) Тогда
						СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок
						+ "не задана дата соглашения", "Раздел3", "П00032М102003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(СтрокаМнЧ.Данные["П00032М102003"]) Тогда
						СообщитьВТС("Раздел 3 -> Страница " + НомСтраницы + ": " + Текст_СтрокаГруппыСтрок
						+ "задана дата соглашения, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Раздел3", "П00032М102003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗаполненРаздел2 И НЕ ЗаполненРаздел3 Тогда
		
		СообщитьВТС("Не заполнен раздел 2 и(или) раздел 3", "Раздел2", "П000020000103", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		
		ЭкзСумНалПУ = СкопироватьУзел(УзелРодитель, СумНалПУ, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСумНалПУ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СумНалПУКод = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ, "СумНалПУКод");
		ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		
		Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
			
			ЭкзСумНалПУКод = СкопироватьУзел(ЭкзСумНалПУ, СумНалПУКод, ЭкзСумНалПУ.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П10001М203000" Тогда
						ВывестиПоказательВXML(Эл, СтрокаПодчМнЧ.Данные["П00001М203000"] - СтрокаПодчМнЧ.Данные["П00001М204000"]);
					Иначе
						ВывестиПоказательВXML(Эл, СтрокаПодчМнЧ.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчСумАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчСумАкц");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРасчСумАкц = СкопироватьУзел(УзелРодитель, РасчСумАкц, УзелРодитель.Строки.Количество() - 1);
		
		Для каждого Эл Из ЭкзРасчСумАкц.Строки Цикл
			
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
			
		КонецЦикла;
		
		РасчНалСтавДог = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумАкц, "РасчНалСтавДог");
		
		Для каждого ПодчВетка Из Ветка.Строки[0].Строки Цикл
			
			ЭкзРасчНалСтавДог = СкопироватьУзел(ЭкзРасчСумАкц, РасчНалСтавДог, ЭкзРасчСумАкц.Строки.Количество() - 1);
			
			Для каждого Эл Из ЭкзРасчНалСтавДог.Строки Цикл
				
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ПодчВетка.Данные[Эл.Ключ]);
				КонецЕсли;
				
			КонецЦикла;
			
			СведВозвр = ПолучитьПодчиненныйЭлемент(ЭкзРасчНалСтавДог, "СведВозвр");
			ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ЭкзСведВозвр = СкопироватьУзел(ЭкзРасчНалСтавДог, СведВозвр, ЭкзРасчНалСтавДог.Строки.Количество() - 1);
				Для каждого Эл Из ЭкзСведВозвр.Строки Цикл
					ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
					Если Эл.Код = "ВозПрямБенз"
						И СтрокаМнЧ.Данные["П00021М119003"] = 0 И СтрокаМнЧ.Данные["П00021М120003"] = 0
						И СтрокаМнЧ.Данные["П00021М121003"] = 0 И СтрокаМнЧ.Данные["П00021М122003"] = 0 Тогда
						Эл.Обязательность = "О";
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(РасчНалСтавДог);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(РасчСумАкц);
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	РасчСумАкцВыч = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчСумАкцВыч");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРасчСумАкцВыч = СкопироватьУзел(УзелРодитель, РасчСумАкцВыч, УзелРодитель.Строки.Количество() - 1);
		
		Для каждого Эл Из ЭкзРасчСумАкцВыч.Строки Цикл
			
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Ключ = "П100030002003" Тогда
					ВывестиПоказательВXML(Эл, Ветка.Данные["П000030002503"] - Ветка.Данные["П000030002003"]);
				Иначе
					ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СведНалВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумАкцВыч, "СведНалВыч");
		
		Для каждого Эл Из СведНалВыч.Строки Цикл
			
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
				Если Эл.Код = "СумВычКдемп" И Ветка.Данные["П000310006003"] = 0 И Ветка.Данные["П000310007003"] = 0 Тогда
					Эл.Обязательность = "О";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(СведНалВыч, "СведАБ"));
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(СведНалВыч, "СведДТ"));
		
		СведИнвНад = ПолучитьПодчиненныйЭлемент(ЭкзРасчСумАкцВыч, "СведИнвНад");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР32М1];
		
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные,
			СкопироватьУзел(ЭкзРасчСумАкцВыч, СведИнвНад, ЭкзРасчСумАкцВыч.Строки.Количество() - 1));
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(РасчСумАкцВыч);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "АкцизыНефтяноеСырье");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ТекущийРазделОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
			|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
			|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
			|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("НомерДоговора", ТабличныйДокумент.Область("П000210003003").Значение);
		СтруктПарам.Вставить("ДатаДоговора", ТабличныйДокумент.Область("П000210004003").Значение);
		СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел21(СтруктПарам);
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
		|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
		|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыР1М1;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 1;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыР1М2;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 7;
		
		МассивДанныхМнЧДляПечати = Новый Массив;
		ДанныеМнЧДляПечати = Новый Структура;
		
		НомерСтрокиВБлокеМнЧ1 = 0;
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
		Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
			
			НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
			Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
				
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				ДанныеМнЧДляПечати = Новый Структура;
				
				НомерСтрокиВБлокеМнЧ1 = 1;
				
			КонецЕсли;
			
			Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
				ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1),
				СтрокаМнЧ1.Данные[ИмяГрафы]);
			КонецЦикла;
			
			НомерСтрокиВБлокеМнЧ2 = 0;
			
			ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
			Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
				
				НомерСтрокиВБлокеМнЧ2 = НомерСтрокиВБлокеМнЧ2 + 1;
				Если НомерСтрокиВБлокеМнЧ2 > СтрокВБлокеМнЧ2 Тогда
					
					НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
					Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
						
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
						ДанныеМнЧДляПечати = Новый Структура;
						
						НомерСтрокиВБлокеМнЧ1 = 1;
						
					КонецЕсли;
					
					НомерСтрокиВБлокеМнЧ2 = 1;
					
				КонецЕсли;
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1)
					+ СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ2), СтрокаМнЧ2.Данные[ИмяГрафы]);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
		
		Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ1 + СтрокаСИндексомПоказателя(Ном1);
				ВставитьДопСтроку(ИмяГруппыМнЧ1, ИмяОбластиПреемника);
			КонецЦикла;
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 Цикл
				Для Ном2 = 1 По СтрокВБлокеМнЧ2 - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ2 + СтрокаСИндексомПоказателя(Ном1) + СтрокаСИндексомПоказателя(Ном2);
					ВставитьДопСтроку(ИмяГруппыМнЧ2, ИмяОбластиПреемника);
				КонецЦикла;
			КонецЦикла;
			
			ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
				// Обработка значения кода по ОКТМО.
				Если СтрНачинаетсяС(Пок.Ключ, "П00001М101000") Тогда
					Обл.Значение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Пок.Значение), 11, "-", 1);
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетР2 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);;
		
		МакетР21 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Раздел21");;
		
		СтрокМнЧНаЛисте = 1;
		
		Для каждого ВеткаР2 Из ДеревоДанныхРаздела.Строки Цикл
			
			Для каждого ВеткаР21 Из ВеткаР2.Строки[0].Строки Цикл
				
				// Вывод первых листов.
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетР2);
				ТабличныйДокумент.Вывести(МакетР21);
				
				Если ВеткаР2.Строки[0].Строки.Индекс(ВеткаР21) = 0 Тогда
					НемногострочныеДанные = ВеткаР2.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НемногострочныеДанные = ВеткаР21.Данные;
				Для каждого Пок Из НемногострочныеДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
				ДанныеМнЧ = ВеткаР21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
				
				// Определение количества вторых листов.
				КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
				ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
				ЦелКол  = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
				КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				// Подготовка многострочных данных для заполнения вторых листов.
				МассивДанныхМнЧДляПечати = Новый Массив;
				ИмяП00021М118003 = "П00021М118003";
				ИмяП00021М118004 = "П00021М118004";
				ИмяП00021М119003 = "П00021М119003";
				ИмяП00021М120003 = "П00021М120003";
				ИмяП00021М121003 = "П00021М121003";
				ИмяП00021М122003 = "П00021М122003";
				
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
					ДанныеМнЧДляПечати = Новый Структура;
					Для ИндСтрокиМнЧ = 1 По СтрокМнЧНаЛисте Цикл
						_ИндСтрокиМнЧ = СтрокаСИндексомПоказателя(ИндСтрокиМнЧ);
						ИндСПриращением = ИндСтрокиМнЧ + ПриращениеКНомеру;
						
						НовИмяП00021М118003 = ИмяП00021М118003 + _ИндСтрокиМнЧ;
						НовИмяП00021М118004 = ИмяП00021М118004 + _ИндСтрокиМнЧ;
						НовИмяП00021М119003 = ИмяП00021М119003 + _ИндСтрокиМнЧ;
						НовИмяП00021М120003 = ИмяП00021М120003 + _ИндСтрокиМнЧ;
						НовИмяП00021М121003 = ИмяП00021М121003 + _ИндСтрокиМнЧ;
						НовИмяП00021М122003 = ИмяП00021М122003 + _ИндСтрокиМнЧ;
						
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М118003, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М118004, "");
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М119003, 0);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М120003, 0);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М121003, 0);
						ДанныеМнЧДляПечати.Вставить(НовИмяП00021М122003, 0);
						
						Если КолСтрокМнЧ >= ИндСПриращением Тогда
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М118003,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М118003]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М118004,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М118004]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М119003,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М119003]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М120003,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М120003]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М121003,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М121003]);
							ДанныеМнЧДляПечати.Вставить(НовИмяП00021М122003,
							ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяП00021М122003]);
						КонецЕсли;
					КонецЦикла;
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					
				КонецЦикла;
				
				// Вывод вторых листов.
				Для НомЛиста = 1 По КолЛистовРаздела Цикл
					
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(МакетР21);
					
					Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
						ИмяОбластиПреемника = "ДобавлениеСтроки"
						+ СтруктураРеквизитовФормы.мИдГруппыР21М1 + СтрокаСИндексомПоказателя(Ном);
						ВставитьДопСтроку(СтруктураРеквизитовФормы.мИдГруппыР21М1, ИмяОбластиПреемника);
					КонецЦикла;
					
					Если НомЛиста = 1 Тогда
						Для каждого Пок Из ВеткаР21.Данные Цикл
							Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = Пок.Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
					Для каждого Пок Из ДанныеМнЧДляПечати Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
					СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел2_Продолжение");
					ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		
		МакетР3 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);;
		
		Для каждого ВеткаР3 Из ДеревоДанныхРаздела.Строки Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетР3);
			
			НемногострочныеДанные = ВеткаР3.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетР3);
			
			НемногострочныеДанные = ВеткаР3.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел311");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетР3);
			
			НемногострочныеДанные = ВеткаР3.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел312");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
			ДанныеМнЧ = ВеткаР3.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР32М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетР3);
				
				Для каждого Пок Из СтрокаМнЧ.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ + "_1");
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", "Раздел32");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2021Кв4_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПараметрыПечати.ИмяСтраницы, "Раздел2") Тогда
		
		МасИменПок10_3 = Новый Массив;
		МасИменПок10_3.Добавить("П000210010003");
		МасИменПок10_3.Добавить("П000210010503");
		МасИменПок10_3.Добавить("П000210011003");
		МасИменПок10_3.Добавить("П000210011503");
		МасИменПок10_3.Добавить("П000210012003");
		МасИменПок10_3.Добавить("П000210012503");
		МасИменПок10_3.Добавить("П000210013003");
		МасИменПок10_3.Добавить("П000210013503");
		МасИменПок10_3.Добавить("П000210016003");
		МасИменПок10_3.Добавить("П000210017003");
		МасИменПок10_3.Добавить("П00021М119003_1");
		МасИменПок10_3.Добавить("П00021М120003_1");
		МасИменПок10_3.Добавить("П00021М121003_1");
		МасИменПок10_3.Добавить("П00021М122003_1");
		Для каждого ИмяПок Из МасИменПок10_3 Цикл
			Пок = Показатели.Найти(ИмяПок, "Имя");
			Если Пок <> Неопределено И Пок.Значение = 0 Тогда
				Пок.Значение = "0---------.0--";
				Пок.ЗначениеМЧБ = Пок.Значение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(ПараметрыПечати.ИмяСтраницы, "Раздел3") Тогда
		
		МасИменПок10_3 = Новый Массив;
		МасИменПок10_3.Добавить("П000310014003");
		МасИменПок10_3.Добавить("П000310023003");
		МасИменПок10_3.Добавить("П000310025003");
		МасИменПок10_3.Добавить("П000310034003");
		Для каждого ИмяПок Из МасИменПок10_3 Цикл
			Пок = Показатели.Найти(ИмяПок, "Имя");
			Если Пок <> Неопределено И Пок.Значение = 0 Тогда
				Пок.Значение = "0---------.0--";
				Пок.ЗначениеМЧБ = Пок.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось заполнить область ""%1""';
																									|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"	, 0);
	ДанныеКС.Вставить("КолНеОшибок"	, 0);
	ДанныеКС.Вставить("Результат"	, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"		, Истина);;
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОтчета"	, ДанныеКС.Отчет.ДатаОкончания);
	
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	
	ДанныеКС.Вставить("ГодОтчетаСтр", ДанныеКС.Титульный.ОтчетГод);
	ДанныеКС.Вставить("МесОтчетаСтр", ДанныеКС.Титульный.Период);

	// проверки критические НК РФ
	ПроверкаКС_11_1_1_к();
	ПроверкаКС_11_1_2_к();
	ПроверкаКС_11_2_1_к();
	ПроверкаКС_11_2_2_к();
	ПроверкаКС_11_2_3_к();

	// основные проверки
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 1
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	
	// проверки Раздела 2
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	ПроверкаКС_3_12();
	ПроверкаКС_3_13();
	ПроверкаКС_3_14();
	ПроверкаКС_3_15();
	ПроверкаКС_3_16();
	ПроверкаКС_3_17();
	ПроверкаКС_3_18();
	ПроверкаКС_3_19();
	
	// проверки Раздела 3
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	ПроверкаКС_4_07();
	ПроверкаКС_4_08();
	ПроверкаКС_4_09();
	ПроверкаКС_4_10();
	ПроверкаКС_4_11();
	ПроверкаКС_4_12();
	ПроверкаКС_4_13();
	ПроверкаКС_4_14();
	ПроверкаКС_4_15();
	ПроверкаКС_4_16();
	ПроверкаКС_4_17();
	ПроверкаКС_4_18();
	ПроверкаКС_4_19();
	ПроверкаКС_4_20();
	ПроверкаКС_4_21();
	ПроверкаКС_4_22();
	ПроверкаКС_4_23();
	ПроверкаКС_4_24();
	ПроверкаКС_4_25();
	ПроверкаКС_4_26();
	ПроверкаКС_4_27();
	ПроверкаКС_4_28();
	
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	ПроверкаКС_6_06();
	ПроверкаКС_6_07();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Акцизы на нефтяное сырье");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2021Кв4");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();

	// проверки критические НК РФ
	ПроверкаКС_11_1_1_к();
	ПроверкаКС_11_1_2_к();
	ПроверкаКС_11_2_1_к();
	ПроверкаКС_11_2_2_к();
	ПроверкаКС_11_2_3_к();

	// основные проверки
	
	// проверки Титульного листа
	ПроверкаКС_1_01();
	
	// проверки Раздела 1
	ПроверкаКС_2_01();
	ПроверкаКС_2_02();
	ПроверкаКС_2_03();
	ПроверкаКС_2_04();
	
	// проверки Раздела 2
	ПроверкаКС_3_01();
	ПроверкаКС_3_02();
	ПроверкаКС_3_03();
	ПроверкаКС_3_04();
	ПроверкаКС_3_05();
	ПроверкаКС_3_06();
	ПроверкаКС_3_07();
	ПроверкаКС_3_08();
	ПроверкаКС_3_09();
	ПроверкаКС_3_10();
	ПроверкаКС_3_11();
	ПроверкаКС_3_12();
	ПроверкаКС_3_13();
	ПроверкаКС_3_14();
	ПроверкаКС_3_15();
	ПроверкаКС_3_16();
	ПроверкаКС_3_17();
	ПроверкаКС_3_18();
	ПроверкаКС_3_19();
	
	// проверки Раздела 3
	ПроверкаКС_4_01();
	ПроверкаКС_4_02();
	ПроверкаКС_4_03();
	ПроверкаКС_4_04();
	ПроверкаКС_4_05();
	ПроверкаКС_4_06();
	ПроверкаКС_4_07();
	ПроверкаКС_4_08();
	ПроверкаКС_4_09();
	ПроверкаКС_4_10();
	ПроверкаКС_4_11();
	ПроверкаКС_4_12();
	ПроверкаКС_4_13();
	ПроверкаКС_4_14();
	ПроверкаКС_4_15();
	ПроверкаКС_4_16();
	ПроверкаКС_4_17();
	ПроверкаКС_4_18();
	ПроверкаКС_4_19();
	ПроверкаКС_4_20();
	ПроверкаКС_4_21();
	ПроверкаКС_4_22();
	ПроверкаКС_4_23();
	ПроверкаКС_4_24();
	ПроверкаКС_4_25();
	ПроверкаКС_4_26();
	ПроверкаКС_4_27();
	ПроверкаКС_4_28();
	
	ПроверкаКС_5_01();
	ПроверкаКС_5_02();
	ПроверкаКС_5_03();
	ПроверкаКС_5_04();
	ПроверкаКС_5_05();
	ПроверкаКС_5_06();
	ПроверкаКС_5_07();
	
	ПроверкаКС_6_01();
	ПроверкаКС_6_02();
	ПроверкаКС_6_03();
	ПроверкаКС_6_04();
	ПроверкаКС_6_05();
	ПроверкаКС_6_06();
	ПроверкаКС_6_07();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "Титульного листа");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р21", "подраздела 2.1 Раздела 2");
	ПредставлениеРазделов.Вставить("Р03", "Раздела 3");
	ПредставлениеРазделов.Вставить("Р31", "подраздела 3.1 Раздела 3");
	ПредставлениеРазделов.Вставить("Р32", "подраздела 3.1.1 Раздела 3");
	ПредставлениеРазделов.Вставить("Р33", "подраздела 3.1.2 Раздела 3");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р21", "Раздел21");
	РазделыПоказателей.Вставить("Р03", "Раздел3");
	РазделыПоказателей.Вставить("Р31", "Раздел3");
	РазделыПоказателей.Вставить("Р32", "Раздел3");
	РазделыПоказателей.Вставить("Р33", "Раздел3");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ПоказателиТЛ = Новый Структура;
	
	ПоказателиТЛ.Вставить("Т001", "Отчетный год");
	ПоказателиТЛ.Вставить("Т002", "Дата подписи");
	
	ДанныеКС.Вставить("ПоказателиТЛ", ПоказателиТЛ);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р03");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	// Раздел 1
	МассивПолейСписочныхЗначений.Добавить("П00001М202000");
	
	// Раздел 2
	МассивПолейСписочныхЗначений.Добавить("П000020000103");
	МассивПолейСписочныхЗначений.Добавить("П000020001003");
	МассивПолейСписочныхЗначений.Добавить("П000210015003");
	
	// Раздел 3
	МассивПолейСписочныхЗначений.Добавить("П000030000103");
	МассивПолейСписочныхЗначений.Добавить("П000030001003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета)
	
	Перем Показатели;
	
	СтруктураДанных = СохраненныеДанныеОтчета();

	ДанныеКС.Вставить("Титульный", ОбщегоНазначения.СкопироватьРекурсивно(
		СтруктураДанных.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
		
		ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
				Новый Структура("КорневойРаздел, Раздел, Уровень", Раздел.Ключ, Раздел.Ключ, 1),
				Новый Структура("Уровень", ""));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		
		ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
		ДанныеКС.Вставить("РазделЗаполнен_" + Раздел.Ключ, РазделЗаполнен(МассивСтраниц, Ложь));
		
	КонецЦикла;
	
	ДанныеКС.Вставить("Раздел1", ДанныеКС.Раздел1[0]);
	
	КБК_Раздел1 = Новый Массив;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
		Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
	
			ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
			Если КБК_Раздел1.Найти(Показатели.Р01С020.Значение) = Неопределено Тогда
				КБК_Раздел1.Добавить(Показатели.Р01С020.Значение);
			КонецЕсли;
	
		КонецЦикла;
	КонецЦикла;
	
	ДанныеКС.Вставить("КБК_Раздел1", КБК_Раздел1);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)
									
	Если НЕ СтруктураИсточник.Данные = Неопределено Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
					МнЧасть.Значение.Строки.Количество());
					
				Если НЕ СтрокаМнЧасти.Данные = Неопределено Тогда
					Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
						СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
							ПоказательСтроки.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей = Неопределено Тогда
					Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
						ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
							Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		Для каждого Приложение Из СтруктураИсточник.Строки Цикл
	
			Если ВходящийРаздел.Уровень = 1 Тогда
				ВходящийРаздел.Уровень = 2;
				ПолучитьДанныеСтраницы(СтруктураПриемник, Приложение, ВходящийРаздел, ВходящаяМнЧасть);
				Возврат;
			КонецЕсли;
	
			КлючПриложения = ВходящийРаздел.Раздел + "1";
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаПриложения Из СтруктураИсточник.Строки Цикл
		
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + "," +
					XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПриложения) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
					Новый Структура("КорневойРаздел, Раздел, Уровень", ВходящийРаздел.КорневойРаздел, КлючПриложения, 
					ВходящийРаздел.Уровень + 1), Новый Структура("Уровень", ""));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, МассивСтраниц.Количество());
			СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		ПодстрокаСтроки			= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы			= Сред(Элемент.Значение, 13,1);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		ИначеЕсли ИндексДополнения = "Т" Тогда
			МассивПредставления.Добавить(ДанныеКС.ПоказателиТЛ[Сред(Элемент.Ключ, 4, 4)]);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.ИмяПоказателя];
		
		Показатель.Отчет	= Источник.Отчет;
		Показатель.Страница = Источник.НомСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, 
	Параметр4 = Неопределено)
	
	Если Параметр2 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1);
	
	ИначеЕсли Параметр3 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2);
	
	ИначеЕсли Параметр4 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3);
		
	Иначе
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);
	
	КонецЕсли;

КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат()
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураРеквизитовФормы.КС_АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассив(ИсходнаяСтрока, Разделитель = ",", СтрокуВЧисло = Ложь)
	
	Результат = СтрРазделить(ИсходнаяСтрока, Разделитель, Истина);
	
	Если СтрокуВЧисло Тогда
		
		ВсегоЭлементов = Результат.Количество();
		Для Счетчик = 1 По ВсегоЭлементов Цикл
		
			Результат.Установить(Счетчик - 1, Число(Результат[Счетчик - 1]));
		
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел, РазделЗаполнен)
	
	Для каждого Страница Из Раздел Цикл
		Для каждого Показатель Из Страница Цикл
		
			Если НЕ СтрНайти(Показатель.Ключ, "П000") = 0 И СтрНайти(Показатель.Ключ, "КолвоСтрок") = 0 Тогда
				РазделЗаполнен = РазделЗаполнен ИЛИ ЗначениеЗаполнено(Показатель.Значение);
			КонецЕсли; 
			
			Если ТипЗнч(Показатель.Значение) = Тип("Массив") Тогда
				РазделЗаполнен(Показатель.Значение, РазделЗаполнен);
			КонецЕсли; 
		
		КонецЦикла;
		
		Если РазделЗаполнен Тогда
			Возврат РазделЗаполнен;
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат РазделЗаполнен;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Критические_НК_РФ

#Область Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_11_1_1_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.1.1.к';
													|en = '11.1.1.к'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза к уплате в стр.030 Раздела 1 >= 0 в разрезе КБК';
														|en = 'Сумма акциза к уплате в стр.030 Раздела 1 >= 0 в разрезе КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0, КБК %2';
													|en = '%1 >= 0, КБК %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма акциза';
														|en = 'Возможно ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П00001М203000_");
	
	ПроверкаКС_11_1_1_к_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_1_1_к_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С001", Настройки.Показатель);
	ИменаПоказателей.Вставить("Р01С002", "П00001М202000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого КБКРаздела1 Из ДанныеКС.КБК_Раздел1 Цикл 
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р01С001.Итог = 0;
		КБКРаздела1Стр = "(...)";
		
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
				
				ЗаполнитьПоказатель(Показатели.Р01С002, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р01С002.Значение = КБКРаздела1 Тогда
					КБКРаздела1Стр = Показатели.Р01С002.ЗначениеСтр;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С001, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				КонецЕсли;
		
			КонецЦикла;
		КонецЦикла;
		
		Настройки.ЭтоОшибка = Показатели.Р01С001.Итог < 0;
		Настройки.Расшифровка = СтрШаблон(Настройки.ШаблонРасшифровки, 
			Показатели.Р01С001.Итог, КБКРаздела1Стр); 
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_1_2_к()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.1.2.к';
													|en = '11.1.2.к'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза к уменьшению в стр.040 Раздела 1 >= 0 в разрезе КБК';
														|en = 'Сумма акциза к уменьшению в стр.040 Раздела 1 >= 0 в разрезе КБК'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0, КБК %2';
													|en = '%1 >= 0, КБК %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма акциза';
														|en = 'Возможно ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"			, "П00001М204000_");
	
	ПроверкаКС_11_1_1_к_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_2_1_к()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.2.1.к';
													|en = '11.2.1.к'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза к уплате в стр.030 Раздела 1 = стр.015 ';
														|en = 'Сумма акциза к уплате в стр.030 Раздела 1 = стр.015 '") +
		НСтр("ru = 'Раздела 2 в разрезе КБК, если Раздел 3 не заполнен';
			|en = 'Раздела 2 в разрезе КБК, если Раздел 3 не заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2, КБК %3';
													|en = '%1 = %2, КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма акциза';
														|en = 'Возможно ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура; 
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	ИменаПоказателей.Вставить("Р01С030", "П00001М203000_");
	ИменаПоказателей.Вставить("Р02С010", "П000020001003");
	ИменаПоказателей.Вставить("Р02С015", "П000020001503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого КБКРаздела1 Из ДанныеКС.КБК_Раздел1 Цикл 
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р01С030.Итог = 0;
		Показатели.Р02С015.Итог = 0;
		КБКРаздела1Стр = "(...)";
			
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл 
				
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р01С020.Значение = КБКРаздела1 Тогда
					КБКРаздела1Стр = Показатели.Р01С020.ЗначениеСтр;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				КонецЕсли;
		
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл 
			ЗаполнитьПоказатель(Показатели.Р02С010, СтраницаРаздела);
			Если Показатели.Р02С010.Значение = КБКРаздела1 Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С015, СтраницаРаздела);
			КонецЕсли;
		КонецЦикла;
				
		Настройки.ЭтоОшибка = НЕ ДанныеКС.РазделЗаполнен_Раздел3 И НЕ Показатели.Р01С030.Итог = Показатели.Р02С015.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р01С030.Итог, Показатели.Р02С015.Итог, КБКРаздела1Стр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_2_2_к()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.2.2.к';
													|en = '11.2.2.к'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза к уплате в стр.030 Раздела 1 = стр.025 ';
														|en = 'Сумма акциза к уплате в стр.030 Раздела 1 = стр.025 '") +
		НСтр("ru = 'Раздела 3 в разрезе КБК, если Раздел 3 заполнен';
			|en = 'Раздела 3 в разрезе КБК, если Раздел 3 заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2, КБК %3';
													|en = '%1 = %2, КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма акциза';
														|en = 'Возможно ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	ИменаПоказателей.Вставить("Р01С030", "П00001М203000_");
	ИменаПоказателей.Вставить("Р03С010", "П000030001003");
	ИменаПоказателей.Вставить("Р03С025", "П000030002503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого КБКРаздела1 Из ДанныеКС.КБК_Раздел1 Цикл 
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р01С030.Итог = 0;
		Показатели.Р03С025.Итог = 0;
		КБКРаздела1Стр = "(...)";
			
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
				
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р01С020.Значение = КБКРаздела1 Тогда
					КБКРаздела1Стр = Показатели.Р01С020.ЗначениеСтр;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				КонецЕсли;
		
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл 
			ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
			Если Показатели.Р03С010.Значение = КБКРаздела1 Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С025, СтраницаРаздела);
			КонецЕсли;
		КонецЦикла;
		
		Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел3 И НЕ Показатели.Р01С030.Итог = Показатели.Р03С025.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р01С030.Итог, Показатели.Р03С025.Итог, КБКРаздела1Стр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_2_3_к()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.2.3.к';
													|en = '11.2.3.к'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза к уменьшению в стр.040 Раздела 1 = стр.020 ';
														|en = 'Сумма акциза к уменьшению в стр.040 Раздела 1 = стр.020 '") +
		НСтр("ru = 'Раздела 3 в разрезе КБК, если Раздел 3 заполнен';
			|en = 'Раздела 3 в разрезе КБК, если Раздел 3 заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2, КБК %3';
													|en = '%1 = %2, КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма акциза';
														|en = 'Возможно ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	ИменаПоказателей.Вставить("Р01С040", "П00001М204000_");
	ИменаПоказателей.Вставить("Р03С010", "П000030001003");
	ИменаПоказателей.Вставить("Р03С020", "П000030002003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого КБКРаздела1 Из ДанныеКС.КБК_Раздел1 Цикл 
		
		ЗарегистрироватьФормулу(Настройки);
		Показатели.Р01С040.Итог = 0;
		Показатели.Р03С020.Итог = 0;
		КБКРаздела1Стр = "(...)";
			
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
				
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р01С020.Значение = КБКРаздела1 Тогда
					КБКРаздела1Стр = Показатели.Р01С020.ЗначениеСтр;
					ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С040, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				КонецЕсли;
		
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл 
			ЗаполнитьПоказатель(Показатели.Р03С010, СтраницаРаздела);
			Если Показатели.Р03С010.Значение = КБКРаздела1 Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С020, СтраницаРаздела);
			КонецЕсли;
		КонецЦикла;
		
		Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел3 И НЕ Показатели.Р01С040.Итог = Показатели.Р03С020.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р01С040.Итог, Показатели.Р03С020.Итог, КБКРаздела1Стр);
		ДополнитьСтруктуруОшибок(Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Проверки_Основные

#Область КС_Проверки_Титульного_листа

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Титульный лист';
														|en = 'Титульный лист'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'п.1 ст.119 НК РФ';
													|en = 'п.1 ст.119 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Дата подписи отчета на Титульном листе <= 15 числа месяца, ';
														|en = 'Дата подписи отчета на Титульном листе <= 15 числа месяца, '") +
		НСтр("ru = 'следующего на налоговым периодом';
			|en = 'следующего на налоговым периодом'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно нарушение срока представления отчета';
														|en = 'Возможно нарушение срока представления отчета'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р00Т002", "ДатаПодписи");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Титульный);
	
	ГодПредставления = ?(ЗначениеЗаполнено(ДанныеКС.ГодОтчета), ДанныеКС.ГодОтчета, 1);
	МесПредставления = ?(ЗначениеЗаполнено(ДанныеКС.МесОтчета), ДанныеКС.МесОтчета, 1);
	ГодПредставления = ?(МесПредставления = 12, ГодПредставления + 1, ГодПредставления);
	МесПредставления = ?(МесПредставления = 12, 1, МесПредставления + 1);
	СрокПредставления = Дата("" + Формат(ГодПредставления, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0") + 
		Формат(МесПредставления, "ЧЦ=2; ЧН=; ЧВН=") + "15");
	СрокПредставленияСтр = Формат(СрокПредставления, "ДФ=dd.MM.yy; ДП=(...)");
	
	Настройки.ЭтоОшибка = Показатели.Р00Т002.Значение > СрокПредставления;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р00Т002.ЗначениеСтр, 
		СрокПредставленияСтр);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_2_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.1';
													|en = '2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение ОКТМО в стр.010 Раздела 1 должно быть заполнено, ';
														|en = 'Значение ОКТМО в стр.010 Раздела 1 должно быть заполнено, '") +
		НСтр("ru = 'если заполнены Раздел 2 или Раздел 3';
			|en = 'если заполнены Раздел 2 или Раздел 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение ОКТМО %1';
													|en = 'Значение ОКТМО %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ОКТМО';
														|en = 'Ошибочное значение ОКТМО'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010", "П00001М101000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1, Счетчик);
		
		Настройки.ЭтоОшибка = (ДанныеКС.РазделЗаполнен_Раздел2 ИЛИ ДанныеКС.РазделЗаполнен_Раздел3) 
			И НЕ ЗначениеЗаполнено(Показатели.Р01С010.Значение);
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.2';
													|en = '2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Реализация отложена';
													|en = 'Реализация отложена'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение ОКТМО в стр.010 Раздела 1 соответствует ';
														|en = 'Значение ОКТМО в стр.010 Раздела 1 соответствует '") +
		НСтр("ru = 'Общероссийскому классификатору территорий муниципальных образований';
			|en = 'Общероссийскому классификатору территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ОКТМО';
														|en = 'Ошибочное значение ОКТМО'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.3';
													|en = '2.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 1 должно быть заполнено, ';
														|en = 'Значение КБК в стр.020 Раздела 1 должно быть заполнено, '") +
		НСтр("ru = 'если заполнены Раздел 2 или Раздел 3';
			|en = 'если заполнены Раздел 2 или Раздел 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение КБК %1';
													|en = 'Значение КБК %1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
		Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1, Счетчик, Счетчик2);
			
			Настройки.ЭтоОшибка = (ДанныеКС.РазделЗаполнен_Раздел2 ИЛИ ДанныеКС.РазделЗаполнен_Раздел3) 
				И НЕ ЗначениеЗаполнено(Показатели.Р01С020.Значение);
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.4';
													|en = '2.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.020 Раздела 1 должно соответствовать ';
														|en = 'Значение КБК в стр.020 Раздела 1 должно соответствовать '") +
		НСтр("ru = 'списку допустимых значений';
			|en = 'списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список = ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р01С020.ИмяПоказателя, 13));
	
	Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
		Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1, Счетчик, Счетчик2);
			СоответствиеНайдено = Ложь;
			
			Если НЕ Список = Неопределено Тогда
				СоответствиеНайдено = НЕ Список.Получить(Показатели.Р01С020.Значение) = Неопределено;
			КонецЕсли;
			
			Настройки.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р01С020.ЗначениеСтр, ?(СоответствиеНайдено, 
				Показатели.Р01С020.ЗначениеСтр, "(...)"));
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_3_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.1';
													|en = '3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение кода подакцизного товара в стр.001 Раздела 2 должно ';
														|en = 'Значение кода подакцизного товара в стр.001 Раздела 2 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода подакцизного товара';
														|en = 'Ошибочное значение кода подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р02С001");
	Настройки.Вставить("ИмяПоказателя"	, "П000020000103");
	Настройки.Вставить("Раздел"			, "Раздел2");
	
	ПроверкаКС_3_01_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_01_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.Показатель, Настройки.ИмяПоказателя);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список = ДанныеКС.СоответствиеСписков.Получить(Показатели[Настройки.Показатель].ИмяПоказателя);
	
	Для каждого СтраницаРаздела Из ДанныеКС[Настройки.Раздел] Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		СоответствиеНайдено = Ложь;
		
		Если НЕ Список = Неопределено Тогда
			СоответствиеНайдено = НЕ Список.Получить(Показатели[Настройки.Показатель].Значение) = Неопределено;
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ Список = Неопределено И НЕ СоответствиеНайдено;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели[Настройки.Показатель].ЗначениеСтр, ?(СоответствиеНайдено, 
			Показатели[Настройки.Показатель].ЗначениеСтр, "(...)"));
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.2';
													|en = '3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 2 = стр.020 Раздела 1';
														|en = 'Значение КБК в стр.010 Раздела 2 = стр.020 Раздела 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010", "П000020001003");
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С010, СтраницаРаздела);
		СоответствиеНайдено = Ложь;
	
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
				
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р02С010.Значение = Показатели.Р01С020.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р01С020);
					СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел2 И НЕ СоответствиеНайдено;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р02С010.ЗначениеСтр, ?(СоответствиеНайдено, 
			Показатели.Р02С010.ЗначениеСтр, "(...)"));
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.3';
													|en = '3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 2 должно соответствовать ';
														|en = 'Значение КБК в стр.010 Раздела 2 должно соответствовать '") +
		НСтр("ru = 'списку допустимых значений';
			|en = 'списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р02С010");
	Настройки.Вставить("ИмяПоказателя"	, "П000020001003");
	Настройки.Вставить("Раздел"			, "Раздел2");
	
	ПроверкаКС_3_01_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.4';
													|en = '3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.015 Раздела 2 = сумме всех стр.020 ';
														|en = 'Сумма акциза в стр.015 Раздела 2 = сумме всех стр.020 '") +
		НСтр("ru = 'подр.2.1 Раздела 2';
			|en = 'подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С015", "П000020001503");
	ИменаПоказателей.Вставить("Р21С020", "П000210002003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С015, СтраницаРаздела);
		Показатели.Р21С020.Итог = 0;
		
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С020, СтраницаПодраздела);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р02С015.Значение = Показатели.Р21С020.Итог;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р02С015.Значение, Показатели.Р21С020.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.5';
													|en = '3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.194 НК РФ';
													|en = 'ст.194 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.020 подр.2.1 Раздела 2 ';
														|en = 'Сумма акциза в стр.020 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= стр.090 х стр.050 подр.2.1 Раздела 2';
			|en = '= стр.090 х стр.050 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4]';
													|en = '%1 = %2 х %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С020", "П000210002003");
	ИменаПоказателей.Вставить("Р21С090", "П000210009003");
	ИменаПоказателей.Вставить("Р21С050", "П000210005003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Окр(Показатели.Р21С090.Значение * Показатели.Р21С050.Значение);
			Настройки.ЭтоОшибка = НЕ Показатели.Р21С020.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р21С020.Значение, Показатели.Р21С090.Значение, Показатели.Р21С050.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.6';
													|en = '3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Номер договора в стр.030 подр.2.1 Раздела 2 ';
														|en = 'Номер договора в стр.030 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= должен быть заполнен, если стр.025 подр.2.1 Раздела 2 = 1';
			|en = '= должен быть заполнен, если стр.025 подр.2.1 Раздела 2 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено, когда %2 = 1';
													|en = 'Значение %1 заполнено, когда %2 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан номер договора';
														|en = 'Не указан номер договора'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С030", "П000210003003");
	ИменаПоказателей.Вставить("Р21С025", "П000210002503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = Показатели.Р21С025.Значение = 1 И НЕ ЗначениеЗаполнено(Показатели.Р21С030.Значение);
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р21С030.ЗначениеСтр, Показатели.Р21С025.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_07()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.7';
													|en = '3.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = ((стр.060 подр.2.1 ';
														|en = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = ((стр.060 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х 7,3 - 182,5) х 0,3 + 29,2) х стр.070 х стр.080 х стр.140 х стр.150 подр.2.1 Раздела 2, ';
			|en = 'Раздела 2 х 7,3 - 182,5) х 0,3 + 29,2) х стр.070 х стр.080 х стр.140 х стр.150 подр.2.1 Раздела 2, '") +
		НСтр("ru = 'если стр.060 подр.2.1 Раздела 2 > 25, стр.160 подр.2.1 Раздела 2 = 0, стр.170 подр.2.1 Раздела 2 = 0 ';
			|en = 'если стр.060 подр.2.1 Раздела 2 > 25, стр.160 подр.2.1 Раздела 2 = 0, стр.170 подр.2.1 Раздела 2 = 0 '") +
		НСтр("ru = 'и ((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 ';
			|en = 'и ((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 ';
			|en = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 '") +
		НСтр("ru = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 ';
			|en = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 >= 0,75';
			|en = 'подр.2.1 Раздела 2 >= 0,75'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %4 Итог [%5], когда %6 > 25, %7 = 0, %8 = 0, %2 Итог [%3] >= 0,75';
			|en = '%1 = %4 Итог [%5], когда %6 > 25, %7 = 0, %8 = 0, %2 Итог [%3] >= 0,75'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка акциза';
														|en = 'Ошибочная ставка акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.8';
													|en = '3.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = 20 х стр.070 х стр.140 подр.2.1 Раздела 2, если ';
			|en = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = 20 х стр.070 х стр.140 подр.2.1 Раздела 2, если '") +
		НСтр("ru = 'стр.060 подр.2.1 Раздела 2 <= 25, стр.160 подр.2.1 Раздела 2 = 0, стр.170 подр.2.1 Раздела 2 = 0 ';
			|en = 'стр.060 подр.2.1 Раздела 2 <= 25, стр.160 подр.2.1 Раздела 2 = 0, стр.170 подр.2.1 Раздела 2 = 0 '") +
		НСтр("ru = 'и ((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 ';
			|en = 'и ((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 ';
			|en = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 '") +
		НСтр("ru = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 ';
			|en = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 >= 0,75';
			|en = 'подр.2.1 Раздела 2 >= 0,75'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = %4 Итог [%5], когда %6 <= 25, %7 = 0, %8 = 0, %2 Итог [%3] >= 0,75';
			|en = '%1 = %4 Итог [%5], когда %6 <= 25, %7 = 0, %8 = 0, %2 Итог [%3] >= 0,75'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка акциза';
														|en = 'Ошибочная ставка акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_09()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.9';
													|en = '3.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = 0, если ';
														|en = 'Ставка акциза в стр.050 подр.2.1 Раздела 2 = 0, если '") +
		НСтр("ru = '((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 ';
			|en = '((стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) + (стр.110 + стр.115 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 ';
			|en = 'подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) + (стр.120 + стр.125 - стр.210 подр.2.1.1 '") +
		НСтр("ru = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 ';
			|en = 'Раздела 2) + (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 подр.2.1.1 Раздела 2)) / стр.090 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 < 0,75';
			|en = 'подр.2.1 Раздела 2 < 0,75'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = 0, когда %2 Итог [%3] < 0,75';
			|en = '%1 = 0, когда %2 Итог [%3] < 0,75'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная ставка акциза';
														|en = 'Ошибочная ставка акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_3_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_09_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С050", "П000210005003");
	ИменаПоказателей.Вставить("Р21С060", "П000210006003");
	ИменаПоказателей.Вставить("Р21С070", "П000210007003");
	ИменаПоказателей.Вставить("Р21С080", "П000210008003");
	ИменаПоказателей.Вставить("Р21С140", "П000210014003");
	ИменаПоказателей.Вставить("Р21С150", "П000210015003");
	ИменаПоказателей.Вставить("Р21С160", "П000210016003");
	ИменаПоказателей.Вставить("Р21С170", "П000210017003");
	ИменаПоказателей.Вставить("Р21С100", "П000210010003");
	ИменаПоказателей.Вставить("Р21С105", "П000210010503");
	ИменаПоказателей.Вставить("Р21С110", "П000210011003");
	ИменаПоказателей.Вставить("Р21С115", "П000210011503");
	ИменаПоказателей.Вставить("Р21С120", "П000210012003");
	ИменаПоказателей.Вставить("Р21С125", "П000210012503");
	ИменаПоказателей.Вставить("Р21С130", "П000210013003");
	ИменаПоказателей.Вставить("Р21С135", "П000210013503");
	ИменаПоказателей.Вставить("Р21С090", "П000210009003");
	ИменаПоказателей.Вставить("Р21С190", "П00021М119003_");
	ИменаПоказателей.Вставить("Р21С200", "П00021М120003_");
	ИменаПоказателей.Вставить("Р21С210", "П00021М121003_");
	ИменаПоказателей.Вставить("Р21С220", "П00021М122003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р21С060.Расшифровывать = НЕ Настройки.НомерКС = "3.9";
	Показатели.Р21С070.Расшифровывать = НЕ Настройки.НомерКС = "3.9";
	Показатели.Р21С080.Расшифровывать = Настройки.НомерКС = "3.7";
	Показатели.Р21С140.Расшифровывать = НЕ Настройки.НомерКС = "3.9";
	Показатели.Р21С150.Расшифровывать = Настройки.НомерКС = "3.7";
	Показатели.Р21С160.Расшифровывать = НЕ Настройки.НомерКС = "3.9";
	Показатели.Р21С170.Расшифровывать = НЕ Настройки.НомерКС = "3.9";
	
	ШаблонРасшифровки1 = "(%1 + %2 - %3)";
	ШаблонРасшифровки2 = "(%1 + %2 + %3 + %4) / %5";
	ШаблонРасшифровки3 = "((%1 х 7,3 - 182,5) х 0,3 + 29,2) х %2 х %3 х %4 х %5";
	ШаблонРасшифровки4 = "20 х %1 х %2";	
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С050, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С060, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С070, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С080, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С140, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С150, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С160, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С170, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С100, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С105, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С110, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С115, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С120, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С125, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С130, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С135, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С090, СтраницаПодраздела);
			
			Показатели.Р21С190.Итог = 0;
			Показатели.Р21С200.Итог = 0;
			Показатели.Р21С210.Итог = 0;
			Показатели.Р21С220.Итог = 0;
			
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП00021М1 Цикл
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С190, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С200, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С210, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С220, СтраницаПодраздела, Счетчик);
			
			КонецЦикла;
			
			Расшифровка21 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки1,
				Показатели.Р21С100.Значение, Показатели.Р21С105.Значение, Показатели.Р21С190.Итог);
			Расшифровка22 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки1,
				Показатели.Р21С110.Значение, Показатели.Р21С115.Значение, Показатели.Р21С200.Итог);
			Расшифровка23 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки1,
				Показатели.Р21С120.Значение, Показатели.Р21С125.Значение, Показатели.Р21С210.Итог);
			Расшифровка24 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки1,
				Показатели.Р21С130.Значение, Показатели.Р21С135.Значение, Показатели.Р21С220.Итог);
			Расшифровка2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки2,
				Расшифровка21, Расшифровка22, Расшифровка23, Расшифровка24, Показатели.Р21С090.Значение);
			Расшифровка47 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки3,
				Показатели.Р21С060.Значение, Показатели.Р21С070.Значение, Показатели.Р21С080.Значение, 
				Показатели.Р21С140.Значение, Показатели.Р21С150.Значение);
			Расшифровка48 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки4,
				Показатели.Р21С070.Значение, Показатели.Р21С140.Значение);
				
			РасчетнаяСумма3 = ?(Показатели.Р21С090.Значение = 0, 0, Окр((Показатели.Р21С100.Значение 
				+ Показатели.Р21С110.Значение + Показатели.Р21С120.Значение + Показатели.Р21С130.Значение 
				+ Показатели.Р21С105.Значение + Показатели.Р21С115.Значение + Показатели.Р21С125.Значение 
				+ Показатели.Р21С135.Значение - Показатели.Р21С190.Итог - Показатели.Р21С200.Итог - Показатели.Р21С210.Итог 
				- Показатели.Р21С220.Итог) / Показатели.Р21С090.Значение, 2));
			РасчетнаяСумма57 = Окр(((Показатели.Р21С060.Значение * 7.3 - 182.5) * 0.3 + 29.2) * Показатели.Р21С070.Значение 
				* Показатели.Р21С080.Значение * Показатели.Р21С140.Значение * Показатели.Р21С150.Значение);
			РасчетнаяСумма58 = Окр(20 * Показатели.Р21С070.Значение * Показатели.Р21С140.Значение);
			
			Если Настройки.НомерКС = "3.7" Тогда
				Настройки.ЭтоОшибка = Показатели.Р21С060.Значение > 25 И Показатели.Р21С160.Значение = 0 
					И Показатели.Р21С170.Значение = 0 И РасчетнаяСумма3 >= 0.75 И НЕ Показатели.Р21С050.Значение = РасчетнаяСумма57;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
					Показатели.Р21С050.Значение, Расшифровка2, РасчетнаяСумма3, Расшифровка47, РасчетнаяСумма57, 
					Показатели.Р21С060.Значение, Показатели.Р21С160.Значение, Показатели.Р21С170.Значение);
			
			ИначеЕсли Настройки.НомерКС = "3.8" Тогда
				Настройки.ЭтоОшибка = Показатели.Р21С060.Значение <= 25 И Показатели.Р21С160.Значение = 0 
					И Показатели.Р21С170.Значение = 0 И РасчетнаяСумма3 >= 0.75 И НЕ Показатели.Р21С050.Значение = РасчетнаяСумма58;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
					Показатели.Р21С050.Значение, Расшифровка2, РасчетнаяСумма3, Расшифровка48, РасчетнаяСумма58, 
					Показатели.Р21С060.Значение, Показатели.Р21С160.Значение, Показатели.Р21С170.Значение);
			
			ИначеЕсли Настройки.НомерКС = "3.9" Тогда
				Настройки.ЭтоОшибка = РасчетнаяСумма3 < 0.75 И НЕ Показатели.Р21С050.Значение = 0;
				Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
					Показатели.Р21С050.Значение, Расшифровка2, РасчетнаяСумма3);
				
			КонецЕсли;
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.10';
													|en = '3.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Средний уровень цен в стр.060 подр.2.1 Раздела 2 ';
														|en = 'Средний уровень цен в стр.060 подр.2.1 Раздела 2 '") +
		НСтр("ru = 'должен быть заполнен';
			|en = 'должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указан средний уровень цен';
														|en = 'Не указан средний уровень цен'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р21С060");
	Настройки.Вставить("ИмяПоказателя"	, "П000210006003");
	
	ПроверкаКС_3_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.11';
													|en = '3.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Среднее значение курса в стр.070 подр.2.1 Раздела 2 ';
														|en = 'Среднее значение курса в стр.070 подр.2.1 Раздела 2 '") +
		НСтр("ru = 'должено быть заполнено';
			|en = 'должено быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = 'Значение %1 заполнено';
													|en = 'Значение %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не указано среднее значение курса';
														|en = 'Не указано среднее значение курса'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р21С070");
	Настройки.Вставить("ИмяПоказателя"	, "П000210007003");
	
	ПроверкаКС_3_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_11_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.Показатель, Настройки.ИмяПоказателя);
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел2 
				И НЕ ЗначениеЗаполнено(Показатели[Настройки.Показатель].Значение);
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели[Настройки.Показатель].Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.12';
													|en = '3.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Коэффициент Спю в стр.080 подр.2.1 Раздела 2 = (стр.090 ';
														|en = 'Коэффициент Спю в стр.080 подр.2.1 Раздела 2 = (стр.090 '") +
		НСтр("ru = 'подр.2.1 Раздела 2 - 0,55 х (стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) ';
			|en = 'подр.2.1 Раздела 2 - 0,55 х (стр.100 + стр.105 подр.2.1 Раздела 2 - стр.190 подр.2.1.1 Раздела 2) '") +
		НСтр("ru = '- 0,3 х (стр.110 + стр.115 подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) - 0,065 х (стр.120 ';
			|en = '- 0,3 х (стр.110 + стр.115 подр.2.1 Раздела 2 - стр.200 подр.2.1.1 Раздела 2) - 0,065 х (стр.120 '") +
		НСтр("ru = '+ стр.125 - стр.210 подр.2.1.1 Раздела 2) - (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 ';
			|en = '+ стр.125 - стр.210 подр.2.1.1 Раздела 2) - (стр.130 + стр.135 подр.2.1 Раздела 2 - стр.220 '") +
		НСтр("ru = 'подр.2.1.1 Раздела 2)) / стр.090 подр.2.1 Раздела 2';
			|en = 'подр.2.1.1 Раздела 2)) / стр.090 подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, 
		НСтр("ru = '%1 = (%2 - 0,55 х %3 - 0,3 х %4 - 0,065 х %5 - %6) / %2 Итог [%7]';
			|en = '%1 = (%2 - 0,55 х %3 - 0,3 х %4 - 0,065 х %5 - %6) / %2 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Спю';
														|en = 'Ошибочное значение коэффициента Спю'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С080", "П000210008003");
	ИменаПоказателей.Вставить("Р21С090", "П000210009003");
	ИменаПоказателей.Вставить("Р21С100", "П000210010003");
	ИменаПоказателей.Вставить("Р21С105", "П000210010503");
	ИменаПоказателей.Вставить("Р21С110", "П000210011003");
	ИменаПоказателей.Вставить("Р21С115", "П000210011503");
	ИменаПоказателей.Вставить("Р21С120", "П000210012003");
	ИменаПоказателей.Вставить("Р21С125", "П000210012503");
	ИменаПоказателей.Вставить("Р21С130", "П000210013003");
	ИменаПоказателей.Вставить("Р21С135", "П000210013503");
	ИменаПоказателей.Вставить("Р21С190", "П00021М119003_");
	ИменаПоказателей.Вставить("Р21С200", "П00021М120003_");
	ИменаПоказателей.Вставить("Р21С210", "П00021М121003_");
	ИменаПоказателей.Вставить("Р21С220", "П00021М122003_");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ШаблонРасшифровки = "(%1 + %2 - %3)";
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С080, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С090, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С100, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С105, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С110, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С115, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С120, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С125, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С130, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С135, СтраницаПодраздела);
			
			Показатели.Р21С190.Итог = 0;
			Показатели.Р21С200.Итог = 0;
			Показатели.Р21С210.Итог = 0;
			Показатели.Р21С220.Итог = 0;
			
			Для Счетчик = 1 По СтраницаПодраздела.КолвоСтрокП00021М1 Цикл
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С190, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С200, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С210, СтраницаПодраздела, Счетчик);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С220, СтраницаПодраздела, Счетчик);
			
			КонецЦикла;
			
			Расшифровка1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки,
				Показатели.Р21С100.Значение, Показатели.Р21С105.Значение, Показатели.Р21С190.Итог);
			Расшифровка2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки,
				Показатели.Р21С110.Значение, Показатели.Р21С115.Значение, Показатели.Р21С200.Итог);
			Расшифровка3 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки,
				Показатели.Р21С120.Значение, Показатели.Р21С125.Значение, Показатели.Р21С210.Итог);
			Расшифровка4 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки,
				Показатели.Р21С130.Значение, Показатели.Р21С135.Значение, Показатели.Р21С220.Итог);
				
			РасчетнаяСумма = ?(Показатели.Р21С090.Значение = 0, 0, Окр((Показатели.Р21С090.Значение 
				- 0.55 * (Показатели.Р21С100.Значение + Показатели.Р21С105.Значение - Показатели.Р21С190.Итог) 
				- 0.30 * (Показатели.Р21С110.Значение + Показатели.Р21С115.Значение - Показатели.Р21С200.Итог) 
				- 0.065 * (Показатели.Р21С120.Значение + Показатели.Р21С125.Значение - Показатели.Р21С210.Итог) 
				- (Показатели.Р21С130.Значение + Показатели.Р21С135.Значение - Показатели.Р21С220.Итог)) 
				/ Показатели.Р21С090.Значение, 4));
			
			Настройки.ЭтоОшибка = НЕ Показатели.Р21С080.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р21С080.Значение, Показатели.Р21С090.Значение, Расшифровка1, Расшифровка2, Расшифровка3, 
				Расшифровка4,  РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_13()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.13';
													|en = '3.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Крег в стр.150 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Крег в стр.150 подр.2.1 Раздела 2 '") +
		НСтр("ru = 'должно соответствовать списку допустимых значений';
			|en = 'должно соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Крег';
														|en = 'Ошибочное значение коэффициента Крег'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С150", "П000210015003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	МассивЗначений = РазложитьСтрокуВМассив("0,1,1.05,1.1,1.3,1.4,1.5", ",", Истина);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = МассивЗначений.Найти(Показатели.Р21С150.Значение) = Неопределено;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р21С150.Значение, ?(НЕ Настройки.ЭтоОшибка, 
				Показатели.Р21С150.Значение, "(...)"));
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.14';
													|en = '3.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 0,167, если отчетный год на Титульном листе = 2019';
			|en = '= 0,167, если отчетный год на Титульном листе = 2019'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,167, когда %2 = 2019';
													|en = '%1 = 0,167, когда %2 = 2019'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2019");
	Настройки.Вставить("ЗначениеКкорр"	, 0.167);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.15';
													|en = '3.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 0,333, если отчетный год на Титульном листе = 2020';
			|en = '= 0,333, если отчетный год на Титульном листе = 2020'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,333, когда %2 = 2020';
													|en = '%1 = 0,333, когда %2 = 2020'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2020");
	Настройки.Вставить("ЗначениеКкорр"	, 0.333);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.16';
													|en = '3.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 0,500, если отчетный год на Титульном листе = 2021';
			|en = '= 0,500, если отчетный год на Титульном листе = 2021'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,500, когда %2 = 2021';
													|en = '%1 = 0,500, когда %2 = 2021'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2021");
	Настройки.Вставить("ЗначениеКкорр"	, 0.500);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.17';
													|en = '3.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 0,667, если отчетный год на Титульном листе = 2022';
			|en = '= 0,667, если отчетный год на Титульном листе = 2022'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,667, когда %2 = 2022';
													|en = '%1 = 0,667, когда %2 = 2022'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2022");
	Настройки.Вставить("ЗначениеКкорр"	, 0.667);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_18()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.18';
													|en = '3.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 0,833, если отчетный год на Титульном листе = 2023';
			|en = '= 0,833, если отчетный год на Титульном листе = 2023'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,833, когда %2 = 2023';
													|en = '%1 = 0,833, когда %2 = 2023'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2023");
	Настройки.Вставить("ЗначениеКкорр"	, 0.833);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.19';
													|en = '3.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.193 НК РФ';
													|en = 'ст.193 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 ';
														|en = 'Значение коэффициента Ккорр в стр.140 подр.2.1 Раздела 2 '") +
		НСтр("ru = '= 1, если отчетный год на Титульном листе >= 2024';
			|en = '= 1, если отчетный год на Титульном листе >= 2024'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 1, когда %2 >= 2024';
													|en = '%1 = 1, когда %2 >= 2024'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Ккорр';
														|en = 'Ошибочное значение коэффициента Ккорр'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ОтчетныйГод"	, "2024");
	Настройки.Вставить("ЗначениеКкорр"	, 1);
	
	ПроверкаКС_3_19_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_19_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21С140", "П000210014003");
	ИменаПоказателей.Вставить("Р00Т001", "ОтчетГод");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел21 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21С140, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р00Т001, ДанныеКС.Титульный);
			
			Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел2 И ?(Настройки.НомерКС = "3.19", 
				Показатели.Р00Т001.Значение >= Настройки.ОтчетныйГод, Показатели.Р00Т001.Значение = Настройки.ОтчетныйГод) 
				И НЕ Показатели.Р21С140.Значение = Настройки.ЗначениеКкорр;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р21С140.Значение, Показатели.Р00Т001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_4_01()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.1';
													|en = '4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение кода подакцизного товара в стр.001 Раздела 3 должно ';
														|en = 'Значение кода подакцизного товара в стр.001 Раздела 3 должно '") +
		НСтр("ru = 'соответствовать списку допустимых значений';
			|en = 'соответствовать списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение кода подакцизного товара';
														|en = 'Ошибочное значение кода подакцизного товара'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р03С001");
	Настройки.Вставить("ИмяПоказателя"	, "П000030000103");
	Настройки.Вставить("Раздел"			, "Раздел3");
	
	ПроверкаКС_3_01_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_02()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.2';
													|en = '4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 3 = стр.020 Раздела 1 ';
														|en = 'Значение КБК в стр.010 Раздела 3 = стр.020 Раздела 1 '") +
		НСтр("ru = '= стр.010 Раздела 2';
			|en = '= стр.010 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 = %3';
													|en = '%1 = %2 = %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С010", "П000030001003");
	ИменаПоказателей.Вставить("Р01С020", "П00001М202000_");
	ИменаПоказателей.Вставить("Р02С010", "П000020001003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С010, СтраницаРаздела);
		Раздел1СоответствиеНайдено = Ложь;
		Раздел2СоответствиеНайдено = Ложь;
	
		Для Счетчик = 1 По ДанныеКС.Раздел1.КолвоСтрокП00001М1 Цикл
			Для Счетчик2 = 1 По ДанныеКС.Раздел1["КолвоСтрокП00001М2_" + Счетчик] Цикл
				
				ЗаполнитьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, Счетчик, Счетчик2);
				Если Показатели.Р03С010.Значение = Показатели.Р01С020.Значение Тогда
					РасшифроватьПоказатель(Показатели.Р01С020);
					Раздел1СоответствиеНайдено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтраницаРаздела2 Из ДанныеКС.Раздел2 Цикл
			ЗаполнитьПоказатель(Показатели.Р02С010, СтраницаРаздела2);
			Если Показатели.Р03С010.Значение = Показатели.Р02С010.Значение Тогда
				РасшифроватьПоказатель(Показатели.Р02С010);
				Раздел2СоответствиеНайдено = Истина;
			КонецЕсли;
		КонецЦикла;
	
		Настройки.ЭтоОшибка = ДанныеКС.РазделЗаполнен_Раздел3 И НЕ (Раздел1СоответствиеНайдено И Раздел2СоответствиеНайдено);
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р03С010.ЗначениеСтр, ?(Раздел1СоответствиеНайдено, Показатели.Р03С010.ЗначениеСтр, "(...)"),
			?(Раздел2СоответствиеНайдено, Показатели.Р03С010.ЗначениеСтр, "(...)"));
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.3';
													|en = '4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.80 НК РФ';
													|en = 'ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Значение КБК в стр.010 Раздела 3 должно соответствовать ';
														|en = 'Значение КБК в стр.010 Раздела 3 должно соответствовать '") +
		НСтр("ru = 'списку допустимых значений';
			|en = 'списку допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение КБК';
														|en = 'Ошибочное значение КБК'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("Показатель"		, "Р03С010");
	Настройки.Вставить("ИмяПоказателя"	, "П000030001003");
	Настройки.Вставить("Раздел"			, "Раздел3");
	
	ПроверкаКС_3_01_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.4';
													|en = '4.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.040 подр.3.1 Раздела 3 = стр.015 Раздела 2, ';
														|en = 'Сумма акциза в стр.040 подр.3.1 Раздела 3 = стр.015 Раздела 2, '") +
		НСтр("ru = 'если стр.060 подр.3.1 Раздела 3 > 0 и стр.030 подр.3.1 Раздела 3 соответствует налоговому периоду, ';
			|en = 'если стр.060 подр.3.1 Раздела 3 > 0 и стр.030 подр.3.1 Раздела 3 соответствует налоговому периоду, '") +
		НСтр("ru = 'указанному на Титульном листе';
			|en = 'указанному на Титульном листе'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	ИменаПоказателей.Вставить("Р02С015", "П000020001503");
	ИменаПоказателей.Вставить("Р31С031", "П000310003003");
	ИменаПоказателей.Вставить("Р31С032", "П000310003004");
	ИменаПоказателей.Вставить("Р31С060", "П000310006003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С040, СтраницаПодраздела);
			Показатели.Р02С015.Итог = 0;
		
			Для каждого СтраницаРаздела2 Из ДанныеКС.Раздел2 Цикл
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С015, СтраницаРаздела2);
			КонецЦикла;
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С031, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С032, СтраницаПодраздела);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С060, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = Показатели.Р31С060.Значение > 0 И Показатели.Р31С031.Значение = ДанныеКС.МесОтчетаСтр
				И Показатели.Р31С032.Значение = ДанныеКС.ГодОтчетаСтр И НЕ Показатели.Р31С040.Значение = Показатели.Р02С015.Итог;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С040.Значение, Показатели.Р02С015.Итог);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.5';
													|en = '4.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.050 подр.3.1 Раздела 3 = стр.040 ';
														|en = 'Сумма акциза в стр.050 подр.3.1 Раздела 3 = стр.040 '") +
		НСтр("ru = 'подр.3.1 Раздела 3';
			|en = 'подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = НЕ Показатели.Р31С050.Значение = Показатели.Р31С040.Значение;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С050.Значение, Показатели.Р31С040.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_06()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.6';
													|en = '4.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.050 ';
														|en = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.050 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 х 2';
			|en = 'подр.3.1 Раздела 3 х 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х 2 Итог [%3]';
													|en = '%1 = %2 х 2 Итог [%3]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С060", "П000310006003");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Показатели.Р31С050.Значение * 2;
			Настройки.ЭтоОшибка = НЕ Показатели.Р31С060.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С060.Значение, Показатели.Р31С050.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.7';
													|en = '4.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Признак величины Кдемп в стр.040 подр.3.1 Раздела 3 = 0, ';
														|en = 'Признак величины Кдемп в стр.040 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.045 подр.3.1 Раздела 3 = 0';
			|en = 'если стр.045 подр.3.1 Раздела 3 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0 когда %2 = 0';
													|en = '%1 = 0 когда %2 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака величины Кдемп';
														|en = 'Ошибочное значение признака величины Кдемп'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р31С045.Значение = 0 И НЕ Показатели.Р31С040.Значение = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С040.Значение, Показатели.Р31С045.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_08()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.8';
													|en = '4.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.030 подр.3.1 Раздела 3 <> 0, ';
														|en = 'Сумма акциза в стр.030 подр.3.1 Раздела 3 <> 0, '") +
		НСтр("ru = 'если стр.045 подр.3.1 Раздела 3 <> 0';
			|en = 'если стр.045 подр.3.1 Раздела 3 <> 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <> 0 когда %2 <> 0';
													|en = '%1 <> 0 когда %2 <> 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С030", "П000310003003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р31С045.Значение = 0 И Показатели.Р31С030.Значение = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С030.Значение, Показатели.Р31С045.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_09()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.9';
													|en = '4.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.030 ';
														|en = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.030 '") +
		НСтр("ru = '+ стр.045 + стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 1';
			|en = '+ стр.045 + стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5], когда %6 = 1';
													|en = '%1 = %2 + %3 + %4 Итог [%5], когда %6 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С060", "П000310006003");
	ИменаПоказателей.Вставить("Р31С030", "П000310003003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Макс(0, Показатели.Р31С030.Значение + Показатели.Р31С045.Значение + Показатели.Р31С050.Значение);
		Настройки.ЭтоОшибка = Показатели.Р31С040.Значение = 1 И НЕ Показатели.Р31С060.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С060.Значение, Показатели.Р31С030.Значение, Показатели.Р31С045.Значение, Показатели.Р31С050.Значение, 
			РасчетнаяСумма, Показатели.Р31С040.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_10()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.10';
													|en = '4.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.080 подр.3.1 Раздела 3 = стр.060 ';
														|en = 'Сумма акциза в стр.080 подр.3.1 Раздела 3 = стр.060 '") +
		НСтр("ru = 'подр.3.1 Раздела 3, если стр.070 подр.3.1 Раздела 3 = 0';
			|en = 'подр.3.1 Раздела 3, если стр.070 подр.3.1 Раздела 3 = 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2, когда %3 = 0';
													|en = '%1 = %2, когда %3 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С080", "П000310008003");
	ИменаПоказателей.Вставить("Р31С060", "П000310006003");
	ИменаПоказателей.Вставить("Р31С070", "П000310007003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = Показатели.Р31С070.Значение = 0 
				И НЕ Показатели.Р31С080.Значение = Показатели.Р31С060.Значение;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С080.Значение, Показатели.Р31С060.Значение, Показатели.Р31С070.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_11()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.11';
													|en = '4.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Объем бензина (дизтоплива) в стр.130 подр.3.1.1 Раздела 3 или ';
														|en = 'Объем бензина (дизтоплива) в стр.130 подр.3.1.1 Раздела 3 или '") +
		НСтр("ru = 'стр.240 подр.3.1.2 Раздела 3 <> 0, если стр.045 подр.3.1 Раздела 3 <> 0';
			|en = 'стр.240 подр.3.1.2 Раздела 3 <> 0, если стр.045 подр.3.1 Раздела 3 <> 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <> 0 или %2 <> 0, когда %3 <> 0';
													|en = '%1 <> 0 или %2 <> 0, когда %3 <> 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочный объем бензина (дизтоплива)';
														|en = 'Ошибочный объем бензина (дизтоплива)'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С130", "П000310013003");
	ИменаПоказателей.Вставить("Р33С240", "П000310024003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р31С045.Значение = 0 
			И Показатели.Р32С130.Значение = 0 И Показатели.Р33С240.Значение = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р32С130.Значение, Показатели.Р33С240.Значение, Показатели.Р31С045.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_12()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.12';
													|en = '4.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.070 подр.3.1 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.070 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.060 подр.3.1 Раздела 3 > 0';
			|en = 'если стр.060 подр.3.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310007003");
	ИменаПоказателей.Вставить("Р31С002", "П000310006003");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_13_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.13';
													|en = '4.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.070 подр.3.1 Раздела 3 > 0';
			|en = 'если стр.070 подр.3.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310006003");
	ИменаПоказателей.Вставить("Р31С002", "П000310007003");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_13_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_13_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р31С002.Значение > 0 И НЕ Показатели.Р31С001.Значение = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С001.Значение, Показатели.Р31С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_14()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.14';
													|en = '4.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.030 ';
														|en = 'Сумма акциза в стр.060 подр.3.1 Раздела 3 = стр.030 '") +
		НСтр("ru = '- стр.045 + стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 0 и результат ';
			|en = '- стр.045 + стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 0 и результат '") +
		НСтр("ru = 'вычисления >= 0';
			|en = 'вычисления >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 + %4 Итог [%5], когда %5 >= 0 и %6 = 0';
													|en = '%1 = %2 - %3 + %4 Итог [%5], когда %5 >= 0 и %6 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С060", "П000310006003");
	ИменаПоказателей.Вставить("Р31С030", "П000310003003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			РасчетнаяСумма = Показатели.Р31С030.Значение + Показатели.Р31С045.Значение + Показатели.Р31С050.Значение;
			УсловиеВыполнено = Показатели.Р31С040.Значение = 0 И РасчетнаяСумма >= 0;
			МодульС045 = ?(Показатели.Р31С045.Значение >= 0, Показатели.Р31С045.Значение, -Показатели.Р31С045.Значение);
			Настройки.ЭтоОшибка = УсловиеВыполнено И НЕ Показатели.Р31С060.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С060.Значение, Показатели.Р31С030.Значение, МодульС045, 
				Показатели.Р31С050.Значение, РасчетнаяСумма, Показатели.Р31С040.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_15()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.15';
													|en = '4.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.070 подр.3.1 Раздела 3 = -1 х стр.045 ';
														|en = 'Сумма акциза в стр.070 подр.3.1 Раздела 3 = -1 х стр.045 '") +
		НСтр("ru = '- стр.030 - стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 0 и результат ';
			|en = '- стр.030 - стр.050 подр.3.1 Раздела 3, если стр.040 подр.3.1 Раздела 3 = 0 и результат '") +
		НСтр("ru = 'вычисления > 0';
			|en = 'вычисления > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = -1 х %2 - %3 - %4 Итог [%5], когда %5 > 0 и %6 = 0';
													|en = '%1 = -1 х %2 - %3 - %4 Итог [%5], когда %5 > 0 и %6 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С070", "П000310007003");
	ИменаПоказателей.Вставить("Р31С045", "П000310004503");
	ИменаПоказателей.Вставить("Р31С030", "П000310003003");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С040", "П000310004003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
			РасчетнаяСумма = -1 * Показатели.Р31С045.Значение - Показатели.Р31С030.Значение - Показатели.Р31С050.Значение;
			УсловиеВыполнено = РасчетнаяСумма > 0;
			Настройки.ЭтоОшибка = Показатели.Р31С040.Значение = 0 И УсловиеВыполнено 
				И НЕ Показатели.Р31С070.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С070.Значение, Показатели.Р31С045.Значение, Показатели.Р31С030.Значение, 
				Показатели.Р31С050.Значение, РасчетнаяСумма, Показатели.Р31С040.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_16()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.16';
													|en = '4.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.100 подр.3.1 Раздела 3 = стр.080 ';
														|en = 'Сумма акциза в стр.100 подр.3.1 Раздела 3 = стр.080 '") +
		НСтр("ru = '- стр.050 подр.3.1 Раздела 3, если 0 < стр.050 < стр.080 подр.3.1 Раздела 3';
			|en = '- стр.050 подр.3.1 Раздела 3, если 0 < стр.050 < стр.080 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда 0 < %3 <= %2';
													|en = '%1 = %2 - %3 Итог [%4], когда 0 < %3 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С100", "П000310010003");
	ИменаПоказателей.Вставить("Р31С080", "П000310008003");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Показатели.Р31С080.Значение - Показатели.Р31С050.Значение;
			Настройки.ЭтоОшибка = Показатели.Р31С050.Значение > 0 
				И Показатели.Р31С050.Значение < Показатели.Р31С080.Значение И НЕ Показатели.Р31С100.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С100.Значение, Показатели.Р31С080.Значение, Показатели.Р31С050.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_17()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.17';
													|en = '4.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = стр.050 ';
														|en = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = стр.050 '") +
		НСтр("ru = '- стр.080 подр.3.1 Раздела 3, если стр.050 > стр.080 > 0 подр.3.1 Раздела 3';
			|en = '- стр.080 подр.3.1 Раздела 3, если стр.050 > стр.080 > 0 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %2 > %3 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %2 > %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С110", "П000310011003");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С080", "П000310008003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Показатели.Р31С050.Значение - Показатели.Р31С080.Значение;
			Настройки.ЭтоОшибка = Показатели.Р31С080.Значение > 0 И Показатели.Р31С050.Значение > Показатели.Р31С080.Значение 
				И НЕ Показатели.Р31С110.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С110.Значение, Показатели.Р31С050.Значение, Показатели.Р31С080.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.18';
													|en = '4.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = стр.050 ';
														|en = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = стр.050 '") +
		НСтр("ru = '+ стр.090 подр.3.1 Раздела 3, если стр.090 > 0';
			|en = '+ стр.090 подр.3.1 Раздела 3, если стр.090 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4], когда %3 > 0';
													|en = '%1 = %2 + %3 Итог [%4], когда %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С110", "П000310011003");
	ИменаПоказателей.Вставить("Р31С050", "П000310005003");
	ИменаПоказателей.Вставить("Р31С090", "П000310009003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			РасчетнаяСумма = Показатели.Р31С050.Значение + Показатели.Р31С090.Значение;
			Настройки.ЭтоОшибка = Показатели.Р31С090.Значение > 0 И НЕ Показатели.Р31С110.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С110.Значение, Показатели.Р31С050.Значение, Показатели.Р31С090.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_19()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.19';
													|en = '4.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.100 подр.3.1 Раздела 3 > 0';
			|en = 'если стр.100 подр.3.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310011003");
	ИменаПоказателей.Вставить("Р31С002", "П000310010003");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_13_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_20()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.20';
													|en = '4.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.100 подр.3.1 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.100 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.110 подр.3.1 Раздела 3 > 0';
			|en = 'если стр.110 подр.3.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310010003");
	ИменаПоказателей.Вставить("Р31С002", "П000310011003");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_13_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_21()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.21';
													|en = '4.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.020 Раздела 3 = сумма всех стр.100 ';
														|en = 'Сумма акциза в стр.020 Раздела 3 = сумма всех стр.100 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 - стр.110 подр.3.1 Раздела 3 за текущий налоговый период, если стр.110 ';
			|en = 'подр.3.1 Раздела 3 - стр.110 подр.3.1 Раздела 3 за текущий налоговый период, если стр.110 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 за текущий налоговый период < суммы стр.100 подр.3.1 Раздела 3';
			|en = 'подр.3.1 Раздела 3 за текущий налоговый период < суммы стр.100 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_4_23_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_22()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.22';
													|en = '4.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.025 Раздела 3 = стр.110 подр.3.1 ';
														|en = 'Сумма акциза в стр.025 Раздела 3 = стр.110 подр.3.1 '") +
		НСтр("ru = 'Раздела 3 за текущий налоговый период - сумма всех стр.100 подр.3.1 Раздела 3, если стр.110 ';
			|en = 'Раздела 3 за текущий налоговый период - сумма всех стр.100 подр.3.1 Раздела 3, если стр.110 '") +
		НСтр("ru = 'подр.3.1 Раздела 3 за текущий налоговый период > суммы стр.100 подр.3.1 Раздела 3';
			|en = 'подр.3.1 Раздела 3 за текущий налоговый период > суммы стр.100 подр.3.1 Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4]';
													|en = '%1 = %2 - %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_4_23_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_23()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.23';
													|en = '4.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.020 Раздела 3 = сумме всех стр.100 ';
														|en = 'Сумма акциза в стр.020 Раздела 3 = сумме всех стр.100 '") +
		НСтр("ru = 'подр.3.1 Раздела 3, если в стр.030 подр.3.1 Раздела 3 отсутствует текущий налоговый период';
			|en = 'подр.3.1 Раздела 3, если в стр.030 подр.3.1 Раздела 3 отсутствует текущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_4_23_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_23_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С020", "П000030002003");
	ИменаПоказателей.Вставить("Р03С025", "П000030002503");
	ИменаПоказателей.Вставить("Р31С100", "П000310010003");
	ИменаПоказателей.Вставить("Р31С110", "П000310011003");
	ИменаПоказателей.Вставить("Р31С031", "П000310003003");
	ИменаПоказателей.Вставить("Р31С032", "П000310003004");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Показатели.Р03С020.Расшифровывать = НЕ Настройки.НомерКС = "4.22";
	Показатели.Р03С025.Расшифровывать = Настройки.НомерКС = "4.22";
	Показатели.Р31С110.Расшифровывать = НЕ Настройки.НомерКС = "4.23";
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С020, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03С025, СтраницаРаздела);
		ЕстьТНП = Ложь;
		Показатели.Р31С100.Итог = 0;
		Показатели.Р31С110.Итог = 0;
			
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С031, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р31С032, СтраницаПодраздела);
			ЭтоТНП = Показатели.Р31С031.Значение = ДанныеКС.МесОтчетаСтр 
				И Показатели.Р31С032.Значение = ДанныеКС.ГодОтчетаСтр;
				
			Если ЭтоТНП Тогда
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С110, СтраницаПодраздела);
			КонецЕсли;
			ЕстьТНП = ЕстьТНП ИЛИ ЭтоТНП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С100, СтраницаПодраздела);
		КонецЦикла;
			
		Если Настройки.НомерКС = "4.21" Тогда
			РасчетнаяСумма = Показатели.Р31С100.Итог - Показатели.Р31С110.Итог;
			Настройки.ЭтоОшибка = ЕстьТНП И Показатели.Р31С110.Итог < Показатели.Р31С100.Итог
				И НЕ Показатели.Р03С020.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р03С020.Значение, Показатели.Р31С100.Итог, Показатели.Р31С110.Итог, РасчетнаяСумма);
				
		ИначеЕсли Настройки.НомерКС = "4.22" Тогда
			РасчетнаяСумма = Показатели.Р31С110.Итог - Показатели.Р31С100.Итог;
			Настройки.ЭтоОшибка = ЕстьТНП И Показатели.Р31С110.Итог > Показатели.Р31С100.Итог
				И НЕ Показатели.Р03С025.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р03С025.Значение, Показатели.Р31С110.Итог, Показатели.Р31С100.Итог, РасчетнаяСумма);
				
		ИначеЕсли Настройки.НомерКС = "4.23" Тогда
			Настройки.ЭтоОшибка = НЕ ЕстьТНП И НЕ Показатели.Р03С020.Значение = Показатели.Р31С100.Итог;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р03С020.Значение, Показатели.Р31С100.Итог);
		КонецЕсли;
		
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_24()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.24';
													|en = '4.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.025 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.025 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.020 Раздела 3 > 0';
			|en = 'если стр.020 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С001", "П000030002503");
	ИменаПоказателей.Вставить("Р03С002", "П000030002003");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_25_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_25()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.25';
													|en = '4.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.020 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.020 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.025 Раздела 3 > 0';
			|en = 'если стр.025 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 > 0';
													|en = '%1 = 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С001", "П000030002003");
	ИменаПоказателей.Вставить("Р03С002", "П000030002503");
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	
	ПроверкаКС_4_25_код(Настройки)

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_25_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р03С002.Значение > 0 И НЕ Показатели.Р03С001.Значение = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р03С001.Значение, Показатели.Р03С002.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_26()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.26';
													|en = '4.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.030 подр.3.1 Раздела 3 > 0, ';
														|en = 'Сумма акциза в стр.030 подр.3.1 Раздела 3 > 0, '") +
		НСтр("ru = 'если стр.020 Раздела 3 > 0';
			|en = 'если стр.020 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0, когда %2 > 0';
													|en = '%1 > 0, когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03С020", "П000030002003");
	ИменаПоказателей.Вставить("Р31С030", "П000310003003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			
		Настройки.ЭтоОшибка = Показатели.Р03С020.Значение > 0 И НЕ Показатели.Р31С030.Значение > 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С030.Значение, Показатели.Р03С020.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_27()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.27';
													|en = '4.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.81 НК РФ';
													|en = 'ст.81 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = 0, ';
														|en = 'Сумма акциза в стр.110 подр.3.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если в стр.030 подр.3.1 Раздела 3 отсутствует текущий налоговый период';
			|en = 'если в стр.030 подр.3.1 Раздела 3 отсутствует текущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0';
													|en = '%1 = 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма акциза';
														|en = 'Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С110", "П000310011003");
	ИменаПоказателей.Вставить("Р31С031", "П000310003003");
	ИменаПоказателей.Вставить("Р31С032", "П000310003004");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЕстьТНП = Ложь;
		Показатели.Р31С110.Итог = 0;
			
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С031, СтраницаПодраздела);
			ЗаполнитьПоказатель(Показатели.Р31С032, СтраницаПодраздела);
			ЭтоТНП = Показатели.Р31С031.Значение = ДанныеКС.МесОтчетаСтр 
				И Показатели.Р31С032.Значение = ДанныеКС.ГодОтчетаСтр;
			ЕстьТНП = ЕстьТНП ИЛИ ЭтоТНП;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С110, СтраницаПодраздела);
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ ЕстьТНП И НЕ Показатели.Р31С110.Итог = 0;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р31С110.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_28()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.28';
													|en = '4.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Требуется выполнение соотношения: стр.120 подр.3.1 ';
														|en = 'Требуется выполнение соотношения: стр.120 подр.3.1 '") +
		НСтр("ru = 'Раздела 3 / (стр.130 подр.3.1.1 Раздела 3 + стр.290 подр.3.1.2 Раздела 3) > 0,10';
			|en = 'Раздела 3 / (стр.130 подр.3.1.1 Раздела 3 + стр.290 подр.3.1.2 Раздела 3) > 0,10'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 / (%2 + %3) Итог [%4] > 0,10';
													|en = '%1 / (%2 + %3) Итог [%4] > 0,10'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не выполнено соотношение';
														|en = 'Не выполнено соотношение'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С120", "П000310012003");
	ИменаПоказателей.Вставить("Р32С130", "П000310013003");
	ИменаПоказателей.Вставить("Р33С290", "П000310029003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Знаменатель = Показатели.Р32С130.Значение + Показатели.Р33С290.Значение;
			РасчетнаяСумма = ?(Знаменатель = 0, 0, Окр(Показатели.Р31С120.Значение / Знаменатель, 4));
			Настройки.ЭтоОшибка = (ЗначениеЗаполнено(Показатели.Р31С120.Значение) 
				ИЛИ ЗначениеЗаполнено(Показатели.Р32С130.Значение) ИЛИ ЗначениеЗаполнено(Показатели.Р33С290.Значение)) 
				И НЕ РасчетнаяСумма > 0.1;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р31С120.Значение, Показатели.Р32С130.Значение, Показатели.Р33С290.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.1';
													|en = '5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Требуется выполнение соотношения: стр.150 подр.3.1.1 ';
														|en = 'Требуется выполнение соотношения: стр.150 подр.3.1.1 '") +
		НСтр("ru = 'Раздела 3 = стр.160 - стр.180 подр.3.1.1 Раздела 3, если стр.130 подр.3.1.1 Раздела 3 > 0';
			|en = 'Раздела 3 = стр.160 - стр.180 подр.3.1.1 Раздела 3, если стр.130 подр.3.1.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %5 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %5 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не выполнено соотношение';
														|en = 'Не выполнено соотношение'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С150", "П000310015003");
	ИменаПоказателей.Вставить("Р32С160", "П000310016003");
	ИменаПоказателей.Вставить("Р32С180", "П000310018003");
	ИменаПоказателей.Вставить("Р32С130", "П000310013003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р32С160.Значение - Показатели.Р32С180.Значение;
		Настройки.ЭтоОшибка = Показатели.Р32С130.Значение > 0 И НЕ Показатели.Р32С150.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р32С150.Значение, Показатели.Р32С160.Значение, Показатели.Р32С180.Значение, РасчетнаяСумма,
			Показатели.Р32С130.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.2';
													|en = '5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Признак показателя Даб в стр.145 подр.3.1.1 Раздела 3 = 1, ';
														|en = 'Признак показателя Даб в стр.145 подр.3.1.1 Раздела 3 = 1, '") +
		НСтр("ru = 'если стр.160 - стр.180 подр.3.1.1 Раздела 3 > 0';
			|en = 'если стр.160 - стр.180 подр.3.1.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 1, когда %2 - %3 Итог [%4] > 0';
													|en = '%1 = 1, когда %2 - %3 Итог [%4] > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака показателя Даб';
														|en = 'Ошибочное значение признака показателя Даб'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_03_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.3';
													|en = '5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Признак показателя Даб в стр.145 подр.3.1.1 Раздела 3 = 0, ';
														|en = 'Признак показателя Даб в стр.145 подр.3.1.1 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.160 - стр.180 подр.3.1.1 Раздела 3 <= 0';
			|en = 'если стр.160 - стр.180 подр.3.1.1 Раздела 3 <= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 - %3 Итог [%4] <= 0';
													|en = '%1 = 0, когда %2 - %3 Итог [%4] <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака показателя Даб';
														|en = 'Ошибочное значение признака показателя Даб'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_03_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С145", "П000310014503");
	ИменаПоказателей.Вставить("Р32С160", "П000310016003");
	ИменаПоказателей.Вставить("Р32С180", "П000310018003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		РасчетнаяСумма = Показатели.Р32С160.Значение - Показатели.Р32С180.Значение;
		
		Если Настройки.НомерКС = "5.2" Тогда
			Настройки.ЭтоОшибка = РасчетнаяСумма > 0 И НЕ Показатели.Р32С145.Значение = 1;;
		Иначе
			Настройки.ЭтоОшибка = НЕ РасчетнаяСумма > 0 И НЕ Показатели.Р32С145.Значение = 0;;
		КонецЕсли;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р32С145.Значение, Показатели.Р32С160.Значение, Показатели.Р32С180.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.4';
													|en = '5.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дальневосточная надбавка в стр.250 подр.3.1.1 Раздела 3 >= 0 и <= 2000';
			|en = 'Дальневосточная надбавка в стр.250 подр.3.1.1 Раздела 3 >= 0 и <= 2000'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '0 <= %1 <= 2000';
													|en = '0 <= %1 <= 2000'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение дальневосточной надбавки';
														|en = 'Ошибочное значение дальневосточной надбавки'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С250", "П000310025003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = Показатели.Р32С250.Значение < 0 ИЛИ Показатели.Р32С250.Значение > 2000;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р32С250.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.5';
													|en = '5.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Коэффициент Каб_комп в стр.190 подр.3.1.1 Раздела 3 = 0,75 ';
														|en = 'Коэффициент Каб_комп в стр.190 подр.3.1.1 Раздела 3 = 0,75 '") +
		НСтр("ru = 'если отчетный год на Титульном листе = 2019 и стр.130 подр.3.1.1 Раздела 3 > 0';
			|en = 'если отчетный год на Титульном листе = 2019 и стр.130 подр.3.1.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,75 когда %2 = 2019 и %3 > 0';
													|en = '%1 = 0,75 когда %2 = 2019 и %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Каб_комп';
														|en = 'Ошибочное значение коэффициента Каб_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.6';
													|en = '5.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Коэффициент Каб_комп в стр.190 подр.3.1.1 Раздела 3 = 0,68 ';
														|en = 'Коэффициент Каб_комп в стр.190 подр.3.1.1 Раздела 3 = 0,68 '") +
		НСтр("ru = 'если отчетный год на Титульном листе >= 2020 и стр.130 подр.3.1.1 Раздела 3 > 0';
			|en = 'если отчетный год на Титульном листе >= 2020 и стр.130 подр.3.1.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,68 когда %2 >= 2020 и %3 > 0';
													|en = '%1 = 0,68 когда %2 >= 2020 и %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Каб_комп';
														|en = 'Ошибочное значение коэффициента Каб_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_5_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р32С190", "П000310019003");
	ИменаПоказателей.Вставить("Р00Т001", "ОтчетГод");
	ИменаПоказателей.Вставить("Р32С130", "П000310013003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С190, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р00Т001, ДанныеКС.Титульный);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р32С130, СтраницаРаздела);
		
		Если Настройки.НомерКС = "5.5" Тогда
			Настройки.ЭтоОшибка = Показатели.Р00Т001.Значение = "2019" И Показатели.Р32С130.Значение > 0 
				И НЕ Показатели.Р32С190.Значение = 0.75;
		Иначе
			Настройки.ЭтоОшибка = Показатели.Р00Т001.Значение >= "2020" И Показатели.Р32С130.Значение > 0 
				И НЕ Показатели.Р32С190.Значение = 0.68;
		КонецЕсли;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р32С190.Значение, Показатели.Р00Т001.ЗначениеСтр, Показатели.Р32С130.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.7';
													|en = '5.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Объем сырья в стр.080 подр.3.1 Раздела 3 > 0, ';
														|en = 'Объем сырья в стр.080 подр.3.1 Раздела 3 > 0, '") +
		НСтр("ru = 'если стр.230 подр.3.1.1 Раздела 3 > 0';
			|en = 'если стр.230 подр.3.1.1 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0 когда %2 > 0';
													|en = '%1 > 0 когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение объема сырья';
														|en = 'Ошибочное значение объема сырья'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310008003");
	ИменаПоказателей.Вставить("Р32С001", "П000310023003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р32С001.Значение > 0 
			И НЕ Показатели.Р31С001.Значение > 0;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С001.Значение, Показатели.Р32С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_01()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.1';
													|en = '6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Требуется выполнение соотношения: стр.260 подр.3.1.2 ';
														|en = 'Требуется выполнение соотношения: стр.260 подр.3.1.2 '") +
		НСтр("ru = 'Раздела 3 = стр.270 - стр.290 подр.3.1.2 Раздела 3, если стр.240 подр.3.1.2 Раздела 3 > 0';
			|en = 'Раздела 3 = стр.270 - стр.290 подр.3.1.2 Раздела 3, если стр.240 подр.3.1.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - %3 Итог [%4], когда %5 > 0';
													|en = '%1 = %2 - %3 Итог [%4], когда %5 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Не выполнено соотношение';
														|en = 'Не выполнено соотношение'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р33С260", "П000310026003");
	ИменаПоказателей.Вставить("Р33С270", "П000310027003");
	ИменаПоказателей.Вставить("Р33С290", "П000310029003");
	ИменаПоказателей.Вставить("Р33С240", "П000310024003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р33С270.Значение - Показатели.Р33С290.Значение;
		Настройки.ЭтоОшибка = Показатели.Р33С240.Значение > 0 И НЕ Показатели.Р33С260.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р33С260.Значение, Показатели.Р33С270.Значение, Показатели.Р33С290.Значение, РасчетнаяСумма,
			Показатели.Р33С240.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.2';
													|en = '6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Признак показателя Ддт в стр.255 подр.3.1.2 Раздела 3 = 1, ';
														|en = 'Признак показателя Ддт в стр.255 подр.3.1.2 Раздела 3 = 1, '") +
		НСтр("ru = 'если стр.270 - стр.290 подр.3.1.2 Раздела 3 > 0';
			|en = 'если стр.270 - стр.290 подр.3.1.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 1, когда %2 - %3 Итог [%4] > 0';
													|en = '%1 = 1, когда %2 - %3 Итог [%4] > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака показателя Ддт';
														|en = 'Ошибочное значение признака показателя Ддт'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_6_03_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_03()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.3';
													|en = '6.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Признак показателя Ддт в стр.255 подр.3.1.2 Раздела 3 = 0, ';
														|en = 'Признак показателя Ддт в стр.255 подр.3.1.2 Раздела 3 = 0, '") +
		НСтр("ru = 'если стр.270 - стр.290 подр.3.1.2 Раздела 3 <= 0';
			|en = 'если стр.270 - стр.290 подр.3.1.2 Раздела 3 <= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0, когда %2 - %3 Итог [%4] <= 0';
													|en = '%1 = 0, когда %2 - %3 Итог [%4] <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение признака показателя Ддт';
														|en = 'Ошибочное значение признака показателя Ддт'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_6_03_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_03_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р33С255", "П000310025503");
	ИменаПоказателей.Вставить("Р33С270", "П000310027003");
	ИменаПоказателей.Вставить("Р33С290", "П000310029003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
			РасчетнаяСумма = Показатели.Р33С270.Значение - Показатели.Р33С290.Значение;
			
			Если Настройки.НомерКС = "6.2" Тогда
				Настройки.ЭтоОшибка = РасчетнаяСумма > 0 И НЕ Показатели.Р33С255.Значение = 1;;
			Иначе
				Настройки.ЭтоОшибка = НЕ РасчетнаяСумма > 0 И НЕ Показатели.Р33С255.Значение = 0;;
			КонецЕсли;
			
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.Р33С255.Значение, Показатели.Р33С270.Значение, Показатели.Р33С290.Значение, РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_04()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.4';
													|en = '6.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено до выхода регл. КС';
													|en = 'Отключено до выхода регл. КС'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Дальневосточная надбавка в стр.410 подр.3.1.2 Раздела 3 >= 0 и <= 2000';
			|en = 'Дальневосточная надбавка в стр.410 подр.3.1.2 Раздела 3 >= 0 и <= 2000'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '0 <= %1 <= 2000';
													|en = '0 <= %1 <= 2000'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение дальневосточной надбавки';
														|en = 'Ошибочное значение дальневосточной надбавки'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Возврат;
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р33С410", "П000310041003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
		Для каждого СтраницаПодраздела Из СтраницаРаздела.Раздел31 Цикл
	
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаПодраздела);
			
			Настройки.ЭтоОшибка = Показатели.Р33С410.Значение < 0 ИЛИ Показатели.Р33С410.Значение > 2000;
			Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р33С410.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
	
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_05()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.5';
													|en = '6.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Коэффициент Кдт_комп в стр.300 подр.3.1.2 Раздела 3 = 0,7 ';
														|en = 'Коэффициент Кдт_комп в стр.300 подр.3.1.2 Раздела 3 = 0,7 '") +
		НСтр("ru = 'если отчетный год на Титульном листе = 2019 и стр.240 подр.3.1.2 Раздела 3 > 0';
			|en = 'если отчетный год на Титульном листе = 2019 и стр.240 подр.3.1.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,7 когда %2 = 2019 и %3 > 0';
													|en = '%1 = 0,7 когда %2 = 2019 и %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Кдт_комп';
														|en = 'Ошибочное значение коэффициента Кдт_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_6_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.6';
													|en = '6.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Коэффициент Кдт_комп в стр.300 подр.3.1.2 Раздела 3 = 0,65 ';
														|en = 'Коэффициент Кдт_комп в стр.300 подр.3.1.2 Раздела 3 = 0,65 '") +
		НСтр("ru = 'если отчетный год на Титульном листе >= 2020 и стр.240 подр.3.1.2 Раздела 3 > 0';
			|en = 'если отчетный год на Титульном листе >= 2020 и стр.240 подр.3.1.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = 0,65 когда %2 >= 2020 и %3 > 0';
													|en = '%1 = 0,65 когда %2 >= 2020 и %3 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение коэффициента Кдт_комп';
														|en = 'Ошибочное значение коэффициента Кдт_комп'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_6_06_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_06_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р33С300", "П000310030003");
	ИменаПоказателей.Вставить("Р00Т001", "ОтчетГод");
	ИменаПоказателей.Вставить("Р33С240", "П000310024003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С300, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р00Т001, ДанныеКС.Титульный);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р33С240, СтраницаРаздела);
		
		Если Настройки.НомерКС = "6.5" Тогда
			Настройки.ЭтоОшибка = Показатели.Р00Т001.Значение = "2019" И Показатели.Р33С240.Значение > 0 
				И НЕ Показатели.Р33С300.Значение = 0.7;
		Иначе
			Настройки.ЭтоОшибка = Показатели.Р00Т001.Значение >= "2020" И Показатели.Р33С240.Значение > 0 
				И НЕ Показатели.Р33С300.Значение = 0.65;
		КонецЕсли;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р33С300.Значение, Показатели.Р00Т001.ЗначениеСтр, Показатели.Р33С240.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_07()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.7';
													|en = '6.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.200 НК РФ';
													|en = 'ст.200 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Объем сырья в стр.080 подр.3.1 Раздела 3 > 0, ';
														|en = 'Объем сырья в стр.080 подр.3.1 Раздела 3 > 0, '") +
		НСтр("ru = 'если стр.340 подр.3.1.2 Раздела 3 > 0';
			|en = 'если стр.340 подр.3.1.2 Раздела 3 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 > 0 когда %2 > 0';
													|en = '%1 > 0 когда %2 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение объема сырья';
														|en = 'Ошибочное значение объема сырья'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р31С001", "П000310008003");
	ИменаПоказателей.Вставить("Р33С001", "П000310034003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел3 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = Показатели.Р33С001.Значение > 0 
			И НЕ Показатели.Р31С001.Значение > 0;
		
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			Показатели.Р31С001.Значение, Показатели.Р33С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если НайденнаяПодчСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"),
						СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
									
									КолСтрокВДеревеДанныхПодчРаздела = Макс(ДеревоДанныхРаздела.Строки[
									НомерСтраницыРаздела - 1].Строки[ИндПодчРаздела].Строки.Количество(), 1);
									
									Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
										
										ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
										
										Если ИмяПодчРаздела = "Раздел21" Тогда
											
											ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Строки[
											ИндПодчРаздела].Строки[НомерСтраницыПодчРаздела - 1].Данные;
											
											СтруктПарам = Новый Структура;
											СтруктПарам.Вставить("НомерДоговора", ДанныеСтраницы["П000210003003"]);
											СтруктПарам.Вставить("ДатаДоговора", ДанныеСтраницы["П000210004003"]);
											СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыПодчРаздела);
											
											ЭлементПодчРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел21(СтруктПарам);
											
										Иначе
											
											НаимСтраницы = "Стр. ";
											Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
												НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
											КонецЕсли;
											ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы
											+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
											
										КонецЕсли;
										
										ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
										ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницы_Раздел21(СтруктураПараметров)
	
	НомерСтраницы = СтруктураПараметров.НомерСтраницы;
	НомерДоговора = СокрЛП(СтруктураПараметров.НомерДоговора);
	ДатаДоговора  = СтруктураПараметров.ДатаДоговора;
	
	Результат = "";
	Если ЗначениеЗаполнено(ДатаДоговора) Тогда
		Результат = Результат + " от " + Формат(ДатаДоговора, "ДФ=дд.ММ.гггг");
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерДоговора) Тогда
		Результат = Результат + " № " + НомерДоговора;
	КонецЕсли;
	
	Возврат "Раздел 2.1. " + ?(ЗначениеЗаполнено(Результат),
	"Договор" + Результат, "Стр. " + Формат(НомерСтраницы, "ЧГ="));
	
КонецФункции

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
