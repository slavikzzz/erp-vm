
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	Настройки.Вставить("РазрешеноМенятьВарианты", Ложь);
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример добавления команды:
//	Команда = Форма.Команды.Добавить("<ИмяКоманды>");
//	Команда.Действие  = "Подключаемый_Команда";
//	Команда.Заголовок = НСтр("ru = '<Представление команды...>'");
//	ОтчетыСервер.ВывестиКоманду(Форма, Команда, "<ВидГруппы>");
// Обработчик команды пишется в процедуре ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЭлементОтчетТабличныйДокумент = Форма.Элементы.Найти("БыстрыеНастройки");
	Если ЭлементОтчетТабличныйДокумент <> Неопределено Тогда
		ЭлементНадпись = Форма.Элементы.Вставить("СверкаРасчетаАмортизации", Тип("ДекорацияФормы"),, ЭлементОтчетТабличныйДокумент);
	Иначе
		ЭлементНадпись = Форма.Элементы.Добавить("СверкаРасчетаАмортизации", Тип("ДекорацияФормы"));
	КонецЕсли; 
	
	ЭлементНадпись.Заголовок = НСтр("ru = 'ВНИМАНИЕ! Отчет изменяет данные в информационной базе и должен использоваться в не рабочей информационной базе';
									|en = 'WARNING. The report changes infobase data and must be used in a non-working infobase'");
	ЭлементНадпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. синтакс-помощник "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Отчет = Форма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	НастроитьПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	УстановитьПериодОтчета(КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных -
//       Пользовательские настройки для загрузки в компоновщик настроек.
//
// См. синтакс-помощник "Расширение управляемой формы для отчета.ПриЗагрузкеПользовательскихНастроекНаСервере"
//    в синтакс-помощнике.
//
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Отчет = Форма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	НастроитьПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	УстановитьПериодОтчета(КомпоновщикНастроекФормы);
	
	НовыеПользовательскиеНастройкиКД = КомпоновщикНастроекФормы.ПользовательскиеНастройки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ТекстСообщения = НСтр("ru = 'Для формирования отчета необходимо использовать учет внеоборотных активов версии 2.2. и 2.4.';
								|en = 'To generate a report, you must use the accounting for non-current assets 2.2. and 2.4.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецЕсли;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	Если ЗначенияОтбораДанных.НачалоПериода = '000101010000' 
		ИЛИ ЗначенияОтбораДанных.ОкончаниеПериода = '000101010000' Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Период"" не заполнено.';
								|en = '""Period"" is not filled in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
	ИначеЕсли ЗначенияОтбораДанных.НачалоПериода <> ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4() Тогда
		
		ТекстСообщения = НСтр("ru = 'Начало периода должно совпадать с датой начала учета версии 2.4 (%1)';
								|en = 'Beginning of the period must match start date of accounting 2.4 (%1)'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(), "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
	ИначеЕсли НЕ ЗначенияОтбораДанных.ЭтоКопияИБ Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо подтвердить, что отчет формируется в не рабочей информационной базе.';
								|en = 'Confirm that the report is generated in the non-working infobase.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПроблем = Новый Массив;
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗначенияОтбораДанных = ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ВнешниеНаборыДанных = СформироватьВнешниеНаборыДанных(ЗначенияОтбораДанных, СписокПроблем);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	ДобавитьИнформационноеСообщениеВШапку(ДокументРезультат, ЗначенияОтбораДанных, СписокПроблем);
	
	ОформитьШапкуОтчета(ДокументРезультат, ЗначенияОтбораДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеОтчета

Функция СформироватьВнешниеНаборыДанных(ЗначенияОтбораДанных, СписокПроблем)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьЗаданияКРасчетуАмортизации(ЗначенияОтбораДанных, МенеджерВременныхТаблиц);
	
	ВнешниеНаборыДанных = Новый Структура;
	
	ДобавитьАмортизацию22("ОС", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	ДобавитьАмортизацию22("НМА", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	
	ДобавитьАмортизацию24("ОС", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	ДобавитьАмортизацию24("НМА", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	
	//++ НЕ УТКА
	ДобавитьАмортизациюМеждународный("ОС", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	ДобавитьАмортизациюМеждународный("НМА", ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем);
	//-- НЕ УТКА
	
	ДобавитьОтсутствующийНабор("АмортизацияОС_Регл_22", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("АмортизацияОС_24", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("АмортизацияОС_Упр_22", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииОС_Регл_22", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииОС_БУ_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииОС_НУ_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииОС_Упр_22", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииОС_Упр_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	
	ДобавитьОтсутствующийНабор("АмортизацияНМА_Регл_22", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("АмортизацияНМА_24", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("АмортизацияНМА_Упр_22", СхемаКомпоновкиДанных.НаборыДанных.Амортизация, ВнешниеНаборыДанных);
	
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииНМА_Регл_22", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииНМА_БУ_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииНМА_НУ_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииНМА_Упр_22", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	ДобавитьОтсутствующийНабор("ПараметрыАмортизацииНМА_Упр_24", СхемаКомпоновкиДанных.НаборыДанных.ПараметрыАмортизации, ВнешниеНаборыДанных);
	
	ВернутьЗаданияКРасчетуАмортизации(МенеджерВременныхТаблиц);
	
	Возврат ВнешниеНаборыДанных;

КонецФункции

Процедура ДобавитьИнформационноеСообщениеВШапку(ТабДок, ЗначенияОтбораДанных, СписокПроблем)

	ПроверитьВыполнениеРасчетаАмортизацииДоДатыНачала(ЗначенияОтбораДанных, СписокПроблем);
	ПроверитьНаличиеДокументовВПроверяемомПериоде(ЗначенияОтбораДанных, СписокПроблем);
	ПроверитьКорректностьПерехода(ЗначенияОтбораДанных, СписокПроблем);
	
	Если СписокПроблем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СписокПроблем = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокПроблем);
	
	ТекстСообщения = НСтр("ru = 'Сверка расчета может быть не корректной:';
							|en = 'Reconciliation can be incorrect:'");
	СписокПроблем.Вставить(0, ТекстСообщения);
	
	ТекстСообщения = СтрСоединить(СписокПроблем, Символы.ПС);

	ТабДок.Область("R1C1").Текст = ТекстСообщения;
	ТабДок.Область("R1C1").ЦветТекста = Метаданные.ЭлементыСтиля.ЦветТекстаПроблема.Значение;
	ТабДок.Область(1, 1, 1, ).ВысотаСтроки = 0;
	
КонецПроцедуры
 
Процедура ОформитьШапкуОтчета(ТабДок, ЗначенияОтбораДанных)
	
	ТабДок.ФиксацияСлева = 2;
	
	СписокЯчеек = Новый СписокЗначений;
	СписокЯчеек.Добавить(НСтр("ru = 'Показатели';
								|en = 'Indicators'"));
	СписокЯчеек.Добавить(НСтр("ru = 'Версия 2.2';
								|en = 'Version 2.2'"));
	СписокЯчеек.Добавить(НСтр("ru = 'Версия 2.4';
								|en = 'Version 2.4'"));
	СписокЯчеек.Добавить(НСтр("ru = 'Расхождение';
								|en = 'Discrepancy'"));
	
	ШапкаНайдена = Ложь;
		
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для КолонкаНачалаШапки = 1 По ТабДок.ШиринаТаблицы Цикл
			ШапкаНайдена = ОбъединятьЯчейки(ТабДок, индСтр, КолонкаНачалаШапки, СписокЯчеек);
			Если ШапкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		Если ШапкаНайдена Тогда
			
			Для индКол = КолонкаНачалаШапки По ТабДок.ШиринаТаблицы Цикл
				
				Смещение = Смещение(ТабДок, индСтр, индКол, СписокЯчеек);
				
				ТекстЗаголовка = ТабДок.Область(индСтр + Смещение, индКол, индСтр + Смещение, индКол).Текст;
				ТекстЗаголовка = ?(ТекстЗаголовка = НСтр("ru = 'Версия 2.2';
														|en = 'Version 2.2'"), "2.2", ТекстЗаголовка);
				ТекстЗаголовка = ?(ТекстЗаголовка = НСтр("ru = 'Версия 2.4';
														|en = 'Version 2.4'"), "2.4", ТекстЗаголовка);
				
				ВысотаШапки = 0;
				Для Индекс = 1 По 10 Цикл
					СледующаяЯчейка = ТабДок.Область(индСтр+Индекс+Смещение, индКол, индСтр+Индекс+Смещение, индКол).Текст;
					Если СписокЯчеек.НайтиПоЗначению(СледующаяЯчейка) <> Неопределено Тогда
						ВысотаШапки = ВысотаШапки + 1;
					КонецЕсли;
				КонецЦикла;
				
				ОбъединяемаяОбласть = ТабДок.Область(индСтр+Смещение, индКол, индСтр + ВысотаШапки + Смещение, индКол);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
			КонецЦикла; 
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбъединятьЯчейки(ТабДок, индСтр, индКол, СписокЯчеек)

	Ячейка = ТабДок.Область(индСтр, индКол);
	ЯчейкаКОбъединению = СписокЯчеек.НайтиПоЗначению(Ячейка.Текст);
	Если ЯчейкаКОбъединению <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция Смещение(ТабДок, индСтр, индКол, СписокЯчеек)

	Смещение = 0;
	
	Для Сч = 0 По 5 Цикл
		Если ОбъединятьЯчейки(ТабДок, индСтр + Сч, индКол, СписокЯчеек) Тогда
			Прервать;
		КонецЕсли;
		Смещение = Смещение + 1;
	КонецЦикла;

	Возврат Смещение;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

Процедура ДобавитьАмортизацию22(ИмяОбъектов, ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем)

	НачисленнаяАмортизация = Неопределено;
	ПараметрыАмортизации = Неопределено;
	
	ТекущийПериод = КонецМесяца(ЗначенияОтбораДанных.НачалоПериода);
	Пока ТекущийПериод <= ЗначенияОтбораДанных.ОкончаниеПериода Цикл
	
		Для каждого Организация Из ЗначенияОтбораДанных.СписокОрганизаций Цикл
			
			Попытка
			
				Если ИмяОбъектов = "ОС" Тогда
					ДокументАмортизация = Документы.АмортизацияОС.СоздатьДокумент();
				Иначе
					ДокументАмортизация = Документы.АмортизацияНМА.СоздатьДокумент();
				КонецЕсли; 
				
				ДокументАмортизация.Дата = ТекущийПериод;
				ДокументАмортизация.Организация = Организация;
				ДокументАмортизация.ДополнительныеСвойства.Вставить("ДобавитьПараметрыРасчета");
				ДокументАмортизация.Записать(РежимЗаписиДокумента.Проведение);
				
				ДополнитьТаблицу22(
					НачисленнаяАмортизация, 
					ДокументАмортизация.ДополнительныеСвойства.НачисленнаяАмортизация, 
					Организация, 
					ТекущийПериод,
					ИмяОбъектов);
				
				ДополнитьТаблицу22(
					ПараметрыАмортизации, 
					ДокументАмортизация.ДополнительныеСвойства.ПараметрыАмортизации, 
					Организация, 
					ТекущийПериод,
					ИмяОбъектов);
					
			Исключение
				
				Если ИмяОбъектов = "ОС" Тогда
					ТекстСообщения = НСтр("ru = '- не удалось расчитать амортизацию ОС (2.2) по причине: %1';
											|en = '- Cannot calculate FA depreciation (2.2) due to: %1'");
				Иначе
					ТекстСообщения = НСтр("ru = '- не удалось расчитать амортизацию НМА (2.2) по причине: %1';
											|en = '- cannot calculate IA depreciation (2.2) due to: %1'");
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				СписокПроблем.Добавить(ТекстСообщения);
				
			КонецПопытки; 
			
		КонецЦикла; 
		
		ТекущийПериод = КонецМесяца(ДобавитьМесяц(ТекущийПериод, 1));
		
	КонецЦикла; 
	
	Если НачисленнаяАмортизация <> Неопределено Тогда
		
		ОбработатьТаблицуАмортизации22(НачисленнаяАмортизация);
		ВнешниеНаборыДанных.Вставить("Амортизация" + ИмяОбъектов + "_Регл_22", НачисленнаяАмортизация);
		
	КонецЕсли; 
	
	Если ПараметрыАмортизации <> Неопределено Тогда
		
		ОбработатьТаблицуПараметровАмортизации22(ПараметрыАмортизации);
		ОчиститьНеиспользуемыеПараметры("БУ", ИмяОбъектов, "_22", ПараметрыАмортизации);
		
		ВнешниеНаборыДанных.Вставить("ПараметрыАмортизации" + ИмяОбъектов + "_Регл_22", ПараметрыАмортизации);
		
	КонецЕсли; 
	
	УдалитьДокументы("Амортизация" + ИмяОбъектов, ЗначенияОтбораДанных);
	
КонецПроцедуры

Процедура ДобавитьАмортизацию24(ИмяОбъектов, ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПакетыАмортизации.Организация,
	|	ПакетыАмортизации.НомерПакета
	|ИЗ
	|	РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизации
	|ГДЕ
	|	ПакетыАмортизации.Организация В (&СписокОрганизаций)";
	
	Если ИмяОбъектов = "НМА" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПакетыАмортизацииОС", "РегистрСведений.ПакетыАмортизацииНМА");
	КонецЕсли;
	
	НомерЗадания = ?(ИмяОбъектов = "ОС", 
				Константы.НомерЗаданияКРасчетуАмортизацииОС.Получить(), 
				Константы.НомерЗаданияКРасчетуАмортизацииНМА.Получить());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	ПакетыАмортизации = Запрос.Выполнить().Выгрузить();
	
	ПараметрыАмортизации_БУ = Неопределено;
	ПараметрыАмортизации_НУ = Неопределено;
	ПараметрыАмортизации_УУ = Неопределено;
	
	ТекущийПериод = ЗначенияОтбораДанных.НачалоПериода;
	Пока ТекущийПериод <= ЗначенияОтбораДанных.ОкончаниеПериода Цикл
		
		Если ИмяОбъектов = "ОС" Тогда
			ПараметрыРасчетаАмортизации = РасчетАмортизацииОС.ПараметрыВыполнения();
		Иначе
			ПараметрыРасчетаАмортизации = РасчетАмортизацииНМА.ПараметрыВыполнения();
		КонецЕсли; 
		ПараметрыРасчетаАмортизации.Период = ТекущийПериод;
		ПараметрыРасчетаАмортизации.СписокОрганизаций = ЗначенияОтбораДанных.СписокОрганизаций;
		ПараметрыРасчетаАмортизации.ПакетыАмортизации = ПакетыАмортизации;
		ПараметрыРасчетаАмортизации.НомерДоРасчета = НомерЗадания;
		ПараметрыРасчетаАмортизации.ВернутьПараметрыРасчета = Истина;
		ПараметрыРасчетаАмортизации.АдресПараметровРасчета = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
		
		Если ИмяОбъектов = "ОС" Тогда
			Документы.АмортизацияОС2_4.РассчитатьАмортизацию(ПараметрыРасчетаАмортизации);
		Иначе
			Документы.АмортизацияНМА2_4.РассчитатьАмортизацию(ПараметрыРасчетаАмортизации);
		КонецЕсли; 
		
		Если НЕ ПараметрыРасчетаАмортизации.ЕстьОшибки Тогда
			
			СписокПараметровАмортизации = ПолучитьИзВременногоХранилища(ПараметрыРасчетаАмортизации.АдресПараметровРасчета);
			
			Если СписокПараметровАмортизации <> Неопределено Тогда
				
				Если ПараметрыАмортизации_БУ = Неопределено Тогда
					ПараметрыАмортизации_БУ = СписокПараметровАмортизации.ПараметрыАмортизации_БУ;
				Иначе
					ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(СписокПараметровАмортизации.ПараметрыАмортизации_БУ, ПараметрыАмортизации_БУ);
				КонецЕсли; 
				
				Если ПараметрыАмортизации_НУ = Неопределено Тогда
					ПараметрыАмортизации_НУ = СписокПараметровАмортизации.ПараметрыАмортизации_НУ;
				Иначе
					ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(СписокПараметровАмортизации.ПараметрыАмортизации_НУ, ПараметрыАмортизации_НУ);
				КонецЕсли; 
				
				Если ЗначенияОтбораДанных.СверкаРасчетаУпр Тогда
					Если ПараметрыАмортизации_УУ = Неопределено Тогда
						ПараметрыАмортизации_УУ = СписокПараметровАмортизации.ПараметрыАмортизации_УУ;
					Иначе
						ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(СписокПараметровАмортизации.ПараметрыАмортизации_УУ, ПараметрыАмортизации_УУ);
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли; 
		
		Иначе
			
			Если ИмяОбъектов = "ОС" Тогда
				ТекстСообщения = НСтр("ru = '- при расчете амортизации ОС (2.4) за %1 были диагностированы ошибки (см. подробности в закрытии месяца)';
										|en = '- errors were found when calculating FA depreciation (2.4) for %1 (for more information, see the month-end closing)'");
			Иначе
				ТекстСообщения = НСтр("ru = '- при расчете амортизации НМА (2.4) за %1 были диагностированы ошибки (см. подробности в закрытии месяца)';
										|en = '- errors were found while calculating IA depreciation (2.4) for %1 (for more information, see the month-end closing)'");
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ТекущийПериод, "ДФ='ММММ гггг'"));
			СписокПроблем.Добавить(ТекстСообщения);
			
		КонецЕсли; 
		
		ТекущийПериод = КонецМесяца(ДобавитьМесяц(ТекущийПериод, 1));
		
	КонецЦикла; 
	
	Если ПараметрыАмортизации_БУ <> Неопределено Тогда
		
		ОбработатьТаблицуПараметровАмортизации24(ИмяОбъектов, ПараметрыАмортизации_БУ);
		ОчиститьНеиспользуемыеПараметры("БУ", ИмяОбъектов, "_24", ПараметрыАмортизации_БУ);
		
		ВнешниеНаборыДанных.Вставить("ПараметрыАмортизации" + ИмяОбъектов + "_БУ_24", ПараметрыАмортизации_БУ);
	
	КонецЕсли; 
	
	Если ПараметрыАмортизации_НУ <> Неопределено Тогда
		
		ОбработатьТаблицуПараметровАмортизации24(ИмяОбъектов, ПараметрыАмортизации_НУ);
		ОчиститьНеиспользуемыеПараметры("НУ", ИмяОбъектов, "_24", ПараметрыАмортизации_НУ);
		
		ВнешниеНаборыДанных.Вставить("ПараметрыАмортизации" + ИмяОбъектов + "_НУ_24", ПараметрыАмортизации_НУ);
	
	КонецЕсли; 
	
	Если ПараметрыАмортизации_УУ <> Неопределено Тогда
		
		ОбработатьТаблицуПараметровАмортизации24(ИмяОбъектов, ПараметрыАмортизации_УУ);
		ОчиститьНеиспользуемыеПараметры("УУ", ИмяОбъектов, "_24", ПараметрыАмортизации_УУ);
		
		ВнешниеНаборыДанных.Вставить("ПараметрыАмортизации" + ИмяОбъектов + "_Упр_24", ПараметрыАмортизации_УУ);
	
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ВидОбъекта                                         КАК ИмяОбъектов,
	|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ)  КАК Дата,
	|	НачисленнаяАмортизация.Организация                  КАК Организация,
	|	НачисленнаяАмортизация.КорПодразделение             КАК Подразделение,
	|	НачисленнаяАмортизация.ОсновноеСредство             КАК ВнеоборотныйАктив,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаУпр 
	|			ТОГДА СУММА(НачисленнаяАмортизация.Амортизация) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияУУ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияРегл) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияБУ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияНУ) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияНУ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияПР) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияПР_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияВР) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияВР_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияЦФ) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияЦФ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияНУЦФ) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияНУЦФ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияПРЦФ) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияПРЦФ_24,
	|	ВЫБОР 
	|		КОГДА &СверкаРасчетаРегл 
	|			ТОГДА СУММА(НачисленнаяАмортизация.АмортизацияВРЦФ) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                               КАК АмортизацияВРЦФ_24
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК НачисленнаяАмортизация
	|ГДЕ
	|	НачисленнаяАмортизация.Организация В(&СписокОрганизаций)
	|	И НачисленнаяАмортизация.Регистратор ССЫЛКА Документ.АмортизацияОС2_4
	|	И НачисленнаяАмортизация.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяАмортизация.Организация,
	|	НачисленнаяАмортизация.КорПодразделение,
	|	НачисленнаяАмортизация.ОсновноеСредство,
	|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ)";
	
	Если ИмяОбъектов = "НМА" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ВидОбъекта                                         КАК ИмяОбъектов,
		|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ)  КАК Дата,
		|	НачисленнаяАмортизация.Организация                  КАК Организация,
		|	НачисленнаяАмортизация.КорПодразделение             КАК Подразделение,
		|	НачисленнаяАмортизация.НематериальныйАктив          КАК ВнеоборотныйАктив,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаУпр 
		|			ТОГДА СУММА(НачисленнаяАмортизация.Стоимость) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияУУ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьРегл) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияБУ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьНУ) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияНУ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьПР) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияПР_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьВР) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияВР_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьЦФ) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияЦФ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьНУЦФ) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияНУЦФ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьПРЦФ) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияПРЦФ_24,
		|	ВЫБОР 
		|		КОГДА &СверкаРасчетаРегл 
		|			ТОГДА СУММА(НачисленнаяАмортизация.СтоимостьВРЦФ) 
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                               КАК АмортизацияВРЦФ_24
		|ИЗ
		|	РегистрНакопления.СтоимостьНМА КАК НачисленнаяАмортизация
		|ГДЕ
		|	НачисленнаяАмортизация.Организация В(&СписокОрганизаций)
		|	И НачисленнаяАмортизация.Регистратор ССЫЛКА Документ.АмортизацияНМА2_4
		|	И НачисленнаяАмортизация.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленнаяАмортизация.Организация,
		|	НачисленнаяАмортизация.КорПодразделение,
		|	НачисленнаяАмортизация.НематериальныйАктив,
		|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ)";
	КонецЕсли; 
	
	Если ИмяОбъектов = "НМА" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленнаяАмортизация.ОсновноеСредство", "НачисленнаяАмортизация.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрНакопления.АмортизацияОС", "РегистрНакопления.АмортизацияНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АмортизацияОС2_4", "Документ.АмортизацияНМА2_4");
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	Запрос.УстановитьПараметр("СверкаРасчетаРегл", Истина);
	Запрос.УстановитьПараметр("СверкаРасчетаУпр", ЗначенияОтбораДанных.СверкаРасчетаУпр);
	
	ВидОбъекта = ?(ИмяОбъектов = "ОС", 
					Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство,
					Перечисления.ВидыВнеоборотныхАктивов.НМА);
	Запрос.УстановитьПараметр("ВидОбъекта", ВидОбъекта);
	
	Результат = Запрос.Выполнить();
	
	ВнешниеНаборыДанных.Вставить("Амортизация" + ИмяОбъектов + "_24", Результат.Выгрузить());
	
	УдалитьДокументы("Амортизация" + ИмяОбъектов + "2_4", ЗначенияОтбораДанных);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ДобавитьАмортизациюМеждународный(ИмяОбъектов, ЗначенияОтбораДанных, ВнешниеНаборыДанных, СписокПроблем)

	Если НЕ ЗначенияОтбораДанных.СверкаРасчетаУпр Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАмортизации = Неопределено;
	
	ТекущийПериод = КонецМесяца(ЗначенияОтбораДанных.НачалоПериода);
	Пока ТекущийПериод <= ЗначенияОтбораДанных.ОкончаниеПериода Цикл
	
		Для каждого Организация Из ЗначенияОтбораДанных.СписокОрганизаций Цикл
			
			Попытка
			
				Если ИмяОбъектов = "ОС" Тогда
					ДокументАмортизация = Документы.АмортизацияОСМеждународныйУчет.СоздатьДокумент();
				Иначе
					ДокументАмортизация = Документы.АмортизацияНМАМеждународныйУчет.СоздатьДокумент();
				КонецЕсли; 
				
				ДокументАмортизация.Дата = ТекущийПериод;
				ДокументАмортизация.Организация = Организация;
				ДокументАмортизация.ДополнительныеСвойства.Вставить("ДобавитьПараметрыРасчета");
				ДокументАмортизация.Записать(РежимЗаписиДокумента.Проведение);
				
				ДополнитьТаблицу22(
					ПараметрыАмортизации, 
					ДокументАмортизация.ДополнительныеСвойства.ПараметрыАмортизации, 
					Организация, 
					ТекущийПериод,
					ИмяОбъектов);
			
			Исключение
				ТекстСообщения = СтрШаблон(НСтр("ru = '- не удалось расчитать амортизацию по причине: %1';
												|en = '-  cannot calculate depreciation due to: %1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				СписокПроблем.Добавить(ТекстСообщения);
			КонецПопытки; 
			
		КонецЦикла; 
		
		ТекущийПериод = КонецМесяца(ДобавитьМесяц(ТекущийПериод, 1));
		
	КонецЦикла; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчета.СчетАмортизации КАК СчетАмортизации
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	РегистрСведений.ОсновныеСредстваМеждународныйУчет КАК СчетаУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ВидОбъекта КАК ИмяОбъектов,
	|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ) КАК Дата,
	|	НачисленнаяАмортизация.Организация КАК Организация,
	|	НачисленнаяАмортизация.ПодразделениеКт КАК Подразделение,
	|	НачисленнаяАмортизация.СубконтоКт1 КАК ВнеоборотныйАктив,
	|	СУММА(НачисленнаяАмортизация.Сумма) КАК АмортизацияУУ_22
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто КАК НачисленнаяАмортизация
	|ГДЕ
	|	НачисленнаяАмортизация.Регистратор ССЫЛКА Документ.АмортизацияОСМеждународныйУчет
	|	И НачисленнаяАмортизация.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И НачисленнаяАмортизация.СчетКт В
	|			(ВЫБРАТЬ
	|				СчетаУчета.СчетАмортизации
	|			ИЗ
	|				СчетаУчета КАК СчетаУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленнаяАмортизация.Организация,
	|	НачисленнаяАмортизация.ПодразделениеКт,
	|	НачисленнаяАмортизация.СубконтоКт1,
	|	КОНЕЦПЕРИОДА(НачисленнаяАмортизация.Период, МЕСЯЦ)";
	
	Если ИмяОбъектов = "НМА" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ОсновныеСредстваМеждународныйУчет", "РегистрСведений.НематериальныеАктивыМеждународныйУчет");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АмортизацияОСМеждународныйУчет", "Документ.АмортизацияНМАМеждународныйУчет");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	
	ВидОбъекта = ?(ИмяОбъектов = "ОС", 
					Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство,
					Перечисления.ВидыВнеоборотныхАктивов.НМА);
	Запрос.УстановитьПараметр("ВидОбъекта", ВидОбъекта);
	
	Результат = Запрос.Выполнить();
	
	ВнешниеНаборыДанных.Вставить("Амортизация" + ИмяОбъектов + "_Упр_22", Результат.Выгрузить());
	
	Если ПараметрыАмортизации <> Неопределено Тогда
		
		ОбработатьТаблицуПараметровАмортизации22(ПараметрыАмортизации);
		ОчиститьНеиспользуемыеПараметры("УУ", ИмяОбъектов, "_22", ПараметрыАмортизации);
		
		ВнешниеНаборыДанных.Вставить("ПараметрыАмортизации" + ИмяОбъектов + "_Упр_22", ПараметрыАмортизации);
		
	КонецЕсли; 
	
	УдалитьДокументы("Амортизация" + ИмяОбъектов + "МеждународныйУчет", ЗначенияОтбораДанных);
	
КонецПроцедуры

//-- НЕ УТКА

Процедура ДобавитьОтсутствующийНабор(ИмяНабора, КоллекцияНаборов, ВнешниеНаборыДанных)

	Если ВнешниеНаборыДанных.Свойство(ИмяНабора) Тогда
		Возврат;
	КонецЕсли; 
	
	НаборДанных = КоллекцияНаборов.Элементы.Найти(ИмяНабора);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для каждого ПолеНабора Из НаборДанных.Поля Цикл
		ТаблицаДанных.Колонки.Добавить(ПолеНабора.Поле, ПолеНабора.ТипЗначения);
	КонецЦикла; 

	ВнешниеНаборыДанных.Вставить(ИмяНабора, ТаблицаДанных);
	
КонецПроцедуры
 
Процедура СоздатьЗаданияКРасчетуАмортизации(ЗначенияОтбораДанных, МенеджерВременныхТаблиц)

	РегистрыСведений.ПакетыАмортизацииОС.СоздатьПакетыАмортизации(ЗначенияОтбораДанных.СписокОрганизаций);
	РегистрыСведений.ПакетыАмортизацииНМА.СоздатьПакетыАмортизации(ЗначенияОтбораДанных.СписокОрганизаций);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""ЗаданияКРасчетуАмортизацииОС"" КАК ИмяРегистра,
	|	ЗаданияКРасчетуАмортизации.Месяц КАК Месяц,
	|	ЗаданияКРасчетуАмортизации.Организация КАК Организация,
	|	ЗаданияКРасчетуАмортизации.НомерПакета КАК НомерПакета,
	|	ЗаданияКРасчетуАмортизации.НомерЗадания КАК НомерЗадания,
	|	ЗаданияКРасчетуАмортизации.Документ КАК Документ
	|ПОМЕСТИТЬ СтарыеЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК ЗаданияКРасчетуАмортизации
	|ГДЕ
	|	ЗаданияКРасчетуАмортизации.Месяц <= &ОкончаниеПериода
	|	И (ЗаданияКРасчетуАмортизации.Организация В(&СписокОрганизаций)
	|		ИЛИ НЕ &ИспользоватьСписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЗаданияКРасчетуАмортизацииНМА"",
	|	ЗаданияКРасчетуАмортизации.Месяц,
	|	ЗаданияКРасчетуАмортизации.Организация,
	|	ЗаданияКРасчетуАмортизации.НомерПакета,
	|	ЗаданияКРасчетуАмортизации.НомерЗадания,
	|	ЗаданияКРасчетуАмортизации.Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК ЗаданияКРасчетуАмортизации
	|ГДЕ
	|	ЗаданияКРасчетуАмортизации.Месяц <= &ОкончаниеПериода
	|	И (ЗаданияКРасчетуАмортизации.Организация В(&СписокОрганизаций)
	|		ИЛИ НЕ &ИспользоватьСписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРасчетуАмортизацииОС"" КАК ИмяРегистра,
	|	ПакетыАмортизацииОС.Организация КАК Организация,
	|	ПакетыАмортизацииОС.НомерПакета КАК НомерПакета
	|ИЗ
	|	РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизацииОС
	|
	|ГДЕ
	|	(ПакетыАмортизацииОС.Организация В(&СписокОрганизаций)
	|		ИЛИ НЕ &ИспользоватьСписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ЗаданияКРасчетуАмортизацииНМА"",
	|	ПакетыАмортизацииНМА.Организация,
	|	ПакетыАмортизацииНМА.НомерПакета
	|ИЗ
	|	РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизацииНМА
	|
	|ГДЕ
	|	(ПакетыАмортизацииНМА.Организация В(&СписокОрганизаций)
	|		ИЛИ НЕ &ИспользоватьСписокОрганизаций)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("ИспользоватьСписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций.Количество() <> 0);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НомерЗаданияОС  = Константы.НомерЗаданияКРасчетуАмортизацииОС.Получить();
	НомерЗаданияНМА = Константы.НомерЗаданияКРасчетуАмортизацииНМА.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийПериод = НачалоМесяца(ЗначенияОтбораДанных.НачалоПериода);
		Пока ТекущийПериод <= ЗначенияОтбораДанных.ОкончаниеПериода Цикл
			
			Если Выборка.ИмяРегистра = "ЗаданияКРасчетуАмортизацииОС" Тогда
				НоваяЗапись = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьМенеджерЗаписи();
				НомерЗадания = НомерЗаданияОС;
			Иначе
				НоваяЗапись = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьМенеджерЗаписи();
				НомерЗадания = НомерЗаданияНМА;
			КонецЕсли; 
			
			НоваяЗапись.Месяц = ТекущийПериод;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.НомерПакета = Выборка.НомерПакета;
			НоваяЗапись.НомерЗадания = НомерЗадания;
			НоваяЗапись.Записать(Истина);
			
			ТекущийПериод = ДобавитьМесяц(ТекущийПериод, 1); 
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВернутьЗаданияКРасчетуАмортизации(МенеджерВременныхТаблиц)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаданияКРасчетуАмортизации.ИмяРегистра КАК ИмяРегистра,
	|	ЗаданияКРасчетуАмортизации.Месяц КАК Месяц,
	|	ЗаданияКРасчетуАмортизации.Организация КАК Организация,
	|	ЗаданияКРасчетуАмортизации.НомерПакета КАК НомерПакета,
	|	ЗаданияКРасчетуАмортизации.НомерЗадания КАК НомерЗадания,
	|	ЗаданияКРасчетуАмортизации.Документ КАК Документ
	|ИЗ
	|	СтарыеЗадания КАК ЗаданияКРасчетуАмортизации";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИмяРегистра = "ЗаданияКРасчетуАмортизацииОС" Тогда
			НоваяЗапись = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьМенеджерЗаписи();
		Иначе
			НоваяЗапись = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьМенеджерЗаписи();
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДокументы(ИмяДокумента, ЗначенияОтбораДанных)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АмортизацияОС2_4 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Организация В(&СписокОрганизаций)
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.АмортизацияОС2_4", "Документ." + ИмяДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ЗначенияОтбораДанных.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ЗначенияОтбораДанных.ОкончаниеПериода);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументАмортизация = Выборка.Ссылка.ПолучитьОбъект();
		ДокументАмортизация.УстановитьПометкуУдаления(Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицу22(ТаблицаПолучатель, ТаблицаИсточник, Организация, Дата, ИмяОбъектов)

	ВидОбъекта = ?(ИмяОбъектов = "ОС", 
					Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство,
					Перечисления.ВидыВнеоборотныхАктивов.НМА);
					
	ПроверитьСуммы = ТаблицаИсточник.Колонки.Найти("СуммаВР") <> Неопределено
						И ТаблицаИсточник.Колонки.Найти("СуммаПР") <> Неопределено
						И ТаблицаИсточник.Колонки.Найти("СчетНачисленияАмортизации") <> Неопределено;
		
	Если ТаблицаПолучатель = Неопределено Тогда
		
		ТаблицаПолучатель = ТаблицаИсточник.Скопировать();
		ТаблицаПолучатель.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаПолучатель.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ТаблицаПолучатель.Колонки.Добавить("ИмяОбъектов", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВнеоборотныхАктивов"));
		
		ТаблицаПолучатель.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаПолучатель.ЗаполнитьЗначения(Дата, "Дата");
		ТаблицаПолучатель.ЗаполнитьЗначения(ВидОбъекта, "ИмяОбъектов");
		
		Если ПроверитьСуммы Тогда
			Для каждого НоваяСтрока Из ТаблицаПолучатель Цикл
				Если НоваяСтрока.СчетНачисленияАмортизации = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств Тогда
					НоваяСтрока.СуммаВР = 0;
					НоваяСтрока.СуммаПР = 0;
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
			
			НоваяСтрока = ТаблицаПолучатель.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыИсточник);
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.Дата = Дата;
			НоваяСтрока.ИмяОбъектов = ВидОбъекта;
			
			Если ПроверитьСуммы Тогда
				Если НоваяСтрока.СчетНачисленияАмортизации = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств Тогда
					НоваяСтрока.СуммаВР = 0;
					НоваяСтрока.СуммаПР = 0;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьТаблицуАмортизации22(НачисленнаяАмортизация)

	НачисленнаяАмортизация.Колонки.ОбъектУчета.Имя = "ВнеоборотныйАктив";
	НачисленнаяАмортизация.Колонки.СуммаБУ.Имя = "АмортизацияБУ_22";
	НачисленнаяАмортизация.Колонки.СуммаНУ.Имя = "АмортизацияНУ_22";
	НачисленнаяАмортизация.Колонки.СуммаПР.Имя = "АмортизацияПР_22";
	НачисленнаяАмортизация.Колонки.СуммаВР.Имя = "АмортизацияВР_22";
	НачисленнаяАмортизация.Колонки.Добавить("АмортизацияЦФ_22");
	НачисленнаяАмортизация.Колонки.Добавить("АмортизацияНУЦФ_22");
	НачисленнаяАмортизация.Колонки.Добавить("АмортизацияПРЦФ_22");
	НачисленнаяАмортизация.Колонки.Добавить("АмортизацияВРЦФ_22");
	
	Для каждого ДанныеСтроки Из НачисленнаяАмортизация Цикл
		Если ДанныеСтроки.ЭтоЦелевыеСредства Тогда
			ДанныеСтроки.АмортизацияЦФ_22 = ДанныеСтроки.АмортизацияБУ_22;
			ДанныеСтроки.АмортизацияНУЦФ_22 = ДанныеСтроки.АмортизацияНУ_22;
			ДанныеСтроки.АмортизацияПРЦФ_22 = ДанныеСтроки.АмортизацияПР_22;
			ДанныеСтроки.АмортизацияВРЦФ_22 = ДанныеСтроки.АмортизацияВР_22;
			ДанныеСтроки.АмортизацияБУ_22 = 0;
			ДанныеСтроки.АмортизацияНУ_22 = 0;
			ДанныеСтроки.АмортизацияПР_22 = 0;
			ДанныеСтроки.АмортизацияВР_22 = 0;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ОбработатьТаблицуПараметровАмортизации22(ПараметрыАмортизации)

	ПараметрыАмортизации.Колонки.ОбъектУчета.Имя = "ВнеоборотныйАктив";

	Для каждого КолонкаТаблицы Из ПараметрыАмортизации.Колонки Цикл
		Если КолонкаТаблицы.Имя <> "Дата"
			И КолонкаТаблицы.Имя <> "Организация"
			И КолонкаТаблицы.Имя <> "ВнеоборотныйАктив"
			И КолонкаТаблицы.Имя <> "ИмяОбъектов" Тогда
			
			КолонкаТаблицы.Имя = КолонкаТаблицы.Имя + "_22";
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработатьТаблицуПараметровАмортизации24(ИмяОбъектов, ПараметрыАмортизации)

	Для каждого КолонкаТаблицы Из ПараметрыАмортизации.Колонки Цикл
		Если КолонкаТаблицы.Имя <> "Дата"
			И КолонкаТаблицы.Имя <> "Организация"
			И КолонкаТаблицы.Имя <> "ВнеоборотныйАктив" Тогда
			
			КолонкаТаблицы.Имя = КолонкаТаблицы.Имя + "_24";
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыАмортизации.Колонки.Добавить("ИмяОбъектов", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыВнеоборотныхАктивов"));
	
	ВидОбъекта = ?(ИмяОбъектов = "ОС", 
					Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство,
					Перечисления.ВидыВнеоборотныхАктивов.НМА);
	
	ПараметрыАмортизации.ЗаполнитьЗначения(ВидОбъекта, "ИмяОбъектов");
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеПараметры(ВидУчета, ИмяОбъектов, ВерсияРасчета, ПараметрыАмортизации)

	Для каждого ДанныеСтроки Из ПараметрыАмортизации Цикл
		
		Если ИмяОбъектов = "ОС" Тогда
			
			Если ВидУчета = "БУ" Тогда
				
				// БУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияБУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					ДанныеСтроки["СтоимостьНаНачалоГодаБУ" + ВерсияРасчета] = 0;
					ДанныеСтроки["КоэффициентУскоренияБУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
					И МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					ДанныеСтроки["ВыработкаЗаМесяцБУ" + ВерсияРасчета] = 0;
					ДанныеСтроки["ОбъемПродукцииБУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ
					И МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					ДанныеСтроки["КоэффициентАмортизацииБУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
					ДанныеСтроки["ФактическийСрокИспользования" + ВерсияРасчета] = 0;
					ДанныеСтроки["ОставшийсяСрокИспользования" + ВерсияРасчета] = 0;
				КонецЕсли;
			
			ИначеЕсли ВидУчета = "НУ" Тогда
				
				// НУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияНУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
					ДанныеСтроки["НормаАмортизацииНУ" + ВерсияРасчета] = 0;
				КонецЕсли; 
				
			Иначе
				
				// УУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияУУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					ДанныеСтроки["ОтработанныхМесяцевПолныхЛет" + ВерсияРасчета] = 0;
					ДанныеСтроки["КоэффициентУскоренияУУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе	
			
			Если ВидУчета = "БУ" Тогда
				
				// БУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияБУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
					ДанныеСтроки["ВыработкаЗаМесяцБУ" + ВерсияРасчета] = 0;
					ДанныеСтроки["ОбъемПродукцииБУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
					ДанныеСтроки["КоэффициентАмортизацииБУ" + ВерсияРасчета] = 0;
					ДанныеСтроки["ФактическийСрокИспользования" + ВерсияРасчета] = 0;
					ДанныеСтроки["ОставшийсяСрокИспользования" + ВерсияРасчета] = 0;
				КонецЕсли;
				
			ИначеЕсли ВидУчета = "НУ" Тогда
				
				// НУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияНУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
					ДанныеСтроки["НормаАмортизацииНУ" + ВерсияРасчета] = 0;
				КонецЕсли;
			
			Иначе
				
				// УУ
				МетодНачисления = ДанныеСтроки["МетодНачисленияУУ" + ВерсияРасчета];
				
				Если МетодНачисления <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					ДанныеСтроки["КоэффициентУскоренияУУ" + ВерсияРасчета] = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияНастроек

Процедура НастроитьПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетВнеоборотныхАктивовПоНаправлениямДеятельности") Тогда
		
		ИменаЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ПустаяЯчейкаЦФ1,ПустаяЯчейкаЦФ2,ПустаяЯчейкаЦФ3,
			|АмортизацияЦФ_22,АмортизацияНУЦФ_22,АмортизацияПРЦФ_22,АмортизацияВРЦФ_22,АмортизацияУУЦФ_22,
			|АмортизацияЦФ_24,АмортизацияНУЦФ_24,АмортизацияПРЦФ_24,АмортизацияВРЦФ_24,АмортизацияУУЦФ_24,
			|РасхождениеЦФ,РасхождениеНУЦФ,РасхождениеПРЦФ,РасхождениеВРЦФ,РасхождениеУУЦФ", ",", , Истина);
		КомпоновкаДанныхСервер.УдалитьВыбранноеПолеИзВсехНастроекОтчета(КомпоновщикНастроекФормы, ИменаЭлементов);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПериодОтчета(КомпоновщикНастроекФормы)

	ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекФормы, "ПериодОтчета"); 
	Если НЕ ЗначениеЗаполнено(ПараметрПериод.Значение.ДатаНачала) Тогда
		
		ПараметрПериод.Значение.ДатаНачала = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
		ПараметрПериод.Значение.ДатаОкончания = КонецМесяца(ПараметрПериод.Значение.ДатаНачала);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьВыполнениеРасчетаАмортизацииДоДатыНачала(ЗначенияОтбораДанных, СписокПроблем)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&АмортизацияОС КАК ТекстСообщения,
	|	ЗаданияКРасчету.Организация.Представление КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииОС КАК ЗаданияКРасчету
	|ГДЕ
	|	ЗаданияКРасчету.Организация В(&СписокОрганизаций)
	|	И ЗаданияКРасчету.Месяц < &НачалоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&АмортизацияНМА,
	|	ЗаданияКРасчету.Организация.Представление
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуАмортизацииНМА КАК ЗаданияКРасчету
	|ГДЕ
	|	ЗаданияКРасчету.Организация В(&СписокОрганизаций)
	|	И ЗаданияКРасчету.Месяц < &НачалоПериода";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ЗначенияОтбораДанных.НачалоПериода));
	Запрос.УстановитьПараметр("АмортизацияОС", НСтр("ru = '- для организации ""%1"" не выполнен расчет амортизации ОС до даты начала учета';
													|en = '- FA depreciation is not calculated for the ""%1"" company before accounting start date'"));
	Запрос.УстановитьПараметр("АмортизацияНМА", НСтр("ru = '- для организации ""%1"" не выполнен расчет амортизации НМА до даты начала учета';
													|en = '- IA depreciation is not calculated for the ""%1"" company before accounting start date'"));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = Выборка.ТекстСообщения;
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Организация);
		СписокПроблем.Добавить(ТекстСообщения); 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаличиеДокументовВПроверяемомПериоде(ЗначенияОтбораДанных, СписокПроблем)

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ОформленыДокументыОС КАК ТекстСообщения
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Организация В(&СписокОрганизаций)
	|	И РеестрДокументов.ТипСсылки В(&ТипыДокументовОС)
	|	И РеестрДокументов.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеестрДокументов.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ОформленыДокументыНМА
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Организация В(&СписокОрганизаций)
	|	И РеестрДокументов.ТипСсылки В(&ТипыДокументовНМА)
	|	И РеестрДокументов.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РеестрДокументов.Проведен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", ЗначенияОтбораДанных.СписокОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ЗначенияОтбораДанных.НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", НачалоМесяца(ЗначенияОтбораДанных.ОкончаниеПериода));
	Запрос.УстановитьПараметр("ОформленыДокументыОС", НСтр("ru = '- в проверяемом периоде оформлены документы по основным средствам';
															|en = '- fixed asset documents are registered in checked period'"));
	Запрос.УстановитьПараметр("ОформленыДокументыНМА", НСтр("ru = '- в проверяемом периоде оформлены документы по нематериальным активам';
															|en = '- intangible asset documents are registered in the period to check'"));
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.АмортизацияОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.АмортизацияОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВводОстатковВнеоборотныхАктивов"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВозвратОСИзАренды"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВозвратОСИзАренды2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВыбытиеАрендованныхОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИзменениеПараметровОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИзменениеПараметровОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИзменениеСостоянияОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.МодернизацияОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.МодернизацияОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПередачаОСВАренду"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПередачаОСВАренду2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПеремещениеОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПеремещениеОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПереоценкаОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПереоценкаОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПодготовкаКПередачеОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПодготовкаКПередачеОС2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПоступлениеАрендованныхОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуОС2_4"));
	//++ НЕ УТ
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	//-- НЕ УТ
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РазукомплектацияОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеОС"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеОС2_4"));
	Запрос.УстановитьПараметр("ТипыДокументовОС", ТипыДокументов);
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.АмортизацияНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.АмортизацияНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИзменениеПараметровНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИзменениеПараметровНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПеремещениеНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПереоценкаНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПереоценкаНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПодготовкаКПередачеНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПодготовкаКПередачеНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПринятиеКУчетуНМА2_4"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеНМА"));
	ТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СписаниеНМА2_4"));
	Запрос.УстановитьПараметр("ТипыДокументовНМА", ТипыДокументов);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПроблем.Добавить(Выборка.ТекстСообщения); 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьПерехода(ЗначенияОтбораДанных, СписокПроблем)

	ПереносДанныхЗавершен = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.ПереносДанныхЗавершен();
	
	СведенияОПроблемах = Обработки.ПомощникПереходаНаУчетВнеоборотныхАктивовВерсии24.СведенияЗарегистрированныхПроблемах(
						ЗначенияОтбораДанных.СписокОрганизаций);
						
	Если СведенияОПроблемах.КоличествоПроблем <> 0 Тогда
		
		ТекстСообщения = НСтр("ru = '- переход не завершен, имеются ошибки, необходимо исправить ошибки';
								|en = '- Migration is not completed, there are errors, you need to correct the errors'");
		СписокПроблем.Добавить(ТекстСообщения);
		
	ИначеЕсли ПереносДанныхЗавершен = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = '- нет сведений о работе помощника перехода, рекомендуется проверить переход с помощью помощника';
								|en = '- no information on migration wizard operation, it is recommended that you check migration using the wizard'");
		СписокПроблем.Добавить(ТекстСообщения);
		
	ИначеЕсли НЕ ПереносДанныхЗавершен Тогда
		
		ТекстСообщения = НСтр("ru = '- переход не завершен, необходимо воспользоваться помощником перехода';
								|en = '- Migration is not completed. Use the migration wizard'");
		СписокПроблем.Добавить(ТекстСообщения);
		
	КонецЕсли;
	
	//++ НЕ УТКА
	УчетВФункциональнойВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	                                Справочники.ПланыСчетовМеждународногоУчета.Международный, "УчетВФункциональнойВалюте");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет")
		И УчетВФункциональнойВалюте <> Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		
		ТекстСообщения = НСтр("ru = '- функциональная валюта международного учета не в валюте упр. учета - сверка расчета в упр. учете невозможна';
								|en = '- functional currency of international accounting is not in the man. presentation currency - cannot reconcile calculation in man. accounting'");
		СписокПроблем.Добавить(ТекстСообщения);
		
	КонецЕсли; 
	//-- НЕ УТКА
	
КонецПроцедуры
 
Функция ПолучитьЗначенияОтбораДанных(НастройкиОсновнойСхемы)

	ЭлементыОтбора = НастройкиОсновнойСхемы.Отбор.Элементы;
	
	ЗначенияОтбораДанных = Новый Структура;
	ЗначенияОтбораДанных.Вставить("СписокОрганизаций", ОтчетыУТСервер.ЗначениеОтбора("Организация", ЭлементыОтбора));
	
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "ПериодОтчета").Значение;
	ЗначенияОтбораДанных.Вставить("НачалоПериода", НачалоМесяца(Период.ДатаНачала));
	ЗначенияОтбораДанных.Вставить("ОкончаниеПериода", КонецМесяца(Период.ДатаОкончания));
	
	ПараметрЭтоКопияИБ = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОсновнойСхемы, "ЭтоКопияИБ");
	ЗначенияОтбораДанных.Вставить("ЭтоКопияИБ", ?(ПараметрЭтоКопияИБ.Использование, ПараметрЭтоКопияИБ.Значение, Ложь));
	
	Если ЗначенияОтбораДанных.СписокОрганизаций.Количество() = 0 Тогда
		ЗначенияОтбораДанных.СписокОрганизаций = ВнеоборотныеАктивыСлужебный.СписокРазрешенныхОрганизаций();
	КонецЕсли;
	
	СверкаРасчетаУпр = Ложь;
	//++ НЕ УТКА
	УчетВФункциональнойВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		                            Справочники.ПланыСчетовМеждународногоУчета.Международный, "УчетВФункциональнойВалюте");
	СверкаРасчетаУпр = ПолучитьФункциональнуюОпцию("ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет")
						И УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр;
	//-- НЕ УТКА
	ЗначенияОтбораДанных.Вставить("СверкаРасчетаУпр", СверкаРасчетаУпр);
	
	Возврат ЗначенияОтбораДанных;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#КонецЕсли