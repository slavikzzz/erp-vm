#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	НовыеНастройкиКД - НастройкиКомпоновкиДанных -
Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("ПараметрКоманды") Тогда
		
		Параметр = Форма.Параметры.ПараметрКоманды;
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр, "Подразделение"));
			
			Если НЕ ПараметрыПодразделения.ИспользоватьСменныеЗадания Тогда
				
				УдалитьСменноеЗаданиеИзНастроекКомпоновки(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Параметры.Свойство("ПараметрКоманды") Тогда
		
		Параметр = Форма.Параметры.ПараметрКоманды;
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			Форма.ФормаПараметры.Отбор.Вставить("Этап", Параметр);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - 
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("ПараметрКоманды") Тогда
		
		Параметр = Форма.Параметры.ПараметрКоманды;
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметр, "Подразделение"));
			
			Если НЕ ПараметрыПодразделения.ИспользоватьСменныеЗадания Тогда
				
				УдалитьСменноеЗаданиеИзНастроекКомпоновки(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСменноеЗаданиеИзНастроекКомпоновки(Форма)
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	// Дата задания
	Поле = Новый ПолеКомпоновкиДанных("ДатаЗадания");
	СоответствиеЭлементов = Новый Соответствие;
	
	НайтиГруппировкуРекурсивно(Настройки.Структура, СоответствиеЭлементов, Поле);
	Для Каждого Группировка Из СоответствиеЭлементов Цикл
		
		Ключ = Группировка.Ключ;//ГруппировкаТаблицыКомпоновкиДанных, ГруппировкаКомпоновкиДанных -
		
		Если Ключ.ПоляГруппировки.Элементы.Количество() = 1 Тогда
			Ключ.Родитель.Структура.Удалить(Группировка.Ключ);
		Иначе
			Ключ.ПоляГруппировки.Элементы.Удалить(Группировка.Значение);
		КонецЕсли;
		
		УдалитьВыбранноеПоле(Ключ.Выбор, Поле, Настройки);
		
	КонецЦикла;
	
	КомпоновкаДанныхСервер.УдалитьЭлементОтбораИзВсехНастроекОтчета(Настройки, "ДатаЗадания");
	
КонецПроцедуры

Процедура НайтиГруппировкуРекурсивно(КоллекцияЭлементов, СоответствиеЭлементов, ЗначениеПоиска)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(Элемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Для Каждого ПолеГруппировки Из Элемент.ПоляГруппировки.Элементы Цикл 
				Если ПолеГруппировки.Поле = ЗначениеПоиска Тогда
					СоответствиеЭлементов.Вставить(Элемент, ПолеГруппировки)
				КонецЕсли;
			КонецЦикла;
			НайтиГруппировкуРекурсивно(Элемент.Структура, СоответствиеЭлементов, ЗначениеПоиска);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			НайтиГруппировкуРекурсивно(Элемент.Строки, СоответствиеЭлементов, ЗначениеПоиска);
			НайтиГруппировкуРекурсивно(Элемент.Колонки, СоответствиеЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ВыбранныеПоля - ВыбранныеПоляКомпоновкиДанных -
// 	ЗначениеПоиска - ПолеКомпоновкиДанных -
// 	Настройки - НастройкиКомпоновкиДанных -
Процедура УдалитьВыбранноеПоле(ВыбранныеПоля, ЗначениеПоиска, Настройки)
	
	МассивЭлементов = Новый Массив;// Массив из ВыбранноеПолеКомпоновкиДанных - 
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначениеПоиска);
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);;
		Если Элемент.Родитель <> Неопределено Тогда
			Элемент.Родитель.Элементы.Удалить(Элемент);
		Иначе
			ВыбранныеПоля.Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранноеПолеРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначениеПоиска)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			Если Элемент.Поле = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(Элемент);
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		Иначе
			НайтиВыбранноеПолеРекурсивно(Элемент.Элементы, МассивЭлементов, ЗначениеПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли