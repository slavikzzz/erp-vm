#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	// Заполняем параметры отчета.
	
	ПараметрыОтчета.СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"Организация",
		ПараметрыОтчета.СписокОрганизаций);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "Период", КонецДня(ПараметрыОтчета.Период) + 1);
	
	СтруктураСчетов = СтруктураСчетов(БухгалтерскиеОтчеты.СчетаУчетаТоваров());
	Для Каждого Счета Из СтруктураСчетов Цикл
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Счета.Ключ, Счета.Значение);
	КонецЦикла;
	
	КоличествоИнтервалов = ПараметрыОтчета.Интервалы.Количество();
	
	// Доработка схемы под заданные интервалы
	Схема.НаборыДанных.ОсновнойНабор.Запрос = ПолучитьТекстЗапроса(КоличествоИнтервалов);
	
	УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек);
	
	// Группировка
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировки(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	// Вывод доп.реквизитов в отдельных колонках будет настроен индивидуально для каждой группировки
	// в НастроитьГруппировки().
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы,
		"РасположениеРеквизитов",
		РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем);
	
	НастроитьГруппировки(КомпоновщикНастроек.Настройки.Структура);
	ОбработатьДопПоля(КомпоновщикНастроек);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	// Обработка макета компоновки для вывода.
	МакетШапкиОтчета = БухгалтерскиеОтчеты.ПолучитьМакетШапки(МакетКомпоновки);
	
	Для Каждого СтрокаМакета Из МакетШапкиОтчета.Макет Цикл
		Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
			Если Ячейка.Элементы.Количество() <> 3 Тогда
				Продолжить;
			КонецЕсли;
			
			СловаГруппы = Новый Массив;
			СловаГруппы.Добавить(Ячейка.Элементы[0].Значение);
			СловаГруппы.Добавить(Ячейка.Элементы[1].Значение);
			СловаГруппы.Добавить(Ячейка.Элементы[2].Значение);
			Если ВРег(СтрСоединить(СловаГруппы)) = НСтр("ru = 'СЧЕТ, НАИМЕНОВАНИЕ СЧЕТА';
														|en = 'ACCOUNT, ACCOUNT NAME'") Тогда
				Ячейка.Элементы[1].Значение = "";
				Ячейка.Элементы[2].Значение = "";
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	// Инициализируем список мунктов меню
	СписокПунктовМеню = Новый СписокЗначений();
	
	// Заполниим соответствие полей которые мы хотим получить из данных расшифровки
	СоответствиеПолей = Новый Соответствие;
	ДанныеОтчета = ПолучитьИзВременногоХранилища(Адрес);
	
	ЗначениеРасшифровки = ДанныеОтчета.ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для Каждого ПолеРасшифровки ИЗ ЗначениеРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеЗаполнено(ПолеРасшифровки.Значение) Тогда
				ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
				ПараметрыРасшифровки.Вставить("Значение", ПолеРасшифровки.Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Укажем что открывать объект сразу не нужно
	ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
	
	Если ДанныеОтчета = Неопределено Тогда
		ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
		Возврат;
	КонецЕсли;
	
	// Прежде всего интересны данные группировочных полей
	Для Каждого Группировка Из ДанныеОтчета.Объект.Группировка Цикл
		СоответствиеПолей.Вставить(Группировка.Поле);
	КонецЦикла;
	
	// Инициализация пользовательских настроек
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",   Истина);
	ДополнительныеСвойства.Вставить("Организация",        ДанныеОтчета.Объект.Организация);
	ДополнительныеСвойства.Вставить("Период",             ДанныеОтчета.Объект.Период);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",  ДанныеОтчета.Объект.ВыводитьЗаголовок);
	ДополнительныеСвойства.Вставить("ВыводитьПодвал",     ДанныеОтчета.Объект.ВыводитьПодвал);
	ДополнительныеСвойства.Вставить("МакетОформления",    ДанныеОтчета.Объект.МакетОформления);
	ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения",
		ДанныеОтчета.Объект.ВключатьОбособленныеПодразделения);
	
	// Получаем соответствие полей доступных в расшифровке
	Данные_Расшифровки = БухгалтерскиеОтчеты.ПолучитьДанныеРасшифровки(
		ДанныеОтчета.ДанныеРасшифровки, СоответствиеПолей, Расшифровка);
	
	ОтборПоЗначениямРасшифровки = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборПоЗначениямРасшифровки.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Каждого ЗначениеРасшифровки Из Данные_Расшифровки Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ОтборПоЗначениямРасшифровки, ЗначениеРасшифровки.Ключ, ЗначениеРасшифровки.Значение);
	КонецЦикла;
	
	Группировка = Новый Массив();
	Для Каждого СтрокаГруппировки Из ДанныеОтчета.Объект.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			СтрокаДляРасшифровки = Новый Структура("Использование, Поле, Представление, ТипГруппировки");
			ЗаполнитьЗначенияСвойств(СтрокаДляРасшифровки, СтрокаГруппировки);
			Группировка.Добавить(СтрокаДляРасшифровки);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ПоказательКоличество", ДанныеОтчета.Объект.ПоказательКоличество);
	ДополнительныеСвойства.Вставить("ПоказательСтоимость",  ДанныеОтчета.Объект.ПоказательСтоимость);
	ДополнительныеСвойства.Вставить("ПоказательСумма",      ДанныеОтчета.Объект.ПоказательСумма);
	
	ДополнительныеСвойства.Вставить("Группировка", Группировка);
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок", Истина);
	
	Интервалы = Новый Массив();
	Для Каждого Интервал Из ДанныеОтчета.Объект.Интервалы Цикл
		СтрокаИнтервал = Новый Структура("Значение, Представление");
		ЗаполнитьЗначенияСвойств(СтрокаИнтервал, Интервал);
		Интервалы.Добавить(СтрокаИнтервал);
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("Интервалы", Интервалы);
	ДополнительныеСвойства.Вставить("ОчищатьИнтервалы", Истина);
	
	СписокПунктовМеню.Добавить("ОстаткиТоваровПоСрокамХранения", НСтр("ru = 'Остатки товаров по срокам хранения';
																		|en = 'Stock balance by retention periods'"));
	
	НастройкиРасшифровки = Новый Структура();
	НастройкиРасшифровки.Вставить("ОстаткиТоваровПоСрокамХранения", ПользовательскиеНастройки);
	ДанныеОтчета.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, Адрес);
	
	ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя, Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Общая структура настроек.
	ПараметрыОтчета = БухгалтерскиеОтчеты.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.ИдентификаторОтчета = "ОстаткиТоваровПоСрокамХранения";
	
	// Дополним параметрами, влияющими на формирование отчета.
	ОтчетОбъект = Отчеты.ОстаткиТоваровПоСрокамХранения.Создать();
	// 0 = В одной колонке, 1 = В отдельных колонках
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	ПараметрыОтчета.Вставить("НаборПоказателей",   ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("ДополнительныеПоля", ОтчетОбъект.ДополнительныеПоля.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("Группировка",        ОтчетОбъект.Группировка.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("Интервалы",          ОтчетОбъект.Интервалы.ВыгрузитьКолонки());
	ПараметрыОтчета.Вставить("СрокХраненияТовара", ОтчетОбъект.СрокХраненияТовара);
	
	ПараметрыОтчета.Вставить("Период",             Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("СписокОрганизаций",  Неопределено);
	ПараметрыОтчета.Вставить("КлючВарианта",       "");
	
	ПараметрыОтчета.Вставить("Заголовок",          "");
	
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		ПараметрыОтчета.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Ложь);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",              Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ЗаполнениеФинОтчетностиВБанкиПереопределяемый.НастроитьВариантыОтчетаОстаткиТоваровПоСрокамХранения(Настройки, ОписаниеОтчета);
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "ОстаткиТоваровПоСрокамХранения",
		НСтр("ru = 'Остатки товаров по срокам хранения';
			|en = 'Stock balance by retention periods'")));
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	ПредставлениеПериода = СтрШаблон(НСтр("ru = ' на %1';
											|en = ' by %1'"), Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy; ДП=..."));
	
	Возврат СтрШаблон(НСтр("ru = 'Остатки товаров по срокам хранения%1';
							|en = 'Stock balance by retention periods%1'"), ПредставлениеПериода);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьГруппировку(ЭлементСтруктуры)
	
	Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() <> 1
		Или Не ЭлементСтруктуры.ПоляГруппировки.Элементы[0].Использование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСтруктуры.ПоляГруппировки.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("Счет") Тогда
		СопутствующаяГруппировка = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		СопутствующаяГруппировка.Использование = Истина;
		СопутствующаяГруппировка.Поле = Новый ПолеКомпоновкиДанных("Счет.Наименование");
	Иначе
		// Доп.реквизиты, которые будут настраиваться пользователем, должны выходить в отдельных колонках,
		// кроме вывода предопределенного в отчете наименования счета.
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			ЭлементСтруктуры.ПараметрыВывода.Элементы,
			"РасположениеРеквизитов",
			РасположениеРеквизитовКомпоновкиДанных.Отдельно);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьГруппировки(Структура)
	
	Если Структура.Количество() = 0 Или Структура[0].Состояние <> СостояниеЭлементаНастройкиКомпоновкиДанных.Включен Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьГруппировку(Структура[0]);
	
	НастроитьГруппировки(Структура[0].Структура);
	
КонецПроцедуры

Процедура ОбработатьДопПоля(КомпоновщикНастроек)
	
	ОформляемыеПоля = ДопПоляСЗаданнойШириной();
	
	Поля = Новый Массив;
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если Элемент.Использование
			И ОформляемыеПоля[Строка(Элемент.Поле)] <> Неопределено Тогда
			Поля.Добавить(Элемент.Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Поле Из Поля Цикл
		ОформитьДопПоле(Поле, КомпоновщикНастроек);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьДопПоле(Поле, КомпоновщикНастроек)
	
	НашлиУО = Ложь;
	Для Каждого УО Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Для Каждого ОформляемоеПоле Из УО.Поля.Элементы Цикл
			Если ОформляемоеПоле = Поле Тогда
				НашлиУО = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не НашлиУО Тогда
		УО = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = УО.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Поле;
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УО.Оформление.Элементы, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УО.Оформление.Элементы, "МаксимальнаяШирина", 15);
	
КонецПроцедуры

Процедура НайтиДобавитьПоле(Схема, ИмяПоля, Родитель, Представление = "")
	
	Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти(ИмяПоля);
	Если Поле = Неопределено Тогда
		Поле = Схема.НаборыДанных.ОсновнойНабор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	КонецЕсли;
	
	ЭтоКоличество = СтрНачинаетсяС(ИмяПоля, "Остаток");
	Точность = ?(ЭтоКоличество, 3, 2);
	
	Поле.Поле        = ИмяПоля;
	Поле.ПутьКДанным = ИмяПоля;
	Если Не ПустаяСтрока(Представление) Тогда
		Поле.Заголовок = Представление;
	Иначе
		Поле.Заголовок = ?(ЭтоКоличество, НСтр("ru = 'Количество';
												|en = 'Quantity'"), НСтр("ru = 'Сумма';
																			|en = 'Amount'"));
	КонецЕсли;
	
	ЭтоИнтервальныйРесурс = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Прав(ИмяПоля, 1));
	
	Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, Точность));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		Поле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=" + Точность);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Поле.Оформление, "МаксимальнаяШирина", 15);
	Поле.ОграничениеИспользования.Группировка = Истина;
	Поле.ОграничениеИспользования.Условие     = Истина;
	Поле.ОграничениеИспользования.Порядок     = ЭтоИнтервальныйРесурс;
	Поле.ОграничениеИспользованияРеквизитов.Группировка = Истина;
	Поле.ОграничениеИспользованияРеквизитов.Условие     = Истина;
	Поле.ОграничениеИспользованияРеквизитов.Порядок     = ЭтоИнтервальныйРесурс;
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	Если ИмяПоля = "Стоимость" Тогда
		ПолеИтога.Выражение =
			"ВЫБОР КОГДА Сумма(ОстатокТоваров)= 0 ТОГДА 0 ИНАЧЕ Сумма(СуммаОстаток) / Сумма(ОстатокТоваров) КОНЕЦ";
		ПолеИтога.Группировки.Добавить(Новый ПолеКомпоновкиДанных("Номенклатура"));
	Иначе
		ПолеИтога.Выражение = "Сумма(" + ИмяПоля + ")";
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Родитель, ИмяПоля);
	
КонецПроцедуры

Процедура ДобавитьВычисляемоеПолеСуммаОстатокПериода(Схема, Индекс)
	
	ВыраженияПредыдущихУсловий = "";
	Для Счетчик = 1 По Индекс - 1 Цикл
		ВыраженияПредыдущихУсловий = ВыраженияПредыдущихУсловий + Символы.ПС
			+ "КОГДА СуммаОстатокПериода" + Счетчик + " - Дельта > 0 ТОГДА СуммаОстатокПериода" + Индекс;
	КонецЦикла;
	
	ВыражениеТекПоля = "КОГДА СуммаОстатокПериода" + Индекс + " - Дельта > 0 ТОГДА СуммаОстатокПериода" + Индекс
		+ " - Дельта ИНАЧЕ СуммаОстатокПериода" + Индекс + " КОНЕЦ";
	
	ВыражениеПоля = "ВЫБОР" + ВыраженияПредыдущихУсловий + Символы.ПС + ВыражениеТекПоля;
	
	НовоеПоле = Схема.ВычисляемыеПоля.Добавить();
	НовоеПоле.ПутьКДанным = "СуммаОстатокПериода" + Индекс;
	НовоеПоле.Заголовок = НСтр("ru = 'Сумма';
								|en = 'Amount'");
	НовоеПоле.Выражение = ВыражениеПоля;
	НовоеПоле.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		НовоеПоле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=2");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МаксимальнаяШирина", 15);
	
	НовоеПоле.ОграничениеИспользования.Группировка = Истина;
	НовоеПоле.ОграничениеИспользования.Условие     = Истина;
	НовоеПоле.ОграничениеИспользования.Порядок     = Истина;
	
КонецПроцедуры

Процедура ДобавитьВычисляемоеПолеСтоимость(Схема)
	
	ВыражениеПоля = "ВЫБОР КОГДА ОстатокТоваров = 0 ТОГДА 0 ИНАЧЕ СуммаОстаток / ОстатокТоваров КОНЕЦ";
	
	НовоеПоле = Схема.ВычисляемыеПоля.Добавить();
	НовоеПоле.ПутьКДанным = "Стоимость";
	НовоеПоле.Заголовок = НСтр("ru = 'Стоимость за единицу';
								|en = 'Per unit cost'");
	НовоеПоле.Выражение = ВыражениеПоля;
	НовоеПоле.ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		НовоеПоле.Оформление, "Формат", "ЧЦ=15; ЧДЦ=2");
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МинимальнаяШирина", 15);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НовоеПоле.Оформление, "МаксимальнаяШирина", 15);
	
	НовоеПоле.ОграничениеИспользования.Группировка = Истина;
	НовоеПоле.ОграничениеИспользования.Условие     = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(ПараметрыОтчета, Схема, КомпоновщикНастроек)
	
	КоличествоПолейПериодов = КоличествоПолейПериодов(Схема);
	Для Индекс = 1 По КоличествоПолейПериодов Цикл
		ПолеДляУдаления = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти("ОстатокПериода" + Индекс);
		Если ПолеДляУдаления <> Неопределено Тогда
			Схема.НаборыДанных.ОсновнойНабор.Поля.Удалить(ПолеДляУдаления);
		КонецЕсли;
		
		ПолеДляУдаления = Схема.НаборыДанных.ОсновнойНабор.Поля.Найти("СуммаОстатокПериода" + Индекс);
		Если ПолеДляУдаления <> Неопределено Тогда
			Схема.НаборыДанных.ОсновнойНабор.Поля.Удалить(ПолеДляУдаления);
		КонецЕсли;
	КонецЦикла;
	
	Схема.ПоляИтога.Очистить();
	Схема.ВычисляемыеПоля.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ПапкаСПолями.Заголовок = НСтр("ru = 'Всего';
									|en = 'Total'");
	
	ПоказательКоличество = Ложь;
	ПоказательСумма      = Ложь;
	
	ДанныеПоказателей = ДанныеПоказателей();
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		Показатель = "Показатель" + ИмяПоказателя;
		Если ПараметрыОтчета[Показатель] Тогда
			Если Показатель = "ПоказательКоличество" Тогда
				ПоказательКоличество = Истина;
			ИначеЕсли Показатель = "ПоказательСумма" Тогда
				ПоказательСумма = Истина;
			ИначеЕсли Показатель = "ПоказательСтоимость" Тогда
				ДобавитьВычисляемоеПолеСтоимость(Схема);
			КонецЕсли;
			
			НайтиДобавитьПоле(
				Схема, ДанныеПоказателей[Показатель].Значение, ПапкаСПолями, ДанныеПоказателей[Показатель].Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказательКоличество Или ПоказательСумма Тогда
		ПапкаСПолями = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ПапкаСПолями.Заголовок = НСтр("ru = 'Количество дней с даты принятия к учету';
										|en = 'Number of days since the recognition date'");
		Индекс = 1;
		ЗначениеПоследнего = 0;
		Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
			ПапкаСПолямиИнтервал = ПапкаСПолями.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ПапкаСПолямиИнтервал.Заголовок = Интервал.Представление;
			
			Если ПоказательКоличество Тогда
				НайтиДобавитьПоле(Схема, "ОстатокПериода" + Индекс, ПапкаСПолямиИнтервал);
			КонецЕсли;
			
			Если ПоказательСумма Тогда
				НайтиДобавитьПоле(Схема, "СуммаОстатокПериода" + Индекс, ПапкаСПолямиИнтервал);
				ДобавитьВычисляемоеПолеСуммаОстатокПериода(Схема, Индекс);
			КонецЕсли;
			
			Индекс = Индекс + 1;
			ЗначениеПоследнего = Интервал.Значение;
		КонецЦикла;
		
		ПапкаСПолямиИнтервал = ПапкаСПолями.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ПапкаСПолямиИнтервал.Заголовок = СтрШаблон(НСтр("ru = 'Свыше %1 дней';
														|en = 'Over %1 days'"), ЗначениеПоследнего);
		
		Если ПоказательКоличество Тогда
			НайтиДобавитьПоле(Схема, "ОстатокПериода" + Индекс, ПапкаСПолямиИнтервал);
		КонецЕсли;
		
		Если ПоказательСумма Тогда
			НайтиДобавитьПоле(Схема, "СуммаОстатокПериода" + Индекс, ПапкаСПолямиИнтервал);
			ДобавитьВычисляемоеПолеСуммаОстатокПериода(Схема, Индекс);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметры(ПараметрыОтчета, Схема, КомпоновщикНастроек)

	Сутки = 60 * 60 * 24;
	
	ТабИнтервалы = Новый ТаблицаЗначений;
	ТабИнтервалы.Колонки.Добавить("НомерИнтервала");
	ТабИнтервалы.Колонки.Добавить("НачалоИнтервала");
	ТабИнтервалы.Колонки.Добавить("КонецИнтервала");
	
	ДатаКон = ?(ПараметрыОтчета.Период = '00010101', ТекущаяДатаСеанса(), ПараметрыОтчета.Период);
	ПараметрыОтчета.Интервалы.Сортировать("Значение Воз");
	Индекс = 1;
	Первый = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из ПараметрыОтчета.Интервалы Цикл
		НоваяСтрока = ТабИнтервалы.Добавить();
		НоваяСтрока.НомерИнтервала = Индекс;
		Если Первый Тогда
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон);
			ПредыдущееЗначение = Интервал.Значение;
			Первый = Ложь;
		Иначе
			НоваяСтрока.НачалоИнтервала = НачалоДня(ДатаКон) - Интервал.Значение * Сутки;
			НоваяСтрока.КонецИнтервала  = КонецДня(ДатаКон)  - (ПредыдущееЗначение + 1) * Сутки;
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для Каждого СтрокаИнтервала Из ТабИнтервалы Цикл
		ИмяПараметра = "НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
		
		ИмяПараметра = "КонецИнтервала" + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
		
		ИмяПараметра = "ПараметрПериода" + СтрокаИнтервала.НомерИнтервала;
		Параметр = Схема.Параметры.Найти(ИмяПараметра);
		Если Параметр = Неопределено Тогда
			Параметр = Схема.Параметры.Добавить();
			Параметр.Имя = ИмяПараметра;
		КонецЕсли;
		
		КоличествоИнтервалов = СтрокаИнтервала.НомерИнтервала;
	КонецЦикла;
	
	НомерИнтервалаСвыше = КоличествоИнтервалов + 1;
	ИмяПараметра = "ПараметрПериода" + НомерИнтервалаСвыше;
	Параметр = Схема.Параметры.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = Схема.Параметры.Добавить();
		Параметр.Имя = ИмяПараметра;
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	
	Для Каждого СтрокаИнтервала Из ТабИнтервалы Цикл
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "НачалоИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.НачалоИнтервала);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "КонецИнтервала" + СтрокаИнтервала.НомерИнтервала, СтрокаИнтервала.КонецИнтервала);
	КонецЦикла;
	
	Для Счетчик = 1 По КоличествоИнтервалов Цикл
		Если Счетчик < ПараметрыОтчета.СрокХраненияТовара + 1 Тогда
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек, "ПараметрПериода" + Счетчик, 0);
		Иначе
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроек, "ПараметрПериода" + Счетчик, 1);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ПараметрПериода" + НомерИнтервалаСвыше, 1);
	
КонецПроцедуры

Функция КоличествоПолейПериодов(Схема)
	
	СтандартныеПоля = Новый Структура("ОстатокТоваров, СуммаОстаток");
	
	сч = 0;
	Для Каждого Поле Из Схема.НаборыДанных.ОсновнойНабор.Поля Цикл
		Если СтрНайти(Поле.Поле, "Остаток") > 0 И Не СтандартныеПоля.Свойство(Поле.Поле) Тогда
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат сч;
	
КонецФункции

Функция ПолучитьТекстЗапроса(КоличествоИнтервалов)
	
	ПолныйТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|{ВЫБРАТЬ
	|	Организация.*,
	|	Подразделение.*,
	|	Номенклатура.*,
	|	Счет.* КАК Счет}
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&СчетаУчетаНоменклатура), &СубконтоНоменклатура, {(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Номенклатура,
	|	Счет
	|;";
	
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Организация КАК Организация,
		|	ВложенныйЗапрос.Подразделение КАК Подразделение,
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Счет КАК Счет,
		|	СУММА(ВложенныйЗапрос.КоличествоПриход) КАК КоличествоПриход
		|ПОМЕСТИТЬ ВТ_ОборотыИнтервал" + Индекс + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация,
		|		ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
		|		ХозрасчетныйОбороты.Счет КАК Счет,
		|		ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоПриход
		|	{ВЫБРАТЬ
		|		Организация.*,
		|		Подразделение.*,
		|		Номенклатура.*,
		|		Счет.* КАК Счет}
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоИнтервала" + Индекс + ", &КонецИнтервала" + Индекс + ", , Счет В (&СчетаУчетаНоменклатура) {(Счет).*}, &СубконтоНоменклатура, {(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}, , ) КАК ХозрасчетныйОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.Номенклатура),
		|		ХозрасчетныйОбороты.Счет,
		|		-ЕСТЬNULL(ХозрасчетныйОбороты.КоличествоОборотДт, 0)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоИнтервала" + Индекс + ", &КонецИнтервала" + Индекс + ", , Счет В (&СчетаУчетаСкладИНоменклатура) {(Счет).*}, &СубконтоНоменклатура, (Подразделение ЕСТЬ NULL ИЛИ Подразделение = ПодразделениеКор){(Организация).* КАК Организация, (Субконто1).* КАК Номенклатура, (Подразделение).* КАК Подразделение}, КорСчет В (&СчетаУчетаСкладИНоменклатура) {(КорСчет).*}, &СубконтоНоменклатура) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		ХозрасчетныйОбороты.Счет = ХозрасчетныйОбороты.КорСчет
		|		И ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОбороты.КорСубконто1) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Организация,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Подразделение,
		|	Номенклатура,
		|	Счет
		|;"
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Организация КАК Организация,
	|	ВТ_Остатки.Подразделение КАК Подразделение,
	|	ВТ_Остатки.Номенклатура КАК Номенклатура,
	|	ВТ_Остатки.Счет КАК Счет,
	|	ВТ_Остатки.СуммаОстаток КАК СуммаОстаток0,
	|	ВТ_Остатки.КоличествоОстаток КАК ОстатокТоваров0,";
	
	МассивРесурсов = Новый Массив;
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		МассивРесурсов.Добавить(
			"	ЕСТЬNULL(ВТ_ОборотыИнтервал" + Индекс + ".КоличествоПриход, 0) КАК КоличествоПриход" + Индекс);
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + СтрСоединить(МассивРесурсов, "," + Символы.ПС) + "
	|
	|ПОМЕСТИТЬ ВТ_ОстаткиИОбороты
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки";
	
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыИнтервал" + Индекс + " КАК ВТ_ОборотыИнтервал" + Индекс + "
		|		ПО ВТ_Остатки.Организация = ВТ_ОборотыИнтервал" + Индекс + ".Организация
		|			И ВТ_Остатки.Подразделение = ВТ_ОборотыИнтервал" + Индекс + ".Подразделение
		|			И ВТ_Остатки.Номенклатура = ВТ_ОборотыИнтервал" + Индекс + ".Номенклатура
		|			И ВТ_Остатки.Счет = ВТ_ОборотыИнтервал" + Индекс + ".Счет";
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение,
	|	Номенклатура,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОстаткиИОбороты.Организация КАК Организация,
	|	ВТ_ОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ВТ_ОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ВТ_ОстаткиИОбороты.Счет КАК Счет,
	|	ВТ_ОстаткиИОбороты.СуммаОстаток0 КАК СуммаОстаток0,
	|	ВТ_ОстаткиИОбороты.ОстатокТоваров0 КАК ОстатокТоваров0,";
	
	ПоляОстатокТоваров = Новый Массив;
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		ТекстПоля = "ВТ_ОстаткиИОбороты.ОстатокТоваров0";
		Для ПодИндекс = 1 По Индекс Цикл
			ТекстПоля = ТекстПоля + " - ВТ_ОстаткиИОбороты.КоличествоПриход" + ПодИндекс;
		КонецЦикла;
		
		ПоляОстатокТоваров.Добавить(
			"	ВЫБОР
			|		КОГДА " + ТекстПоля + " > 0
			|			ТОГДА " + ТекстПоля + "
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ОстатокТоваров" + Индекс);
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + СтрСоединить(ПоляОстатокТоваров, "," + Символы.ПС) + "
	|ПОМЕСТИТЬ ВТ_ОстаткиПоПериодам
	|ИЗ
	|	ВТ_ОстаткиИОбороты КАК ВТ_ОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Подразделение КАК Подразделение,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Счет КАК Счет,
	|	ВложенныйЗапрос.СуммаОстаток КАК СуммаОстаток,
	|	ВложенныйЗапрос.ОстатокТоваров КАК ОстатокТоваров,";
	
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		ТекстПоляКол   = "	ВложенныйЗапрос.ОстатокПериода" + Индекс
			+ " КАК ОстатокПериода" + Индекс + ",";
		ТекстПоляСумма = "	ВложенныйЗапрос.СуммаОстатокПериода" + Индекс
			+ " КАК СуммаОстатокПериода" + Индекс + ",";
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + ТекстПоляСумма + Символы.ПС + ТекстПоляКол;
	КонецЦикла;
	
	Дельта = "	ВложенныйЗапрос.СуммаОстаток";
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		Дельта = Дельта + " - ВложенныйЗапрос.СуммаОстатокПериода" + Индекс;
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + Дельта + " КАК Дельта
	|{ВЫБРАТЬ
	|	Организация.*,
	|	Подразделение.*,
	|	Номенклатура.*,
	|	Счет.*,
	|	СуммаОстаток,
	|	ОстатокТоваров,";
	
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
			|	СуммаОстатокПериода" + Индекс + ",
			|	ОстатокПериода" + Индекс + ",";
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|	Дельта}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ОстаткиПоПериодам.Организация КАК Организация,
	|		ВТ_ОстаткиПоПериодам.Подразделение КАК Подразделение,
	|		ВТ_ОстаткиПоПериодам.Номенклатура КАК Номенклатура,
	|		ВТ_ОстаткиПоПериодам.Счет КАК Счет,
	|		ВТ_ОстаткиПоПериодам.СуммаОстаток0 КАК СуммаОстаток,
	|		ВТ_ОстаткиПоПериодам.ОстатокТоваров0 КАК ОстатокТоваров,";
		
	Для Индекс = 1 По КоличествоИнтервалов Цикл
		ТекстПоляКол = "		ВТ_ОстаткиПоПериодам.ОстатокТоваров" + (Индекс - 1)
			+ " - ВТ_ОстаткиПоПериодам.ОстатокТоваров" + Индекс + " КАК ОстатокПериода" + Индекс + ",";
		ТекстПоляСумма =
			"		ВЫБОР КОГДА ВТ_ОстаткиПоПериодам.ОстатокТоваров0 = 0 ТОГДА 0 ИНАЧЕ (ВТ_ОстаткиПоПериодам.ОстатокТоваров"
			+ (Индекс - 1) + " - ВТ_ОстаткиПоПериодам.ОстатокТоваров" + Индекс
			+ ") * ВТ_ОстаткиПоПериодам.СуммаОстаток0 / ВТ_ОстаткиПоПериодам.ОстатокТоваров0 КОНЕЦ КАК СуммаОстатокПериода"
			+ Индекс + ",";
		ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС + ТекстПоляСумма + Символы.ПС + ТекстПоляКол;
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|		ВЫБОР КОГДА ВТ_ОстаткиПоПериодам.ОстатокТоваров0 = 0 ТОГДА 0 ИНАЧЕ ВТ_ОстаткиПоПериодам.ОстатокТоваров" + КоличествоИнтервалов
		+ " * ВТ_ОстаткиПоПериодам.СуммаОстаток0 / ВТ_ОстаткиПоПериодам.ОстатокТоваров0 КОНЕЦ КАК СуммаОстатокПериода"
		+ (КоличествоИнтервалов + 1) + ",
	|		ВТ_ОстаткиПоПериодам.ОстатокТоваров" + КоличествоИнтервалов + " КАК ОстатокПериода" + (КоличествоИнтервалов + 1);
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + "
	|	ИЗ
	|		ВТ_ОстаткиПоПериодам КАК ВТ_ОстаткиПоПериодам
	|	ГДЕ
	|		(ВТ_ОстаткиПоПериодам.ОстатокТоваров0 <> 0
	|				ИЛИ ВТ_ОстаткиПоПериодам.СуммаОстаток0 <> 0)) КАК ВложенныйЗапрос
	|ГДЕ";
	
	МассивПериодовКоличество = Новый Массив;
	МассивПериодовСумма      = Новый Массив;
	Для Индекс = 1 По КоличествоИнтервалов + 1 Цикл
		МассивПериодовКоличество.Добавить(
			"ВложенныйЗапрос.ОстатокПериода" + Индекс+ "* &ПараметрПериода" + Индекс);
		МассивПериодовСумма.Добавить(
			"ВложенныйЗапрос.СуммаОстатокПериода" + Индекс + "* &ПараметрПериода" + Индекс);
	КонецЦикла;
	
	ПолныйТекстЗапроса = ПолныйТекстЗапроса + Символы.ПС
		+ "	(" + СтрСоединить(МассивПериодовКоличество, " + ") + ") <> 0
	|			ИЛИ (" + СтрСоединить(МассивПериодовСумма, " + ") + ") <> 0
	|{ГДЕ
	|	ВложенныйЗапрос.Организация.*,
	|	ВложенныйЗапрос.Подразделение.*,
	|	ВложенныйЗапрос.Номенклатура.*,
	|	ВложенныйЗапрос.Счет.*}";
	
	Возврат ПолныйТекстЗапроса;
	
КонецФункции

Функция СтруктураСчетов(СчетаУчетаТоваров)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ХозрасчетныйВидыСубконто.Суммовой КАК Суммовой
	|ПОМЕСТИТЬ ВидыСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконто.Счет КАК Счет
	|ИЗ
	|	ВидыСубконто КАК ВидыСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					ВидыСубконто.Счет КАК Счет
	|				ИЗ
	|					ВидыСубконто КАК ВидыСубконто)
	|	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
	
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СчетаУчетаСкладИНоменклатура    = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	СчетаУчетаНоменклатураБезСклада = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	СчетаУчетаНоменклатура = ОбщегоНазначения.СкопироватьРекурсивно(СчетаУчетаСкладИНоменклатура);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчетаНоменклатура, СчетаУчетаНоменклатураБезСклада);
	
	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатура",       СчетаУчетаНоменклатура);
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", СчетаУчетаСкладИНоменклатура);
	
	Возврат СтруктураСчетов;
	
КонецФункции

Функция ПолучитьНаборПоказателей()
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Количество");
	НаборПоказателей.Добавить("Стоимость");
	НаборПоказателей.Добавить("Сумма");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция НовыйПоказатель()
	
	Возврат Новый Структура("Значение, Представление");
	
КонецФункции

Функция ДанныеПоказателей()
	
	Показатели = Новый Структура;
	Показатели.Вставить("ПоказательКоличество", НовыйПоказатель());
	Показатели.Вставить("ПоказательСтоимость",  НовыйПоказатель());
	Показатели.Вставить("ПоказательСумма",      НовыйПоказатель());
	
	Показатели.ПоказательКоличество.Значение = "ОстатокТоваров";
	Показатели.ПоказательКоличество.Представление = НСтр("ru = 'Количество';
														|en = 'Quantity'");
	
	Показатели.ПоказательСтоимость.Значение = "Стоимость";
	Показатели.ПоказательСтоимость.Представление = НСтр("ru = 'Стоимость за единицу';
														|en = 'Per unit cost'");
	
	Показатели.ПоказательСумма.Значение = "СуммаОстаток";
	Показатели.ПоказательСумма.Представление = НСтр("ru = 'Сумма';
													|en = 'Amount'");
	
	Возврат Показатели;
	
КонецФункции

Функция ДопПоляСЗаданнойШириной()
	
	ОформляемыеПоля = Новый Соответствие;
	ОформляемыеПоля.Вставить("Номенклатура.Артикул", Истина);
	ОформляемыеПоля.Вставить("Номенклатура.ЕдиницаИзмерения", Истина);
	ОформляемыеПоля.Вставить("Организация.ИНН", Истина);
	
	Возврат ОформляемыеПоля;
	
КонецФункции

#КонецОбласти

#КонецЕсли