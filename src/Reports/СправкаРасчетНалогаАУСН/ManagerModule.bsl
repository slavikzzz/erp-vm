#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура используется подсистемой варианты отчетов.
//
// Параметры:
//  Настройки    - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.РегламентированнаяОтчетность.Подсистемы.Справки, "");
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(
			Метаданные.Подсистемы.РегламентированныйУчет.Подсистемы.СпециальныеРежимыНалогообложения.Подсистемы.УчетПоУСН, "");
	КонецЦикла;
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
// Задает набор вариантов настроек.
//
// Возвращаемое значение:
//   Массив  из Структура
//
Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","РасчетНалогаАУСН", "Расчет налога АУСН"));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Ложь);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	НачалоПериода = НачалоГода(ПараметрыОтчета.НачалоПериода);
	КонецПериода  = КонецКвартала(ПараметрыОтчета.КонецПериода);
	
	ЧастиЗаголовка = Новый Массив;
	ЧастиЗаголовка.Добавить(НСтр("ru = 'Расчет налога АУСН';
								|en = 'ASTS tax calculation'"));
	ЧастиЗаголовка.Добавить(
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, Истина));
	
	ТекстЗаголовка = СтрСоединить(ЧастиЗаголовка, " ");
		
	Возврат ТекстЗаголовка;
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут.
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоКвартала(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецКвартала(ПараметрыОтчета.КонецПериода));
		
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ПараметрыОтчета.КонецПериода), ПараметрыОтчета.КонецПериода);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПредставлениеПериода", ПредставлениеПериода);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПустаяДата", Дата(1, 1, 1));
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
	ПараметрыОтчета.ПоказательНУ = Истина;
		
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	// Добавим примечания, если требуются.
	СчетчикПримечаний = 0;
	
	
	// Установим параметры таблицы.
	Результат.ФиксацияСверху = 0;
	Результат.ФиксацияСлева  = 0;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиПоИмени(Структура, Имя)
	Перем Группировка;
	
	Для каждого Элемент Из Структура Цикл

		Если Элемент.Имя = Имя Тогда
			Группировка = Элемент;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл

			Если ТипЗнч(Поле) <> Тип("АвтоПолеГруппировкиКомпоновкиДанных")
				И Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
				Группировка = Элемент;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
		Если Группировка = Неопределено
			И Элемент.Структура.Количество() > 0 Тогда
			Группировка = НайтиПоИмени(Элемент.Структура, Имя);
		КонецЕсли;
		
		Если Группировка <> Неопределено Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Группировка;
	
КонецФункции

#КонецОбласти

#КонецЕсли