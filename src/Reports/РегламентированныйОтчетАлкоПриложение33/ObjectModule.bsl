#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета

// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Соответствие, содержащее кеш проверенных по классификатору адресов.
// Процесс проверки может включать http запрос и занимать много времени.
// При этом адреса часто повторяются.
Перем СоответствиеКешАдресов;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;
// Данные обособленных подразделений разделов при печати.
Перем ДанныеОП_Декларация;

// Справочники.
Перем СправочникиОтчета;
// Счетчик, который присваивается как ИД получателя.
Перем СчетчикИДПолучателей;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные, 
	  НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыДекларация;

// Вспомогательные таблицы значений, отражающие состав ресурсов регистров сведений
// по группам.
Перем ТабП0000100003;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений; 

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Данные движений.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоДекларации, НужноОбработатьСтрок, ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;

#КонецОбласти


#Область ПрограммныйИнтерфейс


#Область ОбработкаПриЗаполнении

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
// Используется при импорте таблиц значений в регистр сведений отчета.
// Совпадает с процедурой ОбработкаЗаписи(), но сделана отдельной для возможности при необходимости
// поменять работу заполнения регистра только лишь поменяв отчет, не трогая глобальные модули.
// Это нужно для поддержки выпуска внешних отчетов в случае серьезных ошибок.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		СтрокаТЗ					- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено, 
		ЕстьСтранаРегистрации = Неопределено) Экспорт
	
	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
	    ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы(
													"РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда	
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Документ, "Организация");
		Запись.Организация = ЗначенияРеквизитов.Организация;	
	КонецЕсли; 
	
	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил33Декларация" Тогда
		
		Запись.П000010000302 = СокрЛП(Запись.П000010000302);
		Запись.П000010000310 = СокрЛП(Запись.П000010000310);
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти


#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//		КварталОтчета			- Число - Номер квартала отчета. Нужен в некоторых отчетах, в остальных
//								параметр для унификации вызова процедуры Расчет для любых отчетов
//								из процедур модуля РегламентированнаяОтчетностьАЛКО.
//
Процедура Расчет(ИдГруппы, Запись, КварталОтчета = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	
	Если ИдГруппы = "П0000100003" Тогда
		РасчетРаздел1(Запись);
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)
		
	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);

КонецФункции

#КонецОбласти 

#Область СлужебныеРасчет

Процедура РасчетРаздел1(Запись)

	Для Индекс = 3 По 9 Цикл
				
		НомерКолонки = Формат(Индекс, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
		ИмяРесурса = "П0000100003" + НомерКолонки;
		
		Запись[ИмяРесурса] = ?(Запись[ИмяРесурса] = Неопределено, 0, Запись[ИмяРесурса]);
	
	КонецЦикла;
	
	// Всего для производства.
	Запись.П000010000305 	= Запись.П000010000306 + Запись.П000010000307 
							+ Запись.П000010000308 + Запись.П000010000309;
	
КонецПроцедуры

#КонецОбласти


#Область ПроверитьВыгрузку 

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
					СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки, СоответствиеКешАдресов);
								
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;
		
КонецФункции

Процедура ПроверитьЗаполнениеДекларации(СтатусПроверки)

	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПоказательОП = "ОбособленноеПодразделение";
	
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппыДекларация = СтруктураРеквизитовФормы.мИдГруппы12;
			
	ДанныеРаздела = ТаблицаСтраницыДекларация;

	ИмяРегистраДекларация = ПолучитьИмяРегистраСведений(ИдГруппыДекларация);
	СервисРегистровДекларация = СтруктураСервисРегистров[ИмяРегистраДекларация];
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокДекларация = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппыДекларация, НомерЛиста - 1, Истина);
				
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокДекларация > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МожетБытьПустоеНаименование", Истина);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки, СоответствиеКешАдресов);

		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраДекларация = СервисРегистровДекларация[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
				
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если 
				ЗначениеЗаполнено(СведенияОбОП.КПП)
				ИЛИ 
				ЗначениеЗаполнено(СведенияОбОП.Наименование) 
				ИЛИ
				ЗначениеЗаполнено(СведенияОбОП.Представление)
				Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП["Декларация"].Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП["Декларация"][ИдОП]["НомерЛиста"];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе

					ДанныеОП["Декларация"].Вставить(ИдОП, Новый Соответствие);

					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("ОП", КопияСведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("НомерЛиста", НомерЛиста);

					ДанныеОП["Декларация"][ИдОП].Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);
					
					ДанныеОП["Декларация"][ИдОП].Вставить("КолСтрокПоДекларация", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Соответствие);

				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;

		Если КолАктивныхСтрокДекларация > 0 Тогда
			ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппыДекларация, НомерЛиста, ИдОП);
		КонецЕсли;
		
		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "")
	
	НомерЛистаСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерЛиста);
	
	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = "";
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП 	= Неопределено;
	ДанныеПоЛисту		= Неопределено;
	
	Если ЕстьИдОП Тогда
		ДанныеОП_Декларация = ДанныеОП["Декларация"]; 
		ДанныеПоЛисту = ДанныеОП_Декларация[ИдОП];
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеПоЛисту.Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	КонецЕсли;
	
	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;
	
	// Зафиксируем имена ключевых полей.
	ИмяИндивидуальногоНомера  = ИдГруппы + "02";
	ИмяСобранногоОбъема  = ИдГруппы + "03";
	ИмяЗакупленногоОбъема = ИдГруппы + "04";
	ИмяИспользованоВсего = ИдГруппы + "05";
	ИмяИспользованоВино	 = ИдГруппы + "06";
	ИмяИспользованоИгристоеВино	 = ИдГруппы + "07";
	ИмяИспользованоРоссийскоеШампанское	 = ИдГруппы + "08";
	ИмяИспользованоНапитки	 = ИдГруппы + "09";
	ИмяНомерПартии	 = ИдГруппы + "10";
		
	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	
	КоличествоКолонокВРазделе = 10;
	НачальныйИндекс = 2;
	
	КоличествоПервых = 1000;
	
	СписокСоставаРегистра = Новый СписокЗначений;
	СписокСоставаРегистра.Добавить("Ресурсы");
		
	СтруктураСинонимовЗаписи = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруСинонимовЗаписиРегистраСведений(
														ИмяРегистраСведений, СписокСоставаРегистра, Тип("Число"));
	РабочийРегистрСведений = РегистрыСведений[ИмяРегистраСведений];
	НаборЗаписей = РабочийРегистрСведений.СоздатьНаборЗаписей();
	ВременнаяЗаписьРегистра = НаборЗаписей.Добавить();
	
	Пока Истина Цикл
	 
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл
			
			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			
			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе, НачальныйИндекс);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяИндивидуальногоНомера + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
				
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;
			КолСтрокДекларация = КолСтрокДекларация + 1;
			
			// НеУказанУчетныйНомер.
			УчетныйНомер = СтрокаДекларации[ИмяИндивидуальногоНомера];
		
			ИмяПоказателя = ИмяИндивидуальногоНомера + "_" + НомерСтрокиСтроковый;
			Если ПустаяСтрока(УчетныйНомер) Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не указан Учетный номер виноградника в реестре виноградных насаждений!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанУчетныйНомер");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли;
			
			// НеУказанНомерПартии. 
			НомерПартии = СтрокаДекларации[ИмяНомерПартии];
		
			ИмяПоказателя = ИмяНомерПартии + "_" + НомерСтрокиСтроковый;
			Если ПустаяСтрока(НомерПартии) Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не указан Номер партии!";
						
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "НеУказанНомерПартии");
				
				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
			
			КонецЕсли;
										
			// Проверяем соответствие расчету.
			ЗаполнитьЗначенияСвойств(ВременнаяЗаписьРегистра, СтрокаДекларации);
			РасчетРаздел1(ВременнаяЗаписьРегистра);

			СуммаЧисловыхПолей = 0;
			ЕстьЧисловыеПоля = Ложь;
			
			ИмяПоказателяПустаяСтрока = ИмяСобранногоОбъема + "_" + НомерСтрокиСтроковый;
			
			Для каждого КлючЗначение Из СтруктураСинонимовЗаписи Цикл

				Показатель = КлючЗначение.Ключ + "_" + НомерСтрокиСтроковый;
				
				Если НЕ ЕстьЧисловыеПоля Тогда
				// Это первое числовое поле.
					ИмяПоказателяПустаяСтрока = Показатель;				
				КонецЕсли; 
				ЕстьЧисловыеПоля = Истина;
				
				НазваниеПоказателя = КлючЗначение.Значение;
				СтрНомерКолонки = Прав(КлючЗначение.Ключ, 2);

				СуммаЧисловыхПолей = СуммаЧисловыхПолей + СтрокаДекларации[КлючЗначение.Ключ];
				
				// Проверяются только данные типа Число.
				Если СтрокаДекларации[КлючЗначение.Ключ] <> ВременнаяЗаписьРегистра[КлючЗначение.Ключ] Тогда

				// Значение строки декларации не соответствует расчетному.
					ТекстОписанияОшибки = СтрокаГде + " значение не соответствует расчетному
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя + """).
						|Текущее значение   : "
						+ Формат(СтрокаДекларации[КлючЗначение.Ключ], "ЧГ=0; ЧВН=") + "
						|Расчетное значение : "
						+ Формат(ВременнаяЗаписьРегистра[КлючЗначение.Ключ], "ЧГ=0; ЧВН=");

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверныйРасчет");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки,
												МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений);

				КонецЕсли;

				// Проверяем на отрицательные значения.
				Если СтрокаДекларации[КлючЗначение.Ключ] < 0 Тогда

				// Значение строки декларации не может быть отрицательным.
					ТекстОписанияОшибки = СтрокаГде + " отрицательное значение
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя
						+ """).";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ОтрицательноеЗначение");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЧисловыеПоля И СуммаЧисловыхПолей = 0 Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не заполнены числовые данные!";
				
				ИмяПоказателя = ИмяПоказателяПустаяСтрока;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоПредупреждений);                
			
			КонецЕсли;
			
			// Всего использовано должно быть не больше суммы собранного и полученного винограда. 
			ИспользованоВсего 	= Число(СтрокаДекларации[ИмяИспользованоВсего]);
			Собрано 			= Число(СтрокаДекларации[ИмяСобранногоОбъема]);
			Закуплено 			= Число(СтрокаДекларации[ИмяЗакупленногоОбъема]);
			
			Если ИспользованоВсего > Собрано + Закуплено Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " использовано для производства больше винограда, чем собрано и закуплено!";
				
				ИмяПоказателя = ИмяСобранногоОбъема + "_" + НомерСтрокиСтроковый;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ИспользованоБольшеСобраноИЗакуплено");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоПредупреждений);
			
			КонецЕсли;
			
			
			
			Если ЕстьИдОП Тогда
							    
				ИдУчетныйНомерНомерПартии = "X" + УчетныйНомер + "#" + 	НомерПартии;			
				
				Если ДанныеДвиженийПоОП.Получить(ИдУчетныйНомерНомерПартии) <> Неопределено Тогда
					
					// Проверка на дублирование. 
					СтрокаПовтора = "";
					Для каждого ЭлМассива Из ДанныеДвиженийПоОП[ИдУчетныйНомерНомерПартии] Цикл
						СтрокаПовтора = СтрокаПовтора + ", " 
										+ РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЭлМассива["НомерСтрокиДекларация"]);
					КонецЦикла;
					СтрокаПовтора = Сред(СтрокаПовтора, 3);
										
					АдресДубликата = ИмяИндивидуальногоНомера + "_" + НомерСтрокиСтроковый;
					
					ТекстОписанияОшибки = СтрокаГде + " повторяется сочетание Учетного номера виноградника в реестре виноградных насаждений и Номера партии!
									| Строка(и) повтора " 
									+ СтрокаПовтора  + ".";
							
					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", АдресДубликата);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияУчетногоНомераНомераПартии");
					
					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоПредупреждений);
											
				Иначе
					
			        ДанныеДвиженийПоОП.Вставить(ИдУчетныйНомерНомерПартии, Новый Массив);					
					
				КонецЕсли;
				
				ДанныеДвиженийПоОП[ИдУчетныйНомерНомерПартии].Добавить(Новый Соответствие);
				ИндексПоследнего = ДанныеДвиженийПоОП[ИдУчетныйНомерНомерПартии].ВГраница();
				ТекЭлемент = ДанныеДвиженийПоОП[ИдУчетныйНомерНомерПартии][ИндексПоследнего];
				
				ТекЭлемент.Вставить("НомерСтрокиДекларация", НомерСтроки);
				ТекЭлемент.Вставить("Движение", Новый Соответствие);
				ДанныеДвижения = ТекЭлемент["Движение"];
				
				// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
				Если ТекущееКоличествоОшибок = 0 Тогда
					
					Для Счетчик = НачальныйИндекс По КоличествоКолонокВРазделе Цикл
						
						КолонкаРегистра = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=");
						
						КолонкаСхемыВыгрузки = КолонкаРегистра;
						
					   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + КолонкаРегистра];
						
						Если Счетчик = 2 ИЛИ Счетчик = 3 Тогда							
							КлючКолонки = "П000000000" + КолонкаСхемыВыгрузки;
						Иначе
							КлючКолонки = "П0000000000" + КолонкаСхемыВыгрузки;							
						КонецЕсли;
													
						ДанныеДвижения.Вставить(КлючКолонки, ЗначениеПоКолонке);
						
					КонецЦикла;
												
				КонецЕсли;
			
								    
			КонецЕсли;
			
			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// Информируем о ходе выполнения.
		Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларация.", ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;
							
	КонецЦикла; 
	
	// Суммируем строки по одному ОП.
	Если ЕстьИдОП Тогда
		ТекКолСтрокДекларация = ДанныеОП_Декларация[ИдОП].Получить("КолСтрокПоДекларации");
		ТекКолСтрокДекларация = ?(ТекКолСтрокДекларация = Неопределено, 0, ТекКолСтрокДекларация);
		ДанныеОП_Декларация[ИдОП].Вставить("КолСтрокПоДекларации", ТекКолСтрокДекларация + КолСтрокДекларация);
	КонецЕсли;
		
КонецПроцедуры

Функция ОтчетЗаполненКорректно()
	
	СтатусПроверки = Истина;

	ПроверитьЗаполнениеТитульный(СтатусПроверки);
	
	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения раздела Декларация.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеДекларации(СтатусПроверки);

	КонецЕсли;

	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;

	Возврат СтатусПроверки;
		
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, 
						ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);
	
КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);
	
КонецФункции 

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);
	
КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);
	
КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);
	
КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);
	
КонецПроцедуры

Функция ПроверитьДанные(Узел)
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, 
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);
		
КонецФункции

Процедура ЗаполнитьСведенияДекларации(НовыйУзел_Декларация, ИдОП)

	ОбразецУзла_СведОрг = ПолучитьПодчиненныйЭлемент(НовыйУзел_Декларация, "СведОрг");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];

	НомерПП = 0;

	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
		
		МассивДвиженийПоИдУчетныйНомерНомерПартии = ЭлементДвиженияПоОП.Значение;
		
		Для каждого ЭлМассива Из МассивДвиженийПоИдУчетныйНомерНомерПартии Цикл
		
			ДанныеДвижения = ЭлМассива["Движение"];
			НомерСтроки = ЭлМассива["НомерСтрокиДекларация"];
			
			НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзла_СведОрг);

			НомерПП = НомерПП + 1;

			УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерПП);
			
			Для каждого КлючЗначение  Из ДанныеДвижения Цикл
				
				УстановитьЗначениеЭлемента(НовыйУзелОборот, КлючЗначение.Ключ, КлючЗначение.Значение);
															
			КонецЦикла;

			ОбработаноСтрок = ОбработаноСтрок + 1;
			
		КонецЦикла;
		
		
		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзла_СведОрг);

КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел, ПараметрыВыгрузки)
		
	Узел_Документ = УзелРодитель; 
	
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ Тогда
	
		Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");		
		Узел_Реквизиты = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Реквизиты");
		
		Узел_ИП = ПолучитьПодчиненныйЭлемент(Узел_Реквизиты, "ИП");
		Узел_КФХ = ПолучитьПодчиненныйЭлемент(Узел_Реквизиты, "КФХ");
		
		Если ПараметрыВыгрузки.ЭтоЛичноеХозяйство Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел_ИП);
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_КФХ);
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеОП_Декларация = ДанныеОП["Декларация"];
	
	ПрототипУзла_Декларация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Декларация");
		
	Для Каждого ЭлементОП Из ДанныеОП_Декларация Цикл
		
		Узел_Декларация = НовыйУзелИзПрототипа(ПрототипУзла_Декларация);
		
		ИдОП		= ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;
		
		СведенияОбОП = СтруктураОП["ОП"];
				
		// заполняем сведения по ОП
		НазваниеОрганизации = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;
		
		УстановитьЗначениеЭлемента(Узел_Декларация, "Наим", НазваниеОрганизации);
		УстановитьЗначениеЭлемента(Узел_Декларация, "КППЮЛ", КПП);
		
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_Декларация, "АдрДеят");
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  СведенияОбОП.КодСтраны);
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      СведенияОбОП.Квартира);
		
		ЗаполнитьСведенияДекларации(Узел_Декларация, ИдОП);
				
	КонецЦикла;
	
	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП_Декларация.Количество() = 0 Тогда
		
		Узел_Декларация = НовыйУзелИзПрототипа(ПрототипУзла_Декларация);
		
		// заполняем сведения по ОП
		НазваниеОрганизации = ПараметрыВыгрузки.НаимЮЛ;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);
				
		УстановитьЗначениеЭлемента(Узел_Декларация, "Наим", НазваниеОрганизации);
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_Декларация, "КППЮЛ", КПП);
		КонецЕсли;
		
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_Декларация, "АдрДеят");
		
		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны",  АдресОрганизации.КодСтраны);
				
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс",     АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион",  АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район",      АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город",      АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица",      АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом",        АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус",     АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера",     АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт",      АдресОрганизации.Квартира);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Декларация);
			
	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;
	
	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда
		
	    // выгружено не то количество, что есть по данным заполнения отчета
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено по разделу Декларация!
							|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
							|Вашей информационной базы в виде файла .dt";
				
		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");
		
		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
								
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначения.РежимОтладки();

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;		
	
	СоответствиеКешАдресов = Новый Соответствие;

	// Таблица результата
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 = ПараметрыФормы.ТабП0000100003;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;
	
	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	ДанныеДвижений = Новый Соответствие;
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Декларация", Новый Соответствие);
		
	// один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%
	НужноОбработатьСтрок = 2*ВсегоСтрокПоДекларации;
	// при выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%
	// при проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	
	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ВерныйАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ВерныйАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;
	
	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();
	
	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;
	
КонецФункции

Функция СписокРазделовОшибок() Экспорт
	
	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	// Раздела "Лицензии" нет.
	СписокРазделов.Добавить("Декларация");
	
	Возврат СписокРазделов;

КонецФункции

#КонецОбласти


#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда
	// Есть сообщения о ошибках.
		Возврат Результат;
	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;

	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;
		
КонецФункции

#КонецОбласти 


#Область Печать

Функция ПечататьРаздел(СтрокаРаздела)
		
	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента)  Экспорт
	
	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет		= ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта				= ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес		= ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы				= ПараметрыДокумента.ПараметрыФормы;
	
	ВидПечати					= ПараметрыДокумента.ВидПечати;
	
	ТаблицаСтраницыДекларация 	= ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	ТабП0000100003 				= ПараметрыФормы.ТабП0000100003;
	СтруктураСервисРегистров 	= ПараметрыФормы.СтруктураСервисРегистров;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	
	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	
	ВсегоСтрокПоДекларации = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	
	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = ВсегоСтрокПоДекларации*4;
	
	ОбработаноСтрок = 0;
	
	ТипЭкспорта = ?(СтруктураРеквизитовФормы.Свойство("ТипЭкспорта"),
					СтруктураРеквизитовФормы.ТипЭкспорта, Неопределено);
	
	ПроцентБезКонвертацииАрхивации = 
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ПроцентБезКонвертацииАрхивации(ВидПечати, ТипЭкспорта);

	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц  = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки		 = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные	 = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи				 = ПараметрыФормы.ДатаПодписи;
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл
		
		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта",    ИмяФормыОбъекта);

		
		Если ИмяСтраницыПанели = "Титульный" Тогда
			
			ВывестиНаПечатьТитульный(СтруктураПараметров);	
			
		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда
			
			СтруктураПараметров.Вставить("ИмяРаздела", "Декларация");
			ВывестиНаПечатьДекларация(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда
				
		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
		?(ВидПечати = "ПечатьФайлZIP" , "Конвертация в выбранный формат и архивация.", ""), 
		НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы;
	
КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)
	
	НастройкиСтраницы = Новый Структура;
		
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", 	Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", 		Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", 	Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", 		Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", 			Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", 	ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 			5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 			5);
	НастройкиСтраницы.Вставить("ПолеСлева", 			5);
	НастройкиСтраницы.Вставить("ПолеСправа", 			5);
	
	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", 			НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", 	СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", 	ДокументСсылкаАлкоОтчет);
	
	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(	
		СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);
		
КонецПроцедуры
 
Процедура ВывестиНаПечатьДекларация(СтруктураПараметровСтраницы)
	
	// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", ТаблицаСтраницыДекларация);
	СтруктураПараметровСтраницы.Вставить("ИдГруппыРаздела", СтруктураРеквизитовФормы.мИдГруппы12);

	// Настройки листа.
	НастройкиСтраницы = Новый Структура;
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);

	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 47);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 4);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 7);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 1);

	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);

	НастройкиАлгоритмаПечати = Новый Структура;

	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", "ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", "Подвал");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", "ОргДиректор");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", "ОргБухгалтер");
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", Ложь);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", "НомерСтраницы");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", "ЗаголовокЛиста");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", "ЗаголовокТаблицы");

	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины, или номера колонок, т.е
	// в представлении можно указывать либо полное имя поля регистра сведений вида ИдГруппы + НомерКолонки,
	// либо просто НомерКолонки.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//	
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(26, "02");
	СписокПереносимыхПолей.Добавить(26, "10");

	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
	
	// СоответствиеСоставныхПолей -  
	// Значения - массив номеров колонок или окончаний имен ресурсов и реквизитов регистров после ИдГруппы,
	// которые нужно выводить. Значение элемента с нулевом индексом - разделительный символ между полями.
	// Ключ - номер колонки в которой нужно выводить несколько полей регистра сведений. 
		
	СоответствиеСоставныхПолей = Новый Соответствие;
	
	НастройкиАлгоритмаПечати.Вставить("СоответствиеСоставныхПолей", СоответствиеСоставныхПолей);

	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", "СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг", "СтрокаОП");

	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", "ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", "ЗаголовокРеквизитов");

	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", "Место осуществления деятельности сельскохозяйственного товаропроизводителя, КПП обособленного подразделения (при наличии)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", "Сведения по организации / индивидуальному предпринимателю");

	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", "ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", "ОП");

	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	

	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");	
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");

	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;

	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);

	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);
    
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);

	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	
	СтруктураПараметровСтраницы.Вставить("ЭтоУрожайная", Ложь);
	СтруктураПараметровСтраницы.Вставить("ВыводитьПустыеСтроки", Ложь);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, 
																		ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);
	
КонецПроцедуры

#КонецОбласти 


#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Возврат Отчеты.РегламентированныйОтчетАлкоПриложение33.ВерсияФорматаВыгрузки(НаДату, ВыбраннаяФорма);
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	Возврат Отчеты.РегламентированныйОтчетАлкоПриложение33.ТаблицаФормОтчета();
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Отчеты.РегламентированныйОтчетАлкоПриложение33.ДанныеРеглОтчета(ЭкземплярРеглОтчета);
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	Возврат Отчеты.РегламентированныйОтчетАлкоПриложение33.ДеревоФормИФорматов();
	
КонецФункции

#КонецОбласти

 мВерсияОтчета = "БПКОРП 3.0.42.54.4";
 
#КонецОбласти 


#КонецОбласти

#КонецЕсли






 