&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/04/2025";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы100");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы200");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы300");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы400");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_Таблица1");
	СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_Таблица2");
	СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_Таблица3");
	СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_Таблица4");
	СтруктураРеквизитовФормы.Вставить("Декларация");
	СтруктураРеквизитовФормы.Вставить("СведенияОтправкиДекларации");
	СтруктураРеквизитовФормы.Вставить("СведенияВыгрузкиДекларации");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьОбычныеРазделы();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьМногострочныеЧасти();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СведенияОтправкиДекларации = Новый Структура;
	СведенияОтправкиДекларации.Вставить("ОтправкаДекларации", Неопределено);
	СведенияОтправкиДекларации.Вставить("ИмяФайлаОтправкиДекларации", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДекларации = СведенияОтправкиДекларации;
	
	СведенияВыгрузкиДекларации = Новый Структура;
	СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации", Неопределено);
	СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации = СведенияВыгрузкиДекларации;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			ТабличныйДокумент.Области.Период.Очистить();
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	ДопПараметры = Неопределено;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ДопПараметры);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.реестр акц.1150151",
		'20250501') Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы100 = "П10000";
	СтруктураРеквизитовФормы.мИдГруппы200 = "П20000";
	СтруктураРеквизитовФормы.мИдГруппы300 = "П30000";
	СтруктураРеквизитовФормы.мИдГруппы400 = "П40000";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 6;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы = 8;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П10000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1000004");
	ИменаГраф.Добавить("П1000005");
	ИменаГраф.Добавить("П1000006");
	ИменаГраф.Добавить("П1000007");
	ИменаГраф.Добавить("П1000008");
	ИменаГраф.Добавить("П1000009");
	ИменаГраф.Добавить("П1000010");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппы100, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П20000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2000011");
	ИменаГраф.Добавить("П2000012");
	ИменаГраф.Добавить("П2000013");
	ИменаГраф.Добавить("П2000014");
	ИменаГраф.Добавить("П2000015");
	ИменаГраф.Добавить("П2000016");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппы200, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П30000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П3000020");
	ИменаГраф.Добавить("П3000021");
	ИменаГраф.Добавить("П3000022");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппы300, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П40000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П4000032");
	ИменаГраф.Добавить("П4000033");
	ИменаГраф.Добавить("П4000034");
	ИменаГраф.Добавить("П4000035");
	ИменаГраф.Добавить("П4000036");
	ИменаГраф.Добавить("П4000037");
	ИменаГраф.Добавить("П4000038");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппы400, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Таблица1", 1);
	мСтруктураМногоуровневыхРазделов.Вставить("Таблица2", 1);
	мСтруктураМногоуровневыхРазделов.Вставить("Таблица3", 1);
	мСтруктураМногоуровневыхРазделов.Вставить("Таблица4", 1);
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
			ТекВетка.ДанныеМногострочныхЧастей = Новый Структура;
		КонецЦикла;
		
		Если ИмяРаздела = "Таблица1" Тогда
			
			ИтоговыеСуммыПоКодамОпераций = Новый Массив;
			СтруктураСуммПоКодуОперации = Новый Структура;
			СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
			
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа8",  0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа9",  0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа10", 0);
			
			ИтоговыеСуммыПоКодамОпераций.Добавить(СтруктураСуммПоКодуОперации);
			СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела, ИтоговыеСуммыПоКодамОпераций);
			
		ИначеЕсли ИмяРаздела = "Таблица2" Тогда
			
			ИтоговыеСуммыПоКодамОпераций = Новый Массив;
			СтруктураСуммПоКодуОперации = Новый Структура;
			СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
			
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа14",  0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа15",  0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа16", 0);
			
			ИтоговыеСуммыПоКодамОпераций.Добавить(СтруктураСуммПоКодуОперации);
			СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела, ИтоговыеСуммыПоКодамОпераций);
			
		ИначеЕсли ИмяРаздела = "Таблица3" Тогда
			
			ИтоговыеСуммыПоКодамОпераций = Новый Массив;
			СтруктураСуммПоКодуОперации = Новый Структура;
			СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
			
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа22", 0);
			
			ИтоговыеСуммыПоКодамОпераций.Добавить(СтруктураСуммПоКодуОперации);
			СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела, ИтоговыеСуммыПоКодамОпераций);
			
		ИначеЕсли ИмяРаздела = "Таблица4" Тогда
			
			ИтоговыеСуммыПоКодамОпераций = Новый Массив;
			СтруктураСуммПоКодуОперации = Новый Структура;
			СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
			
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа28", 0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа30", 0);
			СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа40", 0);
			
			ИтоговыеСуммыПоКодамОпераций.Добавить(СтруктураСуммПоКодуОперации);
			СтруктураРеквизитовФормы.Вставить("ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела, ИтоговыеСуммыПоКодамОпераций);
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы()
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхСведения  = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневый раздел.
		Если мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Раздел.ИмяСтраницы]);
			
			Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
				Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
					ТабличныйДокумент.Очистить();
					ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
					ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
					СпрятатьЗначкиУдалитьСтроку();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
					СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
					СохранитьДанныеРаздела(Раздел.ИмяСтраницы);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Раздел.ИмяСтраницы = "Сведения"
			И ТипЗнч(СтруктураДанныхСведения) = Тип("Структура")
			И СтруктураДанныхСведения.Количество() = 0 Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
			ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Сведения";
	СтрокаУровня1.Представление      = "Показатели,
	|подлежащие
	|сопоставлению";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Таблица1";
	СтрокаУровня1.Представление      = "Таблица 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Таблица2";
	СтрокаУровня1.Представление      = "Таблица 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Таблица3";
	СтрокаУровня1.Представление      = "Таблица 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Таблица4";
	СтрокаУровня1.Представление      = "Таблица 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Титульный";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Сведения";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Таблица1";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Таблица2";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Таблица3";
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы = "Таблица4";
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2025Кв2");
	
	МесяцОтчета_Стр = Формат(Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					
					Если Область.Имя = "КодыПериода" И ЗначениеЗаполнено(КодПоказателя) Тогда
						РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
						Если РезультатПроверки <> МесяцОтчета_Стр Тогда
							
							Продолжить;
							
						КонецЕсли;
					КонецЕсли;
					
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Период", 2, ,
	"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериода"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П0000100", 1, ,
	"Выбор признака приобретения объема спирта", КоллекцияСписковВыбора["ПрПриобрОбСпирта"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П4000032", 1, ,
	"Выбор вида документа", КоллекцияСписковВыбора["ВидыДокумента"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета
		= Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""),
		СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета
		= Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""),
		СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида
		= РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц
		= Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		СписокСохранения.Вставить("ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела,
			СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела]);
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("Декларация", СтруктураРеквизитовФормы.Декларация);
	СписокСохранения.Вставить("ОтправкаДекларации",
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ОтправкаДекларации);
	СписокСохранения.Вставить("ИмяФайлаОтправкиДекларации",
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ИмяФайлаОтправкиДекларации);
	СписокСохранения.Вставить("ВыгрузкаДекларации",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ВыгрузкаДекларации);
	СписокСохранения.Вставить("ИмяФайлаВыгрузкиДекларации",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ИмяФайлаВыгрузкиДекларации);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		СохранитьТабличныеДокументыСтраниц();
		ВосстановитьТабличныеДокументыСтраниц();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = '%1';
				|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
			
			ИмяРаздела = Элем.Ключ;
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			Ном = 1;
			ЗаписьВыбрана = Истина;
			Пока ЗаписьВыбрана Цикл
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = ИмяРаздела + "Страница" + Формат(Ном, "ЧГ=");
				Если Зап.Выбран() Тогда
					Зап.Удалить();
					Ном = Ном + 1;
				Иначе
					ЗаписьВыбрана = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = ИмяРаздела + "Страница" + Формат(Ном, "ЧГ=");
				Зап.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента));
				Зап.Записать();
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
			СписокСохранения.Свойство("ИтоговыеСуммыПоКодамОпераций_" + ЭлементСтруктуры.Ключ,
				СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("Декларация", СтруктураРеквизитовФормы.Декларация);
	СписокСохранения.Свойство("ОтправкаДекларации",
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ОтправкаДекларации);
	СписокСохранения.Свойство("ИмяФайлаОтправкиДекларации",
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ИмяФайлаОтправкиДекларации);
	СписокСохранения.Свойство("ВыгрузкаДекларации",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ВыгрузкаДекларации);
	СписокСохранения.Свойство("ИмяФайлаВыгрузкиДекларации",
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ИмяФайлаВыгрузкиДекларации);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области[ЭлСтруктуры.Ключ];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		СтруктураРеквизитовФормы.Декларация = Неопределено;
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ОтправкаДекларации = Неопределено;
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ИмяФайлаОтправкиДекларации = Неопределено;
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ВыгрузкаДекларации = Неопределено;
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ИмяФайлаВыгрузкиДекларации = Неопределено;
		ТабличныйДокумент.Области["ИмяФайлаДекларации"].Значение = "";
	КонецЕсли;
	
	ТабличныйДокумент.Области["Декларация"].Значение = ПредставлениеОтчета(
		СтруктураРеквизитовФормы.Декларация);
	ТабличныйДокумент.Области["ОтправкаДекларации"].Значение = ПредставлениеОтправкиОтчета(
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.ОтправкаДекларации);
	ТабличныйДокумент.Области["ВыгрузкаДекларации"].Значение = ПредставлениеВыгрузкиОтчета(
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.ВыгрузкаДекларации);
	
	ВосстановитьТабличныеДокументыСтраниц();
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеДокументыСтраниц()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
			
			ИмяРаздела = Элем.Ключ;
			
			Рег = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов;
			
			ДеревоРеестра = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
			
			Для Ном = 1 По ДеревоРеестра.Строки.Количество() Цикл
				ВеткаРеестра = ДеревоРеестра.Строки[Ном - 1];
				Зап = Рег.СоздатьМенеджерЗаписи();
				Зап.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
				Зап.ВидДополнительногоФайла = ИмяРаздела + "Страница" + Формат(Ном, "ЧГ=");
				Зап.Прочитать();
				Если ВеткаРеестра.АдресТабличногоДокумента <> Неопределено Тогда
					УдалитьИзВременногоХранилища(ВеткаРеестра.АдресТабличногоДокумента);
				КонецЕсли;
				ВеткаРеестра.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
					Зап.СодержимоеФайла.Получить(), УникальныйИдентификатор);
			КонецЦикла;
			
			УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
				= ПоместитьВоВременноеХранилище(ДеревоРеестра, УникальныйИдентификатор);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли Область.Имя = "ОбновитьСведенияОтправокВыгрузок" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларации();
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "Декларация" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПарамОтбора = Новый Структура;
		ПарамОтбора.Вставить("ИсточникОтчета", "РегламентированныйОтчетАкцизыАлкоголь");
		ПарамОтбора.Вставить("Периодичность", СтруктураРеквизитовФормы.мПериодичность);
		Организации = Новый СписокЗначений;
		Организации.Добавить(СтруктураРеквизитовФормы.Организация);
		ПарамОтбора.Вставить("Организация", Организации);
		ПарамОтбора.Вставить("ОтборКодИФНС", Ложь);
		ПарамОтбора.Вставить("ОтборПериод", Истина);
		ПарамОтбора.Вставить("ДатаНачалаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ПарамОтбора.Вставить("ДатаКонцаПериодаОтчета", НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		
		ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораОтчета", ПарамОтбора, ЭтотОбъект);
		ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии
			= Новый ОписаниеОповещения("ОткрытьФормуВыбораОтчетаЗавершение", ЭтотОбъект);
		ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОтчета.Элементы.ФормаСоздатьОтчет.Видимость = Ложь;
		ФормаВыбораОтчета.Открыть();
		
	ИначеЕсли Область.Имя = "ОтправкаДекларации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьОтправкуОтчета(
			СтруктураРеквизитовФормы["Декларация"], СтруктураРеквизитовФормы.Организация,
			ПредставлениеОтчета(СтруктураРеквизитовФормы["Декларация"]),
			Новый ОписаниеОповещения("ОткрытьФормуВыбораОтправкиОтчетовЗавершение", ЭтотОбъект));
		
	ИначеЕсли Область.Имя = "ВыгрузкаДекларации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОтбора = Новый Структура("Организация, Основание, КодДекларации",
		СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.Декларация, "1151090");
		
		ВыгрузкиДекларации
			= РегламентированнаяОтчетностьВызовСервера.ДокументыВыгрузкиДекларацииПоАкцизам(ПараметрыОтбора);
		
		ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораВыгрузкиОтчетов", Новый Структура("ДокументыВыгрузки", ВыгрузкиДекларации), ЭтотОбъект);
		ФормаВыбораОтчета.Заголовок = ПредставлениеОтчета(СтруктураРеквизитовФормы["Декларация"]) + ": история выгрузки";
		ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии
			= Новый ОписаниеОповещения("ОткрытьФормуВыбораВыгрузкиОтчетовЗавершение", ЭтотОбъект, ВыгрузкиДекларации);
		ФормаВыбораОтчета.Открыть();
		
	ИначеЕсли Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" И ИмяРаздела <> "Сведения" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	ДопПараметры = Неопределено;
	Если ИмяРаздела = "Титульный" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела, ДопПараметры);
	
	Если СтрНачинаетсяС(ИмяРаздела, "Таблица") Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Доступность = Ложь;
	
	Если Лев(Элемент.ТекущаяОбласть.Имя, 13) = "УдалитьСтроку" Тогда
		ИмяГруппы = Неопределено;
	Иначе
		ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть.Имя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтрокуКопированием.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтрокуКопированием;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтрокуКопированием", "Добавить " + Подстрока + " копированием");
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораОтчетаЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы["Декларация"] = РезультатВыбора Тогда
			ТабличныйДокумент.Область("Декларация").Значение = "";
			СтруктураРеквизитовФормы.Вставить("Декларация", Неопределено);
		Иначе
			ТабличныйДокумент.Область("Декларация").Значение = ПредставлениеОтчета(РезультатВыбора);
			СтруктураРеквизитовФормы.Вставить("Декларация", РезультатВыбора);
		КонецЕсли;
		ОбработатьСведенияОтправокВыгрузокДекларации();
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораОтправкиОтчетовЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ОтправкаДекларации"]
			= ПредставлениеОтправкиОтчета(РезультатВыбора) Тогда
			ТабличныйДокумент.Область("ОтправкаДекларации").Значение = "";
			СведенияОтправкиДекларации = Новый Структура;
			СведенияОтправкиДекларации.Вставить("ОтправкаДекларации", Неопределено);
			СведенияОтправкиДекларации.Вставить("ИмяФайлаОтправкиДекларации", Неопределено);
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации = СведенияОтправкиДекларации;
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = "";
		Иначе
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(РезультатВыбора.ИмяФайла);
			ТабличныйДокумент.Область("ОтправкаДекларации").Значение = ПредставлениеОтправкиОтчета(РезультатВыбора);
			СведенияОтправкиДекларации = Новый Структура;
			СведенияОтправкиДекларации.Вставить("ОтправкаДекларации", ПредставлениеОтправкиОтчета(РезультатВыбора));
			СведенияОтправкиДекларации.Вставить("ИмяФайлаОтправкиДекларации", СтруктураПолногоИмениФайла.ИмяБезРасширения);
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации = СведенияОтправкиДекларации;
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = СтруктураПолногоИмениФайла.ИмяБезРасширения;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВыгрузкиОтчетовЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыгрузкаДекларацииОчищенаВручную = Ложь;
		Если СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ВыгрузкаДекларации"] = РезультатВыбора Тогда
			ТабличныйДокумент.Область("ВыгрузкаДекларации").Значение = "";
			СведенияВыгрузкиДекларации = Новый Структура;
			СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации", Неопределено);
			СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации", Неопределено);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации = СведенияВыгрузкиДекларации;
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = "";
			ВыгрузкаДекларацииОчищенаВручную = Истина;
		Иначе
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
				ДопПараметры.НайтиПоЗначению(РезультатВыбора).Представление);
			ТабличныйДокумент.Область("ВыгрузкаДекларации").Значение = ПредставлениеВыгрузкиОтчета(РезультатВыбора);
			СведенияВыгрузкиДекларации = Новый Структура;
			СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации",
				ДопПараметры.НайтиПоЗначению(РезультатВыбора).Значение);
			СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации",
				СтруктураПолногоИмениФайла.ИмяБезРасширения);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации = СведенияВыгрузкиДекларации;
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = СтруктураПолногоИмениФайла.ИмяБезРасширения;
		КонецЕсли;
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный", , ВыгрузкаДекларацииОчищенаВручную);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОтчета(РегОтчет)
	
	Если ЗначениеЗаполнено(РегОтчет) Тогда
		Возврат РегОтчет.НаименованиеОтчета + " за " + РегОтчет.ПредставлениеПериода
			+ " (Вид: " + СтрЗаменить(СтрЗаменить(СокрЛП(РегОтчет.ПредставлениеВида),
			"П", "первичная"), "К/", "Номер корректировки: ")
			+ ")";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеВыгрузкиОтчета(ВыгрузкаРегОтчета)
	
	Если ЗначениеЗаполнено(ВыгрузкаРегОтчета) Тогда
		Возврат "Выгрузка от " + ВыгрузкаРегОтчета.Дата + " № " + ВыгрузкаРегОтчета.Номер;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеОтправкиОтчета(ОтправкаРегОтчета)
	
	Если ЗначениеЗаполнено(ОтправкаРегОтчета) Тогда
		Если ТипЗнч(ОтправкаРегОтчета) = Тип("Строка") Тогда
			Возврат ОтправкаРегОтчета;
		Иначе
			Возврат "Отправка от " + ОтправкаРегОтчета.ДатаОтправки;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = мСтруктураЦветовРаскраски["_5"];
	
	ОбрабОбласть.Защита   = Истина;
	ОбрабОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(мСтруктураЦветовРаскраски, ОбрабОбласть)
	
	ЦветОбластиРучногоВвода = мСтруктураЦветовРаскраски["_0"];
	
	ОбрабОбласть.Защита = Ложь;
	ОбрабОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяТекРаздела, ДопПараметры = Неопределено, ВыгрузкаДекларацииОчищенаВручную = Ложь)
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяТекРаздела = "Титульный" Тогда
		
		ТДО["СекцияПояснение_НомерКорректировки"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
		// Область сведений о выгрузках отображается вместо области сведений об отправках
		// в случае, если в информационной базе отсутствуют отправки, но имеются выгрузки.
		Обл1 = Форма.ТабличныйДокумент.Области.СекцияОтправкаДекларации;
		Обл2 = Форма.ТабличныйДокумент.Области.СекцияВыгрузкаДекларации;
		Если ЗначениеЗаполнено(
			Форма.СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ИмяФайлаВыгрузкиДекларации"])
			ИЛИ ВыгрузкаДекларацииОчищенаВручную
			ИЛИ (ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("КолОтправок")
			И ДопПараметры.Свойство("КолВыгрузок") И ДопПараметры["КолОтправок"] = 0 И ДопПараметры["КолВыгрузок"] > 0) Тогда
			Обл2.Видимость = Истина;
			Обл1.Видимость = Ложь;
			Форма.ТабличныйДокумент.Области.ОтправкаДекларации.Очистить();
		Иначе
			Обл1.Видимость = Истина;
			ОблОтправкаДекларации = Форма.ТабличныйДокумент.Области.ОтправкаДекларации;
			Если ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы["Декларация"]) Тогда
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОблОтправкаДекларации);
			Иначе
				// Запрет на выбор отправки, если не выбрана декларация.
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ОблОтправкаДекларации);
			КонецЕсли;
			Обл2.Видимость = Ложь;
			Форма.ТабличныйДокумент.Области.ВыгрузкаДекларации.Очистить();
		КонецЕсли;
		
	Иначе
		
		ОбрабОбласти = Новый Массив;
		
		Если ИмяТекРаздела = "Таблица1" Тогда
			
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа8"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа9"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа10"]);
			
		ИначеЕсли ИмяТекРаздела = "Таблица2" Тогда
			
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа14"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа15"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа16"]);
			
		ИначеЕсли ИмяТекРаздела = "Таблица3" Тогда
			
			// Особая обработка: в Таблице 3 значения граф 17, 18, 19, 23 доступны для редактирования
			// только на первой странице, а отображаются на всех страницах.
			//
			Если Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] > 1 Тогда
				
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000017"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000018"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000019"], Ложь);
				ЗапретитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000023"], Ложь);
				
			Иначе
				
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000017"]);
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000018"]);
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000019"]);
				РазрешитьВводДанныхВОбласть(Форма.мСтруктураЦветовРаскраски, ТДО["П0000023"]);
				
			КонецЕсли;
			
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа22"]);
			
		ИначеЕсли ИмяТекРаздела = "Таблица4" Тогда
			
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа28"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа30"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа38"]);
			ОбрабОбласти.Добавить(ТДО["ИтогоСуммаГрафа40"]);
			
		КонецЕсли;
		
		Для каждого ОбрабОбласть Из ОбрабОбласти Цикл
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				ОбрабОбласть.Защита   = Ложь;
				ОбрабОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				ОбрабОбласть.Защита   = Истина;
				ОбрабОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела)
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		Если ТекВетка.АдресТабличногоДокумента <> Неопределено Тогда
			УдалитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента);
		КонецЕсли;
		ТекВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
			ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
		
		Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			КодОперации = "";
			
			Если НаимРаздела = "Таблица1" Тогда
				
				ИтогоСуммаГрафа8  = ТабличныйДокумент.Области["ИтогоСуммаГрафа8"].Значение;
				ИтогоСуммаГрафа9  = ТабличныйДокумент.Области["ИтогоСуммаГрафа9"].Значение;
				ИтогоСуммаГрафа10 = ТабличныйДокумент.Области["ИтогоСуммаГрафа10"].Значение;
				
				Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
					Если Ветка.Данные["КодОперации"] = КодОперации Тогда
						Ветка.Данные["ИтогоСуммаГрафа8"]  = ИтогоСуммаГрафа8;
						Ветка.Данные["ИтогоСуммаГрафа9"]  = ИтогоСуммаГрафа9;
						Ветка.Данные["ИтогоСуммаГрафа10"] = ИтогоСуммаГрафа10;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НаимРаздела = "Таблица2" Тогда
				
				ИтогоСуммаГрафа14 = ТабличныйДокумент.Области["ИтогоСуммаГрафа14"].Значение;
				ИтогоСуммаГрафа15 = ТабличныйДокумент.Области["ИтогоСуммаГрафа15"].Значение;
				ИтогоСуммаГрафа16 = ТабличныйДокумент.Области["ИтогоСуммаГрафа16"].Значение;
				
				Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
					Если Ветка.Данные["КодОперации"] = КодОперации Тогда
						Ветка.Данные["ИтогоСуммаГрафа14"] = ИтогоСуммаГрафа14;
						Ветка.Данные["ИтогоСуммаГрафа15"] = ИтогоСуммаГрафа15;
						Ветка.Данные["ИтогоСуммаГрафа16"] = ИтогоСуммаГрафа16;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НаимРаздела = "Таблица3" Тогда
				
				ИтогоСуммаГрафа22 = ТабличныйДокумент.Области["ИтогоСуммаГрафа22"].Значение;
				
				Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
					Если Ветка.Данные["КодОперации"] = КодОперации Тогда
						Ветка.Данные["ИтогоСуммаГрафа22"] = ИтогоСуммаГрафа22;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НаимРаздела = "Таблица4" Тогда
				
				ИтогоСуммаГрафа28 = ТабличныйДокумент.Области["ИтогоСуммаГрафа28"].Значение;
				ИтогоСуммаГрафа30 = ТабличныйДокумент.Области["ИтогоСуммаГрафа30"].Значение;
				ИтогоСуммаГрафа40 = ТабличныйДокумент.Области["ИтогоСуммаГрафа40"].Значение;
				
				Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
					Если Ветка.Данные["КодОперации"] = КодОперации Тогда
						Ветка.Данные["ИтогоСуммаГрафа28"] = ИтогоСуммаГрафа28;
						Ветка.Данные["ИтогоСуммаГрафа30"] = ИтогоСуммаГрафа30;
						Ветка.Данные["ИтогоСуммаГрафа40"] = ИтогоСуммаГрафа40;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + НаимРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("КодОперации", "");
		
		Если НаимРаздела = "Таблица1" Тогда
			
			СтруктураДанных.Вставить("П0000001", ТабличныйДокумент.Область("П0000001").Значение);
			СтруктураДанных.Вставить("П0000002", ТабличныйДокумент.Область("П0000002").Значение);
			СтруктураДанных.Вставить("П0000003", ТабличныйДокумент.Область("П0000003").Значение);
			
			СтруктураДанных.Вставить("ИтогоСуммаГрафа8",  ТабличныйДокумент.Область("ИтогоСуммаГрафа8").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа9",  ТабличныйДокумент.Область("ИтогоСуммаГрафа9").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа10", ТабличныйДокумент.Область("ИтогоСуммаГрафа10").Значение);
			
		ИначеЕсли НаимРаздела = "Таблица2" Тогда
			
			СтруктураДанных.Вставить("ИтогоСуммаГрафа14", ТабличныйДокумент.Область("ИтогоСуммаГрафа14").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа15", ТабличныйДокумент.Область("ИтогоСуммаГрафа15").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа16", ТабличныйДокумент.Область("ИтогоСуммаГрафа16").Значение);
			
		ИначеЕсли НаимРаздела = "Таблица3" Тогда
			
			СтруктураДанных.Вставить("П0000017", ТабличныйДокумент.Область("П0000017").Значение);
			СтруктураДанных.Вставить("П0000018", ТабличныйДокумент.Область("П0000018").Значение);
			СтруктураДанных.Вставить("П0000019", ТабличныйДокумент.Область("П0000019").Значение);
			
			СтруктураДанных.Вставить("П0000023", ТабличныйДокумент.Область("П0000023").Значение);
			
			СтруктураДанных.Вставить("ИтогоСуммаГрафа22", ТабличныйДокумент.Область("ИтогоСуммаГрафа22").Значение);
			
		ИначеЕсли НаимРаздела = "Таблица4" Тогда
			
			СтруктураДанных.Вставить("П0000024", ТабличныйДокумент.Область("П0000024").Значение);
			СтруктураДанных.Вставить("П0000025", ТабличныйДокумент.Область("П0000025").Значение);
			СтруктураДанных.Вставить("П0000026", ТабличныйДокумент.Область("П0000026").Значение);
			СтруктураДанных.Вставить("П0000027", ТабличныйДокумент.Область("П0000027").Значение);
			СтруктураДанных.Вставить("П0000028", ТабличныйДокумент.Область("П0000028").Значение);
			СтруктураДанных.Вставить("П0000029", ТабличныйДокумент.Область("П0000029").Значение);
			СтруктураДанных.Вставить("П0000030", ТабличныйДокумент.Область("П0000030").Значение);
			СтруктураДанных.Вставить("П0000031", ТабличныйДокумент.Область("П0000031").Значение);
			
			СтруктураДанных.Вставить("П0000039", ТабличныйДокумент.Область("П0000039").Значение);
			СтруктураДанных.Вставить("П0000040", ТабличныйДокумент.Область("П0000040").Значение);
			
			СтруктураДанных.Вставить("ИтогоСуммаГрафа28", ТабличныйДокумент.Область("ИтогоСуммаГрафа28").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа30", ТабличныйДокумент.Область("ИтогоСуммаГрафа30").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа38", ТабличныйДокумент.Область("ИтогоСуммаГрафа38").Значение);
			СтруктураДанных.Вставить("ИтогоСуммаГрафа40", ТабличныйДокумент.Область("ИтогоСуммаГрафа40").Значение);
			
		КонецЕсли;
		
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			
			Если ЭлемСтруктуры.Значение["УровеньПодчинения"] = 0 Тогда
				ДеревоДанных = Новый ДеревоЗначений;
				ДеревоДанных.Колонки.Добавить("Данные");
				ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
				ДеревоДанных.Колонки.Добавить("АдресТабличногоДокумента");
				
				СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ЭлемСтруктуры.Ключ, ДеревоДанных);
				
				СтруктураДанныхМногострочныхЧастей.Вставить(ЭлемСтруктуры.Ключ, ДеревоДанных);
			КонецЕсли;
			
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если ТипЗнч(ТекОбласть) = Тип("РисунокТабличногоДокумента")
				ИЛИ ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				ИЛИ ТекОбласть.СодержитЗначение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число))
		<> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ДеревоПодчСтрок.Колонки.Добавить("АдресТабличногоДокумента");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Если ТекВетка.АдресТабличногоДокумента <> Неопределено Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ПолучитьИзВременногоХранилища(ТекВетка.АдресТабличногоДокумента));
		КонецЕсли;
		
		Если НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			КодОперации = "";
			
			Если ИмяТекРаздела = "Таблица1" Тогда
				
				СуммаГрафа8  = 0;
				СуммаГрафа9  = 0;
				СуммаГрафа10 = 0;
				Для каждого ЭлМассива Из СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяТекРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа8  = СуммаГрафа8  + ЭлМассива["ИтогоСуммаГрафа8"];
						СуммаГрафа9  = СуммаГрафа9  + ЭлМассива["ИтогоСуммаГрафа9"];
						СуммаГрафа10 = СуммаГрафа10 + ЭлМассива["ИтогоСуммаГрафа10"];
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа8"].Значение  = СуммаГрафа8;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа9"].Значение  = СуммаГрафа9;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа10"].Значение = СуммаГрафа10;
				
			ИначеЕсли ИмяТекРаздела = "Таблица2" Тогда
				
				СуммаГрафа14 = 0;
				СуммаГрафа15 = 0;
				СуммаГрафа16 = 0;
				Для каждого ЭлМассива Из СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяТекРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа14 = СуммаГрафа14 + ЭлМассива["ИтогоСуммаГрафа14"];
						СуммаГрафа15 = СуммаГрафа15 + ЭлМассива["ИтогоСуммаГрафа15"];
						СуммаГрафа16 = СуммаГрафа16 + ЭлМассива["ИтогоСуммаГрафа16"];
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа14"].Значение = СуммаГрафа14;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа15"].Значение = СуммаГрафа15;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа16"].Значение = СуммаГрафа16;
				
			ИначеЕсли ИмяТекРаздела = "Таблица3" Тогда
				
				СуммаГрафа22 = 0;
				Для каждого ЭлМассива Из СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяТекРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа22 = СуммаГрафа22 + ЭлМассива["ИтогоСуммаГрафа22"];
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа22"].Значение = СуммаГрафа22;
				
			ИначеЕсли ИмяТекРаздела = "Таблица4" Тогда
				
				СуммаГрафа28 = 0;
				СуммаГрафа30 = 0;
				СуммаГрафа40 = 0;
				Для каждого ЭлМассива Из СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяТекРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа28 = СуммаГрафа28 + ЭлМассива["ИтогоСуммаГрафа28"];
						СуммаГрафа30 = СуммаГрафа30 + ЭлМассива["ИтогоСуммаГрафа30"];
						СуммаГрафа40 = СуммаГрафа40 + ЭлМассива["ИтогоСуммаГрафа40"];
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа28"].Значение = СуммаГрафа28;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа30"].Значение = СуммаГрафа30;
				ТабличныйДокумент.Области["ИтогоСуммаГрафа40"].Значение = СуммаГрафа40;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Особая обработка: в Таблице 3 значения граф 17, 18, 19, 23 доступны для редактирования
		// только на первой странице, а отображаются на всех страницах.
		//
		Если ИмяТекРаздела = "Таблица3" И НовыеНомераСтрокМногоуровнегоРаздела[0] > 1 Тогда
			
			ТабличныйДокумент.Области["П0000017"].Значение = ДеревоДанныхРаздела.Строки[0].Данные["П0000017"];
			ТабличныйДокумент.Области["П0000018"].Значение = ДеревоДанныхРаздела.Строки[0].Данные["П0000018"];
			ТабличныйДокумент.Области["П0000019"].Значение = ДеревоДанныхРаздела.Строки[0].Данные["П0000019"];
			ТабличныйДокумент.Области["П0000023"].Значение = ДеревоДанныхРаздела.Строки[0].Данные["П0000023"];
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяТекРаздела = "Титульный" Тогда
			
			Если СтруктураРеквизитовФормы.Свойство("Декларация") Тогда
				ТабличныйДокумент.Область("Декларация").Значение = ПредставлениеОтчета(
					СтруктураРеквизитовФормы["Декларация"]);
				ТабличныйДокумент.Область("ОтправкаДекларации").Значение = ПредставлениеОтправкиОтчета(
					СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ОтправкаДекларации"]);
				ТабличныйДокумент.Область("ВыгрузкаДекларации").Значение = ПредставлениеВыгрузкиОтчета(
					СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ВыгрузкаДекларации"]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметры = Неопределено;
	Если ИмяТекРаздела = "Титульный" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела, ДопПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСведенияОтправокВыгрузокДекларации(ВозврПараметры = Неопределено, ИзменятьДанныеОтчета = Истина)
	
	ИмяФайла = Неопределено;
	
	ВозврПараметры = Новый Структура("КолОтправок, КолВыгрузок", 0, 0);
	
	// Поиск имени файла в отправках.
	
	СведенияПоВсемОтправкам
		= СведенияПоОтправкам.СведенияПоВсемОтправкам(СтруктураРеквизитовФормы["Декларация"]);
	
	КолОтправок = СведенияПоВсемОтправкам.Количество();
	
	ВозврПараметры["КолОтправок"] = КолОтправок;
	
	Если ИзменятьДанныеОтчета Тогда
		
		Если КолОтправок > 0 Тогда
			Идентификатор = СведенияПоВсемОтправкам[0].ИдентификаторОтправки;
			СведенияПоОтправке = СведенияПоОтправкам.СведенияПоОтправке(
				СтруктураРеквизитовФормы["Декларация"], Идентификатор);
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СведенияПоОтправке.ИмяФайла);
			Отправка = ПредставлениеОтправкиОтчета(СведенияПоВсемОтправкам[0]);
			ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ОтправкаДекларации"] = Отправка;
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ИмяФайлаОтправкиДекларации"] = ИмяФайла;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ОтправкаДекларации").Значение = Отправка;
				ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = ИмяФайла;
			КонецЕсли;
		Иначе
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ОтправкаДекларации"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ИмяФайлаОтправкиДекларации"] = Неопределено;
			ТабличныйДокумент.Область("ОтправкаДекларации").Очистить();
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Очистить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			// Очистка сведений выгрузки, если имя файла найдено в отправках.
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации", Неопределено);
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации", Неопределено);
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ВыгрузкаДекларации").Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	// Поиск имени файла в выгрузках.
	
	ПараметрыОтбора = Новый Структура("Организация, Основание, КодДекларации",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.Декларация, "1151090");
	ВыгрузкиДекларации
	= РегламентированнаяОтчетностьВызовСервера.ДокументыВыгрузкиДекларацииПоАкцизам(ПараметрыОтбора);
	
	КолВыгрузок = ВыгрузкиДекларации.Количество();
	
	ВозврПараметры["КолВыгрузок"] = КолВыгрузок;
	
	Если ИзменятьДанныеОтчета Тогда
		
		Если КолВыгрузок > 0 Тогда
			СтруктураПолногоИмениФайла
				= ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыгрузкиДекларации[0].Представление);
			Выгрузка = ВыгрузкиДекларации[0].Значение;
			ИмяФайла = СтруктураПолногоИмениФайла.ИмяБезРасширения;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ВыгрузкаДекларации"] = Выгрузка;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ИмяФайлаВыгрузкиДекларации"] = ИмяФайла;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ВыгрузкаДекларации").Значение = ПредставлениеВыгрузкиОтчета(
					СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ВыгрузкаДекларации"]);
				ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = ИмяФайла;
			КонецЕсли;
		Иначе
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ВыгрузкаДекларации"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации["ИмяФайлаВыгрузкиДекларации"] = Неопределено;
			ТабличныйДокумент.Область("ВыгрузкаДекларации").Очистить();
			ТабличныйДокумент.Область("ИмяФайлаДекларации").Очистить();
		КонецЕсли;
		// Очистка сведений отправки, если имя файла найдено в выгрузках.
		Если ЗначениеЗаполнено(ИмяФайла) Тогда
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ОтправкаДекларации"] = Неопределено;
			СтруктураРеквизитовФормы.СведенияОтправкиДекларации["ИмяФайлаОтправкиДекларации"] = Неопределено;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
				ТабличныйДокумент.Область("ОтправкаДекларации").Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ДобавитьСтраницуНаСервере(ИмяРаздела);
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуНаСервере(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	Ветка = ДеревоДанных.Строки.Добавить();
	Ветка.Данные = Новый Структура;
	Ветка.ДанныеМногострочныхЧастей = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанных.Строки.Количество();
	
	// Сохранение данных предыдущей страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ПредыдущаяВетка = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	ПредыдущаяВетка.Данные = ДанныеТаблДокумента.Данные;
	ПредыдущаяВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Если ПредыдущаяВетка.АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ПредыдущаяВетка.АдресТабличногоДокумента);
	КонецЕсли;
	ПредыдущаяВетка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	// Вывод данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СпрятатьЗначкиУдалитьСтроку();
	
	// Сохранение данных новой страницы.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	Ветка.Данные = ДанныеТаблДокумента.Данные;
	Ветка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	Ветка.АдресТабличногоДокумента = ПоместитьВоВременноеХранилище(
		ТабличныйДокумент.ПолучитьОбласть(), УникальныйИдентификатор);
	
	Если ИмяРаздела = "Таблица1" Тогда
		
		СтруктураСуммПоКодуОперации = Новый Структура;
		СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа8",  0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа9",  0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа10", 0);
		СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела].Добавить(СтруктураСуммПоКодуОперации);
		
	ИначеЕсли ИмяРаздела = "Таблица2" Тогда
		
		СтруктураСуммПоКодуОперации = Новый Структура;
		СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа14", 0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа15", 0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа16", 0);
		СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела].Добавить(СтруктураСуммПоКодуОперации);
		
	ИначеЕсли ИмяРаздела = "Таблица3" Тогда
		
		СтруктураСуммПоКодуОперации = Новый Структура;
		СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа22", 0);
		СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела].Добавить(СтруктураСуммПоКодуОперации);
		
	ИначеЕсли ИмяРаздела = "Таблица4" Тогда
		
		СтруктураСуммПоКодуОперации = Новый Структура;
		СтруктураСуммПоКодуОперации.Вставить("КодОперации", "");
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа28", 0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа30", 0);
		СтруктураСуммПоКодуОперации.Вставить("ИтогоСуммаГрафа40", 0);
		СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела].Добавить(СтруктураСуммПоКодуОперации);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела           = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	УдалитьСтраницуНаСервере(ИмяРаздела, НомУдаляемойСтраницы);
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуНаСервере(ИмяРаздела, НомерУдаляемойСтраницы)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	КолСтраниц = ДеревоДанных.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомерУдаляемойСтраницы = КолСтраниц,
		НомерУдаляемойСтраницы - 1, НомерУдаляемойСтраницы);
	
	Если ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента <> Неопределено Тогда
		УдалитьИзВременногоХранилища(ДеревоДанных.Строки[НомерУдаляемойСтраницы - 1].АдресТабличногоДокумента);
	КонецЕсли;
	
	ДеревоДанных.Строки.Удалить(НомерУдаляемойСтраницы - 1);
	
	Если СтрНачинаетсяС(ИмяРаздела, "Таблица") Тогда
		СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела].Удалить(НомерУдаляемойСтраницы - 1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуКопированием(Команда)
	
	ВставитьДополнительнуюСтроку(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку(Знач Копирование = Ложь)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1))
			<> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(
		СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяГруппы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Превышено допустимое количество строк табличного документа. Добавьте страницу и продолжите ввод данных';
			|en = 'Превышено допустимое количество строк табличного документа. Добавьте страницу и продолжите ввод данных'"));
		Возврат;
	КонецЕсли;
	
	ВставитьДопСтроку(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяГруппы, ИмяОбластиПреемника, Копирование);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если Копирование Тогда
		Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяРаздела, Знач ИмяГруппы, Знач ИмяОбластиПреемника, Знач Копирование = Ложь)
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		
		Если Копирование Тогда
			
			ТекОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			
			ОбластьДляКопированияВерх = ТекОбласть.Верх;
			
			ОбластьДляКопированияНиз = Неопределено;
			ТекКоординаты = СтрокаСКоординатамиПоказателя(ТекОбласть.Имя);
			ТекИндекс_Число = ИндексПоказателя(ТекОбласть.Имя);
			СледИндекс_Число = ТекИндекс_Число + 1;
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти("УдалитьСтроку"
			+ ИмяГруппы + ТекКоординаты + СтрокаСИндексомПоказателя(СледИндекс_Число));
			Если ИскомаяОбласть = Неопределено Тогда
				ИскомаяОбласть = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки"
				+ ИмяГруппы + ТекКоординаты + СтрокаСИндексомПоказателя(ТекИндекс_Число));
			КонецЕсли;
			Если ИскомаяОбласть <> Неопределено Тогда
				ОбластьДляКопированияНиз = ИскомаяОбласть.Верх - 1;
			КонецЕсли;
			
			Если ОбластьДляКопированияНиз <> Неопределено Тогда
				
				ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ОбластьДляКопированияВерх, , ОбластьДляКопированияНиз, );
				
				МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
				
				УровеньПодчиненияИндекс = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["УровеньПодчинения"];
				
				ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
				НовИндекс_Число = ПреИндекс_Число + 1;
				
				СоответствиеИменОбластей = Новый Соответствие;
				
				Для каждого ИскомаяОбласть Из ВремТаблДок.Области Цикл
					Если СтрНачинаетсяС(ИскомаяОбласть.Имя, "МногострочнаяЧасть") Тогда
						СоответствиеИменОбластей.Вставить(ИскомаяОбласть.Имя, "");
					Иначе
						МасПодстрок = СтрРазделить(ИскомаяОбласть.Имя, "_", Ложь);
						Если МасПодстрок.Количество() >= УровеньПодчиненияИндекс + 2 Тогда
							МасПодстрок[УровеньПодчиненияИндекс + 1] = Формат(НовИндекс_Число, "ЧГ=");
						КонецЕсли;
						СоответствиеИменОбластей.Вставить(ИскомаяОбласть.Имя, СтрСоединить(МасПодстрок, "_"));
					КонецЕсли;
				КонецЦикла;
				
				НовИмяТекОбл = Неопределено;
				
				Для каждого Эл Из СоответствиеИменОбластей Цикл
					ИскомаяОбласть = ВремТаблДок.Области.Найти(Эл.Ключ);
					Если ИскомаяОбласть <> Неопределено Тогда
						ИскомаяОбласть.Имя = Эл.Значение;
						Если НовИмяТекОбл = Неопределено И СтрНачинаетсяС(ИскомаяОбласть.Имя, МассивИменГраф[0]) Тогда
							НовИмяТекОбл = ИскомаяОбласть.Имя;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
				
				ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
				ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
				
				НовИндекс_Число = ПреИндекс_Число + 1;
				НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
				
				ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
				НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
				
				Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
					Обл.Гиперссылка = Истина;
					Обл.Текст = "х";
				КонецЕсли;
				
				Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
				Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
				Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
				Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
				
				ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
				
				ВставляемаяОбласть = ВремТаблДок.Область(1, , ВремТаблДок.ВысотаТаблицы, );
				
				ТабличныйДокумент.ВставитьОбласть(
				ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
				
				// Установка текущей области после добавления строки копированием.
				Если НовИмяТекОбл <> Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ВремТаблДок = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
			СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела).ПолучитьОбласть();
			
			ИскомаяОбластьМнЧ = ВремТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
			
			ВремТаблДок = ВремТаблДок.ПолучитьОбласть(ИскомаяОбластьМнЧ.Верх, ,
				ИскомаяОбластьМнЧ.Верх + ВысотаМногострочнойЧасти(ИмяГруппы, ВремТаблДок) - 1, );
			
			ВремТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
			
			НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
			
			КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
			НачКоординаты = "";
			Для НомУр = 1 По КолУровнейПодчиненности Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
			ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
			
			НовИндекс_Число = ПреИндекс_Число + 1;
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
			ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
			
			МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
				НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
				
				ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Очистить();
				КонецЕсли;
			КонецЦикла;
			
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НачПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Если НовИндекс_Число = 2 Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
			КонецЕсли;
			
			Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
			Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
			
			ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, НачКоординаты + НачИндекс, НовКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ВремТаблДок, ПарамРеинд);
			КонецЦикла;
			
			ВставляемаяОбласть = ВремТаблДок.Область(1, , ВремТаблДок.ВысотаТаблицы, );
			
			// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
			// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
			НомераСпецКолонок = Неопределено;
			СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
				"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
			Если НомераСпецКолонок <> Неопределено Тогда
				Для каждого НомКолонки Из НомераСпецКолонок Цикл
					// Удаление линии в определенных колонках последней (до добавления) строки.
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
					// Установка линии в определенных колонках добавляемой строки.
					Обл = ВремТаблДок.Область(
						ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТабличныйДокумент.ВставитьОбласть(
				ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
														|en = 'Не выбрана удаляемая строка многострочного раздела'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СпрятатьЗначкиУдалитьСтроку()
	
	Для каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Лев(Обл.Имя, 13) = "УдалитьСтроку" Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПревышеноДопустимоеКоличествоСтрокТабличногоДокумента(ИмяРаздела, ИмяГруппы)
	
	ДопустимоеКоличествоСтрок = 1000;
	
	Возврат ТабличныйДокумент.ВысотаТаблицы + ВысотаМногострочнойЧасти(ИмяГруппы) > ДопустимоеКоличествоСтрок;
	
КонецФункции

&НаСервере
Функция ВысотаМногострочнойЧасти(ИмяГруппы, ТаблДок = Неопределено)
	
	Если ТаблДок = Неопределено Тогда
		ТаблДок = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(
		ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела).ПолучитьОбласть();
	КонецЕсли;
	
	ИскомаяОбласть1 = ТаблДок.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
	Для каждого ИскомаяОбласть2 Из ТаблДок.Области Цикл
		Если Лев(ИскомаяОбласть2.Имя, 16 + СтруктураРеквизитовФормы.ДлинаИмениГруппы)
			= "ДобавлениеСтроки" + ИмяГруппы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИскомаяОбласть2.Верх - ИскомаяОбласть1.Верх;
	
КонецФункции

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	НачИндекс = "_1";
	
	Для каждого ИмяГрафы Из МассивИменГраф Цикл
		ПреИмяОбл = ИмяГрафы + ПреКоординаты + НачИндекс;
		НовИмяОбл = ИмяГрафы + НовКоординаты + НачИндекс;
		
		ОбластьЯчейки = ТаблДок.Области[ПреИмяОбл];
		ОбластьЯчейки.Имя = НовИмяОбл;
	КонецЦикла;
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + НачИндекс;
	НовПостфикс = ИмяГруппы + НовКоординаты + НачИндекс;
	
	Обл = ТаблДок.Области.Найти("УдалитьСтроку" + ПреПостфикс);
	Обл.Имя = "УдалитьСтроку" + НовПостфикс;
	Обл.Гиперссылка = Ложь;
	Обл.Текст = "";
	
	Обл = ТаблДок.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТаблДок.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
	ТаблДок.Область("МногострочнаяЧасть" + ИмяГруппы).Имя = "";
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
			ИмяПодчГруппы, ПреКоординаты + НачИндекс, НовКоординаты + НачИндекс);
		РеиндексироватьПодчиненныеДопСтрокиПриДобавлении(ТаблДок, ПарамРеинд);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтрокиПриУдалении(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Таблица1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа8, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа8,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа8 = 0;
				Ном = 1;
				Пока ТДО.Найти("П1000008_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа8 = СуммаГрафа8 + ТДО["П1000008_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа8"]
					= СуммаГрафа8;
				СуммаГрафа8 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа8 = СуммаГрафа8 + ЭлМассива["ИтогоСуммаГрафа8"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа8"].Значение = СуммаГрафа8;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа9, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа9,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа9 = 0;
				Ном = 1;
				Пока ТДО.Найти("П1000009_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа9 = СуммаГрафа9 + ТДО["П1000009_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа9"]
					= СуммаГрафа9;
				СуммаГрафа9 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа9 = СуммаГрафа9 + ЭлМассива["ИтогоСуммаГрафа9"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа9"].Значение = СуммаГрафа9;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа10, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа10,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа10 = 0;
				Ном = 1;
				Пока ТДО.Найти("П1000010_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа10 = СуммаГрафа10 + ТДО["П1000010_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа10"]
					= СуммаГрафа10;
				СуммаГрафа10 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа10 = СуммаГрафа10 + ЭлМассива["ИтогоСуммаГрафа10"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа10"].Значение = СуммаГрафа10;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Таблица2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа14, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа14,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа14 = 0;
				Ном = 1;
				Пока ТДО.Найти("П2000014_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа14 = СуммаГрафа14 + ТДО["П2000014_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа14"]
					= СуммаГрафа14;
				СуммаГрафа14 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа14 = СуммаГрафа14 + ЭлМассива["ИтогоСуммаГрафа14"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа14"].Значение = СуммаГрафа14;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа15, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа15,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа15 = 0;
				Ном = 1;
				Пока ТДО.Найти("П2000015_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа15 = СуммаГрафа15 + ТДО["П2000015_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа15"]
					= СуммаГрафа15;
				СуммаГрафа15 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа15 = СуммаГрафа15 + ЭлМассива["ИтогоСуммаГрафа15"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа15"].Значение = СуммаГрафа15;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа16, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа16,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа16 = 0;
				Ном = 1;
				Пока ТДО.Найти("П2000016_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа16 = СуммаГрафа16 + ТДО["П2000016_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа16"]
					= СуммаГрафа16;
				СуммаГрафа16 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа16 = СуммаГрафа16 + ЭлМассива["ИтогоСуммаГрафа16"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа16"].Значение = СуммаГрафа16;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Таблица3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа22, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа22,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				СуммаГрафа22 = 0;
				Ном = 1;
				Пока ТДО.Найти("П3000022_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа22 = СуммаГрафа22 + ТДО["П3000022_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа22"]
					= СуммаГрафа22;
				СуммаГрафа22 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа22 = СуммаГрафа22 + ЭлМассива["ИтогоСуммаГрафа22"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа22"].Значение = СуммаГрафа22;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Таблица4" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа28, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа28,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа28"]
					= ТДО["П0000028"].Значение;
				СуммаГрафа28 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа28 = СуммаГрафа28 + ЭлМассива["ИтогоСуммаГрафа28"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа28"].Значение = СуммаГрафа28;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа30, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа30,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа30"]
					= ТДО["П0000030"].Значение;
				СуммаГрафа30 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа30 = СуммаГрафа30 + ЭлМассива["ИтогоСуммаГрафа30"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа30"].Значение = СуммаГрафа30;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа40, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа40,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				КодОперации = "";
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["КодОперации"]
					= КодОперации;
				Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы - 1]["ИтогоСуммаГрафа40"]
					= ТДО["П0000040"].Значение;
				СуммаГрафа40 = 0;
				Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
					Если ЭлМассива["КодОперации"] = КодОперации Тогда
						СуммаГрафа40 = СуммаГрафа40 + ЭлМассива["ИтогоСуммаГрафа40"];
					КонецЕсли;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа40"].Значение = СуммаГрафа40;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И ((СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа38, ОбластьИмя) > 0)
				ИЛИ (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ИтогоСуммаГрафа38,
				Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0)) Тогда
				
				НомСтраницы = Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
				СуммаГрафа38 = 0;
				Ном = 1;
				Пока ТДО.Найти("П4000038_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
					СуммаГрафа38 = СуммаГрафа38 + ТДО["П4000038_" + Формат(Ном, "ЧГ=")].Значение;
					Ном = Ном + 1;
				КонецЦикла;
				ТДО["ИтогоСуммаГрафа38"].Значение = СуммаГрафа38;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Таблица1");
		Расчет(Форма, "Таблица2");
		Расчет(Форма, "Таблица3");
		Расчет(Форма, "Таблица4");
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Таблица1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		АктивнаяВетка = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
				Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
					Ветка_П10000.Данные.Вставить("П1000008", Форма.ТабличныйДокумент.Области["П1000008_"
					+ Формат(ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1, "ЧГ=")].Значение);
					Ветка_П10000.Данные.Вставить("П1000009", Форма.ТабличныйДокумент.Области["П1000009_"
					+ Формат(ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1, "ЧГ=")].Значение);
					Ветка_П10000.Данные.Вставить("П1000010", Форма.ТабличныйДокумент.Области["П1000010_"
					+ Формат(ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1, "ЧГ=")].Значение);
				КонецЦикла;
			КонецЕсли;
			
			НомСтраницы = ДеревоДанных.Строки.Индекс(Ветка);
			КодОперации = "";
			СуммаГрафа8  = 0;
			СуммаГрафа9  = 0;
			СуммаГрафа10 = 0;
			
			ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
			Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
				СуммаГрафа8  = СуммаГрафа8  + Ветка_П10000.Данные["П1000008"];
				СуммаГрафа9  = СуммаГрафа9  + Ветка_П10000.Данные["П1000009"];
				СуммаГрафа10 = СуммаГрафа10 + Ветка_П10000.Данные["П1000010"];
			КонецЦикла;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["КодОперации"]
				= КодОперации;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа8"]
				= СуммаГрафа8;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа9"]
				= СуммаГрафа9;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа10"]
				= СуммаГрафа10;
			
			СуммаГрафа8  = 0;
			СуммаГрафа9  = 0;
			СуммаГрафа10 = 0;
			Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
				Если ЭлМассива["КодОперации"] = КодОперации Тогда
					СуммаГрафа8  = СуммаГрафа8  + ЭлМассива["ИтогоСуммаГрафа8"];
					СуммаГрафа9  = СуммаГрафа9  + ЭлМассива["ИтогоСуммаГрафа9"];
					СуммаГрафа10 = СуммаГрафа10 + ЭлМассива["ИтогоСуммаГрафа10"];
				КонецЕсли;
			КонецЦикла;
			
			Ветка.Данные["ИтогоСуммаГрафа8"]  = СуммаГрафа8;
			Ветка.Данные["ИтогоСуммаГрафа9"]  = СуммаГрафа9;
			Ветка.Данные["ИтогоСуммаГрафа10"] = СуммаГрафа10;
			
			Если Ветка = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа8"].Значение  = Ветка.Данные["ИтогоСуммаГрафа8"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа9"].Значение  = Ветка.Данные["ИтогоСуммаГрафа9"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа10"].Значение = Ветка.Данные["ИтогоСуммаГрафа10"];
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Таблица2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		АктивнаяВетка = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				ДанныеМнЧ_П20000 = Ветка.ДанныеМногострочныхЧастей.П20000.Строки;
				Для каждого Ветка_П20000 Из ДанныеМнЧ_П20000 Цикл
					Ветка_П20000.Данные.Вставить("П2000014", Форма.ТабличныйДокумент.Области["П2000014_"
					+ Формат(ДанныеМнЧ_П20000.Индекс(Ветка_П20000) + 1, "ЧГ=")].Значение);
					Ветка_П20000.Данные.Вставить("П2000015", Форма.ТабличныйДокумент.Области["П2000015_"
					+ Формат(ДанныеМнЧ_П20000.Индекс(Ветка_П20000) + 1, "ЧГ=")].Значение);
					Ветка_П20000.Данные.Вставить("П2000016", Форма.ТабличныйДокумент.Области["П2000016_"
					+ Формат(ДанныеМнЧ_П20000.Индекс(Ветка_П20000) + 1, "ЧГ=")].Значение);
				КонецЦикла;
			КонецЕсли;
			
			НомСтраницы = ДеревоДанных.Строки.Индекс(Ветка);
			КодОперации = "";
			СуммаГрафа14 = 0;
			СуммаГрафа15 = 0;
			СуммаГрафа16 = 0;
			
			ДанныеМнЧ_П20000 = Ветка.ДанныеМногострочныхЧастей.П20000.Строки;
			Для каждого Ветка_П20000 Из ДанныеМнЧ_П20000 Цикл
				СуммаГрафа14 = СуммаГрафа14 + Ветка_П20000.Данные["П2000014"];
				СуммаГрафа15 = СуммаГрафа15 + Ветка_П20000.Данные["П2000015"];
				СуммаГрафа16 = СуммаГрафа16 + Ветка_П20000.Данные["П2000016"];
			КонецЦикла;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["КодОперации"]
				= КодОперации;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа14"]
				= СуммаГрафа14;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа15"]
				= СуммаГрафа15;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа16"]
				= СуммаГрафа16;
			
			СуммаГрафа14 = 0;
			СуммаГрафа15 = 0;
			СуммаГрафа16 = 0;
			Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
				Если ЭлМассива["КодОперации"] = КодОперации Тогда
					СуммаГрафа14 = СуммаГрафа14 + ЭлМассива["ИтогоСуммаГрафа14"];
					СуммаГрафа15 = СуммаГрафа15 + ЭлМассива["ИтогоСуммаГрафа15"];
					СуммаГрафа16 = СуммаГрафа16 + ЭлМассива["ИтогоСуммаГрафа16"];
				КонецЕсли;
			КонецЦикла;
			
			Ветка.Данные["ИтогоСуммаГрафа14"] = СуммаГрафа14;
			Ветка.Данные["ИтогоСуммаГрафа15"] = СуммаГрафа15;
			Ветка.Данные["ИтогоСуммаГрафа16"] = СуммаГрафа16;
			
			Если Ветка = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа14"].Значение = Ветка.Данные["ИтогоСуммаГрафа14"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа15"].Значение = Ветка.Данные["ИтогоСуммаГрафа15"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа16"].Значение = Ветка.Данные["ИтогоСуммаГрафа16"];
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Таблица3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		АктивнаяВетка = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				ДанныеМнЧ_П30000 = Ветка.ДанныеМногострочныхЧастей.П30000.Строки;
				Для каждого Ветка_П30000 Из ДанныеМнЧ_П30000 Цикл
					Ветка_П30000.Данные.Вставить("П3000022", Форма.ТабличныйДокумент.Области["П3000022_"
					+ Формат(ДанныеМнЧ_П30000.Индекс(Ветка_П30000) + 1, "ЧГ=")].Значение);
				КонецЦикла;
			КонецЕсли;
			
			НомСтраницы = ДеревоДанных.Строки.Индекс(Ветка);
			КодОперации = "";
			СуммаГрафа22 = 0;
			
			ДанныеМнЧ_П30000 = Ветка.ДанныеМногострочныхЧастей.П30000.Строки;
			Для каждого Ветка_П30000 Из ДанныеМнЧ_П30000 Цикл
				СуммаГрафа22 = СуммаГрафа22 + Ветка_П30000.Данные["П3000022"];
			КонецЦикла;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["КодОперации"]
				= КодОперации;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа22"]
				= СуммаГрафа22;
			
			СуммаГрафа22 = 0;
			Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
				Если ЭлМассива["КодОперации"] = КодОперации Тогда
					СуммаГрафа22 = СуммаГрафа22 + ЭлМассива["ИтогоСуммаГрафа22"];
				КонецЕсли;
			КонецЦикла;
			
			Ветка.Данные["ИтогоСуммаГрафа22"] = СуммаГрафа22;
			
			Если Ветка = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа22"].Значение = Ветка.Данные["ИтогоСуммаГрафа22"];
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Таблица4" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		АктивнаяВетка = Неопределено;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Если Ветка = АктивнаяВетка Тогда
				
				Ветка.Данные.Вставить("П0000028", Форма.ТабличныйДокумент.Области["П0000028"].Значение);
				Ветка.Данные.Вставить("П0000030", Форма.ТабличныйДокумент.Области["П0000030"].Значение);
				Ветка.Данные.Вставить("П0000040", Форма.ТабличныйДокумент.Области["П0000040"].Значение);
				
				ДанныеМнЧ_П40000 = Ветка.ДанныеМногострочныхЧастей.П40000.Строки;
				Для каждого Ветка_П40000 Из ДанныеМнЧ_П40000 Цикл
					Ветка_П40000.Данные.Вставить("П4000038", Форма.ТабличныйДокумент.Области["П4000038_"
					+ Формат(ДанныеМнЧ_П40000.Индекс(Ветка_П40000) + 1, "ЧГ=")].Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			НомСтраницы = ДеревоДанных.Строки.Индекс(Ветка);
			КодОперации = "";
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["КодОперации"]
				= КодОперации;
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа28"]
				= Ветка.Данные["П0000028"];
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа30"]
				= Ветка.Данные["П0000030"];
			Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела][НомСтраницы]["ИтогоСуммаГрафа40"]
				= Ветка.Данные["П0000040"];
			
			СуммаГрафа28 = 0;
			СуммаГрафа30 = 0;
			СуммаГрафа40 = 0;
			Для каждого ЭлМассива Из Форма.СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_" + ИмяРаздела] Цикл
				Если ЭлМассива["КодОперации"] = КодОперации Тогда
					СуммаГрафа28 = СуммаГрафа28 + ЭлМассива["ИтогоСуммаГрафа28"];
					СуммаГрафа30 = СуммаГрафа30 + ЭлМассива["ИтогоСуммаГрафа30"];
					СуммаГрафа40 = СуммаГрафа40 + ЭлМассива["ИтогоСуммаГрафа40"];
				КонецЕсли;
			КонецЦикла;
			
			СуммаГрафа38 = 0;
			ДанныеМнЧ_П40000 = Ветка.ДанныеМногострочныхЧастей.П40000.Строки;
			Для каждого Ветка_П40000 Из ДанныеМнЧ_П40000 Цикл
				СуммаГрафа38 = СуммаГрафа38 + Ветка_П40000.Данные["П4000038"];
			КонецЦикла;
			
			Ветка.Данные["ИтогоСуммаГрафа28"] = СуммаГрафа28;
			Ветка.Данные["ИтогоСуммаГрафа30"] = СуммаГрафа30;
			Ветка.Данные["ИтогоСуммаГрафа38"] = СуммаГрафа38;
			Ветка.Данные["ИтогоСуммаГрафа40"] = СуммаГрафа40;
			
			Если Ветка = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа28"].Значение = Ветка.Данные["ИтогоСуммаГрафа28"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа30"].Значение = Ветка.Данные["ИтогоСуммаГрафа30"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа38"].Значение = Ветка.Данные["ИтогоСуммаГрафа38"];
				Форма.ТабличныйДокумент.Области["ИтогоСуммаГрафа40"].Значение = Ветка.Данные["ИтогоСуммаГрафа40"];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа8",  "П1000008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа9",  "П1000009");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа10", "П1000010");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа14", "П2000014");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа15", "П2000015");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа16", "П2000016");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа22", "П3000022");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа28", "П0000028");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа30", "П0000030");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа38", "П4000038");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ИтогоСуммаГрафа40", "П0000040");
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставления

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить точность ""0""';
				|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	Сведения  = мДанныеОтчета.Сведения;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",    СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",      СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",       Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ТелОрг",       СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",      СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",       СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",       СокрЛП(Титульный.КПП));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("ИмяФайлАкц", СокрЛП(Титульный.ИмяФайлаДекларации));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПриоб", СокрЛП(Сведения.П0000100));
	ПараметрыВыгрузки.Вставить("П0000400", Сведения.П0000400);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Реестр");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "ON_REESTR11.1.201"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		ОписаниеОшибки = "Не задан ИНН организации. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		ОписаниеОшибки = "Задан ИНН организации, не состоящий из 10 цифр. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
		ОписаниеОшибки = "Не задан КПП организации. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
		ОписаниеОшибки = "Задан КПП организации, не состоящий из 9 символов. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		ОписаниеОшибки = "Не задано наименование налогоплательщика. Заполните наименование в справочнике организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
		"Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	Иначе
		ВозможныеКодыПериода = ВозможныеЗначенияИзСпискаВыбораПоказателя("Период");
		Если ВозможныеКодыПериода.МассивЗначений.Найти(ПараметрыВыгрузки.ПериодОтч) = Неопределено Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект,
			"Некорректно задан код налогового периода. Возможны значения: " + ВозможныеКодыПериода.СтрокаЗначений,
			"Титульный", "Период");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(ПараметрыВыгрузки.КодИФНС);
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Не задан код налогового органа, в который представляется реестр";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(КодНалоговогоОргана) <> 4 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодНалоговогоОргана) Тогда
		ОписаниеОшибки = "Задан код налогового органа, не состоящий из 4 цифр";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		ОписаниеОшибки = "Не задана фамилия подписанта. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		ОписаниеОшибки = "Не задано имя подписанта. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И ПустаяСтрока(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		ОписаниеОшибки = "Не задано наименование документа, подтверждающего полномочия представителя налогоплательщика. Внесите исправление в справочник организаций и обновите сведения в реестре (меню ""Еще"" - ""Обновить"")";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Декларация) Тогда
		СообщитьВТС("Не задана декларация по акцизам, к которой представляется реестр",
		"Титульный", "Декларация");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПериодОтч <> ПериодИзДекларации() Тогда
		ОписаниеОшибки = "Значение кода налогового периода, заданного в реестре, должно быть равно значению кода налогового периода, заданному в декларации по акцизам";
		СообщитьВТС(ОписаниеОшибки, "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяФайлАкц) Тогда
		СообщитьВТС("Не задано имя файла (без расширения) декларации по акцизам, к которой представляется реестр",
		"Титульный", "ИмяФайлаДекларации");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Показатели, подлежащие сопоставлению.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПрПриоб) Тогда
		СообщитьВТС("Не задан признак приобретения объема спирта", "Сведения", "П0000100");
		СтатусПроверки = Ложь;
	Иначе
		ВозможныеПрПриоб = ВозможныеЗначенияИзСпискаВыбораПоказателя("П0000100");
		Если ВозможныеПрПриоб.МассивЗначений.Найти(ПараметрыВыгрузки.ПрПриоб) = Неопределено Тогда
			СообщитьВТС(
			"Показатели для сопоставления: некорректно задан признак приобретения объема спирта. Возможны значения: "
			+ ВозможныеПрПриоб.СтрокаЗначений, "Сведения", "П0000100");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Таблица 1.
	ДанныеРеестра = ДанныеМногоуровневыхРазделов["Таблица1"];
	
	ЗаполненаТаблица1 = Ложь;
	Для каждого Ветка Из ДанныеРеестра.Строки Цикл
		Для каждого Пок Из Ветка.Данные Цикл
			ЗаполненаТаблица1 = ЗаполненаТаблица1 ИЛИ ЗначениеЗаполнено(Ветка.Данные[Пок.Ключ]);
		КонецЦикла;
		ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
		Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
			Для каждого Пок Из Ветка_П10000.Данные Цикл
				ЗаполненаТаблица1 = ЗаполненаТаблица1 ИЛИ ЗначениеЗаполнено(Ветка_П10000.Данные[Пок.Ключ]);
			КонецЦикла;
			Если ЗаполненаТаблица1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненаТаблица1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненаТаблица1 Тогда
		
		Для каждого Ветка Из ДанныеРеестра.Строки Цикл
			
			НомерСтраницы = ДанныеРеестра.Строки.Индекс(Ветка) + 1;
			НомерСтраницы_Строка = Формат(НомерСтраницы, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000001"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": не задано наименование поставщика",
				"Таблица1", "П0000001", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000002"]);
			ДлинаЗначПок = СтрДлина(ЗначПок);
			Если ДлинаЗначПок <> 10 ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ЗначПок) Тогда
				СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан ИНН поставщика" + ?(ДлинаЗначПок > 0, ", не состоящий из 10 цифр", ""),
				"Таблица1", "П0000002", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000003"]);
			ДлинаЗначПок = СтрДлина(ЗначПок);
			Если ДлинаЗначПок <> 9 Тогда
				СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан КПП поставщика" + ?(ДлинаЗначПок > 0, ", не состоящий из 9 символов", ""),
				"Таблица1", "П0000003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
			Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
				
				НомерСтрокиП10000 = ДанныеМнЧ_П10000.Индекс(Ветка_П10000) + 1;
				НомерСтрокиП10000_Строка = Формат(НомерСтрокиП10000, "ЧГ=");
				ПостфиксП10000 = "_" + НомерСтрокиП10000_Строка;
				
				Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000004"]) Тогда
					СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
					+ " не задан номер счета-фактуры", "Таблица1", "П1000004" + ПостфиксП10000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ЗначПок = Ветка_П10000.Данные["П1000005"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
					+ " не задана дата счета-фактуры", "Таблица1", "П1000005" + ПостфиксП10000, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
					+ " задана дата счета-фактуры, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Таблица1", "П1000005" + ПостфиксП10000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Ветка_П10000.Данные["П1000006"])
					ИЛИ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000007"]) Тогда
					
					Если НЕ ЗначениеЗаполнено(Ветка_П10000.Данные["П1000006"]) Тогда
						СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
						+ " не задан номер корректировочного счета-фактуры", "Таблица1", "П1000006" + ПостфиксП10000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					ЗначПок = Ветка_П10000.Данные["П1000007"];
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
						+ " не задана дата корректировочного счета-фактуры", "Таблица1", "П1000007" + ПостфиксП10000, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
						СообщитьВТС("Таблица 1 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП10000_Строка
						+ " задана дата корректировочного счета-фактуры, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
						"Таблица1", "П1000007" + ПостфиксП10000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТаблицаСообщений.Количество() >= 100 Тогда
					Возврат СтатусПроверки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Таблица 2.
	ДанныеРеестра = ДанныеМногоуровневыхРазделов["Таблица2"];
	
	ЗаполненаТаблица2 = Ложь;
	Для каждого Ветка Из ДанныеРеестра.Строки Цикл
		ДанныеМнЧ_П20000 = Ветка.ДанныеМногострочныхЧастей.П20000.Строки;
		Для каждого Ветка_П20000 Из ДанныеМнЧ_П20000 Цикл
			Для каждого Пок Из Ветка_П20000.Данные Цикл
				ЗаполненаТаблица2 = ЗаполненаТаблица2 ИЛИ ЗначениеЗаполнено(Ветка_П20000.Данные[Пок.Ключ]);
			КонецЦикла;
			Если ЗаполненаТаблица2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненаТаблица2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненаТаблица2 Тогда
		
		Для каждого Ветка Из ДанныеРеестра.Строки Цикл
			
			НомерСтраницы = ДанныеРеестра.Строки.Индекс(Ветка) + 1;
			НомерСтраницы_Строка = Формат(НомерСтраницы, "ЧГ=");
			
			ДанныеМнЧ_П20000 = Ветка.ДанныеМногострочныхЧастей.П20000.Строки;
			Для каждого Ветка_П20000 Из ДанныеМнЧ_П20000 Цикл
				
				НомерСтрокиП20000 = ДанныеМнЧ_П20000.Индекс(Ветка_П20000) + 1;
				НомерСтрокиП20000_Строка = Формат(НомерСтрокиП20000, "ЧГ=");
				ПостфиксП20000 = "_" + НомерСтрокиП20000_Строка;
				
				Если НЕ ЗначениеЗаполнено(Ветка_П20000.Данные["П2000011"]) Тогда
					СообщитьВТС("Таблица 2 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП20000_Строка
					+ " не задано наименование документа", "Таблица2", "П2000011" + ПостфиксП20000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Ветка_П20000.Данные["П2000012"]) Тогда
					СообщитьВТС("Таблица 2 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП20000_Строка
					+ " не задан номер документа", "Таблица2", "П2000012" + ПостфиксП20000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ЗначПок = Ветка_П20000.Данные["П2000013"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Таблица 2 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП20000_Строка
					+ " не задана дата документа", "Таблица2", "П2000013" + ПостфиксП20000, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Таблица 2 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП20000_Строка
					+ " задана дата документа, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Таблица2", "П2000013" + ПостфиксП20000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ТаблицаСообщений.Количество() >= 100 Тогда
					Возврат СтатусПроверки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Окр(ПараметрыВыгрузки["П0000400"]) > 0 И НЕ (ЗаполненаТаблица1 ИЛИ ЗаполненаТаблица2) Тогда
		СообщитьВТС("Хотя бы одна из Таблиц 1 и 2 должна быть заполнена, если в показателях, подлежащих сопоставлению,"
		+ " сумма акциза, начисленная согласно подпункту 20.2 пункта 1 статьи 182 Налогового кодекса Российской Федерации"
		+ " по коду показателя 10027, больше нуля", "Сведения", "П0000400");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 3.
	ДанныеРеестра = ДанныеМногоуровневыхРазделов["Таблица3"];
	
	ЗаполненаТаблица3 = Ложь;
	Для каждого Ветка Из ДанныеРеестра.Строки Цикл
		Для каждого Пок Из Ветка.Данные Цикл
			ЗаполненаТаблица3 = ЗаполненаТаблица3 ИЛИ ЗначениеЗаполнено(Ветка.Данные[Пок.Ключ]);
		КонецЦикла;
		ДанныеМнЧ_П30000 = Ветка.ДанныеМногострочныхЧастей.П30000.Строки;
		Для каждого Ветка_П30000 Из ДанныеМнЧ_П30000 Цикл
			Для каждого Пок Из Ветка_П30000.Данные Цикл
				ЗаполненаТаблица3 = ЗаполненаТаблица3 ИЛИ ЗначениеЗаполнено(Ветка_П30000.Данные[Пок.Ключ]);
			КонецЦикла;
			Если ЗаполненаТаблица3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненаТаблица3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненаТаблица3 Тогда
		
		Для каждого Ветка Из ДанныеРеестра.Строки Цикл
			
			НомерСтраницы = ДанныеРеестра.Строки.Индекс(Ветка) + 1;
			НомерСтраницы_Строка = Формат(НомерСтраницы, "ЧГ=");
			
			ДанныеМнЧ_П30000 = Ветка.ДанныеМногострочныхЧастей.П30000.Строки;
			Для каждого Ветка_П30000 Из ДанныеМнЧ_П30000 Цикл
				
				НомерСтрокиП30000 = ДанныеМнЧ_П30000.Индекс(Ветка_П30000) + 1;
				НомерСтрокиП30000_Строка = Формат(НомерСтрокиП30000, "ЧГ=");
				ПостфиксП30000 = "_" + НомерСтрокиП30000_Строка;
				
				Если НЕ ЗначениеЗаполнено(Ветка_П30000.Данные["П3000020"]) Тогда
					СообщитьВТС("Таблица 3 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП30000_Строка
					+ " не задан номер акта списания", "Таблица3", "П3000020" + ПостфиксП30000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ЗначПок = Ветка_П30000.Данные["П3000021"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Таблица 3 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП30000_Строка
					+ " не задана дата акта списания", "Таблица3", "П3000021" + ПостфиксП30000, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Таблица 3 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП30000_Строка
					+ " задана дата акта списания, выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Таблица3", "П3000021" + ПостфиксП30000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ТаблицаСообщений.Количество() >= 100 Тогда
					Возврат СтатусПроверки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыВыгрузки["ПрПриоб"] = "2" И НЕ ЗаполненаТаблица3 Тогда
		СообщитьВТС("Таблица 3 должна быть заполнена, если в показателях, подлежащих сопоставлению,"
		+ " признак приобретения объема спирта равен 2", "Сведения", "П0000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица 4.
	ДанныеРеестра = ДанныеМногоуровневыхРазделов["Таблица4"];
	
	ЗаполненаТаблица4 = Ложь;
	Для каждого Ветка Из ДанныеРеестра.Строки Цикл
		Для каждого Пок Из Ветка.Данные Цикл
			ЗаполненаТаблица4 = ЗаполненаТаблица4 ИЛИ ЗначениеЗаполнено(Ветка.Данные[Пок.Ключ]);
		КонецЦикла;
		ДанныеМнЧ_П40000 = Ветка.ДанныеМногострочныхЧастей.П40000.Строки;
		Для каждого Ветка_П40000 Из ДанныеМнЧ_П40000 Цикл
			Для каждого Пок Из Ветка_П40000.Данные Цикл
				ЗаполненаТаблица4 = ЗаполненаТаблица4 ИЛИ ЗначениеЗаполнено(Ветка_П40000.Данные[Пок.Ключ]);
			КонецЦикла;
			Если ЗаполненаТаблица4 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗаполненаТаблица4 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполненаТаблица4 Тогда
		
		Для каждого Ветка Из ДанныеРеестра.Строки Цикл
			
			НомерСтраницы = ДанныеРеестра.Строки.Индекс(Ветка) + 1;
			НомерСтраницы_Строка = Формат(НомерСтраницы, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000024"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка
				+ ": не задано наименование лекарственных препаратов/средств, медицинских изделий",
				"Таблица4", "П0000024", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000025"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка
				+ ": не задан номер регистрационного удостоверения", "Таблица4", "П0000025", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П0000026"]);
			ДлинаЗначПок = СтрДлина(ЗначПок);
			Если ДлинаЗначПок <> 3 ИЛИ НЕ СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ЗначПок) Тогда
				СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код единицы измерения" + ?(ДлинаЗначПок > 0, ", не состоящий из 3 цифр", ""),
				"Таблица4", "П0000026", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ_П40000 = Ветка.ДанныеМногострочныхЧастей.П40000.Строки;
			Для каждого Ветка_П40000 Из ДанныеМнЧ_П40000 Цикл
				
				НомерСтрокиП40000 = ДанныеМнЧ_П40000.Индекс(Ветка_П40000) + 1;
				НомерСтрокиП40000_Строка = Формат(НомерСтрокиП40000, "ЧГ=");
				ПостфиксП40000 = "_" + НомерСтрокиП40000_Строка;
				
				ЗначПок = СокрЛП(Ветка_П40000.Данные["П4000032"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " не задан вид документа, подтверждающего факт реализации готовой продукции",
					"Таблица4", "П4000032" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					ВозможныеВидыДок = ВозможныеЗначенияИзСпискаВыбораПоказателя("П4000032");
					Если ВозможныеВидыДок.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " некорректно задан вид документа, подтверждающего факт реализации готовой продукции. Возможны значения: "
						+ ВозможныеВидыДок.СтрокаЗначений, "Таблица4", "П4000032" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ветка_П40000.Данные["П4000033"]) Тогда
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " не задан номер документа, подтверждающего факт реализации готовой продукции",
					"Таблица4", "П4000033" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ЗначПок = Ветка_П40000.Данные["П4000034"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " не задана дата документа, подтверждающего факт реализации готовой продукции",
					"Таблица4", "П4000034" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " задана дата документа, подтверждающего факт реализации готовой продукции,"
					+ " выходящая за пределы периода с 01.01.1900 по 31.12.2099",
					"Таблица4", "П4000034" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НаимКонтр = СокрЛП(Ветка_П40000.Данные["П4000035"]);
				ИНН = СокрЛП(Ветка_П40000.Данные["П4000036"]);
				КПП = СокрЛП(Ветка_П40000.Данные["П4000037"]);
				Если СтрДлина(ИНН) = 12 И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ИНН) Тогда
					ФИО_Структура = РегламентированнаяОтчетность.РазложитьФИО(НаимКонтр);
					Если НЕ ЗначениеЗаполнено(ФИО_Структура.Фамилия) Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " должна быть задана фамилия индивидуального предпринимателя, если ИНН состоит из 12 цифр",
						"Таблица4", "П4000035" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ФИО_Структура.Имя) Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " должно быть задано имя индивидуального предпринимателя, если ИНН состоит из 12 цифр",
						"Таблица4", "П4000035" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если ЗначениеЗаполнено(КПП) Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " не должен быть задан КПП, если ИНН состоит из 12 цифр",
						"Таблица4", "П4000037" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли СтрДлина(ИНН) = 10 И СтроковыеФункцииКлиентсервер.ТолькоЦифрыВСтроке(ИНН) Тогда
					Если НЕ ЗначениеЗаполнено(НаимКонтр) Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " должно быть задано наименование юридического лица, если ИНН состоит из 10 цифр",
						"Таблица4", "П4000035" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(КПП) Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " должен быть задан КПП, если ИНН состоит из 10 цифр",
						"Таблица4", "П4000037" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(КПП) <> 9 Тогда
						СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
						+ " задан КПП, не состоящий из 9 символов", "Таблица4", "П4000037" + ПостфиксП40000, НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				ИначеЕсли НЕ ЗначениеЗаполнено(ИНН) Тогда
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " не задан ИНН", "Таблица4", "П4000036" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				Иначе
					СообщитьВТС("Таблица 4 -> Страница " + НомерСтраницы_Строка + ": в строке " + НомерСтрокиП40000_Строка
					+ " задан ИНН, не состоящий из 10 или 12 цифр", "Таблица4", "П4000036" + ПостфиксП40000, НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если ТаблицаСообщений.Количество() >= 100 Тогда
					Возврат СтатусПроверки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыВыгрузки["ПрПриоб"] = "2" И НЕ ЗаполненаТаблица4 Тогда
		СообщитьВТС("Таблица 4 должна быть заполнена, если в показателях, подлежащих сопоставлению,"
		+ " признак приобретения объема спирта равен 2", "Сведения", "П0000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтотОбъект, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ПериодИзДекларации()
	
	ПериодДекларации = "";
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Декларация) Тогда
		ДекларацияДанныеТитульногоЛиста
		= СтруктураРеквизитовФормы.Декларация.ДанныеОтчета.Получить().ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		Если ДекларацияДанныеТитульногоЛиста.Свойство("Период") Тогда
			ПериодДекларации = ДекларацияДанныеТитульногоЛиста.Период;
		КонецЕсли;
	КонецЕсли;
	Возврат СокрЛП(ПериодДекларации);
	
КонецФункции

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Сведения = СохрСтруктура.ПоказателиОтчета.ПолеТабличногоДокументаСведения;
	ЗаполнитьДаннымиУзел(Сведения, УзелРодитель);
	
	ДеревоДанных = ДанныеМногоуровневыхРазделов["Таблица1"];
	СвСчФ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвСчФ");
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ЭкзСвСчФ = СкопироватьУзел(УзелРодитель, СвСчФ, УзелРодитель.Строки.Количество() - 1);
		
		СведПост = ПолучитьПодчиненныйЭлемент(ЭкзСвСчФ, "СведПост");
		ЗаполнитьДаннымиУзел(Ветка.Данные, СведПост);
		
		СвСчФПост = ПолучитьПодчиненныйЭлемент(ЭкзСвСчФ, "СвСчФПост");
		
		ДанныеМнЧ_П10000 = Ветка.ДанныеМногострочныхЧастей.П10000.Строки;
		Для каждого Ветка_П10000 Из ДанныеМнЧ_П10000 Цикл
			
			ЭкзСвСчФПост = СкопироватьУзел(ЭкзСвСчФ, СвСчФПост, ЭкзСвСчФ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(Ветка_П10000.Данные, ЭкзСвСчФПост);
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(СвСчФПост);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СвСчФ);
	
	ДеревоДанных = ДанныеМногоуровневыхРазделов["Таблица2"];
	ДокОпр201 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДокОпр201");
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДанныеМнЧ_П20000 = Ветка.ДанныеМногострочныхЧастей.П20000.Строки;
		Для каждого Ветка_П20000 Из ДанныеМнЧ_П20000 Цикл
			
			ЗаполнитьДаннымиУзел(Ветка_П20000.Данные,
				СкопироватьУзел(УзелРодитель, ДокОпр201, УзелРодитель.Строки.Количество() - 1));
			
		КонецЦикла;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ДокОпр201);
	
	ДеревоДанных = ДанныеМногоуровневыхРазделов["Таблица3"];
	АктСпис = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АктСпис");
	ЭкзАктСпис = СкопироватьУзел(УзелРодитель, АктСпис, УзелРодитель.Строки.Количество() - 1);
	ЗаполнитьДаннымиУзел(ДеревоДанных.Строки[0].Данные, ЭкзАктСпис);
	РегламентированнаяОтчетность.УдалитьУзел(АктСпис);
	
	СведАктСпис = ПолучитьПодчиненныйЭлемент(ЭкзАктСпис, "СведАктСпис");
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ДанныеМнЧ_П30000 = Ветка.ДанныеМногострочныхЧастей.П30000.Строки;
		Для каждого Ветка_П30000 Из ДанныеМнЧ_П30000 Цикл
			
			ЭкзСведАктСпис = СкопироватьУзел(ЭкзАктСпис, СведАктСпис, ЭкзАктСпис.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(Ветка_П30000.Данные, ЭкзСведАктСпис);
			
		КонецЦикла;
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(СведАктСпис);
	
	ДеревоДанных = ДанныеМногоуровневыхРазделов["Таблица4"];
	ДокРеал179_2 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ДокРеал179.2");
	Для каждого Ветка Из ДеревоДанных.Строки Цикл
		
		ЭкзДокРеал179_2 = СкопироватьУзел(УзелРодитель, ДокРеал179_2, УзелРодитель.Строки.Количество() - 1);
		
		ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзДокРеал179_2);
		
		ДокРеал = ПолучитьПодчиненныйЭлемент(ЭкзДокРеал179_2, "ДокРеал");
		
		ДанныеМнЧ_П40000 = Ветка.ДанныеМногострочныхЧастей.П40000.Строки;
		Для каждого Ветка_П40000 Из ДанныеМнЧ_П40000 Цикл
			
			ЭкзДокРеал = СкопироватьУзел(ЭкзДокРеал179_2, ДокРеал, ЭкзДокРеал179_2.Строки.Количество() - 1);
			
			Если СтрДлина(СокрЛП(Ветка_П40000.Данные["П4000036"])) = 10 Тогда // ЮЛ
				
				Для каждого Эл Из ЭкзДокРеал.Строки Цикл
					Если Эл.Код = "КонтрИП" Тогда
						РегламентированнаяОтчетность.УдалитьУзел(Эл);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьДаннымиУзел(Ветка_П40000.Данные, ЭкзДокРеал);
				
			Иначе // ИП
				
				Для каждого Эл Из ЭкзДокРеал.Строки Цикл
					Если Эл.Код = "КонтрОрг" Тогда
						РегламентированнаяОтчетность.УдалитьУзел(Эл);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Дан = ОбщегоНазначения.СкопироватьРекурсивно(Ветка_П40000.Данные);
				ФИО = РегламентированнаяОтчетность.РазложитьФИО(Дан["П4000035"]);
				Дан.Вставить("П4100035", ФИО.Фамилия);
				Дан.Вставить("П4200035", ФИО.Имя);
				Дан.Вставить("П4300035", ФИО.Отчество);
				ЗаполнитьДаннымиУзел(Дан, ЭкзДокРеал);
				
			КонецЕсли;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.УдалитьУзел(ДокРеал);
		
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ДокРеал179_2);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли Узел.Код = "КПП" И Узел.Значение = "-" Тогда
			
			// Особая обработка.
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
				ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
		+ "_" + ПараметрыВыгрузки.КодИФНС
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг),
				СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки",       ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки",     АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки",       "РегламентированныйОтчетРеестрАкцизы_КНД1150151");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", "РегламентированныйОтчетРеестрАкцизы_КНД1150151");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			ДопПараметры = Неопределено;
			Если ТекущийРазделОтчетаСокрНаим = "Титульный" Тогда
				ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
			КонецЕсли;
			
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим, ДопПараметры);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	ДопПараметры = Неопределено;
	Если ТекущийРазделОтчетаСокрНаим = "Титульный" Тогда
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим, ДопПараметры);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	
	Если СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Таблица") Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("Декларация", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДекларации.Вставить("ОтправкаДекларации", Неопределено);
	СтруктураРеквизитовФормы.СведенияОтправкиДекларации.Вставить("ИмяФайлаОтправкиДекларации", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации", Неопределено);
	СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации", Неопределено);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		СтруктураДанныхТитульный["ИмяФайлаДекларации"] = "";
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	Иначе
		ТабличныйДокумент.Область("ИмяФайлаДекларации").Значение = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтотОбъект, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	Если СтрНачинаетсяС(ИмяСтраницы, "Таблица") Тогда
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		РасчетВДеревеЗначений(ЭтотОбъект, ИмяСтраницы);
		
	ИначеЕсли ИмяСтраницы = "Титульный" ИЛИ ИмяСтраницы = "Сведения" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Если ИмяСтраницы = "Титульный" Тогда
			
			Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				ДатаПодписи = "        ";
			КонецЕсли;
			
		КонецЕсли;
		
		СохранитьДанныеРаздела(ИмяСтраницы);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		ЗаполнитьПериодОтчета(ЭтотОбъект);
		СтруктураРеквизитовФормы.Вставить("Декларация", Неопределено);
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.Вставить("ОтправкаДекларации", Неопределено);
		СтруктураРеквизитовФормы.СведенияОтправкиДекларации.Вставить("ИмяФайлаОтправкиДекларации", Неопределено);
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ВыгрузкаДекларации", Неопределено);
		СтруктураРеквизитовФормы.СведенияВыгрузкиДекларации.Вставить("ИмяФайлаВыгрузкиДекларации", Неопределено);
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "Таблица") Тогда
		
		УправлениеВидимостьюСсылкиУдалитьСтраницу();
		СпрятатьЗначкиУдалитьСтроку();
		НомСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
		ЭлМассива = СтруктураРеквизитовФормы["ИтоговыеСуммыПоКодамОпераций_"
			+ СтруктураРеквизитовФормы.НаимТекущегоРаздела][НомСтраницы - 1];
		ЭлМассива["КодОперации"] = "";
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Таблица1" Тогда
			
			ЭлМассива["ИтогоСуммаГрафа8"]  = 0;
			ЭлМассива["ИтогоСуммаГрафа9"]  = 0;
			ЭлМассива["ИтогоСуммаГрафа10"] = 0;
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Таблица2" Тогда
			
			ЭлМассива["ИтогоСуммаГрафа14"] = 0;
			ЭлМассива["ИтогоСуммаГрафа15"] = 0;
			ЭлМассива["ИтогоСуммаГрафа16"] = 0;
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Таблица3" Тогда
			
			ЭлМассива["ИтогоСуммаГрафа22"] = 0;
			
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Таблица4" Тогда
			
			ЭлМассива["ИтогоСуммаГрафа28"] = 0;
			ЭлМассива["ИтогоСуммаГрафа30"] = 0;
			ЭлМассива["ИтогоСуммаГрафа40"] = 0;
			
		КонецЕсли;
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ДополнительныеПараметрыПечати = Новый Структура;
	ДополнительныеПараметрыПечати.Вставить("ВидПечати", Команда.Имя);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЗавершение", ЭтотОбъект, ДополнительныеПараметрыПечати);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		
	Иначе
		
		СохранитьНаКлиенте(, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Печать(ДополнительныеПараметры.ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ПоказатьПредупреждение(, НСтр(
	"ru = 'Печать реестров, утвержденных приказом ФНС России
	|от 14.02.2025 № ЕД-7-15/97@, будет реализована
	|в будущих версиях программы';
	|en = 'Печать реестров, утвержденных приказом ФНС России
	|от 14.02.2025 № ЕД-7-15/97@, будет реализована
	|в будущих версиях программы'"));
	
	Возврат;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1. Формируется печатная форма...';
			|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.УдалитьСтарыеПечатныеБланкиРегламентированныхОтчетов();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок,
	ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")));
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ВыбранныеСтраницы = Новый Массив();
	
	НачатьТранзакцию();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеСтраницы.Добавить(СтрокаУровня1.ИмяСтраницы);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Реестр");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Реестр");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля);
	
	ЗафиксироватьТранзакцию();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля = Неопределено)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтотОбъект, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	// Выяснение, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			Подписант = ТабличныйДокумент.Области.НаимОрг.Значение;
		КонецЕсли;
	Иначе
		// Представитель есть, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если СтрНачинаетсяС(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, "Таблица") Тогда
				
				ДеревоДанныхРеестр = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[
				"АдресВоВрХранилищеДеревоДанных" + ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим]);
				
				КолСтрокВДеревеДанныхРеестр = Макс(ДеревоДанныхРеестр.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРеестр = 1 По КолСтрокВДеревеДанныхРеестр Цикл
					
					ЭлементРеестр = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					ЭлементРеестр.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
					ЭлементРеестр.КолонкаРазделыОтчета              = "Стр. " + Формат(НомерСтраницыРеестр, "ЧГ=");
					ЭлементРеестр.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРеестр;
					ЭлементРеестр.ИндексКартинки                    = 0;
					ЭлементРеестр.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРеестр.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если СтрНачинаетсяС(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, "Таблица") Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Обновить.Доступность = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный";
	Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость
		= Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим <> "Титульный"
		И Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим <> "Сведения";
	
	УправлениеВидимостьюСсылкиУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостьюСсылкиУдалитьСтраницу()
	
	Обл1 = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Обл2 = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	
	Если Обл1 <> Неопределено И Обл2 <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Обл1.Текст = "";
			Обл1.Гиперссылка = Ложь;
			Обл2.Текст = "";
			Обл2.Гиперссылка = Ложь;
		Иначе
			БолееОднойСтраницыВРазделе
			= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1;
			Обл1.Текст = ?(БолееОднойСтраницыВРазделе, "х", "");
			Обл1.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
			Обл2.Текст = ?(БолееОднойСтраницыВРазделе, "Удалить страницу", "");
			Обл2.Гиперссылка = ?(БолееОднойСтраницыВРазделе, Истина, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ДопПараметры = Неопределено;
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
		
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный", ДопПараметры);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		ДопПараметры = Неопределено;
		ОбработатьСведенияОтправокВыгрузокДекларации(ДопПараметры, Ложь);
		
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
