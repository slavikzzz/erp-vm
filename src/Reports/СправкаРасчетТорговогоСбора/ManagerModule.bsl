#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыИсполнения = Новый Структура;
	ПараметрыИсполнения.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПослеВыводаРезультата" , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьПриВыводеЗаголовка"    , Истина);
	ПараметрыИсполнения.Вставить("ИспользоватьВнешниеНаборыДанных"   , Истина);
	
	Возврат ПараметрыИсполнения;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
		"КонецПредыдущегоПериода",
		НачалоДня(ПараметрыОтчета.НачалоПериода) - 1);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок   = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.КонецПериода);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета);
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	ПоставляемаяТаблицаЛьгот = ТорговыйСбор.ПрочитатьТаблицуЛьгот();
	
	Если ПоставляемаяТаблицаЛьгот.Количество() = 0 Тогда
		ТаблицаЛьгот = НовыйТаблицаЛьгот();
	Иначе
		ТаблицаЛьгот = ПодготовитьТаблицуЛьгот(ПоставляемаяТаблицаЛьгот, ПараметрыОтчета);
	КонецЕсли;
	
	Возврат Новый Структура("ТаблицаЛьгот", ТаблицаЛьгот);
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ИмяОтчета = НСтр("ru = 'Справка-расчет торгового сбора';
					|en = 'Detailed calculation of sales charge'");
	Возврат ИмяОтчета + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	ВариантыНастроек = Новый Массив;
	
	ВариантНастройки = Новый Структура();
	ВариантНастройки.Вставить("Имя"          , "РасчетТорговогоСбора");
	ВариантНастройки.Вставить("Представление", НСтр("ru = 'Расчет торгового сбора';
													|en = 'Sales charge calculation'"));
	
	ВариантыНастроек.Добавить(ВариантНастройки);
	
	Возврат ВариантыНастроек;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаЛьгот()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодНалоговойЛьготы" , ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Результат.Колонки.Добавить("ПредставлениеЛьготы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуЛьгот(ПоставляемаяТаблицаЛьгот, ПараметрыОтчета)
	
	ТаблицаЛьгот = НовыйТаблицаЛьгот();
	
	Для Каждого ПоставляемаяЛьгота Из ПоставляемаяТаблицаЛьгот Цикл
		
		Если ПараметрыОтчета.НачалоПериода >= ПоставляемаяЛьгота.ДействуетС 
			И ПараметрыОтчета.КонецПериода <= ПоставляемаяЛьгота.ДействуетПо Тогда
			
			НоваяЛьгота = ТаблицаЛьгот.Добавить();
			НоваяЛьгота.КодНалоговойЛьготы = ПоставляемаяЛьгота.КодНалоговойЛьготы;
			Если НоваяЛьгота.КодНалоговойЛьготы = "000000000000" Тогда
				НоваяЛьгота.ПредставлениеЛьготы = НСтр("ru = 'Не применяется';
														|en = 'Not applied'");
			Иначе
				НоваяЛьгота.ПредставлениеЛьготы = ПоставляемаяЛьгота.Наименование + " (" + НоваяЛьгота.КодНалоговойЛьготы + ")";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЛьгот.Свернуть("КодНалоговойЛьготы, ПредставлениеЛьготы");
	
	Возврат ТаблицаЛьгот;
	
КонецФункции

#КонецОбласти

#КонецЕсли