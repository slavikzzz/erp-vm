#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт 
	Возврат Истина;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт 
	Возврат Истина;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт 
	Возврат "";
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт 
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	Стр = Результат.Добавить();
	Стр.ИмяФормы = "Форма2025_1";
	Стр.ОписаниеФормы = "Приказ ФНС России от --.--.---- № ЕД-----/---@";
	Стр.ДатаНачала = '20210701';
	Стр.ДатаКонца = '20991231';

	Возврат Результат;
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	Если ИмяФормы = "Форма2025_1" Тогда
		Возврат ЭлектронноеПредставление_Форма2025_1(Объект, УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Функция СформироватьСписокЛистов(Объект) Экспорт
	Возврат УведомлениеОСпецрежимахНалогообложения.ПечатьВСледующихВерсиях(Объект);
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт 
	Если ИмяФормы = "Форма2025_1"  Тогда 
		Возврат ПроверитьДокументСВыводомВТаблицу_Форма2025_1(
			УведомлениеОСпецрежимахНалогообложения.ДанныеУведомленияДляВыгрузки(Объект), УникальныйИдентификатор);
	КонецЕсли;
КонецФункции

Функция ПроверитьДокументСВыводомВТаблицу_Форма2025_1(Данные, УникальныйИдентификатор)
	ТаблицаОшибок = Новый СписокЗначений;
	УведомлениеОСпецрежимахНалогообложения.ПроверкаАктуальностиФормыПриВыгрузке(
		Данные.Объект.ИмяФормы, ТаблицаОшибок, ПолучитьТаблицуФорм());
	УведомлениеОСпецрежимахНалогообложения.ПроверкаДатВУведомлении(Данные, ТаблицаОшибок);
	
	Титульная = Данные.ДанныеУведомления.Титульная;
	Если Не ЗначениеЗаполнено(Титульная.ДАТА_ПОДПИСИ) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указана дата подписи", "Титульная", "ДАТА_ПОДПИСИ"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Титульная.ОбъемЭнерг) Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не указан объем энергии", "Титульная", "ОбъемЭнерг"));
	КонецЕсли;
	
	ЭтоЮЛ = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Данные.Организация);
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаИННКПП(РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Данные.Организация), Титульная, ТаблицаОшибок);
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаОГРН(Титульная, ТаблицаОшибок, "Титульная", "ОГРН", Ложь, ЭтоЮЛ);
	УведомлениеОСпецрежимахНалогообложенияСлужебный.ПроверкаКодаНО(Титульная.КодНО, ТаблицаОшибок, "Титульная");
	
	Если Данные.ДанныеМайнинга.Количество() = 0 Тогда 
		ТаблицаОшибок.Добавить(Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюСтруктуруНавигацииПоОшибкам(
			"Не заполнены сведения", "Сведения"));
	КонецЕсли;
	
	Возврат ТаблицаОшибок;
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	СведенияОтправки.Вставить("КодНО", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОтправки, "КодНО", "0000"));
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИННФЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННФЛ), СокрЛП(СведенияОтправки.ИННФЛ), "000000000000");
		ИдентификаторОтправителя = СокрЛП(ИННФЛ);
	Иначе
		ИННЮЛ = ?(ЗначениеЗаполнено(СведенияОтправки.ИННЮЛ), СокрЛП(СведенияОтправки.ИННЮЛ), "0000000000");
		КПП = ?(ЗначениеЗаполнено(СведенияОтправки.КПП), СокрЛП(СведенияОтправки.КПП), "000000000");
		ИдентификаторОтправителя = ИННЮЛ + КПП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда 
		ДатаФормированияФайла = Формат(Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)),
									Число(Сред(СведенияОтправки.ДатаДок, 4, 2)),
									Число(Лев(СведенияОтправки.ДатаДок, 2))), "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Возврат "ON_SVVALADRID_" + ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОтправки, "КодНО", "0000")
		+ "_" + ИдентификаторОтправителя + "_" + ДатаФормированияФайла + "_" + Строка(Новый УникальныйИдентификатор);
КонецФункции

Функция ЭлектронноеПредставление_Форма2025_1(Объект, УникальныйИдентификатор) 
	СведенияЭлектронногоПредставления = УведомлениеОСпецрежимахНалогообложения.СведенияЭлектронногоПредставления();
	ДанныеУведомления = УведомлениеОСпецрежимахНалогообложения.ДанныеУведомленияДляВыгрузки(Объект);
	Ошибки = ПроверитьДокументСВыводомВТаблицу_Форма2025_1(ДанныеУведомления, УникальныйИдентификатор);
	УведомлениеОСпецрежимахНалогообложения.СообщитьОшибкиПриПроверкеВыгрузки(Объект, Ошибки, ДанныеУведомления);
	ОсновныеСведения = Документы.УведомлениеОСпецрежимахНалогообложения.НачальнаяИнициализацияОбщихРеквизитовВыгрузки(Объект);
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	
	ПотокXML.ЗаписатьНачалоЭлемента("Файл");
	ПотокXML.ЗаписатьАтрибут("ИдФайл", ИдентификаторФайла);
	ПотокXML.ЗаписатьАтрибут("ВерсПрог", ОсновныеСведения.ВерсПрог);
	ПотокXML.ЗаписатьАтрибут("ВерсФорм", "4.01");
	
	ПотокXML.ЗаписатьНачалоЭлемента("Документ");
	ПотокXML.ЗаписатьАтрибут("КНД", "1111663");
	ПотокXML.ЗаписатьНачалоЭлемента("ОбъемЭнерг");
	ПотокXML.ЗаписатьТекст(Формат(ДанныеУведомления.ДанныеУведомления.Титульная.ОбъемЭнерг, "ЧРД=.; ЧН=0; ЧГ="));
	ПотокXML.ЗаписатьКонецЭлемента();
	
	Для Каждого Стр Из ДанныеУведомления.ДанныеМайнинга Цикл 
		ДанныеМайнинга = ОтчетностьМайнеров.JSONВСтруктуру(Стр.Данные.Получить());
		ПотокXML.ЗаписатьНачалоЭлемента("СвМайнинг");
		
		Для Каждого СтрОборуд Из ДанныеМайнинга.Таблица_СвОборудСправоч Цикл 
			ПотокXML.ЗаписатьНачалоЭлемента("СвОборуд");
			ПотокXML.ЗаписатьНачалоЭлемента("СвОборудСправоч");
			ПотокXML.ЗаписатьАтрибут("КодОборуд", СтрОборуд.КодОборуд);
			ПотокXML.ЗаписатьАтрибут("ЗаводНом", СтрОборуд.ЗаводНом);
			ПотокXML.ЗаписатьАтрибут("КоличЧасЭкспл", СтрОборуд.КоличЧасЭкспл);
			ПотокXML.ЗаписатьКонецЭлемента();
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		Для Каждого СтрОборуд Из ДанныеМайнинга.Таблица_СвОборудПроизв Цикл 
			ПотокXML.ЗаписатьНачалоЭлемента("СвОборуд");
			ПотокXML.ЗаписатьНачалоЭлемента("СвОборудПроизв");
			ПотокXML.ЗаписатьАтрибут("Марка", СтрОборуд.Марка);
			ПотокXML.ЗаписатьАтрибут("Модель", СтрОборуд.Модель);
			ПотокXML.ЗаписатьАтрибут("Алгоритм", СтрОборуд.Алгоритм);
			ПотокXML.ЗаписатьАтрибут("ВычислитМощн", СтрЗаменить(СтрОборуд.ВычислитМощн, ",", "."));
			ПотокXML.ЗаписатьАтрибут("КоличЭнерг", СтрОборуд.КоличЭнерг);
			ПотокXML.ЗаписатьАтрибут("ЗаводНом", СтрОборуд.ЗаводНом);
			ПотокXML.ЗаписатьАтрибут("КоличЧасЭкспл", СтрОборуд.КоличЧасЭкспл);
			ПотокXML.ЗаписатьКонецЭлемента();
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ПотокXML.ЗаписатьНачалоЭлемента("СвВотчер");
		Если ДанныеМайнинга.Таблица_СвВотчер.Количество() = 0 Тогда 
			ПотокXML.ЗаписатьНачалоЭлемента("ПрОтсВотчер");
			ПотокXML.ЗаписатьТекст("1");
			ПотокXML.ЗаписатьКонецЭлемента();
		Иначе
			Для Каждого СтрВотчер Из ДанныеМайнинга.Таблица_СвВотчер Цикл 
				ПотокXML.ЗаписатьНачалоЭлемента("СсылкаВотчер");
				ПотокXML.ЗаписатьТекст(СтрВотчер.СсылкаВотчер);
				ПотокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
		ПотокXML.ЗаписатьКонецЭлемента();
		
		Для Каждого СтрВалюта Из ДанныеМайнинга.Таблица_СвДобытВалют Цикл 
			ПотокXML.ЗаписатьНачалоЭлемента("СвДобытВалют");
			СвДобытВалют = ОтчетностьМайнеров.JSONВСтруктуру(ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(СтрВалюта.Данные)));
			
			Для Каждого СтрСвВалют Из СвДобытВалют.Таблица_СвВалют Цикл
				ПотокXML.ЗаписатьНачалоЭлемента("СвВалют");
				ПотокXML.ЗаписатьАтрибут("КодВалют", СтрСвВалют.КодВалют);
				Если ЗначениеЗаполнено(СтрСвВалют.КодВалютЗачис) Тогда 
					ПотокXML.ЗаписатьАтрибут("КодВалютЗачис", СтрСвВалют.КодВалютЗачис);
				КонецЕсли;
				ПотокXML.ЗаписатьАтрибут("Сумма", СтрЗаменить(СтрСвВалют.Сумма, ",", "."));
				ПотокXML.ЗаписатьАтрибут("СтатЗачис", СтрСвВалют.СтатЗачис);
				ПотокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			Для Каждого СтрАдрИдентиф Из СвДобытВалют.Таблица_АдрИдентиф Цикл 
				ПотокXML.ЗаписатьНачалоЭлемента("АдрИдентиф");
				ПотокXML.ЗаписатьТекст(СтрАдрИдентиф.АдрИдентиф);
				ПотокXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
			
			Если СвДобытВалют.Таблица_АдрИдентифПул.Количество() = 0 Тогда 
				ПотокXML.ЗаписатьНачалоЭлемента("ПрОтсПул");
				ПотокXML.ЗаписатьТекст("1");
				ПотокXML.ЗаписатьКонецЭлемента();
			Иначе
				Для Каждого СтрАдрИдентиф Из СвДобытВалют.Таблица_АдрИдентифПул Цикл 
					ПотокXML.ЗаписатьНачалоЭлемента("АдрИдентифПул");
					ПотокXML.ЗаписатьТекст(СтрАдрИдентиф.АдрИдентифПул);
					ПотокXML.ЗаписатьКонецЭлемента();
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ПотокXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	ПотокXML.ЗаписатьКонецЭлемента();
	ПотокXML.ЗаписатьКонецЭлемента();
	
	Текст = ПотокXML.Закрыть();
	Текст = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(Текст, СтрНайти(Текст, Символы.ПС));
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ИдентификаторФайла + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

#КонецОбласти

#КонецЕсли