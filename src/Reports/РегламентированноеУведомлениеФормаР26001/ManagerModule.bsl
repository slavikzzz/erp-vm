#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоздатьЗаполненноеУведомление(Параметры, СуществующийДокументСсылка = Неопределено) Экспорт
	
	ИмяФормы = Неопределено;
	Если Не Параметры.Свойство("ИмяФормы", ИмяФормы) Тогда
		ИмяФормы = "Форма2020_4";
	КонецЕсли;
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка);
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СоздатьЗаполненноеУведомление():
			|для Р26001 не поддерживается';
			|en = 'Функция СоздатьЗаполненноеУведомление():
			|для Р26001 не поддерживается'");
	КонецЕсли;
	
КонецФункции

Функция ДоступнаПечатьPDF417(ИмяФормы) Экспорт
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат Истина;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция ДоступнаПечатьPDF417():
			|вызов функции с непредусмотренным значением параметра';
			|en = 'Функция ДоступнаПечатьPDF417():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
КонецФункции

Функция ПроверитьДокумент(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
КонецФункции

Функция ЭлектронноеПредставление(Объект, ИмяФормы, УникальныйИдентификатор) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Сохраняет данные помощника заполнения, из которого было создано заявление:
// ДанныеУведомления.ДанныеПомощникаЗаполнения
//
// Параметры:
//   Уведомление               - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//   ДанныеПомощникаЗаполнения - Структура
//
Процедура СохранитьДанныеПомощника(Уведомление, ДанныеПомощникаЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Уведомление) Тогда
		Возврат;
	КонецЕсли;
	
	УведомлениеОбъект = Уведомление.ПолучитьОбъект();
	ДанныеУведомления = УведомлениеОбъект.ДанныеУведомления.Получить();
	Если ТипЗнч(ДанныеУведомления) = Тип("Структура") Тогда
		ДанныеУведомления.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения);
	КонецЕсли;
	
	УведомлениеОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеУведомления);
	Попытка
		УведомлениеОбъект.Записать();
	Исключение
		ТекстОшибки = РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// ДанныеУведомления.ДанныеПомощникаЗаполнения
//
// Параметры:
//   ИмяФормы - Строка - Имя формы отчета
//   ДанныеУведомления - ХранилищеЗначения - Данные уведомления (ДокументСсылка.УведомлениеОСпецрежимахНалогообложения)
//
// Возвращаемое значение:
//   Неопределено, Структура
//
Функция СведенияИзФормРегистрации(ИмяФормы, ДанныеУведомления) Экспорт
	
	Результат = Неопределено;
	
	// Используется при инициализации формы для формирования транспортного контейнера
	// см. Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ФормированиеПакетаПоЕГРЮЛ
	Если ИмяФормы = "Форма2020_4" Тогда 
		
		Результат = Новый Структура;
		Результат.Вставить("КодЗаявления", "Р26001");
		Данные = ДанныеУведомления.Получить();
		
		Лист001 = Данные.ДанныеУведомления.Лист001;
		Результат.Вставить("ОГРНИП", Лист001.П01010100);
		Результат.Вставить("ИНН", ИННПоОГРН(Лист001.П01010100));
		Результат.Вставить("Фамилия", Лист001.П01010201);
		Результат.Вставить("Имя", Лист001.П01010202);
		Результат.Вставить("Отчество", Лист001.П01010203);
		
		Результат.Вставить("Заявители", Новый Массив);
		
		СвЗаяв = Новый Структура;
		СвЗаяв.Вставить("Фамилия", Лист001.П01010201);
		СвЗаяв.Вставить("Имя", Лист001.П01010202);
		СвЗаяв.Вставить("Отчество", Лист001.П01010203);
		СвЗаяв.Вставить("ЭлектроннаяПочта", Лист001.П01020001);
		Результат.Заявители.Добавить(СвЗаяв);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияОтчета

Функция СформироватьДеревоСтраниц(ИмяФормы) Экспорт
	
	Если ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьДеревоСтраниц_Форма2020_4();
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Функция СформироватьДеревоСтраниц():
			|вызов функции с непредусмотренным значением параметра';
			|en = 'Функция СформироватьДеревоСтраниц():
			|вызов функции с непредусмотренным значением параметра'");
		
	КонецЕсли;
	
КонецФункции

Функция СформироватьДеревоСтраниц_Форма2020_4()
	
	ДеревоСтраниц = НовоеДеревоСтраниц();
	
	КорневойУровень = ДеревоСтраниц.Строки;
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 1";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница1";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист001";
	
	Стр001 = КорневойУровень.Добавить();
	Стр001.Наименование = "Стр. 2";
	Стр001.ИндексКартинки = 1;
	Стр001.ИмяМакета = "Форма2020_4_Страница2";
	Стр001.Многостраничность = Ложь;
	Стр001.Многострочность = Ложь;
	Стр001.УИД = Новый УникальныйИдентификатор;
	Стр001.ИДНаименования = "Лист002";
	
	Возврат ДеревоСтраниц;
	
КонецФункции

Функция НовоеДеревоСтраниц()
	
	ДеревоСтраниц = Новый ДеревоЗначений;
	ДеревоСтраниц.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ДеревоСтраниц.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("УИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ДеревоСтраниц.Колонки.Добавить("ИмяМакета", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("Многостраничность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("Многострочность", Новый ОписаниеТипов("Булево"));
	ДеревоСтраниц.Колонки.Добавить("ИДНаименования", Новый ОписаниеТипов("Строка"));
	ДеревоСтраниц.Колонки.Добавить("МногострочныеЧасти", Новый ОписаниеТипов("СписокЗначений"));
	ДеревоСтраниц.Колонки.Добавить("МакетыПФ", Новый ОписаниеТипов("Строка"));
	
	Возврат ДеревоСтраниц;
	
КонецФункции

#КонецОбласти

#Область Печать

Функция СформироватьСписокЛистов(Объект, ЕстьВыходЗаГраницы = Ложь) Экспорт
	Если Объект.ИмяФормы = "Форма2020_4" Тогда
		Возврат СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы);
	КонецЕсли;
КонецФункции

Функция СформироватьСписокЛистовФорма2020_4(Объект, ЕстьВыходЗаГраницы) Экспорт
	Листы = Новый СписокЗначений;
	СтруктураПараметров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДанныеУведомления").Получить();
	
	НомСтр = 0;
	Для Каждого Стр Из СтруктураПараметров.ДеревоСтраниц.Строки Цикл
		ВывестиПростойБланк(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр);
	КонецЦикла;
	
	Возврат Листы;
КонецФункции

Процедура ВывестиПростойБланк(СтруктураПараметров, Стр, ЕстьВыходЗаГраницы, Объект, Листы, НомСтр)
	ПечатнаяФорма = УведомлениеОСпецрежимахНалогообложения.НовыйПустойЛист();
	СтруктураДанныхСтраницы = СтруктураПараметров.ДанныеУведомления[Стр.ИДНаименования];
	
	МакетПФ = УведомлениеОСпецрежимахНалогообложения.ПустойМакетИзСписка(Объект, Неопределено, "Печать_" + Стр.ИмяМакета);
	НомСтр = НомСтр + 1;
	
	ЗаполнитьЗначенияСвойств(МакетПФ.Параметры, СтруктураДанныхСтраницы);
	Для Каждого КЗ Из СтруктураДанныхСтраницы Цикл
		ВывестиПоказательНаБланк(КЗ.Ключ, КЗ.Значение, МакетПФ, ЕстьВыходЗаГраницы)
	КонецЦикла;
	
	ПечатнаяФорма.Вывести(МакетПФ);
	УведомлениеОСпецрежимахНалогообложения.ПоложитьПФВСписокЛистов(Объект, Листы, ПечатнаяФорма, НомСтр);
КонецПроцедуры

Процедура ВывестиПоказательНаБланк(ИмяПоказателя, ЗначениеПоказателя, МакетПФ, ЕстьВыходЗаГраницы)
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		УведомлениеОСпецрежимахНалогообложения.ВывестиСтрокуНаПечать(ВРег(ЗначениеПоказателя), ИмяПоказателя, МакетПФ.Области);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		УведомлениеОСпецрежимахНалогообложения.ВывестиДатуНаПечать(ЗначениеПоказателя, ИмяПоказателя, МакетПФ.Области);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеПредставление

Функция ЭлектронноеПредставление_Форма2020_4(Объект, УникальныйИдентификатор)
	СведенияЭлектронногоПредставления = УведомлениеОСпецрежимахНалогообложения.СведенияЭлектронногоПредставления();
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор);
	СтруктураВыгрузки = Документы.УведомлениеОСпецрежимахНалогообложения.ИзвлечьСтруктуруXMLУведомления(
		Объект.ИмяОтчета, "СхемаВыгрузкиФорма2020_4");
	ЗаполнитьДанными_Форма2020_4(Объект, ОсновныеСведения, СтруктураВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ОтсечьНезаполненныеНеобязательныеУзлы(СтруктураВыгрузки);
	УведомлениеОСпецрежимахНалогообложения.ВыгрузитьДеревоВТаблицу(СтруктураВыгрузки, ОсновныеСведения, СведенияЭлектронногоПредставления);
	Возврат СведенияЭлектронногоПредставления;
КонецФункции

Функция ОсновныеСведенияЭлектронногоПредставления_Форма2020_4(Объект, УникальныйИдентификатор)
	ОсновныеСведения = Новый Структура("ЭтоПБОЮЛ", Истина);
	ОсновныеСведения.Вставить("ДатаДок", Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	Данные = Объект.ДанныеУведомления.Получить();
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	Возврат ОсновныеСведения;
КонецФункции

Процедура ЗаполнитьДанными_Форма2020_4(Объект, Параметры, ДеревоВыгрузки)
	
	ДанныеУведомления = Объект.ДанныеУведомления.Получить();
	ДополнитьПараметры_Форма2020_4(Параметры, ДанныеУведомления);
	
	Документы.УведомлениеОСпецрежимахНалогообложения.ОбработатьУсловныеЭлементы(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьПараметрыСРазделами(Параметры, ДеревоВыгрузки);
	Документы.УведомлениеОСпецрежимахНалогообложения.ЗаполнитьДаннымиУзел(ДанныеУведомления, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ДополнитьПараметры_Форма2020_4(Параметры, ВсеДанные)
	Лист001 = ВсеДанные.ДанныеУведомления.Лист001;
	ДобавитьПризнакиНаличияФИО(Лист001, "П0101020");
КонецПроцедуры

Процедура ДобавитьПризнакиНаличияФИО(ДанныеРаздела, Префикс, ТолькоЗаполненные = Ложь)
	
	ПоказательФ = Префикс + "1";
	ПоказательИ = Префикс + "2";
	ПоказательО = Префикс + "3";
	
	ФИОЗаполнено =  ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ])
		ИЛИ ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]);
	
	Если ТолькоЗаполненные И НЕ ФИОЗаполнено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательФ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательФ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательИ, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательИ]), "", "1"));
	ДанныеРаздела.Вставить("Х" + Сред(ПоказательО, 2), ?(ЗначениеЗаполнено(ДанныеРаздела[ПоказательО]), "", "1"));
	
КонецПроцедуры

Функция ИдентификаторФайлаЭлектронногоПредставления_Форма2020_4(СведенияОтправки)
	
	Если ЗначениеЗаполнено(СведенияОтправки.ДатаДок) Тогда
		ДатаДокумента = Дата(Число(Прав(СведенияОтправки.ДатаДок, 4)),
			Число(Сред(СведенияОтправки.ДатаДок, 4, 2)),
			Число(Лев(СведенияОтправки.ДатаДок, 2)));
		ДатаФормированияФайла = Формат(ДатаДокумента, "ДФ=yyyyMMdd");
	Иначе
		ДатаФормированияФайла = "00010101";
	КонецЕсли;
	
	Префикс = "RO_R26001";
	ИдПолучателя = "0000_0000";
	ИдОтправителя = "000000000000000";
	ИдентификационныйНомер = Строка(Новый УникальныйИдентификатор);
	
	ПрефиксИмениФайла = Префикс + "_" + ИдПолучателя + "_" + ИдОтправителя + "_"
	                  + ДатаФормированияФайла + "_" + ИдентификационныйНомер;
	
	Возврат ПрефиксИмениФайла;
	
КонецФункции

#КонецОбласти

Функция ДанноеУведомлениеДоступноДляОрганизации() Экспорт
	Возврат Ложь;
КонецФункции

Функция ДанноеУведомлениеДоступноДляИП() Экспорт
	Возврат Истина;
КонецФункции

Функция ПолучитьОсновнуюФорму() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьФормуПоУмолчанию() Экспорт
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТаблицуФорм() Экспорт
	
	Результат = Документы.УведомлениеОСпецрежимахНалогообложения.ПолучитьПустуюТаблицуФормУведомления();
	
	ПолноеОписаниеФормы = Результат.Добавить();
	ПолноеОписаниеФормы.ИмяФормы = "Форма2020_4";
	ПолноеОписаниеФормы.ОписаниеФормы = "В редакции приказа ФНС России от 09.01.2024 № ЕД-7-14/4@";
	ПолноеОписаниеФормы.ДатаНачала = '2020-11-25';
	ПолноеОписаниеФормы.ДатаКонца  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйКонтейнерДляАвтозаполнения(ДанныеУведомления)
	
	Контейнер = Новый Структура;
	Для Каждого КЗ Из ДанныеУведомления Цикл
		Контейнер.Вставить(КЗ.Ключ, ОбщегоНазначения.СкопироватьРекурсивно(КЗ.Значение));
	КонецЦикла;
	
	УведомлениеОСпецрежимахНалогообложения.ДополнитьСлужебнымиСтруктурамиАдреса(ДанныеУведомления);
	
	Возврат Контейнер;
	
КонецФункции

Процедура ЗагрузитьПодготовленныеДанные(Контейнер, РезультатКонтейнер, Дерево)
	
	Для Каждого КЗ Из Контейнер Цикл
		Если РезультатКонтейнер.ДанныеУведомления.Свойство(КЗ.Ключ) Тогда
			ЗаполнитьЗначенияСвойств(РезультатКонтейнер.ДанныеУведомления[КЗ.Ключ], КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЗаполненноеУведомление_Форма2020_4(Параметры, СуществующийДокументСсылка = Неопределено)
	
	ИмяФормы = "Форма2020_4";
	Дерево = СформироватьДеревоСтраниц(ИмяФормы);
	ИмяОтчета = "РегламентированноеУведомлениеФормаР26001";
	
	ВходящийКонтейнер = Новый Структура("ИмяФормы, ДеревоСтраниц", СтрШаблон("1.%1.1.%2", ИмяОтчета, ИмяФормы), Дерево);
	
	РезультатКонтейнер = Новый Структура;
	УведомлениеОСпецрежимахНалогообложения.СформироватьКонтейнерДанныхУведомления(ВходящийКонтейнер, РезультатКонтейнер, Истина);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", Параметры.Организация);
	ПараметрыОтчета.Вставить("ПараметрыЗаполнения", Параметры.ДополнительныеПараметры);
	ПараметрыОтчета.Вставить("ИмяФормы", ИмяФормы);
	
	Контейнер = НовыйКонтейнерДляАвтозаполнения(РезультатКонтейнер.ДанныеУведомления);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(ИмяОтчета, ИмяФормы, ПараметрыОтчета, Контейнер);
	
	ЗагрузитьПодготовленныеДанные(Контейнер, РезультатКонтейнер, Дерево);
	
	Если ТипЗнч(СуществующийДокументСсылка) = Тип("Структура")
		И СуществующийДокументСсылка.Свойство("Ссылка")
		И ЗначениеЗаполнено(СуществующийДокументСсылка.Ссылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.Ссылка.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(СуществующийДокументСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения")
		И ЗначениеЗаполнено(СуществующийДокументСсылка) Тогда
		
		НовыйДок = СуществующийДокументСсылка.ПолучитьОбъект();
	Иначе
		НовыйДок = Документы.УведомлениеОСпецрежимахНалогообложения.СоздатьДокумент();
		НовыйДок.Организация = Параметры.Организация;
		НовыйДок.ИмяОтчета = ИмяОтчета;
		НовыйДок.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР26001;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДанныеУведомления, ДеревоСтраниц",
		РезультатКонтейнер.ДанныеУведомления,
		Дерево);
	
	НовыйДок.ИмяФормы = ИмяФормы;
	НовыйДок.Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	НовыйДок.ДатаПодписи = НовыйДок.Дата;
	НовыйДок.ДанныеУведомления = Новый ХранилищеЗначения(СтруктураПараметров);
	НовыйДок.Записать();
	
	Возврат НовыйДок.Ссылка;
КонецФункции

Функция ИННПоОГРН(ОГРН)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОГРН = &ОГРН
	|	И НЕ Организации.ПометкаУдаления");
	Запрос.УстановитьПараметр("ОГРН", ОГРН);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].ИНН;
	
КонецФункции

Функция СформироватьВыгрузкуИПолучитьДанные(ДокОбъект) Экспорт 
	Выгрузка = ДокОбъект.ВыгрузитьДокумент();
	Если Выгрузка = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	СтруктураВыгрузки = Новый Структура("ТестВыгрузки,КодировкаВыгрузки", Выгрузка[0].ТестВыгрузки, Выгрузка[0].КодировкаВыгрузки);
	
	Если ДокОбъект.ИмяФормы = "Форма2020_4" Тогда 
		СтруктураВыгрузки.Вставить("Данные", УведомлениеОСпецрежимахНалогообложения.ПолучитьМакетДвоичныхДанных(ДокОбъект.ИмяОтчета, "TIFF_2020_4"));
		СтруктураВыгрузки.Вставить("ИмяФайла", "1112512_5.03000_09.tif");
		Возврат СтруктураВыгрузки;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли
