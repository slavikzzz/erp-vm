&НаСервере
Перем мОбъектОтчета;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = "";
	СтруктураРеквизитовФормы.мСоставПоказателей = СтруктураРеквизитовФормы["ИмяМакетаСоставаПоказателей"];
	
	ИмяРаздела = "ПолеТабличногоДокументаФормаОтчета";
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "";
	СтруктураРеквизитовФормы.мКодОтчета = "0609013";
	
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000020001";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000040001";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000050001";
	СтруктураРеквизитовФормы.мИдГруппы4 = "П0000060001";
	СтруктураРеквизитовФормы.мИдГруппы5 = "П0000070001";
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, СтруктураРеквизитовФормы.мИдГруппы5);
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, 5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, 5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 5);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 18);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 19);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, 13);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, 12);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 16);
	
	СтруктураРеквизитовФормы.мСоответствияМнгЧ = Новый Соответствие;
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, "МногострочнаяЧасть1");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, "МногострочнаяЧасть2");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, "МногострочнаяЧасть3");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы4, "МногострочнаяЧасть4");
	СтруктураРеквизитовФормы.мСоответствияМнгЧ.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, "МногострочнаяЧасть5");
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		СтруктураРеквизитовФормы["ИмяМакетаТабличногоДокумента"]));
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	мСтруктураВариантыЗаполнения = Новый Структура;
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда 
		СтруктураРеквизитовФормы.ЭтоЮрЛицо                = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	КонецЕсли;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	ПронумероватьСтрокиДляПечати();
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	Элементы.ПриложенияКОтчету.КонтекстноеМеню.Доступность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("ЭтоЮрЛицо");
	СтруктураРеквизитовФормы.Удалить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	
	СтруктураРеквизитовФормы["ИмяМакетаТабличногоДокумента"] = "ФормаОтчета2020Кв1_ФормаОтчета";
	СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"] = "СхемаВыгрузкиXML2020Кв1";
	СтруктураРеквизитовФормы["ИмяМакетаСписков"] = "Списки2020кв1";
	СтруктураРеквизитовФормы["ИмяМакетаСоставаПоказателей"] = "СоставПоказателей2020Кв1";
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	ОТЧ = Новый ОписаниеТипов("Число");
	СформироватьСпискиВыбора();
	РегламентированнаяОтчетность.ЗаполнитьНачальныеНастройки(ЭтотОбъект);
	ФормироватьСтруктуруСтраницОтчета();
	ФормироватьСтруктуруСвойствСтраниц();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		СтруктураРеквизитовФормы.ЕдиницаИзмерения         = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
			_Приложения.ПолучитьЭлементы().Очистить();
			ИмяФайлаДоверенности = "";
			Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
			ХешДоверенности = "";
		КонецЕсли;
		
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			_Приложения.ПолучитьЭлементы().Очистить();
			ИмяФайлаДоверенности = "";
			Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
			ХешДоверенности = "";
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчета.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда 
		СтруктураРеквизитовФормы.НаимОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовФормы.Организация, "Наименование");
	КонецЕсли;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "РПН");
	РегламентированнаяОтчетность.УстановитьЦветФорматДоступностьЯчеек(ЭтотОбъект);
	ИзменитьТаблицуВариантовЗаполненияНаСервере();
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за "
		+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'")) + " г.";
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации.
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// Восстанавливаем сохраненные данные вариантов автозаполнения ячеек.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// Восстанавливаем версию формы.
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	СписокСохранения.Свойство("Доверенность", Доверенность);
	СписокСохранения.Свойство("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Свойство("ХешДоверенности", ХешДоверенности);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СтруктураРеквизитовФормы.мАвтоВыборКодов = ?(СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено, Ложь, СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Свойство("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = ?(СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Неопределено, Ложь, СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	Если СписокСохранения.Свойство("_Приложения") Тогда 
		ЗначениеВДанныеФормы(СписокСохранения._Приложения, _Приложения);
	КонецЕсли;
	
	// Восстанавливаем сохраненные данные многострочных разделов.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтотОбъект[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтотОбъект[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановим сохраненные данные редактируемых ячеек.
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтотОбъект[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// Установим значение в таблице.
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// Значение показателя с префиксом "ЧН" содержит формат представления нуля.
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;

	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда 
		СтруктураРеквизитовФормы.ЭтоЮрЛицо = РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	КонецЕсли;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);

	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтотОбъект, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКАТО");
	КонецЕсли;

	Сведения.Добавить("", "ФИОИсп");
	Сведения.Добавить("", "ФИО");
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "АдресЭлПочтыИсп");

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКПО = "";
		ОКАТО = "";
	КонецЕсли;

	ДолжнИсп = "";
	ФИОИсп = "";
	ТелИсп = "";
	АдресЭлПочтыИсп = "";
	ФИО = "";
	ФИОРук = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ",          КППЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОснВидДеят",     ОснВидДеят);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("ОКАТО",          ОКАТО);
	КонецЕсли;

	ОргСведения.Свойство("ФИОИсп",          ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",        ДолжнИсп);
	ОргСведения.Свойство("ТелИсп", 		    ТелИсп);
	ОргСведения.Свойство("АдресЭлПочтыИсп", АдресЭлПочтыИсп);
	ОргСведения.Свойство("ФИОРук",          ФИОРук);
	ОргСведения.Свойство("ФИО",             ФИО);

	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД.Значение);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
		Возврат;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
			
	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКАТО.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКАТО.Значение = ОКАТО;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение)) Тогда
		Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение)) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	Сведения = "ИННЮЛ,ОГРН,НаимЮЛПол,НаимЮЛСокр,КППЮЛ,ОКПО,ОКВЭД,ФИОРук,ДолжнРук,ОКТМО,ОргИндекс,"
		+ "АдрЮР,ФИОРук,ДолжнРук,ТелОрганизации,АдресЭлектроннойПочтыОрганизации,ИННФЛ,ФИО";
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда 
		ПолеТабличногоДокументаФормаОтчета.Области.inn.Значение = ОргСведения.ИННЮЛ;
		ПолеТабличногоДокументаФормаОтчета.Области.kpp.Значение = ОргСведения.КППЮЛ;
		ПолеТабличногоДокументаФормаОтчета.Области.full_name_organization.Значение = ОргСведения.НаимЮЛПол;
		ПолеТабличногоДокументаФормаОтчета.Области.short_name_organization.Значение = ОргСведения.НаимЮЛСокр;
	Иначе
		ПолеТабличногоДокументаФормаОтчета.Области.inn.Значение = ОргСведения.ИННФЛ;
		ПолеТабличногоДокументаФормаОтчета.Области.full_name_organization.Значение = ОргСведения.ФИО;
		ПолеТабличногоДокументаФормаОтчета.Области.short_name_organization.Значение = ОргСведения.ФИО;
	КонецЕсли;
	ПолеТабличногоДокументаФормаОтчета.Области.ogrn.Значение = ОргСведения.ОГРН;
	ПолеТабличногоДокументаФормаОтчета.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ПолеТабличногоДокументаФормаОтчета.Области.okved.Значение = ОргСведения.ОКВЭД;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_full_name.Значение = ОргСведения.ФИОРук;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_position.Значение = ОргСведения.ДолжнРук;
	ПолеТабличногоДокументаФормаОтчета.Области.post_address_post.Значение = ОргСведения.ОргИндекс;
	ПолеТабличногоДокументаФормаОтчета.Области.post_address_street.Значение = ОргСведения.АдрЮР;
	ПолеТабличногоДокументаФормаОтчета.Области.legal_address_post.Значение = ОргСведения.ОргИндекс;
	ПолеТабличногоДокументаФормаОтчета.Области.legal_address_street.Значение = ОргСведения.АдрЮР;
	ПолеТабличногоДокументаФормаОтчета.Области.code_okpo.Значение = ОргСведения.ОКПО;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_full_name.Значение = ОргСведения.ФИОРук;
	ПолеТабличногоДокументаФормаОтчета.Области.ceo_position.Значение = ОргСведения.ДолжнРук;
	ПолеТабличногоДокументаФормаОтчета.Области.phone.Значение = ОргСведения.ТелОрганизации;
	ПолеТабличногоДокументаФормаОтчета.Области.email.Значение = ОргСведения.АдресЭлектроннойПочтыОрганизации;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?';
		|en = 'Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтотОбъект.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект, КодИФНС,
		Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	ОтчетМетаданные = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ИмяФормы, "Внешний", ""),
		СтрНайти(СтрЗаменить(ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)];
	
	ВидОтчетности = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	
	ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Вариант);
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета			  = ОтчетМетаданные.Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета		  = ОтчетМетаданные.ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = ВидОтчетности;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида		  = ПредставлениеВида;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СписокСохранения = Новый Структура();
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтотОбъект[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("Доверенность", Доверенность);
	СписокСохранения.Вставить("ИмяФайлаДоверенности", ИмяФайлаДоверенности);
	СписокСохранения.Вставить("ХешДоверенности", ХешДоверенности);
	СписокСохранения.Вставить("_Приложения", ДанныеФормыВЗначение(_Приложения, Тип("ДеревоЗначений")));
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																												|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтотОбъект.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, ИмяТабличногоПоля);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтотОбъект, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтотОбъект, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьСтрокиДляПечати()
	Стр = 1;
	Пока Истина Цикл 
		ИмяОбласти = "П000002000101_" + Стр;
		Если ПолеТабличногоДокументаФормаОтчета.Области.Найти(ИмяОбласти) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		ПолеТабличногоДокументаФормаОтчета.Области[ИмяОбласти].Значение = Стр;
		ПолеТабличногоДокументаФормаОтчета.Области["П000004000101_" + Стр].Значение = Стр;
		Стр = Стр + 1;
	КонецЦикла;
	
	Стр = 1;
	Пока Истина Цикл 
		ИмяОбласти = "П000005000101_" + Стр;
		Если ПолеТабличногоДокументаФормаОтчета.Области.Найти(ИмяОбласти) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		ПолеТабличногоДокументаФормаОтчета.Области[ИмяОбласти].Значение = (Стр + 5);
		ПолеТабличногоДокументаФормаОтчета.Области["П000006000101_" + Стр].Значение = (Стр + 5);
		ПолеТабличногоДокументаФормаОтчета.Области["П000007000101_" + Стр].Значение = (Стр + 5);
		Стр = Стр + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере("ФормаОтчета");
		
	#Иначе
		
		ДобавитьСтрокуНаКлиенте("ФормаОтчета");
		
	#КонецЕсли
	
	ПронумероватьСтрокиДляПечати();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтотОбъект,КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтотОбъект, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, ИмяГруппы)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	Если ИмяГруппы = "П0000020001" Или ИмяГруппы = "П0000040001" Тогда
		Если Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000002000101_80") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяГруппы = "П0000050001" Или ИмяГруппы = "П0000060001" Или ИмяГруппы = "П0000070001" Тогда 
		Если Форма.ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000004000101_80") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = Форма[СтруктураГруппы];

	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
								|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда 
		ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы.
		ИмяТекущейОбласти = ИмяГруппы + "02_" + Строка(Форма.П0000020001.Количество());
		ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = Форма[ТекТабличноеПолеИмя].Области[ИмяТекущейОбласти];
	ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда 
		ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы3);
		ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы4);
		ВставитьДополнительнуюСтрокуВГруппу(Форма, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы5);
		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы.
		ИмяТекущейОбласти = ИмяГруппы + "02_" + Строка(Форма.П0000050001.Количество());
		ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = Форма[ТекТабличноеПолеИмя].Области[ИмяТекущейОбласти];
	КонецЕсли;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьСтроку(Команда)
	ТекТабличноеПоле = ЭтотОбъект["ПолеТабличногоДокументаФормаОтчета"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтотОбъект, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
														|en = 'Не выбрана удаляемая строка многострочного раздела.'"));
		Возврат;
	КонецЕсли;
	
	Если КодВозвратаДиалога.Да = Ждать ВопросАсинх(НСтр("ru = 'Удалить выбранную строку?';
														|en = 'Удалить выбранную строку?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) Тогда 
		#Если ВебКлиент Тогда
			УдалитьДополнительнуюСтрокуНаСервере("ФормаОтчета");
		#Иначе
			УдалитьДополнительнуюСтрокуНаКлиенте("ФормаОтчета");
		#КонецЕсли
		
		РасчетНаКлиенте("", "");
		ПронумероватьСтрокиДляПечати();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтотОбъект, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтотОбъект, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, ИмяГруппы, НомУдаляемойСтроки, НомерСтрокиТаблицы)
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	ТекТабличноеПоле = Форма["ПолеТабличногоДокументаФормаОтчета"];
	
	// Предварительно обновим структуру многострочных разделов.
	ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим
	// по имени выделенной ячейки.
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа,
		// должен осуществляться сдвиг строк.
		
		// Обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	ИмяЯчейки = Форма.Элементы["ПолеТабличногоДокументаФормаОтчета"].ТекущаяОбласть.Имя;
	НомУдаляемойСтроки = Число(Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы1, НомУдаляемойСтроки, НомерСтрокиТаблицы);
		УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы2, НомУдаляемойСтроки, НомерСтрокиТаблицы);
	ИначеЕсли ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4 Или ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5 Тогда 
		УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы3, НомУдаляемойСтроки, НомерСтрокиТаблицы);
		УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы4, НомУдаляемойСтроки, НомерСтрокиТаблицы);
		УдалитьДополнительнуюСтрокуИзГруппы(Форма, СпециальноеДобавление, ИмяКолонкиНомера, ТекущаяСтраница, Форма.СтруктураРеквизитовФормы.мИдГруппы5, НомУдаляемойСтроки, НомерСтрокиТаблицы);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтотОбъект, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтотОбъект, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Возврат РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтотОбъект, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтображениеГиперссылокДоверенности(Форма)
	ФайлДоверенностиУдалить = Форма.ПолеТабличногоДокументаФормаОтчета.Области["ФайлДоверенностиУдалить"];
	ФайлДоверенностиДобавить = Форма.ПолеТабличногоДокументаФормаОтчета.Области["ФайлДоверенностиДобавить"];
	Если ЗначениеЗаполнено(Форма.Доверенность) Тогда 
		ФайлДоверенностиУдалить.Гиперссылка = Истина;
		ФайлДоверенностиУдалить.Текст = "х";
		ФайлДоверенностиДобавить.Текст = Форма.ИмяФайлаДоверенности;
	Иначе
		ФайлДоверенностиУдалить.Гиперссылка = Ложь;
		ФайлДоверенностиУдалить.Текст = "";
		ФайлДоверенностиДобавить.Текст = "Добавить файл доверенности";
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// Определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// Выводим значения строк.
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=; ЧН=00");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// Задаем значение ячейки.
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	ОтображениеГиперссылокДоверенности(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтотОбъект, Область, СтандартнаяОбработка);
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 Тогда
		УдалитьСтроку("");
	ИначеЕсли (Не (Область.Защита = Истина)) И СтрНайти(Область.Имя, "_") = 14 И СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь Тогда 
		Если СтрНайти(Область.Имя, "П000004000102") = 1 Или СтрНайти(Область.Имя, "П000004000103") = 1 
			Или СтрНайти(Область.Имя, "П000002000102") = 1 Или СтрНайти(Область.Имя, "П000002000103") = 1 Тогда 
			
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "Вещества");
			ОбластьДляВвода     = ПолеТабличногоДокументаФормаОтчета.Области["П000004000103" + Сред(Область.Имя, 14)];
			ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["П000004000102" + Сред(Область.Имя, 14)];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
		ИначеЕсли СтрНайти(Область.Имя, "П000005000102") = 1 Или СтрНайти(Область.Имя, "П000005000103") = 1 
			Или СтрНайти(Область.Имя, "П000006000102") = 1 Или СтрНайти(Область.Имя, "П000006000103") = 1
			Или СтрНайти(Область.Имя, "П000007000102") = 1 Или СтрНайти(Область.Имя, "П000007000103") = 1 Тогда 
			
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "Вещества");
			ОбластьДляВвода     = ПолеТабличногоДокументаФормаОтчета.Области["П000005000103" + Сред(Область.Имя, 14)];
			ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["П000005000102" + Сред(Область.Имя, 14)];
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);				
		ИначеЕсли СтрНайти(Область.Имя, "П000004000104") = 1 Или СтрНайти(Область.Имя, "П000002000104") = 1 Тогда
			ОбластьДляВвода     = ПолеТабличногоДокументаФормаОтчета.Области["П000004000104" + Сред(Область.Имя, 14)];
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);
		ИначеЕсли СтрНайти(Область.Имя, "П000005000104") = 1 Или СтрНайти(Область.Имя, "П000006000104") = 1 Или СтрНайти(Область.Имя, "П000007000104") = 1 Тогда
			ОбластьДляВвода     = ПолеТабличногоДокументаФормаОтчета.Области["П000005000104" + Сред(Область.Имя, 14)];
			ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "КлассОпасностиОтходов");
			ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
							ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка);

		КонецЕсли;
	ИначеЕсли Область.Имя = "is_ceo" 
		Или Область.Имя = "is_separate"
		Или Область.Имя = "is_non_resident" Тогда
		Область.Значение = Не Область.Значение;
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Область.Имя = "region_oktmo" Или Область.Имя = "region_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКТМОРегионы");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["region_oktmo"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "territory_org_code" Или Область.Имя = "territory_org_name" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "РПН");
		ОбластьНаименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
		ОбластьДляВвода = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_code"];
		ВвестиПоказатель(ОбластьДляВвода, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, ОбластьНаименование);
	ИначеЕсли Область.Имя = "okved" Тогда
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, "ОКВЭД");
		ВвестиПоказатель(Область, ПараметрВводаПоля.Показатель, ПараметрВводаПоля.ТекстПриВыборе,
						ПараметрВводаПоля.ТаблицаЗначений, СтандартнаяОбработка, Неопределено);
	ИначеЕсли Область.Имя = "ФайлДоверенностиДобавить" Тогда
		Если Не ЗначениеЗаполнено(Доверенность) Тогда 
			Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
				ТекстВопроса = "Перед добавлением доверенности необходимо сохранить отчет. Продолжить?";
				ОО = Новый ОписаниеОповещения("ВопросДоверенностьЗавершение", ЭтотОбъект);
				ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Иначе
				ВопросДоверенностьЗавершение(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
		Иначе
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(Доверенность), Ложь);
		КонецЕсли;
	ИначеЕсли Область.Имя = "ФайлДоверенностиУдалить" И Область.Гиперссылка = Истина И ЗначениеЗаполнено(Доверенность) Тогда
		УдалитьФайлДоверенности();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеФайла(ПрисоединенныйФайл)
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);
КонецФункции

&НаСервере
Процедура УдалитьФайлДоверенности()
	Попытка
		ПрисоединенныйФайлОбъект = Доверенность.ПолучитьОбъект();
		Если ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы) Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		Доверенность = Справочники.РегламентированныйОтчетПрисоединенныеФайлы.ПустаяСсылка();
		ХешДоверенности = "";
		ПолеТабличногоДокументаФормаОтчета.Области["attorney_file_attachment_file"].Значение = "";
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю("При установке файла доверенности произошли ошибки");
		Возврат;
	КонецПопытки;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВопросДоверенностьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияЗавершениеЗавершение", ЭтотОбъект);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияЗавершениеЗавершение(Неопределено, Неопределено);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьДоверенностьЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоверенностьЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ОО = Новый ОписаниеОповещения("ПодписатьГОСТ2012Завершение", ЭтотОбъект, Новый Структура("СтрокаПоиска, АдресФайла", ВыбИмяФайла, АдресФайла));
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		ХешДоверенности = НРег(Результат.Хеш);
	Иначе
		ХешДоверенности = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ХешДоверенности) Тогда 
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог) Экспорт 
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	Доверенность = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ИмяФайлаДоверенности = ИмяФайла;
	ПолеТабличногоДокументаФормаОтчета.Области["attorney_file_attachment_file"].Значение = ИмяФайла;
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
	ОтображениеГиперссылокДоверенности(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииИОбновитьСписокВыбораОтходов()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
	СформироватьСпискиВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда
		ОбновитьСписокВыбораОтходов
		= (Область.Значение >= '20160627' И ДатаПодписи < '20160627')
		ИЛИ (Область.Значение < '20160627' И ДатаПодписи >= '20160627');
		ДатаПодписи = Область.Значение;
		Если ОбновитьСписокВыбораОтходов Тогда
			ЗаполнитьСведенияОбОрганизацииИОбновитьСписокВыбораОтходов();
		Иначе
			ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКВЭД.Значение);
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П000004000102") = 1 Или СтрНайти(Область.Имя, "П000004000103") = 1 Или СтрНайти(Область.Имя, "П000004000104") = 1 Тогда 
		ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000004", "П000002")]. Значение = Область.Значение;
	ИначеЕсли СтрНайти(Область.Имя, "П000002000102") = 1 Или СтрНайти(Область.Имя, "П000002000103") = 1 Или СтрНайти(Область.Имя, "П000002000104") = 1 Тогда 
		ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000002", "П000004")]. Значение = Область.Значение;
	КонецЕсли;
	РасчетНаКлиенте("", "");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	Стр = 1;
	Пока Истина Цикл
		СтрСтр = Формат(Стр, "ЧГ=");
		Если Области.Найти("П000002000101_" + СтрСтр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Области["П000004000119_" + СтрСтр].Значение
			= Области["П000002000105_" + СтрСтр].Значение + Области["П000002000106_" + СтрСтр].Значение
			+ Области["П000002000107_" + СтрСтр].Значение + Области["П000002000110_" + СтрСтр].Значение
			+ Области["П000002000112_" + СтрСтр].Значение - Области["П000002000113_" + СтрСтр].Значение
			- Области["П000002000114_" + СтрСтр].Значение - Области["П000002000117_" + СтрСтр].Значение
			- Области["П000002000118_" + СтрСтр].Значение - Области["П000004000105_" + СтрСтр].Значение
			- Области["П000004000107_" + СтрСтр].Значение - Области["П000004000109_" + СтрСтр].Значение
			- Области["П000004000111_" + СтрСтр].Значение - Области["П000004000113_" + СтрСтр].Значение
			- Области["П000004000115_" + СтрСтр].Значение - Области["П000004000118_" + СтрСтр].Значение;
		Стр = Стр + 1;
	КонецЦикла;
	
	Стр = 1;
	Пока Истина Цикл
		СтрСтр = Формат(Стр, "ЧГ=");
		Если Области.Найти("П000005000110_" + СтрСтр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Области["П000005000110_" + СтрСтр].Значение
			= Области["П000005000111_" + СтрСтр].Значение + Области["П000005000112_" + СтрСтр].Значение
			+ Области["П000005000113_" + СтрСтр].Значение;
		Стр = Стр + 1;
	КонецЦикла;
	
	Стр = 1;
	Пока Истина Цикл
		СтрСтр = Формат(Стр, "ЧГ=");
		Если Области.Найти("П000005000101_" + СтрСтр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Области["П000007000116_" + СтрСтр].Значение
			= Области["П000005000105_" + СтрСтр].Значение + Области["П000005000106_" + СтрСтр].Значение
			+ Области["П000005000107_" + СтрСтр].Значение + Области["П000005000110_" + СтрСтр].Значение
			- Области["П000006000105_" + СтрСтр].Значение - Области["П000006000107_" + СтрСтр].Значение
			- Области["П000006000110_" + СтрСтр].Значение - Области["П000006000111_" + СтрСтр].Значение
			- Области["П000007000105_" + СтрСтр].Значение - Области["П000007000109_" + СтрСтр].Значение
			- Области["П000007000111_" + СтрСтр].Значение - Области["П000007000114_" + СтрСтр].Значение;
		Стр = Стр + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	мПараметры = Новый Структура;
	
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ПараметрыОтображенияСумм", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);
	ФормаНастройкиОтчета.Элементы.Страницы.ПодчиненныеЭлементы.СвойстваРазделов.Видимость = Ложь;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета", ЗначениеАвторасчета);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;

	Модифицированность = Истина;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
		Расчет(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?';
																				|en = 'Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда       
		Возврат;      
	Иначе       
		Очистить();       
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить() Экспорт
	
	ОчиститьТабличноеПолеНаСервере();
	ПронумероватьСтрокиДляПечати();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно.
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,             "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение,    "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код1"].Значение,                     "Код1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["Код2"].Значение,                     "Код2");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,                  "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,                 "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,               "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКАТО"].Значение,              "ОргКодОКАТО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКВЭД"].Значение,              "ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,               "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,              "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,               "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,              "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,          "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,            "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,           "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");

	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		СтруктураРеквизитовФормы["ИмяМакетаТабличногоДокумента"]));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	РегламентированнаяОтчетность.НачальныеОперацииСМногострочнымиБлоками(ЭтотОбъект);
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
	
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтотОбъект[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1. Формируется печатная форма...';
																			|en = '%1. Формируется печатная форма...'"), ЭтотОбъект.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтотОбъект, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!';
				|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'"));
		Возврат Ложь;
	КонецЕсли;
	
	ТабличныйДокумент = ЭтотОбъект["ПолеТабличногоДокументаФормаОтчета"];
	Области = ПолеТабличногоДокументаФормаОтчета.Области;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма 2-ТП (отходы)");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Ландшафт");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "2ТПОтходы");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ПолеТабличногоДокументаФормаОтчета");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть1б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2_1"));
	
	ВерхМногострочнойЧасти = Области["ОсновнаяЧасть2_1"].Низ + 1;
	НизМногострочнойЧасти = Области["ДобавлениеСтроки1"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2_2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2_2"));
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2_1"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть2_2"));
	
	ПервыйПроход = Истина;
	ВерхМногострочнойЧасти = Области["ОсновнаяЧасть3_1"].Низ + 1;
	НизМногострочнойЧасти = Области["ДобавлениеСтроки2"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		МассивПроверкиВывода = Новый Массив;
		Если ПервыйПроход Тогда 
			МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3_1"));
		КонецЕсли;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3_2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			Если ПервыйПроход Тогда 
				ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3_1"));
			КонецЕсли;
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3_2"));
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть3_1"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ПервыйПроход = Ложь;
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	
	ПервыйПроход = Истина;
	ВерхМногострочнойЧасти = Области["ОсновнаяЧасть4_1"].Низ + 1;
	НизМногострочнойЧасти = Области["ДобавлениеСтроки3"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		МассивПроверкиВывода = Новый Массив;
		Если ПервыйПроход Тогда 
			МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4_1"));
		КонецЕсли;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4_2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			Если ПервыйПроход Тогда 
				ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4_1"));
			КонецЕсли;
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4_2"));
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть4_1"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ПервыйПроход = Ложь;
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	
	ПервыйПроход = Истина;
	ВерхМногострочнойЧасти = Области["ОсновнаяЧасть5_1"].Низ + 1;
	НизМногострочнойЧасти = Области["ДобавлениеСтроки4"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		МассивПроверкиВывода = Новый Массив;
		Если ПервыйПроход Тогда 
			МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5_1"));
		КонецЕсли;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5_2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			Если ПервыйПроход Тогда 
				ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5_1"));
			КонецЕсли;
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5_2"));
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть5_1"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ПервыйПроход = Ложь;
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	
	ПервыйПроход = Истина;
	ВерхМногострочнойЧасти = Области["ОсновнаяЧасть6_1"].Низ + 1;
	НизМногострочнойЧасти = Области["ДобавлениеСтроки5"].Верх - 1;
	ТекущийВерх = ВерхМногострочнойЧасти;
	Пока ТекущийВерх <= НизМногострочнойЧасти Цикл
		ТекущаяОбластьМногострочнойЧасти = ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(ТекущийВерх,,ТекущийВерх,);
		
		МассивПроверкиВывода = Новый Массив;
		Если ПервыйПроход Тогда 
			МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_1"));
		КонецЕсли;
		МассивПроверкиВывода.Добавить(ТекущаяОбластьМногострочнойЧасти);
		МассивПроверкиВывода.Добавить(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_2"));
		
		Если ПечатнаяФорма.ПроверитьВывод(МассивПроверкиВывода) Тогда
			Если ПервыйПроход Тогда 
				ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_1"));
			КонецЕсли;
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		Иначе
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_2"));
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
			ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
			ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_1"));
			ПечатнаяФорма.Вывести(ТекущаяОбластьМногострочнойЧасти);
		КонецЕсли;
		
		ПервыйПроход = Ложь;
		ТекущийВерх = ТекущийВерх + 1;
	КонецЦикла;
	
	Если Не ПечатнаяФорма.ПроверитьВывод(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть7")) Тогда
		ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть6_2"));
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
		ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	КонецЕсли;
	
	ПечатнаяФорма.Вывести(ТабличныйДокумент.ПолучитьОбласть("ОсновнаяЧасть7"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 2-ТП (отходы)");
	Инд = 1;
	Пока Инд < СтруктураРеквизитовФормы.мПечатныеФормы.Количество() Цикл 
		Лист = СтруктураРеквизитовФормы.мПечатныеФормы[Инд].Значение;
		Инд = Инд + 1;
		Для Каждого Область Из Лист.Области Цикл 
			Если СтрНайти(Область.Имя, "УдалитьСтрокуП0") = 1 Тогда 
				Область.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы["ИмяМакетаСписков"]);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	Строка16  = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(20,  ДопустимаяДлина.Переменная));
	Строка512 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(1024, ДопустимаяДлина.Переменная));
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",     Строка16   ,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",Строка512  ,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	ИмяСекцииОтходов = "Вещества";
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "Вещества", 512, , "Выбор кода загрязняющего вещества", КоллекцияСписковВыбора[ИмяСекцииОтходов]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КлассОпасностиОтходов", 512, , "Выбор класса опасности отходов", КоллекцияСписковВыбора["КлассОпасностиОтходов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ОрганыРПН", 512, , "Выбор органа РосПриродНадзора", КоллекцияСписковВыбора["ОрганыРПН"]);
	РегламентированнаяОтчетность.ЗагрузитьОбщиеСправочникиРПН(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Область, КодПоказателя, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, ОбластьНаименование = Неопределено) Экспорт
	
	Если ТаблицаВыбора = Неопределено Или СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ИсходноеЗначение = Область.Значение;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("Область, ОбластьНаименование", Область, ОбластьНаименование);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ОбластьНаименование = ДополнительныеПараметры.ОбластьНаименование;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П000004") = 1 Тогда 
		ДругаяОбласть1Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000004", "П000002")];
		ДругаяОбласть2Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000004", "П000002")];
		ДругаяОбласть1Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000004", "П000002")]);
		ДругаяОбласть2Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000004", "П000002")]);
	ИначеЕсли СтрНайти(Область.Имя, "П000005") = 1 Тогда 
		ДругаяОбласть1Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000005", "П000006")];
		ДругаяОбласть2Код = ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(Область.Имя, "П000005", "П000007")];
		ДругаяОбласть1Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000005", "П000006")]);
		ДругаяОбласть2Наименование = ?(ОбластьНаименование = Неопределено, Неопределено, ПолеТабличногоДокументаФормаОтчета.Области[СтрЗаменить(ОбластьНаименование.Имя, "П000005", "П000007")]);
	ИначеЕсли Область.Имя = "КодОргРПН" Тогда 
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["ОргРПН"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["ОргРПН"];
	ИначеЕсли Область.Имя = "region_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["region_name"];
	ИначеЕсли Область.Имя = "post_address_municipality_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["post_address_municipality_name"];
	ИначеЕсли Область.Имя = "legal_address_municipality_oktmo" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["legal_address_municipality_name"];
	ИначеЕсли Область.Имя = "territory_org_code" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
		ДругаяОбласть2Наименование = ПолеТабличногоДокументаФормаОтчета.Области["territory_org_name"];
	ИначеЕсли Область.Имя = "okved" Тогда
		ДругаяОбласть1Код = Область;
		ДругаяОбласть2Код = Область;
		ДругаяОбласть1Наименование = Неопределено;
		ДругаяОбласть2Наименование = Неопределено;
	КонецЕсли;
	
	Область.Значение = СокрЛ(РезультатВыбора["Код"]);
	ДругаяОбласть1Код.Значение = Область.Значение;
	ДругаяОбласть2Код.Значение = Область.Значение;
	
	Если ОбластьНаименование <> Неопределено Тогда
		РезультатВыбораНазвание = РезультатВыбора.Название;
		Если Область.Значение = "" Тогда 
			РезультатВыбораНазвание = "";
		КонецЕсли;
		ОбластьНаименование.Значение = РезультатВыбораНазвание;
		ДругаяОбласть1Наименование.Значение = РезультатВыбораНазвание;
		ДругаяОбласть2Наименование.Значение = РезультатВыбораНазвание;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru = 'В ходе выгрузки были найдены ошибки.';
							|en = 'В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПустаяСтруктураВыгрузки()
	Возврат Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, КодировкаФайлаВыгрузки, ТипФайлаВыгрузки");
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтотОбъект);
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтотОбъект,
		СтруктураРеквизитовФормы["ИмяМакетаСхемыВыгрузки"]);
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтотОбъект, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	РезультатВыгрузки = Новый Массив;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "utf-8");
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ФайлВыгрузки);
	
	ОсновнаяВыгрузка = ПустаяСтруктураВыгрузки();
	ОсновнаяВыгрузка.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	ОсновнаяВыгрузка.ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	ОсновнаяВыгрузка.КодировкаФайлаВыгрузки = "utf-8";
	ОсновнаяВыгрузка.ТипФайлаВыгрузки = "ОсновныеСведения";
	РезультатВыгрузки.Добавить(ОсновнаяВыгрузка);
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		Приложение = ПустаяСтруктураВыгрузки();
		Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Доверенность), Новый УникальныйИдентификатор);
		Приложение.ИмяФайлаВыгрузки = ИмяФайлаДоверенности;
		Приложение.КодировкаФайлаВыгрузки = "";
		Приложение.ТипФайлаВыгрузки = "2ТПОТХОДЫ.ПРИЛОЖЕНИЕ";
		РезультатВыгрузки.Добавить(Приложение);
	КонецЕсли;
	
	Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
		Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
			Приложение = ПустаяСтруктураВыгрузки();
			Приложение.АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(СтрФайл.ПрисоединенныйФайл), Новый УникальныйИдентификатор);
			Приложение.ИмяФайлаВыгрузки = СтрФайл.ОписаниеДокумента;
			Приложение.КодировкаФайлаВыгрузки = "";
			Приложение.ТипФайлаВыгрузки = "2ТПОТХОДЫ.ПРИЛОЖЕНИЕ";
			РезультатВыгрузки.Добавить(Приложение);
		КонецЦикла;
	КонецЦикла;
	
	ТекстВыгрузки = РезультатВыгрузки;
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	СтатусПроверки = Истина;
	
	Возврат СтатусПроверки;
КонецФункции

&НаСервере
Процедура ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки)
	ПараметрыВыгрузки.Вставить("UUID", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаФормированияФайла", Формат(ТекущаяДатаСеанса(), "ДФ='yyyy-MM-dd HH:mm:ss'"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=yyyy"));
	ПараметрыВыгрузки.Вставить("is_ceo_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_ceo.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_separate_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_separate.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("is_non_resident_en", ?(ПолеТабличногоДокументаФормаОтчета.Области.is_non_resident.Значение = Истина, "true", "false"));
	ПараметрыВыгрузки.Вставить("register_date_str", Формат(ПолеТабличногоДокументаФормаОтчета.Области.register_date.Значение, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("egrul_egrip_date_str", Формат(ПолеТабличногоДокументаФормаОтчета.Области.egrul_egrip_date.Значение, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("Раздел1Заполнен", Ложь);
	ПараметрыВыгрузки.Вставить("Раздел2Заполнен", Ложь);
	ПараметрыВыгрузки.Вставить("Раздел3Заполнен", Ложь);
	ПараметрыВыгрузки.Вставить("ЕстьПриложения", (_Приложения.ПолучитьЭлементы().Количество() > 0));
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИндСтр = "_" + Формат(Инд, "ЧГ=");
		Если Не ПараметрыВыгрузки.Свойство("П000002000102" + ИндСтр) Тогда 
			Прервать;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000002000103" + ИндСтр]) Тогда 
			ПараметрыВыгрузки["Раздел1Заполнен"] = Истина;
		КонецЕсли;
		Для Итер = 2 По 18 Цикл
			ИтерСтр = Формат(Итер, "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ПараметрыВыгрузки.Вставить("П1000020001" + ИтерСтр, ПараметрыВыгрузки["П0000020001" + ИтерСтр]);
		КонецЦикла;
		Для Итер = 5 По 19 Цикл
			ИтерСтр = Формат(Итер, "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ИтерСтр2 = Формат((Итер + 14), "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ПараметрыВыгрузки.Вставить("П1000020001" + ИтерСтр2, ПараметрыВыгрузки["П0000040001" + ИтерСтр]);
		КонецЦикла;
	КонецЦикла;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		ИндСтр = "_" + Формат(Инд, "ЧГ=");
		Если Не ПараметрыВыгрузки.Свойство("П000005000102" + ИндСтр) Тогда 
			Прервать;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки["П000005000103" + ИндСтр]) Тогда 
			ПараметрыВыгрузки["Раздел2Заполнен"] = Истина;
		КонецЕсли;
		Для Итер = 2 По 13 Цикл
			ИтерСтр = Формат(Итер, "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ПараметрыВыгрузки.Вставить("П2000020001" + ИтерСтр, ПараметрыВыгрузки["П0000050001" + ИтерСтр]);
		КонецЦикла;
		Для Итер = 5 По 12 Цикл
			ИтерСтр = Формат(Итер, "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ИтерСтр2 = Формат((Итер + 9), "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ПараметрыВыгрузки.Вставить("П2000020001" + ИтерСтр2, ПараметрыВыгрузки["П0000060001" + ИтерСтр]);
		КонецЦикла;
		Для Итер = 5 По 16 Цикл
			ИтерСтр = Формат(Итер, "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ИтерСтр2 = Формат((Итер + 17), "ЧЦ=2; ЧВН=; ЧГ=") + ИндСтр;
			ПараметрыВыгрузки.Вставить("П2000020001" + ИтерСтр2, ПараметрыВыгрузки["П0000070001" + ИтерСтр]);
		КонецЦикла;
	КонецЦикла;
	
	Для Инд = 11 по 31 Цикл 
		ПараметрыВыгрузки["Раздел3Заполнен"] = ПараметрыВыгрузки["Раздел3Заполнен"] 
			Или ЗначениеЗаполнено(ПараметрыВыгрузки["П030" + Инд]);
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("ЕстьДоверенность", ЗначениеЗаполнено(Доверенность));
	ПараметрыВыгрузки.Вставить("Доверенность_УИД", Строка(Новый УникальныйИдентификатор));
	ПараметрыВыгрузки.Вставить("Доверенность_Файл", ИмяФайлаДоверенности);
	ПараметрыВыгрузки.Вставить("Доверенность_Хеш", ХешДоверенности);
	
	ИндексТочки = СтрНайти(ИмяФайлаДоверенности, ".", НаправлениеПоиска.СКонца);
	Если ИндексТочки = 0 Тогда 
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", ИмяФайлаДоверенности);
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", );
	Иначе
		ПараметрыВыгрузки.Вставить("Доверенность_БезРасширения", Лев(ИмяФайлаДоверенности, ИндексТочки - 1));
		ПараметрыВыгрузки.Вставить("Доверенность_Расширение", Сред(ИмяФайлаДоверенности, ИндексТочки + 1));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	ДополнитьПараметрыВыгрузки(ПараметрыВыгрузки);
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки);
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
	Если ПараметрыВыгрузки.ЕстьПриложения Тогда 
		Узел_response = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "response");
		Узел_data = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_response, "data");
		Узел_service_request = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_data, "service_request");
		Узел_attached_documents = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_service_request, "attached_documents");
		Узел_attached_document = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_attached_documents, "attached_document");
		
		Для Каждого Стр Из _Приложения.ПолучитьЭлементы() Цикл 
			НовыйУзел_attached_document = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_attached_document);
			
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "number", Стр.Номер);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "name", Стр.Название);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "comment", Стр.Комментарий);
			РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_attached_document, "date", Формат(Стр.Дата, "ДФ='yyyy-MM-dd HH:mm:ss'; ДП=' '"));
			
			Узел_documents_attachments_files = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(НовыйУзел_attached_document, "documents_attachments_files");
			Узел_documents_attachments_file = РегламентированнаяОтчетность.ПолучитьПодчиненныйЭлемент(Узел_documents_attachments_files, "documents_attachments_file");
			Для Каждого СтрФайл Из Стр.ПолучитьЭлементы() Цикл
				НовыйУзел_documents_attachments_file = РегламентированнаяОтчетность.НовыйУзелИзПрототипа(Узел_documents_attachments_file);
				
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "uuid", Строка(Новый УникальныйИдентификатор));
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "gost", СтрФайл.Комментарий);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "name", СтрФайл.ОписаниеДокумента);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "file_name", СтрФайл.ОписаниеДокумента);
				РегламентированнаяОтчетность.УстановитьЗначениеЭлемента(НовыйУзел_documents_attachments_file, "extension", СтрФайл.Название);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(Узел_documents_attachments_file);
		КонецЦикла;
		РегламентированнаяОтчетность.УдалитьУзел(Узел_attached_document);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если СтрНачинаетсяС(Узел.Код, ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти) Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие, "", Узел) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда 
				НомСтр = 1;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ + Формат(НомСтр, "ЧГ=")) Цикл
					Если Не ЗначениеЗаполнено(ПараметрыВыгрузки[Стр.Ключ + Формат(НомСтр, "ЧГ=")]) Тогда 
						НомСтр = НомСтр + 1;
						Продолжить;
					КонецЕсли;
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
			Иначе
				Если ЗначениеЗаполнено(Стр.ЗначениеПоУмолчанию) Тогда
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
				КонецЕсли;
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = "2tp_waste"
				+ ".xml";
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	
	СтрокаСведений = "ОКВЭД2, ОКАТО, ОКПО, ОГРН, ТипНП, ДатаРегистрации, ИННЮЛ, КППЮЛ, НаимЮЛПол, АдрЮР, АдрФакт, АдрПочт, ";
	СтрокаСведений = СтрокаСведений + "ОргИндекс, ОргСубъект, ОргРайон, ОргГород, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ";
	СтрокаСведений = СтрокаСведений + "БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка, ";
	СтрокаСведений = СтрокаСведений + "ТелОрганизации, ФаксОрганизации, ЭлектроннаяПочта, ФИОРук, ТелРук, ФИОБух, ТелБух";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "RPT_2TP_WASTE_FACT_SECTION_");
	
	Для Каждого КЗ Из ТабДокумент Цикл 
		Если Не ПараметрыВыгрузки.Свойство(КЗ.Ключ) Тогда 
			ПараметрыВыгрузки.Вставить(КЗ.Ключ, КЗ.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыгрузкиПакета", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыгрузкиПакета(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета';
																|en = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект, Новый Структура("Период", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьТаблицуВариантовЗаполнения(Форма, ПолныйРучнойВвод = Ложь)
	
	мДеревоСтраницОтчета = Форма.мДеревоСтраницОтчета;
	ИмяСтраницы = мДеревоСтраницОтчета.ПолучитьЭлементы()[0].ИмяСтраницы;
	
	// Всегда получим актуальную таблицу заполнения. Не эталонную.
	ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницы);
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолныйРучнойВвод Тогда
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			Если Строка.ВариантЗаполнения = 4 Тогда
				Строка.ВариантЗаполнения = 0; // полный ручной ввод
			КонецЕсли;
		КонецЦикла;
		
		Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	ИначеЕсли ПолныйРучнойВвод Тогда
		
		// Все в эталонном виде
		Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
			Если Стр.ВариантЗаполнения = 0 Тогда
				Стр.ВариантЗаполнения = 4
			КонецЕсли;
		КонецЦикла;
		
		Форма.УстановитьЦветФонаЯчейкиНаСервере(,,Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 
	
	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.Представление            = "Сведения о производстве, отгрузке продукции и балансе производственных мощностей";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели) Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтотОбъект, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели) Экспорт
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяЯчейки <> Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            = Строка.КодПоказателя;
			ВариантЗаполнения        = Строка.ВариантЗаполнения;
			Комментарий              = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
				
				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ПолеТабличногоДокументаФормаОтчета.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ПолеТабличногоДокументаФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 5;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела = "") Экспорт
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ ПустаяСтрока(НаимРаздела) И НаимРаздела <> СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);
		
		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число",
						Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число",
							Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность, ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "РПН");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ПолеТабличногоДокументаФормаОтчета.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопокПрисоединенныеФайлы()
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Ложь;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Ложь;
	Иначе
		Элементы.ПриложенияКОтчетуУдалить.Доступность = Истина;
		Элементы.ПриложенияКОтчетуДобавитьФайл.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньГруппировки(ТекущиеДанные)
	Возврат ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, 0, 1 + УровеньГруппировки(ТекущиеДанные.ПолучитьРодителя()));
КонецФункции

&НаКлиенте
Процедура ДобавитьДокумент(Команда)
	ПараметрыВводаРеквизитов = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Истина, Ложь, Неопределено);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
	
	ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыВводаРеквизитов, ЭтотОбъект);
	ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВводаРеквизитовДокумента.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Добавление Тогда 
			ЗаполнитьЗначенияСвойств(_Приложения.ПолучитьЭлементы().Добавить(), Результат);
		ИначеЕсли ДополнительныеПараметры.Редактирование Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПараметры.ТекущиеДанные, Результат);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если УровеньГруппировки(ТекущиеДанные) = 1 Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Или Модифицированность Тогда 
		ТекстВопроса = "Перед добавлением приложения необходимо сохранить отчет. Продолжить?";
		ОО = Новый ОписаниеОповещения("ВопросФайлЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ПоказатьВопрос(ОО, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		ВопросФайлЗавершение(КодВозвратаДиалога.Да, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросФайлЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Модифицированность Или Не ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
			ОО = Новый ОписаниеОповещения("ПослеСохраненияФайлЗавершениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			СохранитьНаКлиенте(, ОО);
		Иначе
			ПослеСохраненияФайлЗавершениеЗавершение(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайлЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АдресФайла  = "";
	ВыбИмяФайла = "";
	ОО = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Попытка
		НачатьПомещениеФайла(ОО, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаНРЕГ = НРег(ВыбИмяФайла);
	Если Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpeg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpg")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".jpe")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".png")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".pdf")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tif")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".tiff")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".doc")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".docm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xls")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsx")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".xlsm")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".7z")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".zip")
		И Не СтрЗаканчиваетсяНа(ИмяФайлаНРЕГ, ".rar") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю("Файл должен иметь одно из расширений: .jpeg, .jpg, .jpe, .png, .pdf, "
			+ ".tif, .tiff, .doc, .docx, .docm, .xls, .xlsx, .xlsm, .7z, .zip, .rar");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СтрокаПоиска", ВыбИмяФайла);
	ДополнительныеПараметры.Вставить("АдресФайла", АдресФайла);
	ОО = Новый ОписаниеОповещения("ПодписатьФайлГОСТ2012Завершение", ЭтотОбъект, ДополнительныеПараметры);
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(СтруктураРеквизитовФормы.Организация);
	КриптографияЭДКОКлиент.ХешироватьДанные(ОО, МестоХраненияКлюча, АдресФайла,, Истина,, "GOST R 34.10-2012-256", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлГОСТ2012Завершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") и Результат.Свойство("Хеш") Тогда 
		НовСтрКомментарий = НРег(Результат.Хеш);
	Иначе
		НовСтрКомментарий = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовСтрКомментарий) Тогда 
		Возврат;
	КонецЕсли;
	НовСтр = ДополнительныеПараметры.ТекущиеДанные.ПолучитьЭлементы().Добавить();
	НовСтр.Комментарий = НовСтрКомментарий;
	
	Каталог = "";
	СтрокаПоиска = ДополнительныеПараметры.СтрокаПоиска;
	АдресФайла = ДополнительныеПараметры.АдресФайла;

	РазделительПути = ПолучитьРазделительПути();
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = РазделительПути Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ДополнительныеПараметры.СтрокаПоиска, Каталог, НовСтр.ПолучитьИдентификатор());
		Элементы.ПриложенияКОтчету.Развернуть(ДополнительныеПараметры.ТекущиеДанные.ПолучитьИдентификатор());
		ДоступностьКнопокПрисоединенныеФайлы();
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1';
									 |en = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхПриложения(АдресФайла, ПолноеИмяФайла, Каталог, НовСтр) Экспорт 
	НовСтрСтр = _Приложения.НайтиПоИдентификатору(НовСтр);
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	ИмяФайла = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ИмяБезРасширения = Лев(ИмяФайла, СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца) - 1);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов", СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", ""));
	ПараметрыФайла.Вставить("ВремяИзменения", Неопределено);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	ПараметрыФайла.Вставить("Служебный", Истина);
	ПрисоединенныйФайл = МодульРаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , "Файл создан автоматически из формы уведомления, редактирование запрещено.");
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	НовСтрСтр.ПрисоединенныйФайл = ПрисоединенныйФайл;
	НовСтрСтр.ОписаниеДокумента = ИмяФайла;
	НовСтрСтр.Название = СтрЗаменить(ИмяФайла, ИмяБезРасширения + ".", "");
	Сохранить(,,,,ПоказателиОтчета);
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	ТекущиеДанные = Элементы.ПриложенияКОтчету.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	УдалитьПрисоединенныйФайл(ТекущиеДанные.ПолучитьИдентификатор());
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныйФайл(ИдВДереве)
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ИдВДереве);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПравоДоступаУдаление = ПравоДоступа("Удаление", Метаданные.Справочники.РегламентированныйОтчетПрисоединенныеФайлы);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		Для Каждого Стр Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ПрисоединенныйФайлОбъект = Стр.ПрисоединенныйФайл.ПолучитьОбъект();
			Если ПравоДоступаУдаление Тогда 
				ПрисоединенныйФайлОбъект.Удалить();
			Иначе
				ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		_Приложения.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Иначе
		ПрисоединенныйФайлОбъект = ТекущиеДанные.ПрисоединенныйФайл.ПолучитьОбъект();
		Если ПравоДоступаУдаление Тогда 
			ПрисоединенныйФайлОбъект.Удалить();
		Иначе
			ПрисоединенныйФайлОбъект.ПометкаУдаления = Истина;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура;
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	Сохранить(,,,,ПоказателиОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = _Приложения.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если УровеньГруппировки(ТекущиеДанные) = 0 Тогда
		ПараметрыВводаРеквизитов = Новый Структура("Добавление, Редактирование, ТекущиеДанные", Ложь, Истина, ТекущиеДанные);
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Номер", ТекущиеДанные.Номер);
		ПараметрыОткрытияФормы.Вставить("Название", ТекущиеДанные.Название);
		ПараметрыОткрытияФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
		ПараметрыОткрытияФормы.Вставить("Дата", ТекущиеДанные.Дата);
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьДокументЗавершение", ЭтотОбъект, ПараметрыВводаРеквизитов);
		
		ФормаВводаРеквизитовДокумента = ПолучитьФорму("ОбщаяФорма.ФормаВводаРеквизитовДокументаРПН", ПараметрыОткрытияФормы, ЭтотОбъект);
		ФормаВводаРеквизитовДокумента.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВводаРеквизитовДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаРеквизитовДокумента.Открыть();
	Иначе
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла(ТекущиеДанные.ПрисоединенныйФайл), Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияКОтчетуПриАктивизацииСтроки(Элемент)
	ДоступностьКнопокПрисоединенныеФайлы();
КонецПроцедуры
