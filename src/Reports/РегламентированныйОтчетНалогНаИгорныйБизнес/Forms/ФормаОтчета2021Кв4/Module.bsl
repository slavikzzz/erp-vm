
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/10/2021";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтаФорма);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
	Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("КС_АдресФормул");
	СтруктураРеквизитовФормы.Вставить("КС_АдресПоказателей");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьЗначенияПоУмолчанию Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		// Установка в разделе 1 значений кода по ОКТМО и КБК.
		//
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			
			СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
			РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
			СтруктураПараметров);
			
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
			
		КонецЕсли;
		
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		ДеревоРаздела1.Строки[0].Данные.Вставить("П000010001003", "18210605000021000110");
		ДеревоРаздела1.Строки[0].Данные.Вставить("П000010002003", ОргОКТМО);
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела1, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	ТабличныйДокумент.Области.ПоМесту.Значение = "610";
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения", СтруктураРеквизитовФормы.Организация, ДатаПодписи);
	Если РегламентированнаяОтчетность.ОрганизацияЯвляетсяКрупнейшимНалогоплательщиком(СтруктураПараметров) Тогда
		ТабличныйДокумент.Области.ПоМесту.Значение = "213";
	ИначеЕсли РегламентированнаяОтчетность.ГоловнаяОрганизация(СтруктураРеквизитовФормы.Организация)
		<> СтруктураРеквизитовФормы.Организация Тогда
		ТабличныйДокумент.Области.ПоМесту.Значение = "220";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел22", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел31", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
			ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Разделы 2, 2.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел22";
	СтрокаУровня1.Представление      = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел3";
	СтрокаУровня1.Представление      = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел31";
	СтрокаУровня1.Представление      = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2021Кв4");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(ТДО.КодФормыРеорганизации.Значение);
	
	ЗаполненПризнакПоследнегоНалоговогоПериода = ЗначениеЗаполнено(ТДО.ПризнакПоследнегоНалоговогоПериода.Значение);
	
	КодПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = ?(ЗаполненПризнакПоследнегоНалоговогоПериода, "50", КодПериода + 70);
	КонецЕсли;
	
	ТДО.Период.Значение = Формат(КодПериода, "ЧЦ=2;ЧВН=");
	
	ТДО.ОтчетГод.Значение = Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц   = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																							|en = '%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ) Тогда
				СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ, Неопределено);
			КонецЕсли;
			РегламентированнаяОтчетность.ПоместитьВКэш(ЭлементСтруктуры.Значение, УникальныйИдентификатор,
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки =
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь,
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли Область.Имя = "ПризнакПоследнегоНалоговогоПериода" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
		Модифицированность = Истина;
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010002003" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
									|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли ИмяПоказателя = "П000010001003" Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
									|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" ИЛИ ИмяРаздела = "Раздел22" Тогда
		ПроверитьСтавкуНалогаНаВхождениеВДопустимыйИнтервал(Область);
	КонецЕсли;
	
	Если ИмяПоказателя = "П000220001003" ИЛИ ИмяПоказателя = "П000310001003" Тогда
		
		КолИгровыхПолей = ТабличныйДокумент.Область(ИмяПоказателя).Значение;
		
		Если КолИгровыхПолей > 0 Тогда
			
			НомерСтраницыРаздел22Раздел31НайденнойПоЗначениюВСтроке010
			= НомерСтраницыРаздел22Раздел31НайденнойПоЗначениюВСтроке010(КолИгровыхПолей);
			
			Если ЗначениеЗаполнено(НомерСтраницыРаздел22Раздел31НайденнойПоЗначениюВСтроке010) Тогда
				Область.Очистить();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru = 'Количество игровых полей %1 уже задано на странице %2. Значение в строке 010 очищено';
				|en = 'Количество игровых полей %1 уже задано на странице %2. Значение в строке 010 очищено'"),
				Формат(КолИгровыхПолей, "ЧГ="), НомерСтраницыРаздел22Раздел31НайденнойПоЗначениюВСтроке010);
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("КолИгровыхПолей", ТабличныйДокумент.Область(ИмяПоказателя).Значение);
		СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьЭлементы()[0].КолонкаРазделыОтчета
			= ПредставлениеСтраницы_Раздел22_Раздел31(СтруктПарам);
		Иначе
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел22_Раздел31(СтруктПарам);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна "
			+ ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		Если ИмяПоказателя = "П000220001003" Тогда
			
			СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
			СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ИмяРаздела);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
			
		Иначе
			РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтавкуНалогаНаВхождениеВДопустимыйИнтервал(Область)
	
	СтавкаМинимальная  = Неопределено;
	СтавкаМаксимальная = Неопределено;
	Если Область.Имя = "П000020008003" Тогда
		СтавкаМинимальная  = 3000;
		СтавкаМаксимальная = 15000;
	ИначеЕсли Область.Имя = "П000020009003" ИЛИ Область.Имя = "П000020010003" Тогда
		СтавкаМинимальная  = 50000;
		СтавкаМаксимальная = 250000;
	ИначеЕсли Область.Имя = "П000020011003" ИЛИ Область.Имя = "П000020012003" Тогда
		СтавкаМинимальная  = 10000;
		СтавкаМаксимальная = 14000;
	ИначеЕсли Область.Имя = "П000020013003" Тогда
		СтавкаМинимальная  = 2500000;
		СтавкаМаксимальная = 3000000;
	ИначеЕсли Область.Имя = "П000020014003" Тогда
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20250101' Тогда
			СтавкаМинимальная  = 9500000;
			СтавкаМаксимальная = 10000000;
		Иначе
			СтавкаМинимальная  = 2500000;
			СтавкаМаксимальная = 3000000;
		КонецЕсли;
	ИначеЕсли Область.Имя = "П000220002003" Тогда
		СтавкаМинимальная  = 50000;
		СтавкаМаксимальная = 250000;
	КонецЕсли;
	
	Если Область.Значение <> 0 И ЗначениеЗаполнено(СтавкаМинимальная) И ЗначениеЗаполнено(СтавкаМаксимальная)
		И (Область.Значение < СтавкаМинимальная ИЛИ Область.Значение > СтавкаМаксимальная) Тогда
		Область.Очистить();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Значение ставки налога в строке %1 должно быть в интервале от %2 до %3. Значение очищено';
		|en = 'Значение ставки налога в строке %1 должно быть в интервале от %2 до %3. Значение очищено'"),
		Сред(Область.Имя, 9, 3), СтавкаМинимальная, СтавкаМаксимальная);
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НомерСтраницыРаздел22Раздел31НайденнойПоЗначениюВСтроке010(КолИгровыхПолей)
	
	Если КолИгровыхПолей > 0 Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + СтруктураРеквизитовФормы.НаимТекущегоРаздела]);
		
		ИмяПоказателя = ?(СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22", "П000220001003", "П000310001003");
		
		Для Инд = 0 По ДеревоДанных.Строки.Количество() - 1 Цикл
			ОбрИнд = ДеревоДанных.Строки.Количество() - 1 - Инд;
			ДанныеСтраницы = ДеревоДанных.Строки[ОбрИнд].Данные;
			Если (ОбрИнд + 1 <> СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0])
				И (КолИгровыхПолей = ДанныеСтраницы[ИмяПоказателя]) Тогда
				Возврат Формат(ОбрИнд + 1, "ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
								|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
		|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ИзменитьОКТМОЗаполнитьСведенияОПодписантах(РезультатВыбора.Ссылка);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОКТМОЗаполнитьСведенияОПодписантах(СсылкаНаРегистрациюВНО)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	Ветка = ДеревоРаздела.Строки[0];
	Ветка.Данные.Вставить("П000010002003", СокрЛП(СсылкаНаРегистрациюВНО.КодПоОКТМО));
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = ТДО.НаимОрг;
		ОблКодФормыРеорг = ТДО.КодФормыРеорганизации;
		ОблКодИННРеорг   = ТДО.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = ТДО.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(ТДО.ПоМесту.Значение);
		
		РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
		
		ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
		
		Если ЗначениеЗаполнено(ЗначКодФормыРеорг) И ЗначКодФормыРеорг <> "0" Тогда
			
			Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
			ТДО.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначКодФормыРеорг) Тогда
			
			ТДО["ПризнакПоследнегоНалоговогоПериода"].Значение = "";
			
		КонецЕсли;
		
		ТДО["СекцияПризнакПоследнегоНалоговогоПериода"].Видимость = ЗначениеЗаполнено(ЗначКодФормыРеорг);
		
		ТДО["СекцияПояснение"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	Иначе
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
		Если ИмяРаздела = "Раздел22" Тогда
			
			КоличествоИгровыхПолей = Форма.ТабличныйДокумент.Область("П000220001003").Значение;
			
			Если КоличествоИгровыхПолей = 1 Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220007003"]);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220008003"]);
				Инд = АвтоРасчПоказатели.Найти("П000220007003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
				Инд = АвтоРасчПоказатели.Найти("П000220008003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			ИначеЕсли КоличествоИгровыхПолей > 1 Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220005003"]);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220006003"]);
				Инд = АвтоРасчПоказатели.Найти("П000220005003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
				Инд = АвтоРасчПоказатели.Найти("П000220006003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220005003"]);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220006003"]);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220007003"]);
				ЗапретитьВводДанныхВОбласть(Форма, ТДО["П000220008003"]);
				Инд = АвтоРасчПоказатели.Найти("П000220005003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
				Инд = АвтоРасчПоказатели.Найти("П000220006003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
				Инд = АвтоРасчПоказатели.Найти("П000220007003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
				Инд = АвтоРасчПоказатели.Найти("П000220008003");
				Если Инд <> Неопределено Тогда
					АвтоРасчПоказатели.Удалить(Инд);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРазделаИВыполнитьПолныйРасчет(НаимРаздела, ВеткаРаздела = Неопределено)
	
	СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела);
	
	Если Модифицированность Тогда
		
		РасчетНаСервере();
		
		ОблУдалитьСтраницуЗначокТекст = Неопределено;
		ОблУдалитьСтраницуЗначокГиперссылка = Неопределено;
		ОблУдалитьСтраницуТекст = Неопределено;
		ОблУдалитьСтраницуГиперссылка = Неопределено;
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено Тогда
			ОблУдалитьСтраницуЗначокТекст = ОблУдалитьСтраницуЗначок.Текст;
			ОблУдалитьСтраницуЗначокГиперссылка = ОблУдалитьСтраницуЗначок.Гиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено Тогда
			ОблУдалитьСтраницуТекст = ОблУдалитьСтраницу.Текст;
			ОблУдалитьСтраницуГиперссылка = ОблУдалитьСтраницу.Гиперссылка;
		КонецЕсли;
		
		ВывестиДанныеВТабличныйДокумент(НаимРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
		ОблУдалитьСтраницуЗначок = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если ОблУдалитьСтраницуЗначок <> Неопределено
			И ОблУдалитьСтраницуЗначокТекст <> Неопределено
			И ОблУдалитьСтраницуЗначокГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницуЗначок.Текст = ОблУдалитьСтраницуЗначокТекст;
			ОблУдалитьСтраницуЗначок.Гиперссылка = ОблУдалитьСтраницуЗначокГиперссылка;
		КонецЕсли;
		ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
		Если ОблУдалитьСтраницу <> Неопределено
			И ОблУдалитьСтраницуТекст <> Неопределено
			И ОблУдалитьСтраницуГиперссылка <> Неопределено Тогда
			ОблУдалитьСтраницу.Текст = ОблУдалитьСтраницуТекст;
			ОблУдалитьСтраницу.Гиперссылка = ОблУдалитьСтраницуГиперссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел22" ИЛИ ИмяРаздела = "Раздел31" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоРаздела, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел22" ИЛИ ИмяРаздела = "Раздел31" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанных, УникальныйИдентификатор,
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		
		Модифицированность = Истина;
		
		СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
		СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела';
								|en = 'Не выбрана удаляемая строка многострочного раздела'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	Модифицированность = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Строки 080-140 по графе 4.
				//
				ТДО["П000020008004"].Значение = Окр(ТДО["П000020008003"].Значение * ТДО["П000020003004"].Значение
				+ (ТДО["П000020008003"].Значение / 2) * ТДО["П000020004004"].Значение);
				
				ТДО["П000020009004"].Значение = Окр(ТДО["П000020009003"].Значение * ТДО["П000020003005"].Значение
				+ (ТДО["П000020009003"].Значение / 2) * ТДО["П000020004005"].Значение);
				
				ТДО["П000020010004"].Значение = Окр(ТДО["П000020010003"].Значение * ТДО["П000020003006"].Значение
				+ (ТДО["П000020010003"].Значение / 2) * ТДО["П000020004006"].Значение);
				
				ТДО["П000020011004"].Значение = Окр(ТДО["П000020011003"].Значение * ТДО["П000020003007"].Значение
				+ (ТДО["П000020011003"].Значение / 2) * ТДО["П000020004007"].Значение);
				
				ТДО["П000020012004"].Значение = Окр(ТДО["П000020012003"].Значение * ТДО["П000020003008"].Значение
				+ (ТДО["П000020012003"].Значение / 2) * ТДО["П000020004008"].Значение);
				
				ТДО["П000020013004"].Значение = Окр(ТДО["П000020013003"].Значение * ТДО["П000020003009"].Значение
				+ (ТДО["П000020013003"].Значение / 2) * ТДО["П000020004009"].Значение);
				
				ТДО["П000020014004"].Значение = Окр(ТДО["П000020014003"].Значение * ТДО["П000020003010"].Значение
				+ (ТДО["П000020014003"].Значение / 2) * ТДО["П000020004010"].Значение);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				КоличествоИгровыхПолей = ТДО["П000220001003"].Значение;
				
				ТДО["П000220003003"].Значение = ТДО["П000220002003"].Значение * КоличествоИгровыхПолей;
				
				Если КоличествоИгровыхПолей = 1 Тогда
					
					ТДО["П000220009003"].Значение = Окр(ТДО["П000220005003"].Значение * ТДО["П000220002003"].Значение
					+ ТДО["П000220006003"].Значение * (ТДО["П000220002003"].Значение / 2));
					
				ИначеЕсли КоличествоИгровыхПолей > 1 Тогда
					
					ТДО["П000220009003"].Значение = Окр(ТДО["П000220007003"].Значение * ТДО["П000220003003"].Значение
					+ ТДО["П000220008003"].Значение * (ТДО["П000220003003"].Значение / 2));
					
				Иначе
					
					ТДО["П000220009003"].Значение = 0;
					
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ТДО["П000030006003"].Значение = Макс(0, ТДО["П000030001003"].Значение + ТДО["П000030002003"].Значение
				- ТДО["П000030003003"].Значение + ТДО["П000030004003"].Значение - ТДО["П000030005003"].Значение);
				
				ТДО["П000030006004"].Значение = Макс(0, ТДО["П000030001004"].Значение + ТДО["П000030002004"].Значение
				- ТДО["П000030003004"].Значение + ТДО["П000030004004"].Значение - ТДО["П000030005004"].Значение);
				
				ТДО["П000030006005"].Значение = Макс(0, ТДО["П000030001005"].Значение + ТДО["П000030002005"].Значение
				- ТДО["П000030003005"].Значение + ТДО["П000030004005"].Значение - ТДО["П000030005005"].Значение);
				
				ТДО["П000030006006"].Значение = Макс(0, ТДО["П000030001006"].Значение + ТДО["П000030002006"].Значение
				- ТДО["П000030003006"].Значение + ТДО["П000030004006"].Значение - ТДО["П000030005006"].Значение);
				
				ТДО["П000030006007"].Значение = Макс(0, ТДО["П000030001007"].Значение + ТДО["П000030002007"].Значение
				- ТДО["П000030003007"].Значение + ТДО["П000030004007"].Значение - ТДО["П000030005007"].Значение);
				
				ТДО["П000030006008"].Значение = Макс(0, ТДО["П000030001008"].Значение + ТДО["П000030002008"].Значение
				- ТДО["П000030003008"].Значение + ТДО["П000030004008"].Значение - ТДО["П000030005008"].Значение);
				
				ТДО["П000030006009"].Значение = Макс(0, ТДО["П000030001009"].Значение + ТДО["П000030002009"].Значение
				- ТДО["П000030003009"].Значение + ТДО["П000030004009"].Значение - ТДО["П000030005009"].Значение);
				
				ТДО["П000030006010"].Значение = Макс(0, ТДО["П000030001010"].Значение + ТДО["П000030002010"].Значение
				- ТДО["П000030003010"].Значение + ТДО["П000030004010"].Значение - ТДО["П000030005010"].Значение);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				ТДО["П000310007003"].Значение = Макс(0, ТДО["П000310002003"].Значение + ТДО["П000310003003"].Значение
				- ТДО["П000310004003"].Значение + ТДО["П000310005003"].Значение - ТДО["П000310006003"].Значение);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		Ветка = ДеревоДанных.Строки[0];
		
		// Поставка данных из раздела 2.
		//
		ДеревоДанных2
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		Ветка2 = ДеревоДанных2.Строки[0];
		
		Ветка.Данные.Вставить("П000010003003", Ветка2.Данные["П000020007004"] + Ветка2.Данные["П000020008004"]
		+ Ветка2.Данные["П000020009004"] + Ветка2.Данные["П000020010004"] + Ветка2.Данные["П000020011004"]
		+ Ветка2.Данные["П000020012004"] + Ветка2.Данные["П000020013004"] + Ветка2.Данные["П000020014004"]);
		
	ИначеЕсли ИмяРаздела = "Раздел2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Ветка = ДеревоДанных.Строки[0];
		
		// Поставка данных из раздела 2.2 по условию.
		//
		ДеревоДанных22
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"]);
		// Строки 020-060 по графе 3.
		// Строка 070 по графе 4.
		Стр020Гр3 = 0;
		Стр030Гр3 = 0;
		Стр040Гр3 = 0;
		Стр050Гр3 = 0;
		Стр060Гр3 = 0;
		Стр070Гр4 = 0;
		Для каждого Ветка22 Из ДеревоДанных22.Строки Цикл
			КоличествоИгровыхПолей = Ветка22.Данные["П000220001003"];
			Если КоличествоИгровыхПолей > 0 Тогда
				Стр020Гр3 = Стр020Гр3 + Ветка22.Данные["П000220004003"];
				Стр030Гр3 = Стр030Гр3 + Ветка22.Данные["П000220005003"];
				Стр040Гр3 = Стр040Гр3 + Ветка22.Данные["П000220006003"];
				Стр050Гр3 = Стр050Гр3 + Ветка22.Данные["П000220007003"];
				Стр060Гр3 = Стр060Гр3 + Ветка22.Данные["П000220008003"];
				Стр070Гр4 = Стр070Гр4 + Ветка22.Данные["П000220009003"];
			КонецЕсли;
		КонецЦикла;
		Ветка.Данные.Вставить("П000020002003", Стр020Гр3);
		Ветка.Данные.Вставить("П000020003003", Стр030Гр3);
		Ветка.Данные.Вставить("П000020004003", Стр040Гр3);
		Ветка.Данные.Вставить("П000020005003", Стр050Гр3);
		Ветка.Данные.Вставить("П000020006003", Стр060Гр3);
		Ветка.Данные.Вставить("П000020007004", Стр070Гр4);
		
		// Поставка данных из раздела 3.
		//
		ДеревоДанных3
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
		Ветка3 = ДеревоДанных3.Строки[0];
		// Строка 020 по графам 4-10.
		Ветка.Данные.Вставить("П000020002004",
		Ветка3.Данные["П000030001004"] + Ветка3.Данные["П000030002004"] + Ветка3.Данные["П000030004004"]);
		Ветка.Данные.Вставить("П000020002005",
		Ветка3.Данные["П000030001005"] + Ветка3.Данные["П000030002005"] + Ветка3.Данные["П000030004005"]);
		Ветка.Данные.Вставить("П000020002006",
		Ветка3.Данные["П000030001006"] + Ветка3.Данные["П000030002006"] + Ветка3.Данные["П000030004006"]);
		Ветка.Данные.Вставить("П000020002007",
		Ветка3.Данные["П000030001007"] + Ветка3.Данные["П000030002007"] + Ветка3.Данные["П000030004007"]);
		Ветка.Данные.Вставить("П000020002008",
		Ветка3.Данные["П000030001008"] + Ветка3.Данные["П000030002008"] + Ветка3.Данные["П000030004008"]);
		Ветка.Данные.Вставить("П000020002009",
		Ветка3.Данные["П000030001009"] + Ветка3.Данные["П000030002009"] + Ветка3.Данные["П000030004009"]);
		Ветка.Данные.Вставить("П000020002010",
		Ветка3.Данные["П000030001010"] + Ветка3.Данные["П000030002010"] + Ветка3.Данные["П000030004010"]);
		// Строка 030 по графам 4-10.
		Ветка.Данные.Вставить("П000020003004", Макс(0,
		Ветка.Данные["П000020002004"] - (Ветка3.Данные["П000030004004"] + Ветка3.Данные["П000030005004"])));
		Ветка.Данные.Вставить("П000020003005", Макс(0,
		Ветка.Данные["П000020002005"] - (Ветка3.Данные["П000030004005"] + Ветка3.Данные["П000030005005"])));
		Ветка.Данные.Вставить("П000020003006", Макс(0,
		Ветка.Данные["П000020002006"] - (Ветка3.Данные["П000030004006"] + Ветка3.Данные["П000030005006"])));
		Ветка.Данные.Вставить("П000020003007", Макс(0,
		Ветка.Данные["П000020002007"] - (Ветка3.Данные["П000030004007"] + Ветка3.Данные["П000030005007"])));
		Ветка.Данные.Вставить("П000020003008", Макс(0,
		Ветка.Данные["П000020002008"] - (Ветка3.Данные["П000030004008"] + Ветка3.Данные["П000030005008"])));
		Ветка.Данные.Вставить("П000020003009", Макс(0,
		Ветка.Данные["П000020002009"] - (Ветка3.Данные["П000030004009"] + Ветка3.Данные["П000030005009"])));
		Ветка.Данные.Вставить("П000020003010", Макс(0,
		Ветка.Данные["П000020002010"] - (Ветка3.Данные["П000030004010"] + Ветка3.Данные["П000030005010"])));
		// Строка 040 по графам 4-10.
		Ветка.Данные.Вставить("П000020004004", Ветка3.Данные["П000030004004"] + Ветка3.Данные["П000030005004"]);
		Ветка.Данные.Вставить("П000020004005", Ветка3.Данные["П000030004005"] + Ветка3.Данные["П000030005005"]);
		Ветка.Данные.Вставить("П000020004006", Ветка3.Данные["П000030004006"] + Ветка3.Данные["П000030005006"]);
		Ветка.Данные.Вставить("П000020004007", Ветка3.Данные["П000030004007"] + Ветка3.Данные["П000030005007"]);
		Ветка.Данные.Вставить("П000020004008", Ветка3.Данные["П000030004008"] + Ветка3.Данные["П000030005008"]);
		Ветка.Данные.Вставить("П000020004009", Ветка3.Данные["П000030004009"] + Ветка3.Данные["П000030005009"]);
		Ветка.Данные.Вставить("П000020004010", Ветка3.Данные["П000030004010"] + Ветка3.Данные["П000030005010"]);
		
		// Строки 080-140 по графе 4.
		//
		Ветка.Данные.Вставить("П000020008004", Окр(Ветка.Данные["П000020008003"] * Ветка.Данные["П000020003004"]
		+ (Ветка.Данные["П000020008003"] / 2) * Ветка.Данные["П000020004004"]));
		Ветка.Данные.Вставить("П000020009004", Окр(Ветка.Данные["П000020009003"] * Ветка.Данные["П000020003005"]
		+ (Ветка.Данные["П000020009003"] / 2) * Ветка.Данные["П000020004005"]));
		Ветка.Данные.Вставить("П000020010004", Окр(Ветка.Данные["П000020010003"] * Ветка.Данные["П000020003006"]
		+ (Ветка.Данные["П000020010003"] / 2) * Ветка.Данные["П000020004006"]));
		Ветка.Данные.Вставить("П000020011004", Окр(Ветка.Данные["П000020011003"] * Ветка.Данные["П000020003007"]
		+ (Ветка.Данные["П000020011003"] / 2) * Ветка.Данные["П000020004007"]));
		Ветка.Данные.Вставить("П000020012004", Окр(Ветка.Данные["П000020012003"] * Ветка.Данные["П000020003008"]
		+ (Ветка.Данные["П000020012003"] / 2) * Ветка.Данные["П000020004008"]));
		Ветка.Данные.Вставить("П000020013004", Окр(Ветка.Данные["П000020013003"] * Ветка.Данные["П000020003009"]
		+ (Ветка.Данные["П000020013003"] / 2) * Ветка.Данные["П000020004009"]));
		Ветка.Данные.Вставить("П000020014004", Окр(Ветка.Данные["П000020014003"] * Ветка.Данные["П000020003010"]
		+ (Ветка.Данные["П000020014003"] / 2) * Ветка.Данные["П000020004010"]));
		
	ИначеЕсли ИмяРаздела = "Раздел22" Тогда
		
		ДеревоДанных
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			КоличествоИгровыхПолей = Ветка.Данные["П000220001003"];
			
			Ветка.Данные.Вставить("П000220003003", Ветка.Данные["П000220002003"] * КоличествоИгровыхПолей);
			
			Ветка.Данные.Вставить("П000220004003", 0);
			Ветка.Данные.Вставить("П000220005003", 0);
			Ветка.Данные.Вставить("П000220006003", 0);
			Ветка.Данные.Вставить("П000220007003", 0);
			Ветка.Данные.Вставить("П000220008003", 0);
			Ветка.Данные.Вставить("П000220009003", 0);
			
			// Поставка данных из раздела 3.1 по условию.
			//
			Если КоличествоИгровыхПолей > 0 Тогда
				ДеревоДанных31
				= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел31"]);
				Для каждого Ветка31 Из ДеревоДанных31.Строки Цикл
					Если Ветка31.Данные["П000310001003"] = КоличествоИгровыхПолей Тогда
						
						Ветка.Данные.Вставить("П000220004003",
						Ветка31.Данные["П000310002003"] + Ветка31.Данные["П000310003003"] + Ветка31.Данные["П000310005003"]);
						Если Ветка.Данные["П000220001003"] = 1 Тогда
							Ветка.Данные.Вставить("П000220005003", Макс(0,
							Ветка.Данные["П000220004003"] - (Ветка31.Данные["П000310005003"] + Ветка31.Данные["П000310006003"])));
							Ветка.Данные.Вставить("П000220006003", Ветка31.Данные["П000310005003"] + Ветка31.Данные["П000310006003"]);
						ИначеЕсли Ветка.Данные["П000220001003"] > 1 Тогда
							Ветка.Данные.Вставить("П000220007003", Макс(0,
							Ветка.Данные["П000220004003"] - (Ветка31.Данные["П000310005003"] + Ветка31.Данные["П000310006003"])));
							Ветка.Данные.Вставить("П000220008003", Ветка31.Данные["П000310005003"] + Ветка31.Данные["П000310006003"]);
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если КоличествоИгровыхПолей = 1 Тогда
				Ветка.Данные.Вставить("П000220009003", Окр(Ветка.Данные["П000220005003"] * Ветка.Данные["П000220002003"]
				+ Ветка.Данные["П000220006003"] * (Ветка.Данные["П000220002003"] / 2)));
			ИначеЕсли КоличествоИгровыхПолей > 1 Тогда
				Ветка.Данные.Вставить("П000220009003", Окр(Ветка.Данные["П000220007003"] * Ветка.Данные["П000220003003"]
				+ Ветка.Данные["П000220008003"] * (Ветка.Данные["П000220003003"] / 2)));
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Ветка = ДеревоДанных.Строки[0];
		
		// Поставка данных из раздела 3.1 по условию.
		//
		ДеревоДанных31
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел31"]);
		// Строки 010-050 по графе 3.
		Стр010Гр3 = 0;
		Стр020Гр3 = 0;
		Стр030Гр3 = 0;
		Стр040Гр3 = 0;
		Стр050Гр3 = 0;
		Для каждого Ветка31 Из ДеревоДанных31.Строки Цикл
			КоличествоИгровыхПолей = Ветка31.Данные["П000310001003"];
			Если КоличествоИгровыхПолей > 0 Тогда
				Стр010Гр3 = Стр010Гр3 + Ветка31.Данные["П000310002003"];
				Стр020Гр3 = Стр020Гр3 + Ветка31.Данные["П000310003003"];
				Стр030Гр3 = Стр030Гр3 + Ветка31.Данные["П000310004003"];
				Стр040Гр3 = Стр040Гр3 + Ветка31.Данные["П000310005003"];
				Стр050Гр3 = Стр050Гр3 + Ветка31.Данные["П000310006003"];
			КонецЕсли;
		КонецЦикла;
		Ветка.Данные.Вставить("П000030001003", Стр010Гр3);
		Ветка.Данные.Вставить("П000030002003", Стр020Гр3);
		Ветка.Данные.Вставить("П000030003003", Стр030Гр3);
		Ветка.Данные.Вставить("П000030004003", Стр040Гр3);
		Ветка.Данные.Вставить("П000030005003", Стр050Гр3);
		
		// Строка 060.
		//
		Ветка.Данные.Вставить("П000030006003", Макс(0, Ветка.Данные["П000030001003"] + Ветка.Данные["П000030002003"]
		- Ветка.Данные["П000030003003"] + Ветка.Данные["П000030004003"] - Ветка.Данные["П000030005003"]));
		Ветка.Данные.Вставить("П000030006004", Макс(0, Ветка.Данные["П000030001004"] + Ветка.Данные["П000030002004"]
		- Ветка.Данные["П000030003004"] + Ветка.Данные["П000030004004"] - Ветка.Данные["П000030005004"]));
		Ветка.Данные.Вставить("П000030006005", Макс(0, Ветка.Данные["П000030001005"] + Ветка.Данные["П000030002005"]
		- Ветка.Данные["П000030003005"] + Ветка.Данные["П000030004005"] - Ветка.Данные["П000030005005"]));
		Ветка.Данные.Вставить("П000030006006", Макс(0, Ветка.Данные["П000030001006"] + Ветка.Данные["П000030002006"]
		- Ветка.Данные["П000030003006"] + Ветка.Данные["П000030004006"] - Ветка.Данные["П000030005006"]));
		Ветка.Данные.Вставить("П000030006007", Макс(0, Ветка.Данные["П000030001007"] + Ветка.Данные["П000030002007"]
		- Ветка.Данные["П000030003007"] + Ветка.Данные["П000030004007"] - Ветка.Данные["П000030005007"]));
		Ветка.Данные.Вставить("П000030006008", Макс(0, Ветка.Данные["П000030001008"] + Ветка.Данные["П000030002008"]
		- Ветка.Данные["П000030003008"] + Ветка.Данные["П000030004008"] - Ветка.Данные["П000030005008"]));
		Ветка.Данные.Вставить("П000030006009", Макс(0, Ветка.Данные["П000030001009"] + Ветка.Данные["П000030002009"]
		- Ветка.Данные["П000030003009"] + Ветка.Данные["П000030004009"] - Ветка.Данные["П000030005009"]));
		Ветка.Данные.Вставить("П000030006010", Макс(0, Ветка.Данные["П000030001010"] + Ветка.Данные["П000030002010"]
		- Ветка.Данные["П000030003010"] + Ветка.Данные["П000030004010"] - Ветка.Данные["П000030005010"]));
		
	ИначеЕсли ИмяРаздела = "Раздел31" Тогда
		
		ДеревоДанных
		= ПолучитьИзВременногоХранилища(Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Ветка.Данные.Вставить("П000310007003", Макс(0, Ветка.Данные["П000310002003"] + Ветка.Данные["П000310003003"]
			- Ветка.Данные["П000310004003"] + Ветка.Данные["П000310005003"] - Ветка.Данные["П000310006003"]));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		РегламентированнаяОтчетностьВызовСервера.ПоместитьВКэш(ДеревоДанных, Форма.УникальныйИдентификатор,
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П000310007003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел31", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000030001003");
	Структ.Вставить("П000030002003");
	Структ.Вставить("П000030003003");
	Структ.Вставить("П000030004003");
	Структ.Вставить("П000030005003");
	Структ.Вставить("П000030006003");
	Структ.Вставить("П000030006004");
	Структ.Вставить("П000030006005");
	Структ.Вставить("П000030006006");
	Структ.Вставить("П000030006007");
	Структ.Вставить("П000030006008");
	Структ.Вставить("П000030006009");
	Структ.Вставить("П000030006010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел3", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000220003003");
	Структ.Вставить("П000220004003");
	Структ.Вставить("П000220005003");
	Структ.Вставить("П000220006003");
	Структ.Вставить("П000220007003");
	Структ.Вставить("П000220008003");
	Структ.Вставить("П000220009003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел22", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000020002003");
	Структ.Вставить("П000020002004");
	Структ.Вставить("П000020002005");
	Структ.Вставить("П000020002006");
	Структ.Вставить("П000020002007");
	Структ.Вставить("П000020002008");
	Структ.Вставить("П000020002009");
	Структ.Вставить("П000020002010");
	
	Структ.Вставить("П000020003003");
	Структ.Вставить("П000020003004");
	Структ.Вставить("П000020003005");
	Структ.Вставить("П000020003006");
	Структ.Вставить("П000020003007");
	Структ.Вставить("П000020003008");
	Структ.Вставить("П000020003009");
	Структ.Вставить("П000020003010");
	
	Структ.Вставить("П000020004003");
	Структ.Вставить("П000020004004");
	Структ.Вставить("П000020004005");
	Структ.Вставить("П000020004006");
	Структ.Вставить("П000020004007");
	Структ.Вставить("П000020004008");
	Структ.Вставить("П000020004009");
	Структ.Вставить("П000020004010");
	
	Структ.Вставить("П000020005003");
	Структ.Вставить("П000020006003");
	
	Структ.Вставить("П000020007004");
	Структ.Вставить("П000020008004");
	Структ.Вставить("П000020009004");
	Структ.Вставить("П000020010004");
	Структ.Вставить("П000020011004");
	Структ.Вставить("П000020012004");
	Структ.Вставить("П000020013004");
	Структ.Вставить("П000020014004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000010003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
										|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен';
										|en = 'Отчет ""%1"" не сохранен'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
									|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
									|en = 'Перед выгрузкой необходимо установить точность ""0""'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ИгБизНД");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_IGBISND"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПериода      = СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12",",", Ложь);
	ВозможныеКодыПериодаРеорг = СтрРазделить("50,71,72,73,74,75,76,77,78,79,80,81,82",",", Ложь);
	
	ВозможныеКодыПоМесту = ВозможныеЗначенияИзСпискаВыбораПоказателя("ПоМесту");
	
	ВозможныеКодыФормыРеорганизции = ВозможныеЗначенияИзСпискаВыбораПоказателя("КодФормыРеорганизации");
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
		СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
		СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.МассивЗначений.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Код места представления декларации должен принимать одно из значений: "
		+ ВозможныеКодыПоМесту.СтрокаЗначений, "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя налогоплательщика",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации)", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		Иначе
			Если ВозможныеКодыФормыРеорганизции.МассивЗначений.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Код формы реорганизации (ликвидации) может принимать одно из значений: "
				+ ВозможныеКодыФормыРеорганизции.СтрокаЗначений, "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	НомСтраницы = "1";
	Данные = ДеревоРаздела.Строки[0].Данные;
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел1") Тогда
		ДлинаЗначПок = СтрДлина(СокрЛП(Данные["П000010001003"]));
		Если ДлинаЗначПок <> 20 Тогда
			СообщитьВТС("В разделе 1 не" + ?(ДлинаЗначПок = 0, "", "верно")
			+ " задан код бюджетной классификации", "Раздел1", "П000010001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		ДлинаЗначПок = СтрДлина(СокрЛП(Данные["П000010002003"]));
		Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
			СообщитьВТС("В разделе 1 не" + ?(ДлинаЗначПок = 0, "", "верно")
			+ " задан код по ОКТМО", "Раздел1", "П000010002003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		СообщитьВТС("Не заполнен раздел 1", "Раздел1", "П000010001003", НомСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Таблица для проверки сочетаний значений строки 010 раздела 2.2 с разделом 3.1.
	СочетаниеРазделов = Новый ТаблицаЗначений;
	СочетаниеРазделов.Колонки.Добавить("КоличествоПолей");
	СочетаниеРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Страница", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("ИмяОбласти");
	СочетаниеРазделов.Колонки.Добавить("Счетчик22", Новый ОписаниеТипов("Число"));
	СочетаниеРазделов.Колонки.Добавить("Счетчик31",  Новый ОписаниеТипов("Число"));
	
	СочетаниеРазделов.Индексы.Добавить("Раздел");
	
	// Раздел 2.2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	Данные = ДеревоРаздела.Строки[0].Данные;
	Раздел22ДолженБытьЗаполнен
	  = Данные["П000020002003"] > 0 ИЛИ Данные["П000020003003"] > 0 ИЛИ Данные["П000020004003"] > 0
	ИЛИ Данные["П000020005003"] > 0 ИЛИ Данные["П000020006003"] > 0 ИЛИ Данные["П000020007004"] > 0;
	
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел22"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел22") Тогда
		
		Табл_КоличествоИгровыхПолей = Новый ТаблицаЗначений;
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("КоличествоПолей");
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("ИндексСтраницы");
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("СчетчикСтраниц");
		
		НомераСтраниц_НеуникальноеКоличествоИгровыхПолей = Новый СписокЗначений;
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			КоличествоИгровыхПолей = Ветка.Данные["П000220001003"];
			
			Если ЗаполненаСтраницаРаздела(Ветка, "Раздел22") И КоличествоИгровыхПолей = 0 Тогда
				
				СообщитьВТС("Раздел 2.2 -> Страница " + НомСтраницы
				+ ": не задано количество имеющихся игровых полей на игровом столе", "Раздел22", "П000220001003", НомСтраницы);
				СтатусПроверки = Ложь;
				
			ИначеЕсли КоличествоИгровыхПолей > 0 Тогда
				
				НоваяСтрокаТабл_КоличествоИгровыхПолей = Табл_КоличествоИгровыхПолей.Добавить();
				НоваяСтрокаТабл_КоличествоИгровыхПолей.КоличествоПолей = КоличествоИгровыхПолей;
				НоваяСтрокаТабл_КоличествоИгровыхПолей.ИндексСтраницы = ДеревоРаздела.Строки.Индекс(Ветка);
				НоваяСтрокаТабл_КоличествоИгровыхПолей.СчетчикСтраниц = 1;
				
				Сочетание = СочетаниеРазделов.Добавить();
				Сочетание.КоличествоПолей = КоличествоИгровыхПолей;
				Сочетание.Раздел = 22;
				Сочетание.Страница = ДеревоРаздела.Строки.Индекс(Ветка) + 1;
				Сочетание.ИмяОбласти = "П000220001003";
				Сочетание.Счетчик22 = 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Табл_КолИгрПолей = Табл_КоличествоИгровыхПолей.Скопировать();
		Табл_КолИгрПолей.Свернуть("КоличествоПолей", "СчетчикСтраниц");
		
		Если Табл_КоличествоИгровыхПолей.Количество() <> Табл_КолИгрПолей.Количество() Тогда
			Для каждого СтрокаТабл_КолИгрПолей Из Табл_КолИгрПолей Цикл
				Если СтрокаТабл_КолИгрПолей.СчетчикСтраниц > 1 Тогда
					СтрокиТабл_КоличествоИгровыхПолей = Табл_КоличествоИгровыхПолей.НайтиСтроки(
					Новый Структура("КоличествоПолей", СтрокаТабл_КолИгрПолей.КоличествоПолей));
					Для каждого СтрокаТабл_КоличествоИгровыхПолей Из СтрокиТабл_КоличествоИгровыхПолей Цикл
						НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.Добавить(СтрокаТабл_КоличествоИгровыхПолей.ИндексСтраницы + 1);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.Количество() > 0 Тогда
			НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.СортироватьПоЗначению();
			СообщитьВТС("В разделе 2.2 заданы неуникальные значения в строке 010 на страницах "
			+ СтрСоединить(НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.ВыгрузитьЗначения(), ", "), "Раздел22",
			"П000220001003", Формат(НомераСтраниц_НеуникальноеКоличествоИгровыхПолей[0].Значение, "ЧГ="));
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	ИначеЕсли Раздел22ДолженБытьЗаполнен Тогда
		
		СообщитьВТС("Не заполнен раздел 2.2", "Раздел22", "П000220001003", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Раздел 3.1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	Данные = ДеревоРаздела.Строки[0].Данные;
	Раздел31ДолженБытьЗаполнен
	  = Данные["П000030001003"] > 0 ИЛИ Данные["П000030002003"] > 0 ИЛИ Данные["П000030003003"] > 0
	ИЛИ Данные["П000030004003"] > 0 ИЛИ Данные["П000030005003"] > 0 ИЛИ Данные["П000030006003"] > 0;
	
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел31"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел31") Тогда
		
		Табл_КоличествоИгровыхПолей = Новый ТаблицаЗначений;
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("КоличествоПолей");
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("ИндексСтраницы");
		Табл_КоличествоИгровыхПолей.Колонки.Добавить("СчетчикСтраниц");
		
		НомераСтраниц_НеуникальноеКоличествоИгровыхПолей = Новый СписокЗначений;
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			КоличествоИгровыхПолей = Ветка.Данные["П000310001003"];
			
			Если ЗаполненаСтраницаРаздела(Ветка, "Раздел31") И КоличествоИгровыхПолей = 0 Тогда
				
				СообщитьВТС("Раздел 3.1 -> Страница " + НомСтраницы
				+ ": не задано количество имеющихся игровых полей на игровом столе", "Раздел31", "П000310001003", НомСтраницы);
				СтатусПроверки = Ложь;
				
			ИначеЕсли КоличествоИгровыхПолей > 0 Тогда
				
				НоваяСтрокаТабл_КоличествоИгровыхПолей = Табл_КоличествоИгровыхПолей.Добавить();
				НоваяСтрокаТабл_КоличествоИгровыхПолей.КоличествоПолей = КоличествоИгровыхПолей;
				НоваяСтрокаТабл_КоличествоИгровыхПолей.ИндексСтраницы = ДеревоРаздела.Строки.Индекс(Ветка);
				НоваяСтрокаТабл_КоличествоИгровыхПолей.СчетчикСтраниц = 1;
				
				Сочетание = СочетаниеРазделов.Добавить();
				Сочетание.КоличествоПолей = КоличествоИгровыхПолей;
				Сочетание.Раздел = 31;
				Сочетание.Страница = ДеревоРаздела.Строки.Индекс(Ветка) + 1;
				Сочетание.ИмяОбласти = "П000310001003";
				Сочетание.Счетчик31 = 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Табл_КолИгрПолей = Табл_КоличествоИгровыхПолей.Скопировать();
		Табл_КолИгрПолей.Свернуть("КоличествоПолей", "СчетчикСтраниц");
		
		Если Табл_КоличествоИгровыхПолей.Количество() <> Табл_КолИгрПолей.Количество() Тогда
			Для каждого СтрокаТабл_КолИгрПолей Из Табл_КолИгрПолей Цикл
				Если СтрокаТабл_КолИгрПолей.СчетчикСтраниц > 1 Тогда
					СтрокиТабл_КоличествоИгровыхПолей = Табл_КоличествоИгровыхПолей.НайтиСтроки(
					Новый Структура("КоличествоПолей", СтрокаТабл_КолИгрПолей.КоличествоПолей));
					Для каждого СтрокаТабл_КоличествоИгровыхПолей Из СтрокиТабл_КоличествоИгровыхПолей Цикл
						НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.Добавить(СтрокаТабл_КоличествоИгровыхПолей.ИндексСтраницы + 1);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.Количество() > 0 Тогда
			НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.СортироватьПоЗначению();
			СообщитьВТС("В разделе 3.1 заданы неуникальные значения в строке 010 на страницах "
			+ СтрСоединить(НомераСтраниц_НеуникальноеКоличествоИгровыхПолей.ВыгрузитьЗначения(), ", "), "Раздел31",
			"П000310001003", Формат(НомераСтраниц_НеуникальноеКоличествоИгровыхПолей[0].Значение, "ЧГ="));
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	ИначеЕсли Раздел31ДолженБытьЗаполнен Тогда
		
		СообщитьВТС("Не заполнен раздел 3.1", "Раздел31", "П000310001003", "1");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Сочетания разделов.
	СочетанияРаздела22 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 22));
	СочетанияРаздела31 = СочетаниеРазделов.НайтиСтроки(Новый Структура("Раздел", 31));
	
	СочетаниеРазделовСвернутое = СочетаниеРазделов.Скопировать();
	СочетаниеРазделовСвернутое.Свернуть("КоличествоПолей", "Счетчик22, Счетчик31");
	
	Для Каждого Сочетание Из СочетаниеРазделовСвернутое Цикл
		
		Если Сочетание.Счетчик22 <> 0 И Сочетание.Счетчик31 = 0 Тогда
			
			УсловияПоиска = Новый Структура("КоличествоПолей, Раздел", Сочетание.КоличествоПолей, 22);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			НомСтраницы = Формат(НесвязанныеСтроки[0].Страница, "ЧГ=");
			ИмяПоказателя = НесвязанныеСтроки[0].ИмяОбласти;
			
			СообщитьВТС("По значению " + Формат(Сочетание.КоличествоПолей, "ЧГ=") + " в строке 010 на странице "
			+ НомСтраницы + " раздела 2.2 не найдена соответствующая страница раздела 3.1",
			"Раздел22", ИмяПоказателя, НомСтраницы);
			СтатусПроверки = Ложь;
			
		ИначеЕсли Сочетание.Счетчик22 = 0 И Сочетание.Счетчик31 <> 0 Тогда
			
			УсловияПоиска = Новый Структура("КоличествоПолей, Раздел", Сочетание.КоличествоПолей, 31);
			НесвязанныеСтроки = СочетаниеРазделов.НайтиСтроки(УсловияПоиска);
			
			НомСтраницы = Формат(НесвязанныеСтроки[0].Страница, "ЧГ=");
			ИмяПоказателя = НесвязанныеСтроки[0].ИмяОбласти;
			
			СообщитьВТС("По значению " + Формат(Сочетание.КоличествоПолей, "ЧГ=") + " в строке 010 на странице "
			+ НомСтраницы + " раздела 3.1 не найдена соответствующая страница раздела 2.2",
			"Раздел31", ИмяПоказателя, НомСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	ЗаполнитьДаннымиУзел(ДеревоРаздела.Строки[0].Данные, ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ"));
	
	// Разделы 2, 2.1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчНал = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНал");
	ЗаполнитьДаннымиУзел(ДеревоРаздела.Строки[0].Данные, РасчНал);
	
	// Раздел 2.2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел22"];
	РасчНалСтВс = ПолучитьПодчиненныйЭлемент(РасчНал, "РасчНалСтВс");
	РасчНалСт = ПолучитьПодчиненныйЭлемент(РасчНалСтВс, "РасчНалСт");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		ЗаполнитьДаннымиУзел(Ветка.Данные, СкопироватьУзел(РасчНалСтВс, РасчНалСт, РасчНалСтВс.Строки.Количество() - 1));
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(РасчНалСт);
	
	// Раздел 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел3"];
	ИзмКолОбПер = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИзмКолОбПер");
	ЗаполнитьДаннымиУзел(ДеревоРаздела.Строки[0].Данные, ИзмКолОбПер);
	
	// Раздел 3.1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел31"];
	ИзмКолСтВс = ПолучитьПодчиненныйЭлемент(ИзмКолОбПер, "ИзмКолСтВс");
	ИзмКолСт = ПолучитьПодчиненныйЭлемент(ИзмКолСтВс, "ИзмКолСт");
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		ЗаполнитьДаннымиУзел(Ветка.Данные, СкопироватьУзел(ИзмКолСтВс, ИзмКолСт, ИзмКолСтВс.Строки.Количество() - 1));
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(ИзмКолСт);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел) И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП)
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "НалогНаИгорныйБизнес");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки503");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(ТекущийРазделОтчетаСокрНаим);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
		СтруктПарам = Новый Структура;
		ИмяПоказателя = ?(СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел22", "П000220001003", "П000310001003");
		СтруктПарам.Вставить("КолИгровыхПолей", ТабличныйДокумент.Область(ИмяПоказателя).Значение);
		СтруктПарам.Вставить("НомерСтраницы", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел22_Раздел31(СтруктПарам);
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
		|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр(
		"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
		|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохрТекОбл = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	СохранитьДанныеРазделаИВыполнитьПолныйРасчет(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = СохрТекОбл;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
		
		МакетРаздела = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(МакетРаздела);
		
		Для каждого Пок Из Ветка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = Пок.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
		
	КонецЦикла;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2021Кв4_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
			+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
		
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
		
		Стр080Гр3 = ТабличныйДокумент.Область("П000020008003").Значение;
		Стр090Гр3 = ТабличныйДокумент.Область("П000020009003").Значение;
		Стр100Гр3 = ТабличныйДокумент.Область("П000020010003").Значение;
		Стр110Гр3 = ТабличныйДокумент.Область("П000020011003").Значение;
		Стр120Гр3 = ТабличныйДокумент.Область("П000020012003").Значение;
		Стр130Гр3 = ТабличныйДокумент.Область("П000020013003").Значение;
		Стр140Гр3 = ТабличныйДокумент.Область("П000020014003").Значение;
		
		Если Макс(Стр080Гр3, Стр090Гр3, Стр100Гр3, Стр110Гр3, Стр120Гр3, Стр130Гр3, Стр140Гр3,
			9999999) > 9999999 Тогда // 8 знакомест
			
			МакетМЧБ.УдалитьОбласть(МакетМЧБ.Область("СекцияР2Ставки_7"),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020008003";
			НовСтр.Значение = Стр080Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020008003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020008004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020008004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020008004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020009003";
			НовСтр.Значение = Стр090Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020009003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020009004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020009004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020009004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020010003";
			НовСтр.Значение = Стр100Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020010003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020010004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020010004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020010004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020011003";
			НовСтр.Значение = Стр110Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020011003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020011004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020011004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020011004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020012003";
			НовСтр.Значение = Стр120Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020012003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020012004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020012004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020012004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020013003";
			НовСтр.Значение = Стр130Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020013003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020013004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020013004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020013004"));
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020014003";
			НовСтр.Значение = Стр140Гр3;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020014003"));
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "П100020014004";
			НовСтр.Значение = ТабличныйДокумент.Область("П000020014004").Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(ТабличныйДокумент.Область("П000020014004"));
			
		Иначе // 7 знакомест
			
			МакетМЧБ.УдалитьОбласть(МакетМЧБ.Область("СекцияР2Ставки_8"),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Показатель Из Показатели Цикл
		Если Показатель.Имя = "П000010002003" Тогда
			Показатель.ЗначениеМЧБ
			= РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть),
									ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
							ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось заполнить область ""%1""';
																									|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

#Область МеханизмПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	ДанныеКС.Вставить("КолОшибок"	, 0);
	ДанныеКС.Вставить("КолНеОшибок"	, 0);
	ДанныеКС.Вставить("Результат"	, Новый Структура);
	ДанныеКС.Вставить("ДопИнфо"		, Истина);;
	ДанныеКС.Вставить("Отчет"		, СтруктураРеквизитовФормы.мСохраненныйДок);
	ДанныеКС.Вставить("ГодОтчета"	, Год(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("МесОтчета"	, Месяц(ДанныеКС.Отчет.ДатаОкончания));
	ДанныеКС.Вставить("ДатаОтчета"	, ДанныеКС.Отчет.ДатаОкончания);
	
	СформироватьСлужебныеДанные();
	СформироватьДанныеОтчета();
	СформироватьДанныеОтчетаПРП();

	// критические проверки НК РФ
	
	ПроверкаКС_16_1_к();
	ПроверкаКС_16_2_к();
	ПроверкаКС_16_3_к();

	// основные проверки
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	
	// проверки Раздела 2
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04_1();
	ПроверкаКС_1_04_2();
	ПроверкаКС_1_04_3();
	ПроверкаКС_1_04_4();
	ПроверкаКС_1_04_5();
	ПроверкаКС_1_04_6();
	ПроверкаКС_1_04_7();
	ПроверкаКС_1_05_1();
	ПроверкаКС_1_05_2();
	ПроверкаКС_1_05_3();
	ПроверкаКС_1_05_4();
	ПроверкаКС_1_05_5();
	ПроверкаКС_1_05_6();
	ПроверкаКС_1_05_7();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07_1();
	ПроверкаКС_1_07_2();
	ПроверкаКС_1_07_3();
	ПроверкаКС_1_07_4();
	ПроверкаКС_1_07_5();
	ПроверкаКС_1_07_6();
	ПроверкаКС_1_07_7();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09_1();
	ПроверкаКС_1_09_2();
	ПроверкаКС_1_09_3();
	ПроверкаКС_1_09_4();
	ПроверкаКС_1_09_5();
	ПроверкаКС_1_09_6();
	ПроверкаКС_1_09_7();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	ПроверкаКС_1_22();
	ПроверкаКС_1_23();
	ПроверкаКС_1_24();
	ПроверкаКС_1_25();
	
	// проверки Раздела 3
	
	ПроверкаКС_1_26_1();
	ПроверкаКС_1_26_2();
	ПроверкаКС_1_27();
	ПроверкаКС_1_28();
	ПроверкаКС_1_29();
	ПроверкаКС_1_30();
	ПроверкаКС_1_31();
	ПроверкаКС_1_32();
	ПроверкаКС_1_33();
	ПроверкаКС_1_34();
	ПроверкаКС_1_35();
	ПроверкаКС_1_36();
	ПроверкаКС_1_37();
	ПроверкаКС_1_38();
	ПроверкаКС_1_39();
	ПроверкаКС_1_40();
	ПроверкаКС_1_40_1();
	ПроверкаКС_1_40_2();
	ПроверкаКС_1_41();
	ПроверкаКС_1_41_1();
	ПроверкаКС_1_41_2();
	
	// проверки Дополнительные
	ПроверкаКС_1_42();
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат ОбработатьРезультат();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат ОбработатьРезультат();
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Налог на игорный бизнес");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2021Кв4");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();

	// критические проверки НК РФ
	
	ПроверкаКС_16_1_к();
	ПроверкаКС_16_2_к();
	ПроверкаКС_16_3_к();

	// основные проверки
	
	// проверки Раздела 1
	ПроверкаКС_1_01();
	
	// проверки Раздела 2
	ПроверкаКС_1_02();
	ПроверкаКС_1_03();
	ПроверкаКС_1_04_1();
	ПроверкаКС_1_04_2();
	ПроверкаКС_1_04_3();
	ПроверкаКС_1_04_4();
	ПроверкаКС_1_04_5();
	ПроверкаКС_1_04_6();
	ПроверкаКС_1_04_7();
	ПроверкаКС_1_05_1();
	ПроверкаКС_1_05_2();
	ПроверкаКС_1_05_3();
	ПроверкаКС_1_05_4();
	ПроверкаКС_1_05_5();
	ПроверкаКС_1_05_6();
	ПроверкаКС_1_05_7();
	ПроверкаКС_1_06();
	ПроверкаКС_1_07_1();
	ПроверкаКС_1_07_2();
	ПроверкаКС_1_07_3();
	ПроверкаКС_1_07_4();
	ПроверкаКС_1_07_5();
	ПроверкаКС_1_07_6();
	ПроверкаКС_1_07_7();
	ПроверкаКС_1_08();
	ПроверкаКС_1_09_1();
	ПроверкаКС_1_09_2();
	ПроверкаКС_1_09_3();
	ПроверкаКС_1_09_4();
	ПроверкаКС_1_09_5();
	ПроверкаКС_1_09_6();
	ПроверкаКС_1_09_7();
	ПроверкаКС_1_10();
	ПроверкаКС_1_11();
	ПроверкаКС_1_12();
	ПроверкаКС_1_13();
	ПроверкаКС_1_14();
	ПроверкаКС_1_15();
	ПроверкаКС_1_16();
	ПроверкаКС_1_17();
	ПроверкаКС_1_17_1();
	ПроверкаКС_1_17_2();
	ПроверкаКС_1_18();
	ПроверкаКС_1_19();
	ПроверкаКС_1_20();
	ПроверкаКС_1_21();
	ПроверкаКС_1_22();
	ПроверкаКС_1_23();
	ПроверкаКС_1_24();
	ПроверкаКС_1_25();
	
	// проверки Раздела 3
	
	ПроверкаКС_1_26_1();
	ПроверкаКС_1_26_2();
	ПроверкаКС_1_27();
	ПроверкаКС_1_28();
	ПроверкаКС_1_29();
	ПроверкаКС_1_30();
	ПроверкаКС_1_31();
	ПроверкаКС_1_32();
	ПроверкаКС_1_33();
	ПроверкаКС_1_34();
	ПроверкаКС_1_35();
	ПроверкаКС_1_36();
	ПроверкаКС_1_37();
	ПроверкаКС_1_38();
	ПроверкаКС_1_39();
	ПроверкаКС_1_40();
	ПроверкаКС_1_40_1();
	ПроверкаКС_1_40_2();
	ПроверкаКС_1_41();
	ПроверкаКС_1_41_1();
	ПроверкаКС_1_41_2();
	
	// проверки Дополнительные
	ПроверкаКС_1_42();
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "Титульного листа");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р21", "подраздела 2.1 Раздела 2");
	ПредставлениеРазделов.Вставить("Р22", "подраздела 2.2 Раздела 2");
	ПредставлениеРазделов.Вставить("Р03", "Раздела 3");
	ПредставлениеРазделов.Вставить("Р31", "подраздела 3.1 Раздела 3");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р21", "Раздел2");
	РазделыПоказателей.Вставить("Р22", "Раздел22");
	РазделыПоказателей.Вставить("Р03", "Раздел3");
	РазделыПоказателей.Вставить("Р31", "Раздел31");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ПоказателиТЛ = Новый Структура;
	
	ПоказателиТЛ.Вставить("Т001", "Отчетный год");
	ПоказателиТЛ.Вставить("Т002", "Дата подписи");
	
	ДанныеКС.Вставить("ПоказателиТЛ", ПоказателиТЛ);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р21");
	ЦелочисленныеРазделы.Добавить("Р22");
	ЦелочисленныеРазделы.Добавить("Р03");
	ЦелочисленныеРазделы.Добавить("Р31");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	
	// Раздел 1
	МассивПолейСписочныхЗначений.Добавить("П000010001003");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчета()
	
	СтруктураДанных = СохраненныеДанныеОтчета();

	ДанныеКС.Вставить("Титульный", ОбщегоНазначения.СкопироватьРекурсивно(
		СтруктураДанных.ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	Для каждого Раздел Из СтруктураДанных.ДанныеМногоуровневыхРазделов Цикл
		
		ДанныеКС.Вставить("КолвоСтраниц" + Раздел.Ключ, Раздел.Значение.Строки.Количество());
		МассивСтраниц = Новый Массив;
		
		Для каждого СтраницаРаздела Из Раздел.Значение.Строки Цикл
			
			ДанныеСтраницы = Новый Структура;
			ДанныеСтраницы.Вставить("Страница", XMLСтрока(Раздел.Значение.Строки.Индекс(СтраницаРаздела) + 1));
			ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаРаздела, 
				Новый Структура("КорневойРаздел, Раздел, Уровень", Раздел.Ключ, Раздел.Ключ, 1),
				Новый Структура("Уровень", ""));
			МассивСтраниц.Добавить(ДанныеСтраницы);
			
		КонецЦикла;
		
		ДанныеКС.Вставить(Раздел.Ключ, МассивСтраниц);
		ДанныеКС.Вставить("РазделЗаполнен_" + Раздел.Ключ, РазделЗаполнен(МассивСтраниц, Ложь));
		
	КонецЦикла;
	
	ДанныеКС.Вставить("Раздел1", ДанныеКС.Раздел1[0]);
	ДанныеКС.Вставить("Раздел2", ДанныеКС.Раздел2[0]);
	ДанныеКС.Вставить("Раздел3", ДанныеКС.Раздел3[0]);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчетаПРП()
	
	ОтчетПРП 	= Неопределено;
	Раздел3ПРП 	= Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("КПП"			, ДанныеКС.Титульный.КПП);
	Запрос.УстановитьПараметр("ГодОтчета"	, ?(ДанныеКС.МесОтчета = 1, ДанныеКС.ГодОтчета - 1, ДанныеКС.ГодОтчета));
	Запрос.УстановитьПараметр("МесяцОтчета"	, ?(ДанныеКС.МесОтчета = 1, 12, ДанныеКС.МесОтчета - 1));
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетНалогНаИгорныйБизнес""
	|	И ДокументРО.Организация = &Организация
	|	И ДокументРО.КПП = &КПП
	|	И ДокументРО.ВыбраннаяФорма = ""ФормаОтчета2021Кв4""
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) = &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтчетПРП = Выборка.Ссылка;
	КонецЕсли;
	
	ДанныеКС.Вставить("ОтчетПРП"	, ОтчетПРП);
	ДанныеКС.Вставить("ОтчетПРПНайден", НЕ ОтчетПРП = Неопределено);
	
	Если ДанныеКС.ОтчетПРПНайден Тогда
		
		СтруктураДанных = ОтчетПРП.ДанныеОтчета.Получить();
	
		Если НЕ СтруктураДанных.Свойство("ОкружениеСохранения") Тогда
			Раздел3ПРП = Новый Структура;
			ПолучитьДанныеСтраницы(Раздел3ПРП, СтруктураДанных.ДанныеМногоуровневыхРазделов.Раздел3.Строки[0], 
				Новый Структура("КорневойРаздел, Раздел, Уровень", "", "", 1),
				Новый Структура("Уровень", ""));
		Иначе
			ДанныеКС.Вставить("ОтчетПРПНайден", Ложь);	
		КонецЕсли;
	КонецЕсли;
	
	ДанныеКС.Вставить("Раздел3ПРП", Раздел3ПРП); 
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеСтраницы(СтруктураПриемник, 
									СтруктураИсточник, 
									Знач ВходящийРаздел, 
									Знач ВходящаяМнЧасть)
									
	Если НЕ СтруктураИсточник.Данные = Неопределено Тогда
		Для каждого Элемент Из СтруктураИсточник.Данные Цикл
			СтруктураПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого МнЧасть Из СтруктураИсточник.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧасти Из МнЧасть.Значение.Строки Цикл
				
				НомерСтроки = МнЧасть.Значение.Строки.Индекс(СтрокаМнЧасти) + 1;
				СтруктураПриемник.Вставить("КолвоСтрок" + МнЧасть.Ключ + ВходящаяМнЧасть.Уровень, 
					МнЧасть.Значение.Строки.Количество());
					
				Если НЕ СтрокаМнЧасти.Данные = Неопределено Тогда
					Для каждого ПоказательСтроки Из СтрокаМнЧасти.Данные Цикл
						СтруктураПриемник.Вставить(ПоказательСтроки.Ключ + ВходящаяМнЧасть.Уровень + "_" + XMLСтрока(НомерСтроки), 
							ПоказательСтроки.Значение);
					КонецЦикла;
				КонецЕсли;
				
				Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей = Неопределено Тогда
					Если НЕ СтрокаМнЧасти.ДанныеМногострочныхЧастей.Количество() = 0 Тогда
						ПолучитьДанныеСтраницы(СтруктураПриемник, СтрокаМнЧасти, ВходящийРаздел,
							Новый Структура("Уровень", "_" +  XMLСтрока(НомерСтроки)));
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ СтруктураИсточник.Строки.Количество() = 0 Тогда
		Для каждого Приложение Из СтруктураИсточник.Строки Цикл
	
			Если ВходящийРаздел.Уровень = 1 Тогда
				ВходящийРаздел.Уровень = 2;
				ПолучитьДанныеСтраницы(СтруктураПриемник, Приложение, ВходящийРаздел, ВходящаяМнЧасть);
				Возврат;
			КонецЕсли;
	
			КлючПриложения = ВходящийРаздел.Раздел + "1";
			МассивСтраниц = Новый Массив;
			
			Для каждого СтраницаПриложения Из СтруктураИсточник.Строки Цикл
		
				ДанныеСтраницы = Новый Структура;
				ДанныеСтраницы.Вставить("Страница", СтруктураПриемник.Страница + "," +
					XMLСтрока(СтруктураИсточник.Строки.Индекс(СтраницаПриложения) + 1));
				ПолучитьДанныеСтраницы(ДанныеСтраницы, СтраницаПриложения, 
					Новый Структура("КорневойРаздел, Раздел, Уровень", ВходящийРаздел.КорневойРаздел, КлючПриложения, 
					ВходящийРаздел.Уровень + 1), Новый Структура("Уровень", ""));
				МассивСтраниц.Добавить(ДанныеСтраницы);
				
			КонецЦикла;
			СтруктураПриемник.Вставить("КолвоСтраниц" + КлючПриложения, МассивСтраниц.Количество());
			СтруктураПриемник.Вставить(КлючПриложения, МассивСтраниц);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения		= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 8, 1);
		ПодстрокаСтроки			= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы			= Число(Сред(Элемент.Значение, 12,2));
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		ИначеЕсли ИндексДополнения = "Т" Тогда
			МассивПредставления.Добавить(ДанныеКС.ПоказателиТЛ[Сред(Элемент.Ключ, 4, 4)]);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Если ПодстрокаДополнения = "П" Тогда
			МассивПредставления.Добавить("предыдущего отчетного периода");
		КонецЕсли;
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет"			, ?(ПодстрокаДополнения = "П", ДанныеКС.ОтчетПРП, ДанныеКС.Отчет));
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Заполнять"		, Истина);
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, ДанныеКС.Отчет);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, 
								НомерСтроки = Неопределено,
								НомерСтроки2 = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(НомерСтроки) И ЗначениеЗаполнено(НомерСтроки2) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки) + "_" + 
				XMLСтрока(НомерСтроки2);
		ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
		КонецЕсли;
		
		Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
			Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
			
			ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14);
		КонецЕсли;
	
		ЗначениеВИсточнике = Источник[Показатель.ИмяПоказателя];
		
		Показатель.Отчет	= Источник.Отчет;
		Показатель.Страница = Источник.НомСтраницы;
			
		ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике);
			
		Если Показатель.Многострочный Тогда
			Показатель.ИмяПоказателя = Показатель.ИмяПоказателя + XMLСтрока(Источник.НомСтроки);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательЗначениями(Показатель, ЗначениеВИсточнике)

	Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
			ЗначениеВИсточнике);
		Показатель.Итог = Показатель.Итог + Показатель.Значение;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
		ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
		Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
		Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
	ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
		Показатель.Значение = ЗначениеВИсточнике;
		Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
											
	Если Показатель.Заполнять Тогда
		ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, НомерСтроки2);
			
		Если Показатель.Расшифровывать Тогда
			РасшифроватьПоказатель(Показатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, 
											НомерСтроки = Неопределено,
											НомерСтроки2 = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки, НомерСтроки2);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		ДанныеКС.КолОшибок = ДанныеКС.КолОшибок + 1;
	Иначе
		ДанныеКС.КолНеОшибок = ДанныеКС.КолНеОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(ДанныеКС.КолОшибок + ДанныеКС.КолНеОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопИнфо");
	
	ДанныеКС.Результат.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	ДанныеКС.Результат.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	ДанныеКС.Результат.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	ДанныеКС.Результат.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	ДанныеКС.Результат.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	ДанныеКС.Результат.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция ПодставитьПараметрыВСтроку(Шаблон, Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, 
	Параметр4 = Неопределено)
	
	Если Параметр2 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1);
	
	ИначеЕсли Параметр3 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2);
	
	ИначеЕсли Параметр4 = Неопределено Тогда
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3);
		
	Иначе
		Возврат СтрШаблон(Шаблон, Параметр1, Параметр2, Параметр3, Параметр4);
	
	КонецЕсли;

КонецФункции

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если ДанныеКС[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач ИзменяемыеСвойства, Знач Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("НомерКС"				, (НСтр("ru=''")));
		Настройки.Вставить("Раздел"					, (НСтр("ru=''")));
		Настройки.Вставить("Условие"				, (НСтр("ru=''")));
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Настройки.ОписаниеКС = Настройки.Раздел + ". Проверка КС " + Настройки.НомерКС + Символы.ПС + Настройки.ОписаниеКС;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		Возврат Настройки;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат()
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("СтруктураОшибок", ОбщегоНазначения.СкопироватьРекурсивно(ДанныеКС.Результат));
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, ДанныеКС.КолОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, ДанныеКС.КолНеОшибок);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, СтруктураРеквизитовФормы.КС_АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КС_АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел, РазделЗаполнен)
	
	Для каждого Страница Из Раздел Цикл
		Для каждого Показатель Из Страница Цикл
		
			Если НЕ СтрНайти(Показатель.Ключ, "П000") = 0 И СтрНайти(Показатель.Ключ, "КолвоСтрок") = 0 Тогда
				РазделЗаполнен = РазделЗаполнен ИЛИ ЗначениеЗаполнено(Показатель.Значение);
			КонецЕсли; 
			
			Если ТипЗнч(Показатель.Значение) = Тип("Массив") Тогда
				РазделЗаполнен(Показатель.Значение, РазделЗаполнен);
			КонецЕсли; 
		
		КонецЦикла;
		
		Если РазделЗаполнен Тогда
			Возврат РазделЗаполнен;
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат РазделЗаполнен;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Критические_НК_РФ

&НаСервере
Процедура ПроверкаКС_16_1_к()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '16.1.к';
													|en = '16.1.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030", "П000010003003");
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1);
	
	Настройки.ЭтоОшибка = Показатели.Р01С030.Значение < 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р01С030.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_2_к()
	
	Перем ПоказателиР1;
	Перем ПоказателиР2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '16.2.к';
													|en = '16.2.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = сумма гр.4 стр.(070, 080, 090, ';
														|en = 'Сумма налога в стр.030 Раздела 1 = сумма гр.4 стр.(070, 080, 090, '") +
		НСтр("ru = '100, 110, 120, 130, 140) подр.2.1 Раздела 2';
			|en = '100, 110, 120, 130, 140) подр.2.1 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р01С030", "П000010003003");
	
	ИменаПоказателейР2 = Новый Структура;
	ИменаПоказателейР2.Вставить("Р21П070", "П000020007004");
	ИменаПоказателейР2.Вставить("Р21П080", "П000020008004");
	ИменаПоказателейР2.Вставить("Р21П090", "П000020009004");
	ИменаПоказателейР2.Вставить("Р21П100", "П000020010004");
	ИменаПоказателейР2.Вставить("Р21П110", "П000020011004");
	ИменаПоказателейР2.Вставить("Р21П120", "П000020012004");
	ИменаПоказателейР2.Вставить("Р21П130", "П000020013004");
	ИменаПоказателейР2.Вставить("Р21П140", "П000020014004");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиР2, ИменаПоказателейР2);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР2, ДанныеКС.Раздел2);
	
	РасчетнаяСумма = СуммаПоказателей(ПоказателиР2);
	Настройки.ЭтоОшибка = НЕ ПоказателиР1.Р01С030.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, ПоказателиР1.Р01С030.Значение,
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_3_к()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '16.3.к';
													|en = '16.3.к'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@';
													|en = 'Приказ ФНС России от 29.02.2024 № ЕД-7-3/164@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.070 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.070 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.090 подр.2.2 Раздела 2';
			|en = 'сумма стр.090 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно ошибочная сумма налога';
														|en = 'Возможно ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Критическая проверка';
													|en = 'Критическая проверка'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020007004");
	ИменаПоказателей.Вставить("Р22С001", "П000220009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21П001, ДанныеКС.Раздел2);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
	КонецЦикла; 
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р21П001.Значение = Показатели.Р22С001.Итог;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р21П001.Значение,
		Показатели.Р22С001.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_1_01()
	
	Перем ПоказателиР1;
	Перем ПоказателиР2;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 = сумма гр.4 стр.(070, 080, 090, ';
														|en = 'Сумма налога в стр.030 Раздела 1 = сумма гр.4 стр.(070, 080, 090, '") +
		НСтр("ru = '100, 110, 120, 130, 140) Раздела 2';
			|en = '100, 110, 120, 130, 140) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено. Дублирует КС 16.2.к';
													|en = 'Отключено. Дублирует КС 16.2.к'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	// Отключено
	Возврат;
	
	ИменаПоказателейР1 = Новый Структура;
	ИменаПоказателейР1.Вставить("Р01С030", "П000010003003");
	
	ИменаПоказателейР2 = Новый Структура;
	ИменаПоказателейР2.Вставить("Р02П070", "П000020007004");
	ИменаПоказателейР2.Вставить("Р02П080", "П000020008004");
	ИменаПоказателейР2.Вставить("Р02П090", "П000020009004");
	ИменаПоказателейР2.Вставить("Р02П100", "П000020010004");
	ИменаПоказателейР2.Вставить("Р02П110", "П000020011004");
	ИменаПоказателейР2.Вставить("Р02П120", "П000020012004");
	ИменаПоказателейР2.Вставить("Р02П130", "П000020013004");
	ИменаПоказателейР2.Вставить("Р02П140", "П000020014004");
	
	СформироватьПоказатели(ПоказателиР1, ИменаПоказателейР1);
	СформироватьПоказатели(ПоказателиР2, ИменаПоказателейР2);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР1, ДанныеКС.Раздел1);
	ЗаполнитьИРасшифроватьПоказатели(ПоказателиР2, ДанныеКС.Раздел2);
	
	РасчетнаяСумма = СуммаПоказателей(ПоказателиР2);
	Настройки.ЭтоОшибка = НЕ ПоказателиР1.Р01С030.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, ПоказателиР1.Р01С030.Значение,
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_1_02()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.040 подр.2.2 Раздела 2';
			|en = 'сумма стр.040 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002003");
	ИменаПоказателей.Вставить("Р22С001", "П000220004003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_03()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.3';
													|en = '1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.3 стр.(030 + 040 + 050 + 060) Раздела 2';
			|en = 'сумма гр.3 стр.(030 + 040 + 050 + 060) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 + %5 Итог [%6]';
													|en = '%1 = %2 + %3 + %4 + %5 Итог [%6]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002003");
	ИменаПоказателей.Вставить("Р02П002", "П000020003003");
	ИменаПоказателей.Вставить("Р02П003", "П000020004003");
	ИменаПоказателей.Вставить("Р02П004", "П000020005003");
	ИменаПоказателей.Вставить("Р02П005", "П000020006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел2);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Р02П001.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02П001.Значение, Показатели.Р02П002.Значение, Показатели.Р02П003.Значение, Показатели.Р02П004.Значение, 
		Показатели.Р02П005.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.1';
													|en = '1.4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.4 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.4 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.4 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002004");
	ИменаПоказателей.Вставить("Р02П002", "П000020003004");
	ИменаПоказателей.Вставить("Р02П003", "П000020004004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.2';
													|en = '1.4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.5 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.5 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.5 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002005");
	ИменаПоказателей.Вставить("Р02П002", "П000020003005");
	ИменаПоказателей.Вставить("Р02П003", "П000020004005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_3()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.3';
													|en = '1.4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.6 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.6 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.6 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002006");
	ИменаПоказателей.Вставить("Р02П002", "П000020003006");
	ИменаПоказателей.Вставить("Р02П003", "П000020004006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_4()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.4';
													|en = '1.4.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.7 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.7 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.7 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002007");
	ИменаПоказателей.Вставить("Р02П002", "П000020003007");
	ИменаПоказателей.Вставить("Р02П003", "П000020004007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_5()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.5';
													|en = '1.4.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.8 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.8 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.8 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002008");
	ИменаПоказателей.Вставить("Р02П002", "П000020003008");
	ИменаПоказателей.Вставить("Р02П003", "П000020004008");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_6()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.6';
													|en = '1.4.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.9 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.9 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.9 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002009");
	ИменаПоказателей.Вставить("Р02П002", "П000020003009");
	ИменаПоказателей.Вставить("Р02П003", "П000020004009");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_7()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.4.7';
													|en = '1.4.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.10 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.10 стр.(030 + 040) Раздела 2';
			|en = 'сумма гр.10 стр.(030 + 040) Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002010");
	ИменаПоказателей.Вставить("Р02П002", "П000020003010");
	ИменаПоказателей.Вставить("Р02П003", "П000020004010");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_04_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_04_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел2);
	
	РасчетнаяСумма = Показатели.Р02П002.Значение + Показатели.Р02П003.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02П001.Значение, Показатели.Р02П002.Значение, Показатели.Р02П003.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.1';
													|en = '1.5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.4 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.4 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.4 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002004");
	ИменаПоказателей.Вставить("Р03П001", "П000030001004");
	ИменаПоказателей.Вставить("Р03П002", "П000030002004");
	ИменаПоказателей.Вставить("Р03П003", "П000030004004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.2';
													|en = '1.5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.5 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.5 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.5 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002005");
	ИменаПоказателей.Вставить("Р03П001", "П000030001005");
	ИменаПоказателей.Вставить("Р03П002", "П000030002005");
	ИменаПоказателей.Вставить("Р03П003", "П000030004005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_3()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.3';
													|en = '1.5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.6 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.6 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.6 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002006");
	ИменаПоказателей.Вставить("Р03П001", "П000030001006");
	ИменаПоказателей.Вставить("Р03П002", "П000030002006");
	ИменаПоказателей.Вставить("Р03П003", "П000030004006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_4()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.4';
													|en = '1.5.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.7 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.7 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.7 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002007");
	ИменаПоказателей.Вставить("Р03П001", "П000030001007");
	ИменаПоказателей.Вставить("Р03П002", "П000030002007");
	ИменаПоказателей.Вставить("Р03П003", "П000030004007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_5()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.5';
													|en = '1.5.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.8 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.8 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.8 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002008");
	ИменаПоказателей.Вставить("Р03П001", "П000030001008");
	ИменаПоказателей.Вставить("Р03П002", "П000030002008");
	ИменаПоказателей.Вставить("Р03П003", "П000030004008");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_6()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.6';
													|en = '1.5.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.9 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.9 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.9 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002009");
	ИменаПоказателей.Вставить("Р03П001", "П000030001009");
	ИменаПоказателей.Вставить("Р03П002", "П000030002009");
	ИменаПоказателей.Вставить("Р03П003", "П000030004009");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_7()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.5.7';
													|en = '1.5.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.020 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.10 стр.020 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.10 стр.(010 + 020 + 040) Раздела 3';
			|en = 'сумма гр.10 стр.(010 + 020 + 040) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5]';
													|en = '%1 = %2 + %3 + %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020002010");
	ИменаПоказателей.Вставить("Р03П001", "П000030001010");
	ИменаПоказателей.Вставить("Р03П002", "П000030002010");
	ИменаПоказателей.Вставить("Р03П003", "П000030004010");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_05_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_05_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02П001, ДанныеКС.Раздел2);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П001, ДанныеКС.Раздел3);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П002, ДанныеКС.Раздел3);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П003, ДанныеКС.Раздел3);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Р02П001.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02П001.Значение, Показатели.Р03П001.Значение, Показатели.Р03П002.Значение, 
		Показатели.Р03П003.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_06()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.6';
													|en = '1.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.030 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.050 подр.2.2 Раздела 2';
			|en = 'сумма стр.050 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003003");
	ИменаПоказателей.Вставить("Р22С001", "П000220005003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.1';
													|en = '1.7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.4 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.4 стр.020 Раздела 2 - гр.4 стр.(040 + 050) Раздела 3';
			|en = 'гр.4 стр.020 Раздела 2 - гр.4 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003004");
	ИменаПоказателей.Вставить("Р02П002", "П000020002004");
	ИменаПоказателей.Вставить("Р03П001", "П000030004004");
	ИменаПоказателей.Вставить("Р03П002", "П000030005004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.2';
													|en = '1.7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.5 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.5 стр.020 Раздела 2 - гр.5 стр.(040 + 050) Раздела 3';
			|en = 'гр.5 стр.020 Раздела 2 - гр.5 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003005");
	ИменаПоказателей.Вставить("Р02П002", "П000020002005");
	ИменаПоказателей.Вставить("Р03П001", "П000030004005");
	ИменаПоказателей.Вставить("Р03П002", "П000030005005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_3()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.3';
													|en = '1.7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.6 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.6 стр.020 Раздела 2 - гр.6 стр.(040 + 050) Раздела 3';
			|en = 'гр.6 стр.020 Раздела 2 - гр.6 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003006");
	ИменаПоказателей.Вставить("Р02П002", "П000020002006");
	ИменаПоказателей.Вставить("Р03П001", "П000030004006");
	ИменаПоказателей.Вставить("Р03П002", "П000030005006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_4()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.4';
													|en = '1.7.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.7 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.7 стр.020 Раздела 2 - гр.7 стр.(040 + 050) Раздела 3';
			|en = 'гр.7 стр.020 Раздела 2 - гр.7 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003007");
	ИменаПоказателей.Вставить("Р02П002", "П000020002007");
	ИменаПоказателей.Вставить("Р03П001", "П000030004007");
	ИменаПоказателей.Вставить("Р03П002", "П000030005007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_5()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.5';
													|en = '1.7.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.8 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.8 стр.020 Раздела 2 - гр.8 стр.(040 + 050) Раздела 3';
			|en = 'гр.8 стр.020 Раздела 2 - гр.8 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003008");
	ИменаПоказателей.Вставить("Р02П002", "П000020002008");
	ИменаПоказателей.Вставить("Р03П001", "П000030004008");
	ИменаПоказателей.Вставить("Р03П002", "П000030005008");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_6()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.6';
													|en = '1.7.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.9 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.9 стр.020 Раздела 2 - гр.9 стр.(040 + 050) Раздела 3';
			|en = 'гр.9 стр.020 Раздела 2 - гр.9 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003009");
	ИменаПоказателей.Вставить("Р02П002", "П000020002009");
	ИменаПоказателей.Вставить("Р03П001", "П000030004009");
	ИменаПоказателей.Вставить("Р03П002", "П000030005009");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_7()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.7.7';
													|en = '1.7.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.030 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.10 стр.030 Раздела 2 = '") +
		НСтр("ru = 'гр.10 стр.020 Раздела 2 - гр.10 стр.(040 + 050) Раздела 3';
			|en = 'гр.10 стр.020 Раздела 2 - гр.10 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5]';
													|en = '%1 = %2 - (%3 + %4) Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020003010");
	ИменаПоказателей.Вставить("Р02П002", "П000020002010");
	ИменаПоказателей.Вставить("Р03П001", "П000030004010");
	ИменаПоказателей.Вставить("Р03П002", "П000030005010");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_07_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_07_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02П001, ДанныеКС.Раздел2);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02П002, ДанныеКС.Раздел2);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П001, ДанныеКС.Раздел3);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П002, ДанныеКС.Раздел3);
	
	РасчетнаяСумма = Макс(0, Показатели.Р02П002.Значение - Показатели.Р03П001.Значение - Показатели.Р03П002.Значение);
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02П001.Значение, Показатели.Р02П002.Значение, Показатели.Р03П001.Значение, 
		Показатели.Р03П002.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_08()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.8';
													|en = '1.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.060 подр.2.2 Раздела 2';
			|en = 'сумма стр.060 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004003");
	ИменаПоказателей.Вставить("Р22С001", "П000220006003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.1';
													|en = '1.9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.4 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.4 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.4 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004004");
	ИменаПоказателей.Вставить("Р03П001", "П000030004004");
	ИменаПоказателей.Вставить("Р03П002", "П000030005004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.2';
													|en = '1.9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.5 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.5 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.5 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004005");
	ИменаПоказателей.Вставить("Р03П001", "П000030004005");
	ИменаПоказателей.Вставить("Р03П002", "П000030005005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_3()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.3';
													|en = '1.9.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.6 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.6 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.6 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004006");
	ИменаПоказателей.Вставить("Р03П001", "П000030004006");
	ИменаПоказателей.Вставить("Р03П002", "П000030005006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_4()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.4';
													|en = '1.9.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.7 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.7 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.7 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004007");
	ИменаПоказателей.Вставить("Р03П001", "П000030004007");
	ИменаПоказателей.Вставить("Р03П002", "П000030005007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_5()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.5';
													|en = '1.9.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.8 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.8 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.8 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004008");
	ИменаПоказателей.Вставить("Р03П001", "П000030004008");
	ИменаПоказателей.Вставить("Р03П002", "П000030005008");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_6()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.6';
													|en = '1.9.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.9 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.9 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.9 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004009");
	ИменаПоказателей.Вставить("Р03П001", "П000030004009");
	ИменаПоказателей.Вставить("Р03П002", "П000030005009");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_7()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.9.7';
													|en = '1.9.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.040 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.10 стр.040 Раздела 2 = '") +
		НСтр("ru = 'сумма гр.10 стр.(040 + 050) Раздела 3';
			|en = 'сумма гр.10 стр.(040 + 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4]';
													|en = '%1 = %2 + %3 Итог [%4]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020004010");
	ИменаПоказателей.Вставить("Р03П001", "П000030004010");
	ИменаПоказателей.Вставить("Р03П002", "П000030005010");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_09_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_09_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02П001, ДанныеКС.Раздел2);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П001, ДанныеКС.Раздел3);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П002, ДанныеКС.Раздел3);
	
	РасчетнаяСумма = Показатели.Р03П001.Значение + Показатели.Р03П002.Значение;
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р02П001.Значение, Показатели.Р03П001.Значение, Показатели.Р03П002.Значение, 
		РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_10()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.10';
													|en = '1.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.050 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.050 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.070 подр.2.2 Раздела 2';
			|en = 'сумма стр.070 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020005003");
	ИменаПоказателей.Вставить("Р22С001", "П000220007003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.11';
													|en = '1.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.060 Раздела 2 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.060 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.080 подр.2.2 Раздела 2';
			|en = 'сумма стр.080 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02П001", "П000020006003");
	ИменаПоказателей.Вставить("Р22С001", "П000220008003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_11_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_11_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02П001, ДанныеКС.Раздел2);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
	КонецЦикла; 
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р02П001.Значение = Показатели.Р22С001.Итог;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р02П001.Значение,
		Показатели.Р22С001.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_12()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.12';
													|en = '1.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.070 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.070 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'сумма стр.090 подр.2.2 Раздела 2';
			|en = 'сумма стр.090 подр.2.2 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено. Дублирует КС 16.3.к';
													|en = 'Отключено. Дублирует КС 16.3.к'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	// Отключено
	Возврат;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020007004");
	ИменаПоказателей.Вставить("Р22С001", "П000220009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21П001, ДанныеКС.Раздел2);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
	КонецЦикла; 
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р21П001.Значение = Показатели.Р22С001.Итог;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р21П001.Значение,
		Показатели.Р22С001.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_13()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.13';
													|en = '1.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.080 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.080 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.080 подр.2.1 Раздела 2 х гр.4 стр.030 Раздела 2 + 1/2 гр.3 стр.080 подр.2.1 ';
			|en = 'гр.3 стр.080 подр.2.1 Раздела 2 х гр.4 стр.030 Раздела 2 + 1/2 гр.3 стр.080 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.4 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.4 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020008004");
	ИменаПоказателей.Вставить("Р21П002", "П000020008003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003004");
	ИменаПоказателей.Вставить("Р02П002", "П000020004004");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_14()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.14';
													|en = '1.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.090 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.090 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.090 подр.2.1 Раздела 2 х гр.5 стр.030 Раздела 2 + 1/2 гр.3 стр.090 подр.2.1 ';
			|en = 'гр.3 стр.090 подр.2.1 Раздела 2 х гр.5 стр.030 Раздела 2 + 1/2 гр.3 стр.090 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.5 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.5 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020009004");
	ИменаПоказателей.Вставить("Р21П002", "П000020009003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003005");
	ИменаПоказателей.Вставить("Р02П002", "П000020004005");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_15()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.15';
													|en = '1.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.100 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.100 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.100 подр.2.1 Раздела 2 х гр.6 стр.030 Раздела 2 + 1/2 гр.3 стр.100 подр.2.1 ';
			|en = 'гр.3 стр.100 подр.2.1 Раздела 2 х гр.6 стр.030 Раздела 2 + 1/2 гр.3 стр.100 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.6 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.6 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020010004");
	ИменаПоказателей.Вставить("Р21П002", "П000020010003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003006");
	ИменаПоказателей.Вставить("Р02П002", "П000020004006");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_16()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.16';
													|en = '1.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.110 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.110 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.110 подр.2.1 Раздела 2 х гр.7 стр.030 Раздела 2 + 1/2 гр.3 стр.110 подр.2.1 ';
			|en = 'гр.3 стр.110 подр.2.1 Раздела 2 х гр.7 стр.030 Раздела 2 + 1/2 гр.3 стр.110 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.7 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.7 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020011004");
	ИменаПоказателей.Вставить("Р21П002", "П000020011003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003007");
	ИменаПоказателей.Вставить("Р02П002", "П000020004007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17';
													|en = '1.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.120 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.120 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.120 подр.2.1 Раздела 2 х гр.8 стр.030 Раздела 2 + 1/2 гр.3 стр.120 подр.2.1 ';
			|en = 'гр.3 стр.120 подр.2.1 Раздела 2 х гр.8 стр.030 Раздела 2 + 1/2 гр.3 стр.120 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.8 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.8 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020012004");
	ИменаПоказателей.Вставить("Р21П002", "П000020012003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003007");
	ИменаПоказателей.Вставить("Р02П002", "П000020004007");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.1';
													|en = '1.17.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.130 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.130 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.130 подр.2.1 Раздела 2 х гр.9 стр.030 Раздела 2 + 1/2 гр.3 стр.130 подр.2.1 ';
			|en = 'гр.3 стр.130 подр.2.1 Раздела 2 х гр.9 стр.030 Раздела 2 + 1/2 гр.3 стр.130 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.9 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.9 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020013004");
	ИменаПоказателей.Вставить("Р21П002", "П000020013003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003009");
	ИменаПоказателей.Вставить("Р02П002", "П000020004009");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.17.2';
													|en = '1.17.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в гр.4 стр.140 подр.2.1 Раздела 2 = ';
														|en = 'Сумма налога в гр.4 стр.140 подр.2.1 Раздела 2 = '") +
		НСтр("ru = 'гр.3 стр.140 подр.2.1 Раздела 2 х гр.10 стр.030 Раздела 2 + 1/2 гр.3 стр.140 подр.2.1 ';
			|en = 'гр.3 стр.140 подр.2.1 Раздела 2 х гр.10 стр.030 Раздела 2 + 1/2 гр.3 стр.140 подр.2.1 '") +
		НСтр("ru = 'Раздела 2 х гр.10 стр.040 Раздела 2';
			|en = 'Раздела 2 х гр.10 стр.040 Раздела 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]';
													|en = '%1 = %2 х %3 + 1/2 х %2 х %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21П001", "П000020014004");
	ИменаПоказателей.Вставить("Р21П002", "П000020014003");
	ИменаПоказателей.Вставить("Р02П001", "П000020003010");
	ИменаПоказателей.Вставить("Р02П002", "П000020004010");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_17_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_17_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел2);
	
	РасчетнаяСумма = Окр(Показатели.Р21П002.Значение * Показатели.Р02П001.Значение + 
		Показатели.Р21П002.Значение / 2 * Показатели.Р02П002.Значение);
	Настройки.ЭтоОшибка = НЕ Показатели.Р21П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р21П001.Значение, Показатели.Р21П002.Значение, Показатели.Р02П001.Значение,
		Показатели.Р02П002.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_18()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.18';
													|en = '1.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.370 НК РФ';
													|en = 'ст.370 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Ставка налога в стр.030 подр.2.2 Раздела 2 = ';
														|en = 'Ставка налога в стр.030 подр.2.2 Раздела 2 = '") +
		НСтр("ru = 'стр.010 подр.2.2 Раздела 2 х стр.020 подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 > 1';
			|en = 'стр.010 подр.2.2 Раздела 2 х стр.020 подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 > 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 Итог [%4], когда %2 > 1';
													|en = '%1 = %2 х %3 Итог [%4], когда %2 > 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение ставки налога';
														|en = 'Ошибочное значение ставки налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220003003");
	ИменаПоказателей.Вставить("Р22С002", "П000220001003");
	ИменаПоказателей.Вставить("Р22С003", "П000220002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Показатели.Р22С002.Значение * Показатели.Р22С003.Значение;
		Настройки.ЭтоОшибка = Показатели.Р22С002.Значение > 1 И НЕ Показатели.Р22С001.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, Показатели.Р22С001.Значение,
			Показатели.Р22С002.Значение, Показатели.Р22С003.Значение, РасчетнаяСумма);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_19()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.19';
													|en = '1.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в стр.040 подр.2.2 Раздела 2 = стр.';
														|en = 'Количество игровых столов в стр.040 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '(020 + 030 + 050) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.010 подр.3.1 Раздела 3 ';
			|en = '(020 + 030 + 050) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.010 подр.3.1 Раздела 3 '") +
		НСтр("ru = ' и стр.010 подр.2.2 Раздела 2 > 0';
			|en = ' и стр.010 подр.2.2 Раздела 2 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 + %4 Итог [%5], когда %6 = %6 и %6 > 0';
													|en = '%1 = %2 + %3 + %4 Итог [%5], когда %6 = %6 и %6 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220004003");
	ИменаПоказателей.Вставить("Р31С001", "П000310002003");
	ИменаПоказателей.Вставить("Р31С002", "П000310003003");
	ИменаПоказателей.Вставить("Р31С003", "П000310005003");
	ИменаПоказателей.Вставить("Р31С004", "П000310001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С002, СтраницаРаздела);
		
		Показатели.Р31С001.Итог = 0;
		Показатели.Р31С002.Итог = 0;
		Показатели.Р31С003.Итог = 0;
		
		Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С004, СтраницаРаздела31);
			Если Показатели.Р22С001.Значение = Показатели.Р31С004.Значение Тогда
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С003, СтраницаРаздела31);
			
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Показатели.Р31С001.Итог + Показатели.Р31С002.Итог + Показатели.Р31С003.Итог;
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение > 0 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р31С001.Итог, Показатели.Р31С002.Итог, Показатели.Р31С003.Итог, 
			РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_20()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.20';
													|en = '1.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в стр.050 подр.2.2 Раздела 2 = стр.';
														|en = 'Количество игровых столов в стр.050 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '040 подр.2.2 Раздела 2 - стр.(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.';
			|en = '040 подр.2.2 Раздела 2 - стр.(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '010 подр.3.1 Раздела 3 = 1';
			|en = '010 подр.3.1 Раздела 3 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5], когда %6 = 1';
													|en = '%1 = %2 - (%3 + %4) Итог [%5], когда %6 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220005003");
	ИменаПоказателей.Вставить("Р22С003", "П000220004003");
	ИменаПоказателей.Вставить("Р31С001", "П000310005003");
	ИменаПоказателей.Вставить("Р31С002", "П000310006003");
	ИменаПоказателей.Вставить("Р31С003", "П000310001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С002, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С003, СтраницаРаздела);
		
		Показатели.Р31С001.Итог = 0;
		Показатели.Р31С002.Итог = 0;
		
		Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С003, СтраницаРаздела31);
			Если Показатели.Р22С001.Значение = Показатели.Р31С003.Значение Тогда
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
			
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Макс(0, Показатели.Р22С003.Значение - Показатели.Р31С001.Итог - Показатели.Р31С002.Итог);
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение = 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р22С003.Значение, Показатели.Р31С001.Итог, Показатели.Р31С002.Итог, 
			РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_21()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.21';
													|en = '1.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в стр.060 подр.2.2 Раздела 2 = стр.';
														|en = 'Количество игровых столов в стр.060 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.';
			|en = '(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '010 подр.3.1 Раздела 3 = 1';
			|en = '010 подр.3.1 Раздела 3 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4], когда %5 = 1';
													|en = '%1 = %2 + %3 Итог [%4], когда %5 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220006003");
	ИменаПоказателей.Вставить("Р31С001", "П000310005003");
	ИменаПоказателей.Вставить("Р31С002", "П000310006003");
	ИменаПоказателей.Вставить("Р31С003", "П000310001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С002, СтраницаРаздела);
		
		Показатели.Р31С001.Итог = 0;
		Показатели.Р31С002.Итог = 0;
		
		Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С003, СтраницаРаздела31);
			Если Показатели.Р22С001.Значение = Показатели.Р31С003.Значение Тогда
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
			
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Показатели.Р31С001.Итог + Показатели.Р31С002.Итог;
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение = 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р31С001.Итог, Показатели.Р31С002.Итог, 
			РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_22()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.22';
													|en = '1.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в стр.070 подр.2.2 Раздела 2 = стр.';
														|en = 'Количество игровых столов в стр.070 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '040 подр.2.2 Раздела 2 - стр.(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.';
			|en = '040 подр.2.2 Раздела 2 - стр.(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '010 подр.3.1 Раздела 3 и > 1';
			|en = '010 подр.3.1 Раздела 3 и > 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 - (%3 + %4) Итог [%5], когда %6 > 1';
													|en = '%1 = %2 - (%3 + %4) Итог [%5], когда %6 > 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220007003");
	ИменаПоказателей.Вставить("Р22С003", "П000220004003");
	ИменаПоказателей.Вставить("Р31С001", "П000310005003");
	ИменаПоказателей.Вставить("Р31С002", "П000310006003");
	ИменаПоказателей.Вставить("Р31С003", "П000310001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С002, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С003, СтраницаРаздела);
		
		Показатели.Р31С001.Итог = 0;
		Показатели.Р31С002.Итог = 0;
		
		Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С003, СтраницаРаздела31);
			Если Показатели.Р22С001.Значение = Показатели.Р31С003.Значение Тогда
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
			
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Макс(0, Показатели.Р22С003.Значение - Показатели.Р31С001.Итог - Показатели.Р31С002.Итог);
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение > 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р22С003.Значение, Показатели.Р31С001.Итог, Показатели.Р31С002.Итог, 
			РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_23()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.23';
													|en = '1.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в стр.080 подр.2.2 Раздела 2 = стр.';
														|en = 'Количество игровых столов в стр.080 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.';
			|en = '(050 + 060) подр.3.1 Раздела 3, если стр.010 подр.2.2 Раздела 2 = стр.'") +
		НСтр("ru = '010 подр.3.1 Раздела 3 и > 1';
			|en = '010 подр.3.1 Раздела 3 и > 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 Итог [%4], когда %5 > 1';
													|en = '%1 = %2 + %3 Итог [%4], когда %5 > 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220008003");
	ИменаПоказателей.Вставить("Р31С001", "П000310005003");
	ИменаПоказателей.Вставить("Р31С002", "П000310006003");
	ИменаПоказателей.Вставить("Р31С003", "П000310001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С001, СтраницаРаздела);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22С002, СтраницаРаздела);
		
		Показатели.Р31С001.Итог = 0;
		Показатели.Р31С002.Итог = 0;
		
		Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
			ЗаполнитьПоказатель(Показатели.Р31С003, СтраницаРаздела31);
			Если Показатели.Р22С001.Значение = Показатели.Р31С003.Значение Тогда
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
			
			КонецЕсли;
		КонецЦикла; 
		
		РасчетнаяСумма = Показатели.Р31С001.Итог + Показатели.Р31С002.Итог;
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение > 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р31С001.Итог, Показатели.Р31С002.Итог, 
			РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_24()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.24';
													|en = '1.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.090 подр.2.2 Раздела 2 = стр.(050 х 020) ';
														|en = 'Сумма налога в стр.090 подр.2.2 Раздела 2 = стр.(050 х 020) '") +
		НСтр("ru = 'подр.2.2 Раздела 2 + стр.(060 х 1/2 х 020) подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 = 1';
			|en = 'подр.2.2 Раздела 2 + стр.(060 х 1/2 х 020) подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 = 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + %4 х 1/2 х %3 Итог [%5], когда %6 = 1';
													|en = '%1 = %2 х %3 + %4 х 1/2 х %3 Итог [%5], когда %6 = 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220009003");
	ИменаПоказателей.Вставить("Р22С003", "П000220005003");
	ИменаПоказателей.Вставить("Р22С004", "П000220006003");
	ИменаПоказателей.Вставить("Р22С005", "П000220002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р22С003.Значение * Показатели.Р22С005.Значение + 
			Показатели.Р22С004.Значение * Показатели.Р22С005.Значение / 2);
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение = 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р22С003.Значение, Показатели.Р22С005.Значение, 
			Показатели.Р22С004.Значение, РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_25()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.25';
													|en = '1.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 2';
														|en = 'Раздел 2'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.090 подр.2.2 Раздела 2 = стр.(070 х 030) ';
														|en = 'Сумма налога в стр.090 подр.2.2 Раздела 2 = стр.(070 х 030) '") +
		НСтр("ru = 'подр.2.2 Раздела 2 + стр.(080 х 1/2 х 030) подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 > 1';
			|en = 'подр.2.2 Раздела 2 + стр.(080 х 1/2 х 030) подр.2.2 Раздела 2, если стр.010 подр.2.2 Раздела 2 > 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 х %3 + %4 х 1/2 х %3 Итог [%5], когда %6 > 1';
													|en = '%1 = %2 х %3 + %4 х 1/2 х %3 Итог [%5], когда %6 > 1'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22С001", "П000220001003");
	ИменаПоказателей.Вставить("Р22С002", "П000220009003");
	ИменаПоказателей.Вставить("Р22С003", "П000220007003");
	ИменаПоказателей.Вставить("Р22С004", "П000220008003");
	ИменаПоказателей.Вставить("Р22С005", "П000220003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Раздел22 Цикл
	
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		РасчетнаяСумма = Окр(Показатели.Р22С003.Значение * Показатели.Р22С005.Значение + 
			Показатели.Р22С004.Значение * Показатели.Р22С005.Значение / 2);
		Настройки.ЭтоОшибка = Показатели.Р22С001.Значение > 1 И НЕ Показатели.Р22С002.Значение = РасчетнаяСумма;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
			Показатели.Р22С002.Значение, Показатели.Р22С003.Значение, Показатели.Р22С005.Значение, 
			Показатели.Р22С004.Значение, РасчетнаяСумма, Показатели.Р22С001.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_3

&НаСервере
Процедура ПроверкаКС_1_26_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.26.1';
													|en = '1.26.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.010 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.010 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.020 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.020 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030001003");
	ИменаПоказателей.Вставить("Р31С001", "П000310002003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_26_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.26.2';
													|en = '1.26.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.3 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.3 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.3 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.3 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "03");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_27()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.27';
													|en = '1.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.020 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.020 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.030 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.030 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030002003");
	ИменаПоказателей.Вставить("Р31С001", "П000310003003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_28()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.28';
													|en = '1.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.030 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.030 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.040 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.040 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030003003");
	ИменаПоказателей.Вставить("Р31С001", "П000310004003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_29()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.29';
													|en = '1.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.040 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.040 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.050 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.050 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030004003");
	ИменаПоказателей.Вставить("Р31С001", "П000310005003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_30()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.30';
													|en = '1.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.050 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.050 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.060 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.060 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030005003");
	ИменаПоказателей.Вставить("Р31С001", "П000310006003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.31';
													|en = '1.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество игровых столов в гр.3 стр.060 Раздела 3 = сумме ';
														|en = 'Количество игровых столов в гр.3 стр.060 Раздела 3 = сумме '") +
		НСтр("ru = 'стр.070 всех подр.3.1 Раздела 3, у которых стр.010 >= 1';
			|en = 'стр.070 всех подр.3.1 Раздела 3, у которых стр.010 >= 1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества игровых столов';
														|en = 'Ошибочное значение количества игровых столов'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П000030006003");
	ИменаПоказателей.Вставить("Р31С001", "П000310007003");
	ИменаПоказателей.Вставить("Р31С002", "П000310001003");
	
	Настройки.Вставить("ИменаПоказателей", ИменаПоказателей);
	ПроверкаКС_1_31_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_31_код(Настройки)
	
	Перем Показатели;
	
	СформироватьПоказатели(Показатели, Настройки.ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П001, ДанныеКС.Раздел3);
	
	Для каждого СтраницаРаздела31 Из ДанныеКС.Раздел31 Цикл
		ЗаполнитьПоказатель(Показатели.Р31С002, СтраницаРаздела31);
		Если Показатели.Р31С002.Значение >= 1 Тогда
			
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р31С001, СтраницаРаздела31);
		
		КонецЕсли;
	КонецЦикла; 
	
	Настройки.ЭтоОшибка = НЕ Показатели.Р03П001.Значение = Показатели.Р31С001.Итог;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р03П001.Значение, Показатели.Р31С001.Итог);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_32()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.32';
													|en = '1.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.4 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.4 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.4 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "04");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_33()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.33';
													|en = '1.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.4 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.4 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.4 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.4 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "04");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_34()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.34';
													|en = '1.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.5 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.5 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.5 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "05");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_35()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.35';
													|en = '1.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.5 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.5 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.5 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.5 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "05");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_36()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.36';
													|en = '1.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.6 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.6 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.6 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "06");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_37()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.37';
													|en = '1.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.6 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.6 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.6 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.6 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "06");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_38()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.38';
													|en = '1.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.7 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.7 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.7 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "07");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_39()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.39';
													|en = '1.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.7 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.7 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.7 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.7 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "07");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.40';
													|en = '1.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.8 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.8 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.8 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "08");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.40.1';
													|en = '1.40.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.9 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.9 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.9 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "09");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.40.2';
													|en = '1.40.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'ст.367 НК РФ';
													|en = 'ст.367 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.010 Раздела 3 = ';
														|en = 'Количество объектов налогообложения в гр.10 стр.010 Раздела 3 = '") +
		НСтр("ru = 'гр.10 стр.060 Раздела 3 отчета за предыдущий налоговый период';
			|en = 'гр.10 стр.060 Раздела 3 отчета за предыдущий налоговый период'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "10");
	ПроверкаКС_1_40_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_40_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001"	, "П0000300010" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П002П", "П0000300060" + Настройки.НомерГрафы);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П001	, ДанныеКС.Раздел3);
	
	Если ДанныеКС.ОтчетПРПНайден Тогда
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р03П002П, ДанныеКС.Раздел3ПРП);
	Иначе
		Показатели.Р03П002П.Значение = 0;
	КонецЕсли;
	
	Настройки.ЭтоОшибка = ДанныеКС.ОтчетПРПНайден И НЕ Показатели.Р03П001.Значение = Показатели.Р03П002П.Значение;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р03П001.Значение, Показатели.Р03П002П.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.41';
													|en = '1.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.8 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.8 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.8 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.8 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "08");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41_1()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.41.1';
													|en = '1.41.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.9 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.9 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.9 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.9 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "09");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41_2()
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.41.2';
													|en = '1.41.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 3';
														|en = 'Раздел 3'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'арифметическая ошибка';
													|en = 'арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Количество объектов налогообложения в гр.10 стр.060 Раздела 3 ';
														|en = 'Количество объектов налогообложения в гр.10 стр.060 Раздела 3 '") +
		НСтр("ru = '= гр.10 стр.(010 + 020 - 030 + 040 - 050) Раздела 3';
			|en = '= гр.10 стр.(010 + 020 - 030 + 040 - 050) Раздела 3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]';
													|en = '%1 = %2 + %3 - %4 + %5 - %6 Итог [%7]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное значение количества объектов налогообложения';
														|en = 'Ошибочное значение количества объектов налогообложения'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("НомерГрафы", "10");
	ПроверкаКС_1_41_код(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_1_41_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р03П001", "П0000300060" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П002", "П0000300010" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П003", "П0000300020" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П004", "П0000300030" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П005", "П0000300040" + Настройки.НомерГрафы);
	ИменаПоказателей.Вставить("Р03П006", "П0000300050" + Настройки.НомерГрафы);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел3);
	
	РасчетнаяСумма = Макс(0, Показатели.Р03П002.Значение + Показатели.Р03П003.Значение - 
		Показатели.Р03П004.Значение + Показатели.Р03П005.Значение - Показатели.Р03П006.Значение);
	Настройки.ЭтоОшибка = НЕ Показатели.Р03П001.Значение = РасчетнаяСумма;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р03П001.Значение, Показатели.Р03П002.Значение, Показатели.Р03П003.Значение, 
		Показатели.Р03П004.Значение, Показатели.Р03П005.Значение, Показатели.Р03П006.Значение, РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Дополнительные

&НаСервере
Процедура ПроверкаКС_1_42()
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.42';
													|en = '1.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Раздел 1';
														|en = 'Раздел 1'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@';
													|en = 'Письмо ФНС России от 21.02.2023 № ЕА-4-15/2048@'"));
	Заголовки.Вставить("ОписаниеКС"			, НСтр("ru = 'Сумма налога в стр.030 Раздела 1 >= 0';
														|en = 'Сумма налога в стр.030 Раздела 1 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога';
														|en = 'Ошибочная сумма налога'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено. Дублирует КС 16.1.к';
													|en = 'Отключено. Дублирует КС 16.1.к'"));
	Настройки = ОбработатьНастройки(Заголовки);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	// Отключено
	Возврат;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С030", "П000010003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел1);
	
	Настройки.ЭтоОшибка = Показатели.Р01С030.Значение < 0;
	Настройки.Расшифровка = ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки, 
		Показатели.Р01С030.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" ИЛИ Ячейка.Раздел = "Раздел2" ИЛИ Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел22" ИЛИ Ячейка.Раздел = "Раздел31" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						Если ИмяРаздела = "Раздел22" ИЛИ ИмяРаздела = "Раздел31" Тогда
							
							ДанныеСтраницы = ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Данные;
							
							СтруктПарам = Новый Структура;
							ИмяПоказателя = ?(ИмяРаздела = "Раздел22", "П000220001003", "П000310001003");
							СтруктПарам.Вставить("КолИгровыхПолей", ДанныеСтраницы[ИмяПоказателя]);
							СтруктПарам.Вставить("НомерСтраницы", НомерСтраницыРаздела);
							
							ЭлементРаздел.КолонкаРазделыОтчета = ПредставлениеСтраницы_Раздел22_Раздел31(СтруктПарам);
							
						Иначе
							
							НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"), СтруктураРаздела["НаимСтраницы"], "Стр. ");
							ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
							+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
							
						КонецЕсли;
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтраницы_Раздел22_Раздел31(СтруктураПараметров)
	
	Возврат "Стр. " + Формат(СтруктураПараметров.НомерСтраницы, "ЧГ=")
	+ ?(СтруктураПараметров.КолИгровыхПолей > 0, ". Игровых полей: " + СтруктураПараметров.КолИгровыхПолей, "");
	
КонецФункции

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
