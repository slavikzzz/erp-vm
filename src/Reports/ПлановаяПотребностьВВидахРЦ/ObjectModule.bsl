#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Дополнительные команды
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("ПланПроизводства", Параметры.ПараметрКоманды);
		
		Сценарий = Параметры.ПараметрКоманды.Сценарий;
		Если НЕ Сценарий.ИспользоватьДляПланированияМатериалов Тогда
			
			ТекстСообщения = НСтр("ru = 'В сценарии ""%Сценарий%"" не включен расчет плановых потребностей!';
									|en = 'The scenario ""%Сценарий%"" does not have the planned demands calculation enabled!'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Сценарий);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Расшифровка")
		И Параметры.Расшифровка <> Неопределено Тогда
		
		ЗаменятьВариант = Ложь;
		
		Если Параметры.Расшифровка.ПрименяемыеНастройки.Структура.Количество() > 0 Тогда
			
			ПолеНоменклатураПродукции = Новый ПолеКомпоновкиДанных("НоменклатураПродукции");
			ПолеХарактеристикаПродукции = Новый ПолеКомпоновкиДанных("ХарактеристикаПродукции");
			
			ПоляГруппировки = Параметры.Расшифровка.ПрименяемыеНастройки.Структура[0].ПоляГруппировки; // ПоляГруппировкиКомпоновкиДанных - 
			
			Для каждого Группировка Из ПоляГруппировки.Элементы Цикл
			
				Если Группировка.Поле = ПолеНоменклатураПродукции 
					ИЛИ Группировка.Поле = ПолеХарактеристикаПродукции Тогда
					
					ЗаменятьВариант = Истина;
					Прервать;
				
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЕсли; 
		
		ЭтоКонтекстныйОтчет = Ложь;
		
		// заполняем параметры расшифровки
		Если ЭтоАдресВременногоХранилища(Параметры.Расшифровка.Данные) Тогда
		
			ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные);
			
			Если НЕ ДанныеРасшифровки.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта")
				ИЛИ НЕ (ДанныеРасшифровки.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта = "ПлановаяПотребностьВВидахРЦКонтекст"
				ИЛИ ДанныеРасшифровки.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта = "Основной") Тогда
			
				Возврат;
			
			КонецЕсли; 
			ЭтоКонтекстныйОтчет = ДанныеРасшифровки.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта = "ПлановаяПотребностьВВидахРЦКонтекст";
		КонецЕсли; 
		
		Если НЕ ЗаменятьВариант Тогда
			Возврат;
		КонецЕсли; 
		
		Если Параметры.Свойство("КлючВарианта") Тогда
			Параметры.КлючВарианта = ?(ЭтоКонтекстныйОтчет, "РасшифровкаКонтекст", "Расшифровка");
		КонецЕсли; 
		Если Параметры.Свойство("КлючНазначенияИспользования") Тогда
			Параметры.КлючНазначенияИспользования = ?(ЭтоКонтекстныйОтчет, "РасшифровкаКонтекст", "Расшифровка");
		КонецЕсли;
		
		ЭтаФорма.КлючТекущегоВарианта = ?(ЭтоКонтекстныйОтчет, "РасшифровкаКонтекст", "Расшифровка");
		
		ЭтаФорма.РежимРасшифровки = Ложь;
		ЭтаФорма.НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
		ЭтаФорма.НастройкиОтчета.ВариантСсылка = ВариантыОтчетов.ВариантОтчета(ЭтаФорма.НастройкиОтчета.ОтчетСсылка, ЭтаФорма.КлючТекущегоВарианта);
		
	КонецЕсли;
	

КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
Процедура ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	Если КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта") 
		И ((КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта = "ПлановаяПотребностьВВидахРЦКонтекст"
		И ЭтаФорма.КлючТекущегоВарианта = "РасшифровкаКонтекст")
		ИЛИ (КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта = "Основной"
		И ЭтаФорма.КлючТекущегоВарианта = "Расшифровка")) Тогда
		
		Сценарий = Неопределено;
		КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Свойство("Сценарий", Сценарий);
		
		ОтчетОбъект = Отчеты.ПлановаяПотребностьВВидахРЦ.Создать();
		Вариант = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ЭтаФорма.КлючТекущегоВарианта);
		
		КомпоновкаДанныхКлиентСервер.ЗаполнитьЭлементы(Вариант.Настройки.ПараметрыДанных,	КомпоновщикНастроекФормы.Настройки.ПараметрыДанных);
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Вариант.Настройки.Отбор,			КомпоновщикНастроекФормы.Настройки.Отбор, Ложь);
		
		КомпоновщикНастроекФормы.ЗагрузитьНастройки(Вариант.Настройки);
		
		Если Сценарий <> Неопределено Тогда
		
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				КомпоновщикНастроекФормы, 
				"Сценарий", 
				Сценарий);
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", ЭтаФорма.КлючТекущегоВарианта);
	
	Если ЭтаФорма.ФормаПараметры.Отбор.Свойство("ПланПроизводства") Тогда
		
		КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Вставить(
			"Сценарий", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтаФорма.ФормаПараметры.Отбор.ПланПроизводства, "Сценарий"));
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроекФормы, 
			"Сценарий", 
			КомпоновщикНастроекФормы.Настройки.ДополнительныеСвойства.Сценарий);
		
		
	КонецЕсли; 
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, СтандартнаяОбработка)
	
	КлючТекущегоВарианта = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючТекущегоВарианта;
	Сценарий = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, "Сценарий");
	
	Если КлючТекущегоВарианта = "Основной"
	   И Сценарий <> Неопределено
	   И ЗначениеЗаполнено(Сценарий.Значение) Тогда
		
		// Проверка структуры настроек отчета на наличие в нем диаграмм и их использования
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 2
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("1")) = Тип("ДиаграммаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("1").Имя = "Диаграмма требуемой доступности"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("1").Использование = Истина
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("2")) = Тип("ГруппировкаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Имя = "Группировка диаграмм требуемых мощностей"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Использование = Истина
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0")) = Тип("ДиаграммаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0").Имя = "Диаграммы требуемых мощностей"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0").Использование = Истина Тогда
			
			// Диаграмма требуемых мощностей сгруппирована по полю компоновки данных ВидРабочегоЦентра
			ДиаграммаТребуемойДоступности = КомпоновщикНастроек.Настройки.Структура.Получить("1");
			ГруппировкаДиаграммТребуемыхМощностей = КомпоновщикНастроек.Настройки.Структура.Получить("2");
			ДиаграммыТребуемыхМощностей = ГруппировкаДиаграммТребуемыхМощностей.Структура.Получить("0");
			
			ТипДиаграммыТД = ДиаграммаТребуемойДоступности.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
			СоставПодписейДиаграммыТД = ТипДиаграммыТД.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей");
			РазмещениеЛегендыДиаграммыТД = ТипДиаграммыТД.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
			ЛинияДиаграммыТД = ТипДиаграммыТД.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ИнформационныеЛинииЗначений"); 
			ОкантовкаДиаграммыТД = ТипДиаграммыТД.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.Окантовка");
			ЗаголовокДиаграммыТД = ДиаграммаТребуемойДоступности.ПараметрыВывода.Элементы.Найти("Заголовок");
			
			ТипДиаграммТМ = ДиаграммыТребуемыхМощностей.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
			СоставПодписейДиаграммТМ = ТипДиаграммТМ.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ВидПодписей");
			РазмещениеЛегендДиаграммТМ = ТипДиаграммТМ.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
			ЛинияДиаграммТМ = ТипДиаграммТМ.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ИнформационныеЛинииЗначений");
			ОкантовкаДиаграммТМ = ТипДиаграммТМ.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.Окантовка");
			ИспользованиеНечисловыхЗначенийДиаграммТМ = ТипДиаграммТМ.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.ИспользованиеНечисловыхЗначений");
			ЗаголовокДиаграммТМ = ГруппировкаДиаграммТребуемыхМощностей.ПараметрыВывода.Элементы.Найти("Заголовок");
			
			МаксимальнаяМощность = ДиаграммыТребуемыхМощностей.Выбор.ДоступныеПоляВыбора.Элементы.Найти("МаксимальнаяМощность");
			
			СоставПодписейДиаграммыТД.Использование = Истина;
			СоставПодписейДиаграммыТД.Значение = ВидПодписейКДиаграмме.Значение;
			РазмещениеЛегендыДиаграммыТД.Использование = Истина;
			РазмещениеЛегендыДиаграммыТД.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Верх;
			ЛинияДиаграммыТД.Использование = Истина;
			ОкантовкаДиаграммыТД.Использование = Истина;
			ОкантовкаДиаграммыТД.Значение = Истина;
			ЗаголовокДиаграммыТД.Использование = Истина;
			ЗаголовокДиаграммыТД.Значение = НСтр("ru = 'Диаграмма требуемой доступности видов РЦ';
												|en = 'Required work center type availability'");
			
			СоставПодписейДиаграммТМ.Использование = Истина;
			СоставПодписейДиаграммТМ.Значение = ВидПодписейКДиаграмме.Значение;
			РазмещениеЛегендДиаграммТМ.Использование = Истина;
			РазмещениеЛегендДиаграммТМ.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Верх;
			ЛинияДиаграммТМ.Использование = Истина;
			ОкантовкаДиаграммТМ.Использование = Истина;
			ОкантовкаДиаграммТМ.Значение = Истина;
			ИспользованиеНечисловыхЗначенийДиаграммТМ.Использование = Истина;
			ИспользованиеНечисловыхЗначенийДиаграммТМ.Значение = ИспользованиеНечисловыхЗначенийДиаграммы.Пропускать;
			ЗаголовокДиаграммТМ.Использование = Истина;
			ЗаголовокДиаграммТМ.Значение = НСтр("ru = 'Диаграммы анализа мощностей видов РЦ';
												|en = 'Capacity analysis of work center types'");
			
			ЛинияДиаграммы = ЛинияДиаграммыТД.Значение; // ИнформационныеЛинииДиаграммы - 
			ДобавлениеИнформационнойЛинииДиаграммеТД = ЛинияДиаграммы.Добавить();
			ДобавлениеИнформационнойЛинииДиаграммеТД.Значение = 100;
			ДобавлениеИнформационнойЛинииДиаграммеТД.Подсказка = НСтр("ru = '100% введённой доступности';
																		|en = '100% of entered availability'");
			ДобавлениеИнформационнойЛинииДиаграммеТД.ПроцентПолупрозрачности = 50;
			ДобавлениеИнформационнойЛинииДиаграммеТД.Цвет = Новый Цвет(0, 150, 150);
			
			ЛинияДиаграммы = ЛинияДиаграммТМ.Значение; // ИнформационныеЛинииДиаграммы -
			ДобавлениеИнформационнойЛинииДиаграммамТМ = ЛинияДиаграммы.Добавить();
			ДобавлениеИнформационнойЛинииДиаграммамТМ.Значение = МаксимальнаяМощность.Поле;
			ДобавлениеИнформационнойЛинииДиаграммамТМ.Подсказка = НСтр("ru = 'Максимальная мощность';
																		|en = 'Maximum capacity'");
			ДобавлениеИнформационнойЛинииДиаграммамТМ.ПроцентПолупрозрачности = 50;
			ДобавлениеИнформационнойЛинииДиаграммамТМ.Цвет = Новый Цвет(0, 150, 150);
		КонецЕсли;
		
		Планирование.ПлановаяПотребностьВВидахРЦПриКомпоновкеРезультата(КомпоновщикНастроек, ДокументРезультат, СтандартнаяОбработка);
		
	ИначеЕсли КлючТекущегоВарианта = "Основной" Тогда
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 2
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("1")) = Тип("ДиаграммаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("1").Имя = "Диаграмма требуемой доступности"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("1").Использование = Истина
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("2")) = Тип("ГруппировкаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Имя = "Группировка диаграмм требуемых мощностей"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Использование = Истина
		   И Тип(КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0")) = Тип("ДиаграммаКомпоновкиДанных")
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0").Имя = "Диаграммы требуемых мощностей"
		   И КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0").Использование = Истина Тогда
			
			КомпоновщикНастроек.Настройки.Структура.Получить("1").Использование = Ложь;
			КомпоновщикНастроек.Настройки.Структура.Получить("2").Использование = Ложь;
			КомпоновщикНастроек.Настройки.Структура.Получить("2").Структура.Получить("0").Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли