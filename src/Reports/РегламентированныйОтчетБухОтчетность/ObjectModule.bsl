#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		СформироватьСтруктуруРеквизитовФормы2014Кв1(СтруктураРеквизитовФормы);
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		СформироватьСтруктуруРеквизитовФормы2019Кв1(СтруктураРеквизитовФормы);
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		СформироватьСтруктуруРеквизитовФормы2025Кв1(СтруктураРеквизитовФормы);
		Возврат;
		
	Иначе
		// Элементы общие для форм не указанных ранее.
		СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекФормаОтчета");
		
	КонецЕсли;
	
	// Элементы общие для всех форм.
	СтруктураРеквизитовФормы.Вставить("УчетРасходовПоЭлементамЗатрат", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", "");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаАналогичногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ПериодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("ОтчетныйГодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("ПрименениеЕНВД");
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН0");
	СтруктураРеквизитовФормы.Вставить("ПрименениеУСН1");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ЭтоБалансНекоммерческойОрганизации");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("СоответствиеПоказателейМногострочныхЧастейИхОписанию");
	СтруктураРеквизитовФормы.Вставить("ЗаголовкиОтчетов");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("КоличествоСтрокИнформационногоМакета");
	СтруктураРеквизитовФормы.Вставить("ИмяСохраняемогоПараметра");
	СтруктураРеквизитовФормы.Вставить("СохраненныйВыборПользователя");
	
	СтруктураРеквизитовФормы.Вставить("ОборотыСчета75_01");
	СтруктураРеквизитовФормы.Вставить("ВключенныеДопСтрокиОФРПриПримененииЕНВД");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеСтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекБаланс");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	
	СтруктураРеквизитовФормы.Вставить("СпособСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаАктуальностиДанных");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
	// Для работы КС
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы2014Кв1(СтруктураРеквизитовФормы)
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2018");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекФормаОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	СтруктураРеквизитовФормы.Вставить("ФайлЗаявленияСоюзаСельхозпроизводителей");
	
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы2019Кв1(СтруктураРеквизитовФормы)
	
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/01/2021");
	СтруктураРеквизитовФормы.Вставить("РедакцияФормы");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекОФР");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекПояснения7");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеДеревоНастроекКорректировка");
	
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки");
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения");
	
	СтруктураРеквизитовФормы.Вставить("КонтрольныеСоотношенияАдресФормул");
	СтруктураРеквизитовФормы.Вставить("КонтрольныеСоотношенияАдресПоказателей");
	
	СтруктураРеквизитовФормы.Вставить("ПрименяетсяФСБУ25");
	
	СтруктураРеквизитовФормы.Вставить("ВычетИзРасчетаАктивов1530");
	
	ПримечанияОДДС = Новый Структура;
	ПримечанияОДДС.Вставить("П000100412203", "");
	ПримечанияОДДС.Вставить("П000100412204", "");
	ПримечанияОДДС.Вставить("П000100412403", "");
	ПримечанияОДДС.Вставить("П000100412404", "");
	ПримечанияОДДС.Вставить("П000100432203", "");
	ПримечанияОДДС.Вставить("П000100432204", "");
	СтруктураРеквизитовФормы.Вставить("ПримечанияОДДС", ПримечанияОДДС);
	
	СтруктураРеквизитовФормы.Вставить("ЭтоКрупнейшийНалогоплательщик", Ложь);
	
КонецПроцедуры

Процедура СформироватьСтруктуруРеквизитовФормы2025Кв1(СтруктураРеквизитовФормы)
	
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма", "");
	СтруктураРеквизитовФормы.Вставить("РедакцияФормы", "");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета", '0001-01-01');
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета", '0001-01-01');
	СтруктураРеквизитовФормы.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	
	// Элементы обслуживания сохранения и блокировки отчета.
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ЭтоИП", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЭтоБалансНекоммерческойОрганизации", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЭтоКрупнейшийНалогоплательщик", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела", "");
	
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная", "");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода", "");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода", "");
	
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода", "");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода", "");
	
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному", "");
	
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетнаяДень", "");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетнаяМесяц", "");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетнаяГод", "");
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей", "");
	СтруктураРеквизитовФормы.Вставить("АдресРезультатаЗаполнения", "");
	СтруктураРеквизитовФормы.Вставить("АдресРасшифровки", "");
	
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения", Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	СтруктураРеквизитовФормы.Вставить("мДелитель", 1000);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения", 0);
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата", "");
	
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента", 0);
	СтруктураРеквизитовФормы.Вставить("мВариант", 0);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	
	СтруктураРеквизитовФормы.Вставить("ФайлПояснительнойЗаписки", НоваяСтруктураДанныхФайла());
	СтруктураРеквизитовФормы.Вставить("ФайлАудиторскогоЗаключения", НоваяСтруктураДанныхФайла());
	
	СтруктураРеквизитовФормы.Вставить("ЗаголовокПериодОтчета", "");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации", "");
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьСсылкуВыбораОрганизаций", Ложь);
	
	// Элементы обслуживающие сценарий автоматического заполнения отчета по сведениям ИБ при его создании.
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Ложь);
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
	// Вспомогательные данные настройки заполнения отчета по данным прикладного решения.
	
	// Хранилище настроек, измененных пользователем во время сеанса работы с отчетом.
	СтруктураРеквизитовФормы.Вставить("АдресЗаполняемыеПоказатели", "");
	СтруктураРеквизитовФормы.Вставить("РазделыСПоддержкойНастройкиЗаполнения", Новый Структура);
	
КонецПроцедуры

Функция НоваяСтруктураБлоковПояснения4(ИмяФормы) Экспорт
	
	СтруктураБлоковРаздела = Новый Структура;
	
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть41", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5400", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ВТомЧисле5400", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5401", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5402", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5403", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5404", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5405", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5406", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5407", Новый Структура("Видимость", Ложь));
	
	СтруктураБлоковРаздела.Вставить("ДопСтрока5400", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ДобавлениеСтроки_ДопСтрока5400", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ПустаяСтрока1", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("Ограничители1", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть42", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5440", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ВТомЧисле5440", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ДопСтрока5440", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ДобавлениеСтроки_ДопСтрока5440", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ОсновнаяЧасть5445", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ВТомЧисле5445", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ДопСтрока5445", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("ДобавлениеСтроки_ДопСтрока5445", Новый Структура("Видимость", Истина));
	
	СтруктураБлоковРаздела.Вставить("ПустаяСтрока2", Новый Структура("Видимость", Истина));
	СтруктураБлоковРаздела.Вставить("Ограничители2", Новый Структура("Видимость", Истина));
	
	Возврат СтруктураБлоковРаздела;
	
КонецФункции

Функция НоваяСтруктураБлоковКорректировка(ИмяФормы, ЭтоБалансНКО)
	
	СтруктураБлоковРаздела = Новый Структура;
	
	СтруктураБлоковРаздела.Вставить("Шапка", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГодЗаголовок", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГодАктив", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1110", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1120", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1130", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1140", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1150", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1160", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1170", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1180", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1190", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1100", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод2",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1210", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1220", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1230", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1240", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1250", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1260", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1200", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1600", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГодПассив", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод3",    НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1310", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1320", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1340", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1350", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1360", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1370", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1300", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод3НКО",    НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1310НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1320НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1350НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1360НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1370НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1300НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод4",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1410", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1420", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1430", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1450", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1400", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод5",   НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1510", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1520", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1530", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1540", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1550", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1500", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ПрошлыйГод1700", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошломуЗаголовок", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошломуАктив", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1110", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1120", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1130", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1140", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1150", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1160", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1170", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1180", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1190", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1100", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому2",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1210", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1220", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1230", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1240", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1250", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1260", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1200", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1600", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошломуПассив", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому3",    НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1310", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1320", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1340", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1350", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1360", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1370", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1300", НовыеПараметрыБлокаРаздела(НЕ ЭтоБалансНКО));
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому3НКО",    НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1310НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1320НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1350НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1360НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1370НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1300НКО", НовыеПараметрыБлокаРаздела(ЭтоБалансНКО));
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому4",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1410", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1420", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1430", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1450", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1400", НовыеПараметрыБлокаРаздела());
	
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому5",    НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1510", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1520", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1530", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1540", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1550", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1500", НовыеПараметрыБлокаРаздела());
	СтруктураБлоковРаздела.Вставить("ГодПредшествующийПрошлому1700", НовыеПараметрыБлокаРаздела());
	
	Возврат СтруктураБлоковРаздела;
	
КонецФункции

Функция НовыеПараметрыБлокаРаздела(Видимость = Истина)
	
	Возврат Новый Структура("Видимость", Видимость);
	
КонецФункции

Процедура ВосстановитьВариантыАвтозаполненияПоказателейРаздела(ВариантыЗаполнения, СохраненныеВарианты) Экспорт
	
	Для Каждого СохраненныйВариант Из СохраненныеВарианты.Значение Цикл
		Для Каждого ОписаниеПоказателя Из СохраненныйВариант Цикл
			ИмяПоказателя = ОписаниеПоказателя.КодПоказателя;
			КодВарианта = ОписаниеПоказателя.ВариантЗаполнения;
			Если КодВарианта <> 1 И КодВарианта <> 2 Тогда
				Продолжить; // Корректировка не требуется
			КонецЕсли;
			
			СтрокиВарианта = ВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
			Если СтрокиВарианта.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаВарианта = СтрокиВарианта[0];
			Если СтрокаВарианта.ВариантЗаполнения = 3 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаВарианта, ОписаниеПоказателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Прервать; // Исключение избыточных таблиц из ранее сохраненных отчетов
		
	КонецЦикла;
	
КонецПроцедуры

Функция АдресОрганизацииПоУмолчанию(Организация) Экспорт
	
	ПолныйАдрес = ",,,,,,,,,";
	ПредставлениеАдреса = "";
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		ВидыАдресов = "АдрМЖ, АдрПрописки";
	Иначе
		ВидыАдресов = "АдрФакт, АдрЮР, АдрПочт";
	КонецЕсли;
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , ВидыАдресов);
	
	ИменаВидовАдресов = СтрРазделить(ВидыАдресов, ",");
	
	Для Каждого ИмяВидаАдреса Из ИменаВидовАдресов Цикл
		ИмяВидаАдреса = СокрЛП(ИмяВидаАдреса);
		
		ПолныйАдрес = Адреса[ИмяВидаАдреса];
		ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
		
		Если ЗначениеЗаполнено(СтрЗаменить(ПредставлениеАдреса, ",", "")) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПолныйАдрес, ПредставлениеАдреса);
	
КонецФункции

// Конструктор структуры данных дополнительного файла.
// 
// Возвращаемое значение:
//   Структура:
//     * СведенияИзменены - Булево
//     * ХранилищеФайла - Строка
//     * ИмяФайла - Строка
//     * Размер - Число
//     * ДатаДобавления - Дата
//
Функция НоваяСтруктураДанныхФайла() Экспорт
	
	СтруктураДанныхФайла = Новый Структура;
	СтруктураДанныхФайла.Вставить("СведенияИзменены", Ложь);
	СтруктураДанныхФайла.Вставить("ХранилищеФайла", "");
	СтруктураДанныхФайла.Вставить("ИмяФайла", "");
	СтруктураДанныхФайла.Вставить("Размер", 0);
	СтруктураДанныхФайла.Вставить("ДатаДобавления", '0001-01-01');
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

#КонецОбласти

#Область НастройкиФормОтчетности

Функция ПолучитьСтруктуруОтчета2011Кв4(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СоставНастройкаОтчета = Новый Структура;
	
	СтруктураОтчета = Новый Структура;
	
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_НКО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО");
		
	Иначе
		
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_КО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс");
		
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(ИмяФормы, СоставНастройкаОтчета, СтруктураРеквизитовФормы);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

Процедура ДополнитьСтруктуруОтчетаОбщимиОтчетами(ИмяФормы, СоставНастройкаОтчета, СтруктураРеквизитовФормы) Экспорт
	
	// Отчет о прибылях и убытках.
	СтруктураОтчета = Новый Структура;
	Если ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                    "ФормаОтчета");
		СтруктураОтчета.Вставить("ИмяМакета",                      "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ФормаОтчетаНеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОПУ_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОПУ_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОПУ", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОИК");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОИК");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураОтчета);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Отчет о целевом использовании средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы", "ОЦИПС");
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		ДатаОкончания = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания;
	Иначе
		ДатаОкончания = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецЕсли;
		
	Если ДатаОкончания >= '20180101' Тогда
		СтруктураОтчета.Вставить("ИмяМакета",            "ОЦИС");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "ОЦИС");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",          "ОЦИПС");
		СтруктураОтчета.Вставить("ИмяМакета",            "ОЦИПС");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "ОЦИПС");
	КонецЕсли;
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОЦИПС", СтруктураОтчета);
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "РасчетАктивов");
	
	Если ДатаОкончания >= '20120101' Тогда
		СтруктураОтчета.Вставить("ИмяМакета",                  "РасчетАктивов_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",       "РасчетАктивов");
	Иначе
		СтруктураОтчета.Вставить("ИмяМакета",                  "РасчетАктивов");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",       "РасчетАктивов");
	КонецЕсли;
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения1");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения1");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения1");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения1");
	
	СоставНастройкаОтчета.Вставить("Пояснения1", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения2");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения2");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения2");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения2");
	
	СоставНастройкаОтчета.Вставить("Пояснения2", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения3");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения3");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения3");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения3");
	
	СоставНастройкаОтчета.Вставить("Пояснения3", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения4");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения4");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения4");
	СтруктураОтчета.Вставить("БлокиМакета", НоваяСтруктураБлоковПояснения4(ИмяФормы));
	
	СоставНастройкаОтчета.Вставить("Пояснения4", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения5");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения5");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения5");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения5");
	
	СоставНастройкаОтчета.Вставить("Пояснения5", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения6");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения6");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения6");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения6");
	
	СоставНастройкаОтчета.Вставить("Пояснения6", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения7");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения7");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения7");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения7");
	
	СоставНастройкаОтчета.Вставить("Пояснения7", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения8");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения8");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения8");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения8");
	
	СоставНастройкаОтчета.Вставить("Пояснения8", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения9");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения9");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения9");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения9");
	
	СоставНастройкаОтчета.Вставить("Пояснения9", СтруктураОтчета);
	
КонецПроцедуры

Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, ИмяРаздела,
	СтруктураРеквизитовФормы, ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета) Экспорт
	
	Если ИмяРаздела = "Баланс" Тогда
		Если ДеревоНастроекБаланс = Неопределено Тогда
			ДеревоНастроекБаланс = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ФормаОтчета" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДеревоНастроекСоставаДопСтрок2019(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета, ДеревоНастроекКорректировка, ДеревоНастроекПояснения7) Экспорт
	
	Если ИмяРаздела = "Баланс" Тогда
		Если ДеревоНастроекБаланс = Неопределено Тогда
			ДеревоНастроекБаланс = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		Если ДеревоНастроекФормаОтчета = Неопределено Тогда
			ДеревоНастроекФормаОтчета = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Корректировка" Тогда
		Если ДеревоНастроекКорректировка = Неопределено Тогда
			ДеревоНастроекКорректировка = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Пояснения7" Тогда
		Если ДеревоНастроекПояснения7 = Неопределено Тогда
			ДеревоНастроекПояснения7 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекПояснения7);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	ДанныеОтчета = Неопределено;
	СтруктураРеквизитовФормы = Неопределено;
	ДеревоНастроекБаланс = Неопределено;
	ДеревоНастроекФормаОтчета = Неопределено;
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИмяФормы          = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	РеглОтчетВыгружаетсяВБанк = Ложь;
	
	Если Параметры.Свойство("РеглОтчетВыгружаетсяВБанк")
	   И НЕ Параметры.РеглОтчетВыгружаетсяВБанк = Неопределено Тогда
		РеглОтчетВыгружаетсяВБанк = Параметры.РеглОтчетВыгружаетсяВБанк;
	КонецЕсли;
	
	СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СохраненныйОтчет;
	
	СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
		
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(
		ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, РеглОтчетВыгружаетсяВБанк);
	
	ОтчетыЗаполненыКорректно = ПроверитьВозможностьВыгрузки(ИмяФормы, СтруктураРеквизитовФормы,
		ДанныеОтчета, ПараметрыВыгрузки, РезультатВыгрузки);
	
	Если НЕ ОтчетыЗаполненыКорректно Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КешСхемВыгрузки = Неопределено;
	Параметры.Свойство("КешСхемВыгрузки", КешСхемВыгрузки);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхемВыгрузки);
	
	ЗаполнитьДанными(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки,
		ДанныеОтчета, СтруктураРеквизитовФормы);
	
	Если НЕ ПроверитьДанные(ИмяФормы, ДеревоВыгрузки, РезультатВыгрузки) Тогда
		ДанныеОтчета = Неопределено;
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "БухОтчетность");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	ДанныеОтчета = Неопределено;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		СформироватьСтруктуруПоказателей2025(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
			ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
		
	Иначе
		СформироватьСтруктуруПоказателей2011(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
			ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтруктуруПоказателей2011(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета)
	
	ДанныеОтчета = Новый Структура;
	
	СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПоказателиОтчета = СохраненныеДанные.ПоказателиОтчета;
	ПрименяетсяЕНВД = СохраненныеДанные.ПрименениеЕНВД;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = СохраненныеДанные.БалансНекоммерческойОрганизации;
	
	СохраненныйСоставДополнительныхСтрок = СохраненныеДанные.СоставДополнительныхСтрок;
	
	СоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
					Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
					
					Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
						СтрокаДерева.ДостДляРедактирования_Существенность
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество
							= ЗначениеЗаполнено(СтрокаДерева.Существенность);
						
						СтрокаДерева.МаксимальноеКоличество
							= ?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Элемент.Ключ = "Баланс" Тогда
					ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
				ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
					ДеревоНастроекФормаОтчета = Элемент.Значение.Скопировать();
				ИначеЕсли Элемент.Ключ = "ОФР" Тогда
					ДеревоНастроекФормаОтчета = Элемент.Значение.Скопировать();
				КонецЕсли;
				
				СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
				
			КонецЦикла;
			
			СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
			
		Иначе
			СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ СохраненныеДанные.Свойство("СтруктураОтчета")
	 ИЛИ СохраненныеДанные.СтруктураОтчета = Неопределено Тогда
		СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4(ИмяФормы, СтруктураРеквизитовФормы);
		
	Иначе
		СтруктураОтчета = СохраненныеДанные.СтруктураОтчета;
		
		Для Каждого Элемент Из СтруктураОтчета Цикл
			Если СтрЧислоВхождений(Элемент.Значение.ИмяМакета,
					Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))) > 0 Тогда
				
				Элемент.Значение.ИмяМакета = Сред(Элемент.Значение.ИмяМакета,
					СтрДлина(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_") + 1);
				
			КонецЕсли;
			
			Элемент.Значение.ИмяМакета = СтрЗаменить(Элемент.Значение.ИмяМакета, "_2011Кв4", "");
			
			Если Элемент.Значение.Свойство("ИдентификаторАвтозаполнения") Тогда
				Элемент.Значение.ИдентификаторАвтозаполнения =
					СтрЗаменить(Элемент.Значение.ИдентификаторАвтозаполнения, "_2011Кв4", "");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		// Подмена строк расшифровки виртуальной многострочной частью.
		ПараметрыПолученияВиртуальныхСтрокРасшифровки = НовыеПараметрыПолученияВиртуальныхСтрокРасшифровки();
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.ИмяФормы = ИмяФормы;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.СтруктураОтчета = СтруктураОтчета;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.Раздел = Раздел.Ключ;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДанныеРаздела = Раздел.Значение;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.СоставДополнительныхСтрок = СоставДополнительныхСтрок;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.СтруктураРеквизитовФормы = СтруктураРеквизитовФормы;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДеревоНастроекБаланс = ДеревоНастроекБаланс;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДеревоНастроекФормаОтчета = ДеревоНастроекФормаОтчета;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.ПрименяетсяЕНВД = ПрименяетсяЕНВД;
		ПараметрыПолученияВиртуальныхСтрокРасшифровки.СохраненныеДанные = СохраненныеДанные;
		
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(ПараметрыПолученияВиртуальныхСтрокРасшифровки);
		ДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
		
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	АдресДляВыгрузки = "";
	
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	ИначеЕсли НЕ СохраненныеДанные.Свойство("Адрес9Запятых", АдресДляВыгрузки)
	      ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи,
			"АдрФакт, АдрЮР, АдрПочт");
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			АдрФакт = "";
		Иначе
			АдрФакт = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдрФакт) Тогда
			АдресДляВыгрузки = АдрФакт;
		ИначеЕсли ЗначениеЗаполнено(АдрЮР) Тогда
			АдресДляВыгрузки = АдрЮР;
		Иначе
			АдресДляВыгрузки = АдрПочт;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	ДанныеОтчета.Вставить("СтруктураМногострочныхЧастей", СохраненныеДанные.СтруктураМногострочныхЧастей);
	
КонецПроцедуры

Функция ПолучитьВиртуальныеСтрокиРасшифровки(ПараметрыПолученияВиртуальныхСтрокРасшифровки)
	
	ИмяФормы                  = ПараметрыПолученияВиртуальныхСтрокРасшифровки.ИмяФормы;
	СтруктураРеквизитовФормы  = ПараметрыПолученияВиртуальныхСтрокРасшифровки.СтруктураРеквизитовФормы;
	Раздел                    = ПараметрыПолученияВиртуальныхСтрокРасшифровки.Раздел;
	ДанныеРаздела             = ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДанныеРаздела;
	СоставДополнительныхСтрок = ПараметрыПолученияВиртуальныхСтрокРасшифровки.СоставДополнительныхСтрок;
	ПрименяетсяЕНВД           = ПараметрыПолученияВиртуальныхСтрокРасшифровки.ПрименяетсяЕНВД;
	СтруктураОтчета           = ПараметрыПолученияВиртуальныхСтрокРасшифровки.СтруктураОтчета;
	ДеревоНастроекБаланс      = ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДеревоНастроекБаланс;
	ДеревоНастроекФормаОтчета = ПараметрыПолученияВиртуальныхСтрокРасшифровки.ДеревоНастроекФормаОтчета;
	СохраненныеДанные         = ПараметрыПолученияВиртуальныхСтрокРасшифровки.СохраненныеДанные;
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ВидСдачиОтчетности = Неопределено;
		СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
		Ликвидационная = (ВидСдачиОтчетности = 3);
		
		Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
			ПрименяетсяФСБУ25 = РегламентированнаяОтчетность.ПрименяетсяФСБУ25(
				СтруктураРеквизитовФормы.мСохраненныйДок.Организация, КонецДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания));
			ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2019(ИмяФормы, Раздел, ДанныеРаздела,
				СоставДополнительныхСтрок, ПрименяетсяЕНВД, СтруктураОтчета, СтруктураРеквизитовФормы,
				ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета, Ликвидационная, ПрименяетсяФСБУ25);
		КонецЕсли;
		
		Если Раздел = "ПолеТабличногоДокументаОФР" Тогда
			ДобавитьВиртуальныеСтрокиРасшифровкиОФР2019(ИмяФормы, Раздел, ДанныеРаздела,
				СоставДополнительныхСтрок, ПрименяетсяЕНВД, СтруктураОтчета, СтруктураРеквизитовФормы,
				ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета, Ликвидационная);
		КонецЕсли;
		
		Если Раздел = "ПолеТабличногоДокументаОИК" Тогда
			ДобавитьВиртуальныеСтрокиРасшифровкиОИК2019(ДанныеРаздела, Ликвидационная);
		КонецЕсли;
		
		Если Раздел = "ПолеТабличногоДокументаОДДС" Тогда
			ДобавитьВиртуальныеСтрокиРасшифровкиОДДС2019(ДанныеРаздела, Ликвидационная);
		КонецЕсли;
		
		Если Раздел = "ПолеТабличногоДокументаОЦИС" Тогда
			ДобавитьВиртуальныеСтрокиРасшифровкиОЦИС2019(ДанныеРаздела, Ликвидационная);
		КонецЕсли;
		
	Иначе
		Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
			Если ПустаяСтрока(СтруктураОтчета.Баланс.ИмяМакета)
			 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
			 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
			 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
			 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда
				ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(ИмяФормы, Раздел,
					ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
					СтруктураРеквизитовФормы, ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
				
			Иначе
				ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(ИмяФормы, Раздел,
					ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
					СтруктураОтчета, СтруктураРеквизитовФормы,
					ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
			ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, Раздел,
				ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД,
				СтруктураОтчета, СтруктураРеквизитовФормы,
				ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРаздела;
	
КонецФункции

Функция НовыеПараметрыПолученияВиртуальныхСтрокРасшифровки()
	
	ПараметрыПолученияВиртуальныхСтрокРасшифровки = Новый Структура;
	
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("ИмяФормы");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("СтруктураОтчета");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("Раздел");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("ДанныеРаздела");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("СоставДополнительныхСтрок");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("СтруктураРеквизитовФормы");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("ДеревоНастроекБаланс");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("ДеревоНастроекФормаОтчета");
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("ПрименяетсяЕНВД", Ложь);
	ПараметрыПолученияВиртуальныхСтрокРасшифровки.Вставить("СохраненныеДанные");
	
	Возврат ПараметрыПолученияВиртуальныхСтрокРасшифровки;
	
КонецФункции

Процедура ОбработатьПоказателиПередВыгрузкой(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы)
	
	Перем ЗначениеПоказателя, Индекс, ИндексСтр;
	
	ИменаПоказателейСоЗнакомПлюс = ПолучитьСписокВычитаемыхПоказателей(ИмяФормы, СтруктураРеквизитовФормы);
	
	Разделы = Новый Массив;
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОИК);
	Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОДДС);
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОФР);
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОЦИС);
	Иначе
		// ФормаОтчета2011Кв1, ФормаОтчета2011Кв3, ФормаОтчета2011Кв4.
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
		Разделы.Добавить(ДанныеОтчета.ПолеТабличногоДокументаОЦИПС);
	КонецЕсли;
	
	Для Каждого Пок Из ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + ИндексСтр, ЗначениеПоказателя) Цикл
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + ИндексСтр, -ЗначениеПоказателя);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2011(ИмяФормы, 
														 Раздел,
														 ДанныеРаздела,
														 СоставДополнительныхСтрок,
														 ПрименяетсяЕНВД,
														 СтруктураРеквизитовФормы,
														 ДеревоНастроекБаланс,
														 ДеревоНастроекФормаОтчета)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "Баланс", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
										  
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П0001011199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П0001011299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П0001011399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11308", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П0001011499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П0001011599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П0001011699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П0001011799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11703", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210.
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П0001012199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220.
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П0001012299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230.
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П0001012399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240.
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П0001012499";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250.
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П0001012599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260.
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П0001012699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310.
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П0001013199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320.
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П0001013299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П0001013499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
			ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350.
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П0001013599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360.
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П0001013699";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370.
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П0001013799";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410.
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П0001014199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420.
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П0001014299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450.
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П0001014599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510.
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П0001015199";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520.
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П0001015299";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530.
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П0001015399";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550.
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П0001015599";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2012(ИмяФормы,
														 Раздел,
														 ДанныеРаздела,
														 СоставДополнительныхСтрок,
														 ПрименяетсяЕНВД,
														 СтруктураОтчета,
														 СтруктураРеквизитовФормы,
														 ДеревоНастроекБаланс,
														 ДеревоНастроекФормаОтчета)
	
	СтрокаОтраженияСчета76_АВ = "1260";
	СтрокаОтраженияСчета46 = "1210";
	СтрокаОтраженияСчета96 = "1260";
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4" Тогда
		СтрокаОтраженияСчета46 = "1260";
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета46 = "1230";
		СтрокаОтраженияСчета96 = "1230";
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета76_АВ = "1520";
	КонецЕсли;
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "Баланс", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
										  
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строки расшифровки строки 1110.
	ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПрефиксМногострочнойЧасти = "П1001001110";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1120.
	ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПрефиксМногострочнойЧасти = "П1001001120";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1130.
	ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПрефиксМногострочнойЧасти = "П1001001130";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1140.
	ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПрефиксМногострочнойЧасти = "П1001001140";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1150.
	ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПрефиксМногострочнойЧасти = "П1001001150";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11502", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11503", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11504", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11505", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11506", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11507", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11508", "Расходы будущих периодов");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("11509", "Арендованное имущество");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1160.
	ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПрефиксМногострочнойЧасти = "П1001001160";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11601", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11602", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11603", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11604", "Прочие доходные вложения");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1170.
	ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПрефиксМногострочнойЧасти = "П1001001170";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Паи");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1180.
	ПрефиксВиртуальнойСтроки  = "П2001001180";
	ПрефиксМногострочнойЧасти = "П1001001180";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1190.
	ПрефиксВиртуальнойСтроки  = "П2001001190";
	ПрефиксМногострочнойЧасти = "П1001001190";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11901", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11902", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11903", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1210.
	ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПрефиксМногострочнойЧасти = "П1001001210";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	Если СтрокаОтраженияСчета46 = "1210" Тогда
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1220.
	ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПрефиксМногострочнойЧасти = "П1001001220";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1230.
	ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПрефиксМногострочнойЧасти = "П1001001230";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	Если СтрокаОтраженияСчета46 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12311", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	Если СтрокаОтраженияСчета96 = "1230" Тогда
		СписокФиксированныхСтрок.Добавить("12312", "Оценочные обязательства");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12313", "Расчеты с факторинговыми компаниями");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1240.
	ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПрефиксМногострочнойЧасти = "П1001001240";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1250.
	ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПрефиксМногострочнойЧасти = "П1001001250";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12512", "Касса по деятельности платежного агента");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1260.
	ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПрефиксМногострочнойЧасти = "П1001001260";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	Если СтрокаОтраженияСчета76_АВ = "1260" Тогда
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
     ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СписокФиксированныхСтрок.Добавить("12610", "НДС по арендным обязательствам");
	КонецЕсли;
	Если СтрокаОтраженияСчета96 = "1260" Тогда
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
	КонецЕсли;
	Если СтрокаОтраженияСчета46 = "1260" Тогда
		СписокФиксированныхСтрок.Добавить("12611", "Выполненные этапы по незавершенным работам");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1310.
	ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПрефиксМногострочнойЧасти = "П1001001310";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1320.
	ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПрефиксМногострочнойЧасти = "П1001001320";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1340.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П1001001340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
			ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	КонецЕсли;
	
	// Строки расшифровки строки 1350.
	ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПрефиксМногострочнойЧасти = "П1001001350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1360.
	ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПрефиксМногострочнойЧасти = "П1001001360";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1370.
	ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПрефиксМногострочнойЧасти = "П1001001370";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1410.
	ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПрефиксМногострочнойЧасти = "П1001001410";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1420.
	ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПрефиксМногострочнойЧасти = "П1001001420";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1450.
	ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПрефиксМногострочнойЧасти = "П1001001450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1510.
	ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПрефиксМногострочнойЧасти = "П1001001510";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1520.
	ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПрефиксМногострочнойЧасти = "П1001001520";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1530.
	ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПрефиксМногострочнойЧасти = "П1001001530";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
			
	// Строки расшифровки строки 1540.
	ПрефиксВиртуальнойСтроки  = "П2001001540";
	ПрефиксМногострочнойЧасти = "П1001001540";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
 	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
	 
		СписокФиксированныхСтрок.Добавить("15401", "Оценочные обязательства по вознаграждениям работников");
		СписокФиксированныхСтрок.Добавить("15402", "Резервы предстоящих расходов прочие");
		
	КонецЕсли;
	
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 1550.
	ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПрефиксМногострочнойЧасти = "П1001001550";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиБаланс2019(ИмяФормы, Раздел, ДанныеРаздела,
	СоставДополнительныхСтрок, ПрименяетсяЕНВД, СтруктураОтчета, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета, Ликвидационная, ПрименяетсяФСБУ25)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "Баланс", СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	ПараметрыВиртуальнойСтроки = Новый Структура;
	ПараметрыВиртуальнойСтроки.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыВиртуальнойСтроки.Вставить("ДанныеРаздела", ДанныеРаздела);
	ПараметрыВиртуальнойСтроки.Вставить("ДеревоНастройкиСостава", ДеревоНастройкиСостава);
	ПараметрыВиртуальнойСтроки.Вставить("СписокФиксированныхСтрок");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксВиртуальнойСтроки");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксМногострочнойЧасти");
	ПараметрыВиртуальнойСтроки.Вставить("ОграничениеПоКоличеству", ?(Ликвидационная, 3, 30));
	
	// Строки расшифровки строки 1110.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001110";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001110";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11101", "Нематериальные активы в организации");
	СписокФиксированныхСтрок.Добавить("11102", "Приобретение нематериальных активов");
	СписокФиксированныхСтрок.Добавить("11103", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1120.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001120";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001120";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11201", "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
	СписокФиксированныхСтрок.Добавить("11202", "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1130.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001130";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001130";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1140.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001140";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001140";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1150.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001150";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001150";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11501", "Основные средства в организации");
	СписокФиксированныхСтрок.Добавить("11502", "Объекты недвижимости, права собственности на которые не зарегистрированы");
	СписокФиксированныхСтрок.Добавить("11503", "Оборудование к установке");
	СписокФиксированныхСтрок.Добавить("11504", "Приобретение земельных участков");
	СписокФиксированныхСтрок.Добавить("11505", "Приобретение объектов природопользования");
	СписокФиксированныхСтрок.Добавить("11506", "Строительство объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11507", "Приобретение объектов основных средств");
	СписокФиксированныхСтрок.Добавить("11508", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("11509", Наименование_ДопСтроки11509(ПрименяетсяФСБУ25));
	СписокФиксированныхСтрок.Добавить("11510", "Затраты на ремонт основных средств");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1160.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001160";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001160";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11601", "Материальные ценности в организации");
	СписокФиксированныхСтрок.Добавить("11602", "Материальные ценности предоставленные во временное владение и пользование");
	СписокФиксированныхСтрок.Добавить("11603", "Материальные ценности предоставленные во временное пользование");
	СписокФиксированныхСтрок.Добавить("11604", "Прочие доходные вложения");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1170.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001170";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001170";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11701", "Паи");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1180.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001180";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001180";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1190.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001190";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001190";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("11901", "Перевод молодняка животных в основное стадо");
	СписокФиксированныхСтрок.Добавить("11902", "Приобретение взрослых животных");
	СписокФиксированныхСтрок.Добавить("11903", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("11904", "Авансы, выданные на приобретение основных средств");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1210.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001210";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001210";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12101", "Материалы");
	СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
	СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
	СписокФиксированныхСтрок.Добавить("12104", "Товары");
	СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
	СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
	СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
	СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
	СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
	СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
	СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1220.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001220";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001220";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
	СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
	СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
	СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
	СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
	СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
	СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1230.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001230";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001230";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("12310", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
	СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
	СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12311", "Выполненные этапы по незавершенным работам");
	СписокФиксированныхСтрок.Добавить("12312", "Оценочные обязательства");
	СписокФиксированныхСтрок.Добавить("12313", "Расчеты с факторинговыми компаниями");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1240.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001240";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001240";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12401", "Акции");
	СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
	СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
	СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
	СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
	СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1250.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001250";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001250";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
	СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
	СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
	СписокФиксированныхСтрок.Добавить("12512", "Касса по деятельности платежного агента");
	СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
	СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
	СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
	СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
	СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
	СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
	СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
	СписокФиксированныхСтрок.Добавить("12513", "Счет цифрового рубля");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1260.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001260";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001260";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
	СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
	СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
	СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
	СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
	СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
	СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
	СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
	СписокФиксированныхСтрок.Добавить("12610", "НДС по арендным обязательствам");
	СписокФиксированныхСтрок.Добавить("12611", "Авансы, выданные на приобретение запасов");
	СписокФиксированныхСтрок.Добавить("12612", "Прочие выданные авансы");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1310.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001310";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001310";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1320.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001320";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001320";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1340.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	КонецЕсли;
	
	// Строки расшифровки строки 1350.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001350";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1360.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001360";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001360";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1370.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001370";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001370";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1410.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001410";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001410";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
	СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1420.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001420";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001420";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1430.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001430";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001430";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1450.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001450";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1510.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001510";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001510";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
	СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
	СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
	СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
	СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
	СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
	СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
	СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
	СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1520.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001520";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001520";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
	СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
	СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
	СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
	СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
	СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
	СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
	СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
	СписокФиксированныхСтрок.Добавить("15209", "Расчеты с персоналом по прочим операциям");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1530.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001530";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001530";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
	КонецЕсли;
	СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
	СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
	СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
	СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1540.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001540";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001540";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("15401", "Оценочные обязательства по вознаграждениям работников");
	СписокФиксированныхСтрок.Добавить("15402", "Резервы предстоящих расходов прочие");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 1550.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001001550";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001001550";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы,
														  Раздел,
														  ДанныеРаздела,
														  СоставДополнительныхСтрок,
														  ПрименяетсяЕНВД,
														  СтруктураОтчета,
														  СтруктураРеквизитовФормы,
														  ДеревоНастроекБаланс,
														  ДеревоНастроекФормаОтчета)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы,
										  ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета);
	
	ДеревоНастройкиСостава = ДеревоНастроекФормаОтчета;
	
	// Строки расшифровки строки 2110.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2120.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21201", "Себестоимость продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21202", "Себестоимость продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2100.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПрефиксМногострочнойЧасти = "П1001002100";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2210.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2220.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2200.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПрефиксМногострочнойЧасти = "П1001002200";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2310.
	ПрефиксВиртуальнойСтроки  = "П2001002310";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2320.
	ПрефиксВиртуальнойСтроки  = "П2001002320";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
	СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2330.
	ПрефиксВиртуальнойСтроки  = "П2001002330";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
	СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2340.
	ПрефиксВиртуальнойСтроки  = "П2001002340";
	ПрефиксМногострочнойЧасти = "П1001002340";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
	СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
	СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
	СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
	СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
	СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
	СписокФиксированныхСтрок.Добавить("23425", "Корректировка прибыли до рыночных цен");
	СписокФиксированныхСтрок.Добавить("23426", "Доходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2350.
	ПрефиксВиртуальнойСтроки  = "П2001002350";
	ПрефиксМногострочнойЧасти = "П1001002350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
	СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
	СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
	СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
	СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
	СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
	СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
	СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
	СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
	СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
	СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
	СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23533", "Прочие убытки, приравненные к внереализационным расходам");
	СписокФиксированныхСтрок.Добавить("23534", "Расходы, связанные с реализацией объектов строительства");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2300.
	Если ПрименяетсяЕНВД Тогда
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПрефиксМногострочнойЧасти = "П1001002300";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2421.
	ПрефиксВиртуальнойСтроки  = "П2001002421";
	ПрефиксМногострочнойЧасти = "П1001002421";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2430.
	ПрефиксВиртуальнойСтроки  = "П2001002430";
	ПрефиксМногострочнойЧасти = "П1001002430";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2450.
	ПрефиксВиртуальнойСтроки  = "П2001002450";
	ПрефиксМногострочнойЧасти = "П1001002450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2460.
	ПрефиксВиртуальнойСтроки  = "П2001002460";
	ПрефиксМногострочнойЧасти = "П1001002460";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые в связи с применением специальных налоговых режимов");
	СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
	СписокФиксированныхСтрок.Добавить("24603", "Пересчет отложенных налоговых активов и обязательств");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
	// Строки расшифровки строки 2510.
	ПрефиксВиртуальнойСтроки  = "П2001002510";
	ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
	СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
	ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы, ДанныеРаздела, ДеревоНастройкиСостава,
		ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиОФР2019(ИмяФормы, Раздел, ДанныеРаздела,
	СоставДополнительныхСтрок, ПрименяетсяЕНВД, СтруктураОтчета, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекОФР, Ликвидационная)
	
	ПолучитьДеревоНастроекСоставаДопСтрок(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс, ДеревоНастроекОФР);
	
	ДеревоНастройкиСостава = ДеревоНастроекОФР;
	
	ПараметрыВиртуальнойСтроки = Новый Структура;
	ПараметрыВиртуальнойСтроки.Вставить("ИмяФормы", ИмяФормы);
	ПараметрыВиртуальнойСтроки.Вставить("ДанныеРаздела", ДанныеРаздела);
	ПараметрыВиртуальнойСтроки.Вставить("ДеревоНастройкиСостава", ДеревоНастройкиСостава);
	ПараметрыВиртуальнойСтроки.Вставить("СписокФиксированныхСтрок");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксВиртуальнойСтроки");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксМногострочнойЧасти");
	ПараметрыВиртуальнойСтроки.Вставить("ОграничениеПоКоличеству", ?(Ликвидационная, 3, 30));
	
	// Строки расшифровки строки 2110.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002110";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2120.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21201", "Себестоимость продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21202", "Себестоимость продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002120";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2100.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002100";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002100";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2210.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002210";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2220.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22202", "Управленческие расходы по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002220";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2200.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002200";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002200";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2310.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002310";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002310";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2320.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002320";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002320";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
	СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2330.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002330";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002330";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
	СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2340.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002340";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002340";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
	СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
	СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
	СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
	СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
	СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
	СписокФиксированныхСтрок.Добавить("23425", "Корректировка прибыли до рыночных цен");
	СписокФиксированныхСтрок.Добавить("23426", "Доходы, связанные с реализацией объектов строительства");
	СписокФиксированныхСтрок.Добавить("23427", "Излишки при инвентаризации");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2350.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002350";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002350";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
	СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
	СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
	СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
	СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
	СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
	СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
	СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
	СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
	СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
	СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
	СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
	СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
	СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
	СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
	СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
	СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
	СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
	СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
	СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
	СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
	СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
	СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
	СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
	СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
	СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
	СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
	СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
	СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
	СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
	СписокФиксированныхСтрок.Добавить("23533", "Прочие убытки, приравненные к внереализационным расходам");
	СписокФиксированныхСтрок.Добавить("23534", "Расходы, связанные с реализацией объектов строительства");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2300.
	Если ПрименяетсяЕНВД Тогда
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
		СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
	Иначе
		ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002300";
		ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002300";
		СписокФиксированныхСтрок = Новый СписокЗначений;
	КонецЕсли;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2421.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002421";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002421";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2430.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002430";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002430";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2450.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002450";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002450";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2460.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002460";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002460";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые в связи с применением специальных налоговых режимов");
	СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
	СписокФиксированныхСтрок.Добавить("24603", "Пересчет отложенных налоговых активов и обязательств");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2510.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002510";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
	СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2520.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002520";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002520";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 2530.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001002530";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001002530";
	СписокФиксированныхСтрок = Новый СписокЗначений;
	ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок = СписокФиксированныхСтрок;
	ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиОИК2019(ДанныеРаздела, Ликвидационная)
	
	ПараметрыВиртуальнойСтроки = Новый Структура;
	ПараметрыВиртуальнойСтроки.Вставить("ДанныеРаздела", ДанныеРаздела);
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксВиртуальнойСтроки");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксМногострочнойЧасти");
	ПараметрыВиртуальнойСтроки.Вставить("ОграничениеПоКоличеству");
	
	// Строки расшифровки строки 3210.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001003210";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001003210";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОИК2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 3240.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001003240";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001003240";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 2, 20);
	ВнестиВиртуальныеСтрокиРасшифровкиОИК2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 3310.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001003310";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001003310";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОИК2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 3340.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001003340";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001003340";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 2, 20);
	ВнестиВиртуальныеСтрокиРасшифровкиОИК2019(ПараметрыВиртуальнойСтроки);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиОДДС2019(ДанныеРаздела, Ликвидационная)
	
	ПараметрыВиртуальнойСтроки = Новый Структура;
	ПараметрыВиртуальнойСтроки.Вставить("ДанныеРаздела", ДанныеРаздела);
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксВиртуальнойСтроки");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксМногострочнойЧасти");
	ПараметрыВиртуальнойСтроки.Вставить("ОграничениеПоКоличеству");
	
	// Строки расшифровки строки 4110.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004110";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004110";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 4120.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004120";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004120";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 2, 20);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 4210.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004210";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004210";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 4220.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004220";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004220";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 4310.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004310";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004310";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 4320.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001004320";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001004320";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 3, 30);
	ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки);
	
КонецПроцедуры

Процедура ДобавитьВиртуальныеСтрокиРасшифровкиОЦИС2019(ДанныеРаздела, Ликвидационная)
	
	ПараметрыВиртуальнойСтроки = Новый Структура;
	ПараметрыВиртуальнойСтроки.Вставить("ДанныеРаздела", ДанныеРаздела);
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксВиртуальнойСтроки");
	ПараметрыВиртуальнойСтроки.Вставить("ПрефиксМногострочнойЧасти");
	ПараметрыВиртуальнойСтроки.Вставить("ОграничениеПоКоличеству");
	
	// Строки расшифровки строки 6250.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001006250";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001006250";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 9, 36);
	ВнестиВиртуальныеСтрокиРасшифровкиОЦИС2019(ПараметрыВиртуальнойСтроки);
	
	// Строки расшифровки строки 6350.
	ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки  = "П2001006350";
	ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти = "П1001006350";
	ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству = ?(Ликвидационная, 9, 36);
	ВнестиВиртуальныеСтрокиРасшифровкиОЦИС2019(ПараметрыВиртуальнойСтроки);
	
КонецПроцедуры

Функция ПолучитьСписокВычитаемыхПоказателей(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	// Вычитаемые показатели в отчета хранятся со знаком "-", при выгрузке должны быть положительными.
	
	ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	
	// Бухгалтерский баланс.
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
		
		// Виртуальные вычитаемые многострочные показатели, необходимые для представления
		// фиксированных и вписываемых дополнительных строк как единого массива строк.
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
		
	КонецЕсли;
	
	// Отчет о финансовых результатах (ранее Отчет о прибылях и убытках).
	ЭтоОФР2020 = Ложь;
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
		ЭтоОФР2020 = СохраненныеДанные.СтруктураОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД_2020Кв1"
		         ИЛИ СохраненныеДанные.СтруктураОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД_2020Кв1";
	КонецЕсли;
	
	Если ЭтоОФР2020 Тогда
		СписокВычитаемыхСтрок = "2120, 2210, 2220, 2330, 2350, 2411";
	Иначе
		СписокВычитаемыхСтрок = "2120, 2210, 2220, 2330, 2350, 2410";
	КонецЕсли;
	
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",", Ложь);
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	// Виртуальные вычитаемые многострочные показатели, необходимые для представления
	// фиксированных и вписываемых дополнительных строк как единого массива строк.
	Если ЭтоОФР2020 Тогда
		СписокВычитаемыхСтрок = "2120, 2210, 2220, 2330, 2350";
	Иначе
		СписокВычитаемыхСтрок = "2120, 2210, 2220, 2330, 2350, 2410";
	КонецЕсли;
	
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",", Ложь);
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	// Отчет об изменениях капитала
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100310004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100322708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100320004");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332003");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332005");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332006");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332007");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332008");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332107");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332108");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332205");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332207");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332208");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332305");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332307");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332308");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332403");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332408");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332503");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332508");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332608");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332707");
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100332708");
	
	ИменаПоказателейСоЗнакомПлюс.Добавить("П000100330004");
	
	// Отчет о движении денежных средств.
	СписокВычитаемыхСтрок = "4120, 4121, 4122, 4123, 4124, 4129, "
	                      + "4220, 4221, 4222, 4223, 4224, 4229, "
	                      + "4320, 4321, 4322, 4323, 4329";
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",", Ложь);
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "03");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
	КонецЦикла;
	
	СписокВычитаемыхДопСтрок = "4120, 4220, 4320";
	МассивВычитаемыхДопСтрок = СтрРазделить(СписокВычитаемыхДопСтрок, ",", Ложь);
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
			// Виртуальные вычитаемые многострочные показатели в выгрузке.
			ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
			ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
		Иначе
			ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "03");
			ИменаПоказателейСоЗнакомПлюс.Добавить("П100100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ДобавитьВычитаемыеПоказателиОЦИС2019(ИменаПоказателейСоЗнакомПлюс);
	Иначе
		ДобавитьВычитаемыеПоказателиОЦИС2011(ИменаПоказателейСоЗнакомПлюс);
	КонецЕсли;
	
	Возврат ИменаПоказателейСоЗнакомПлюс;
	
КонецФункции

Процедура ДобавитьВычитаемыеПоказателиОЦИС2011(ИменаПоказателейСоЗнакомПлюс)
	
	СписокВычитаемыхСтрок = "6310, 6311, 6312, 6313, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350, 6300";
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",", Ложь);
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВычитаемыеПоказателиОЦИС2019(ИменаПоказателейСоЗнакомПлюс)
	
	СписокВычитаемыхСтрок = "6310, 6311, 6312, 6313, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350, 6300";
	МассивВычитаемыхСтрок = СтрРазделить(СписокВычитаемыхСтрок, ",", Ложь);
	Для Каждого ВычитаемаяСтрока ИЗ МассивВычитаемыхСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П000100" + СокрЛП(ВычитаемаяСтрока) + "05");
	КонецЦикла;
	
	СписокВычитаемыхДопСтрок = "6350";
	МассивВычитаемыхДопСтрок = СтрРазделить(СписокВычитаемыхДопСтрок, ",", Ложь);
	Для Каждого ВычитаемаяДопСтрока ИЗ МассивВычитаемыхДопСтрок Цикл
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяДопСтрока) + "04");
		ИменаПоказателейСоЗнакомПлюс.Добавить("П200100" + СокрЛП(ВычитаемаяДопСтрока) + "05");
	КонецЦикла;
	
КонецПроцедуры

Функция ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	Перем СохраненноеПрименениеЕНВД;
	
	// Инициализируем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено
	   И СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
		Если СохраненныеДанные.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			СтруктураРеквизитовФормы.ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// Если признак не был сохранен, то определяем его на основании учетной политики организации.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено Тогда
		СтруктураРеквизитовФормы.ПрименениеЕНВД = ОрганизацияПлательщикЕНВД(
			ИмяФормы,
			СтруктураРеквизитовФормы.Организация,
			НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12)),
			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы.ПрименениеЕНВД;
	
КонецФункции

Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ИмяФормы,
												   ДанныеРаздела,
												   ДеревоНастройкиСостава,
												   ПрефиксВиртуальнойСтроки,
												   СтруктураФиксированныхСтрок = Неопределено,
												   ПрефиксМногострочнойЧасти)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
				И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "06"]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр,
			ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + ИндексМнЧСтр]);
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЕсли;
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс2019(ПараметрыВиртуальнойСтроки)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	ИмяФормы                    = ПараметрыВиртуальнойСтроки.ИмяФормы;
	ДанныеРаздела               = ПараметрыВиртуальнойСтроки.ДанныеРаздела;
	ДеревоНастройкиСостава      = ПараметрыВиртуальнойСтроки.ДеревоНастройкиСостава;
	ПрефиксВиртуальнойСтроки    = ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки;
	ПрефиксМногострочнойЧасти   = ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти;
	ОграничениеПоКоличеству     = ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству;
	СтруктураФиксированныхСтрок = ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок;
	
	ТаблицаЗначимости = Новый ТаблицаЗначений;
	ТаблицаЗначимости.Колонки.Добавить("Графа1", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа2", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа5", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа6", Новый ОписаниеТипов("Число"));
	
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
			   И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				НоваяСтрока = ТаблицаЗначимости.Добавить();
				НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксСтроки + "01"];
				НоваяСтрока.Графа2 = НаименованиеСтроки;
				НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксСтроки + "04"];
				НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксСтроки + "05"];
				НоваяСтрока.Графа6 = ДанныеРаздела[ПрефиксСтроки + "06"];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
			НоваяСтрока = ТаблицаЗначимости.Добавить();
			НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр];
			НоваяСтрока.Графа2 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр];
			НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр];
			НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр];
			НоваяСтрока.Графа6 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + ИндексМнЧСтр];
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаЗначимости.Количество();
	Если ВсегоСтрок > ОграничениеПоКоличеству Тогда
		ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, "Графа4, Графа5, Графа6");
		КоличествоСтрокДляВыгрузки = ОграничениеПоКоличеству;
	Иначе
		КоличествоСтрокДляВыгрузки = ВсегоСтрок;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	
	Для Счетчик = 1 По КоличествоСтрокДляВыгрузки Цикл
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа1);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа2);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа4);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа5);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа6);
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВключенВОтчет(ИмяФормы, ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки) Экспорт
	
	НайденныеВетвиНастройки = Новый Массив;
	
	Если ДеревоНастроекСтрокРасшифровки <> Неопределено Тогда
		НайденныеВетвиНастройки = ДеревоНастроекСтрокРасшифровки.Строки.НайтиСтроки(
			Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
	КонецЕсли;
	
	Если НайденныеВетвиНастройки.Количество() = 0 Тогда
		// Настройка не обнаружена. Считаем, что допстрока должна входить в отчет.
		Возврат Истина;
	Иначе
		Возврат НайденныеВетвиНастройки[0].ВключатьВОтчет;
	КонецЕсли;
	
КонецФункции

Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ИмяФормы,
														ДанныеРаздела,
														ДеревоНастройкиСостава,
														ПрефиксВиртуальнойСтроки,
														СтруктураФиксированныхСтрок = Неопределено, 
														ПрефиксМногострочнойЧасти)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
				И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "01"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ДанныеРаздела[ПрефиксСтроки + "05"]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Пользовательские строки.
	Если НЕ ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр,
				ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр]);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнестиВиртуальныеСтрокиРасшифровкиОФР2019(ПараметрыВиртуальнойСтроки)
	
	Перем Индекс, ИндексСтр, ИндексМнЧ, ИндексМнЧСтр;
	
	ИмяФормы                    = ПараметрыВиртуальнойСтроки.ИмяФормы;
	ДанныеРаздела               = ПараметрыВиртуальнойСтроки.ДанныеРаздела;
	ДеревоНастройкиСостава      = ПараметрыВиртуальнойСтроки.ДеревоНастройкиСостава;
	ПрефиксВиртуальнойСтроки    = ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки;
	ПрефиксМногострочнойЧасти   = ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти;
	ОграничениеПоКоличеству     = ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству;
	СтруктураФиксированныхСтрок = ПараметрыВиртуальнойСтроки.СписокФиксированныхСтрок;
	
	ТаблицаЗначимости = Новый ТаблицаЗначений;
	ТаблицаЗначимости.Колонки.Добавить("Графа1", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа2", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа5", Новый ОписаниеТипов("Число"));
	
	// Фиксированные строки.
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			
			Если ВключенВОтчет(ИмяФормы, ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки)
			   И ДанныеРаздела.Свойство(ПрефиксСтроки + "01") Тогда
				НоваяСтрока = ТаблицаЗначимости.Добавить();
				НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксСтроки + "01"];
				НоваяСтрока.Графа2 = НаименованиеСтроки;
				НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксСтроки + "04"];
				НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксСтроки + "05"];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Пользовательские строки.
	Если НЕ ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
			Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
				НоваяСтрока = ТаблицаЗначимости.Добавить();
				НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр];
				НоваяСтрока.Графа2 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр];
				НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр];
				НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр];
			КонецЕсли;
			
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВсегоСтрок = ТаблицаЗначимости.Количество();
	Если ВсегоСтрок > ОграничениеПоКоличеству Тогда
		ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, "Графа4, Графа5");
		КоличествоСтрокДляВыгрузки = ОграничениеПоКоличеству;
	Иначе
		КоличествоСтрокДляВыгрузки = ВсегоСтрок;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	
	Для Счетчик = 1 По КоличествоСтрокДляВыгрузки Цикл
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа1);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа2);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа4);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа5);
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнестиВиртуальныеСтрокиРасшифровкиОИК2019(ПараметрыВиртуальнойСтроки)
	
	ПрефиксВиртуальнойСтроки  = ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки;
	ПрефиксМногострочнойЧасти = ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти;
	ОграничениеПоКоличеству   = ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству;
	ДанныеРаздела             = ПараметрыВиртуальнойСтроки.ДанныеРаздела;
	
	ТаблицаЗначимости = Новый ТаблицаЗначений;
	ТаблицаЗначимости.Колонки.Добавить("Графа1", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа3", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа5", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа6", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа7", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа8", Новый ОписаниеТипов("Число"));
	
	ИндексМнЧ = 1;
	ИндексМнЧСтр = "1";
	
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]) Тогда
			НоваяСтрока = ТаблицаЗначимости.Добавить();
			НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр];
			НоваяСтрока.Графа3 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "03_" + ИндексМнЧСтр];
			НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр];
			НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр];
			НоваяСтрока.Графа6 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + ИндексМнЧСтр];
			НоваяСтрока.Графа7 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "07_" + ИндексМнЧСтр];
			НоваяСтрока.Графа8 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "08_" + ИндексМнЧСтр];
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаЗначимости.Количество();
	Если ВсегоСтрок > ОграничениеПоКоличеству Тогда
		ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, "Графа8");
		КоличествоСтрокДляВыгрузки = ОграничениеПоКоличеству;
	Иначе
		КоличествоСтрокДляВыгрузки = ВсегоСтрок;
	КонецЕсли;
	
	Индекс = 1;
	ИндексСтр = "1";
	
	Для Счетчик = 1 По КоличествоСтрокДляВыгрузки Цикл
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа1);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "03_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа3);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа4);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа5);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа6);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "07_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа7);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "08_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа8);
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнестиВиртуальныеСтрокиРасшифровкиОДДС2019(ПараметрыВиртуальнойСтроки)
	
	ПрефиксВиртуальнойСтроки  = ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки;
	ПрефиксМногострочнойЧасти = ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти;
	ОграничениеПоКоличеству   = ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству;
	ДанныеРаздела             = ПараметрыВиртуальнойСтроки.ДанныеРаздела;
	
	ТаблицаЗначимости = Новый ТаблицаЗначений;
	ТаблицаЗначимости.Колонки.Добавить("Графа1", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа3", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число"));
	
	ИндексМнЧ = 1;
	ИндексМнЧСтр = "1";
	
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр]) Тогда
			НоваяСтрока = ТаблицаЗначимости.Добавить();
			НоваяСтрока.Графа1 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "01_" + ИндексМнЧСтр];
			НоваяСтрока.Графа3 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "03_" + ИндексМнЧСтр];
			НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр];
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаЗначимости.Количество();
	Если ВсегоСтрок > ОграничениеПоКоличеству Тогда
		ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, "Графа3, Графа4");
		КоличествоСтрокДляВыгрузки = ОграничениеПоКоличеству;
	Иначе
		КоличествоСтрокДляВыгрузки = ВсегоСтрок;
	КонецЕсли;
	
	Индекс = 1;
	ИндексСтр = "1";
	
	Для Счетчик = 1 По КоличествоСтрокДляВыгрузки Цикл
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "01_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа1);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "03_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа3);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа4);
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнестиВиртуальныеСтрокиРасшифровкиОЦИС2019(ПараметрыВиртуальнойСтроки)
	
	ПрефиксВиртуальнойСтроки  = ПараметрыВиртуальнойСтроки.ПрефиксВиртуальнойСтроки;
	ПрефиксМногострочнойЧасти = ПараметрыВиртуальнойСтроки.ПрефиксМногострочнойЧасти;
	ОграничениеПоКоличеству   = ПараметрыВиртуальнойСтроки.ОграничениеПоКоличеству;
	ДанныеРаздела             = ПараметрыВиртуальнойСтроки.ДанныеРаздела;
	
	ТаблицаЗначимости = Новый ТаблицаЗначений;
	ТаблицаЗначимости.Колонки.Добавить("Графа2", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначимости.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число"));
	ТаблицаЗначимости.Колонки.Добавить("Графа5", Новый ОписаниеТипов("Число"));
	
	ИндексМнЧ = 1;
	ИндексМнЧСтр = "1";
	
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр) Цикл
		Если НЕ ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр]) Тогда
			НоваяСтрока = ТаблицаЗначимости.Добавить();
			НоваяСтрока.Графа2 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + ИндексМнЧСтр];
			НоваяСтрока.Графа4 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + ИндексМнЧСтр];
			НоваяСтрока.Графа5 = ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + ИндексМнЧСтр];
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексМнЧ, ИндексМнЧСтр);
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаЗначимости.Количество();
	Если ВсегоСтрок > ОграничениеПоКоличеству Тогда
		ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, "Графа4, Графа5");
		КоличествоСтрокДляВыгрузки = ОграничениеПоКоличеству;
	Иначе
		КоличествоСтрокДляВыгрузки = ВсегоСтрок;
	КонецЕсли;
	
	Индекс = 1;
	ИндексСтр = "1";
	
	Для Счетчик = 1 По КоличествоСтрокДляВыгрузки Цикл
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа2);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа4);
		ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + ИндексСтр, ТаблицаЗначимости[Счетчик - 1].Графа5);
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсортироватьТаблицуЗначимости(ТаблицаЗначимости, ЧисловыеГрафы)
	
	Графы = СтрРазделить(ЧисловыеГрафы, ",", Ложь);
	СтрокаСортировки = "";
	
	Для Каждого Графа Из Графы Цикл
		ИмяГрафы = СокрЛП(Графа);
		ТаблицаЗначимости.Колонки.Добавить("Сортировка_" + ИмяГрафы, Новый ОписаниеТипов("Число"));
		СтрокаСортировки = СтрокаСортировки + ", "
		                 + "Сортировка_" + ИмяГрафы + " Убыв";
	КонецЦикла;
	
	СтрокаСортировки = Сред(СтрокаСортировки, 2); // обрезка лишних лидирующих разделителей
	
	Для Каждого СтрокаОтчета Из ТаблицаЗначимости Цикл
		Для Каждого Графа Из Графы Цикл
			ИмяГрафы = СокрЛП(Графа);
			МодульПоказателя = Макс(-СтрокаОтчета[ИмяГрафы], СтрокаОтчета[ИмяГрафы]);
			СтрокаОтчета["Сортировка_" + ИмяГрафы] = МодульПоказателя;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаЗначимости.Сортировать(СтрокаСортировки);
	
	Для Каждого Графа Из Графы Цикл
		ИмяГрафы = СокрЛП(Графа);
		ТаблицаЗначимости.Колонки.Удалить("Сортировка_" + ИмяГрафы);
	КонецЦикла;
	
КонецПроцедуры

Функция ОрганизацияПлательщикЕНВД(ИмяФормы, Организация, НачалоПериода, КонецПериода)
	
	Возврат РегламентированнаяОтчетность.ЭтоПлательщикЕНВД(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция ПараметрыВыгрузкиОтчета(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета,
	РеглОтчетВыгружаетсяВБанк = Ложь) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат ПараметрыВыгрузкиОтчета2025(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета,
			РеглОтчетВыгружаетсяВБанк);
	Иначе
		Возврат ПараметрыВыгрузкиОтчета2011(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета,
			РеглОтчетВыгружаетсяВБанк);
	КонецЕсли;
	
КонецФункции

Функция ПараметрыВыгрузкиОтчета2011(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, РеглОтчетВыгружаетсяВБанк)
	
	ВидСдачиОтчетности = 0;
	
	ВерсияФормата = ВерсияФормата(ИмяФормы, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '2013-01-01' Тогда
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "21");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "31");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "33");
		
	КонецЕсли;
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(1,  "01");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(2,  "02");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3,  "03");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(4,  "04");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(5,  "05");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6,  "06");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(7,  "07");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(8,  "08");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9,  "09");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(10, "10");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(11, "11");
		
	КонецЕсли;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	ЭтоИП = НЕ ЭтоЮридическоеЛицо(Организация);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", ЭтоИП);
	
	СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ПрефиксИмениФайлаВыгрузки = "NO_BUHOTCH";
	
	Если ВерсияФормата = "5.08" Тогда
		КодФормыДляXML = "0710099";
		ВерсияФорматаДляXML = "5.08";
		
		СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
		
		Если ВидСдачиОтчетности = 3 Тогда
			// Ликвидационная отчетность.
			ПериодОтчетности = "90";
			
			ПрефиксИмениФайлаВыгрузки = "NO_BUHOTCHRE";
			КодФормыДляXML = "0710095";
			ВерсияФорматаДляXML = "5.01";
			
		ИначеЕсли НЕ РеглОтчетВыгружаетсяВБанк
		          И ЭтоПромежуточнаяОтчетностьЗаКвартал(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) Тогда
			// Промежуточная отчетность.
			СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3, "91"); // I квартал
			СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6, "92"); // полугодие
			СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9, "93"); // 9 месяцев
			
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
				Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
			ВерсияФорматаДляXML = "5.09";
			
		Иначе
			// Обычная отчетность.
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
				Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
				
			Если НачалоГода(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала)
			     <> НачалоДня(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) Тогда
				// 94 – первый отчетный год, отличный по продолжительности от календарного.
				ПериодОтчетности = "94";
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("КодФормыДляXML", КодФормыДляXML);
		ПараметрыВыгрузки.Вставить("ВерсияФорматаДляXML", ВерсияФорматаДляXML);
		
		СтруктураОтчета = СохраненныеДанные.СтруктураОтчета;
		
		ЭтоОФР2019 = СтруктураОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД"
		         ИЛИ СтруктураОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД";
		
		ЭтоОФР2020 = НЕ ЭтоОФР2019;
		
		ПараметрыВыгрузки.Вставить("ЭтоОФР2019", ЭтоОФР2019);
		ПараметрыВыгрузки.Вставить("ЭтоОФР2020", ЭтоОФР2020);
		
		ПараметрыВыгрузки.Вставить("КодИФНС", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана));
		ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
			?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
			СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	Иначе
		Если СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
			Если ВидСдачиОтчетности = 2 Тогда
				// Промежуточная отчетность при ликвидации/реорганизации.
				ПериодОтчетности = "94";
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				// Ликвидационная отчетность.
				ПериодОтчетности = "90";
			Иначе
				// Обычная отчетность.
				ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
					Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
			КонецЕсли;
			
		Иначе
			ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
				Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("КодИФНС", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана));
		ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
			?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
			СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("НаимОрг",  СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",   СокрЛП(Титульный.ОргИНН));
	
	Если ЭтоИП Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(Титульный.ОргИНН));
		ПараметрыВыгрузки.Вставить("КППОрг", "");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргНазв);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ФЛИмя",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ФЛОтчество", СокрЛП(ФИОРук.Отчество));
		
	ИначеЕсли СохраненныеДанные.Свойство("ЭтоКрупнейшийНалогоплательщик")
	   И СохраненныеДанные.ЭтоКрупнейшийНалогоплательщик Тогда
		ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(Титульный.КПП));
	Иначе
		ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ", СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",  СокрЛП(Титульный.ОргКодОКФС));
	
	ПараметрКодЕИ = "";
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		ПараметрКодЕИ = "383";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		ПараметрКодЕИ = "384";
	ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения
		= Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		ПараметрКодЕИ = "385";
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ОКЕИ", ПараметрКодЕИ);
	
	Если ВерсияФормата = "5.08" Тогда
		ПараметрыВыгрузки.Вставить("АдрМН", СокрЛП(Титульный.ОргПочтАдрес));
		
		Аудит = "";
		Если ЭтоИП Тогда
			Аудит = "0";
		Иначе
			Если ЗначениеЗаполнено(Титульный.АудитДа) Тогда
				Аудит = "1";
			ИначеЕсли ЗначениеЗаполнено(Титульный.АудитНет) Тогда
				Аудит = "0";
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ПрАудит", Аудит);
		
		АудиторЮЛ = Ложь;
		АудиторИП = Ложь;
		
		Если Аудит = "1" Тогда
			НаимАудитора = СокрЛП(Титульный.НаимАудитора);
			АудиторИНН   = СокрЛП(Титульный.АудиторИНН);
			АудиторОГРН  = СокрЛП(Титульный.АудиторОГРН);
			
			АудиторУказан = ЗначениеЗаполнено(НаимАудитора)
				ИЛИ ЗначениеЗаполнено(АудиторИНН) ИЛИ ЗначениеЗаполнено(АудиторОГРН);
			
			Если АудиторУказан Тогда
				Если СтрДлина(АудиторИНН) = 12 Тогда
					АудиторИП = Истина;
					
					ПараметрыВыгрузки.Вставить("АудитИННФЛ", АудиторИНН);
					ПараметрыВыгрузки.Вставить("АудитОГРНИП", АудиторОГРН);
					
					АудиторФИО = РегламентированнаяОтчетность.РазложитьФИО(НаимАудитора);
					ПараметрыВыгрузки.Вставить("АудитФамилия",  СокрЛП(АудиторФИО.Фамилия));
					ПараметрыВыгрузки.Вставить("АудитИмя",      СокрЛП(АудиторФИО.Имя));
					ПараметрыВыгрузки.Вставить("АудитОтчество", СокрЛП(АудиторФИО.Отчество));
					
				Иначе
					АудиторЮЛ = Истина;
					
					ПараметрыВыгрузки.Вставить("АудитНаимОрг", НаимАудитора);
					ПараметрыВыгрузки.Вставить("АудитИННЮЛ", АудиторИНН);
					ПараметрыВыгрузки.Вставить("АудитОГРН", АудиторОГРН);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("АудиторЮЛ", АудиторЮЛ);
		ПараметрыВыгрузки.Вставить("АудиторИП", АудиторИП);
		
	КонецЕсли;
	
	// Определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки.
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС="
		+ СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	ЗаполнитьСведенияПодписантов(ИмяФормы, ПараметрыВыгрузки, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ПараметрыВыгрузки.Вставить("ТелОрг",
		РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация,
			СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
		
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",
		РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		ПрефиксИмениФайлаВыгрузки = СтрЗаменить(ПрефиксИмениФайлаВыгрузки, "NO_", "BANK_");
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", ПрефиксИмениФайлаВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	
	// Формируем ИдФайл на основании значений других параметров.
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк));
	
	// Условия включения узлов и элементов в выгрузку.
	ПараметрыВыгрузки.Вставить("БалансКоммерческойОрганизации",
		НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	ПараметрыВыгрузки.Вставить("БалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	ПараметрыВыгрузки.Вставить("Период349094",
		(ПериодОтчетности = "34" ИЛИ ПериодОтчетности = "90" ИЛИ ПериодОтчетности = "94"));
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	Если ВерсияФормата = "5.08" Тогда
		ВключитьОФР = Истина;
		
		СписокОКОПФ = "20101, 20102, 20103, 20104, 20105, 20106, 20107, 20108, 20109, 20110,
			|20111, 20112, 20113, 20114, 20115, 20120, 20121, 20200, 20201, 20202,
			|20210, 20211, 20217, 20601, 20603, 20604, 20605, 20606, 20607, 20608,
			|20609, 20610, 20611, 20612, 20613, 20614, 20615, 20616, 20617, 20618,
			|20619, 20620, 20702, 20716, 21100, 21200";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ОФР", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	ИначеЕсли ВерсияФормата = "5.07" ИЛИ ВерсияФормата = "5.06" Тогда
		ПараметрыВыгрузки.Вставить("ДатаУтвОтч", "");
		Если Титульный.Свойство("ДатаУтвОтчетности") Тогда
			Если ЗначениеЗаполнено(Титульный.ДатаУтвОтчетности) Тогда
				ПараметрыВыгрузки.Вставить("ДатаУтвОтч", Формат(Титульный.ДатаУтвОтчетности, "ДФ=дд.ММ.гггг"));
			КонецЕсли;
		КонецЕсли;
		
		ВключитьОФР = Истина;
		
		СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97
		|20101,20102,20103,20104,20105,20106,20107,20108,20109,20110,20111,20112,20113,20114,
		|20115,20120,20121,20200,20201,20202,20210,20211,20217,20601,20603,20604,20605,20606,
		|20607,20608,20609,20610,20611,20612,20613,20614,20615,20616,20617,20618,20619,20620,
		|20701,20716,20900,20902,20904,20905,20906,20908,21001,21002,21003,21100,21200";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	ИначеЕсли ВерсияФормата = "5.05" ИЛИ ВерсияФормата = "5.04" Тогда
		
		ВключитьОФР = Истина;
		СписокОКОПФ = "71,74,76,77,78,80,81,82,83,84,85,86,88,89,93,94,96,97,
		              |20101,20102,20103,20104,20105,20106,20107,20109,20110,
		              |20111,20112,20113,20114,20115,20200,20201,20202,20210,
		              |20211,20300,20401,20403,20404,20500,20601,20603,20604,
		              |20605,20606,20607,20608,20801,20802,20803,20900,20902,
		              |20904,20905,20906,20908,21001,21002,21003,28001,28002,
		              |28004,28005,28006,28007,28008,28010,28012,28013,28014,
		              |28016,28017,29000";
		
		Если ЗначениеСодержитсяВСписке(ИмяФормы, ПараметрыВыгрузки.ОКОПФ, СписокОКОПФ) Тогда
			ВключитьОФР = РазделВключенВОтчет(ИмяФормы, "ФормаОтчета", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц);
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("ВключитьОФР",  ВключитьОФР);
		ПараметрыВыгрузки.Вставить("ВключитьОИК",
			РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",
			РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
			РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	Иначе // ВерсияФормата = "5.02"
		
		ПараметрыВыгрузки.Вставить("ВключитьОИК",   ПериодОтчетности = "34");
		ПараметрыВыгрузки.Вставить("ВключитьОДДС",  ПериодОтчетности = "34");
		ПараметрыВыгрузки.Вставить("ВключитьОЦИПС", (ПериодОтчетности = "34")
			И РазделВключенВОтчет(ИмяФормы, "ОЦИПС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	КонецЕсли;
	
	Если ВерсияФормата <> "5.08" Тогда
		ПояснительнаяЗаписка = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Пояснительная записка", СтруктураРеквизитовФормы);
		Если ПустаяСтрока(ПояснительнаяЗаписка) Тогда
			ПояснительнаяЗаписка = СокрЛП(СохраненныеДанные.СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
		КонецЕсли;
		Если (ПериодОтчетности = "34") Тогда
			ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Истина);
			ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки",
			?(ПустаяСтрока(ПояснительнаяЗаписка), "",
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHPZ", ПараметрыВыгрузки, ПояснительнаяЗаписка)));
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Ложь);
		КонецЕсли;
		
		АудиторскоеЗаключение = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Аудиторское заключение", СтруктураРеквизитовФормы);
		Если ПустаяСтрока(АудиторскоеЗаключение) Тогда
			АудиторскоеЗаключение = СохраненныеДанные.СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		КонецЕсли;
		Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(АудиторскоеЗаключение)) Тогда
			ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Истина);
			ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения",
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHAZ", ПараметрыВыгрузки, АудиторскоеЗаключение));
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Ложь);
		КонецЕсли;
		
		ЗаявлениеРевизионногоСоюза = ИсходноеИмяДополнительногоФайла(ИмяФормы,
			"Заявление союза сельхозпроизводителей", СтруктураРеквизитовФормы);
		Если ПустаяСтрока(ЗаявлениеРевизионногоСоюза) Тогда
			ЗаявлениеРевизионногоСоюза = СохраненныеДанные.СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
		КонецЕсли;
		
		Если (ПериодОтчетности = "34" И НЕ ПустаяСтрока(ЗаявлениеРевизионногоСоюза)) Тогда
			ПараметрыВыгрузки.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Истина);
			ПараметрыВыгрузки.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза",
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHZSHP", ПараметрыВыгрузки, ЗаявлениеРевизионногоСоюза));
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьЗаявлениеРевизионногоСоюза", Ложь);
		КонецЕсли;
		
	Иначе
		ПояснительнаяЗаписка = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Пояснительная записка", СтруктураРеквизитовФормы);
		Если НЕ ЗначениеЗаполнено(ПояснительнаяЗаписка) Тогда
			ПояснительнаяЗаписка = СокрЛП(СохраненныеДанные.СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПояснительнаяЗаписка) Тогда
			ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Истина);
			ИмяФайлаПояснительнойЗаписки = ?(РеглОтчетВыгружаетсяВБанк, ПояснительнаяЗаписка,
				ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHPZ", ПараметрыВыгрузки, ПояснительнаяЗаписка));
			ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки", ИмяФайлаПояснительнойЗаписки);
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Ложь);
		КонецЕсли;
		
		АудиторскоеЗаключение = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Аудиторское заключение", СтруктураРеквизитовФормы);
		Если НЕ ЗначениеЗаполнено(АудиторскоеЗаключение) Тогда
			АудиторскоеЗаключение = СохраненныеДанные.СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		КонецЕсли;
		Если ЗначениеЗаполнено(АудиторскоеЗаключение) Тогда
			ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Истина);
			ИмяФайлаАудиторскогоЗаключения = ?(РеглОтчетВыгружаетсяВБанк, АудиторскоеЗаключение,
				ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHAZ", ПараметрыВыгрузки, АудиторскоеЗаключение));
			ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения", ИмяФайлаАудиторскогоЗаключения);
		Иначе
			ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Процедура ЗаполнитьСведенияПодписантов(ИмяФормы,
									   ПараметрыВыгрузки,
									   ДанныеОтчета,
									   СтруктураРеквизитовФормы)
	
	Титульный = ДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
		
		// Форматы выгрузки 5.07, 5.06, 5.05.
		КодНО = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОргана);
		КПП = СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КПП);
		
		СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
			СтруктураРеквизитовФормы.мСохраненныйДок.Организация, КодНО, КПП);
		
		ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
		
		Если ТипПодписанта = "1" Тогда
			// Руководитель организации.
			ПараметрыВыгрузки.Вставить("ПрПодп", "1");
			
			ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
			
		Иначе
			// Уполномоченный представитель.
			ПараметрыВыгрузки.Вставить("ПрПодп", "2");
			
			ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
			ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
			ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
			ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
			
			ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
			
		КонецЕсли;
		
	Иначе
		// Форматы выгрузки 5.04, 5.02.
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
		ПараметрыВыгрузки.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
		
		ВыгружатьСведенияБухгалтера = (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '2012-12-01');
		Если ВыгружатьСведенияБухгалтера Тогда
			ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргБухгалтер);
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "4");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  СокрЛП(ФИОБух.Фамилия));
			ПараметрыВыгрузки.Вставить("ИмяБух",      СокрЛП(ФИОБух.Имя));
			ПараметрыВыгрузки.Вставить("ОтчествоБух", СокрЛП(ФИОБух.Отчество));
		Иначе
			ПараметрыВыгрузки.Вставить("КодПодписантаБух", "");
			ПараметрыВыгрузки.Вставить("ФамилияБух",  "");
			ПараметрыВыгрузки.Вставить("ИмяБух",      "");
			ПараметрыВыгрузки.Вставить("ОтчествоБух", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(РеглОтчетВыгружаетсяВБанк, "",
					  ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
					  					  ПараметрыВыгрузки.КодИФНСПосредника,
										  ПараметрыВыгрузки.КодИФНС)
					  + "_" + ПараметрыВыгрузки.КодИФНС + "_")
			+ ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
			    СокрЛП(ПараметрыВыгрузки.ИННОрг),
			    СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки;
	
КонецФункции

Функция ВерсияФормата(ИмяФормы, ДатаДействия)
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ВерсияФормата = "5.08";
		
	Иначе
		Если ДатаДействия >= '2016-01-01' Тогда
			ВерсияФормата = "5.07";
		ИначеЕсли ДатаДействия >= '2015-01-01' Тогда
			ВерсияФормата = "5.06";
		ИначеЕсли ДатаДействия >= '2013-12-01' Тогда
			ВерсияФормата = "5.05";
		ИначеЕсли ДатаДействия >= '2012-01-01' Тогда
			ВерсияФормата = "5.04";
		Иначе
			ВерсияФормата = "5.02";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ИмяФормы, ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция РазделВключенВОтчет(ИмяФормы, ИмяРаздела, СтруктураРеквизитовФормы, Знач СписокРазделов = Неопределено)
	
	Если СписокРазделов = Неопределено Тогда
						
		СписокРазделов = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
		
	КонецЕсли;
	
	Результат = Ложь;
	
	НайденнаяСтраницаОтчета = СписокРазделов.Строки.Найти(ИмяРаздела, "ИмяСтраницы");
	
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИсходноеИмяДополнительногоФайла(ИмяФормы, ВидДополнительногоФайла, СтруктураРеквизитовФормы)
	
	ИсходноеИмя = "";
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.Прочитать();
	
	Если НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
		ИсходноеИмя = ЗаписьРегистраСведений.ИмяФайла;
	КонецЕсли;
	
	Возврат ИсходноеИмя;
	
КонецФункции

// Формирует имя файла по требованиям формата выгрузки.
//
// Параметры:
//   ИмяФормы - Строка - Имя формы, используется для выбора конкретной реализации
//   ПрефиксФайла - Строка - Префикс файла, описанный в формате
//   ПараметрыВыгрузки - Структура
//   ИсходноеИмяФайла - Строка - Исходное имя файла, используется только для определения расширения
// 
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьИмяДополнительногоФайла(ИмяФормы, ПрефиксФайла, ПараметрыВыгрузки, ИсходноеИмяФайла)
	
	ИдентификаторПолучателя = ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
		ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС);
	ИдентификаторКонечногоПолучателя = ПараметрыВыгрузки.КодИФНС;
	
	ИдентификаторОтправителя = ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
		СокрЛП(ПараметрыВыгрузки.ИННОрг),
		СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг));
	
	ИмяФайла = ПрефиксФайла
	           + "_" + ИдентификаторПолучателя
	           + "_" + ИдентификаторКонечногоПолучателя
	           + "_" + ИдентификаторОтправителя
	           + "_" + ПараметрыВыгрузки.ИдентификаторФайлаВыгрузки
	           + "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	           + "_" + Строка(Новый УникальныйИдентификатор)
	           + ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИсходноеИмяФайла).Расширение;
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ЗначениеПериведенноеКЕдиницеИзмерения(ИмяФормы, Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы, СтруктураРеквизитовФормы, КешСхем = Неопределено) Экспорт
	
	ИмяКешаОтчета  = "БухОтчетность";
	ИмяМакетаСхемы = ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы);
	
	Если КешСхем <> Неопределено И КешСхем.Свойство(ИмяКешаОтчета) И КешСхем[ИмяКешаОтчета].Свойство(ИмяМакетаСхемы) Тогда
		ДеревоСтруктуры = КешСхем[ИмяКешаОтчета][ИмяМакетаСхемы].Скопировать();
		
	Иначе
		ДеревоСтруктуры = Новый ДеревоЗначений;
		ДеревоСтруктуры.Колонки.Добавить("Код");
		ДеревоСтруктуры.Колонки.Добавить("Тип");
		ДеревоСтруктуры.Колонки.Добавить("Формат");
		ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
		ДеревоСтруктуры.Колонки.Добавить("Обязательность");
		ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
		ДеревоСтруктуры.Колонки.Добавить("Многострочность");
		ДеревоСтруктуры.Колонки.Добавить("Раздел");
		ДеревоСтруктуры.Колонки.Добавить("Ключ");
		ДеревоСтруктуры.Колонки.Добавить("Условие");
		ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
		ДеревоСтруктуры.Колонки.Добавить("Значение");
		ДеревоСтруктуры.Колонки.Добавить("Представление");
		ДеревоСтруктуры.Колонки.Добавить("Показатели");
		
		Макет = ПолучитьМакет(ИмяМакетаСхемы);
		
		ВысотаТаблицы = Макет.ВысотаТаблицы;
		
		УчтенныеГруппы = Новый Соответствие;
		
		Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
			Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
			Для НомерСтроки = 2 По ВысотаТаблицы Цикл
				НомСтр = ВысотаТаблицы - НомерСтроки + 2;
				Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
					
					РодительскийУзел = ДеревоСтруктуры;
					Если Уровень <> 0 Тогда
						Для Инд = 1 По НомСтр - 2 Цикл
							Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
							Если Узел <> Неопределено Тогда
								РодительскийУзел = Узел;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					НовСтр = РодительскийУзел.Строки.Вставить(0);
					НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
					НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
					НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
					НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
					НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
					МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
					НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
					МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
					НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
					НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
					НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
					НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
					НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
					НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
					НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
					
					УчтенныеГруппы.Вставить(НомСтр, НовСтр);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если КешСхем <> Неопределено Тогда
			Если НЕ КешСхем.Свойство(ИмяКешаОтчета) Тогда
				КешСхем.Вставить(ИмяКешаОтчета, Новый Структура);
			КонецЕсли;
			КешСхем[ИмяКешаОтчета].Вставить(ИмяМакетаСхемы, ДеревоСтруктуры.Скопировать());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ИмяМакетаСтруктурыВыгрузки(ИмяФормы, СтруктураРеквизитовФормы)
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		ИмяМакетаСхемы = "СхемаВыгрузки510";
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ИмяМакетаСхемы = "СхемаВыгрузки508";
		
	Иначе
		Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2016-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки507";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2015-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки506";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2013-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки505";
		ИначеЕсли СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания >= '2012-01-01' Тогда
			ИмяМакетаСхемы = "СхемаВыгрузки504";
		Иначе
			ИмяМакетаСхемы = "СхемаВыгрузки502";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяМакетаСхемы;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки, ДанныеОтчета,
	СтруктураРеквизитовФормы) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки, РезультатВыгрузки, ДанныеОтчета,
		СтруктураРеквизитовФормы);
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		ЗаполнитьДаннымиУзел2025(ПараметрыВыгрузки, ДеревоВыгрузки, ДанныеОтчета.ДеревоДанныхРазделов);
	Иначе
		ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, ДеревоВыгрузки);
	КонецЕсли;
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки,
									 ДанныеОтчета,
									 СтруктураРеквизитовФормы)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	
	КоличествоСтрок = Узел.Строки.Количество();
	
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(
						РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки,
								   ДанныеОтчета,
								   СтруктураРеквизитовФормы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
							   
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы, ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(ИмяФормы, Стр, ЗначениеПериведенноеКЕдиницеИзмерения(
								ИмяФормы, ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(ИмяФормы, Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0
			 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
				   ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ИмяФормы, ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел)
	
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество()
	 ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МаксШирина = Узел.МаксРазмерность;
	
	// Формат узла может быть задан кириллицей или латиницей.
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)),
			СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
			
	ИначеЕсли Узел.Формат = "N" ИЛИ Узел.Формат = "Q" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
		
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел)
	
	ЭтоЧисловойПоказатель = (Узел.Формат = "N" ИЛИ Узел.Формат = "Q");
	Если ЭтоЧисловойПоказатель Тогда
		УзелПуст = (Узел.Значение = "0" ИЛИ НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		УзелПуст = (НЕ ЗначениеЗаполнено(Узел.Значение) ИЛИ Узел.Код = "ОКУД");
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УзелПуст;
	
КонецФункции

Функция ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(ИмяФормы, Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьДанные(ИмяФормы, Узел, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(ИмяФормы, Узел, РезультатВыгрузки) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(ИмяФормы, Стр, РезультатВыгрузки) И СтатусПроверки);
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗначениеСоответствуетФормату(ИмяФормы, Стр, РезультатВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		
		ДлинаЗначения = СтрДлина(Стр.Значение);
		
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ меньше минимально возможной (" + ДлинаЗначения
					+ " < " + Стр.МинРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			
			СтатусПроверки = Ложь;
			Если ЗначениеЗаполнено(Стр.Раздел) И ЗначениеЗаполнено(Стр.Ключ) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", Стр.Раздел, Стр.Ключ, "");
			Иначе
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					"Длина значения показателя """
					+ РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр)
					+ """ больше максимально возможной (" + ДлинаЗначения
					+ " > " + Стр.МаксРазмерность + ")", "Баланс", "");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;

КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки)
		
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>"
		+ Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для Каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
		
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для Каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Выгрузка2025Кв1

Процедура СформироватьСтруктуруПоказателей2025(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы,
	ДеревоНастроекБаланс, ДеревоНастроекФормаОтчета)
	
	ДанныеОтчета = Новый Структура;
	СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
	ДеревоДанныхРазделов = СохраненныеДанные.ДеревоДанныхРазделов;
	
	ВсеПоказатели = ДеревоДанныхРазделов.Строки.НайтиСтроки(
		Новый Структура("Тип", "Показатель"), Истина);
	ВычитаемыеПоказатели = ВычитаемыеПоказатели2025Кв1(СохраненныеДанные.ЭтоБалансНекоммерческойОрганизации);
	
	Для Каждого Показатель Из ВсеПоказатели Цикл
		ИмяПоказателя = Показатель.Идентификатор;
		Если ВычитаемыеПоказатели.Найти(ИмяПоказателя) <> Неопределено Тогда
			// Вычитаемые показатели отчета выгружаются по модулю значения.
			Показатель.Данные = Макс(Показатель.Данные, -Показатель.Данные);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОтчета.Вставить("СписокДополнительныхФайлов", СохраненныеДанные.СписокДополнительныхФайлов);
	ДанныеОтчета.Вставить("ДеревоДанныхРазделов", ДеревоДанныхРазделов);
	ДанныеОтчета.Вставить("ЭтоКрупнейшийНалогоплательщик", СохраненныеДанные.ЭтоКрупнейшийНалогоплательщик);
	ДанныеОтчета.Вставить("ИспользуетсяБалансНКО", СохраненныеДанные.ЭтоБалансНекоммерческойОрганизации);
	
	// Элементы структуры требующиеся для совместимости с общим механизмом выгрузки.
	ДанныеОтчета.Вставить("Баланс", Новый Структура);
	ДанныеОтчета.Вставить("ОФР", Новый Структура);
	ДанныеОтчета.Вставить("ОЦИС", Новый Структура);
	ДанныеОтчета.Вставить("ОИК", Новый Структура);
	ДанныеОтчета.Вставить("ОДДС", Новый Структура);
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета2025(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета, РеглОтчетВыгружаетсяВБанк)
	
	Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	ЭтоИП = НЕ ЭтоЮридическоеЛицо(Организация);
	
	СписокДополнительныхФайлов = ДанныеОтчета.СписокДополнительныхФайлов;
	ДеревоДанныхРазделов = ДанныеОтчета.ДеревоДанныхРазделов;
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ОтчетВыгружаетсяВБанк", РеглОтчетВыгружаетсяВБанк);
	
	ПараметрыВыгрузки.Вставить("ВключитьБаланс", Истина);
	ПараметрыВыгрузки.Вставить("ВключитьОФР",
		РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОИК",
		РазделВключенВОтчет(ИмяФормы, "ОИК", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОДДС",
		РазделВключенВОтчет(ИмяФормы, "ОДДС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
	ПараметрыВыгрузки.Вставить("ВключитьОЦИС",
		РазделВключенВОтчет(ИмяФормы, "ОЦИС", СтруктураРеквизитовФормы, ДеревоНастройкиСтраниц));
		
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие();
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3, "91");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6, "92");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9, "93");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(12, "34");
	// Первый отчетный год, отличный по продолжительности от календарного.
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(0, "94");
	
	Если РеглОтчетВыгружаетсяВБанк Тогда
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(1,  "01");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(2,  "02");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(4,  "04");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(5,  "05");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(7,  "07");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(8,  "08");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(10, "10");
		СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(11, "11");
		
	КонецЕсли;
	
	ПериодОтчетности = СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[
		Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)];
	ПараметрыВыгрузки.Вставить("Период", ПериодОтчетности);
	
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",   Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	ПараметрыВыгрузки.Вставить("ФорматВывода", "ЧДЦ=0; ЧН=0; ЧС=3");
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", ЭтоИП);
	ПараметрыВыгрузки.Вставить("ОКПО",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "КодПоОКПОВЗаголовке")));
	ПараметрыВыгрузки.Вставить("ОКОПФ",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "КодПоОКОПФВЗаголовке")));
	ПараметрыВыгрузки.Вставить("ОКФС",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "КодПоОКФСВЗаголовке")));
	
	ПараметрыВыгрузки.Вставить("НаимОрг",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "НаименованиеОрганизацииВЗаголовке")));
	ПараметрыВыгрузки.Вставить("ИННОрг",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "ИННВЗаголовке")));
		
	Если ЭтоИП Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ",
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "ИННВЗаголовке")));
		ПараметрыВыгрузки.Вставить("КППОрг", "");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "НаименованиеОрганизацииВЗаголовке")));
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ФЛИмя",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ФЛОтчество", СокрЛП(ФИОРук.Отчество));
		
	ИначеЕсли ДанныеОтчета.ЭтоКрупнейшийНалогоплательщик Тогда
		ПараметрыВыгрузки.Вставить("КППОрг",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "КПП")));
		
	Иначе
		ПараметрыВыгрузки.Вставить("КППОрг", СокрЛП(Организация.КПП));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрАудит", "");
	ПараметрыВыгрузки.Вставить("АудитНаимОрг", "");
	ПараметрыВыгрузки.Вставить("АудитИННЮЛ", "");
	ПараметрыВыгрузки.Вставить("АудитОГРН", "");
	
	Если ЭтоИП Тогда
		ПараметрыВыгрузки.ПрАудит = "0";
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "АудитДа")) Тогда
		ПараметрыВыгрузки.ПрАудит = "1";
		ПараметрыВыгрузки.АудитНаимОрг =
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "НаименованиеАудиторскойОрганизацииВЗаголовке"));
		ПараметрыВыгрузки.АудитИННЮЛ =
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "ИННАудиторскойОрганизацииВЗаголовке"));
		ПараметрыВыгрузки.АудитОГРН =
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "ОГРНАудиторскойОрганизацииВЗаголовке"));
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "АудитНет")) Тогда
		ПараметрыВыгрузки.ПрАудит = "0";
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрУтвер", "");
	ПараметрыВыгрузки.Вставить("НаимОргнУтв", "");
	
	Если ЭтоИП Тогда
		ПараметрыВыгрузки.ПрУтвер = "0";
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "УтверждениеДа")) Тогда
		ПараметрыВыгрузки.ПрУтвер = "1";
		ПараметрыВыгрузки.НаимОргнУтв =
			СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "НаименованиеУтверждающегоОрганаВЗаголовке"));
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "УтверждениеНет")) Тогда
		ПараметрыВыгрузки.ПрУтвер = "0";
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("АдрМН",
		СокрЛП(ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "АдресВЗаголовке")));
	
	ПараметрыВыгрузки.Вставить("КодИФНС", СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(Организация.КрупнейшийНалогоплательщик, СокрЛП(Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ИдентификаторФайлаВыгрузки", Строка(Новый УникальныйИдентификатор));
	Если РеглОтчетВыгружаетсяВБанк Тогда
		ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "BANK_BUHOTCH");
	Иначе
		ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_BUHOTCH");
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ИмяФормы, ПараметрыВыгрузки, РеглОтчетВыгружаетсяВБанк));
	
	ПараметрыВыгрузки.Вставить("БалансКоммерческойОрганизации", НЕ ДанныеОтчета.ИспользуетсяБалансНКО);
	ПараметрыВыгрузки.Вставить("БалансНекоммерческойОрганизации", ДанныеОтчета.ИспользуетсяБалансНКО);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки", "");
	ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Ложь);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения", "");
	ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Ложь);
	
	ПояснительнаяЗаписка = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Пояснительная записка", СтруктураРеквизитовФормы);
	Если НЕ ЗначениеЗаполнено(ПояснительнаяЗаписка) Тогда
		ПояснительнаяЗаписка = СокрЛП(СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПояснительнаяЗаписка) Тогда
		ПараметрыВыгрузки.Вставить("ЕстьПояснительнаяЗаписка", Истина);
		ИмяФайлаПояснительнойЗаписки = ?(РеглОтчетВыгружаетсяВБанк, ПояснительнаяЗаписка,
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHPZ", ПараметрыВыгрузки, ПояснительнаяЗаписка));
		ПараметрыВыгрузки.Вставить("ИмяФайлаПояснительнойЗаписки", ИмяФайлаПояснительнойЗаписки);
	КонецЕсли;
	
	АудиторскоеЗаключение = ИсходноеИмяДополнительногоФайла(ИмяФормы, "Аудиторское заключение", СтруктураРеквизитовФормы);
	Если НЕ ЗначениеЗаполнено(АудиторскоеЗаключение) Тогда
		АудиторскоеЗаключение = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	КонецЕсли;
	Если ЗначениеЗаполнено(АудиторскоеЗаключение) Тогда
		ПараметрыВыгрузки.Вставить("ЕстьАудиторскоеЗаключение", Истина);
		ИмяФайлаАудиторскогоЗаключения = ?(РеглОтчетВыгружаетсяВБанк, АудиторскоеЗаключение,
			ПолучитьИмяДополнительногоФайла(ИмяФормы, "NO_BUHAZ", ПараметрыВыгрузки, АудиторскоеЗаключение));
		ПараметрыВыгрузки.Вставить("ИмяФайлаАудиторскогоЗаключения", ИмяФайлаАудиторскогоЗаключения);
	КонецЕсли;
	
	КодНО = СокрЛП(СокрЛП(Организация.КодНалоговогоОргана));
	КПП = СокрЛП(Организация.КПП);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Руководитель организации.
		ПараметрыВыгрузки.Вставить("ПрПодп", "1");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(СокрЛП(
			ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "ФИОПодписанта")));
		ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОРук.Фамилия));
		ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОРук.Имя));
		ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОРук.Отчество));
		
		ПараметрыВыгрузки.Вставить("ПодпНаимДок", "");
		
	Иначе
		// Уполномоченный представитель.
		ПараметрыВыгрузки.Вставить("ПрПодп", "2");
		
		ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(СведенияОПредставителе.ФИОПредставителя);
		ПараметрыВыгрузки.Вставить("ПодпФамилия",  СокрЛП(ФИОПредставителя.Фамилия));
		ПараметрыВыгрузки.Вставить("ПодпИмя",      СокрЛП(ФИОПредставителя.Имя));
		ПараметрыВыгрузки.Вставить("ПодпОтчество", СокрЛП(ФИОПредставителя.Отчество));
		
		ПараметрыВыгрузки.Вставить("ПодпНаимДок", СведенияОПредставителе.ДокументПредставителя);
		
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

// Возвращает перечень вычитаемых показателей для формы ФормаОтчета2025Кв1.
//
// Параметры:
//   ИспользуетсяБалансНКО - Булево
// 
// Возвращаемое значение:
//   Массив из Строка
//
Функция ВычитаемыеПоказатели2025Кв1(ИспользуетсяБалансНКО) Экспорт
	
	ВычитаемыеПоказатели = Новый Массив;
	
	Если НЕ ИспользуетсяБалансНКО Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВычитаемыеПоказатели,
			Список("П000010132004, П000010132005, П000010132006, П100010132004, П100010132005, П100010132006,
			       |П10001А132004, П10001А132005, П10001А132006, П10001Б132004, П10001Б132005, П10001Б132006"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВычитаемыеПоказатели,
		Список("П000010212004, П000010212005, П100010212004, П100010212005,
		       |П10001А212004, П10001А212005, П10001Б212004, П10001Б212005,
		       |П000010221004, П000010221005, П100010221004, П100010221005,
		       |П10001А221004, П10001А221005, П10001Б221004, П10001Б221005,
		       |П000010222004, П000010222005, П100010222004, П100010222005,
		       |П10001А222004, П10001А222005, П10001Б222004, П10001Б222005,
		       |П000010233004, П000010233005, П100010233004, П100010233005,
		       |П10001А233004, П10001А233005, П10001Б233004, П10001Б233005,
		       |П000010235004, П000010235005, П100010235004, П100010235005,
		       |П10001А235004, П10001А235005, П10001Б235004, П10001Б235005,
		       |П000010241104, П000010241105"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВычитаемыеПоказатели,
		Список("П000010310005, П000010313005, П000010325005, П000010320005, П000010323005, П000010330005"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВычитаемыеПоказатели,
		Список("П000010412004, П000010412005, П000010412104, П000010412105, П000010412204, П000010412205,
		       |П000010412304, П000010412305, П000010412404, П000010412405, П000010412904, П000010412905,
		       |П100010412004, П100010412005,
		       |П000010422004, П000010422005, П000010422104, П000010422105, П000010422204, П000010422205,
		       |П000010422304, П000010422305, П000010422404, П000010422405, П000010422904, П000010422905,
		       |П100010422004, П100010422005,
		       |П000010432004, П000010432005, П000010432104, П000010432105, П000010432204, П000010432205,
		       |П000010432304, П000010432305, П000010432904, П000010432905,
		       |П100010432004, П100010432005"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВычитаемыеПоказатели,
		Список("П000010631004, П000010631005, П000010631104, П000010631105, П000010631204, П000010631205,
		       |П10001А631004, П10001А631005, П10001Б631004, П10001Б631005,
		       |П000010631304, П000010631305, П100010631304, П100010631305,
		       |П000010632004, П000010632005, П000010632104, П000010632105, П000010632204, П000010632205,
		       |П000010632304, П000010632305, П000010632404, П000010632405, П000010632504, П000010632505,
		       |П10001А632004, П10001А632005, П10001Б632004, П10001Б632005,
		       |П000010632604, П000010632605, П100010632604, П100010632605,
		       |П000010633004, П000010633005, П100010633004, П100010633005,
		       |П10001А633004, П10001А633005, П10001Б633004, П10001Б633005,
		       |П000010635004, П000010635005, П100010635004, П100010635005,
		       |П000010630004, П000010630005"));
		
	Возврат ВычитаемыеПоказатели;
	
КонецФункции

Процедура ЗаполнитьДаннымиУзел2025(ПараметрыВыгрузки, РодительскийУзел, ДеревоДанных)
	
	ИмяФормы = "ФормаОтчета2025Кв1";
	
	ИсходныеУзлы = Новый Массив; // предотвращает обход добавленных узлов
	Для Каждого Узел Из РодительскийУзел.Строки Цикл
		ИсходныеУзлы.Добавить(Узел);
	КонецЦикла;
	
	// Тип узла может быть задан кириллицей или латиницей.
	Для Каждого Узел Из ИсходныеУзлы Цикл
		Если Узел.Тип = "С" ИЛИ Узел.Тип = "C" Тогда
			Если ЗначениеЗаполнено(Узел.Раздел) Тогда
				ДанныеРаздела = ВеткаРаздела(ДеревоДанных, Узел.Раздел);
				ЗаполнитьДаннымиУзел2025(ПараметрыВыгрузки, Узел, ДанныеРаздела);
				
			ИначеЕсли Узел.Многострочность Тогда
				ИдМСЧ = Узел.Ключ;
				МногострочнаяЧасть = МногострочнаяЧастьПоИдМСЧ(ДеревоДанных, ИдМСЧ);
				СтрокиМногострочнойЧасти = СтрокиМногострочнойЧасти(МногострочнаяЧасть);
				Для Каждого СтрокаМСЧ Из СтрокиМногострочнойЧасти Цикл
					НовыйУзел = СкопироватьУзел(ИмяФормы, РодительскийУзел, Узел);
					ЗаполнитьДаннымиУзел2025(ПараметрыВыгрузки, НовыйУзел, СтрокаМСЧ);
				КонецЦикла;
				
			Иначе
				ЗаполнитьДаннымиУзел2025(ПараметрыВыгрузки, Узел, ДеревоДанных);
				
			КонецЕсли;
			
		Иначе
			Если ЗначениеЗаполнено(Узел.ЗначениеПоУмолчанию) Тогда
				Если СтрНачинаетсяС(Узел.ЗначениеПоУмолчанию, "&") Тогда
					ВывестиПоказательВXML(ИмяФормы, Узел, ПараметрыВыгрузки[Сред(Узел.ЗначениеПоУмолчанию, 2)]);
				Иначе
					Узел.Значение = Узел.ЗначениеПоУмолчанию;
				КонецЕсли;
				
			Иначе
				Если ЗначениеЗаполнено(Узел.Ключ) Тогда
					ЗначениеСвойства = ЗначениеПоказателя(ДеревоДанных, Узел.Ключ);
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеСвойства);
					Иначе
						Если Узел.Формат = "Q" Тогда
							// Число, не требующее приведения к единице измерения.
							ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПериведенноеКЕдиницеИзмерения(
								ИмяФормы, ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Узел.Значение = ?(Узел.Формат = "N", "0", "");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ЭтоПромежуточнаяОтчетностьЗаКвартал(ДатаКонцаПериодаОтчета)
	
	НомерМесяца = Месяц(ДатаКонцаПериодаОтчета);
	
	Возврат НомерМесяца = 3 ИЛИ НомерМесяца = 6 ИЛИ НомерМесяца = 9;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияОтчета

Функция ПроверитьВозможностьВыгрузки(ИмяФормы, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки) Экспорт
	
	СтатусПроверки = Истина;
	
	КонтекстПроверки = Новый Структура;
	КонтекстПроверки.Вставить("ИмяФормы", ИмяФормы);
	КонтекстПроверки.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	КонтекстПроверки.Вставить("ДанныеОтчета", ДанныеОтчета);
	КонтекстПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
		ПараметрыПроверки.Вставить("ДанныеОтчета", ДанныеОтчета);
		ПараметрыПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		ПараметрыПроверки.Вставить("РезультатВыгрузки", РезультатВыгрузки);
		ПроверитьВозможностьВыгрузки_ФормаОтчета2025Кв1(СтатусПроверки, ПараметрыПроверки);
		Возврат СтатусПроверки;
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ЕдиницаИзмеренияКорректна =
			(СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000)
			И (СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = 0);
		Если НЕ ЕдиницаИзмеренияКорректна Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" с точностью ""0""';
					|en = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" с точностью ""0""'"),
				"Баланс");
			СтатусПроверки = Ложь;
			Возврат СтатусПроверки;
		КонецЕсли;
		
		ПроверитьВозможностьВыгрузки_ФормаОтчета2019Кв1(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
			
		ПроверитьОКОПФ_ОК_028_2012(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде. Если вы хотите сдать ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса';
					|en = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде. Если вы хотите сдать ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса'"),
				"Баланс", "ВидОтчетностиЛиквидационная");
			СтатусПроверки = Ложь;
			Возврат СтатусПроверки;
		КонецЕсли;
		
	Иначе
		ЕдиницаИзмеренияКорректна =
			(СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000
			ИЛИ СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000)
			И (СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = 0);
		Если НЕ ЕдиницаИзмеренияКорректна Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""';
					|en = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" или ""в миллионах рублей"" с точностью ""0""'"),
				"Баланс");
			СтатусПроверки = Ложь;
			Возврат СтатусПроверки;
		КонецЕсли;
		
		ПроверитьОсновныеРеквизитыОрганизации(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
		
		ПроверитьОКОПФ_Смешанный(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Выгрузка за указанный период не предусмотрена по формату представления в электронной форме';
				|en = 'Выгрузка за указанный период не предусмотрена по формату представления в электронной форме'"),
			"Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'В справочнике «Организации» для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки';
				|en = 'В справочнике «Организации» для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки'"),
			"Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указано полное наименование организации';
				|en = 'Не указано полное наименование организации'"),
			"Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.Свойство("ПрПодп") Тогда
		// Форматы выгрузки 5.08, 5.07, 5.06, 5.05.
		Если ПараметрыВыгрузки.ПрПодп = "1" Тогда
			// Руководитель организации.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить фамилию руководителя';
						|en = 'Не удалось определить фамилию руководителя'"),
					"Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить имя руководителя';
						|en = 'Не удалось определить имя руководителя'"),
					"Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		Иначе
			// Уполномоченный представитель.
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить фамилию уполномоченного представителя';
						|en = 'Не удалось определить фамилию уполномоченного представителя'"),
					"Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить имя уполномоченного представителя';
						|en = 'Не удалось определить имя уполномоченного представителя'"),
					"Баланс", "ОргДиректор");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не задано наименование документа, удостоверяющего полномочия представителя';
						|en = 'Не задано наименование документа, удостоверяющего полномочия представителя'"),
					"Баланс", "");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		// Форматы выгрузки 5.04, 5.02.
		Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не удалось определить фамилию руководителя';
					|en = 'Не удалось определить фамилию руководителя'"),
				"Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ИмяРук) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не удалось определить имя руководителя';
					|en = 'Не удалось определить имя руководителя'"),
				"Баланс", "ОргДиректор");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодПодписантаБух) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияБух) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить фамилию главного бухгалтера';
						|en = 'Не удалось определить фамилию главного бухгалтера'"),
					"Баланс", "ОргБухгалтер");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(ПараметрыВыгрузки.ИмяБух) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
					НСтр("ru = 'Не удалось определить имя главного бухгалтера';
						|en = 'Не удалось определить имя главного бухгалтера'"),
					"Баланс", "ОргБухгалтер");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО) И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8
	 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10
	 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'На титульном листе задан некорректный код по ОКПО';
				|en = 'На титульном листе задан некорректный код по ОКПО'"),
			"Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указано значение кода вида деятельности по ОКВЭД';
				|en = 'Не указано значение кода вида деятельности по ОКВЭД'"),
			"Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Указано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: «XX», «XX.X», «XX.XX», «XX.XX.X», «XX.XX.XX» (X - любая цифра)';
				|en = 'Указано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: «XX», «XX.X», «XX.XX», «XX.XX.X», «XX.XX.XX» (X - любая цифра)'"),
			"Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не задан код по ОКФС';
				|en = 'Не задан код по ОКФС'"),
			"Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Задан некорректный код по ОКФС';
				|en = 'Задан некорректный код по ОКФС'"),
			"Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не задан код по ОКЕИ';
				|en = 'Не задан код по ОКЕИ'"),
			"Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3
		  ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Задан некорректный код по ОКЕИ';
				|en = 'Задан некорректный код по ОКЕИ'"),
			"Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрМН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указан адрес местонахождения организации';
					|en = 'Не указан адрес местонахождения организации'"),
				"Баланс", "ОргПочтАдрес");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Требуется указание как минимум кода региона в адресе';
					|en = 'Требуется указание как минимум кода региона в адресе'"),
				"Баланс", "ОргПочтАдрес");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания < '20120101'
	   И ПараметрыВыгрузки.Период = "34" И ПустаяСтрока(ПараметрыВыгрузки.ИмяФайлаПояснительнойЗаписки) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'К годовой бухгалтерской отчетности необходимо приложить файл пояснительной записки';
				|en = 'К годовой бухгалтерской отчетности необходимо приложить файл пояснительной записки'"),
			"ДополнительныеФайлы");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьМногострочныеЧасти(КонтекстПроверки, СтатусПроверки, РезультатВыгрузки);
	
	Возврат СтатусПроверки;
	
КонецФункции

Процедура ПроверитьВозможностьВыгрузки_ФормаОтчета2019Кв1(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ПроверитьОсновныеРеквизитыИП(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
	Иначе
		ПроверитьОсновныеРеквизитыОрганизации(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
		ПроверитьРеквизитыАудитора(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
			ПараметрыВыгрузки, РезультатВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаВыгрузки2025Кв1

Процедура ПроверитьВозможностьВыгрузки_ФормаОтчета2025Кв1(СтатусПроверки, ПараметрыПроверки)
	
	СтруктураРеквизитовФормы = ПараметрыПроверки.СтруктураРеквизитовФормы;
	ДанныеОтчета = ПараметрыПроверки.ДанныеОтчета;
	ПараметрыВыгрузки = ПараметрыПроверки.ПараметрыВыгрузки;
	РезультатВыгрузки = ПараметрыПроверки.РезультатВыгрузки;
	
	ИмяРаздела = "Баланс";
	
	ЭтоИП = ПараметрыВыгрузки.ЭтоИП;
	ОтчетВыгружаетсяВБанк =  ПараметрыВыгрузки.ОтчетВыгружаетсяВБанк;
	
	Если НЕ ОтчетВыгружаетсяВБанк И ЭтоИП Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'По формату представления в электронном виде выгрузка предусмотрена только для организаций';
				|en = 'По формату представления в электронном виде выгрузка предусмотрена только для организаций'"),
			ИмяРаздела);
		СтатусПроверки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Выгрузка за указанный период не предусмотрена по формату представления в электронном виде';
				|en = 'Выгрузка за указанный период не предусмотрена по формату представления в электронном виде'"),
			ИмяРаздела);
		СтатусПроверки = Ложь;
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмеренияКорректна =
		(СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000)
		И (СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = 0);
	Если НЕ ЕдиницаИзмеренияКорректна Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" с точностью ""0""';
				|en = 'Выгружаемая бухгалтерская отчетность должна быть сохранена с единицей измерения ""в тысячах рублей"" с точностью ""0""'"),
			ИмяРаздела, "КодПоОКЕИВРазделе");
		СтатусПроверки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'Не заполнено наименование организации';
				|en = 'Не заполнено наименование организации'"),
			ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнен ИНН физического лица';
					|en = 'Не заполнен ИНН физического лица'"),
				ИмяРаздела, "ИННВЗаголовке");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННФЛ, Истина) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'У физического лица указан некорректный ИНН';
					|en = 'У физического лица указан некорректный ИНН'"),
				ИмяРаздела, "ИННВЗаголовке");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнен ИНН организации';
					|en = 'Не заполнен ИНН организации'"),
				ИмяРаздела, "ИННВЗаголовке");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЭтоНекорректныйИННЮЛ(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'У организации указан некорректный ИНН';
					|en = 'У организации указан некорректный ИНН'"),
				ИмяРаздела, "ИННВЗаголовке");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнен КПП организации';
					|en = 'Не заполнен КПП организации'"),
				ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.КППСоответствуетТребованиямФНС(ПараметрыВыгрузки.КППОрг) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'У организации указан некорректный КПП';
					|en = 'У организации указан некорректный КПП'"),
				ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ОКПО) Тогда
		Если НЕ СтрПодобнаПоРегулярномуВыражению(ПараметрыВыгрузки.ОКПО, "[0-9]{8}")
		     И НЕ СтрПодобнаПоРегулярномуВыражению(ПараметрыВыгрузки.ОКПО, "[0-9]{10}") Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'У организации указан некорректный код по ОКПО';
					|en = 'У организации указан некорректный код по ОКПО'"),
				ИмяРаздела, "КодПоОКПОВЗаголовке");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКОПФ) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'Не заполнен код по ОКОПФ организации';
				|en = 'Не заполнен код по ОКОПФ организации'"),
			ИмяРаздела, "КодПоОКОПФВЗаголовке");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ПараметрыВыгрузки.ОКОПФ, "[0-9]{5}") Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'У организации указан некорректный код по ОКОПФ';
				|en = 'У организации указан некорректный код по ОКОПФ'"),
			ИмяРаздела, "КодПоОКОПФВЗаголовке");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКФС) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'Не заполнен код по ОКФС организации';
				|en = 'Не заполнен код по ОКФС организации'"),
			ИмяРаздела, "КодПоОКФСВЗаголовке");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ СтрДлина(СокрЛП(ПараметрыВыгрузки.ОКФС)) = 2 Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'У организации указан некорректный код по ОКФС';
				|en = 'У организации указан некорректный код по ОКФС'"),
			ИмяРаздела, "КодПоОКФСВЗаголовке");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрМН) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'Не заполнен адрес в пределах места нахождения';
				|en = 'Не заполнен адрес в пределах места нахождения'"),
			ИмяРаздела, "АдресВЗаголовке");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "1"  Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПодпФамилия) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнена фамилия подписанта';
					|en = 'Не заполнена фамилия подписанта'"),
				ИмяРаздела, "ФИОПодписанта");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПодпИмя) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнено имя подписанта';
					|en = 'Не заполнено имя подписанта'"),
				ИмяРаздела, "ФИОПодписанта");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	ИначеЕсли ПараметрыВыгрузки.ПрПодп = "2" Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПодпФамилия) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'В справочнике организаций не заполнена фамилия представителя';
					|en = 'В справочнике организаций не заполнена фамилия представителя'"),
				ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПодпИмя) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'В справочнике организаций не заполнено имя представителя';
					|en = 'В справочнике организаций не заполнено имя представителя'"),
				ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПодпНаимДок) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'В справочнике организаций не заполнены наименование и реквизиты документа, подтверждающего полномочия уполномоченного представителя';
					|en = 'В справочнике организаций не заполнены наименование и реквизиты документа, подтверждающего полномочия уполномоченного представителя'"),
				ИмяРаздела, "НаименованиеОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПрАудит) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'В заголовочной части должно быть указано подлежит или не подлежит бухгалтерская отчетность обязательному аудиту';
				|en = 'В заголовочной части должно быть указано подлежит или не подлежит бухгалтерская отчетность обязательному аудиту'"),
			ИмяРаздела, "АудитДа");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	УказаныРеквизитыАудиторскойОрганизации = ЗначениеЗаполнено(ПараметрыВыгрузки.АудитНаимОрг)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитИННЮЛ)
		ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитОГРН);
	Если ПараметрыВыгрузки.ПрАудит = "1" И УказаныРеквизитыАудиторскойОрганизации Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитНаимОрг) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не указано наименование аудиторской организации';
					|en = 'Не указано наименование аудиторской организации'"),
				ИмяРаздела, "НаименованиеАудиторскойОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитИННЮЛ) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Не заполнен ИНН аудиторской организации';
					|en = 'Не заполнен ИНН аудиторской организации'"),
				ИмяРаздела, "ИННАудиторскойОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		ИначеЕсли ЭтоНекорректныйИННЮЛ(ПараметрыВыгрузки.АудитИННЮЛ) Тогда
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ИНН аудиторской организации';
					|en = 'Указан некорректный ИНН аудиторской организации'"),
				ИмяРаздела, "ИННАудиторскойОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитОГРН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не заполнен ОГРН аудиторской организации';
					|en = 'Не заполнен ОГРН аудиторской организации'"),
				ИмяРаздела, "ОГРНАудиторскойОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ СтрПодобнаПоРегулярномуВыражению(ПараметрыВыгрузки.АудитОГРН, "[0-9]{13}") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ОГРН аудиторской организации';
					|en = 'Указан некорректный ОГРН аудиторской организации'"),
				ИмяРаздела, "ОГРНАудиторскойОрганизацииВЗаголовке");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПрУтвер) Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'В заголовочной части должно быть указано подлежит или не подлежит бухгалтерская отчетность утверждению';
				|en = 'В заголовочной части должно быть указано подлежит или не подлежит бухгалтерская отчетность утверждению'"),
			ИмяРаздела, "УтверждениеДа");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ = Новый Структура;
	// Неизменяемые параметры.
	ПараметрыПроверкиМСЧ.Вставить("ДеревоДанныхРазделов", ДанныеОтчета.ДеревоДанныхРазделов);
	ПараметрыПроверкиМСЧ.Вставить("ФорматВывода", ПараметрыВыгрузки.ФорматВывода);
	ПараметрыПроверкиМСЧ.Вставить("ГрафаНаименования", "02");
	
	// Изменяемые параметры.
	ПараметрыПроверкиМСЧ.Вставить("ИмяРаздела", "");
	ПараметрыПроверкиМСЧ.Вставить("ШаблонСообщенияОбОшибке", "");
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "Баланс";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В бухгалтерском балансе не заполнено наименование вписываемой строки';
			|en = 'В бухгалтерском балансе не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "ОФР";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В отчете о финансовых результатах не заполнено наименование вписываемой строки';
			|en = 'В отчете о финансовых результатах не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "ОЦИС";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки';
			|en = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "ОИК";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки';
			|en = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "ОЦИС";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки';
			|en = 'В отчете о целевом использовании средств не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	ПараметрыПроверкиМСЧ.ИмяРаздела = "ОДДС";
	ПараметрыПроверкиМСЧ.ШаблонСообщенияОбОшибке =
		НСтр("ru = 'В отчете о движении денежных средств не заполнено наименование вписываемой строки';
			|en = 'В отчете о движении денежных средств не заполнено наименование вписываемой строки'");
	Если ПараметрыВыгрузки["Включить" + ПараметрыПроверкиМСЧ.ИмяРаздела] Тогда
		ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
	КонецЕсли;
	
	Если НЕ ОтчетВыгружаетсяВБанк И НЕ ПараметрыВыгрузки.ЕстьПояснительнаяЗаписка Тогда
		СообщитьОбОшибкеЗаполнения(РезультатВыгрузки,
			НСтр("ru = 'К бухгалтерской отчетности необходимо приложить файл пояснительной записки';
				|en = 'К бухгалтерской отчетности необходимо приложить файл пояснительной записки'"),
			"ДополнительныеФайлы");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМногострочныхЧастейРаздела(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверки)
	
	ДеревоДанныхРазделов = ПараметрыПроверки.ДеревоДанныхРазделов;
	ФорматВывода = ПараметрыПроверки.ФорматВывода;
	ГрафаНаименования = ПараметрыПроверки.ГрафаНаименования;
	
	ИмяРаздела = ПараметрыПроверки.ИмяРаздела;
	ШаблонСообщенияОбОшибке = ПараметрыПроверки.ШаблонСообщенияОбОшибке;
	
	ДанныеРаздела = ВеткаРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	Для Каждого ОбъявлениеМСЧ Из ДанныеРаздела.Строки Цикл
		Если ОбъявлениеМСЧ.Тип <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроверкиМСЧ = Новый Структура;
		ПараметрыПроверкиМСЧ.Вставить("ИмяРаздела", ИмяРаздела);
		ПараметрыПроверкиМСЧ.Вставить("ОбъявлениеМСЧ", ОбъявлениеМСЧ);
		ПараметрыПроверкиМСЧ.Вставить("ГрафаНаименования", ГрафаНаименования);
		ПараметрыПроверкиМСЧ.Вставить("СчетчикСтрок", Новый Массив());
		ПараметрыПроверкиМСЧ.Вставить("ФорматВывода", ФорматВывода);
		ПараметрыПроверкиМСЧ.Вставить("ОписаниеОшибкиЗаполнения", ШаблонСообщенияОбОшибке);
		ПроверитьЗаполнениеМногострочнойЧасти(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверкиМСЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеМногострочнойЧасти(РезультатВыгрузки, СтатусПроверки, ПараметрыПроверки)
	
	ИмяРаздела = ПараметрыПроверки.ИмяРаздела;
	ОбъявлениеМСЧ = ПараметрыПроверки.ОбъявлениеМСЧ;
	ГрафаНаименования = ПараметрыПроверки.ГрафаНаименования;
	ОписаниеОшибкиЗаполнения = ПараметрыПроверки.ОписаниеОшибкиЗаполнения;
	СчетчикСтрок = ПараметрыПроверки.СчетчикСтрок;
	
	ЕстьЗаполненныеСтроки = Ложь;
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаМСЧ Из ОбъявлениеМСЧ.Строки Цикл
		Если СтрокаМСЧ.Тип <> "Строка" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		НаименованиеЗаполнено = Ложь;
		СтрокаЗаполнена = Ложь;
		ИмяОбластиНаименования = "";
		
		Для Каждого ОбъявлениеМСЧ Из СтрокаМСЧ.Строки Цикл
			Если ОбъявлениеМСЧ.Тип <> "МногострочнаяЧасть" Тогда
				Продолжить;
			КонецЕсли;
			
			// Порядок операндов обеспечивает обход всех подчиненных многострочных частей.
			
			ПараметрыПроверкиДочернейМСЧ = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПроверки);
			ПараметрыПроверкиДочернейМСЧ.ОбъявлениеМСЧ = ОбъявлениеМСЧ;
			ПараметрыПроверкиДочернейМСЧ.СчетчикСтрок.Добавить(НомерСтроки);
			
			СтрокаЗаполнена = ПроверитьЗаполнениеМногострочнойЧасти(РезультатВыгрузки, СтатусПроверки,
				ПараметрыПроверкиДочернейМСЧ) ИЛИ СтрокаЗаполнена;
			
		КонецЦикла;
		
		Для Каждого СтрокаПоказателя Из СтрокаМСЧ.Строки Цикл
			Если СтрокаПоказателя.Тип <> "Показатель" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоказателя = СтрокаПоказателя.Идентификатор;
			Если Прав(ИмяПоказателя, 2) = ГрафаНаименования Тогда
				ИмяОбластиНаименования = ИмяПоказателя;
				НаименованиеЗаполнено = ЗначениеЗаполнено(СтрокаПоказателя.Данные);
			Иначе
				ЗначениеПоказателя = СтрокаПоказателя.Данные;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ЗначениеПоказателя = ЗначениеПериведенноеКЕдиницеИзмерения("",
						ЗначениеПоказателя, ПараметрыПроверки);
				КонецЕсли;
				СтрокаЗаполнена = СтрокаЗаполнена ИЛИ ЗначениеЗаполнено(ЗначениеПоказателя);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаЗаполнена И НЕ НаименованиеЗаполнено Тогда
			СборщикПостфикса = Новый Массив;
			СборщикПостфикса.Добавить("");
			Для Каждого НомерСтрокиРодителя Из СчетчикСтрок Цикл
				СборщикПостфикса.Добавить(СтрЧГ0(НомерСтрокиРодителя));
			КонецЦикла;
			СборщикПостфикса.Добавить(СтрЧГ0(НомерСтроки));
			Постфикс = СтрСоединить(СборщикПостфикса, "_");
			
			СообщитьОбОшибкеЗаполнения(РезультатВыгрузки, ОписаниеОшибкиЗаполнения,
				ИмяРаздела, ИмяОбластиНаименования + Постфикс);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЕстьЗаполненныеСтроки = ЕстьЗаполненныеСтроки ИЛИ СтрокаЗаполнена ИЛИ НаименованиеЗаполнено
		
	КонецЦикла;
	
	Возврат ЕстьЗаполненныеСтроки;
	
КонецФункции

// Добавляет описание ошибки в таблицу сообщений об ошибках проверки выгрузки.
// 
// Параметры:
//   ВладелецТаблицыОшибок - ФормаКлиентскогоПриложения, Структура -
//   Описание - Строка -
//   Раздел - Строка -
//   ИмяЯчейки - Строка -
//   НомерСтраницы - Строка - 
//
Процедура СообщитьОбОшибкеЗаполнения(ВладелецТаблицыОшибок, Описание, Раздел, ИмяЯчейки = "", НомерСтраницы = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
		ВладелецТаблицыОшибок, Описание, Раздел, ИмяЯчейки, НомерСтраницы);
	
КонецПроцедуры

Функция ЭтоНекорректныйИННЮЛ(ИННЮридическогоЛица)
	
	Возврат НЕ СтрПодобнаПоРегулярномуВыражению(ИННЮридическогоЛица, "([0-9]{1}[1-9]{1}|[1-9]{1}[0-9]{1})[0-9]{8}")
		ИЛИ НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННЮридическогоЛица, Ложь);
	
КонецФункции

#КонецОбласти

Процедура ПроверитьОсновныеРеквизитыОрганизации(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указан ИНН организации';
				|en = 'Не указан ИНН организации'"),
			"Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
		ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Указан некорректный ИНН юридического лица';
				|en = 'Указан некорректный ИНН юридического лица'"),
			"Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("ЭтоКрупнейшийНалогоплательщик")
	   И СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указан КПП организации в выбранном налоговом органе';
					|en = 'Не указан КПП организации в выбранном налоговом органе'"),
				"Баланс", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный КПП организации в выбранном налоговом органе';
					|en = 'Указан некорректный КПП организации в выбранном налоговом органе'"),
				"Баланс", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'В справочнике ""Организации"" для текущей организации не указан КПП, необходимый для формирования файла выгрузки';
				|en = 'В справочнике ""Организации"" для текущей организации не указан КПП, необходимый для формирования файла выгрузки'"),
			"Баланс");
		СтатусПроверки = Ложь;
		
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'В справочнике ""Организации"" для текущей организации указан некорректный КПП, необходимый для формирования файла выгрузки';
				|en = 'В справочнике ""Организации"" для текущей организации указан некорректный КПП, необходимый для формирования файла выгрузки'"),
			"Баланс");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОсновныеРеквизитыИП(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указан ИНН физического лица';
				|en = 'Не указан ИНН физического лица'"),
			"Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
		ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Указан некорректный ИНН физического лица';
				|en = 'Указан некорректный ИНН физического лица'"),
			"Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛФамилия) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указана фамилия индивидуального предпринимателя';
				|en = 'Не указана фамилия индивидуального предпринимателя'"),
			"Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛИмя) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указано имя индивидуального предпринимателя';
				|en = 'Не указано имя индивидуального предпринимателя'"),
			"Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОКОПФ_Смешанный(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указан код по ОКОПФ';
				|en = 'Не указан код по ОКОПФ'"),
			"Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
		
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2 И СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5)
	      ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Указан некорректный код по ОКОПФ';
				|en = 'Указан некорректный код по ОКОПФ'"),
			"Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОКОПФ_ОК_028_2012(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Не указан код по ОКОПФ';
				|en = 'Не указан код по ОКОПФ'"),
			"Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
		
	ИначеЕсли (СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 5)
	      ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'Указан некорректный код по ОКОПФ';
				|en = 'Указан некорректный код по ОКОПФ'"),
			"Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыАудитора(СтатусПроверки, СтруктураРеквизитовФормы, ДанныеОтчета,
	ПараметрыВыгрузки, РезультатВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПрАудит) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
			НСтр("ru = 'На титульном листе должно быть указано подлежит или не подлежит бухгалтерская отчетность обязательному аудиту';
				|en = 'На титульном листе должно быть указано подлежит или не подлежит бухгалтерская отчетность обязательному аудиту'"),
			"Баланс", "АудитДа");
		СтатусПроверки = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрАудит = "0" Тогда
		// Проверка реквизитов аудитора не требуется.
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.АудиторЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитНаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указано наименование аудиторской организации';
					|en = 'Не указано наименование аудиторской организации'"),
				"Баланс", "НаимАудитора");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитИННЮЛ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указан ИНН аудиторской организации';
					|en = 'Не указан ИНН аудиторской организации'"),
				"Баланс", "АудиторИНН");
			СтатусПроверки = Ложь;
			
		ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
			ПараметрыВыгрузки.АудитИННЮЛ, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ИНН аудиторской организации';
					|en = 'Указан некорректный ИНН аудиторской организации'"),
				"Баланс", "АудиторИНН");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитОГРН) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указан ОГРН аудиторской организации';
					|en = 'Не указан ОГРН аудиторской организации'"),
				"Баланс", "АудиторОГРН");
			СтатусПроверки = Ложь;
			
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.АудитОГРН) <> 13 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ОГРН аудиторской организации';
					|en = 'Указан некорректный ОГРН аудиторской организации'"),
				"Баланс", "АудиторОГРН");
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыВыгрузки.АудиторИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указана фамилия индивидуального аудитора';
					|en = 'Не указана фамилия индивидуального аудитора'"),
				"Баланс", "НаимАудитора");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АудитИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Не указано имя индивидуального аудитора';
					|en = 'Не указано имя индивидуального аудитора'"),
				"Баланс", "НаимАудитора");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		УказанНекорректныйИНН = ЗначениеЗаполнено(ПараметрыВыгрузки.АудитИННФЛ)
			И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(
				ПараметрыВыгрузки.АудитИННФЛ, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		Если УказанНекорректныйИНН Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ИНН индивидуального аудитора';
					|en = 'Указан некорректный ИНН индивидуального аудитора'"),
				"Баланс", "АудиторИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		УказанНекорректныйОГРН = ЗначениеЗаполнено(ПараметрыВыгрузки.АудитОГРНИП)
			И СтрДлина(ПараметрыВыгрузки.АудитОГРНИП) <> 15;
		
		Если УказанНекорректныйОГРН Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(РезультатВыгрузки,
				НСтр("ru = 'Указан некорректный ОГРНИП индивидуального аудитора';
					|en = 'Указан некорректный ОГРНИП индивидуального аудитора'"),
				"Баланс", "АудиторОГРН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьМногострочныеЧасти(КонтекстПроверки, СтатусПроверки, РезультатВыгрузки)
	
	ИмяФормы = КонтекстПроверки.ИмяФормы;
	ДанныеОтчета = КонтекстПроверки.ДанныеОтчета;
	ДатаПодписи = КонтекстПроверки.СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	
	КонтекстПроверкиМСЧ = Новый Структура;
	КонтекстПроверкиМСЧ.Вставить("КонтекстПроверки", КонтекстПроверки);
	
	ИмяРазделаОФР = "ОФР";
	СообщениеОбОшибкеОФР = НСтр("ru = 'В отчете о финансовых результатах не заполнено наименование строки расшифровки';
								|en = 'В отчете о финансовых результатах не заполнено наименование строки расшифровки'");
	
	Если ИмяФормы = "ФормаОтчета2011Кв1" ИЛИ ИмяФормы = "ФормаОтчета2011Кв3" Тогда
		ИмяРазделаОФР = "ФормаОтчета";
		СообщениеОбОшибкеОФР = НСтр("ru = 'В отчете о прибылях и убытках не заполнено наименование строки расшифровки';
									|en = 'В отчете о прибылях и убытках не заполнено наименование строки расшифровки'");
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		ИмяРазделаОФР = "ФормаОтчета";
		Если ДатаПодписи < '2013-01-01' Тогда
			СообщениеОбОшибкеОФР = НСтр("ru = 'В отчете о прибылях и убытках не заполнено наименование строки расшифровки';
										|en = 'В отчете о прибылях и убытках не заполнено наименование строки расшифровки'");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ДанныеОтчета.СтруктураМногострочныхЧастей Цикл
		МногострочнаяЧасть = ЭлементСтруктуры.Значение;
		
		Если МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "Баланс" Тогда
			КонтекстПроверкиМСЧ.Вставить("СообщениеОбОшибке",
				НСтр("ru = 'В бухгалтерском балансе не заполнено наименование строки расшифровки';
					|en = 'В бухгалтерском балансе не заполнено наименование строки расшифровки'"));
			КонтекстПроверкиМСЧ.Вставить("ДанныеРаздела", ДанныеОтчета.ПолеТабличногоДокументаБаланс);
			КонтекстПроверкиМСЧ.Вставить("МногострочнаяЧасть", МногострочнаяЧасть);
			КонтекстПроверкиМСЧ.Вставить("ГрафаИмени",    "02");
			КонтекстПроверкиМСЧ.Вставить("ГрафыЗначений", "04, 05, 06");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + ИмяРазделаОФР Тогда
			КонтекстПроверкиМСЧ.Вставить("СообщениеОбОшибке", СообщениеОбОшибкеОФР);
			КонтекстПроверкиМСЧ.Вставить("ДанныеРаздела", ДанныеОтчета["ПолеТабличногоДокумента" + ИмяРазделаОФР]);
			КонтекстПроверкиМСЧ.Вставить("МногострочнаяЧасть", МногострочнаяЧасть);
			КонтекстПроверкиМСЧ.Вставить("ГрафаИмени",    "02");
			КонтекстПроверкиМСЧ.Вставить("ГрафыЗначений", "04, 05");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ОИК" Тогда
			КонтекстПроверкиМСЧ.Вставить("СообщениеОбОшибке",
				НСтр("ru = 'В отчете об изменениях капитала не заполнено наименование строки расшифровки';
					|en = 'В отчете об изменениях капитала не заполнено наименование строки расшифровки'"));
			КонтекстПроверкиМСЧ.Вставить("ДанныеРаздела", ДанныеОтчета.ПолеТабличногоДокументаОИК);
			КонтекстПроверкиМСЧ.Вставить("МногострочнаяЧасть", МногострочнаяЧасть);
			КонтекстПроверкиМСЧ.Вставить("ГрафаИмени",    "01");
			КонтекстПроверкиМСЧ.Вставить("ГрафыЗначений", "03, 04, 05, 06, 07, 08");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ОДДС" Тогда
			КонтекстПроверкиМСЧ.Вставить("СообщениеОбОшибке",
				НСтр("ru = 'В отчете о движении денежных средств не заполнено наименование строки расшифровки';
					|en = 'В отчете о движении денежных средств не заполнено наименование строки расшифровки'"));
			КонтекстПроверкиМСЧ.Вставить("ДанныеРаздела", ДанныеОтчета.ПолеТабличногоДокументаОДДС);
			КонтекстПроверкиМСЧ.Вставить("МногострочнаяЧасть", МногострочнаяЧасть);
			КонтекстПроверкиМСЧ.Вставить("ГрафаИмени",    "01");
			КонтекстПроверкиМСЧ.Вставить("ГрафыЗначений", "03, 04");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		ИначеЕсли МногострочнаяЧасть.ИмяПоляТабличногоДокумента = "ПолеТабличногоДокумента" + "ОЦИС" Тогда
			КонтекстПроверкиМСЧ.Вставить("СообщениеОбОшибке",
				НСтр("ru = 'В отчете о целевом использовании средств не заполнено наименование строки расшифровки';
					|en = 'В отчете о целевом использовании средств не заполнено наименование строки расшифровки'"));
			КонтекстПроверкиМСЧ.Вставить("ДанныеРаздела", ДанныеОтчета.ПолеТабличногоДокументаОЦИС);
			КонтекстПроверкиМСЧ.Вставить("МногострочнаяЧасть", МногострочнаяЧасть);
			КонтекстПроверкиМСЧ.Вставить("ГрафаИмени",    "02");
			КонтекстПроверкиМСЧ.Вставить("ГрафыЗначений", "04, 05");
			РезультатПроверки = МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки);
			СтатусПроверки = (СтатусПроверки И РезультатПроверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МногострочнаяЧастьЗаполненаПравильно(КонтекстПроверкиМСЧ, РезультатВыгрузки)
	
	Перем НаименованиеСтроки, Индекс, ИндексСтр;
	
	ИмяФормы = КонтекстПроверкиМСЧ.КонтекстПроверки.ИмяФормы;
	ПараметрыВыгрузки = КонтекстПроверкиМСЧ.КонтекстПроверки.ПараметрыВыгрузки;
	СообщениеОбОшибке = КонтекстПроверкиМСЧ.СообщениеОбОшибке;
	ДанныеРаздела = КонтекстПроверкиМСЧ.ДанныеРаздела;
	МногострочнаяЧасть = КонтекстПроверкиМСЧ.МногострочнаяЧасть;
	ГрафаИмени = КонтекстПроверкиМСЧ.ГрафаИмени;
	ГрафыЗначений = КонтекстПроверкиМСЧ.ГрафыЗначений;
	
	РезультатПроверки = Истина;
	
	ИмяПоказателяНаименования = "";
	ИменаЧисловыхПоказателей = Новый Массив;
	
	Для Каждого Колонка Из МногострочнаяЧасть.Состав.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		
		Если СтрДлина(ИмяКолонки) = 13 И Лев(ИмяКолонки, 1) = "П" Тогда
			НомерГрафы = Прав(ИмяКолонки, 2);
			Если НомерГрафы = ГрафаИмени Тогда
				ИмяПоказателяНаименования = ИмяКолонки;
			ИначеЕсли СтрНайти(ГрафыЗначений, НомерГрафы) > 0 Тогда
				ИменаЧисловыхПоказателей.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	
	Пока ДанныеРаздела.Свойство(ИмяПоказателяНаименования + "_" + ИндексСтр, НаименованиеСтроки) Цикл
		Если ПустаяСтрока(НаименованиеСтроки) Тогда
			ЗаполненыЧисловыеПоказатели = Ложь;
			Для Каждого ИмяЧисловогоПоказателя Из ИменаЧисловыхПоказателей Цикл
				ЗначениеПоказателя = ДанныеРаздела[ИмяЧисловогоПоказателя + "_" + ИндексСтр];
				ЗначениеПоказателя = ЗначениеПериведенноеКЕдиницеИзмерения(
					ИмяФормы, ЗначениеПоказателя, ПараметрыВыгрузки);
				Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
					ЗаполненыЧисловыеПоказатели = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗаполненыЧисловыеПоказатели Тогда
				ИмяОтчета = Сред(МногострочнаяЧасть.ИмяПоляТабличногоДокумента, СтрДлина("ПолеТабличногоДокумента") + 1);
				ПолноеИмяПоказателяНаименования = ИмяПоказателяНаименования + "_" + ИндексСтр;
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(
					РезультатВыгрузки, СообщениеОбОшибке, ИмяОтчета, ПолноеИмяПоказателяНаименования);
				РезультатПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ВерсионированиеФорм

Функция ВерсияСтруктурыДанных(ИмяФормы) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Возврат "БРО.2024.04.22";
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		Возврат "БРО.2022.08.22";
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв3" Тогда
		Возврат "БРО.2022.08.22";
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв1" Тогда
		Возврат "БРО.2022.08.08";
	ИначеЕсли ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат "БРО.2024.12.16";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОбновитьСтруктурыДанныхСохраненногоОтчета(ИмяФормы, СохраненныеДанные, ПараметрыОбновления = Неопределено) Экспорт
	
	СохраненныеДанныеИзменены = Ложь;
	
	СохраненнаяВерсия = "РО.2000.01.01"; // Версия формы до использования обновления структур данных
	Если СохраненныеДанные.Свойство("ВерсияСтруктурыДанных") Тогда
		СохраненнаяВерсия = СохраненныеДанные.ВерсияСтруктурыДанных;
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2011Кв1" Тогда
		ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены);
		СохраненныеДанные.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных(ИмяФормы));
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2011Кв3" Тогда
		ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв3(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены);
		СохраненныеДанные.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных(ИмяФормы));
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв4(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены);
		СохраненныеДанные.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных(ИмяФормы));
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		ВыполнитьОбработчикиОбновленияФормаОтчета2019Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены);
		СохраненныеДанные.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных(ИмяФормы));
	КонецЕсли;
	
	Если ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		ВыполнитьОбработчикиОбновленияФормаОтчета2025Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены);
		СохраненныеДанные.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных(ИмяФормы));
	КонецЕсли;
	
	Возврат СохраненныеДанныеИзменены;
	
КонецФункции

Функция ВыполнитьПриПереходеНаВерсию(НоваяВерсия, СохраненнаяВерсия)
	
	Возврат ЧисловоеПредставлениеВерсии(НоваяВерсия) > ЧисловоеПредставлениеВерсии(СохраненнаяВерсия);
	
КонецФункции

Функция ЧисловоеПредставлениеВерсии(ВерсияСтруктурыДанных)
	
	ЧисловоеПредставление = СтрЗаменить(ВерсияСтруктурыДанных, "БРО.", "");
	ЧисловоеПредставление = СтрЗаменить(ЧисловоеПредставление, "РО.", "");
	ЧисловоеПредставление = СтрЗаменить(ЧисловоеПредставление, ".", "");
	ЧисловоеПредставление = Число(ЧисловоеПредставление);
	
	Возврат ЧисловоеПредставление;
	
КонецФункции

Процедура ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены)
	
	Если СтрНайти(СохраненнаяВерсия, "БРО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.08.08", СохраненнаяВерсия) Тогда
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СохраненнаяВерсия, "РО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.08.08", СохраненнаяВерсия) Тогда
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиОбновленияФормаОтчета2011Кв3

Процедура ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв3(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены)
	
	Если СтрНайти(СохраненнаяВерсия, "БРО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.08.22", СохраненнаяВерсия) Тогда
			ДобавитьСтруктурыФормаОтчета2011Кв3_20220822(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СохраненнаяВерсия, "РО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.08.08", СохраненнаяВерсия) Тогда
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		// Требуется выполнить обновление всех версий отчета, сохраненных в РО,
		// для функциональности и структур данных,которые в РО не реализуются.
		ДобавитьСтруктурыФормаОтчета2011Кв3_20220822(СохраненныеДанные);
		СохраненныеДанныеИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтруктурыФормаОтчета2011Кв3_20220822(СохраненныеДанные)
	
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СохраненныеДанные.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
	   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
	   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета")
	   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета) = Тип("ДеревоЗначений") Тогда
		НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти(
			"ДопСтрока24601", "ИмяОбластиДопСтроки", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.Наименование = "Налоги, уплачиваемые в связи с применением специальных налоговых режимов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияФормаОтчета2011Кв4

Процедура ВыполнитьОбработчикиОбновленияФормаОтчета2011Кв4(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены)
	
	Если СтрНайти(СохраненнаяВерсия, "БРО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.08.22", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2011Кв4_20220822(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СохраненнаяВерсия, "РО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.08.08", СохраненнаяВерсия) Тогда
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		// Требуется выполнить обновление всех версий отчета, сохраненных в РО,
		// для функциональности и структур данных,которые в РО не реализуются.
		ДополнитьСтруктурыФормаОтчета2011Кв4_20220822(СохраненныеДанные);
		СохраненныеДанныеИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2011Кв4_20220822(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения6;
	Если НЕ Показатели.Свойство("П000100566503") Тогда
		Показатели.Вставить("П000100566503", 0);
		Показатели.Вставить("П000100566504", 0);
	КонецЕсли;
	
	Если СохраненныеДанные.СтруктураМногострочныхЧастей.Свойство("ДопСтрока5590") Тогда
		ДопСтрока5590 = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока5590;
		ДопСтрока5590.Кодификаторы[0].Код = 5594;
		ДопСтрока5590.Масштаб.МаксимальноеКоличествоСтрок = 6;
	КонецЕсли;
	
	СтруктураОтчета = СохраненныеДанные.СтруктураОтчета;
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СохраненныеДанные.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок <> Неопределено Тогда
		Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
		   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
		   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс")
		   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс) = Тип("ДеревоЗначений") Тогда
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1150", "Код");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
				   И НайденнаяСтрока.Строки.Найти("ДопСтрока11509", "ИмяОбластиДопСтроки") = Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
					НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока11509";
					НоваяСтрока.Наименование        = "Арендованное имущество";
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1260", "Код");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
				   И НайденнаяСтрока.Строки.Найти("ДопСтрока12610", "ИмяОбластиДопСтроки") = Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
					НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока12610";
					НоваяСтрока.Наименование        = "НДС по арендным обязательствам";
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1520", "Код");
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
				   И НайденнаяСтрока.Строки.Найти("ДопСтрока15209", "ИмяОбластиДопСтроки") = Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
					НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15209";
					НоваяСтрока.Наименование        = "Расчеты с персоналом по прочим операциям";
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Найти("1540", "Код");
			
			Если (СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
			 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3")
			   И НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс.Строки.Добавить();
				
				НайденнаяСтрока.ВключатьВОтчет         = 0;
				НайденнаяСтрока.ИмяОбластиДопСтроки    = "";
				НайденнаяСтрока.Код                    = "1540";
				НайденнаяСтрока.МаксимальноеКоличество = 0;
				НайденнаяСтрока.Наименование           = "Оценочные обязательства";
				НайденнаяСтрока.Существенность         = 0;
				НайденнаяСтрока.ТипСостава             = "";
				
			КонецЕсли;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
				   И НайденнаяСтрока.Строки.Найти("ДопСтрока15401", "ИмяОбластиДопСтроки") = Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
					НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15401";
					НоваяСтрока.Наименование        = "Оценочные обязательства по вознаграждениям работников";
				КонецЕсли;
				
				Если ТипЗнч(НайденнаяСтрока) = Тип("СтрокаДереваЗначений")
				   И НайденнаяСтрока.Строки.Найти("ДопСтрока15402", "ИмяОбластиДопСтроки") = Неопределено Тогда
					НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
					НоваяСтрока.ИмяОбластиДопСтроки = "ДопСтрока15402";
					НоваяСтрока.Наименование        = "Резервы предстоящих расходов прочие";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
		   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
		   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета")
		   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета) = Тип("ДеревоЗначений") Тогда
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти(
				"ДопСтрока24601", "ИмяОбластиДопСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Наименование = "Налоги, уплачиваемые в связи с применением специальных налоговых режимов";
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
						Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
							СтрокаДерева.ДостДляРедактирования_Существенность =
								ЗначениеЗаполнено(СтрокаДерева.Существенность);
							СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество =
								ЗначениеЗаполнено(СтрокаДерева.Существенность);
							СтрокаДерева.МаксимальноеКоличество =
								?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияФормаОтчета2019Кв1

Процедура ВыполнитьОбработчикиОбновленияФормаОтчета2019Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены)
	
	Если СтрНайти(СохраненнаяВерсия, "БРО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("БРО.2021.06.12", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиПояснений4_20210612(СохраненныеДанные);
			ДобавитьПоказателиПояснений5_20210612(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2021.12.09", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиПояснений2_20211209(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2021.12.16", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиОФР_20211216(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.01.17", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиОЦИС_20220117(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.02.07", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиБаланс_20220207(СохраненныеДанные);
			ДобавитьПоказателиОФР_20220207(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.04.22", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиПояснений2_20220422(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.05.20", СохраненнаяВерсия) Тогда
			ИзменитьВписываемыеПоказателиОИК_20220520(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.09.28", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20220928(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2022.11.11", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20221111(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2023.01.25", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20230125(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2023.04.12", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20230412(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2023.11.28", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20231128(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2023.12.18", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20231218(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2024.04.01", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20240401(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2024.04.12", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20240412(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("БРО.2024.04.22", СохраненнаяВерсия) Тогда
			ДополнитьСтруктурыФормаОтчета2019Кв1_20240422(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СохраненнаяВерсия, "РО.") = 1 Тогда
		Если ВыполнитьПриПереходеНаВерсию("РО.2021.06.12", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиПояснений4_20210612(СохраненныеДанные);
			ДобавитьПоказателиПояснений5_20210612(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("РО.2021.12.09", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиПояснений2_20211209(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.01.17", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиОЦИС_20220117(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.02.07", СохраненнаяВерсия) Тогда
			ДобавитьПоказателиБаланс_20220207(СохраненныеДанные);
			ДобавитьПоказателиОФР_20220207(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		Если ВыполнитьПриПереходеНаВерсию("РО.2022.05.20", СохраненнаяВерсия) Тогда
			ИзменитьВписываемыеПоказателиОИК_20220520(СохраненныеДанные);
			СохраненныеДанныеИзменены = Истина;
		КонецЕсли;
		
		// Требуется выполнить обновление всех версий отчета, сохраненных в РО,
		// для функциональности и структур данных,которые в РО не реализуются.
		
		ДобавитьПоказателиОФР_20211216(СохраненныеДанные);
		ДобавитьПоказателиПояснений2_20220422(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20220822(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20220928(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20221111(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20230125(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20230412(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20231128(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20231218(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20240401(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20240412(СохраненныеДанные);
		ДополнитьСтруктурыФормаОтчета2019Кв1_20240422(СохраненныеДанные);
		
		СохраненныеДанныеИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиПояснений4_20210612(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения4;
	
	НомераСтрок = СтрРазделить("5400,5420,5401,5421,5402,5422,5403,5423,5404,5424,5405,5425,5406,5426,5407,5427", ",");
	Для Каждого НомерСтроки Из НомераСтрок Цикл
		Показатели.Вставить("П000100" + НомерСтроки + "21", 0);
		Показатели.Вставить("П000100" + НомерСтроки + "22", 0);
	КонецЦикла;
	
	НомерДопСтроки = 1;
	Пока Показатели.Свойство("П100100540001_" + СтрЧГ0(НомерДопСтроки)) Цикл
		Показатели.Вставить("П100100540021_" + СтрЧГ0(НомерДопСтроки), 0);
		Показатели.Вставить("П100100540022_" + СтрЧГ0(НомерДопСтроки), 0);
		Показатели.Вставить("П100100542021_" + СтрЧГ0(НомерДопСтроки), 0);
		Показатели.Вставить("П100100542022_" + СтрЧГ0(НомерДопСтроки), 0);
		НомерДопСтроки = НомерДопСтроки + 1;
	КонецЦикла;
	
	КолонкиМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока5400.Состав.Колонки;
	КолонкиМСЧ.Добавить("П100100540021", Новый ОписаниеТипов("Число"));
	КолонкиМСЧ.Добавить("П100100540022", Новый ОписаниеТипов("Число"));
	КолонкиМСЧ.Добавить("П100100542021", Новый ОписаниеТипов("Число"));
	КолонкиМСЧ.Добавить("П100100542022", Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

Процедура ДобавитьПоказателиПояснений5_20210612(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения5;
	
	Показатели.Вставить("П000100550021", 0);
	Показатели.Вставить("П000100550022", 0);
	Показатели.Вставить("П000100552021", 0);
	Показатели.Вставить("П000100552022", 0);
	Показатели.Вставить("П000100555021", 0);
	Показатели.Вставить("П000100555022", 0);
	Показатели.Вставить("П000100557021", 0);
	Показатели.Вставить("П000100557022", 0);
	
КонецПроцедуры

Процедура ДобавитьПоказателиПояснений2_20211209(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения2;
	Показатели.Вставить("П000100520014", 0);
	Показатели.Вставить("П000100521014", 0);
	Показатели.Вставить("П000100522014", 0);
	Показатели.Вставить("П000100523014", 0);
	
	НомерДопСтроки = 1;
	Пока Показатели.Свойство("П100100520001_" + СтрЧГ0(НомерДопСтроки)) Цикл
		Показатели.Вставить("П100100520014_" + СтрЧГ0(НомерДопСтроки), 0);
		Показатели.Вставить("П100100521014_" + СтрЧГ0(НомерДопСтроки), 0);
		НомерДопСтроки = НомерДопСтроки + 1;
	КонецЦикла;
	
	НомерДопСтроки = 1;
	Пока Показатели.Свойство("П100100522001_" + СтрЧГ0(НомерДопСтроки)) Цикл
		Показатели.Вставить("П100100522014_" + СтрЧГ0(НомерДопСтроки), 0);
		Показатели.Вставить("П100100523014_" + СтрЧГ0(НомерДопСтроки), 0);
		НомерДопСтроки = НомерДопСтроки + 1;
	КонецЦикла;
	
	КолонкиМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока5200.Состав.Колонки;
	КолонкиМСЧ.Добавить("П100100520014", Новый ОписаниеТипов("Число"));
	КолонкиМСЧ.Добавить("П100100521014", Новый ОписаниеТипов("Число"));
	
	КолонкиМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока5220.Состав.Колонки;
	КолонкиМСЧ.Добавить("П100100522014", Новый ОписаниеТипов("Число"));
	КолонкиМСЧ.Добавить("П100100523014", Новый ОписаниеТипов("Число"));
	
КонецПроцедуры

Процедура ДобавитьПоказателиОФР_20211216(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаОФР;
	Показатели.Вставить("П000102342701", "");
	Показатели.Вставить("П000102342704", 0);
	Показатели.Вставить("П000102342705", 0);
	
КонецПроцедуры

Процедура ДобавитьПоказателиОЦИС_20220117(СохраненныеДанные)
	
	СохраненныеДанные.СтруктураОтчета.ОЦИС.ИмяОписанияМногострочныхЧастей = "ОЦИС";
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаОЦИС;
	СтруктураМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей;
	
	// Дополнительные строки к строке 6250.
	ОписаниеДопСтроки = Новый Структура;
	ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаОЦИС");
	ОписаниеДопСтроки.Вставить("Масштаб",
		Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 9));
	ОписаниеДопСтроки.Вставить("Габариты",
		Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100625002", "П100100625005"));
	ОписаниеДопСтроки.Вставить("Кодификаторы", Новый Массив);
	ОписаниеДопСтроки.Кодификаторы.Добавить(Новый Структура("Область, Код", "П100100625003", 6251));
	ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100625002", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100625003", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100625004", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100625005", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Добавить();
	
	СтруктураМСЧ.Вставить("ДопСтрока6250", ОписаниеДопСтроки);
	
	Показатели.Вставить("П100100625002_1", "");
	Показатели.Вставить("П100100625003_1", "");
	Показатели.Вставить("П100100625004_1", 0);
	Показатели.Вставить("П100100625005_1", 0);
	
	// Дополнительные строки к строке 6350.
	ОписаниеДопСтроки = Новый Структура;
	ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаОЦИС");
	ОписаниеДопСтроки.Вставить("Масштаб",
		Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 9));
	ОписаниеДопСтроки.Вставить("Габариты",
		Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100635002", "П100100635005"));
	ОписаниеДопСтроки.Вставить("Кодификаторы", Новый Массив);
	ОписаниеДопСтроки.Кодификаторы.Добавить(Новый Структура("Область, Код", "П100100635003", 6351));
	ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100635002", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100635003", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100635004", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100635005", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Добавить();
	
	СтруктураМСЧ.Вставить("ДопСтрока6350", ОписаниеДопСтроки);
	
	Показатели.Вставить("П100100635002_1", "");
	Показатели.Вставить("П100100635003_1", "");
	Показатели.Вставить("П100100635004_1", 0);
	Показатели.Вставить("П100100635005_1", 0);
	
КонецПроцедуры

Процедура ДобавитьПоказателиБаланс_20220207(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	СтруктураМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей;
	
	// Дополнительные строки к строке 1430.
	ОписаниеДопСтроки = Новый Структура;
	ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаБаланс");
	ОписаниеДопСтроки.Вставить("Масштаб",
		Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 0));
	ОписаниеДопСтроки.Вставить("Габариты",
		Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100143002", "П100100143006"));
	ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143001", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143002", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143003", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143004", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143005", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100143006", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Добавить();
	
	СтруктураМСЧ.Вставить("П1001001430", ОписаниеДопСтроки);
	
	Показатели.Вставить("П100100143001_1", "");
	Показатели.Вставить("П100100143002_1", "");
	Показатели.Вставить("П100100143003_1", "");
	Показатели.Вставить("П100100143004_1", 0);
	Показатели.Вставить("П100100143005_1", 0);
	Показатели.Вставить("П100100143006_1", 0);
	
КонецПроцедуры

Процедура ДобавитьПоказателиОФР_20220207(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаОФР;
	СтруктураМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей;
	
	// Дополнительные строки к строке 2520.
	ОписаниеДопСтроки = Новый Структура;
	ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаОФР");
	ОписаниеДопСтроки.Вставить("Масштаб",
		Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 0));
	ОписаниеДопСтроки.Вставить("Габариты",
		Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100252002", "П100100252005"));
	ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100252001", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100252002", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100252003", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100252004", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100252005", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Добавить();
	
	СтруктураМСЧ.Вставить("П1001002520", ОписаниеДопСтроки);
	
	Показатели.Вставить("П100100252001_1", "");
	Показатели.Вставить("П100100252002_1", "");
	Показатели.Вставить("П100100252003_1", "");
	Показатели.Вставить("П100100252004_1", 0);
	Показатели.Вставить("П100100252005_1", 0);
	
	Если СохраненныеДанные.СтруктураОтчета.ОФР.ИмяОписанияМногострочныхЧастей <> "ОФР_НеЕНВД"
	   И СохраненныеДанные.СтруктураОтчета.ОФР.ИмяОписанияМногострочныхЧастей <> "ОФР_ЕНВД" Тогда
		// Дополнительные строки к строке 2530.
		ОписаниеДопСтроки = Новый Структура;
		ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаОФР");
		ОписаниеДопСтроки.Вставить("Масштаб",
			Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 0));
		ОписаниеДопСтроки.Вставить("Габариты",
			Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100253002", "П100100253005"));
		ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
		ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100253001", Новый ОписаниеТипов("Строка"));
		ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100253002", Новый ОписаниеТипов("Строка"));
		ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100253003", Новый ОписаниеТипов("Строка"));
		ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100253004", Новый ОписаниеТипов("Число"));
		ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100253005", Новый ОписаниеТипов("Число"));
		ОписаниеДопСтроки.Состав.Добавить();
		
		СтруктураМСЧ.Вставить("П1001002530", ОписаниеДопСтроки);
		
		Показатели.Вставить("П100100253001_1", "");
		Показатели.Вставить("П100100253002_1", "");
		Показатели.Вставить("П100100253003_1", "");
		Показатели.Вставить("П100100253004_1", 0);
		Показатели.Вставить("П100100253005_1", 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоказателиПояснений2_20220422(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения2;
	Показатели.Вставить("П000100528703", 0);
	Показатели.Вставить("П000100528704", 0);
	Показатели.Вставить("П000100528705", 0);
	
	ДопСтрока5287 = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока5287;
	ДопСтрока5287.Масштаб.МаксимальноеКоличествоСтрок = 2;
	ДопСтрока5287.Кодификаторы[0].Код = 5288;
	
КонецПроцедуры

Процедура ИзменитьВписываемыеПоказателиОИК_20220520(СохраненныеДанные)
	
	Если СохраненныеДанные.СтруктураМногострочныхЧастей.Свойство("ДопСтрока3240") Тогда
		ДопСтрока3240 = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока3240;
		ДопСтрока3240.Масштаб.МаксимальноеКоличествоСтрок = 2;
		ДопСтрока3240.Кодификаторы[0].Код = 3228;
	КонецЕсли;
	
	Если СохраненныеДанные.СтруктураМногострочныхЧастей.Свойство("ДопСтрока3340") Тогда
		ДопСтрока3340 = СохраненныеДанные.СтруктураМногострочныхЧастей.ДопСтрока3340;
		ДопСтрока3340.Масштаб.МаксимальноеКоличествоСтрок = 2;
		ДопСтрока3340.Кодификаторы[0].Код = 3328;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20220822(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения6;
	Если НЕ Показатели.Свойство("П000100566503") Тогда
		Показатели.Вставить("П000100566503", 0);
		Показатели.Вставить("П000100566504", 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20220928(СохраненныеДанные)
	
	СохраненныеДанные.СтруктураОтчета.Пояснения7.Вставить(
		"ИмяСекцииНастройкиСоставаПоказателей", "Пояснения7");
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаПояснения7;
	
	Показатели.Вставить("П000100570103", 0);
	Показатели.Вставить("П000100570104", 0);
	Показатели.Вставить("П000100570105", 0);
	Показатели.Вставить("П000100570106", 0);
	Показатели.Вставить("П000100570107", 0);
	
	Показатели.Вставить("П000100570203", 0);
	Показатели.Вставить("П000100570204", 0);
	Показатели.Вставить("П000100570205", 0);
	Показатели.Вставить("П000100570206", 0);
	Показатели.Вставить("П000100570207", 0);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20221111(СохраненныеДанные)
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Корректировка");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Корректировка");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Корректировка");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Корректировка");
	
	ЭтоБалансНКО = (СохраненныеДанные.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО");
	СтруктураОтчета.Вставить("БлокиМакета", НоваяСтруктураБлоковКорректировка("ФормаОтчета2019Кв1", ЭтоБалансНКО));
	
	СохраненныеДанные.СтруктураОтчета.Вставить("Корректировка", СтруктураОтчета);
	
	СохраненныеДанные.ПоказателиОтчета.Вставить("ПолеТабличногоДокументаКорректировка",
		Новый Структура);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20230125(СохраненныеДанные)
	
	Если НЕ СохраненныеДанные.Свойство("ОборотыСчета75_01") Тогда
		ОборотыСчета75_01 = Новый Структура;
		ОборотыСчета75_01.Вставить("Графа04", 0);
		ОборотыСчета75_01.Вставить("Графа05", 0);
		ОборотыСчета75_01.Вставить("Графа06", 0);
		СохраненныеДанные.Вставить("ОборотыСчета75_01", ОборотыСчета75_01);
	КонецЕсли;
	
	Если НЕ СохраненныеДанные.Свойство("ВычетИзРасчетаАктивов1530") Тогда
		ВычетИзРасчетаАктивов1530 = Новый Структура;
		ВычетИзРасчетаАктивов1530.Вставить("Графа04", 0);
		ВычетИзРасчетаАктивов1530.Вставить("Графа05", 0);
		ВычетИзРасчетаАктивов1530.Вставить("Графа06", 0);
		СохраненныеДанные.Вставить("ВычетИзРасчетаАктивов1530", ВычетИзРасчетаАктивов1530);
	КонецЕсли;
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаРасчетАктивов;
	
	Если НЕ Показатели.Свойство("П000110153004") Тогда
		Показатели.Вставить("П000110153004", 0);
	КонецЕсли;
	Если НЕ Показатели.Свойство("П000110153005") Тогда
		Показатели.Вставить("П000110153005", 0);
	КонецЕсли;
	Если НЕ Показатели.Свойство("П000110153006") Тогда
		Показатели.Вставить("П000110153006", 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20230412(СохраненныеДанные)
	
	ЭтоБалансНКО = (СохраненныеДанные.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО");
	ОбластиКорректировки = СохраненныеДанные.СтруктураОтчета.Корректировка.БлокиМакета;
	
	СписокОбластей = "ПрошлыйГод3, ПрошлыйГод1310, ПрошлыйГод1320, ПрошлыйГод1340,
		|ПрошлыйГод1350, ПрошлыйГод1360, ПрошлыйГод1370, ПрошлыйГод1300, ГодПредшествующийПрошлому3,
		|ГодПредшествующийПрошлому1310, ГодПредшествующийПрошлому1320, ГодПредшествующийПрошлому1340,
		|ГодПредшествующийПрошлому1350, ГодПредшествующийПрошлому1360, ГодПредшествующийПрошлому1370,
		|ГодПредшествующийПрошлому1300";
	СброситьВидимостьСтрокКорректировки(ОбластиКорректировки, НЕ ЭтоБалансНКО, СписокОбластей);
	
	СписокОбластей = "ПрошлыйГод3НКО, ПрошлыйГод1310НКО, ПрошлыйГод1320НКО, ПрошлыйГод1350НКО,
		|ПрошлыйГод1360НКО, ПрошлыйГод1370НКО, ПрошлыйГод1300НКО, ГодПредшествующийПрошлому3НКО,
		|ГодПредшествующийПрошлому1310НКО, ГодПредшествующийПрошлому1320НКО, ГодПредшествующийПрошлому1350НКО,
		|ГодПредшествующийПрошлому1360НКО, ГодПредшествующийПрошлому1370НКО, ГодПредшествующийПрошлому1300НКО";
	СброситьВидимостьСтрокКорректировки(ОбластиКорректировки, ЭтоБалансНКО, СписокОбластей);
	
	СохраненныеДанные.СтруктураОтчета.Корректировка.Вставить(
		"ИмяСекцииНастройкиСоставаПоказателей", "Корректировка");
	
	СохраненныеДанные.СоставДополнительныхСтрок.СтруктураСоставов.Вставить(
		"Корректировка", НовоеДеревоНастроекДопСтрок());
	СохраненныеДанные.СоставДополнительныхСтрок.Модифицированность = Истина;
	СтрокиКорректировки = СохраненныеДанные.СоставДополнительныхСтрок.СтруктураСоставов.Корректировка;
	
#Область ОписаниеЭлементовДереваНастроекСтрокКорректировки
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "I. Внеоборотные активы прошлого года";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нематериальные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1110";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Результаты исследований и разработок";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1120";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нематериальные поисковые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1130";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Материальные поисковые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1140";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Основные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1150";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Доходные вложения в материальные ценности";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1160";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Финансовые вложения";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1170";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Отложенные налоговые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1180";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие внеоборотные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1190";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "II. Оборотные активы прошлого года";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Запасы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1210";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Налог на добавленную стоимость по приобретенным ценностям";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1220";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Дебиторская задолженность";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1230";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Финансовые вложения (за исключением денежных эквивалентов)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1240";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Денежные средства и денежные эквиваленты";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1250";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие оборотные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1260";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "III. Капитал и резервы прошлого года";
	РазделКорректировки.УсловияДоступности = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1310";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Собственные акции, выкупленные у акционеров";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1320";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Переоценка внеоборотных активов";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1340";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Добавочный капитал (без переоценки)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1350";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Резервный капитал";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1360";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нераспределенная прибыль (непокрытый убыток)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1370";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "III. Капитал и резервы прошлого года";
	РазделКорректировки.УсловияДоступности = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Паевой фонд";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1310НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Целевой капитал";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1320НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Целевые средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1350НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Фонд недвижимого и особо ценного движимого имущества";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1360НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Резервный и иные целевые фонды";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1370НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "IV. Долгосрочные обязательства прошлого года";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Заемные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1410";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Отложенные налоговые обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1420";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Оценочные обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1430";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1450";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "V. Краткосрочные обязательства прошлого года";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Заемные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1510";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Кредиторская задолженность";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1520";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Доходы будущих периодов";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1530";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Оценочные обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1540";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ПрошлыйГод1550";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "I. Внеоборотные активы года, предшествующему прошлому";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нематериальные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1110";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Результаты исследований и разработок";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1120";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нематериальные поисковые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1130";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Материальные поисковые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1140";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Основные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1150";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Доходные вложения в материальные ценности";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1160";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Финансовые вложения";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1170";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Отложенные налоговые активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1180";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие внеоборотные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1190";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "II. Оборотные активы года, предшествующему прошлому";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Запасы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1210";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Налог на добавленную стоимость по приобретенным ценностям";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1220";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Дебиторская задолженность";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1230";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Финансовые вложения (за исключением денежных эквивалентов)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1240";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Денежные средства и денежные эквиваленты";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1250";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие оборотные активы";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1260";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование       = "III. Капитал и резервы года, предшествующему прошлому";
	РазделКорректировки.УсловияДоступности = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1310";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Собственные акции, выкупленные у акционеров";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1320";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Переоценка внеоборотных активов";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1340";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Добавочный капитал (без переоценки)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1350";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Резервный капитал";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1360";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Нераспределенная прибыль (непокрытый убыток)";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1370";
	СтрокаКорректировки.УсловияДоступности  = "#БалансТиповой";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование       = "III. Капитал и резервы года, предшествующему прошлому";
	РазделКорректировки.УсловияДоступности = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Паевой фонд";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1310НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Целевой капитал";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1320НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Целевые средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1350НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Фонд недвижимого и особо ценного движимого имущества";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1360НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Резервный и иные целевые фонды";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1370НКО";
	СтрокаКорректировки.УсловияДоступности  = "#БалансНКО";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "IV. Долгосрочные обязательства года, предшествующему прошлому";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Заемные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1410";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Отложенные налоговые обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1420";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Оценочные обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1430";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1450";
	
	РазделКорректировки = СтрокиКорректировки.Строки.Добавить();
	РазделКорректировки.Наименование = "V. Краткосрочные обязательства года, предшествующему прошлому";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Заемные средства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1510";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Кредиторская задолженность";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1520";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Доходы будущих периодов";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1530";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Оценочные обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1540";
	
	СтрокаКорректировки = РазделКорректировки.Строки.Добавить();
	СтрокаКорректировки.Наименование        = "Прочие обязательства";
	СтрокаКорректировки.ВключатьВОтчет      = 1;
	СтрокаКорректировки.ИмяОбластиДопСтроки = "ГодПредшествующийПрошлому1550";
	
#КонецОбласти
	
	Для Каждого ОбластьКорректировки Из ОбластиКорректировки Цикл
		ИмяОбластиКорректировки = ОбластьКорректировки.Ключ;
		Видимость = ОбластьКорректировки.Значение.Видимость;
		
		СтрокаКорректировки = СтрокиКорректировки.Строки.Найти(ИмяОбластиКорректировки, "ИмяОбластиДопСтроки", Истина);
		Если СтрокаКорректировки <> Неопределено Тогда
			СтрокаКорректировки.ВключатьВОтчет = ?(Видимость, 1, 0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20231128(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	
	Показатели.Вставить("П000101251304", 0);
	Показатели.Вставить("П000101251305", 0);
	Показатели.Вставить("П000101251306", 0);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20231218(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	
	Показатели.Вставить("П000101151003", 0);
	Показатели.Вставить("П000101151004", 0);
	Показатели.Вставить("П000101151005", 0);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20240401(СохраненныеДанные)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	
	Показатели.Вставить("П000101110301", "");
	Показатели.Вставить("П000101110304", 0);
	Показатели.Вставить("П000101110305", 0);
	Показатели.Вставить("П000101110306", 0);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20240412(СохраненныеДанные)
	
	ДополнитьСтруктурыФормаОтчета2019Кв1_20240412_ПоСтрокеОФР(СохраненныеДанные, "2310");
	ДополнитьСтруктурыФормаОтчета2019Кв1_20240412_ПоСтрокеОФР(СохраненныеДанные, "2320");
	ДополнитьСтруктурыФормаОтчета2019Кв1_20240412_ПоСтрокеОФР(СохраненныеДанные, "2330");
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20240412_ПоСтрокеОФР(СохраненныеДанные, НомерСтроки)
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаОФР;
	СтруктураМСЧ = СохраненныеДанные.СтруктураМногострочныхЧастей;
	
	ОписаниеДопСтроки = Новый Структура;
	ОписаниеДопСтроки.Вставить("ИмяПоляТабличногоДокумента", "ПолеТабличногоДокументаОФР");
	ОписаниеДопСтроки.Вставить("Масштаб",
		Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", 1, 0));
	ОписаниеДопСтроки.Вставить("Габариты",
		Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", "П100100" + НомерСтроки + "02", "П100100" + НомерСтроки + "05"));
	ОписаниеДопСтроки.Вставить("Состав", Новый ТаблицаЗначений);
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100" + НомерСтроки + "01", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100" + НомерСтроки + "02", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100" + НомерСтроки + "03", Новый ОписаниеТипов("Строка"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100" + НомерСтроки + "04", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Колонки.Добавить("П100100" + НомерСтроки + "05", Новый ОписаниеТипов("Число"));
	ОписаниеДопСтроки.Состав.Добавить();
	
	СтруктураМСЧ.Вставить("П100100" + НомерСтроки + "", ОписаниеДопСтроки);
	
	Показатели.Вставить("П100100" + НомерСтроки + "01_1", "");
	Показатели.Вставить("П100100" + НомерСтроки + "02_1", "");
	Показатели.Вставить("П100100" + НомерСтроки + "03_1", "");
	Показатели.Вставить("П100100" + НомерСтроки + "04_1", 0);
	Показатели.Вставить("П100100" + НомерСтроки + "05_1", 0);
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2019Кв1_20240422(СохраненныеДанные)
	
	СохраненныеДанные.Вставить("ЭтоКрупнейшийНалогоплательщик", Ложь);
	
	Показатели = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаБаланс;
	Показатели.Вставить("КодНО", "");
	Показатели.Вставить("КПП", "");
	
КонецПроцедуры

Процедура СброситьВидимостьСтрокКорректировки(ОбластиКорректировки, Видимость, Знач СписокОбластей)
	
	СписокОбластей = СтрРазделить(СписокОбластей, ",", Ложь);
	
	Для Каждого ИмяОбласти Из СписокОбластей Цикл
		ИмяОбласти = СокрЛП(ИмяОбласти);
		ОбластиКорректировки[ИмяОбласти].Видимость =
			ОбластиКорректировки[ИмяОбласти].Видимость И Видимость;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияФормаОтчета2025Кв1

Процедура ВыполнитьОбработчикиОбновленияФормаОтчета2025Кв1(СохраненныеДанные, СохраненнаяВерсия, СохраненныеДанныеИзменены)
	
	Если ВыполнитьПриПереходеНаВерсию("БРО.2024.12.16", СохраненнаяВерсия) Тогда
		ДополнитьСтруктурыФормаОтчета2025Кв1_20241216(СохраненныеДанные);
		СохраненныеДанныеИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтруктурыФормаОтчета2025Кв1_20241216(СохраненныеДанные)
	
	ДеревоДанныхРазделов = СохраненныеДанные.ДеревоДанныхРазделов;
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти("ОИК", "Идентификатор");
	МакетРаздела = ПолучитьМакет("ФормаОтчета2025Кв1_ОИК");
	ОбновитьФиксированныеПоказателиПоМакету(ДанныеРаздела, МакетРаздела);
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти("Пояснения5", "Идентификатор");
	МакетРаздела = ПолучитьМакет("ФормаОтчета2025Кв1_Пояснения5");
	ОбновитьФиксированныеПоказателиПоМакету(ДанныеРаздела, МакетРаздела);
	
КонецПроцедуры

Процедура ОбновитьФиксированныеПоказателиПоМакету(ДанныеРаздела, МакетРаздела)
	
	Для Каждого ОбластьМакета Из МакетРаздела.Области Цикл
		ИмяОбласти = ОбластьМакета.Имя;
		Если ОбластьМакета.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "П1")
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "УдалитьСтроку")
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтроку") Тогда
			СтрокаПоказателя = ДанныеРаздела.Строки.Найти(ИмяОбласти, "Идентификатор");
			Если СтрокаПоказателя <> Неопределено Тогда
				Продолжить; // показатель уже есть в разделе
			КонецЕсли;
			
			СтрокаПоказателя = ДанныеРаздела.Строки.Добавить();
			СтрокаПоказателя.Тип = "Показатель";
			СтрокаПоказателя.Идентификатор = ИмяОбласти;
			
			Если ОбластьМакета.СодержитЗначение = Истина Тогда
				СтрокаПоказателя.Данные = ОбластьМакета.Значение;
			Иначе
				СтрокаПоказателя.Данные = ОбластьМакета.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПечатьОтчетности

Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма) Экспорт
	
	ПоляПолнойОчистки = "НомерКорректировки, НомерКорректировкиЗаголовок,
		|ДатаУтвОтчетности, ДатаУтвОтчетностиЗаголовок,
		|ВидОтчетности, ВидОтчетностиЗаголовок, ВидОтчетностиОбычная, ВидОтчетностиОбычнаяЗаголовок,
		|ВидОтчетностиЛиквидационная, ВидОтчетностиЛиквидационнаяЗаголовок,
		|КодНОЗаголовок, КодНО, КППЗаголовок, КПП,
		|ОрганизацииДляЗаполненияОтчета, НастройкаСоставаСтрок, ПодсказкаАудит, ВыборАудитора";
	ОчищаемыеОбласти = СтрРазделить(ПоляПолнойОчистки, ",", Ложь);
	
	// Очистка областей по именам.
	Для Каждого ИмяОчищаемойОбласти Из ОчищаемыеОбласти Цикл
		ОчищаемаяОбласть = ПечатнаяФорма.Области.Найти(СокрЛП(ИмяОчищаемойОбласти));
		Если ОчищаемаяОбласть <> Неопределено Тогда
			ОчищаемаяОбласть.Очистить(Истина, Истина, Истина);
			ОчищаемаяОбласть.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ГраницыОбластейДляУдаления = Новый ТаблицаЗначений;
	ГраницыОбластейДляУдаления.Колонки.Добавить("Верх");
	ГраницыОбластейДляУдаления.Колонки.Добавить("Низ");
	
	Для Каждого ОбластьТД Из ПечатнаяФорма.Области Цикл
		Если ОбластьТД.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			// Очистка элементов удаления строки многострочной части.
			Если СтрНайти(ОбластьТД.Имя, "УдалитьСтроку") = 1 И ОбластьТД.СодержитЗначение = Ложь Тогда
				ОбластьТД.Текст = "";
				ОбластьТД.Гиперссылка = Ложь;
			КонецЕсли;
			
			// Очистка примечаний на форме отчета.
			Если ЗначениеЗаполнено(ОбластьТД.Примечание.Текст) Тогда
				ОбластьТД.Примечание.Текст = "";
			КонецЕсли;
			
			// Подготовка к удалению элементов добавления строки, возможно не выделенных в отдельную область.
			// Потребуется свертка таблицы областей для устранения дублей.
			Если СтрНайти(ОбластьТД.Имя, "ДобавитьСтроку") = 1 Тогда
				ГраницыОбласти = ГраницыОбластейДляУдаления.Добавить();
				ГраницыОбласти.Верх = ОбластьТД.Верх;
				ГраницыОбласти.Низ  = ОбластьТД.Низ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбластьТД.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			Если СтрНайти(ОбластьТД.Имя, "ДобавлениеСтроки_") = 1 Тогда
				// Подготовка к удалению элементов добавления строки, выделенных в отдельную область.
				ГраницыОбласти = ГраницыОбластейДляУдаления.Добавить();
				ГраницыОбласти.Верх = ОбластьТД.Верх;
				ГраницыОбласти.Низ  = ОбластьТД.Низ;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ГраницыОбластейДляУдаления.Свернуть("Верх, Низ");
	ГраницыОбластейДляУдаления.Сортировать("Верх Убыв");
	Для Каждого ГраницыОбласти Из ГраницыОбластейДляУдаления Цикл
		УдаляемаяОбласть = ПечатнаяФорма.Область(ГраницыОбласти.Верх, ,ГраницыОбласти.Низ, );
		ПечатнаяФорма.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
КонецПроцедуры

// Сохранить печатные макеты отчетов в регистр дополнительных файлов, для последующей передачи через 1С:Финотчетность.
//
//  Параметры:
//    ДокументСДанными - ДокументСсылка.РегламентированныйОтчет
//    СписокПечатаемыхЛистов - СписокЗначений из Массив - печатные бланки с проставленными номерами страниц
//
Процедура СохранитьПечатныеМакетыОтчетов(ДокументСДанными, СписокПечатаемыхЛистов) Экспорт
	
	ЗаписиРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
	ЗаписиРегистраСведений.Отбор.РегламентированныйОтчет.Установить(ДокументСДанными);
	ЗаписиРегистраСведений.Прочитать();
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого ЗаписьРегистраСведений Из ЗаписиРегистраСведений Цикл
		Если СтрНайти(ЗаписьРегистраСведений.ВидДополнительногоФайла, "БланкОтчета.") = 1 Тогда
			УдаляемыеЗаписи.Добавить(ЗаписьРегистраСведений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗаписьРегистраСведений Из УдаляемыеЗаписи Цикл
		ЗаписиРегистраСведений.Удалить(ЗаписьРегистраСведений);
	КонецЦикла;
	
	Для Каждого ПечатныйБланк Из СписокПечатаемыхЛистов Цикл
		ЗаписьРегистраСведений = ЗаписиРегистраСведений.Добавить();
		ЗаписьРегистраСведений.РегламентированныйОтчет = ДокументСДанными;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "БланкОтчета." + ПечатныйБланк.Представление;
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(ПечатныйБланк.Значение[0]));
		ЗаписьРегистраСведений.ИмяФайла = ПечатныйБланк.Представление + ".mxl";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ДокументСДанными.Дата;
		
	КонецЦикла;
	
	ЗаписиРегистраСведений.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

// Возвращает параметры для автозаполнения отчета выбранной формы.
// 
// Параметры:
//   ИмяФормы - Строка
// 
// Возвращаемое значение:
//   Структура - параметры автозаполнения формы
//
Функция НовыеПараметрыАвтозаполнения(ИмяФормы) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2011Кв1" Тогда
		Возврат НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв1();
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв3" Тогда
		Возврат НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв3();
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		Возврат НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв4();
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Возврат НовыеПараметрыАвтозаполнения_ФормаОтчета2019Кв1();
	ИначеЕсли ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		Возврат НовыеПараметрыАвтозаполнения_ФормаОтчета2025Кв1();
	Иначе
		ИмяФункции = "Отчет.РегламентированныйОтчетБухОтчетность.МодульОбъекта.НовыеПараметрыАвтозаполнения";
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Функция %1:
			|Непредусмотренный параметр ""%2""';
			|en = 'Функция %1:
			|Непредусмотренный параметр ""%2""'"), ИмяФункции, ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв1()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    Неопределено); // для финансового анализа
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", Неопределено);
	
	ПараметрыОтчета.Вставить("Организация", Неопределено);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", '0001-01-01');
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  '0001-01-01');
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",    Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв3()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    Неопределено);
	
	ПараметрыОтчета.Вставить("Организация", Неопределено);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", '0001-01-01');
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  '0001-01-01');
	
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ",    НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", Неопределено);
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",    Ложь);
	
	ПараметрыОтчета.Вставить("ПрименениеЕНВД", Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция НовыеПараметрыАвтозаполнения_ФормаОтчета2011Кв4()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    Неопределено);
	
	ПараметрыОтчета.Вставить("Организация", Неопределено);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", '0001-01-01');
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  '0001-01-01');
	
	ПараметрыОтчета.Вставить("СтруктураОтчета", Новый Структура);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ",    НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", Неопределено);
	ПараметрыОтчета.Вставить("ТаблицаРасшифровки", Неопределено);
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс",     Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",       Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОЦИПС",      Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения1", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения2", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения3", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения4", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения5", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения6", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения7", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения8", Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения9", Ложь);
	
	ПараметрыОтчета.Вставить("ПрименениеЕНВД", Ложь);
	ПараметрыОтчета.Вставить("ПрименениеУСН0", Ложь);
	ПараметрыОтчета.Вставить("ПрименениеУСН1", Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция НовыеПараметрыАвтозаполнения_ФормаОтчета2019Кв1()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    Неопределено);
	
	ПараметрыОтчета.Вставить("Организация", Неопределено);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", '0001-01-01');
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  '0001-01-01');
	
	ПараметрыОтчета.Вставить("СтруктураОтчета", Новый Структура);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс",     НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОФР",        НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокКорректировка", НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокПояснения7", НовоеДеревоНастроекДопСтрок());
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", Неопределено);
	ПараметрыОтчета.Вставить("ТаблицаРасшифровки", Неопределено);
	
	ПараметрыОтчета.Вставить("ЗаполнятьБаланс",        Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОФР",           Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОИК",           Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОДДС",          Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьОЦИС",          Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения1",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения2",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения3",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения4",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения5",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения6",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения7",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения8",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьПояснения9",    Ложь);
	ПараметрыОтчета.Вставить("ЗаполнятьКорректировка", Ложь);
	
	ПараметрыОтчета.Вставить("ПрименениеЕНВД", Ложь);
	ПараметрыОтчета.Вставить("ПрименениеУСН0", Ложь);
	ПараметрыОтчета.Вставить("ПрименениеУСН1", Ложь);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция НовыеПараметрыАвтозаполнения_ФормаОтчета2025Кв1()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", Новый УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",    Неопределено);
	
	ПараметрыОтчета.Вставить("Организация", Неопределено);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций", Новый Массив);
	
	ПараметрыОтчета.Вставить("ДатаНачалаПериодаОтчета", '0001-01-01');
	ПараметрыОтчета.Вставить("ДатаКонцаПериодаОтчета",  '0001-01-01');
	
	ПараметрыОтчета.Вставить("ЭтоБалансНекоммерческойОрганизации", Ложь);
	ПараметрыОтчета.Вставить("ЗаполняемыеРазделы", Новый Структура);
	ПараметрыОтчета.Вставить("НастройкиЗаполненияСтрок");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Функция НовыйКонтейнерПоказателей(ИмяФормы) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2011Кв1" Тогда
		Возврат НовыйКонтейнерПоказателей_ФормаОтчета2011Кв1(ИмяФормы);
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв3" Тогда
		Возврат НовыйКонтейнерПоказателей_ФормаОтчета2011Кв3(ИмяФормы);
	ИначеЕсли ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		Возврат НовыйКонтейнерПоказателей_ФормаОтчета2011Кв4(ИмяФормы);
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Возврат НовыйКонтейнерПоказателей_ФормаОтчета2019Кв1(ИмяФормы);
	Иначе
		ИмяФункции = "Отчет.РегламентированныйОтчетБухОтчетность.МодульОбъекта.НовыйКонтейнерПоказателей";
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Функция %1:
			|Непредусмотренный параметр ""%2""';
			|en = 'Функция %1:
			|Непредусмотренный параметр ""%2""'"), ИмяФункции, ИмяФормы);
	КонецЕсли;
	
КонецФункции

Функция НовыйКонтейнерПоказателей_ФормаОтчета2011Кв1(ИмяФормы)
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Баланс",      Новый Структура);
	Контейнер.Вставить("ФормаОтчета", Новый Структура);
	
	Возврат Контейнер;
	
КонецФункции

Функция НовыйКонтейнерПоказателей_ФормаОтчета2011Кв3(ИмяФормы)
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",      Новый Структура);
	Контейнер.Вставить("ФормаОтчета", Новый Структура);
	
	Возврат Контейнер;
	
КонецФункции

Функция НовыйКонтейнерПоказателей_ФормаОтчета2011Кв4(ИмяФормы)
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Баланс",        Новый Структура);
	Контейнер.Вставить("ФормаОтчета",   Новый Структура);
	Контейнер.Вставить("ОИК",           Новый Структура);
	Контейнер.Вставить("ОДДС",          Новый Структура);
	Контейнер.Вставить("ОЦИПС",         Новый Структура);
	Контейнер.Вставить("РасчетАктивов", Новый Структура);
	Контейнер.Вставить("Пояснения1",    Новый Структура);
	Контейнер.Вставить("Пояснения2",    Новый Структура);
	Контейнер.Вставить("Пояснения3",    Новый Структура);
	Контейнер.Вставить("Пояснения4",    Новый Структура);
	Контейнер.Вставить("Пояснения5",    Новый Структура);
	Контейнер.Вставить("Пояснения6",    Новый Структура);
	Контейнер.Вставить("Пояснения7",    Новый Структура);
	Контейнер.Вставить("Пояснения8",    Новый Структура);
	Контейнер.Вставить("Пояснения9",    Новый Структура);
	
	Возврат Контейнер;
	
КонецФункции

Функция НовыйКонтейнерПоказателей_ФормаОтчета2019Кв1(ИмяФормы)
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Баланс",        Новый Структура);
	Контейнер.Вставить("ОФР",           Новый Структура);
	Контейнер.Вставить("ОИК",           Новый Структура);
	Контейнер.Вставить("ОДДС",          Новый Структура);
	Контейнер.Вставить("ОЦИС",          Новый Структура);
	Контейнер.Вставить("РасчетАктивов", Новый Структура);
	Контейнер.Вставить("Пояснения1",    Новый Структура);
	Контейнер.Вставить("Пояснения2",    Новый Структура);
	Контейнер.Вставить("Пояснения3",    Новый Структура);
	Контейнер.Вставить("Пояснения4",    Новый Структура);
	Контейнер.Вставить("Пояснения5",    Новый Структура);
	Контейнер.Вставить("Пояснения6",    Новый Структура);
	Контейнер.Вставить("Пояснения7",    Новый Структура);
	Контейнер.Вставить("Пояснения8",    Новый Структура);
	Контейнер.Вставить("Пояснения9",    Новый Структура);
	Контейнер.Вставить("Корректировка", Новый Структура);
	
	Возврат Контейнер;
	
КонецФункции

Функция НовоеДеревоНастроекДопСтрок()
	
	ДеревоНастроекДопСтрок = Новый ДеревоЗначений;
	
	ОписаниеТиповСтрока   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки());
	ОписаниеТиповЧисло1   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло3   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло5_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	ДеревоНастроекДопСтрок.Колонки.Добавить("Наименование", ОписаниеТиповСтрока);
	ДеревоНастроекДопСтрок.Колонки.Добавить("Код", ОписаниеТиповСтрока);
	ДеревоНастроекДопСтрок.Колонки.Добавить("ВключатьВОтчет", ОписаниеТиповЧисло1);
	ДеревоНастроекДопСтрок.Колонки.Добавить("Существенность", ОписаниеТиповЧисло5_2);
	ДеревоНастроекДопСтрок.Колонки.Добавить("ИмяОбластиДопСтроки", ОписаниеТиповСтрока);
	ДеревоНастроекДопСтрок.Колонки.Добавить("УсловияДоступности", ОписаниеТиповСтрока);
	ДеревоНастроекДопСтрок.Колонки.Добавить("МаксимальноеКоличество", ОписаниеТиповЧисло3);
	ДеревоНастроекДопСтрок.Колонки.Добавить("ДостДляРедактирования_Существенность", ОписаниеТиповБулево);
	ДеревоНастроекДопСтрок.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество", ОписаниеТиповБулево);
	
	Возврат ДеревоНастроекДопСтрок;
	
КонецФункции

#КонецОбласти

Процедура ПодготовитьМакетОтчета(ИмяФормы, МакетОтчета, ИмяРаздела, ПараметрыПодготовки) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2011Кв4" Тогда
		Если ИмяРаздела = "Пояснения4" Тогда
			ПодготовитьМакетОтчета_Пояснения4_2011Кв1(МакетОтчета, ПараметрыПодготовки);
		КонецЕсли;
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2019Кв1" Тогда
		Если ИмяРаздела = "Баланс" Тогда
			ПодготовитьМакетОтчета_Баланс_2019Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "ОДДС" Тогда
			ПодготовитьМакетОтчета_ОДДС_2019Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
			ПодготовитьМакетОтчета_Пояснения4_2011Кв1(МакетОтчета, ПараметрыПодготовки);
		КонецЕсли;
		
	ИначеЕсли ИмяФормы = "ФормаОтчета2025Кв1" Тогда
		Если ИмяРаздела = "Баланс" Тогда
			ПодготовитьМакетОтчета_Баланс_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "ОФР" Тогда
			ПодготовитьМакетОтчета_ОФР_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "ОЦИС" Тогда
			ПодготовитьМакетОтчета_ОЦИС_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "ОИК" Тогда
			ПодготовитьМакетОтчета_ОИК_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "ОДДС" Тогда
			ПодготовитьМакетОтчета_ОДДС_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "Пояснения3" ИЛИ ИмяРаздела = "Пояснения4"
		          ИЛИ ИмяРаздела = "Пояснения5" ИЛИ ИмяРаздела = "Пояснения6"
		          ИЛИ ИмяРаздела = "Пояснения7" ИЛИ ИмяРаздела = "Пояснения8" Тогда
			ПодготовитьМакетОтчета_ПоясненияВсеПериодыИДаты_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
			ПодготовитьМакетОтчета_ПоясненияДатыКонцовПериодов_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		ИначеЕсли ИмяРаздела = "Пояснения10" ИЛИ ИмяРаздела = "Пояснения11" Тогда
			ПодготовитьМакетОтчета_ПоясненияПериоды_2025Кв1(МакетОтчета, ПараметрыПодготовки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_Баланс_2019Кв1(МакетОтчета, ПараметрыПодготовки)
	
	НазванияПоказателей = ПараметрыПодготовки.СтруктураОтчета.Баланс.НазванияПоказателей;
	Для Каждого НазваниеПоказателя Из НазванияПоказателей Цикл
		ИмяОбласти = НазваниеПоказателя.Ключ;
		ТекстОбласти = НазваниеПоказателя.Значение;
		МакетОтчета.Области[ИмяОбласти].Текст = ТекстОбласти;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОДДС_2019Кв1(МакетОтчета, ПараметрыПодготовки)
	
	Для Каждого Примечание Из ПараметрыПодготовки.ПримечанияОДДС Цикл
		ИмяОбласти = Примечание.Ключ;
		ТекстПримечания = Примечание.Значение;
		
		МакетОтчета.Области[ИмяОбласти].Примечание.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		МакетОтчета.Области[ИмяОбласти].Примечание.Текст = ТекстПримечания;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_Пояснения4_2011Кв1(МакетОтчета, ПараметрыПодготовки)
	
	БлокиМакета = ПараметрыПодготовки.СтруктураОтчета.Пояснения4.БлокиМакета;
	Для Каждого БлокМакета Из БлокиМакета Цикл
		МакетОтчета.Области[БлокМакета.Ключ].Видимость = БлокМакета.Значение.Видимость;
	КонецЦикла;
	
КонецПроцедуры

Функция Наименование_ДопСтроки11509(ПрименяетсяФСБУ25) Экспорт
	
	Если ПрименяетсяФСБУ25 Тогда
		Возврат "Права пользования активами";
	Иначе
		Возврат "Арендованное имущество";
	КонецЕсли;
	
КонецФункции

#Область ПодготовкаМакетов2025Кв1

Процедура ПодготовитьМакетОтчета_Баланс_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
	МакетОтчета.Параметры.ПериодБухгалтерскойОтчетности = "за " + НРег(ПараметрыПодготовки.ЗаголовокПериодОтчета);
	МакетОтчета.Параметры.ПериодБухгалтерскогоБаланса   = НРег(ПараметрыПодготовки.ЗаголовокДатаОтчетная);
	
	МакетОтчета.Области.ДатаОтчетная1.Текст              = ПараметрыПодготовки.ЗаголовокДатаОтчетная;
	МакетОтчета.Области.ДатаОтчетная2.Текст              = ПараметрыПодготовки.ЗаголовокДатаОтчетная;
	МакетОтчета.Области.ДатаКонцаПрошлогоГода1.Текст     = ПараметрыПодготовки.ЗаголовокДатаКонцаПрошлогоГода;
	МакетОтчета.Области.ДатаКонцаПрошлогоГода2.Текст     = ПараметрыПодготовки.ЗаголовокДатаКонцаПрошлогоГода;
	МакетОтчета.Области.ДатаКонцаПозапрошлогоГода1.Текст = ПараметрыПодготовки.ЗаголовокДатаКонцаПозапрошлогоГода;
	МакетОтчета.Области.ДатаКонцаПозапрошлогоГода2.Текст = ПараметрыПодготовки.ЗаголовокДатаКонцаПозапрошлогоГода;
	
	Если НЕ ПараметрыПодготовки.ОтображатьСсылкуВыбораОрганизаций Тогда
		ОбластьСсылкиОрганизаций = МакетОтчета.Области.ОбластьСсылкиОрганизаций;
		МакетОтчета.УдалитьОбласть(ОбластьСсылкиОрганизаций, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОФР_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
	МакетОтчета.Параметры.ПериодОтчетаОФинансовыхРезультатах =
		НРег(ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода);
	
	МакетОтчета.Области.ДатаОтчетногоПериода1.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериода2.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода1.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода2.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОЦИС_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
	МакетОтчета.Параметры.ПериодОтчетаОЦелевомИспользованииСредств =
		НРег(ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода);
	
	МакетОтчета.Области.ДатаОтчетногоПериода1.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериода2.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода1.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода2.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОИК_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
	МакетОтчета.Параметры.ПериодОтчетаОбИзмененияхКапитала = НРег(ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода);
	
	МакетОтчета.Параметры.ДатаКонцаГодаПредшествующегоПредыдущему = ПараметрыПодготовки.ЗаголовокДатаКонцаПозапрошлогоГода;
	МакетОтчета.Параметры.ЗаПериодПредшествующегоГодаАналогичныйОтчетному = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
	МакетОтчета.Параметры.ДатаКонцаПериодаПредыдущегоГодаАналогичногоОтчетному = ПараметрыПодготовки.ЗаголовокДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному;
	МакетОтчета.Параметры.ДатаКонцаПредыдущегоГода = ПараметрыПодготовки.ЗаголовокДатаКонцаПрошлогоГода;
	
	МакетОтчета.Параметры.ОтчетныйПериод = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Параметры.ОтчетнаяДата = ПараметрыПодготовки.ЗаголовокДатаОтчетная;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОДДС_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
	МакетОтчета.Параметры.ПериодОтчетаОДвиженииДенежныхСредств =
		НРег(ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода);
	
	МакетОтчета.Области.ДатаОтчетногоПериода1.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериода2.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериода3.Текст             = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода1.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода2.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	МакетОтчета.Области.ДатаОтчетногоПериодаПрошлогоГода3.Текст = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ПоясненияВсеПериодыИДаты_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	ПодготовитьМакетОтчета_ПоясненияПериоды_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	ПодготовитьМакетОтчета_ПоясненияДатыКонцовПериодов_2025Кв1(МакетОтчета, ПараметрыПодготовки);
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ПоясненияПериоды_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	МакетОтчета.Параметры.ОтчетныйПериод = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериода;
	МакетОтчета.Параметры.ЗаПериодПредшествующегоГодаАналогичныйОтчетному = ПараметрыПодготовки.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ПоясненияДатыКонцовПериодов_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	МакетОтчета.Параметры.ОтчетнаяДата = ПараметрыПодготовки.ЗаголовокДатаОтчетная;
	МакетОтчета.Параметры.ДатаКонцаПредыдущегоГода = ПараметрыПодготовки.ЗаголовокДатаКонцаПрошлогоГода;
	МакетОтчета.Параметры.ДатаКонцаГодаПредшествующегоПредыдущему = ПараметрыПодготовки.ЗаголовокДатаКонцаПозапрошлогоГода;
	
КонецПроцедуры

Процедура ПодготовитьМакетОтчета_ОбщиеПараметры_2025Кв1(МакетОтчета, ПараметрыПодготовки)
	
	МакетОтчета.Параметры.ОтчетныйПериодЧислоВРазделе = ПараметрыПодготовки.ЗаголовокДатаОтчетнаяДень;
	МакетОтчета.Параметры.ОтчетныйПериодМесяцВРазделе = ПараметрыПодготовки.ЗаголовокДатаОтчетнаяМесяц;
	МакетОтчета.Параметры.ОтчетныйПериодГодВРазделе   = ПараметрыПодготовки.ЗаголовокДатаОтчетнаяГод;
	
КонецПроцедуры

#КонецОбласти

Функция СохраненныеДанные(СохраненныйДокумент) Экспорт
	
	СохраненныеДанные = СохраненныйДокумент.ДанныеОтчета.Получить();
	ОбновитьСтруктурыДанныхСохраненногоОтчета(СохраненныйДокумент.ВыбраннаяФорма, СохраненныеДанные);
	
	Возврат СохраненныеДанные;
	
КонецФункции

// Возвращается ветку раздела из общего дерева разделов.
// 
// Параметры:
//   ДеревоДанныхРазделов - ДеревоЗначений
//   ИмяРаздела - Строка
// 
// Возвращаемое значение:
//   СтрокаДереваЗначений
//
Функция ВеткаРаздела(ДеревоДанныхРазделов, ИмяРаздела) Экспорт
	
	ПараметрыПоиска = Новый Структура("Тип, Идентификатор", "Раздел", ИмяРаздела);
	
	Возврат ДеревоДанныхРазделов.Строки.НайтиСтроки(ПараметрыПоиска)[0];
	
КонецФункции

Функция МногострочнаяЧастьПоИдМСЧ(ДеревоДанныхРаздела, ИдМСЧ)
	
	ПараметрыПоиска = Новый Структура("Тип, Идентификатор", "МногострочнаяЧасть", ИдМСЧ);
	
	Возврат ДеревоДанныхРаздела.Строки.НайтиСтроки(ПараметрыПоиска)[0];
	
КонецФункции

// Возвращает строки многострочной части с сохранением порядка следования.
// 
// Параметры:
//   ОбъявлениеМногострочнойЧасти - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//   Массив из СтрокаДереваЗначений
//
Функция СтрокиМногострочнойЧасти(ОбъявлениеМногострочнойЧасти) Экспорт
	
	СтрокиМСЧ = Новый Массив;
	
	Для Каждого СтрокаМСЧ Из ОбъявлениеМногострочнойЧасти.Строки Цикл
		Если СтрокаМСЧ.Тип = "Строка" Тогда
			СтрокиМСЧ.Добавить(СтрокаМСЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокиМСЧ;
	
КонецФункции

// Возвращает значение показателя раздела.
//
// Параметры:
//   ДеревоДанныхРазделов - ДеревоЗначений
//   ИмяРаздела - Строка
//   ИмяПоказателя - Строка
// 
// Возвращаемое значение:
//   Произвольный
//
Функция ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, ИмяРаздела, ИмяПоказателя) Экспорт
	
	РазделОтчета = ВеткаРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	Возврат ЗначениеПоказателя(РазделОтчета, ИмяПоказателя);
	
КонецФункции

Функция ЗначениеПоказателя(ДеревоДанныхРаздела, ИмяПоказателя)
	
	ПараметрыПоиска = Новый Структура("Тип, Идентификатор", "Показатель", ИмяПоказателя);
	
	Возврат ДеревоДанныхРаздела.Строки.НайтиСтроки(ПараметрыПоиска)[0].Данные;
	
КонецФункции

#Область Обертки

Функция СтрЧГ0(ИсходноеЧисло)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(ИсходноеЧисло);
	
КонецФункции

Функция Список(СписокРазделенныйЗапятыми)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.Список(СписокРазделенныйЗапятыми);
	
КонецФункции

Функция ЭтоЮридическоеЛицо(Организация)
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
