#Область ОписаниеПеременных

&НаСервере
Перем ОбъектОтчета;

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ВремяНачалаОперации;

&НаСервере
Перем КлючеваяОперация;
// СтандартныеПодсистемы.ОценкаПроизводительности

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

&НаСервере
Перем СтруктураМногострочныхЧастей;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем ДеревоНастроекБаланс,
      ДеревоНастроекОФР,
      ДеревоНастроекКорректировка,
      ДеревоНастроекПояснения7;

&НаСервере
Перем КэшСохраненныхДанныхНаСервере;

&НаКлиенте
Перем ИдетПозиционированиеНаОбластьРаздела;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		ИмяФормыОтчета(ИмяФормы), СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// Имена вспомогательных макетов и форм.
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("МакетНастройкиСоставаПоказателей",  "НастройкаСоставаПоказателей2019Кв1");
	НастройкиФормы.Вставить("МакетСтруктурыМногострочныхЧастей", "СтруктураМногострочныхЧастей2019Кв1");
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	ДеревоНастроекБаланс = Новый ДеревоЗначений;
	ДеревоНастроекОФР = Новый ДеревоЗначений;
	ДеревоНастроекКорректировка = Новый ДеревоЗначений;
	ДеревоНастроекПояснения7 = Новый ДеревоЗначений;
	
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекБаланс);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекОФР);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекКорректировка);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекПояснения7);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекКорректировка, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекПояснения7, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекПояснения7);
	
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	СтруктураДанныхБаланс              = Новый Структура;
	СтруктураДанныхОФР                 = Новый Структура;
	СтруктураДанныхОДДС                = Новый Структура;
	СтруктураДанныхОИК                 = Новый Структура;
	СтруктураДанныхОЦИС                = Новый Структура;
	СтруктураДанныхПояснения1          = Новый Структура;
	СтруктураДанныхПояснения2          = Новый Структура;
	СтруктураДанныхПояснения3          = Новый Структура;
	СтруктураДанныхПояснения4          = Новый Структура;
	СтруктураДанныхПояснения5          = Новый Структура;
	СтруктураДанныхПояснения6          = Новый Структура;
	СтруктураДанныхПояснения7          = Новый Структура;
	СтруктураДанныхПояснения8          = Новый Структура;
	СтруктураДанныхПояснения9          = Новый Структура;
	СтруктураДанныхРасчетАктивов       = Новый Структура;
	СтруктураДанныхКорректировка       = Новый Структура;
	СтруктураДанныхДополнительныеФайлы = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.РедакцияФормы             = Параметры.РедакцияФормы;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Параметры.ЭтоБалансНекоммерческойОрганизации;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 =
		Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ПрименяетсяФСБУ25 = РегламентированнаяОтчетность.ПрименяетсяФСБУ25(
		Параметры.Организация, Параметры.мДатаКонцаПериодаОтчета);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить(
		"РасходыУчитываютсяПоЭЗВОтчетномГоду", Неопределено);
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить(
		"РасходыУчитываютсяПоЭЗВПредыдущемГоду", Неопределено);
	
	СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки                = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения              = ПустаяСтруктураДанныхФайла();
	
	СтруктураРеквизитовФормы.ОборотыСчета75_01 = Новый Структура;
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа04", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа05", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа06", 0);
	
	СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530 = Новый Структура;
	СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Вставить("Графа04", 0);
	СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Вставить("Графа05", 0);
	СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Вставить("Графа06", 0);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	КлючеваяОперация = "ЗаполнениеФормыБухгалтерскаяОтчетность";
	
	ИзменитьОформлениеЭлементовСПАРКВОтчете();
	
	ДокументооборотСКО.УстановитьВидимостьПанелиАудиторскогоЗаключения(ЭтотОбъект);
	
	Элементы.ПоказатьИнформациюДляТехническогоСпециалиста.Видимость = ОбщегоНазначения.РежимОтладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуЗакрытияМесяца" Тогда
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуЗакрытияМесяца(
			СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаОтчетаВСПАРКОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОбработкаНавигационнойСсылкиВОтчете(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	БольшеНеПоказыватьИнформационнуюПанель();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
		УдалитьФайл("ФайлПояснительнойЗаписки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлПояснительнойЗаписки", НСтр("ru = 'Выбор файла пояснений';
													|en = 'Выбор файла пояснений'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьФайл("ФайлПояснительнойЗаписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлПояснительнойЗаписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
		УдалитьФайл("ФайлАудиторскогоЗаключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлАудиторскогоЗаключения", НСтр("ru = 'Выбор файла аудиторского заключения';
													|en = 'Выбор файла аудиторского заключения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УдалитьФайл("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПоАудиторскомуЗаключениюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ПодсказкаПоАудиторскомуЗаключениюОбработкаНавигационнойСсылки(ЭтотОбъект, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	КонецЕсли;
	
	Если Область.Имя = "НастройкаСоставаСтрок" Тогда
		НастроитьСтроки(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтотОбъект);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "ВидОтчетностиОбычная" Тогда
		Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение) Тогда
			ВидСдачиОтчетности = 1;
			ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение = "Х";
			ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ВидОтчетностиЛиквидационная" Тогда
		Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение) Тогда
			ВидСдачиОтчетности = 3;
			ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение = "";
			ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение = "Х";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ОргПочтАдрес" Тогда
		ВыбратьАдресОрганизации(Область);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "АудитДа" Тогда
		АудитДа = ТабличныйДокумент.Области.АудитДа.Значение;
		Если НЕ ЗначениеЗаполнено(АудитДа) Тогда
			ТабличныйДокумент.Области.АудитДа.Значение = "Х";
			ТабличныйДокумент.Области.АудитНет.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "АудитНет" Тогда
		АудитНет = ТабличныйДокумент.Области.АудитНет.Значение;
		Если НЕ ЗначениеЗаполнено(АудитНет) Тогда
			ТабличныйДокумент.Области.АудитНет.Значение = "Х";
			ТабличныйДокумент.Области.АудитДа.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "ПодсказкаАудит" Тогда
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2021-01-01' Тогда
			СсылкаНаСайтМинфина = "https://buh.ru/articles/documents/103596/";
		ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2023-01-01' Тогда
			СсылкаНаСайтМинфина = "https://buh.ru/articles/documents/127590/";
		ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2024-01-01' Тогда
			СсылкаНаСайтМинфина = "https://buh.ru/news/kakie-kompanii-dolzhny-provesti-obyazatelnyy-audit-otchetnosti-za-2023-god.html";
		Иначе
			СсылкаНаСайтМинфина = "https://buh.ru/news/opublikovan-perechen-sluchaev-provedeniya-obyazatelnogo-audita-otchetnosti-za-2024-god.html";
		КонецЕсли;
		ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПопытатьсяПерейтиПоНавигационнойСсылке(СсылкаНаСайтМинфина);
	КонецЕсли;
	
	Если Область.Имя = "ВыборАудитора" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборАудитора", ЭтотОбъект);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуВыбораКонтрагента(ЭтотОбъект, Оповещение);
	КонецЕсли;
	
	Если Область.Имя = "КодНО" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбратьКодНалоговогоОрганаПолучателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
		Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
		Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
		Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер")) Тогда
		
		Если Область.Имя = "П000100123004" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		ИначеЕсли Область.Имя = "П000100123005" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		ИначеЕсли Область.Имя = "П000100123006" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		КонецЕсли;
		
		Если Область.Имя = "П000100153004" Тогда
			СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа04 = 0;
		ИначеЕсли Область.Имя = "П000100153005" Тогда
			СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа05 = 0;
		ИначеЕсли Область.Имя = "П000100153006" Тогда
			СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа06 = 0;
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ОргОтрасль" Тогда
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОФР.Вставить("ОргОтрасль", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОФР.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		
	ИначеЕсли Область.Имя = "ОргКодОКВЭД" Тогда
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОФР.Вставить("ОргКодОКВЭД", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОФР.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
	ИначеЕсли Область.Имя = "ДатаПодписиОтчета" Тогда
		ДатаПодписи = Область.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
		СтруктураДанныхОДДС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОИК.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОЦИС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОФР.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		СтруктураДанныхПояснения1.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения2.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения3.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения4.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения5.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения6.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения7.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения8.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения9.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	КонецЕсли;
	
	Если Область.Имя = "КПП" Тогда
		КодНО = СокрЛП(ТабличныйДокумент.Области.КодНО.Значение);
		КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
		Если ЗначениеЗаполнено(КодНО) И ЗначениеЗаполнено(КПП) Тогда
			СохранитьВведенныйКПП(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда
		ИмяПоказателя = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	ИначеЕсли СтрНайти(ИмяОбласти, "П") = 1 И СтрНайти(ИмяОбласти, "_") > 1
	      ИЛИ СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяОбласти);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоказателя) Тогда
		ТестовоеИмя = ИмяПоказателя + "_2";
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	ПодключитьОбработчикОжидания("ОбработатьРазделыОтчетаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьОтправкуВСПАРКИзОтчета(Команда)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ПовторитьОтправкуВСПАРКИзОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСПАРКИзОтчета(Команда)
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРККлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОтправкаРегОтчетовВСПАРККлиент");
		МодульОтправкаРегОтчетовВСПАРККлиент.ОтправитьВСПАРКИзОтчета(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ВидСдачиОтчетности <> 3 Тогда
		ПредупредитьОВыгрузкеТолькоЛиквидационнойОтчетности();
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ВидСдачиОтчетности <> 3 Тогда
		ПредупредитьОбОтправкеТолькоЛиквидационнойОтчетности();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
		ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?';
		|en = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СформироватьНастройкиФормыВыбораПечати();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
	ПараметрыФормы.Вставить("РедакцияФормы", "от 19.04.2019 № 61н");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	
	ИмяФормыВыбора = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	               + "ВыборПечатнойФормы"
	               + ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета > '2020-01-01', "2020", "");
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) И ВидСдачиОтчетности <> 3 Тогда
		ПредупредитьОВыгрузкеТолькоЛиквидационнойОтчетности();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		ИмяОтчета(ИмяФормы), ИмяФормыОтчета(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПояснения(Команда)
	
	АдресФайлаВХранилище = СформироватьФайлPDFВХранилище();
	
	Если АдресФайлаВХранилище <> Неопределено Тогда
		ИмяСохраняемогоФайла = СтрШаблон("Пояснения к бухгалтерскому балансу и отчету о финансовых результатах за %1 (%2).pdf",
			НРег(СтруктураРеквизитовФормы.СтрПериодОтчета),
			СтруктураРеквизитовФормы.НаимОрганизации);
		ИмяСохраняемогоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСохраняемогоФайла);
		
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
		ПараметрыСохранения.Диалог.Фильтр = "Документ PDF (*.pdf)|*.pdf";
		
		ОбработчикЗавершения = Новый ОписаниеОповещения("ЗавершитьСохранениеФайлаПояснений", ЭтотОбъект, АдресФайлаВХранилище);
		
		ФайловаяСистемаКлиент.СохранитьФайл(ОбработчикЗавершения, АдресФайлаВХранилище,
			ИмяСохраняемогоФайла, ПараметрыСохранения);
		
	Иначе
		ПоказатьПредупреждение( , НСтр("ru = 'В отчет не включено ни одно из пояснений.
		                                   |Установите флажки у соответствующих разделов в настройках отчета.';
		                                   |en = 'В отчет не включено ни одно из пояснений.
		                                   |Установите флажки у соответствующих разделов в настройках отчета.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ДополнительныеПараметры = Новый Структура("ИмяПоказателя", ИмяПоказателя);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДляОтправкиВБанк(Команда)
	
	ШаблонТекстаСостояния = НСтр("ru = 'Подготовка отчета %1 для отправки в банк...';
								|en = 'Подготовка отчета %1 для отправки в банк...'");
	ТекстСостояния = СтрШаблон(ШаблонТекстаСостояния, Заголовок);
	Состояние(ТекстСостояния);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		// У несохраненного отчета печатные формы будут сформированы при записи отчета
		СообщитьОЗавершенииПодготовкиФайловДляБанка();
		Возврат;
	КонецЕсли;
	
	ПодготовитьФайлыДляБанка();
	СообщитьОЗавершенииПодготовкиФайловДляБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюДляТехническогоСпециалиста(Команда)
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СлужебнаяИнформацияДляТехническогоСпециалиста();
	ПоказатьПредупреждение( , СлужебнаяИнформацияДляТехническогоСпециалиста, ,
		"Служебная информация для технического специалиста");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроек)
	
	ОписаниеТиповСтрока   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки());
	ОписаниеТиповЧисло1   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло3   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло5_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	КолонкиДН = ДеревоНастроек.Колонки;
	
	КолонкиДН.Добавить("Наименование", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("Код", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ВключатьВОтчет", ОписаниеТиповЧисло1);
	КолонкиДН.Добавить("Существенность", ОписаниеТиповЧисло5_2);
	КолонкиДН.Добавить("ИмяОбластиДопСтроки", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("УсловияДоступности", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("МаксимальноеКоличество", ОписаниеТиповЧисло3);
	КолонкиДН.Добавить("ДостДляРедактирования_Существенность", ОписаниеТиповБулево);
	КолонкиДН.Добавить("ДостДляРедактирования_МаксимальноеКоличество", ОписаниеТиповБулево);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	ТабличныйДокумент.Очистить(); // очистка необходима в случае повторного вызова процедуры "Инициализация"
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД = ДопСтрокиОФРПриПримененииЕНВД();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		КонецЕсли;
		СохраненныеДанные.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		СохраненныеДанные.Свойство("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
		
		ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные);
		
	Иначе
		ИнициализацияЗаполнитьСтруктурыДанных();
		
	КонецЕсли;
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИнициализироватьОписанияМногострочныхЧастей();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду);
	
	НачалоПредшествующегоПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12);
	КонецПредшествующегоПериодаОтчета  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,  -12);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		НачалоПредшествующегоПериодаОтчета,
		КонецПредшествующегоПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду);
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	УстановитьПризнакиПримененияУСН();
	
	ПолучитьСведенияОПоказателяхОтчета(); // Исходная таблица автозаполняемых показателей для отчета
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		// Инициализация переменных настройки формы.
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		// Заполним настройки состава дополнительных строк по умолчанию.
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
		
		// Отрисуем дополнительные строки для первой страницы.
		ДобавитьДополнительныеСтроки();
		
		ИнициализироватьСтруктуруДанныхРазделов();
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ИмяРаздела = "ДополнительныеФайлы" Тогда
		Если ТабличныйДокумент.Области.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(МакетОтчета(ИмяРаздела));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяРаздела);
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	АктивируемыйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = АктивируемыйРаздел.ПолучитьИдентификатор();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере(,, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Параметры.мСкопированаФорма) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение = "Х";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение = "Х";
	КонецЕсли;
	
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	ОбработатьПоляНалоговогоОргана();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлПояснительнойЗаписки"];
	ИмяФайлаПояснительнойЗаписки = СтруктураХранения.ИмяФайла;
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлАудиторскогоЗаключения"];
	ИмяФайлаАудиторскогоЗаключения = СтруктураХранения.ИмяФайла;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ПризнМногострочности",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",    ОписаниеТиповСтрока15);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Функция ДопСтрокиОФРПриПримененииЕНВД()
	
	НовМассив = Новый Массив;
	
	НовМассив.Добавить("ДопСтрока21101");
	НовМассив.Добавить("ДопСтрока21102");
	НовМассив.Добавить("ДопСтрока21201");
	НовМассив.Добавить("ДопСтрока21202");
	НовМассив.Добавить("ДопСтрока22101");
	НовМассив.Добавить("ДопСтрока22102");
	НовМассив.Добавить("ДопСтрока22201");
	НовМассив.Добавить("ДопСтрока22202");
	НовМассив.Добавить("ДопСтрока21001");
	НовМассив.Добавить("ДопСтрока21002");
	НовМассив.Добавить("ДопСтрока22001");
	НовМассив.Добавить("ДопСтрока22002");
	НовМассив.Добавить("ДопСтрока23001");
	НовМассив.Добавить("ДопСтрока23002");
	
	Возврат НовМассив;
	
КонецФункции

&НаСервере
Процедура ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные = Неопределено)
	
	Если СохраненныеДанные = Неопределено Тогда
		// Создание нового отчета.
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2020-01-01'
		 ИЛИ СтрНайти(СтруктураРеквизитовФормы.РедакцияФормы, "за 2020") <> 0 Тогда
			СтруктураОтчета = СтруктураОтчета2020Кв1();
		Иначе
			СтруктураОтчета = СтруктураОтчета2019Кв1();
		КонецЕсли;
		
	Иначе
		// Восстановление сохраненного отчета.
		СохраненнаяСтруктураОтчета = Неопределено;
		Если СохраненныеДанные.Свойство("СтруктураОтчета", СохраненнаяСтруктураОтчета) Тогда
			СтруктураОтчета = СохраненнаяСтруктураОтчета;
			
			// Переход на макет без дополнительной строки 24603.
			Если СохраненнаяСтруктураОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД_2020Кв1"
			   И СохраненнаяСтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей = "ОФР_НеЕНВД" Тогда
				СохраненнаяСтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей = "ОФР_НеЕНВД_2020Кв1";
			КонецЕсли;
			
			Если СохраненнаяСтруктураОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД_2020Кв1"
			   И СохраненнаяСтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей = "ОФР_ЕНВД" Тогда
				СохраненнаяСтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей = "ОФР_ЕНВД_2020Кв1";
			КонецЕсли;
			
			// Переход на макет Бухгалтерского баланса с изменяемыми названиями показателей.
			СохраненнаяСтруктураОтчета.Баланс.Вставить("НазванияПоказателей", НазванияПоказателей_Баланс());
			
			// Переход на макет Пояснений 4 со скрываемой строкой.
			Если НЕ СохраненнаяСтруктураОтчета.Пояснения4.Свойство("БлокиМакета") Тогда
				БлокиМакета = НоваяСтруктураБлоковПояснения4();
				БлокиМакета.ОсновнаяЧасть5407.Видимость = Истина;
				СохраненнаяСтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
			КонецЕсли;
			
			Для Каждого Элемент Из СтруктураОтчета Цикл
				Если СтрЧислоВхождений(Элемент.Значение.ИмяМакета, Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))) > 0 Тогда
					Элемент.Значение.ИмяМакета = Сред(Элемент.Значение.ИмяМакета,
						СтрДлина(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_") + 1);
				КонецЕсли;
				
				Элемент.Значение.ИмяМакета = СтрЗаменить(Элемент.Значение.ИмяМакета, "_2011Кв4", "");
				
				Если Элемент.Значение.Свойство("ИдентификаторАвтозаполнения") Тогда
					Элемент.Значение.ИдентификаторАвтозаполнения = СтрЗаменить(Элемент.Значение.ИдентификаторАвтозаполнения, "_2011Кв4", "");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату",
		"На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода",
		"На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему",
		"На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхЧастей()
	
	ИмяМакетаСтруктурыМногострочныхЧастей = НастройкиФормы.МакетСтруктурыМногострочныхЧастей;
	ТекстОписанияСтруктуры = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыМногострочныхЧастей).ПолучитьТекст();
	ИнициализироватьОписанияМногострочныхПоXML(ТекстОписанияСтруктуры);
	
	ПараметрыОтчета = РегламентированнаяОтчетность.ПараметрыДополненияСтруктурыМногострочныхЧастей();
	ПараметрыОтчета.Организация              = СтруктураРеквизитовФормы.Организация;
	ПараметрыОтчета.ГруппаОрганизаций        = СтруктураРеквизитовФормы.ГруппаОрганизаций;
	ПараметрыОтчета.мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПараметрыОтчета.мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	РегламентированнаяОтчетность.ДополнитьСтруктуруМногострочныхЧастей(ПараметрыОтчета, СтруктураМногострочныхЧастей);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Заполнение соответствия показателей и их описаний в структуре
	// для возможности получения описания по имени показателя.
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Ключ;
		ПоказателиМногострочнойЧасти    = МногострочнаяЧасть.Значение.Состав;
		
		Если ТипЗнч(ПоказателиМногострочнойЧасти) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Показатель Из ПоказателиМногострочнойЧасти[0] Цикл
			СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию.Вставить(Показатель.Ключ, ИдентификаторМногострочнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс"; // Бухгалтерский баланс
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОФР"; // Отчет о финансовых результатах
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИС"; // Отчет о целевом использовании полученных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РасчетАктивов";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Корректировка";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Баланс();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОФР();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОИК();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОДДС();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОЦИС();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_РасчетАктивов();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Корректировка();
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Пояснения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Баланс()
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОФР()
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210004", "П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210005", "П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100104", "П000102110104;П000102120104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100105", "П000102110105;П000102120105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100204", "П000102110204;П000102120204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100205", "П000102110205;П000102120205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200104", "П000102110104;П000102120104;П000102210104;П000102220104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200105", "П000102110105;П000102120105;П000102210105;П000102220105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200205", "П000102110205;П000102120205;П000102210205;П000102220205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300104", "П000102110104;П000102120104;П000102210104;П000102220104;П000100231004;П000100232004;П000100234004;П000100233004;П000100235004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300105", "П000102110105;П000102120105;П000102210105;П000102220105;П000100231005;П000100232005;П000100234005;П000100233005;П000100235005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300205", "П000102110205;П000102120205;П000102210205;П000102220205");
	
	Если ЭтоОФР2019(СтруктураОтчета) Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	КонецЕсли;
	
	Если ЭтоОФР2020(СтруктураОтчета) Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100253004;П000100230004;П000100241004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100253005;П000100230005;П000100241005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОИК()
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321108", "П000100321107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321208", "П000100321205;П000100321207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321308", "П000100321305;П000100321307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100321008", "П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603;П100100321003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604;П100100321004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605;П100100321005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321006", "П000100321606;П100100321006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321008",
		"П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П100100321008;П000100321107;П000100321205;
		|П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;
		|П000100321605;П000100321606;П000100321607;П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322108", "П000100322107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322208", "П000100322205;П000100322207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322308", "П000100322305;П000100322307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322708", "П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100324008", "П100100324003;П100100324004;П100100324005;П100100324006;П100100324007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100324007", "П000100324006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603;П100100324003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604;П100100324004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П100100324005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322006", "П000100322606;П100100324006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707;П100100324007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008",
		"П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;
		|П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;
		|П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;
		|П000100322607;П000100322707;П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;
		|П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;
		|П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;
		|П000100322607;П000100322707;П100100324003;П100100324004;П100100324005;П100100324006;П100100324007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331108", "П000100331107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331208", "П000100331205;П000100331207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331308", "П000100331305;П000100331307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100331008", "П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603;П100100331003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604;П100100331004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605;П100100331005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331006", "П000100331606;П100100331006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331008",
		"П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П100100331008;П000100331107;П000100331205;
		|П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;
		|П000100331605;П000100331606;П000100331607;П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332108", "П000100332107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332208", "П000100332205;П000100332207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332308", "П000100332305;П000100332307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332708", "П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100334008", "П100100334003;П100100334004;П100100334005;П100100334006;П100100334007");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603;П100100334003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604;П100100334004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605;П100100334005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332006", "П000100332606;П100100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707;П100100334007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332008",
		"П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;
		|П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;
		|П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;
		|П000100332607;П000100332707;П100100334003;П100100334004;П100100334005;П100100334006;П100100334007;П100100334008");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100334007", "П000100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340206", "П000100340203;П000100340204;П000100340205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341206", "П000100341203;П000100341204;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342206", "П000100342203;П000100342204;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350203", "П000100340203;П000100341203;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350204", "П000100340204;П000100341204;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350205", "П000100340205;П000100341205;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350206", "П000100350203;П000100350204;П000100350205;П000100340203;П000100341203;П000100342203;П000100340204;П000100341204;П000100342204;П000100340205;П000100341205;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341003", "П000100341103;П000100341203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341004", "П000100341104;П000100341204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341005", "П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342003", "П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342004", "П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342005", "П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П000100341203;П000100341104;П000100341204;П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П000100342203;П000100342104;П000100342204;П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203;П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204;П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	
	// Данные "Стоимости чистых активов" (из Расчета активов).
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360003", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360004", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360005", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОДДС()
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П100100411003;П000100411903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П100100411004;П000100411904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_ОЦИС()
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620004", "П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631004", "П000100631104;П000100631204;П000100631304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632004", "П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630004", "П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640004", "П000100610004;П000100620004;П000100630004;П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620005", "П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631005", "П000100631105;П000100631205;П000100631305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632005", "П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630005", "П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640005", "П000100610005;П000100620005;П000100630005;П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005;П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_РасчетАктивов()
	
	// Активы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111004", "П000100111004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111005", "П000100111005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111006", "П000100111006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112004", "П000100112004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112005", "П000100112005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112006", "П000100112006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113004", "П000100113004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113005", "П000100113005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113006", "П000100113006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114004", "П000100114004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114005", "П000100114005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114006", "П000100114006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115004", "П000100115004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115005", "П000100115005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115006", "П000100115006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116004", "П000100116004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116005", "П000100116005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116006", "П000100116006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117004", "П000100117004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117005", "П000100117005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117006", "П000100117006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118004", "П000100118004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118005", "П000100118005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118006", "П000100118006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119004", "П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119005", "П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119006", "П000100119006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121004", "П000100121004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121005", "П000100121005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121006", "П000100121006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122004", "П000100122004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122005", "П000100122005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122006", "П000100122006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123004", "П000100123004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123005", "П000100123005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123006", "П000100123006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124004", "П000100124004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124005", "П000100124005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124006", "П000100124006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125004", "П000100125004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125005", "П000100125005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125006", "П000100125006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126004", "П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126005", "П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126006", "П000100126006");
	
	// ИТОГО активы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	
	// Пассивы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141004", "П000100141004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141005", "П000100141005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141006", "П000100141006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142004", "П000100142004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142005", "П000100142005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142006", "П000100142006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143004", "П000100143004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143005", "П000100143005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143006", "П000100143006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145004", "П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145005", "П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145006", "П000100145006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151004", "П000100151004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151005", "П000100151005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151006", "П000100151006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152004", "П000100152004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152005", "П000100152005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152006", "П000100152006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110153004", "П000100153004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110153005", "П000100153005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110153006", "П000100153006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154004", "П000100154004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154005", "П000100154005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154006", "П000100154006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155004", "П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155005", "П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155006", "П000100155006");
	
	// ИТОГО пассивы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200004", "П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200005", "П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200006", "П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
	// Стоимость чистых активов.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Корректировка()
	
	Графы = СтрРазделить("03,04,05", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		// Прошлый год.
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201100", Графа,
			"П0001201110,П0001201120,П0001201130,П0001201140,П0001201150,П0001201160,П0001201170,П0001201180,П0001201190");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201200", Графа,
			"П0001201210,П0001201220,П0001201230,П0001201240,П0001201250,П0001201260");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201600", Графа,
			"П0001201110,П0001201120,П0001201130,П0001201140,П0001201150,П0001201160,П0001201170,П0001201180,П0001201190,
			|П0001201210,П0001201220,П0001201230,П0001201240,П0001201250,П0001201260");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201300", Графа,
			"П0001201310,П0001201320,П0001201340,П0001201350,П0001201360,П0001201370");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001211300", Графа,
			"П0001211310,П0001211320,П0001211350,П0001211360,П0001211370");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201400", Графа,
			"П0001201410,П0001201420,П0001201430,П0001201450");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201500", Графа,
			"П0001201510,П0001201520,П0001201530,П0001201540,П0001201550");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001201700", Графа,
			"П0001201310,П0001201320,П0001201340,П0001201350,П0001201360,П0001201370,
			|П0001211310,П0001211320,П0001211350,П0001211360,П0001211370,
			|П0001201410,П0001201420,П0001201430,П0001201450,
			|П0001201510,П0001201520,П0001201530,П0001201540,П0001201550");
		
		// Год предшествующий прошлому.
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221100", Графа,
			"П0001221110,П0001221120,П0001221130,П0001221140,П0001221150,П0001221160,П0001221170,П0001221180,П0001221190");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221200", Графа,
			"П0001221210,П0001221220,П0001221230,П0001221240,П0001221250,П0001221260");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221600", Графа,
			"П0001221110,П0001221120,П0001221130,П0001221140,П0001221150,П0001221160,П0001221170,П0001221180,П0001221190,
			|П0001221210,П0001221220,П0001221230,П0001221240,П0001221250,П0001221260");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221300", Графа,
			"П0001221310,П0001221320,П0001221340,П0001221350,П0001221360,П0001221370");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001231300", Графа,
			"П0001231310,П0001231320,П0001231350,П0001231360,П0001231370");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221400", Графа,
			"П0001221410,П0001221420,П0001221430,П0001221450");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221500", Графа,
			"П0001221510,П0001221520,П0001221530,П0001221540,П0001221550");
		ДобавитьЗависимостиПоказателейАвторасчета("П0001221700", Графа,
			"П0001221310,П0001221320,П0001221340,П0001221350,П0001221360,П0001221370,
			|П0001231310,П0001231320,П0001231350,П0001231360,П0001231370,
			|П0001221410,П0001221420,П0001221430,П0001221450,
			|П0001221510,П0001221520,П0001221530,П0001221540,П0001221550");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета_Пояснения()
	
	// Пояснения 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530004", "П000100530104;П000100530504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530005", "П000100530105;П000100530505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530006", "П000100530106;П000100530506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530007", "П000100530107;П000100530507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530008", "П000100530108;П000100530508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530009", "П000100530109;П000100530509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530010", "П000100530110;П000100530510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530011", "П000100530111;П000100530511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530012", "П000100530112;П000100530512");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531004", "П000100531104;П000100531504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531005", "П000100531105;П000100531505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531006", "П000100531106;П000100531506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531007", "П000100531107;П000100531507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531008", "П000100531108;П000100531508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531009", "П000100531109;П000100531509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531010", "П000100531110;П000100531510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531011", "П000100531111;П000100531511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531012", "П000100531112;П000100531512");
	
	// Пояснения 4.
	НомераСтрок = СтрРазделить("5400,5420,5401,5421,5402,5422,5403,5423,5404,5424,5405,5425,5406,5426,5407,5427", ",");
	
	Для Каждого НомерСтроки Из НомераСтрок Цикл
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100" + НомерСтроки + "21",
			"П000100" + НомерСтроки + "04;" + "П000100" + НомерСтроки + "05");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100" + НомерСтроки + "22",
			"П000100" + НомерСтроки + "11;" + "П000100" + НомерСтроки + "12");
	КонецЦикла;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100540021", "П100100540004;П100100540005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100542021", "П100100542004;П100100542005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100540022", "П100100540011;П100100540012");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100542022", "П100100542011;П100100542012");
	
	// Пояснения 5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550004", "П000100550104;П000100551104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552004", "П000100552104;П000100553104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550005", "П000100550105;П000100551105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552005", "П000100552105;П000100553105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550006", "П000100550106;П000100551106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552006", "П000100552106;П000100553106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550007", "П000100550107;П000100551107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552007", "П000100552107;П000100553107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550008", "П000100550108;П000100551108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552008", "П000100552108;П000100553108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550009", "П000100550109;П000100551109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552009", "П000100552109;П000100553109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550010", "П000100550110;П000100551110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552010", "П000100552110;П000100553110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550012", "П000100550112;П000100551112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552012", "П000100552112;П000100553112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550013", "П000100550113;П000100551113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552013", "П000100552113;П000100553113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555004", "П000100555104;П000100556004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557004", "П000100557104;П000100558004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555005", "П000100555105;П000100556005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557005", "П000100557105;П000100558005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555006", "П000100555106;П000100556006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557006", "П000100557106;П000100558006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555007", "П000100555107;П000100556007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557007", "П000100557107;П000100558007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555008", "П000100555108;П000100556008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557008", "П000100557108;П000100558008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555010", "П000100555110;П000100556010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557010", "П000100557110;П000100558010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550021", "П000100550121;П000100551121");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550022", "П000100550122;П000100551122");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552021", "П000100552121;П000100553121");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552022", "П000100552122;П000100553122");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555021", "П000100555121;П000100556021");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555022", "П000100555122;П000100556022");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557021", "П000100557121;П000100558021");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557022", "П000100557122;П000100558022");
	
	// Пояснения 6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003;П000100566503;П000100567003;П000100568003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004;П000100566504;П000100567004;П000100568004");
	
	// Пояснения 7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100570007", "П100100570003;П100100570004;П100100570005;П100100570006");
	
	// Пояснения 9.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590003", "П000100590103;П000100590503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590004", "П000100590104;П000100590504");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗависимостиПоказателейАвторасчета(СтрокаРасчета, Графа, Зависимости)
	
	ПолнаяЗависимость = "";
	Для Каждого Зависимость Из СтрРазделить(Зависимости, ",", Ложь) Цикл
		ПолнаяЗависимость = ПолнаяЗависимость + ";" + СокрЛП(Зависимость) + Графа;
	КонецЦикла;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить(СтрокаРасчета + Графа, Сред(ПолнаяЗависимость, 2));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	ФормироватьСтруктуруСтраницОтчета();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПримененияУСН()
	
	ОтчетныйПериодКонец  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ОтчетныйПериодНачало = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	ПредшествующийПериодКонец  = ОтчетныйПериодНачало - 1;
	ПредшествующийПериодНачало = НачалоГода(ПредшествующийПериодКонец);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ОтчетныйПериодНачало, ОтчетныйПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН0 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ПредшествующийПериодНачало, ПредшествующийПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН1 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруДанныхРазделов()
	
	Для Каждого РазделОтчета Из СтруктураОтчета Цикл
		Если РазделОтчета.Значение.Свойство("ИмяМакета") Тогда
			ИмяСтраницы = РазделОтчета.Значение.ИмяСтраницы;
			ИмяМакетаРаздела = РазделОтчета.Значение.ИмяМакета;
			СтруктураДанныхРаздела = ЭтотОбъект["СтруктураДанных" + ИмяСтраницы];
			
			МакетРаздела = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяФормыОтчета(ИмяФормы) + "_" + ИмяМакетаРаздела);
			
			Для Каждого ОбластьМакета Из МакетРаздела.Области Цикл
				ИмяОбласти = ОбластьМакета.Имя;
				Если ОбластьМакета.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И ОбластьМакета.СодержитЗначение = Истина
				   И НЕ СтруктураДанныхРаздела.Свойство(ИмяОбласти) Тогда
					СтруктураДанныхРаздела.Вставить(ИмяОбласти, ОбластьМакета.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область СоставПоказателей

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	БлокироватьРачетАктивов1530_05 = (Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) < 2022;
	БлокироватьРачетАктивов1530_06 = (Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2) < 2022;
	
	УсловияВариантовЗаполнения = Новый Структура;
	УсловияВариантовЗаполнения.Вставить("ПрименяетсяПБУ18ВОтчетномПериоде", ПрименяетсяПБУ18ВОтчетномПериоде);
	УсловияВариантовЗаполнения.Вставить("ПрименяетсяПБУ18ВПредыдущемГоду",  ПрименяетсяПБУ18ВПредыдущемГоду);
	УсловияВариантовЗаполнения.Вставить("БлокироватьРачетАктивов1530_05",   БлокироватьРачетАктивов1530_05);
	УсловияВариантовЗаполнения.Вставить("БлокироватьРачетАктивов1530_06",   БлокироватьРачетАктивов1530_06);
	
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ИмяРаздела", "");
	ПараметрыПоказателей.Вставить("Префикс", "");
	ПараметрыПоказателей.Вставить("Строки", "");
	ПараметрыПоказателей.Вставить("Графы", "");
	ПараметрыПоказателей.Вставить("ПризнакМСЧ", "");
	ПараметрыПоказателей.Вставить("УсловияВариантовЗаполнения", УсловияВариантовЗаполнения);
	
	Если СтруктураОтчета.Баланс.ИмяСекцииПоказателей = "БалансНКО" Тогда
		СформироватьСоставПоказателей_БалансНКО(ПараметрыПоказателей);
	Иначе
		СформироватьСоставПоказателей_Баланс(ПараметрыПоказателей);
	КонецЕсли;
	
	Если СтруктураОтчета.ОФР.ИмяСекцииПоказателей = "ОФР_ЕНВД" Тогда
		СформироватьСоставПоказателей_ОФР_ЕНВД(ПараметрыПоказателей);
	ИначеЕсли СтруктураОтчета.ОФР.ИмяСекцииПоказателей = "ОФР_НеЕНВД" Тогда
		СформироватьСоставПоказателей_ОФР_НеЕНВД(ПараметрыПоказателей);
	ИначеЕсли СтруктураОтчета.ОФР.ИмяСекцииПоказателей = "ОФР_ЕНВД_2020Кв1" Тогда
		СформироватьСоставПоказателей_ОФР_ЕНВД_2020Кв1(ПараметрыПоказателей);
	Иначе
		СформироватьСоставПоказателей_ОФР_НеЕНВД_2020Кв1(ПараметрыПоказателей);
	КонецЕсли;
	ПереопределитьВариантыЗаполнения_ОФР(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_ОИК(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_ОДДС(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_ОЦИС(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_РасчетАктивов(ПараметрыПоказателей);
	ПереопределитьВариантыЗаполнения_РасчетАктивов(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Корректировка(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения1(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения2(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения3(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения4(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения5(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения6(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения7(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения8(ПараметрыПоказателей);
	
	СформироватьСоставПоказателей_Пояснения9(ПараметрыПоказателей);
	
	УстановитьВидимостьПолейПоПБУ18();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Баланс(ПараметрыПоказателей)
	
	ИмяРаздела = "Баланс";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1110, 11101, 11102, 11103,
		|1120, 11201, 11202,
		|1130, 1140,
		|1150, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509, 11510,
		|1160, 11601, 11602, 11603, 11604, 1170, 11701,
		|1180,
		|1190, 11901, 11902, 11903, 11904,
		|1210, 12101, 12102, 12103, 12104, 12105, 12106, 12108, 12109, 12110, 12111, 12112,
		|1220, 12201, 12202, 12203, 12204, 12205, 12206, 12207,
		|1230, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312, 12313,
		|1240, 12401, 12402, 12403, 12404, 12405, 12406, 12407,
		|1250, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513,
		|1260, 12601, 12602, 12603, 12604, 12606, 12607, 12608, 12609, 12610, 12611, 12612,
		|1310, 1320,
		|1340, 13401, 13402, 13403,
		|1350,
		|1360, 13601, 13602,
		|1370,
		|1410, 14101, 14102, 14103, 14104,
		|1420, 1430, 1450,
		|1510, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112,
		|1520, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209,
		|1530, 15301, 15302, 15303, 15304, 15305,
		|1540, 15401, 15402,
		|1550";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "1100, 1200, 1300, 1400, 1500, 1600, 1700";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";

	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1210, 1220, 1230, 1240, 1250, 1260,
		|1310, 1320, 1340, 1350, 1360, 1370,
		|1410, 1420, 1430, 1450,
		|1510, 1520, 1530, 1540, 1550";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_БалансНКО(ПараметрыПоказателей)
	
	ИмяРаздела = "Баланс";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1110, 11101, 11102, 11103,
		|1120, 11201, 11202,
		|1130, 1140,
		|1150, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509, 11510,
		|1160, 11601, 11602, 11603, 11604,
		|1170, 11701,
		|1180,
		|1190, 11901, 11902, 11903, 11904,
		|1210, 12101, 12102, 12103, 12104, 12105, 12106, 12108, 12109, 12110, 12111, 12112,
		|1220, 12201, 12202, 12203, 12204, 12205, 12206, 12207,
		|1230, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312, 12313,
		|1240, 12401, 12402, 12403, 12404, 12405, 12406, 12407,
		|1250, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513,
		|1260, 12601, 12602, 12603, 12604, 12606, 12607, 12608, 12609, 12610, 12611, 12612,
		|1310, 1320, 1350, 1360, 1370,
		|1410, 14101, 14102, 14103, 14104,
		|1420, 1430, 1450,
		|1510, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112,
		|1520, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209,
		|1530, 15302, 15303, 15304, 15305,
		|1540, 15401, 15402,
		|1550";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "1100, 1200, 1300, 1400, 1500, 1600, 1700";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "1210, 1220, 1230, 1240, 1250, 1260,
		|1310, 1320, 1350, 1360, 1370,
		|1410, 1420, 1430, 1450,
		|1510, 1520, 1530, 1540, 1550";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОФР_НеЕНВД(ПараметрыПоказателей)
	
	ИмяРаздела = "ОФР";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2110, 2120, 2210, 2220,
		|2310, 23101, 23102, 23103,
		|2320, 23201, 23202, 23203,
		|2330, 23301, 23302,
		|2340, 23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409,
		|23410, 23411, 23412, 23413, 23414, 23415, 23416, 23417, 23418, 23419,
		|23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427,
		|2350, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509,
		|23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519,
		|23520, 23521, 23522, 23523, 23524, 23525, 23526, 23527, 23528, 23529,
		|23530, 23531, 23532, 23533, 23534,
		|2410, 2421, 2430, 2450,
		|2460, 24601, 24602, 24603,
		|2510, 25101, 25102,
		|2520, 2900, 2910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "2100, 2200, 2300, 2400, 2500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2100, 2110, 2120, 2200, 2210, 2220,
		|2300, 2310, 2320, 2330, 2340, 2350, 2421, 2430, 2450, 2460, 2520";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОФР_ЕНВД(ПараметрыПоказателей)
	
	ИмяРаздела = "ОФР";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2110, 21101, 21102, 2120, 21201, 21202,
		|2210, 22101, 22102, 2220, 22201, 22202,
		|2310, 23101, 23102, 23103,
		|2320, 23201, 23202, 23203,
		|2330, 23301, 23302,
		|2340, 23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409,
		|23410, 23411, 23412, 23413, 23414, 23415, 23416, 23417, 23418, 23419,
		|23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427,
		|2350, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509,
		|23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519,
		|23520, 23521, 23522, 23523, 23524, 23525, 23526, 23527, 23528, 23529,
		|23530, 23531, 23532, 23533, 23534,
		|2410, 2421, 2430, 2450,
		|2460, 24601, 24602, 24603,
		|2510, 25101, 25102,
		|2520, 2900, 2910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "2100, 21001, 21002, 2200, 22001, 22002, 2300, 23001, 23002, 2400, 2500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "21001, 21002, 21101, 21102, 21201, 21202,
		|22001, 22002, 22101, 22102, 22201, 22202,
		|2310, 2320, 2330, 2340, 2350, 2421, 2430, 2450, 2460, 2520";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОФР_НеЕНВД_2020Кв1(ПараметрыПоказателей)
	
	ИмяРаздела = "ОФР";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2110, 2120, 2210, 2220,
		|2310, 23101, 23102, 23103,
		|2320, 23201, 23202, 23203,
		|2330, 23301, 23302,
		|2340, 23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409,
		|23410, 23411, 23412, 23413, 23414, 23415, 23416, 23417, 23418, 23419,
		|23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427,
		|2350, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509,
		|23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519,
		|23520, 23521, 23522, 23523, 23524, 23525, 23526, 23527, 23528, 23529,
		|23530, 23531, 23532, 23533, 23534,
		|2410, 2411, 2412,
		|2460, 24601, 24602,
		|2510, 25101, 25102,
		|2520, 2530, 2900, 2910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "2100, 2200, 2300, 2400, 2500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2100, 2110, 2120, 2200, 2210, 2220,
		|2300, 2310, 2320, 2330, 2340, 2350, 2460, 2520, 2530";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОФР_ЕНВД_2020Кв1(ПараметрыПоказателей)
	
	ИмяРаздела = "ОФР";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2110, 21101, 21102, 2120, 21201, 21202,
		|2210, 22101, 22102, 2220, 22201, 22202,
		|2310, 23101, 23102, 23103,
		|2320, 23201, 23202, 23203,
		|2330, 23301, 23302,
		|2340, 23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409,
		|23410, 23411, 23412, 23413, 23414, 23415, 23416, 23417, 23418, 23419,
		|23420, 23421, 23422, 23423, 23424, 23425, 23426, 23427,
		|2350, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509,
		|23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519,
		|23520, 23521, 23522, 23523, 23524, 23525, 23526, 23527, 23528, 23529,
		|23530, 23531, 23532, 23533, 23534,
		|2410, 2411, 2412,
		|2460, 24601, 24602,
		|2510, 25101, 25102,
		|2520, 2530, 2900, 2910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "2100, 21001, 21002, 2200, 22001, 22002, 2300, 23001, 23002, 2400, 2500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "21001, 21002, 21101, 21102, 21201, 21202,
		|22001, 22002, 22101, 22102, 22201, 22202,
		|2310, 2320, 2330, 2340, 2350, 2460, 2520, 2530";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьВариантыЗаполнения_ОФР(ПараметрыПоказателей)
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <> КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100251004", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100251005", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000102510104", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000102510105", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000102510204", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000102510205", 5);
	КонецЕсли;
	
	Если НЕ ПараметрыПоказателей.УсловияВариантовЗаполнения.ПрименяетсяПБУ18ВОтчетномПериоде Тогда
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100242104", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100243004", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100245004", 5);
	КонецЕсли;
	
	Если НЕ ПараметрыПоказателей.УсловияВариантовЗаполнения.ПрименяетсяПБУ18ВПредыдущемГоду Тогда
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100242105", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100243005", 5);
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000100245005", 5);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОИК(ПараметрыПоказателей)
	
	ИмяРаздела = "ОИК";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0, 06Е4";
	ПараметрыПоказателей.Строки = "3402";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 03Е0, 04Е0, 05Е0, 06Е4";
	ПараметрыПоказателей.Строки = "3412, 3422";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 03Е4, 04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "3502";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3100, 3200, 3216, 3226, 3300, 3316, 3326";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е4";
	ПараметрыПоказателей.Строки = "3411, 3421";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 07Е0";
	ПараметрыПоказателей.Строки = "3215, 3315";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 07Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3224, 3225, 3324, 3325";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3214, 3314";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е4, 06Е0";
	ПараметрыПоказателей.Строки = "3400, 3401";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "3600";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "3410, 3420, 3500, 3501";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4, 05Е4, 06Е4, 07Е4, 08Е4";
	ПараметрыПоказателей.Строки = "3210, 3220, 3310, 3320";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "3230, 3330";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "05Е0, 07Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3212, 3213, 3222, 3223, 3312, 3313, 3322, 3323";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "06Е0, 07Е4";
	ПараметрыПоказателей.Строки = "3240, 3340";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "07Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3211, 3221, 3227, 3311, 3321, 3327";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е4";
	ПараметрыПоказателей.Строки = "3210, 3240, 3310, 3340";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОДДС(ПараметрыПоказателей)
	
	ИмяРаздела = "ОДДС";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";

	ПараметрыПоказателей.Графы = "03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "4111, 4112, 4113, 4119, 4121, 4122, 4123, 4124, 4129,
		|4211, 4212, 4213, 4214, 4219, 4221, 4222, 4223, 4224, 4229,
		|4311, 4312, 4313, 4314, 4319, 4321, 4322, 4323, 4329,
		|4450, 4490";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4";
	ПараметрыПоказателей.Строки = "4100, 4110, 4120, 4200, 4210, 4220, 4300, 4310, 4320, 4400, 4500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "4110, 4120, 4210, 4220, 4310, 4320";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОЦИС(ПараметрыПоказателей)
	
	ИмяРаздела = "ОЦИС";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "6100, 6210, 6215, 6220, 6230, 6240, 6250,
		|6311, 6312, 6313, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "6200, 6300, 6310, 6320, 6400";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "6250, 6350";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_РасчетАктивов(ПараметрыПоказателей)
	
	ИмяРаздела = "РасчетАктивов";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00011";
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190,
		|1210, 1220, 1230, 1240, 1250, 1260,
		|1410, 1420, 1430, 1450,
		|1510, 1520, 1530, 1540, 1550,
		|1000, 2000, 3000";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьВариантыЗаполнения_РасчетАктивов(ПараметрыПоказателей)
	
	Если ПараметрыПоказателей.УсловияВариантовЗаполнения.БлокироватьРачетАктивов1530_05 Тогда
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000110153005", 5);
	КонецЕсли;
	
	Если ПараметрыПоказателей.УсловияВариантовЗаполнения.БлокироватьРачетАктивов1530_06 Тогда
		УстановитьВариантЗаполнения(ПараметрыПоказателей, "П000110153006", 5);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Корректировка(ПараметрыПоказателей)
	
	ИмяРаздела = "Корректировка";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00012";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "1110, 1120, 1130, 1140, 1150, 1160, 1170, 1180, 1190,
		|11310, 11320, 11350, 11360, 11370,
		|1210, 1220, 1230, 1240, 1250, 1260,
		|1310, 1320, 1340, 1350, 1360, 1370,
		|1410, 1420, 1430, 1450,
		|1510, 1520, 1530, 1540, 1550,
		|21110, 21120, 21130, 21140, 21150, 21160, 21170, 21180, 21190,
		|21210, 21220, 21230, 21240, 21250, 21260,
		|21310, 21320, 21340, 21350, 21360, 21370,
		|21410, 21420, 21430, 21450,
		|21510, 21520, 21530, 21540, 21550,
		|31310, 31320, 31350, 31360, 31370";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е4, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "1100, 11300, 1200, 1300, 1400, 1500, 1600, 1700,
		|21100, 21200, 21300, 21400, 21500, 21600, 21700, 31300";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения1(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения1";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5120";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Ч0, 04Ч0, 05Ч0";
	ПараметрыПоказателей.Строки = "5130";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5160, 5170, 5180, 5190";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0";
	ПараметрыПоказателей.Строки = "5140, 5150";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0";
	ПараметрыПоказателей.Строки = "5100, 5110";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5120";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Ч0, 04Ч0, 05Ч0";
	ПараметрыПоказателей.Строки = "5130";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5160, 5170, 5180, 5190";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0";
	ПараметрыПоказателей.Строки = "5140, 5150";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0";
	ПараметрыПоказателей.Строки = "5100, 5110";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения2(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения2";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5260, 5270";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5240, 5250";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0";
	ПараметрыПоказателей.Строки = "5200, 5210, 5220, 5230";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5260, 5270";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5287";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5240";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0";
	ПараметрыПоказателей.Строки = "5200, 5220";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5250";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0";
	ПараметрыПоказателей.Строки = "5210, 5230";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры
	
&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения3(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения3";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5320, 5325, 5329";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5301, 5305, 5311, 5315";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4, 07Е4, 08Е4, 09Е4, 10Е4, 11Е4, 12Е4";
	ПараметрыПоказателей.Строки = "5300, 5310";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5320, 5325";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5301, 5305";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5311, 5315";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры
	
&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения4(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения4";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5440, 5445";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5401, 5402, 5403, 5404, 5405, 5406, 5407, 5421, 5422, 5423, 5424, 5425, 5426, 5427";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 11Е0, 12Е0, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5400, 5420";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5440, 5445";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5400";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5420";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения5(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения5";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5590, 5591, 5592, 5593";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5540, 5541, 5542, 5543";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 21Е0, 22Е0";
	ПараметрыПоказателей.Строки = "5501, 5502, 5503, 5504, 5511, 5512, 5513, 5514,
		|5521, 5522, 5523, 5524, 5531, 5532, 5533, 5534";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 21Е0, 22Е0";
	ПараметрыПоказателей.Строки = "5551, 5552, 5553, 5554, 5560, 5561, 5562, 5563, 5564, 5565, 5566,
		|5571, 5572, 5573, 5574, 5580, 5581, 5582, 5583, 5584, 5585, 5586";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4, 07Е4, 08Е4, 09Е4, 10Е4, 12Е4, 13Е4, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5500, 5520";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е4, 05Е4, 06Е4, 07Е4, 08Е4, 10Е4, 21Е4, 22Е4";
	ПараметрыПоказателей.Строки = "5550, 5570";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5590";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0";
	ПараметрыПоказателей.Строки = "5540";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5551, 5560";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0";
	ПараметрыПоказателей.Строки = "5501, 5511";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5571, 5580";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0";
	ПараметрыПоказателей.Строки = "5521, 5531";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения6(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения6";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5610, 5620, 5630, 5640, 5650, 5665, 5670, 5680";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4";
	ПараметрыПоказателей.Строки = "5600, 5660";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения7(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения7";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5700, 5701, 5702";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е4";
	ПараметрыПоказателей.Строки = "5700";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения8(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения8";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5800, 5810";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03Е0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "5800, 5810";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения9(ПараметрыПоказателей)
	
	ИмяРаздела = "Пояснения9";
	
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00010";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5901, 5905";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е4, 04Е4";
	ПараметрыПоказателей.Строки = "5900";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5910, 5920";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10010";
	
	ПараметрыПоказателей.Графы = "01С0, 03С0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03С0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5920";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	Если ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда
		мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
		мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиРаздела(ПараметрыПоказателей)
	
	ИмяСтраницы = ПараметрыПоказателей.ИмяРаздела;
	
	Префикс = ПараметрыПоказателей.Префикс;
	ПризнМногострочность = ПараметрыПоказателей.ПризнакМСЧ;
	
	Строки = Список(ПараметрыПоказателей.Строки);
	Графы = Список(ПараметрыПоказателей.Графы);
	
	Для Каждого КодСтроки Из Строки Цикл
		Для Каждого КодификаторГрафы Из Графы Цикл
			КодГрафы = Сред(КодификаторГрафы, 1, 2);
			ТипДанныхРеквизита = Сред(КодификаторГрафы, 3, 1);
			ВариантЗаполненияПоказателя = Число(Сред(КодификаторГрафы, 4));
			
			КодПоказателя = Префикс + Прав("00000" + КодСтроки, 5) + КодГрафы;
			
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = "";
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если ВариантЗаполненияПоказателя <> 0 Тогда
				НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = КодПоказателя;
				НоваяСтрока.ВариантЗаполнения  = ВариантЗаполненияПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантЗаполнения(ПараметрыПоказателей, КодПоказателя, ВариантЗаполнения)
	
	ТаблицаВариантовЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ПараметрыПоказателей.ИмяРаздела][0].ТаблицаВариантовЗаполнения;
	СтрокиПоказателя =  ТаблицаВариантовЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
	
	Если СтрокиПоказателя.Количество() = 0 Тогда
		СтрокаПоказателя = ТаблицаВариантовЗаполнения.Добавить();
		СтрокаПоказателя.КодПоказателя = КодПоказателя;
	Иначе
		СтрокаПоказателя = СтрокиПоказателя[0];
	КонецЕсли;
	
	СтрокаПоказателя.ВариантЗаполнения = ВариантЗаполнения;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеОтчета

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ИмяРаздела = Неопределено;
	Если Команда.Имя = "ЗаполнитьТекущий" Тогда
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(ИмяРаздела, ВремяНачалаОперации);
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ИмяРаздела = Неопределено, ВремяНачалаОперации = Неопределено)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Модифицированность = Истина;
	
	РезультатПроверкиАктуализацииДанныхУчета = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРезультатПроверкиАктуализацииДанныхУчета(
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		РезультатПроверкиАктуализацииДанныхУчета);
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	Если НЕ РезультатПроверкиАктуализацииДанныхУчета = Неопределено 
	   И РезультатПроверкиАктуализацииДанныхУчета.ТребуетсяАктуализация Тогда
		
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок = Новый Массив;
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = 'Данные учета неактуальны с ';
																		|en = 'Данные учета неактуальны с '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(Формат(РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности, "ДЛФ=Д"), Новый Шрифт(, , Истина)));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = '. Рекомендуется выполнить ';
																		|en = '. Рекомендуется выполнить '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'закрытие месяца';
																									|en = 'закрытие месяца'"), , , , "ОткрытьФормуЗакрытияМесяца"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = ' и автозаполнить отчет повторно.';
																		|en = ' и автозаполнить отчет повторно.'"));
		
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок =
		Новый ФорматированнаяСтрока(ПроверкаАктуализацииДанныхПредупреждениеЗаголовок);
		
		СтруктураРеквизитовФормы.ДатаАктуальностиДанных = РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности;
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяРаздела) ИЛИ ИмяРаздела = "Пояснения4" Тогда
		// Обновление структуры блоков разделов отчета. Ранее сохраненные отчеты могут содержать строки
		// неиспользующиеся в актуальных алгоритмах.
		БлокиМакета = НоваяСтруктураБлоковПояснения4();
		СтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
	КонецЕсли;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор, 
		СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	ПолучитьДеревоНастроекСоставаДопСтрок("Корректировка");
	ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
	
	ПараметрыОтчета = НовыеПараметрыАвтозаполнения();
	ПараметрыОтчета.Организация       = СтруктураРеквизитовФормы.Организация;
	ПараметрыОтчета.ГруппаОрганизаций = СтруктураРеквизитовФормы.ГруппаОрганизаций;
	ПараметрыОтчета.мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПараметрыОтчета.мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ПараметрыОтчета.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыОтчета.АдресВоВременномХранилище = СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	ПараметрыОтчета.СтруктураОтчета = СтруктураОтчета;
	ПараметрыОтчета.СоставДополнительныхСтрокБаланс        = ДеревоНастроекБаланс;
	ПараметрыОтчета.СоставДополнительныхСтрокОФР           = ДеревоНастроекОФР;
	ПараметрыОтчета.СоставДополнительныхСтрокКорректировка = ДеревоНастроекКорректировка;
	ПараметрыОтчета.СоставДополнительныхСтрокПояснения7    = ДеревоНастроекПояснения7;
	ПараметрыОтчета.ПрименениеЕНВД = СтруктураРеквизитовФормы.ПрименениеЕНВД;
	ПараметрыОтчета.ПрименениеУСН0 = СтруктураРеквизитовФормы.ПрименениеУСН0;
	ПараметрыОтчета.ПрименениеУСН1 = СтруктураРеквизитовФормы.ПрименениеУСН1;
	ПараметрыОтчета.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	Иначе
		ТаблицаРасшифровки = Неопределено;
	КонецЕсли;
	ПараметрыОтчета.ТаблицаРасшифровки = ТаблицаРасшифровки;
	
	ИменаЗаполняемыхРазделов = Новый Массив;
	
	ОтметитьРазделКакАвтозаполняемый("Баланс",     ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОФР",        ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОИК",        ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОДДС",       ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОЦИС",       ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения1", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения2", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения3", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения4", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения5", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения6", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения7", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения8", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения9", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	
	Если НЕ РазделВключенВОтчет("Корректировка") Тогда
		Если ПараметрыОтчета.ЗаполнятьБаланс
		   И ЭтоОтчетностьЗаГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			ПараметрыОтчета.ЗаполнятьКорректировка = Истина;
			ИменаЗаполняемыхРазделов.Добавить("Корректировка");
		КонецЕсли;
	Иначе
		ОтметитьРазделКакАвтозаполняемый("Корректировка", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("ИменаАвтоЗаполняемыхРазделов", ИменаЗаполняемыхРазделов);
	
	ОчиститьНаСервере(ИмяРаздела, Ложь);
	
	СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	Если ВидСдачиОтчетности = 1 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетностиОбычная", "Х");
		СтруктураДанныхБаланс.Вставить("ВидОтчетностиЛиквидационная", "");
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетностиОбычная", "");
		СтруктураДанныхБаланс.Вставить("ВидОтчетностиЛиквидационная", "Х");
	КонецЕсли;
	
	Контейнер = НовыйКонтейнерПоказателей();
	Контейнер.Баланс        = СтруктураДанныхБаланс;
	Контейнер.ОФР           = СтруктураДанныхОФР;
	Контейнер.ОИК           = СтруктураДанныхОИК;
	Контейнер.ОДДС          = СтруктураДанныхОДДС;
	Контейнер.ОЦИС          = СтруктураДанныхОЦИС;
	Контейнер.РасчетАктивов = СтруктураДанныхРасчетАктивов;
	Контейнер.Пояснения1    = СтруктураДанныхПояснения1;
	Контейнер.Пояснения2    = СтруктураДанныхПояснения2;
	Контейнер.Пояснения3    = СтруктураДанныхПояснения3;
	Контейнер.Пояснения4    = СтруктураДанныхПояснения4;
	Контейнер.Пояснения5    = СтруктураДанныхПояснения5;
	Контейнер.Пояснения6    = СтруктураДанныхПояснения6;
	Контейнер.Пояснения7    = СтруктураДанныхПояснения7;
	Контейнер.Пояснения8    = СтруктураДанныхПояснения8;
	Контейнер.Пояснения9    = СтруктураДанныхПояснения9;
	Контейнер.Корректировка = СтруктураДанныхКорректировка;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Процедура ОтметитьРазделКакАвтозаполняемый(ИмяРаздела, ИмяТекущегоРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов)
	
	ЗаполнятьВсеВидимые = (НЕ ЗначениеЗаполнено(ИмяТекущегоРаздела));
	
	ЗаполнятьРаздел = (ЗаполнятьВсеВидимые ИЛИ ИмяТекущегоРаздела = ИмяРаздела)
	                И РазделВключенВОтчет(ИмяРаздела);
	
	ПараметрыОтчета["Заполнять" + ИмяРаздела] =  ЗаполнятьРаздел;
	
	Если ЗаполнятьРаздел Тогда
		ИменаЗаполняемыхРазделов.Добавить(ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоказателей

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	АдресаХранилищНастроек = Новый Структура;
	АдресаХранилищНастроек.Вставить("Корректировка", СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
	ВключенныеСтроки = ВключенныеСтроки(УникальныйИдентификатор, АдресаХранилищНастроек);
	
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя, ВключенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	АдресаХранилищНастроек = Новый Структура;
	АдресаХранилищНастроек.Вставить("Корректировка", СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
	ВключенныеСтроки = ВключенныеСтроки(УникальныйИдентификатор, АдресаХранилищНастроек);
	
	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя, ВключенныеСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключенныеСтроки(УникальныйИдентификаторФормы, АдресаХранилищНастроек)
	
	ВключенныеСтроки = Новый Структура;
	
	Для Каждого АдресХранилищНастроек Из АдресаХранилищНастроек Цикл
		ИмяРаздела = АдресХранилищНастроек.Ключ;
		АдресХранилища = АдресХранилищНастроек. Значение;
		
		НастройкиСтрокРаздела = ПолучитьИзВременногоХранилища(АдресХранилища);
		НастройкиСтрокРаздела.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
		ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
		СтрокиНастроек = НастройкиСтрокРаздела.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
		НастройкиСтрокРаздела.Колонки.Удалить("ПреобразоватьВМассив");
		
		ПризнакиВключения = Новый Структура;
		Для Каждого СтрокаНастройки Из СтрокиНастроек Цикл
			Если ЗначениеЗаполнено(СтрокаНастройки.ИмяОбластиДопСтроки) Тогда
				ПризнакиВключения.Вставить(СтрокаНастройки.ИмяОбластиДопСтроки,
					ЗначениеЗаполнено(СтрокаНастройки.ВключатьВОтчет));
			КонецЕсли;
		КонецЦикла;
		
		ВключенныеСтроки.Вставить(ИмяРаздела, ПризнакиВключения);
		
	КонецЦикла;
	
	Возврат ВключенныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "", ВключенныеСтроки)
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Баланс" Тогда
		Расчет_Баланс(Форма, ОбластьИмя);
		Расчет_РасчетАктивов(Форма, ОбластьИмя);
		Расчет_ОИК_Таблица3(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОФР" Тогда
		Расчет_ОФР(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОИК" Тогда
		Расчет_ОИК(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОДДС" Тогда
		Расчет_ОДДС(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОЦИС" Тогда
		Расчет_ОЦИС(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Корректировка" Тогда
		Расчет_Корректировка(Форма, ОбластьИмя, ВключенныеСтроки.Корректировка);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения3" Тогда
		Расчет_Пояснения3(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения4" Тогда
		Расчет_Пояснения4(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения5" Тогда
		Расчет_Пояснения5(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения6" Тогда
		Расчет_Пояснения6(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения7" Тогда
		Расчет_Пояснения7(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения9" Тогда
		Расчет_Пояснения9(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		Расчет(Форма, "Баланс",        ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "ОФР",           ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "ОИК",           ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "ОДДС",          ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "ОЦИС",          ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Корректировка", ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения3",    ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения4",    ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения5",    ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения6",    ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения7",    ОбластьИмя, ВключенныеСтроки);
		Расчет(Форма, "Пояснения9",    ОбластьИмя, ВключенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Баланс(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Баланс");
	
	Графы = СтрРазделить("04,05,06", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		// Актив.
		// Строка 1100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001100" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001100" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001110" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001120" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001130" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001140" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001150" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001160" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001170" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001180" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001190" + Графа));
			
		КонецЕсли;
		
		// Строка 1200.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001200" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001200" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001210" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001220" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001230" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001240" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001250" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001260" + Графа));
		КонецЕсли;
		
		// Строка 1600.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001600" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001600" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001100" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001200" + Графа));
		КонецЕсли;
		
		// Пассив
		// Строка 1300.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001300" + Графа], ОбластьИмя) > 0 Тогда
			Строка1340 = 0;
			Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
				Строка1340 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001001340" + Графа);
			КонецЕсли;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001300" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001310" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001320" + Графа)
				+ Строка1340
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001350" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001360" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001370" + Графа));
			
		КонецЕсли;
		
		// Строка 1400.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001400" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001400" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001410" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001420" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001430" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001450" + Графа));
		КонецЕсли;
		
		// Строка 1500.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001500" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001500" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001510" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001520" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001530" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001540" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001550" + Графа));
		КонецЕсли;
		
		// Строка 1700.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001700" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001700" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001300" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001400" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001500" + Графа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОФР(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОФР");
	
	ВключенныеДопСтроки = Форма.СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД;
	
	Графы = СтрРазделить("04,05", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002100" + Графа], ОбластьИмя) > 0 Тогда
			Строка2110 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002110" + Графа);
			Строка2120 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002120" + Графа);
			
			РасчетСтроки2100 = Строка2110 + Строка2120;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002100" + Графа, РасчетСтроки2100);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002200" + Графа], ОбластьИмя) > 0 Тогда
			Строка2100 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002100" + Графа);
			Строка2210 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002210" + Графа);
			Строка2220 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002220" + Графа);
			
			РасчетСтроки2200 = Строка2100 + Строка2210 + Строка2220;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002200" + Графа, РасчетСтроки2200);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002300" + Графа], ОбластьИмя) > 0 Тогда
			Строка2200 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002200" + Графа);
			Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002310" + Графа);
			Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002320" + Графа);
			Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002330" + Графа);
			Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002340" + Графа);
			Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002350" + Графа);
			
			РасчетСтроки2300 = Строка2200 + Строка2310 + Строка2320 + Строка2330 + Строка2340 + Строка2350;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002300" + Графа, РасчетСтроки2300);
			
		КонецЕсли;
		
		Если ЭтоОФР2019(Форма.СтруктураОтчета) Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002400" + Графа], ОбластьИмя) > 0 Тогда
				Строка2300 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002300" + Графа);
				Строка2410 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002410" + Графа);
				Строка2430 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002430" + Графа);
				Строка2450 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002450" + Графа);
				Строка2460 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002460" + Графа);
				
				РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2430 + Строка2450 + Строка2460;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002400" + Графа, РасчетСтроки2400);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоОФР2020(Форма.СтруктураОтчета) Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002400" + Графа], ОбластьИмя) > 0 Тогда
				Строка2300 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002300" + Графа);
				Строка2410 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002410" + Графа);
				Строка2460 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002460" + Графа);
				
				РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2460;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002400" + Графа, РасчетСтроки2400);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002500" + Графа], ОбластьИмя) > 0 Тогда
			Строка2400 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002400" + Графа);
			Строка2510 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002510" + Графа);
			Строка2520 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002520" + Графа);
			
			РасчетСтроки2500 = Строка2400 + Строка2510 + Строка2520;
			
			Если ЭтоОФР2020(Форма.СтруктураОтчета) Тогда
				Строка2530 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002530" + Графа);
				РасчетСтроки2500 = РасчетСтроки2500 + Строка2530;
			КонецЕсли;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002500" + Графа, РасчетСтроки2500);
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
			// Строка 21001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001021001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки21001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
					Строка21101 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21101") <> Неопределено Тогда
						Строка21101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021101" + Графа);
					КонецЕсли;
					
					Строка21201 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21201") <> Неопределено Тогда
						Строка21201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021201" + Графа);
					КонецЕсли;
					
					РасчетСтроки21001 = Строка21101 + Строка21201;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001021001" + Графа, РасчетСтроки21001);
				
			КонецЕсли;
			
			// Строка 21002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001021002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки21002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
					Строка21102 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21102") <> Неопределено Тогда
						Строка21102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021102" + Графа);
					КонецЕсли;
					
					Строка21202 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21202") <> Неопределено Тогда
						Строка21202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021202" + Графа);
					КонецЕсли;
					
					РасчетСтроки21002 = Строка21102 + Строка21202;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001021002" + Графа, РасчетСтроки21002);
				
			КонецЕсли;
			
			// Строка 22001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001022001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки22001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
					Строка21001 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
						Строка21001 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021001" + Графа);
					КонецЕсли;
					
					Строка22101 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22101") <> Неопределено Тогда
						Строка22101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022101" + Графа);
					КонецЕсли;
					
					Строка22201 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22201") <> Неопределено Тогда
						Строка22201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022201" + Графа);
					КонецЕсли;
					
					РасчетСтроки22001 = Строка21001 + Строка22101 + Строка22201;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001022001" + Графа, РасчетСтроки22001);
				
			КонецЕсли;
			
			// Строка 22002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001022002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки22002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
					Строка21002 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
						Строка21002 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021002" + Графа);
					КонецЕсли;
					
					Строка22102 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22102") <> Неопределено Тогда
						Строка22102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022102" + Графа);
					КонецЕсли;
					
					Строка22202 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22202") <> Неопределено Тогда
						Строка22202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022202" + Графа);
					КонецЕсли;
					
					РасчетСтроки22002 = Строка21002 + Строка22102 + Строка22202;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001022002" + Графа, РасчетСтроки22002);
				
			КонецЕсли;
			
			// Строка 23001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001023001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки23001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока23001") <> Неопределено Тогда
					Строка22001 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
						Строка22001 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022001" + Графа);
					КонецЕсли;
					
					Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002310" + Графа);
					Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002320" + Графа);
					Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002330" + Графа);
					Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002340" + Графа);
					Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002350" + Графа);
					
					РасчетСтроки23001 = Строка22001 + Строка2310 + Строка2320 + Строка2340 + Строка2330 + Строка2350;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001023001" + Графа, РасчетСтроки23001);
				
			КонецЕсли;
			
			// Строка 23002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001023002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки23002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока23002") <> Неопределено Тогда
					Строка22002 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
						Строка22002 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022002" + Графа);
					КонецЕсли;
					
					РасчетСтроки23002 = Строка22002;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001023002" + Графа, РасчетСтроки23002);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК(Форма, ОбластьИмя)
	
	Расчет_ОИК_Таблица1(Форма, ОбластьИмя);
	Расчет_ОИК_Таблица2(Форма, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица1(Форма, ОбластьИмя)
	
	Перем Индекс, ИндексСтр;
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОИК");
	
	НомПозиции = СтрНайти(ОбластьИмя, "_");
	
	Если ЗначениеЗаполнено(ОбластьИмя) Тогда
		ИндексВИмениОбласти = "_" + СтрЧГ0(Сред(ОбластьИмя, НомПозиции + 1));
	Иначе
		ИндексВИмениОбласти = "_" + СтрЧГ0(1);
	КонецЕсли;
	
	Если НомПозиции > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
		П000100310003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310003");
		П000100310004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310004");
		П000100310005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310005");
		П000100310006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310006");
		П000100310007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100310008",
			П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
		П000100321107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321108",
			П000100321107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
		П000100321205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321205");
		П000100321207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321208",
			П000100321205 + П000100321207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
		П000100321305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321305");
		П000100321307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321308",
			П000100321305 + П000100321307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
		П000100321403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321403");
		П000100321404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321404");
		П000100321405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321405");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321408",
			П000100321403 + П000100321404 + П000100321405);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
		П000100321603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321603");
		П000100321604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321604");
		П000100321605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321605");
		П000100321606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321606");
		П000100321607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321608",
			П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
		
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			П100100321003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321003" + ИндексВИмениОбласти);
			П100100321004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321004" + ИндексВИмениОбласти);
			П100100321005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321005" + ИндексВИмениОбласти);
			П100100321006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321006" + ИндексВИмениОбласти);
			П100100321007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100321008" + ИндексВИмениОбласти,
				П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100321008_" + ИндексСтр) Цикл
				П100100321003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321003_" + ИндексСтр);
				П100100321004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321004_" + ИндексСтр);
				П100100321005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321005_" + ИндексСтр);
				П100100321006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321006_" + ИндексСтр);
				П100100321007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100321008_" + ИндексСтр,
					П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
		П000100321403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321403");
		П000100321503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321503");
		П000100321603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321003",
			П000100321403 + П000100321503 + П000100321603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
		
		П000100321404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321404");
		П000100321504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321504");
		П000100321604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321004",
			П000100321404 + П000100321504 + П000100321604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
		П000100321205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321205");
		П000100321305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321305");
		П000100321405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321405");
		П000100321505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321505");
		П000100321605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321005",
			П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
		П000100321606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321006",
			П000100321606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
		П000100321107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321107");
		П000100321207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321207");
		П000100321307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321307");
		П000100321507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321507");
		П000100321607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321007",
			П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
		П000100321108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321108");
		П000100321208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321208");
		П000100321308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321308");
		П000100321408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321408");
		П000100321608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321608");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321008",
			П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
		П000100322107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322108",
			П000100322107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
		П000100322205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322205");
		П000100322207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322208",
			П000100322205 + П000100322207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
		П000100322305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322305");
		П000100322307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322308",
			П000100322305 + П000100322307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
		П000100322403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322403");
		П000100322404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322404");
		П000100322405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322405");
		П000100322407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322407");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322408",
			П000100322403 + П000100322404 + П000100322405 + П000100322407);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
		П000100322503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322503");
		П000100322504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322504");
		П000100322505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322505");
		П000100322507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322507");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322508",
			П000100322503 + П000100322504 + П000100322505 + П000100322507);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
		П000100322603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322603");
		П000100322604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322604");
		П000100322605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322605");
		П000100322606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322606");
		П000100322607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322608",
			П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
		П000100322707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322708",
			П000100322707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100324008, ОбластьИмя) > 0 Тогда
		
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			П100100324003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324003" + ИндексВИмениОбласти);
			П100100324004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324004" + ИндексВИмениОбласти);
			П100100324005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324005" + ИндексВИмениОбласти);
			П100100324006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324006" + ИндексВИмениОбласти);
			П100100324007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100324008" + ИндексВИмениОбласти,
				П100100324003 + П100100324004 + П100100324005 + П100100324006 + П100100324007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100324008_" + ИндексСтр) Цикл
				П100100324003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324003_" + ИндексСтр);
				П100100324004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324004_" + ИндексСтр);
				П100100324005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324005_" + ИндексСтр);
				П100100324006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324006_" + ИндексСтр);
				П100100324007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100324007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100324008_" + ИндексСтр,
					П100100324003 + П100100324004 + П100100324005 + П100100324006 + П100100324007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
		П000100324006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100324006");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100324007",
			-П000100324006);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
		П000100322403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322403");
		П000100322503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322503");
		П000100322603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322003",
			П000100322403 + П000100322503 + П000100322603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
		П000100322404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322404");
		П000100322504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322504");
		П000100322604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322004",
			П000100322404 + П000100322504 + П000100322604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
		П000100322205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322205");
		П000100322305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322305");
		П000100322405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322405");
		П000100322505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322505");
		П000100322605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322005",
			П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
		П000100322606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322006",
			П000100322606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
		П000100322107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322107");
		П000100322207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322207");
		П000100322307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322307");
		П000100322407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322407");
		П000100322507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322507");
		П000100322607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322607");
		П000100322707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322007",
			П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
		П000100322108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322108");
		П000100322208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322208");
		П000100322308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322308");
		П000100322408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322408");
		П000100322508 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322508");
		П000100322608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322608");
		П000100322708 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322708");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322008",
			П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100324008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
		П000100320003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320003");
		П000100320004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320004");
		П000100320005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320005");
		П000100320006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320006");
		П000100320007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100320008",
			П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
		П000100331107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331108",
			П000100331107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
		П000100331205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331205");
		П000100331207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331208",
			П000100331205 + П000100331207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
		П000100331305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331305");
		П000100331307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331308",
			П000100331305 + П000100331307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
		П000100331403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331403");
		П000100331404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331404");
		П000100331405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331405");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331408",
			П000100331403 + П000100331404 + П000100331405);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
		П000100331603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331603");
		П000100331604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331604");
		П000100331605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331605");
		П000100331606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331606");
		П000100331607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331608",
			П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			П100100331003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331003" + ИндексВИмениОбласти);
			П100100331004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331004" + ИндексВИмениОбласти);
			П100100331005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331005" + ИндексВИмениОбласти);
			П100100331006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331006" + ИндексВИмениОбласти);
			П100100331007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100331008" + ИндексВИмениОбласти,
				П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100331008_" + ИндексСтр) Цикл
				
				П100100331003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331003_" + ИндексСтр);
				П100100331004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331004_" + ИндексСтр);
				П100100331005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331005_" + ИндексСтр);
				П100100331006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331006_" + ИндексСтр);
				П100100331007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100331008_" + ИндексСтр,
					П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
		П000100331403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331403");
		П000100331503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331503");
		П000100331603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331003",
			П000100331403 + П000100331503 + П000100331603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
		П000100331404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331404");
		П000100331504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331504");
		П000100331604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331004",
			П000100331404 + П000100331504 + П000100331604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
		П000100331205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331205");
		П000100331305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331305");
		П000100331405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331405");
		П000100331505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331505");
		П000100331605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331005",
			П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
		
		П000100331606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331006",
			П000100331606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
		П000100331107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331107");
		П000100331207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331207");
		П000100331307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331307");
		П000100331507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331507");
		П000100331607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331007",
			П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
		П000100331108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331108");
		П000100331208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331208");
		П000100331308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331308");
		П000100331408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331408");
		П000100331608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331608");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331008",
			П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
		П000100332107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332108",
			П000100332107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
		П000100332205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332205");
		П000100332207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332208",
			П000100332205 + П000100332207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
		П000100332305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332305");
		П000100332307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332308",
			П000100332305 + П000100332307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
		П000100332403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332403");
		П000100332404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332404");
		П000100332405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332405");
		П000100332407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332407");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332408",
			П000100332403 + П000100332404 + П000100332405 + П000100332407);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
		П000100332503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332503");
		П000100332504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332504");
		П000100332505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332505");
		П000100332507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332507");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332508",
			П000100332503 + П000100332504 + П000100332505 + П000100332507);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
		П000100332603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332603");
		П000100332604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332604");
		П000100332605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332605");
		П000100332606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332606");
		П000100332607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332608",
			П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
		П000100332707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332708",
			П000100332707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100334008, ОбластьИмя) > 0 Тогда
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			П100100334003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334003" + ИндексВИмениОбласти);
			П100100334004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334004" + ИндексВИмениОбласти);
			П100100334005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334005" + ИндексВИмениОбласти);
			П100100334006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334006" + ИндексВИмениОбласти);
			П100100334007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100334008" + ИндексВИмениОбласти,
				П100100334003 + П100100334004 + П100100334005 + П100100334006 + П100100334007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100334008_" + ИндексСтр) Цикл
				П100100334003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334003_" + ИндексСтр);
				П100100334004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334004_" + ИндексСтр);
				П100100334005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334005_" + ИндексСтр);
				П100100334006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334006_" + ИндексСтр);
				П100100334007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100334007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100334008_" + ИндексСтр,
					П100100334003 + П100100334004 + П100100334005 + П100100334006 + П100100334007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
		П000100332403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332403");
		П000100332503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332503");
		П000100332603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332003",
			П000100332403 + П000100332503 + П000100332603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
		П000100332404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332404");
		П000100332504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332504");
		П000100332604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332004",
			П000100332404 + П000100332504 + П000100332604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
		П000100332205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332205");
		П000100332305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332305");
		П000100332405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332405");
		П000100332505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332505");
		П000100332605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332005",
			П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
		П000100332606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332006",
			П000100332606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
		П000100332107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332107");
		П000100332207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332207");
		П000100332307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332307");
		П000100332407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332407");
		П000100332507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332507");
		П000100332607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332607");
		П000100332707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332007",
			П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
		П000100332108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332108");
		П000100332208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332208");
		П000100332308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332308");
		П000100332408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332408");
		П000100332508 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332508");
		П000100332608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332608");
		П000100332708 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332708");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332008",
			П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100334008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
		П000100334006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100334006");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100334007",
			-П000100334006);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
		П000100330003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330003");
		П000100330004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330004");
		П000100330005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330005");
		П000100330006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330006");
		П000100330007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100330008",
			П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица2(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОИК");
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
		П000100340106 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340106");
		П000100340103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340103");
		П000100340104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340104");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100340105",
			П000100340106 - П000100340103 - П000100340104);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
		П000100341103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100341104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100341105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341106",
			П000100341103 + П000100341104 + П000100341105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
		П000100342103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		П000100342104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		П000100342105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342106",
			П000100342103 + П000100342104 + П000100342105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
		П000100340103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340103");
		П000100341103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100342103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350103",
			П000100340103 + П000100341103 + П000100342103);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
		П000100340104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340104");
		П000100341104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100342104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350104",
			П000100340104 + П000100341104 + П000100342104);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
		П000100340105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340105");
		П000100341105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		П000100342105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350105",
			П000100340105 + П000100341105 + П000100342105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
		П000100350103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350103");
		П000100350104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350104");
		П000100350105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350106",
			П000100350103 + П000100350104 + П000100350105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340206, ОбластьИмя) > 0 Тогда
		П000100340203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340203");
		П000100340204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340204");
		П000100340205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100340206",
			П000100340203 + П000100340204 + П000100340205);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341206, ОбластьИмя) > 0 Тогда
		П000100341203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341203");
		П000100341204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341204");
		П000100341205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341206",
			П000100341203 + П000100341204 + П000100341205);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342206, ОбластьИмя) > 0 Тогда
		П000100342203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342203");
		П000100342204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342204");
		П000100342205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342206",
			П000100342203 + П000100342204 + П000100342205);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350203, ОбластьИмя) > 0 Тогда
		П000100340203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340203");
		П000100341203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341203");
		П000100342203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342203");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350203",
			П000100340203 + П000100341203 + П000100342203);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350204, ОбластьИмя) > 0 Тогда
		П000100340204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340204");
		П000100341204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341204");
		П000100342204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342204");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350204",
			П000100340204 + П000100341204 + П000100342204);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350205, ОбластьИмя) > 0 Тогда
		П000100340205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340205");
		П000100341205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341205");
		П000100342205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350205",
			П000100340205 + П000100341205 + П000100342205);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350206, ОбластьИмя) > 0 Тогда
		П000100350203 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350203");
		П000100350204 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350204");
		П000100350205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350206",
			П000100350203 + П000100350204 + П000100350205);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100341003 = П000100341003 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341203");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341003",
			П000100341003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100341004 = П000100341004 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341204");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341004",
			П000100341004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		П000100341005 = П000100341005 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341005",
			П000100341005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		П000100342003 = П000100342003 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342203");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342003",
			П000100342003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		П000100342004 = П000100342004 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342204");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342004",
			П000100342004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		П000100342005 = П000100342005 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342205");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342005",
			П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
		П000100340006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340006");
		П000100340003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340003");
		П000100340004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340004");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100340005",
			П000100340006 - П000100340003 - П000100340004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341003");
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341004");
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341006",
			П000100341003 + П000100341004 + П000100341005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342003");
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342004");
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342006",
			П000100342003 + П000100342004 + П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
		П000100340003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340003");
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341003");
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342003");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350003",
			П000100340003 + П000100341003 + П000100342003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
		П000100340004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340004");
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341004");
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342004");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350004",
			П000100340004 + П000100341004 + П000100342004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
		П000100340005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340005");
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341005");
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350005",
			П000100340005 + П000100341005 + П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
		П000100350003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350003");
		П000100350004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350004");
		П000100350005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350006",
			П000100350003 + П000100350004 + П000100350005);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица3(Форма, ОбластьИмя)
	
	РазмещениеДанныхРасчетАктивов = МестоРазмещенияДанных(Форма, "РасчетАктивов");
	РазмещениеДанныхОИК = МестоРазмещенияДанных(Форма, "ОИК");
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360003",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300004"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360004",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360005",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300006"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОДДС(Форма, ОбластьИмя)
	
	Инициатор = Лев(ОбластьИмя, 13);
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОДДС");
	
	Графы = СтрРазделить("03,04", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004110" + Графа], Инициатор) > 0 Тогда
			Строка4111 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004111" + Графа);
			Строка4112 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004112" + Графа);
			Строка4113 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004113" + Графа);
			Строка4119 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004119" + Графа);
			
			ИтогМСЧ4110 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004110" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004110" + Графа,
				Строка4111 + Строка4112 + Строка4113 + ИтогМСЧ4110 + Строка4119);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004120" + Графа], Инициатор) > 0 Тогда
			Строка4121 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004121" + Графа);
			Строка4122 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004122" + Графа);
			Строка4123 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004123" + Графа);
			Строка4124 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004124" + Графа);
			Строка4129 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004129" + Графа);
			
			ИтогМСЧ4120 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004120" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004120" + Графа,
				Строка4121 + Строка4122 + Строка4123 + Строка4124 + ИтогМСЧ4120 + Строка4129);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004100" + Графа], Инициатор) > 0 Тогда
			Строка4110 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004110" + Графа);
			Строка4120 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004120" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004100" + Графа,
				Строка4110 + Строка4120);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004210" + Графа], Инициатор) > 0 Тогда
			
			Строка4211 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004211" + Графа);
			Строка4212 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004212" + Графа);
			Строка4213 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004213" + Графа);
			Строка4214 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004214" + Графа);
			Строка4219 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004219" + Графа);
			
			ИтогМСЧ4210 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004210" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004210" + Графа,
				Строка4211 + Строка4212 + Строка4213 + Строка4214 + ИтогМСЧ4210 + Строка4219);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004220" + Графа], Инициатор) > 0 Тогда
			Строка4221 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004221" + Графа);
			Строка4222 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004222" + Графа);
			Строка4223 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004223" + Графа);
			Строка4224 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004224" + Графа);
			Строка4229 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004229" + Графа);
			
			ИтогМСЧ4220 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004220" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004220" + Графа,
				Строка4221 + Строка4222 + Строка4223 + Строка4224 + ИтогМСЧ4220 + Строка4229);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004200" + Графа], Инициатор) > 0 Тогда
			Строка4210 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004210" + Графа);
			Строка4220 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004220" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004200" + Графа,
				Строка4210 + Строка4220);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004310" + Графа], Инициатор) > 0 Тогда
			Строка4311 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004311" + Графа);
			Строка4312 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004312" + Графа);
			Строка4313 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004313" + Графа);
			Строка4314 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004314" + Графа);
			Строка4319 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004319" + Графа);
			
			ИтогМСЧ4310 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004310" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004310" + Графа,
				Строка4311 + Строка4312 + Строка4313 + Строка4314 + ИтогМСЧ4310 + Строка4319);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004320" + Графа], Инициатор) > 0 Тогда
			Строка4321 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004321" + Графа);
			Строка4322 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004322" + Графа);
			Строка4323 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004323" + Графа);
			Строка4329 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004329" + Графа);
			
			ИтогМСЧ4320 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004320" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004320" + Графа,
				Строка4321 + Строка4322 + Строка4323 + ИтогМСЧ4320 + Строка4329);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004300" + Графа], Инициатор) > 0 Тогда
			Строка4310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004310" + Графа);
			Строка4320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004320" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004300" + Графа,
				Строка4310 + Строка4320);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004400" + Графа], Инициатор) > 0 Тогда
			Строка4100 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004100" + Графа);
			Строка4200 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004200" + Графа);
			Строка4300 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004300" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004400" + Графа,
				Строка4100 + Строка4200 + Строка4300);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004500" + Графа], Инициатор) > 0 Тогда
			Строка4400 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004400" + Графа);
			Строка4450 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004450" + Графа);
			Строка4490 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004490" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004500" + Графа,
				Строка4400 + Строка4450 + Строка4490);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОЦИС(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОЦИС");
	
	Графы = СтрРазделить("04,05", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006200" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6210 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006210" + Графа);
			Строка6215 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006215" + Графа);
			Строка6220 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006220" + Графа);
			Строка6230 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006230" + Графа);
			Строка6240 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006240" + Графа);
			Строка6250 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006250" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006200" + Графа,
				Строка6210 + Строка6215 + Строка6220 + Строка6230 + Строка6240 + Строка6250);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006310" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6311 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006311" + Графа);
			Строка6312 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006312" + Графа);
			Строка6313 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006313" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006310" + Графа,
				Строка6311 + Строка6312 + Строка6313);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006320" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6321 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006321" + Графа);
			Строка6322 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006322" + Графа);
			Строка6323 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006323" + Графа);
			Строка6324 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006324" + Графа);
			Строка6325 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006325" + Графа);
			Строка6326 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006326" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006320" + Графа,
				Строка6321 + Строка6322 + Строка6323 + Строка6324 + Строка6325 + Строка6326);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006300" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6310 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006310" + Графа);
			Строка6320 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006320" + Графа);
			Строка6330 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006330" + Графа);
			Строка6350 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006350" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006300" + Графа,
				Строка6310 + Строка6320 + Строка6330 + Строка6350);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006400" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6100 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006100" + Графа);
			Строка6200 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006200" + Графа);
			Строка6300 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006300" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006400" + Графа,
				Строка6100 + Строка6200 + Строка6300);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_РасчетАктивов(Форма, ОбластьИмя)
	
	РазмещениеДанныхБаланс = МестоРазмещенияДанных(Форма, "Баланс");
	РазмещениеДанныхРасчетАктивов = МестоРазмещенияДанных(Форма, "РасчетАктивов");
	
	Графы = СтрРазделить("04,05,06", ",", Ложь);
	
	Рассчитывать1530 = Новый Структура;
	Рассчитывать1530.Вставить("Графа04", (Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)) >= 2022);
	Рассчитывать1530.Вставить("Графа05", (Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1) >= 2022);
	Рассчитывать1530.Вставить("Графа06", (Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2) >= 2022);
	
	Для Каждого Графа Из Графы Цикл
		// Активы.
		СтрокиАктивов = СтрРазделить("1110,1120,1130,1140,1150,1160,1170,1180,1190,
			|1210,1220,1240,1250,1260", ",", Ложь);
		
		Для Каждого КодСтроки ИЗ СтрокиАктивов Цикл
			КодСтроки = СокрЛП(КодСтроки);
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000110" + КодСтроки + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000110" + КодСтроки + Графа,
					ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100" + КодСтроки + Графа));
			КонецЕсли;
		КонецЦикла;
		
		// Перенос значений строки 1230 с учетом исключения счета 75.01.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001101230" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001101230" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П0001001230" + Графа)
				- Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа" + Графа]);
		КонецЕсли;
		
		// ИТОГО активы.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001101000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001101000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101110" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101120" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101130" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101140" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101150" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101160" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101170" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101180" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101190" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101210" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101220" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101230" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101240" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101250" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101260" + Графа));
		КонецЕсли;
		
		// Пассивы.
		СтрокиПассивов = СтрРазделить("1410,1420,1430,1450,
			|1510,1520,1540,1550", ",", Ложь);
		
		Для Каждого КодСтроки ИЗ СтрокиПассивов Цикл
			КодСтроки = СокрЛП(КодСтроки);
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000110" + КодСтроки + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000110" + КодСтроки + Графа,
					ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100" + КодСтроки + Графа));
			КонецЕсли;
		КонецЦикла;
		
		// Перенос значений строки 1530 с учетом исключения счетов 98.02 и 86.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001101530" + Графа], ОбластьИмя) > 0 Тогда
			Если Рассчитывать1530["Графа" + Графа] Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001101530" + Графа,
					ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П0001001530" + Графа)
					- Форма.СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530["Графа" + Графа]);
			КонецЕсли;
		КонецЕсли;
		
		// ИТОГО пассивы.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001102000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001102000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101410" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101420" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101430" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101450" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101510" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101520" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101530" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101540" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101550" + Графа));
		КонецЕсли;
		
		// Стоимость чистых активов.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001103000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001103000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101000" + Графа)
				- ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001102000" + Графа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Корректировка(Форма, ОбластьИмя, ВключенныеСтроки)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Корректировка");
	
	Графы = СтрРазделить("03,04,05", ",", Ложь);
	
	ПараметрыСуммирования = Новый Структура;
	ПараметрыСуммирования.Вставить("Форма", Форма);
	ПараметрыСуммирования.Вставить("РазмещениеДанных", РазмещениеДанных);
	
	Для Каждого Графа Из Графы Цикл
		// Прошлый год.
		ИмяПоказателя = "П0001201100" + Графа;
		СуммируемыеСтроки = "П0001201110,П0001201120,П0001201130,П0001201140,П0001201150,П0001201160,П0001201170,П0001201180,П0001201190";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001201200" + Графа;
		СуммируемыеСтроки = "П0001201210,П0001201220,П0001201230,П0001201240,П0001201250,П0001201260";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001201600" + Графа;
		СуммируемыеСтроки = "П0001201100,П0001201200";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001201300" + Графа;
		СуммируемыеСтроки = "П0001201310,П0001201320,П0001201340,П0001201350,П0001201360,П0001201370";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001211300" + Графа;
		СуммируемыеСтроки = "П0001211310,П0001211320,П0001211350,П0001211360,П0001211370";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
			
		ИмяПоказателя = "П0001201400" + Графа;
		СуммируемыеСтроки = "П0001201410,П0001201420,П0001201430,П0001201450";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001201500" + Графа;
		СуммируемыеСтроки = "П0001201510,П0001201520,П0001201530,П0001201540,П0001201550";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001201700" + Графа;
		СуммируемыеСтроки = "П0001201300,П0001211300,П0001201400,П0001201500";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		// Год предшествующий прошлому.
		ИмяПоказателя = "П0001221100" + Графа;
		СуммируемыеСтроки = "П0001221110,П0001221120,П0001221130,П0001221140,П0001221150,П0001221160,П0001221170,П0001221180,П0001221190";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221200" + Графа;
		СуммируемыеСтроки = "П0001221210,П0001221220,П0001221230,П0001221240,П0001221250,П0001221260";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221600" + Графа;
		СуммируемыеСтроки = "П0001221100,П0001221200";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221300" + Графа;
		СуммируемыеСтроки = "П0001221310,П0001221320,П0001221340,П0001221350,П0001221360,П0001221370";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001231300" + Графа;
		СуммируемыеСтроки = "П0001231310,П0001231320,П0001231350,П0001231360,П0001231370";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221400" + Графа;
		СуммируемыеСтроки = "П0001221410,П0001221420,П0001221430,П0001221450";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221500" + Графа;
		СуммируемыеСтроки = "П0001221510,П0001221520,П0001221530,П0001221540,П0001221550";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
		ИмяПоказателя = "П0001221700" + Графа;
		СуммируемыеСтроки = "П0001221300,П0001231300,П0001221400,П0001221500";
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателя], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя,
				СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаСтрокКорректировки(ПараметрыСуммирования, СуммируемыеСтроки, Графа, ВключенныеСтроки)
	
	Форма = ПараметрыСуммирования.Форма;
	РазмещениеДанных = ПараметрыСуммирования.РазмещениеДанных;
	
	СуммаСтрок = 0;
	
	НомераСтрок = СтрРазделить(СуммируемыеСтроки, ",", Ложь);
	
	Для Каждого НомерСтроки Из НомераСтрок Цикл
		Если Лев(НомерСтроки, 7) = "П000121" Тогда
			ИмяСтроки = "ПрошлыйГод" + Сред(НомерСтроки, 8, 4) + "НКО";
		ИначеЕсли Лев(НомерСтроки, 7) = "П000123" Тогда
			ИмяСтроки = "ГодПредшествующийПрошлому" + Сред(НомерСтроки, 8, 4) + "НКО";
		Иначе
			ИмяСтроки = СтрЗаменить(НомерСтроки, "П000120", "ПрошлыйГод");
			ИмяСтроки = СтрЗаменить(ИмяСтроки, "П000122", "ГодПредшествующийПрошлому");
		КонецЕсли;
		
		Если Графа <> "04" ИЛИ НЕ ВключенныеСтроки.Свойство(ИмяСтроки) ИЛИ ВключенныеСтроки[ИмяСтроки] Тогда
			ЗначениеПоказателя = ПоказательОтчета(Форма, РазмещениеДанных, НомерСтроки + Графа);
			СуммаСтрок = СуммаСтрок + ЗначениеПоказателя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СуммаСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения3(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения3");
	
	Графы = СтрРазделить("04,05,06,07,08,09,10,11,12", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005300" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5301 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005301" + Графа);
			Строка5305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005305" + Графа);
			
			РасчетСтроки5300 = Строка5301 + Строка5305;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005300" + Графа, РасчетСтроки5300);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(	Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005310" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5311 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005311" + Графа);
			Строка5315 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005315" + Графа);
			
			РасчетСтроки5310 = Строка5311 + Строка5315;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005310" + Графа, РасчетСтроки5310);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения4(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения4");
	
	НомераСтрок = СтрРазделить("5400,5420,5401,5421,5402,5422,5403,5423,5404,5424,5405,5425,5406,5426,5407,5427", ",");
	
	Для Каждого НомерСтроки Из НомераСтрок Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000100" + НомерСтроки + "21"], ОбластьИмя) > 0 Тогда
			
			Графа04 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100" + НомерСтроки + "04");
			Графа05 = -ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100" + НомерСтроки + "05"); // вычитаемый
			
			РасчетГрафы21 = Графа04 - Графа05;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100" + НомерСтроки + "21", РасчетГрафы21);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000100" + НомерСтроки + "22"], ОбластьИмя) > 0 Тогда
			
			Графа11 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100" + НомерСтроки + "11");
			Графа12 = -ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100" + НомерСтроки + "12"); // вычитаемый
			
			РасчетГрафы22 = Графа11 - Графа12;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100" + НомерСтроки + "22", РасчетГрафы22);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Многострочная часть.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
		КонечныйНомер = 1;
		Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100540004_" + СтрЧГ0(КонечныйНомер + 1)) Цикл
			КонечныйНомер = КонечныйНомер + 1;
		КонецЦикла;
		
		Для Инд = 1 По КонечныйНомер Цикл
			Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, "П100100540004_" + СтрЧГ0(Инд), "5400", "04", "05", "21");
			Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, "П100100540011_" + СтрЧГ0(Инд), "5400", "11", "12", "22");
			
			Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, "П100100542004_" + СтрЧГ0(Инд), "5420", "04", "05", "21");
			Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, "П100100542011_" + СтрЧГ0(Инд), "5420", "11", "12", "22");
		КонецЦикла;
		
	Иначе
		Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, ОбластьИмя, "5400", "04", "05", "21");
		Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, ОбластьИмя, "5400", "11", "12", "22");
		
		Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, ОбластьИмя, "5420", "04", "05", "21");
		Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных, ОбластьИмя, "5420", "11", "12", "22");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения4_ПокМСЧ(Форма, РазмещениеДанных,
	МодифицированнаяОбласть, НомерСтроки, Графа1, Графа2, ГрафаРезультата)
	
	СоставляющиеИмени = СтрРазделить(МодифицированнаяОбласть, "_");
	ИмяБезПостфикса = СоставляющиеИмени[0];
	Постфикс = "";
	Если СоставляющиеИмени.Количество() > 1 Тогда
		Постфикс = "_" + СоставляющиеИмени[1];
	КонецЕсли;
	
	ИмяПоказателяРезультата = "П100100" + НомерСтроки + ГрафаРезультата;
	
	Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяПоказателяРезультата], ИмяБезПостфикса) > 0 Тогда
		Графа1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100" + НомерСтроки + Графа1 + Постфикс);
		Графа2 = -ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100" + НомерСтроки + Графа2 + Постфикс); // вычитаемый
		
		РасчетГрафыИтога = Графа1 - Графа2;
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100" + НомерСтроки + ГрафаРезультата + Постфикс, РасчетГрафыИтога);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения5(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения5");
	
	Графы = СтрРазделить("04,05,06,07,08,09,10,12,13,21,22", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005500" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5501 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005501" + Графа);
			Строка5510 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005511" + Графа);
			
			РасчетСтроки5500 = Строка5501 + Строка5510;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005500" + Графа, РасчетСтроки5500);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005520" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5521 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005521" + Графа);
			Строка5530 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005531" + Графа);
			
			РасчетСтроки5520 = Строка5521 + Строка5530;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005520" + Графа, РасчетСтроки5520);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Графы = СтрРазделить("04,05,06,07,08,10,21,22", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005550" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5551 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005551" + Графа);
			Строка5560 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005560" + Графа);
			
			РасчетСтроки5550 = Строка5551 + Строка5560;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005550" + Графа, РасчетСтроки5550);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005570" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5571 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005571" + Графа);
			Строка5580 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005580" + Графа);
			
			РасчетСтроки5570 = Строка5571 + Строка5580;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005570" + Графа, РасчетСтроки5570);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения6(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения6");
	
	Для Графа = 3 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010056600" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5610 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056100" + Графа);
			Строка5620 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056200" + Графа);
			Строка5630 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056300" + Графа);
			Строка5640 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056400" + Графа);
			Строка5650 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056500" + Графа);
			
			РасчетСтроки5660 = Строка5610 + Строка5620 + Строка5630 + Строка5640 + Строка5650;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010056600" + Графа, РасчетСтроки5660);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010056000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5660 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056600" + Графа);
			Строка5665 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056650" + Графа);
			Строка5670 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056700" + Графа);
			Строка5680 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056800" + Графа);
			
			РасчетСтроки5600 = Строка5660 + Строка5665 + Строка5670 + Строка5680;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010056000" + Графа, РасчетСтроки5600);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения7(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения7");
	
	// Многострочная часть.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
		КонечныйНомер = 1;
		Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100570001_" + СтрЧГ0(КонечныйНомер + 1)) Цикл
			КонечныйНомер = КонечныйНомер + 1;
		КонецЦикла;
		
		Для Инд = 1 По КонечныйНомер Цикл
			Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, "П100100570003_" + СтрЧГ0(Инд));
		КонецЦикла;
		
	Иначе
		Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, ИмяОбластиМСЧ)
	
	НомПозиции = СтрНайти(ИмяОбластиМСЧ, "_");
	Постфикс = "_" + СтрЧГ0(Сред(ИмяОбластиМСЧ, НомПозиции + 1));
	ОбластьИмя = Лев(ИмяОбластиМСЧ, НомПозиции - 1);
	
	Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100570007, ОбластьИмя) > 0 Тогда
		Строка5700Гр3 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570003" + Постфикс);
		Строка5700Гр4 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570004" + Постфикс);
		Строка5700Гр5 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570005" + Постфикс);
		Строка5700Гр6 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570006" + Постфикс);
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100570007" + Постфикс,
			Строка5700Гр3 + Строка5700Гр4 + Строка5700Гр5 + Строка5700Гр6);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения9(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения9");
	
	Графы = СтрРазделить("03,04", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005900" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5901 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005901" + Графа);
			Строка5905 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005905" + Графа);
			
			РасчетСтроки5900 = Строка5901 + Строка5905;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005900" + Графа, РасчетСтроки5900);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МестоРазмещенияДанных(Форма, ИмяРаздела)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма["СтруктураДанных" + ИмяРаздела];
	КонецЕсли;
	
	Возврат РазмещениеДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, ИмяПоказателя)
	
	Перем Индекс, ИндексСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	ИтогПоГрафеМСЧ = 0;
	
	Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, ИмяПоказателя + "_" + ИндексСтр) Цикл
		ИтогПоГрафеМСЧ = ИтогПоГрафеМСЧ + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя + "_" + ИндексСтр);
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
	КонецЦикла;
	
	Возврат ИтогПоГрафеМСЧ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		ЗначениеПоказателя = РазмещениеДанных.Области[ИмяПоказателя].Значение;
	Иначе
		ЗначениеПоказателя = РазмещениеДанных[ИмяПоказателя];
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаСуществует(Форма, РазмещениеДанных, ИмяПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РезультатПроверки = (РазмещениеДанных.Области.Найти(ИмяПоказателя) <> Неопределено);
	Иначе
		РезультатПроверки = РазмещениеДанных.Свойство(ИмяПоказателя);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя);
	
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РазмещениеДанных.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	Иначе
		РазмещениеДанных[ИмяПоказателя] = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеОтчета

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект,
		КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                   = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных());
	СписокСохранения.Вставить("ВерсияКонфигурации", РегламентированнаяОтчетность.НазваниеПрограммы()
		+ " " + РегламентированнаяОтчетность.ВерсияПрограммы());
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		Если НЕ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
		   И СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
			КодНалоговогоОргана = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.КодНО;
		Иначе
			КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = КодНалоговогоОргана;
		
	КонецЕсли;
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Вставить("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СохрСоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СоставДополнительныхСтрок Цикл
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			СтруктураСоставов = Новый Структура;
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				ПолучитьДеревоНастроекСоставаДопСтрок(Элемент.Ключ);
				Если Элемент.Ключ = "Баланс" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекБаланс);
				ИначеЕсли Элемент.Ключ = "ОФР" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекОФР);
				ИначеЕсли Элемент.Ключ = "Корректировка" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекКорректировка);
				ИначеЕсли Элемент.Ключ = "Пояснения7" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекПояснения7);
				КонецЕсли;
				
			КонецЦикла;
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, СтруктураСоставов);
			
		Иначе
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СохрСоставДополнительныхСтрок);
	
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				Для Каждого Колонка Из Колонки Цикл
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					СтрТаблЗнач = ТаблЗнач.Добавить();
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
					КонецЦикла;
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("ОтчетностьВРосстат", ОтчетностьВРосстат);
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки",       ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения",     ИмяФайлаАудиторскогоЗаключения);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	СписокСохранения.Вставить("ОборотыСчета75_01", СтруктураРеквизитовФормы.ОборотыСчета75_01);
	СписокСохранения.Вставить("ВычетИзРасчетаАктивов1530", СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530);
	
	СписокСохранения.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	СписокСохранения.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	
	Если Элементы.ПанельПроверкиАктуальностиДанных.Видимость Тогда
		СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение",
			Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
	КонецЕсли;
	
	СписокСохранения.Вставить("ПримечанияОДДС", СтруктураРеквизитовФормы.ПримечанияОДДС);
	
	СписокСохранения.Вставить("ЭтоКрупнейшийНалогоплательщик", СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	// Запись документа, хранящего данные отчета
	Попытка
		НачатьТранзакцию();
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
		
		СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
		
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка");
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение");
		
		СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьПечатныеМакетыОтчетов(ДокументСДанными)
	
	ЗаписиРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
	ЗаписиРегистраСведений.Отбор.РегламентированныйОтчет.Установить(ДокументСДанными);
	ЗаписиРегистраСведений.Прочитать();
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого ЗаписьРегистраСведений Из ЗаписиРегистраСведений Цикл
		Если СтрНайти(ЗаписьРегистраСведений.ВидДополнительногоФайла, "БланкОтчета.") = 1 Тогда
			УдаляемыеЗаписи.Добавить(ЗаписьРегистраСведений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗаписьРегистраСведений Из УдаляемыеЗаписи Цикл
		ЗаписиРегистраСведений.Удалить(ЗаписьРегистраСведений);
	КонецЦикла;
	
	Для Каждого ПечатныйБланк Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ЗаписьРегистраСведений = ЗаписиРегистраСведений.Добавить();
		ЗаписьРегистраСведений.РегламентированныйОтчет = ДокументСДанными;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "БланкОтчета." + ПечатныйБланк.Представление;
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(ПечатныйБланк.Значение[0]));
		ЗаписьРегистраСведений.ИмяФайла = ПечатныйБланк.Представление + ".mxl";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ДокументСДанными.Дата;
		
	КонецЦикла;
	
	ЗаписиРегистраСведений.Записать();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла)
	
	Если СтруктураДопФайла.СведенияИзменены = Истина
	 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		Если ЗначениеЗаполнено(СтруктураДопФайла.ХранилищеФайла) Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.ХранилищеФайла));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.Размер;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		СтруктураДопФайла.СведенияИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ПоказателиОтчета;
	
	// Обновление сведений об организации в случае копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	УстановитьПризнакиПримененияУСН();
	
	СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
	ВосстановитьДопРеквизитыФормы(СохраненныеДанные);
	
	ВосстановитьСохраненныеНастройкиДереваРазделов();
	
	ВосстановитьВариантыАвтозаполненияПоказателей(СохраненныеДанные);
	
	СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СохраненныеДанные.Свойство("ОтчетностьВРосстат", ОтчетностьВРосстат);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	ВосстановитьСтруктуруМСЧ(СохраненныеДанные);
	ВосстановитьСоставДополнительныхСтрок(СохраненныеДанные);
	
	ВосстановитьРасшифровкуПоказателей(СохраненныеДанные);
	
	ЗаполнитьВычитаемыеЗначенияРасчетаАктивов(СтруктураРеквизитовФормы.ОборотыСчета75_01,
		СохраненныеДанные.ОборотыСчета75_01);
	ЗаполнитьВычитаемыеЗначенияРасчетаАктивов(СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530,
		СохраненныеДанные.ВычетИзРасчетаАктивов1530);
	
	СохраненныеДанные.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если НЕ ПоказателиОтчета.ПолеТабличногоДокументаПояснения1.Свойство("ОргДиректор") Тогда
		ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета);
	КонецЕсли;
	
	ВосстановитьДополнительныеФайлы(СохраненныеДанные);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	ВосстановитьЗначенияПоказателей(ИмяТекРаздела, ПоказателиОтчета);
	
	ЗаполнитьПустыеСтруктурыДанных(Ложь);
	
	СохраненныеДанные.Свойство("ПроверкаАктуализацииДанныхПредупреждение",
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
	Если ЗначениеЗаполнено(Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок) Тогда
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ПеренумероватьСтрокиРасшифровкиБаланса();
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДопРеквизитыФормы(СохраненныеДанные)
	
	Авторасчет = Неопределено;
	СохраненныеДанные.Свойство("Авторасчет", Авторасчет);
	Если Авторасчет <> Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки",
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СохраненныеДанные.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СохраненныеДанные.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	Если СтруктураРеквизитовФормы.мАдресДляВыгрузки = Неопределено Тогда
		АдресОрганизации = ОбъектОтчета(ИмяФормы).АдресОрганизацииПоУмолчанию(СтруктураРеквизитовФормы.Организация);
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = АдресОрганизации.Адрес;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СохраненныеДанные.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СохраненныеДанные.Свойство("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	
	ПримечанияОДДС = Неопределено;
	Если СохраненныеДанные.Свойство("ПримечанияОДДС", ПримечанияОДДС) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитовФормы.ПримечанияОДДС, ПримечанияОДДС);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик = СохраненныеДанные.ЭтоКрупнейшийНалогоплательщик;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтруктуруМСЧ(СохраненныеДанные)
	
	СохраненнаяСтруктураМногострочныхЧастей = Неопределено;
	СохраненныеДанные.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			ЭлементСтруктуры.Значение.Состав = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭлементСтруктуры.Значение.Состав);
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента =
				СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
		КонецЦикла;
		
		КонвертироватьСтруктуруМногострочныхЧастей(СохраненнаяСтруктураМногострочныхЧастей);
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьСтруктуруМногострочныхЧастей(СохрСтруктураМногострочныхЧастей)
	
	Для Каждого ЭлемИницСтруктурыМногострочныхЧастей Из СтруктураМногострочныхЧастей Цикл
		Если НЕ СохрСтруктураМногострочныхЧастей.Свойство(ЭлемИницСтруктурыМногострочныхЧастей.Ключ) Тогда
			СохрСтруктураМногострочныхЧастей.Вставить(
				ЭлемИницСтруктурыМногострочныхЧастей.Ключ,
				ЭлемИницСтруктурыМногострочныхЧастей.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСоставДополнительныхСтрок(СохраненныеДанные)
	
	СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СохраненныеДанные.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		// Используются настройки по умолчанию.
	ИначеЕсли Число(СоставДополнительныхСтрок.Версия) > Число (СохраненныйСоставДополнительныхСтрок.Версия) Тогда
		Если СохраненныйСоставДополнительныхСтрок.Модифицированность Тогда
			ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок);
		Иначе
			// Используются настройки по умолчанию новой версии.
		КонецЕсли;
	Иначе
		СоставДополнительныхСтрок.Очистить();
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				СтруктураСоставов = Новый Структура;
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					Если Элемент.Ключ = "Баланс" Тогда
						ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
						
					ИначеЕсли Элемент.Ключ = "ОФР" Тогда
						ДеревоНастроекОФР = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
						ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
						
					ИначеЕсли Элемент.Ключ = "Корректировка" Тогда
						ДеревоНастроекКорректировка = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекКорректировка, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
						
					ИначеЕсли Элемент.Ключ = "Пояснения7" Тогда
						ДеревоНастроекПояснения7 = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекПояснения7, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекПояснения7);
						
					КонецЕсли;
					
					СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
					
				КонецЦикла;
				
				СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
				
			Иначе
				СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок)
	
	// Обновление настроек Бухгалтерского баланса.
	СохраненныйСоставДопСтрокБаланса = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс", СохраненныйСоставДопСтрокБаланса) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопстрокБаланса.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекБаланс.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		
	КонецЕсли;
	
	// Обновление настроек Отчета о финансовых результатах.
	СохраненныйСоставДопСтрокОФР = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ОФР", СохраненныйСоставДопСтрокОФР) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокОФР.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекОФР.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
		ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		
	КонецЕсли;
	
	// Обновление настроек корректировок.
	СохраненныйСоставДопСтрокКорректировка = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Корректировка", СохраненныйСоставДопСтрокКорректировка) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("Корректировка");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокКорректировка.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекКорректировка.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекКорректировка, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
		
	КонецЕсли;
	
	// Обновление настроек пояснений 7.
	СохраненныйСоставДопСтрокПояснения7 = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Пояснения7", СохраненныйСоставДопСтрокПояснения7) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокПояснения7.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекПояснения7.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекПояснения7, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекПояснения7);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД()
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Очистить();
	
	МассивДопСтрок = ДопСтрокиОФРПриПримененииЕНВД();
	
	Для Каждого ДопСтрока Из МассивДопСтрок Цикл
		Если ВключенВОтчет(ДеревоНастроекОФР, ДопСтрока) Тогда
			СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Добавить(ДопСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВариантыАвтозаполненияПоказателей(СохраненныеДанные)
	
	ДанныеВариантовАвтоЗаполнения = Неопределено;
	Если СохраненныеДанные.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		Если ДанныеВариантовАвтоЗаполнения <> Неопределено Тогда
			Для Каждого СохраненныеВарианты Из ДанныеВариантовАвтоЗаполнения Цикл
				ИмяРаздела = СохраненныеВарианты.Ключ;
				ВариантыЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения;
				ВосстановитьВариантыАвтозаполненияПоказателейРаздела(ВариантыЗаполнения, СохраненныеВарианты);
				
				Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					// Требуется изменение варианта заполнения для авторасчитываемых показателей.
					Для Каждого Вариант Из ВариантыЗаполнения Цикл
						Если Вариант.ВариантЗаполнения = 4 Тогда
							Вариант.ВариантЗаполнения = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияПоказателей(ИмяТекРаздела, ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	ИнициализироватьСтруктуруДанныхРазделов();
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если Раздел.ИмяСтраницы <> "ДополнительныеФайлы" Тогда
			Для Каждого Показатель Из ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы] Цикл
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					Показатель.Ключ, Показатель.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод показателей в текущий раздел на форме.
	Если ИмяТекРаздела <> "ДополнительныеФайлы" Тогда
		ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
		
		// Создание строк многострочных частей.
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			ОбластьПоказателя = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если ОбластьПоказателя <> Неопределено И ОбластьПоказателя.СодержитЗначение = Истина Тогда
				ОбластьПоказателя.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРасшифровкуПоказателей(СохраненныеДанные)
	
	ТаблицаРасшифровки = Неопределено;
	СохраненныеДанные.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать( , "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации,
				|НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДополнительныеФайлы(СохраненныеДанные)
	
	СписокДополнительныхФайлов = Неопределено;
	Если СохраненныеДанные.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов)
	   И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки   = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	КонецЕсли;
	
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка", ИмяФайлаПояснительнойЗаписки);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение", ИмяФайлаАудиторскогоЗаключения);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла, ИмяДопФайлаПредыдущейВерсии)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			СтруктураДопФайла.Вставить("СведенияИзменены", Ложь);
			РегламентированнаяОтчетность.ПоместитьВКэш(ЗаписьРегистраСведений.СодержимоеФайла.Получить(),
				УникальныйИдентификатор, СтруктураДопФайла.ХранилищеФайла);
			СтруктураДопФайла.Вставить("ИмяФайла",       ЗаписьРегистраСведений.ИмяФайла);
			СтруктураДопФайла.Вставить("Размер",         ЗаписьРегистраСведений.Размер);
			СтруктураДопФайла.Вставить("ДатаДобавления", ЗаписьРегистраСведений.ДатаДобавления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиДереваРазделов()
	
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	
	ИсходноеДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	// Исключение всех разделов, чтобы видны были только разделы, включенные в сохраненый отчет.
	ИсходноеДеревоСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	
	СтрокиИсходногоДерева = ИсходноеДеревоСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	Для Каждого СтрокаДерева Из СтрокиИсходногоДерева Цикл
		СтрокаДерева.ПоказатьСтраницу = 0;
	КонецЦикла;
	
	ИсходноеДеревоСтраниц.Колонки.Удалить("ПреобразоватьВМассив");
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ДеревоНастройкиСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	СтрокиНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	
	Для Каждого СтрокаНастройкиСтраницы Из СтрокиНастройкиСтраниц Цикл
		ИмяРаздела = СтрокаНастройкиСтраницы.ИмяСтраницы;
		СтрокаДереваРазделов = ИсходноеДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
		
		Если СтрокаДереваРазделов <> Неопределено Тогда
			ИсключаемыеСвойства = "Представление";
			ЗаполнитьЗначенияСвойств(СтрокаДереваРазделов, СтрокаНастройкиСтраницы, , ИсключаемыеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел "Бухгалтерский баланс" обязательный и всегда включается в отчет.
	СтрокаРазделаБаланс = ИсходноеДеревоСтраниц.Строки.Найти("Баланс", "ИмяСтраницы");
	Если СтрокаРазделаБаланс <> Неопределено Тогда
		СтрокаРазделаБаланс.ПоказатьСтраницу = 1;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ИсходноеДеревоСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетности

&НаКлиенте
Функция СформироватьНастройкиФормыВыбораПечати()
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 3);
	ЭтоГодоваяОтчетность = (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12);
	
	ПечатьPDF417Разрешена = НЕ СтруктураРеквизитовФормы.ИП
		И (ЭтоГодоваяОтчетность ИЛИ ЭтоЛиквидационнаяОтчетность);
	
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ПечатьPDF417Разрешена);
	НастройкиФормыВыбораПечати.Вставить("ВключатьКодыСтрок", Истина);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, "ПоказатьСДвухмернымШтрихкодомPDF417");
			
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			Если Результат.ВключатьКодыСтрок Тогда
				ПечататьИзФормы("ПоказатьБланк");
			Иначе
				ПечататьИзФормы("ПоказатьБланк");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидПечати = ДополнительныеПараметры.ВидПечати;
	
	Печать(ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ТекстСостояния = СтрШаблон(НСтр("ru = '%1. Формируется печатная форма...';
									|en = '%1. Формируется печатная форма...'"), Заголовок);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

// Формирует набор печатных бланков в СтруктураРеквизитовФормы.мПечатныеФормы
//
// Параметры:
//   ВидПечати - Строка - определяет вариант и режим печати.
//
&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
				|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		ЭтоЗакладкаДополнительныхФайлов = (СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы");
		Если ЭтоЗакладкаДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтотОбъект["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
		ЭтотОбъект, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(ПараметрыПечати)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Сокрытие областей, не предназначенных для вывода на печать.
	Если ПараметрыПечати.ИмяСтраницы = "Баланс" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОФР" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОФР();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОИК" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОИК();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОДДС" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОДДС();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОЦИС" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОЦИС();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Пояснения7" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюПояснения7();
	КонецЕсли;
	
	ВывестиНаПечатьЛистОбщая(ПараметрыПечати);
	
	// Восстанавление отображения скрытых областей.
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
	Если ПараметрыПечати.ИмяСтраницы = "ОФР" Тогда
		УстановитьВидимостьПолейПоПБУ18();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "РасчетАктивов" Тогда
		УстановитьВидимостьПолейРасчетАктивов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	СтрокаОтраженияСчета46 = "1230";
	СтрокаОтраженияСчета96 = "1230";
	
	СтрокаОтраженияСчета76_АВ = "1520";
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102, ДопСтрока11103");
	МногострочнаяЧасть = "П1001001110";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1110"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П1001001120";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1120"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001130";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1130"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001140";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1140"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока11501, ДопСтрока11502, ДопСтрока11503, ДопСтрока11504, ДопСтрока11505,
		|ДопСтрока11506, ДопСтрока11507, ДопСтрока11508, ДопСтрока11509, ДопСтрока11510");
	МногострочнаяЧасть = "П1001001150";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1150"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11601, ДопСтрока11602, ДопСтрока11603, ДопСтрока11604");
	МногострочнаяЧасть = "П1001001160";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1160"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701");
	МногострочнаяЧасть = "П1001001170";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1170"]);
	КонецЕсли;
	
	// Строка 1180
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001180";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1180"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1180"]);
	КонецЕсли;
	
	// Строка 1190
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11901, ДопСтрока11902, ДопСтрока11903");
	МногострочнаяЧасть = "П1001001190";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1190"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1190"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105,
		|ДопСтрока12106, " + ?(СтрокаОтраженияСчета46 = "1210", "ДопСтрока12107", "") + ", ДопСтрока12108, ДопСтрока12109, ДопСтрока12110,
		|ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П1001001210";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1210"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205,
		|ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П1001001220";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1220"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305,
		|ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310"
		+ ?(СтрокаОтраженияСчета46 = "1230", ", ДопСтрока12311", "")
		+ ?(СтрокаОтраженияСчета96 = "1230", ", ДопСтрока12312", "")
		+ ", ДопСтрока12313");
	МногострочнаяЧасть = "П1001001230";
	
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1230"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405,
		|ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П1001001240";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1240"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505,
		|ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510,
		|ДопСтрока12511, ДопСтрока12512, ДопСтрока12513");
	МногострочнаяЧасть = "П1001001250";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1250"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, " + ?(СтрокаОтраженияСчета76_АВ = "1260", "ДопСтрока12605,", "")
		+ "ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610"
		+ ?(СтрокаОтраженияСчета96 = "1260", ", ДопСтрока12610", "")
		+ ?(СтрокаОтраженияСчета46 = "1260", ", ДопСтрока12611", ""));
	МногострочнаяЧасть = "П1001001260";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1260"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001310";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1310"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001320";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1320"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П1001001340";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1340"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1350"]);
	КонецЕсли;
	
	// Строка 1360
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001360";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1360"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001370";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1370"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П1001001410";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1410"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001420";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1420"]);
	КонецЕсли;
	
	// Строка 1430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001430";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1430"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1450"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105,
		|ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110,
		|ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П1001001510";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1510"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205,
		|ДопСтрока15206, ДопСтрока15207, ДопСтрока15208, ДопСтрока15209");
	МногострочнаяЧасть = "П1001001520";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1520"]);
	КонецЕсли;
	
	// Строка 1530
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001530";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1530"]);
	КонецЕсли;
	
	// Строка 1540
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001540";
	Если НЕ ТабличныйДокумент.Области.Найти(МногострочнаяЧасть + "01_1") = Неопределено Тогда
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1540"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1540"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001550";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1550"]);
	КонецЕсли;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюОФР()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	ДеревоНастройкиСостава = ДеревоНастроекОФР;
	
	Если НЕ ИспользуютсяМакетыЕНВД() Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002100";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002200";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002300";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "П1001002310";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "П1001002320";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "П1001002330";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2330"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405,
		|ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410,
		|ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415,
		|ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420,
		|ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424, ДопСтрока23425,
		|ДопСтрока23426, ДопСтрока23427");
	МногострочнаяЧасть = "П1001002340";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505,
		|ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510,
		|ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515,
		|ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520,
		|ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525,
		|ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530,
		|ДопСтрока23521, ДопСтрока23532, ДопСтрока23533, ДопСтрока23534");
	МногострочнаяЧасть = "П1001002350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002421";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002430";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	Если ЭтоОФР2019(СтруктураОтчета) Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602, ДопСтрока24603");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602");
	КонецЕсли;
	МногострочнаяЧасть = "П1001002460";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	// Строка 2520
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002520";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2520"]);
	КонецЕсли;
	
	// Строка 2530
	Если НЕ ЭтоОФР2019(СтруктураОтчета) Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002530";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2530"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2530"]);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюОИК()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	СкрываемыеДопСтроки = СтрРазделить("ДопСтрока3210,ДопСтрока3240,ДопСтрока3310,ДопСтрока3340", ",");
	
	Для Каждого МногострочнаяЧасть Из СкрываемыеДопСтроки Цикл
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области[МногострочнаяЧасть]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюОДДС()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	СкрываемыеДопСтроки = СтрРазделить("ДопСтрока4110,ДопСтрока4120,ДопСтрока4210,ДопСтрока4220,ДопСтрока4310,ДопСтрока4320", ",");
	
	Для Каждого МногострочнаяЧасть Из СкрываемыеДопСтроки Цикл
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области[МногострочнаяЧасть]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюОЦИС()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	СкрываемыеДопСтроки = СтрРазделить("ДопСтрока6250,ДопСтрока6350", ",");
	
	Для Каждого МногострочнаяЧасть Из СкрываемыеДопСтроки Цикл
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		Если НЕ ОтображатьВТомЧисле(Неопределено, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле_" + МногострочнаяЧасть]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области[МногострочнаяЧасть]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюПояснения7()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
	ДеревоНастройкиСостава = ДеревоНастроекПояснения7;
	
	// Строка 5700
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока5701, ДопСтрока5702");
	МногострочнаяЧасть = "ДопСтрока5700";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле5700"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока5700"]);
	КонецЕсли;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)
	
	// Обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции

&НаСервере
Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		
		Если НЕ СтруктураМногострочныхЧастей.Свойство(МногострочнаяЧасть) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[МногострочнаяЧасть].Состав;
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаМногострочногоРаздела[0] Цикл
			ОбластьЭлементаМСЧ = ТабличныйДокумент.Области[Колонка.Ключ + "_1"];
			Если ОбластьЭлементаМСЧ.СодержитЗначение И ЗначениеЗаполнено(ОбластьЭлементаМСЧ.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистОбщая(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");
	
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);
	
	КартаСтраницРаздела = КартаЛистовРаздела();
	
	НомЛиста = 0;
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста);
		Для Каждого Эл Из ПечатныеЛисты Цикл
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Эл.Значение, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартаЛистовРаздела()
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТабличныйДокумент.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяРаздела;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа
	Перем Ориентация;         // ориентация страницы
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		ОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
			ПечатнаяФорма, ОбластьОграничители, Ложь);
		
		Если ОбластьОграничителиУмещаетсяНаСтраницу Тогда
			ОграничительНаращивания = 69;
			Пока ОбластьОграничителиУмещаетсяНаСтраницу Цикл
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
					ПечатнаяФорма, ВыводимыеОбласти, Ложь);
				// Некоторые драйверы принтеров некорректно взаимодействуют с проверкой вывода.
				Если ОграничительНаращивания <= 0 Тогда
					ВыводимыеОбластиУмещаютсяНаСтраницу = Ложь;
				КонецЕсли;
				
				Если ВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
					ОграничительНаращивания = ОграничительНаращивания - 1;
					
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	КонецЕсли;
	
	ПечатнаяФорма.Область().ЦветФона = Новый Цвет;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаОтчетности

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // обход ошибки в платформе
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
							|en = 'Отчет ""%1"" не сохранен.'"), ТекстЗаголовка));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в тысячах"".';
					|en = 'Перед выгрузкой необходимо установить единицу измерения ""в тысячах"".'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0"".';
					|en = 'Перед выгрузкой необходимо установить точность ""0"".'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
		
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
		
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиВыгрузки

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредупредитьОВыгрузкеТолькоЛиквидационнойОтчетности()
	
	ТектПредупреждения = НСтр("ru = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде.
		|Если вы хотите выгрузить ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса';
		|en = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде.
		|Если вы хотите выгрузить ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса'");
	ПоказатьПредупреждение(, ТектПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтправкеТолькоЛиквидационнойОтчетности()
	
	ТектПредупреждения = НСтр("ru = 'Отправка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде.
		|Если вы хотите отправить ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса';
		|en = 'Отправка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде.
		|Если вы хотите отправить ликвидационную отчетность, выберите соответствующий вариант в разделе бухгалтерского баланса'");
	ПоказатьПредупреждение(, ТектПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененияхВФорме

&НаКлиенте
Процедура ОткрытьУведомление(ОткрытьПринудительно = Ложь) Экспорт
	
	ИмяСохраняемогоПараметра = "РегламентированныйОтчетБухОтчетность_ФормаОтчета2019Кв1_Изменения";
	ИдентификаторИнформирования = "86ea4765-99bd-4b76-8870-2d0dd308ab02";
	
	СохраненныйВыборПользователя = ЗагрузитьСохраненныйПараметр(ИмяСохраняемогоПараметра);
	
	ЗначениеНеПоказывать = ИдентификаторИнформирования + "_НеПоказывать";
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	ПоказатьОписаниеИзменений = (ТекущаяДата >= '2020-01-01' И ТекущаяДата <= '2020-03-31')
	                          И (СохраненныйВыборПользователя <> ЗначениеНеПоказывать);
	
	Если ОткрытьПринудительно ИЛИ ПоказатьОписаниеИзменений Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимОткрытия", "ПоВыбору");
		ПараметрыФормы.Вставить("ИмяСохраняемогоПараметра", ИмяСохраняемогоПараметра);
		ПараметрыФормы.Вставить("ЗначениеНеПоказывать", ЗначениеНеПоказывать);
		ПараметрыФормы.Вставить("ТекстИнформации", ИнформацияДляПользователя());
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзмененияхВФормеОтчета",
			ПараметрыФормы, ЭтотОбъект, ИмяСохраняемогоПараметра, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСохраненныйПараметр(ИмяСохраняемогоПараметра)
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзмененияхВФормеОтчета",
		ИмяСохраняемогоПараметра);
	
КонецФункции

&НаСервере
Функция ИнформацияДляПользователя()
	
	Возврат ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаОтчета2019Кв1_Изменения").ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область ВыборАудитораИзСправочника

&НаКлиенте
Процедура ОбработатьВыборАудитора(ВыбранныйКонтрагент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйКонтрагент <> Неопределено Тогда
		РеквизитыАудитора = РеквизитыАудитора(ВыбранныйКонтрагент);
		ТабличныйДокумент.Области.НаимАудитора.Значение = РеквизитыАудитора.Наименование;
		ТабличныйДокумент.Области.АудиторИНН.Значение   = РеквизитыАудитора.ИНН;
		ТабличныйДокумент.Области.АудиторОГРН.Значение  = РеквизитыАудитора.РегистрационныйНомер;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыАудитора(ВыбранныйКонтрагент)
	
	ВсеРеквизитыАудитора = Новый Структура("Наименование, НаименованиеПолное, ИНН, РегистрационныйНомер",
		"", "", "", "");
	ЗаполнитьЗначенияСвойств(ВсеРеквизитыАудитора, ВыбранныйКонтрагент);
	
	РеквизитыАудитора = Новый Структура("Наименование, ИНН, РегистрационныйНомер",
		"", "", "");
	ЗаполнитьЗначенияСвойств(РеквизитыАудитора, ВсеРеквизитыАудитора);
	
	Если ЗначениеЗаполнено(ВсеРеквизитыАудитора.НаименованиеПолное) Тогда
		РеквизитыАудитора.Наименование = ВсеРеквизитыАудитора.НаименованиеПолное;
	КонецЕсли;
	
	Возврат РеквизитыАудитора;
	
КонецФункции

#КонецОбласти

#Область НастройкаСоставаДопСтрок

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	ИмяФормыНастроек = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	                 + "НастройкаРасшифровкиОтдельныхПоказателей2019";
	ФормаНастроек = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормыНастройкиСтрок());
	
	КонецЗаголовка = "";
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		КонецЗаголовка = "бухгалтерского баланса";
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		КонецЗаголовка = "отчета о финансовых результатах";
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения7" Тогда
		КонецЗаголовка = "пояснений 7 «Оценочные обязательства»";
	КонецЕсли;
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей " + КонецЗаголовка;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Корректировка" Тогда
		ФормаНастроек.Заголовок = "Настройка состава строк корректировки отчетного периода";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСтрокиЗавершение", ЭтотОбъект);
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыНастройкиСтрок()
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДеревоНастроек",
		СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроек" + СтруктураРеквизитовФормы.НаимТекущегоРаздела]);
	
	ДинамическиеНаименования = Новый Соответствие;
	ДинамическиеНаименования.Вставить("%Наименование_ДопСтрока11509", Наименование_ДопСтроки11509());
	
	ПараметрыФормы.Вставить("УсловияДоступности", УсловияДоступностиДопСтрок());
	ПараметрыФормы.Вставить("ДинамическиеНаименования", ДинамическиеНаименования);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция УсловияДоступностиДопСтрок()
	
	УсловияДоступностиДопСтрок = Новый Массив;
	
	КонецОтчетногоПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецОтчетногоПериода_1 = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецОтчетногоПериода_2 = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	Если РазделяютсяАвансыНаКонецПериода(КонецОтчетногоПериода)
	 ИЛИ РазделяютсяАвансыНаКонецПериода(КонецОтчетногоПериода_1)
	 ИЛИ РазделяютсяАвансыНаКонецПериода(КонецОтчетногоПериода_2) Тогда
		УсловияДоступностиДопСтрок.Добавить("#АвансыПоВидамАктивов");
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ПрименяетсяФСБУ25 Тогда
		УсловияДоступностиДопСтрок.Добавить("#НеПрименяетсяФСБУ25");
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО" Тогда
		УсловияДоступностиДопСтрок.Добавить("#БалансНКО");
	Иначе
		УсловияДоступностиДопСтрок.Добавить("#БалансТиповой");
	КонецЕсли;
	
	Если Год(КонецОтчетногоПериода) < 2024 Тогда
		УсловияДоступностиДопСтрок.Добавить("#По2023");
	Иначе
		УсловияДоступностиДопСтрок.Добавить("#С2024");
	КонецЕсли;
	
	Возврат УсловияДоступностиДопСтрок;
	
КонецФункции

&НаКлиенте
Процедура НастроитьСтрокиЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Корректировка" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки)
	
	Если РезультатНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		ЗагрузитьНовыеНастройкиСоставаДопСтрок(
			ДеревоНастроекБаланс, СтруктураРеквизитовФормы.НаимТекущегоРаздела, РезультатНастройки);
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		ЗагрузитьНовыеНастройкиСоставаДопСтрок(
			ДеревоНастроекОФР, СтруктураРеквизитовФормы.НаимТекущегоРаздела, РезультатНастройки);
		ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Корректировка" Тогда
		ЗагрузитьНовыеНастройкиСоставаДопСтрок(
			ДеревоНастроекКорректировка, СтруктураРеквизитовФормы.НаимТекущегоРаздела, РезультатНастройки);
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения7" Тогда
		ЗагрузитьНовыеНастройкиСоставаДопСтрок(
			ДеревоНастроекПояснения7, СтруктураРеквизитовФормы.НаимТекущегоРаздела, РезультатНастройки);
		
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		ПеренумероватьСтрокиРасшифровкиОФР();
		
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения7" Тогда
		ПеренумероватьСтрокиРасшифровкиПояснений7();
		
		ПолучитьСтруктуруМногострочныхЧастей();
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(
			СтруктураМногострочныхЧастей.ДопСтрока5700, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНовыеНастройкиСоставаДопСтрок(ИсходныеНастройки, ИмяРаздела, РезультатНастройки)
	
	ИмяАдресаНастроек = "АдресВоВремХранилищеДеревоНастроек" + ИмяРаздела;
	
	ИсходныеНастройки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы[ИмяАдресаНастроек]).Скопировать();
	НовыеНастройки = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
	
	НовыеНастройки.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	СтрокиНовыхНастроек = НовыеНастройки.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	НовыеНастройки.Колонки.Удалить("ПреобразоватьВМассив");
	
	Для Каждого СтрокаНастройки Из СтрокиНовыхНастроек Цикл
		Если ЗначениеЗаполнено(СтрокаНастройки.ИмяОбластиДопСтроки) Тогда
			ИсходнаяСтрока = ИсходныеНастройки.Строки.Найти(СтрокаНастройки.ИмяОбластиДопСтроки, "ИмяОбластиДопСтроки", Истина);
		ИначеЕсли ЗначениеЗаполнено(СтрокаНастройки.Код) Тогда
			ИсходнаяСтрока = ИсходныеНастройки.Строки.Найти(СтрокаНастройки.Код, "Код", Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ИсходнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходнаяСтрока, СтрокаНастройки);
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(
		ИсходныеНастройки, УникальныйИдентификатор, СтруктураРеквизитовФормы[ИмяАдресаНастроек]);
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыОрганизации

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПереченьСведений = "ИННЮЛ, НаимЮЛПол, ОКПО, ОКОПФ, ОКФС, ФормСобств, ОргПравФорм, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, ПереченьСведений);
		
	Если СтруктураРеквизитовФормы.ИП = Истина Тогда
		НаименованиеОрганизации = СокрЛП(Сведения.ФИО);
	Иначе
		НаименованиеОрганизации = Сведения.НаимЮЛПол;
	КонецЕсли;
	
	РазделыСРеквизитами = РазделыСРеквизитами();
	
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргИНН",         Сведения.ИННЮЛ);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргНазв",        НаименованиеОрганизации);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКПО",     Сведения.ОКПО);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргФорма",       Сведения.ОргПравФорм);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКОПФ",    Сведения.ОКОПФ);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКФС",     Сведения.ОКФС);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргФормаСобств", Сведения.ФормСобств);
	
	ЗаполнитьОбластьВРазделе("РасчетАктивов", "ОргНазв", НаименованиеОрганизации);
	
	ЗаполнитьСведенияОбОКВЭД();
	
	АдресОрганизации = АдресОрганизацииПоУмолчанию(Организация);
	СтруктураРеквизитовФормы.мАдресДляВыгрузки = АдресОрганизации.Адрес;
	ЗаполнитьОбластьВРазделе("Баланс", "ОргПочтАдрес", АдресОрганизации.Представление);
	
	ЗаполнитьПоляПодписей();
	
	ЗаполнитьКодНалоговогоОрганаПолучателя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОКВЭД()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, "ОКВЭД, ОКВЭД2, ОснВидДеят, ОснВидДеят2");
	
	СтруктураРеквизитовФормы.ОКВЭД       = СведенияОбОрганизации.ОКВЭД;
	СтруктураРеквизитовФормы.ОснВидДеят  = СведенияОбОрганизации.ОснВидДеят;
	СтруктураРеквизитовФормы.ОКВЭД2      = СведенияОбОрганизации.ОКВЭД2;
	СтруктураРеквизитовФормы.ОснВидДеят2 = СведенияОбОрганизации.ОснВидДеят2;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2015 Тогда
		ДействующийОКВЭД = СведенияОбОрганизации.ОКВЭД;
		ОснВидДеят       = СведенияОбОрганизации.ОснВидДеят;
	Иначе
		ДействующийОКВЭД = СведенияОбОрганизации.ОКВЭД2;
		ОснВидДеят       = СведенияОбОрганизации.ОснВидДеят2;
	КонецЕсли;
	
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами(), "ОргКодОКВЭД", ДействующийОКВЭД);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами(), "ОргОтрасль", ОснВидДеят);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПодписей()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	ПереченьСведений = "ФИОРук, ФИОБух, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, ПереченьСведений);
	
	Если СтруктураРеквизитовФормы.ИП = Истина Тогда
		ОргДиректор = Сведения.ФИО;
	Иначе
		ОргДиректор = Сведения.ФИОРук;
	КонецЕсли;
	
	ЗаполнитьОбластьВРазделах(ВсеРазделы(), "ОргДиректор", ОргДиректор);
	ЗаполнитьОбластьВРазделах(ВсеРазделы(), "ОргБухгалтер", Сведения.ФИОБух);
	
КонецПроцедуры

&НаСервере
Функция РазделыСРеквизитами()
	
	ИменаРазделов = Новый Массив;
	
	ИменаРазделов.Добавить("Баланс");
	ИменаРазделов.Добавить("ОФР");
	ИменаРазделов.Добавить("ОДДС");
	ИменаРазделов.Добавить("ОЦИС");
	ИменаРазделов.Добавить("ОИК");
	
	Возврат ИменаРазделов;
	
КонецФункции

&НаСервере
Функция ВсеРазделы()
	
	ИменаРазделов = Новый Массив;
	
	ИменаРазделов.Добавить("Баланс");
	ИменаРазделов.Добавить("ОФР");
	ИменаРазделов.Добавить("ОДДС");
	ИменаРазделов.Добавить("ОЦИС");
	ИменаРазделов.Добавить("ОИК");
	
	ИменаРазделов.Добавить("РасчетАктивов");
	ИменаРазделов.Добавить("Корректировка");
	
	ИменаРазделов.Добавить("Пояснения1");
	ИменаРазделов.Добавить("Пояснения2");
	ИменаРазделов.Добавить("Пояснения3");
	ИменаРазделов.Добавить("Пояснения4");
	ИменаРазделов.Добавить("Пояснения5");
	ИменаРазделов.Добавить("Пояснения6");
	ИменаРазделов.Добавить("Пояснения7");
	ИменаРазделов.Добавить("Пояснения8");
	ИменаРазделов.Добавить("Пояснения9");
	
	Возврат ИменаРазделов;
	
КонецФункции

// Заполняет значение в указанных разделах отчета
//
// Параметры:
//   Разделы - Массив из Строка - имена разделов отчета
//   ИмяОбласти - Строка
//   ЗначениеЗаполнения - Произвольный
//
&НаСервере
Процедура ЗаполнитьОбластьВРазделах(Разделы, ИмяОбласти, ЗначениеЗаполнения)
	
	Для Каждого ИмяРаздела Из Разделы Цикл
		ЗаполнитьОбластьВРазделе(ИмяРаздела, ИмяОбласти, ЗначениеЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластьВРазделе(ИмяРаздела, ИмяОбласти, ЗначениеЗаполнения)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		РазмещениеДанных = ТабличныйДокумент;
		ОбластьПоказателя = РазмещениеДанных.Области.Найти(ИмяОбласти);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Значение = ЗначениеЗаполнения;
		КонецЕсли;
		
	Иначе
		РазмещениеДанных = ЭтотОбъект["СтруктураДанных" + ИмяРаздела];
		Если РазмещениеДанных.Свойство(ИмяОбласти) Тогда
			РазмещениеДанных[ИмяОбласти] = ЗначениеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеПоясненийВPDF

&НаСервере
Функция СформироватьФайлPDFВХранилище()
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		ЭтоЗакладкаПояснения = (Лев(СтрокаУровня1.ИмяСтраницы, 9) = "Пояснения");
		Если НЕ ЭтоЗакладкаПояснения Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          "ВидПечати");
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтотОбъект["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ИсходныйТабличныйДокумент);
	
	ТабличныйДокументДляСохранения = Новый ТабличныйДокумент;
	
	Для Каждого ТабличныйДокументПояснений Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		УдалитьНенужноеИзПечатнойФормы(ТабличныйДокументПояснений.Значение);
		ТабличныйДокументДляСохранения.Вывести(ТабличныйДокументПояснений.Значение);
	КонецЦикла;
	
	АдресВХранилище = Неопределено;
	
	// Удаление лишних пустых строк из заполненного документа.
	ВсегоСтрок = ТабличныйДокументДляСохранения.ВысотаТаблицы;
	
	Если ВсегоСтрок > 0 Тогда
		ИспользованиеСтрок = Новый Массив(ВсегоСтрок);
		
		Для Каждого Область Из ТабличныйДокументДляСохранения.Области Цикл
			Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;
			
			Для Инд = Область.Верх По Область.Низ Цикл
				ИспользованиеСтрок[Инд-1] = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Инд = 1 По ВсегоСтрок Цикл
			Если ИспользованиеСтрок[ВсегоСтрок - Инд] = Неопределено Тогда
				НомерСтроки = ВсегоСтрок - Инд + 1;
				УдаляемаяОбласть = ТабличныйДокументДляСохранения.Область(НомерСтроки, , НомерСтроки, );
				ТабличныйДокументДляСохранения.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокументДляСохранения.Область().ЦветФона = Новый Цвет();
		ТабличныйДокументДляСохранения.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокументДляСохранения.АвтоМасштаб = Истина;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ТабличныйДокументДляСохранения.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
		
		СохраняемыйФайл = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(СохраняемыйФайл, УникальныйИдентификатор);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область АудиторскоеЗаключение

&НаСервере
Процедура БольшеНеПоказыватьИнформационнуюПанель() Экспорт
	
	ДокументооборотСКО.БольшеНеПоказыватьИнформационнуюПанель(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаАдресовОрганизации

&НаКлиенте
Процедура ВыбратьАдресОрганизации(Область)
	
	Адреса = АдресаОрганизацииДляВыбора();
	
	ТаблицаВыбора.Очистить();
	
	НовСтр = ТаблицаВыбора.Добавить();
	НовСтр.Код = "Пустое значение";
	НовСтр.Название = "Адрес не указывается";
	
	Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Фактический адрес";
		НовСтр.Название = Адреса.АдрФакт;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Юридический адрес";
		НовСтр.Название = Адреса.АдрЮР;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Почтовый адрес";
		НовСтр.Название = Адреса.АдрПочт;
	КонецЕсли;
		
	Если ТаблицаВыбора.Количество() = 1 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'В контактной информации не указаны адреса организации.';
									|en = 'В контактной информации не указаны адреса организации.'"));
		Возврат;
	КонецЕсли;
	
	ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
	ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
	ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
	ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
	
	ДополнительныеПараметры = Новый Структура("Область", Область);
	ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция АдресаОрганизацииДляВыбора()
	
	ВидыАдресов = "АдрФакт_XML, АдрЮР_XML, АдрПочт_XML";
	АдресаXML = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, ВидыАдресов);
	
	Адреса = Новый Структура;
	Адреса.Вставить("АдрФакт", ПредставлениеАдресаИзXML(АдресаXML.АдрФакт_XML));
	Адреса.Вставить("АдрЮР",   ПредставлениеАдресаИзXML(АдресаXML.АдрЮР_XML));
	Адреса.Вставить("АдрПочт", ПредставлениеАдресаИзXML(АдресаXML.АдрПочт_XML));
	
	Возврат Адреса;
	
КонецФункции

&НаСервере
Функция АдресОрганизацииПоУмолчанию(Организация)
	
	ПредставлениеАдреса = "";
	АдресПоПредставлению = Ложь;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		ВидыАдресов = "АдрМЖ, АдрПрописки";
	Иначе
		ВидыАдресов = "АдрФакт_XML, АдрЮР_XML, АдрПочт_XML";
		АдресПоПредставлению = Истина;
	КонецЕсли;
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , ВидыАдресов);
	
	ИменаВидовАдресов = СтрРазделить(ВидыАдресов, ",");
	Для Каждого ИмяВидаАдреса Из ИменаВидовАдресов Цикл
		ИмяВидаАдреса = СокрЛП(ИмяВидаАдреса);
		
		ПолныйАдрес = Адреса[ИмяВидаАдреса];
		Если АдресПоПредставлению Тогда
			ПредставлениеАдреса = ПредставлениеАдресаИзXML(ПолныйАдрес);
			АдресЗаполнен = ЗначениеЗаполнено(ПредставлениеАдреса);
		Иначе
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
			АдресЗаполнен = ЗначениеЗаполнено(СтрЗаменить(ПредставлениеАдреса, ",", ""));
		КонецЕсли;
		
		Если АдресЗаполнен Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПолныйАдрес, ПредставлениеАдреса);
	
КонецФункции

&НаСервере
Функция ПредставлениеАдресаИзXML(ТекстXML)
	
	ПредставлениеАдреса = "";
	
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		ПостроительDOM = Новый ПостроительDOM;
		
		КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
		
		Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла <> "КонтактнаяИнформация" Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеАдреса = ПолучитьАтрибутКакСтроку(Узел, "Представление");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоРазделам

&НаКлиенте
Процедура ОбработатьРазделыОтчетаПриАктивизацииСтроки()
	
	ИдентификаторРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомерСтраницыРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	ПереключитьРаздел(ИдентификаторРаздела, НомерСтраницыРаздела);
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если ИдетПозиционированиеНаОбластьРаздела Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРаздела = Ячейка.Раздел;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРаздела) Тогда
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	РазделВДеревеАктивныхРазделов = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	Если РазделВДеревеАктивныхРазделов = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Для перехода в раздел ""%1"" включите его отображение';
																	|en = 'Для перехода в раздел ""%1"" включите его отображение'"),
			ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела)));
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
		ИдентификаторАктивногоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Иначе
		ИдентификаторАктивногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если ИдентификаторРаздела <> ИдентификаторАктивногоРаздела Тогда
		ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела);
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
	Если ИдентификаторРаздела <> "ДополнительныеФайлы" Тогда
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НайденнаяОбласть = Неопределено Тогда
			НайденнаяОбласть = ТабличныйДокумент.Область(1, 1);
		КонецЕсли;
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела)
	
	АктивируемыйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	
	Элементы.РазделыОтчета.ТекущаяСтрока = АктивируемыйРаздел.ПолучитьИдентификатор();
	
	ПереключитьРаздел(ИдентификаторРаздела, 0);
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элементы.РазделыОтчета.ТекущаяСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРаздел(ИдентификаторРаздела, НомерСтраницыРаздела)
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Ложь;
	Элементы.ЗаполнитьТекущий.Доступность = Истина;
	
	Если ИдентификаторРаздела = "ДополнительныеФайлы" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ДопФайлы;
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
	Иначе
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИдентификаторРаздела, НомерСтраницыРаздела);
		
	КонецЕсли;
	
	Если ИдентификаторРаздела = "Баланс" Тогда
		ОбработатьПоляНалоговогоОргана();
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если ИдентификаторРаздела = "Баланс"
	 ИЛИ ИдентификаторРаздела = "ОФР" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
		
	ИначеЕсли ИдентификаторРаздела = "ОДДС"
	      ИЛИ ИдентификаторРаздела = "ОИК"
	      ИЛИ ИдентификаторРаздела = "ОЦИС"
	      ИЛИ (СтрЧислоВхождений(ИдентификаторРаздела, "Пояснения") > 0
	        И НЕ ИдентификаторРаздела = "Пояснения6") Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
		
	КонецЕсли;
	
	Если ИдентификаторРаздела = "ОЦИС" Тогда
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
		ТаблВариантыЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИдентификаторРаздела];
		Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
			Для Каждого Элем Из ТаблВариантыЗаполнения[0].ТаблицаВариантовЗаполнения Цикл
				Если Элем.ВариантЗаполнения = 3 Тогда
					Элементы.ЗаполнитьТекущий.Доступность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИдентификаторРаздела = "РасчетАктивов"
	      ИЛИ ИдентификаторРаздела = "Пояснения3"
	      ИЛИ ИдентификаторРаздела = "Пояснения9" Тогда
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КрупнейшийНалогоплательщик

&НаСервере
Процедура ЗаполнитьКодНалоговогоОрганаПолучателя()
	
	Если ТабличныйДокумент.Области.Найти("КодНО") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик = Организация.КрупнейшийНалогоплательщик;
	
	Если СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		РегистрацияВНО = РегистрацияВНалоговыхОрганах(СтруктураРеквизитовФормы.Организация, ДатаПодписи);
		Если ЗначениеЗаполнено(РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО) Тогда
			ТабличныйДокумент.Области.КодНО.Значение = РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО;
			ТабличныйДокумент.Области.КПП.Значение = РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КПП;
		Иначе
			ТабличныйДокумент.Области.КодНО.Значение = РегистрацияВНО.ПоМестуНахождения.КодНО;
			ТабличныйДокумент.Области.КПП.Значение = РегистрацияВНО.ПоМестуНахождения.КПП;
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьПоляНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыбратьКодНалоговогоОрганаПолучателя()
	
	РегистрацияВНО = РегистрацияВНалоговыхОрганах(СтруктураРеквизитовФормы.Организация, ДатаПодписи);
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить(РегистрацияВНО.ПоМестуНахождения,
		СтрШаблон(НСтр("ru = '%1 - по месту нахождения организации';
						|en = '%1 - по месту нахождения организации'"),
			РегистрацияВНО.ПоМестуНахождения.КодНО));
	ПунктыМеню.Добавить(РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика,
		СтрШаблон(НСтр("ru = '%1 - по месту регистрации крупнейшнего налогоплательщика';
						|en = '%1 - по месту регистрации крупнейшнего налогоплательщика'"),
			РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО));
	
	Результат = Ждать ВыбратьИзМенюАсинх(ПунктыМеню);
	
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		ТабличныйДокумент.Области.КодНО.Значение = Результат.Значение.КодНО;
		ТабличныйДокумент.Области.КПП.Значение = Результат.Значение.КПП;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сведения о регистрациях в налоговых органах.
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ДатаПодписи - Дата
// 
// Возвращаемое значение:
//   Структура:
//     * ПоМестуНахождения - Структура - регистрация по месту нахождения организации:
//       ** КодНО - Строка
//       ** КПП - Строка
//     * ПоМестуКрупнейшегоНалоплательщика - Структура - регистрация в качестве крупнейшего налогоплательщика:
//       ** КодНО - Строка
//       ** КПП - Строка
//
&НаСервереБезКонтекста
Функция РегистрацияВНалоговыхОрганах(Организация, ДатаПодписи)
	
	Реквизиты = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи,
		"КодНО, КППЮЛ, КодНОКрупнейший, КППЮЛКрупнейший");
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.КППЮЛКрупнейший) Тогда
		Реквизиты.КППЮЛКрупнейший = КППКрупнейшегоНалогоплательщика(Организация, Реквизиты.КодНОКрупнейший);
	КонецЕсли;
	
	РегистрацияВНО = Новый Структура;
	РегистрацияВНО.Вставить("ПоМестуНахождения",
		Новый Структура("КодНО, КПП", Реквизиты.КодНО, Реквизиты.КППЮЛ));
	РегистрацияВНО.Вставить("ПоМестуКрупнейшегоНалоплательщика",
		Новый Структура("КодНО, КПП", Реквизиты.КодНОКрупнейший, Реквизиты.КППЮЛКрупнейший));
	
	Возврат РегистрацияВНО;
	
КонецФункции

&НаСервере
Процедура ОбработатьПоляНалоговогоОргана()
	
	Если ТабличныйДокумент.Области.Найти("КодНО") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКодНО = ТабличныйДокумент.Области.Найти("КодНО");
	ОбластьКодНОЗаголовок = ТабличныйДокумент.Области.Найти("КодНОЗаголовок");
	ОбластьКПП = ТабличныйДокумент.Области.Найти("КПП");
	ОбластьКППЗаголовок = ТабличныйДокумент.Области.Найти("КППЗаголовок");
	
	Если ОбластьКодНО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		ОбластьКодНОЗаголовок.Текст = "Представляется в налоговый орган (код)";
		СкопироватьОформлениеОбласти("АудиторИНН", "КодНО");
		
		ОбластьКППЗаголовок.Текст = "КПП";
		СкопироватьОформлениеОбласти("АудиторИНН", "КПП");
		
	Иначе
		ОбластьКодНОЗаголовок.Текст= "";
		ОбластьКодНО.Очистить(Истина, Истина, Истина);
		
		ОбластьКППЗаголовок.Текст= "";
		ОбластьКПП.Очистить(Истина, Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьОформлениеОбласти(ИмяИсходнойОбласта, ИмяОформляемойОбласти)
	
	ИсходнаяОбласть = ТабличныйДокумент.Области[ИмяИсходнойОбласта];
	ОформляемаяОбласть = ТабличныйДокумент.Области[ИмяОформляемойОбласти];
	
	ОформляемаяОбласть.ЦветФона = ИсходнаяОбласть.ЦветФона;
	
	ОформляемаяОбласть.Шрифт = ИсходнаяОбласть.Шрифт;
	ОформляемаяОбласть.ГоризонтальноеПоложение = ИсходнаяОбласть.ГоризонтальноеПоложение;
	ОформляемаяОбласть.ВертикальноеПоложение = ИсходнаяОбласть.ВертикальноеПоложение;
	
	ОформляемаяОбласть.ГраницаСверху = ИсходнаяОбласть.ГраницаСверху;
	ОформляемаяОбласть.ГраницаСнизу  = ИсходнаяОбласть.ГраницаСнизу;
	ОформляемаяОбласть.ГраницаСлева  = ИсходнаяОбласть.ГраницаСлева;
	ОформляемаяОбласть.ГраницаСправа = ИсходнаяОбласть.ГраницаСправа;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВведенныйКПП(Организация, КодНО, КПП)
	
	КлючиХранилища = КлючиХранилищаНастроекДанныхФормы();
	
	РеквизитыКН = ХранилищеНастроекДанныхФорм.Загрузить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек);
	Если РеквизитыКН = Неопределено Тогда
		РеквизитыКН = Новый ТаблицаЗначений;
		РеквизитыКН.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		РеквизитыКН.Колонки.Добавить("КодНО", Новый ОписаниеТипов("Строка"));
		РеквизитыКН.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	КлючПоиска = Новый Структура("Организация, КодНО", Организация, КодНО);
	НайденныеРеквизиты = РеквизитыКН.НайтиСтроки(КлючПоиска);
	Если НайденныеРеквизиты.Количество() > 0 Тогда
		СтрокаРеквизитов = НайденныеРеквизиты[0];
	Иначе
		СтрокаРеквизитов = РеквизитыКН.Добавить();
		СтрокаРеквизитов.Организация = Организация;
		СтрокаРеквизитов.КодНО = КодНО;
	КонецЕсли;
	
	СтрокаРеквизитов.КПП = КПП;
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек, РеквизитыКН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КППКрупнейшегоНалогоплательщика(Организация, КодНО)
	
	КПП = "";
	
	КлючиХранилища = КлючиХранилищаНастроекДанныхФормы();
	
	РеквизитыКН = ХранилищеНастроекДанныхФорм.Загрузить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек);
	Если РеквизитыКН <> Неопределено Тогда
		КлючПоиска = Новый Структура("Организация, КодНО", Организация, КодНО);
		НайденныеРеквизиты = РеквизитыКН.НайтиСтроки(КлючПоиска);
		Если НайденныеРеквизиты.Количество() > 0 Тогда
			КПП = НайденныеРеквизиты[0].КПП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючиХранилищаНастроекДанныхФормы()
	
	Ключи = Новый Структура;
	
	Ключи.Вставить("КлючОбъекта", "Отчет.РегламентированныйОтчетБухОтчетность.Форма.ФормаОтчета2019Кв1");
	Ключи.Вставить("КлючНастроек", "РеквизитыКрупнейшегоНалогоплательщика");
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОФР2019(ОписаниеСтруктурыОтчета)
	
	ЭтоОФР2019 = ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД"
	        ИЛИ ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД";
	
	Возврат ЭтоОФР2019;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОФР2020(ОписаниеСтруктурыОтчета)
	
	ЭтоОФР2020 = ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД_2020Кв1"
	        ИЛИ ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД_2020Кв1";
	
	Возврат ЭтоОФР2020;
	
КонецФункции

&НаСервере
Функция МакетОтчета(ИмяРаздела)
	
	ИмяМакетаОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))
	                + "_" + СтруктураОтчета[ИмяРаздела].ИмяМакета;
	МакетОтчета = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаОтчета);
	
	ПараметрыПодготовкиМакета = Новый Структура;
	ПараметрыПодготовкиМакета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыПодготовкиМакета.Вставить("ПримечанияОДДС", СтруктураРеквизитовФормы.ПримечанияОДДС);
	
	ПодготовитьМакетОтчета(МакетОтчета, ИмяРаздела, ПараметрыПодготовкиМакета);
	
	Возврат МакетОтчета;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФайлыДляБанка()
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	НачатьТранзакцию();
	
	СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПодготовкиФайловДляБанка()
	
	ШаблонТекстаПредупреждения = НСтр("ru = 'В информационной базе сохранены печатные формы отчета %1 для передачи в банк в составе отчетности заемщика';
										|en = 'В информационной базе сохранены печатные формы отчета %1 для передачи в банк в составе отчетности заемщика'");
	ТекстПредупреждения = СтрШаблон(ШаблонТекстаПредупреждения, Заголовок);
	
	ПоказатьПредупреждение( , ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция РазделяютсяАвансыНаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияСРазделениемАвансов = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если РегламентированнаяОтчетность.АвансыРазделеныПоВидамАктивов(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияСРазделениемАвансов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияСРазделениемАвансов;
	
КонецФункции

&НаСервере
Функция НазванияПоказателей_Баланс()
	
	НазванияПоказателей = Новый Структура;
	НазванияПоказателей.Вставить("П000101150902", Наименование_ДопСтроки11509());
	
	Возврат НазванияПоказателей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтчетностьЗаГод(ДатаКонцаПериодаОтчета)
	
	Возврат КонецДня(ДатаКонцаПериодаОтчета) = КонецГода(ДатаКонцаПериодаОтчета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтчетностьЗаКварталГод(ДатаКонцаПериодаОтчета)
	
	Возврат Месяц(ДатаКонцаПериодаОтчета) % 3 = 0;
	
КонецФункции

&НаСервере
Функция ПустаяСтруктураДанныхФайла()
	
	СтруктураДанныхФайла = Новый Структура;
	СтруктураДанныхФайла.Вставить("СведенияИзменены", Ложь);
	СтруктураДанныхФайла.Вставить("ХранилищеФайла");
	СтруктураДанныхФайла.Вставить("ИмяФайла");
	СтруктураДанныхФайла.Вставить("Размер");
	СтруктураДанныхФайла.Вставить("ДатаДобавления");
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

&НаСервере
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(Знач КодПоказателя)
	
	ПолучитьТаблицуСоставаПоказателей();
	
	НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоСоставу", КодПоказателя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
	Иначе
		НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоФорме", КодПоказателя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруМногострочныхЧастей()
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция СтруктураОтчета2019Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета);
	
	// Отчет о финансовых результатах.
	СтруктураОтчета = Новый Структура;
	Если ОбъектОтчета(ИмяФормы).ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОФР", СтруктураОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Функция СтруктураОтчета2020Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета);
	
	// Отчет о финансовых результатах.
	СтруктураОтчета = Новый Структура;
	Если ОбъектОтчета(ИмяФормы).ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_ЕНВД_2020Кв1");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_НеЕНВД_2020Кв1");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОФР", СтруктураОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета)
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура;
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета",                            "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "БалансНКО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения",          "БалансНКО");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета",                            "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "Баланс");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения",          "Баланс");
	КонецЕсли;
	
	СтруктураОтчета.Вставить("НазванияПоказателей", НазванияПоказателей_Баланс());
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОИК");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОИК");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураОтчета);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Отчет о целевом использовании средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОЦИС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОЦИС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОЦИС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОЦИС");
	
	СоставНастройкаОтчета.Вставить("ОЦИС", СтруктураОтчета);
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяМакета",                      "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураРаздела);
	
	// Корректировка данных отчетного налогового периода в связи с изменениями учетной политики.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Корректировка");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Корректировка");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Корректировка");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Корректировка");
	СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Корректировка");
	
	СоставНастройкаОтчета.Вставить("Корректировка", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения1");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения1");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения1");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения1");
	
	СоставНастройкаОтчета.Вставить("Пояснения1", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения2");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения2");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения2");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения2");
	
	СоставНастройкаОтчета.Вставить("Пояснения2", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения3");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения3");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения3");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения3");
	
	СоставНастройкаОтчета.Вставить("Пояснения3", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения4");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения4");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения4");
	СтруктураОтчета.Вставить("БлокиМакета", НоваяСтруктураБлоковПояснения4());
	
	СоставНастройкаОтчета.Вставить("Пояснения4", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения5");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения5");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения5");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения5");
	
	СоставНастройкаОтчета.Вставить("Пояснения5", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения6");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения6");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения6");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения6");
	
	СоставНастройкаОтчета.Вставить("Пояснения6", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения7");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения7");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения7");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения7");
	СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Пояснения7");
	
	СоставНастройкаОтчета.Вставить("Пояснения7", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения8");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения8");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения8");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения8");
	
	СоставНастройкаОтчета.Вставить("Пояснения8", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения9");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения9");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения9");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения9");
	
	СоставНастройкаОтчета.Вставить("Пояснения9", СтруктураОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)
	
	Перем Кодификаторы;
	Перем Заголовки;
	
	Если НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация.
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				НачальныйНомер = Кодификатор.Код;
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб") Тогда
					СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок);
				КонецЕсли;
				ПереопределитьПараметрыМСЧ(НачальныйНомер, МаксимальноеКоличествоСтрок);
				
				Если ЗначениеЗаполнено(МаксимальноеКоличествоСтрок) Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрЧГ0(Инд)];
					ОбластьСКодом.Текст = СтрЧГ0(НачальныйНомер + Инд - 1);
				КонецЦикла;
				
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрЧГ0(Инд)];
				ОбластьСКодом.Текст = СтрЧГ0(Кодификаторы.Код + Инд - 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если в описании структуры встречаются поля с датами, то производится их заполнение.
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Если в описании структуры заполнено наименование и номер доп. строк, то производится их заполнение.
	Если СтруктураМногострочнойЧасти.Состав.Количество()>0 Тогда
		Инд = 1;
		Для Каждого СтрокаМЧ Из СтруктураМногострочнойЧасти.Состав Цикл
			Для Каждого Колонка Из СтрокаМЧ Цикл
				Если  ЗначениеЗаполнено(Колонка.Значение) Тогда
					ОбластьОтчета = ТабличныйДокумент.Области[Колонка.Ключ + "_" + СтрЧГ0(Инд)];
					Если ОбластьОтчета.СодержитЗначение Тогда
						ОбластьОтчета.Значение = Колонка.Значение;
					Иначе
						ОбластьОтчета.Текст = Колонка.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьПараметрыМСЧ(НачальныйНомер, МаксимальноеКоличествоСтрок)
	
	Если ЗначениеЗаполнено(МаксимальноеКоличествоСтрок) Тогда
		Если (НачальныйНомер = 5408 ИЛИ НачальныйНомер = 5428)
		   И НЕ ОтображатьСтроки_5407_5427() Тогда
			МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок + 1;
		ИначеЕсли (НачальныйНомер = 5505 ИЛИ НачальныйНомер = 5525)
		   И НЕ ОтображатьСтроки_5503_5523() Тогда
			МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если НачальныйНомер = 5408 И НЕ ОтображатьСтроки_5407_5427() Тогда
		НачальныйНомер = 5407;
	ИначеЕсли НачальныйНомер = 5428 И НЕ ОтображатьСтроки_5407_5427() Тогда
		НачальныйНомер = 5427;
	ИначеЕсли НачальныйНомер = 5505 И НЕ ОтображатьСтроки_5503_5523() Тогда
		НачальныйНомер = 5504;
	ИначеЕсли НачальныйНомер = 5525 И НЕ ОтображатьСтроки_5503_5523() Тогда
		НачальныйНомер = 5524;
	КонецЕсли;
	
	Если НачальныйНомер = 5701 Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
		
		Если ВключенВОтчет(ДеревоНастроекПояснения7, "ДопСтрока5701") Тогда
			НачальныйНомер = НачальныйНомер + 1;
			МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок - 1;
		КонецЕсли;
		
		Если ВключенВОтчет(ДеревоНастроекПояснения7, "ДопСтрока5702") Тогда
			НачальныйНомер = НачальныйНомер + 1;
			МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок - 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	КонецЕсли;
	
	ПоказатьКодЕИ();
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		Если ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = ОбъектОтчета(ИмяФормы).ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	ПолучитьДеревоНастроекСоставаДопСтрок("Корректировка");
	ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
	
	УсловияДоступностиДопСтрок = УсловияДоступностиДопСтрок();
	
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей,
		ДеревоНастроекБаланс, УсловияДоступностиДопСтрок);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей,
		ДеревоНастроекОФР, УсловияДоступностиДопСтрок);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Корректировка.ИмяСекцииНастройкиСоставаПоказателей,
		ДеревоНастроекКорректировка, УсловияДоступностиДопСтрок);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Пояснения7.ИмяСекцииНастройкиСоставаПоказателей,
		ДеревоНастроекПояснения7, УсловияДоступностиДопСтрок);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекКорректировка, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекКорректировка);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекПояснения7, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекПояснения7);
	ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", "ДеревоНастроекБаланс");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ОФР", "ДеревоНастроекОФР");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Корректировка", "ДеревоНастроекКорректировка");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Пояснения7", "ДеревоНастроекПояснения7");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаОтчетная2.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ОФР" Тогда
		//Отчет о финансовых результатах.
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОИК" Тогда
		
		ДатаКонцаПериодаОтчета 	  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаКорректировокПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКорректировокПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ПериодКорректировокПрошлогоГода.Значение   = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		
	ИначеЕсли НаимТекущегоРаздела = "ОДДС" Тогда
		
		//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОЦИС" Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "РасчетАктивов" Тогда
			ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
			ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
			
			СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			// Заголовки таблицы.
			ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			
	КонецЕсли;
	
	Если НаимТекущегоРаздела = "Корректировка" Тогда
		ПоказатьПериодКорректировка();
	КонецЕсли;
	
	// Заголовки для использования в расшфировках ОФР.
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ОписаниеПериода = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			ОписаниеПериода = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			ОписаниеПериода = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЗаголовокДатаАналогичногоПериодаПрошлогоГода =  "За " + ОписаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериодКорректировка()
	
	ТабличныйДокумент.Области.ПериодПрошлогоГода.Текст =
		СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	
	ТабличныйДокумент.Области.ПериодГодаПредшествующегоПрошлому.Текст =
		СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиПоЕдиницеИзмерения(ИмяТекРаздела)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		НазваниеЕдиницыИзмерения = "руб.";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб.";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
	
	Если ИмяТекРаздела = "Пояснения1" Тогда
		ЗаголовокПояснения1 = "Пояснения к бухгалтерскому балансу" + Символы.ПС 
		                    + "и отчету о финансовых результатах" 
		                    + " (" + НазваниеЕдиницыИзмерения + ")";
		
		ТабличныйДокумент.Области.ЗаголовокРаздела.Текст = ЗаголовокПояснения1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела)

	Если ИмяРаздела = "Корректировка" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиКорректировка();
	ИначеЕсли ИмяРаздела = "Пояснения1" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения1();
	ИначеЕсли ИмяРаздела = "Пояснения2" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения2();
	ИначеЕсли ИмяРаздела = "Пояснения3" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения3();
	ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения4();
	ИначеЕсли ИмяРаздела = "Пояснения5" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения5();
	ИначеЕсли ИмяРаздела = "Пояснения6" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения6();
	ИначеЕсли ИмяРаздела = "Пояснения8" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения8();
	ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения9();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиКорректировка()
	
	ТабличныйДокумент.Области.ПериодПрошлогоГода.Текст =
		СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	
	ТабличныйДокумент.Области.ПериодГодаПредшествующегоПрошлому.Текст =
		СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения1()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5100.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5110.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату12.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода12.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему12.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.НаОтчетнуюДату13.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода13.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему13.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5140.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5150.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5160.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5170.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5180.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5190.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения2()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5200.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5210.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5220.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5230.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода23.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода23.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату24.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода24.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему24.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения3()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5301.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5311.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5305.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5315.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5300.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5310.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату32.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода32.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему32.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения4()
	
	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];
	
	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5400.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5420.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5401.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5421.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5402.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5422.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5403.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5423.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5404.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5424.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5405.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5425.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5406.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5426.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5407.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5427.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.НаОтчетнуюДату42.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода42.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему42.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения5()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5501.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5521.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5502.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5522.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5503.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5523.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5504.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5524.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5511.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5531.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5512.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5532.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5513.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5533.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5514.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5534.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5500.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5520.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату52.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода52.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему52.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5551.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5571.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5552.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5572.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5553.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5573.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5554.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5574.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5560.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5580.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5561.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5581.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5562.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5582.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5563.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5583.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5564.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5584.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5565.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5585.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5566.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5586.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5550.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5570.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату54.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода54.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему54.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения6()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода6.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода6.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения8()

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.НаОтчетнуюДату8.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода8.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему8.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения9()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода9.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода9.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5910.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5920.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
			ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено И Обл.СодержитЗначение Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяТекРаздела);
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере( , , ИмяТекРаздела);
	
	УстановитьВидимостьОсновныхСтрок(ИмяТекРаздела);
	УстановитьВидимостьДополнительныхСтрок(ИмяТекРаздела);
	Если ИмяТекРаздела = "РасчетАктивов" Тогда
		УстановитьВидимостьПолейРасчетАктивов();
	КонецЕсли;
	
	Если ИмяТекРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли ИмяТекРаздела = "ОФР" Тогда
		ПеренумероватьСтрокиРасшифровкиОФР();
	ИначеЕсли ИмяТекРаздела = "Пояснения5" Тогда
		ПеренумероватьСтрокиРасшифровкиПояснений5();
	ИначеЕсли ИмяТекРаздела = "Пояснения7" Тогда
		ПеренумероватьСтрокиРасшифровкиПояснений7();
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(ИмяТекРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочнойЧасти)
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	СтрокВМакете = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Если СтрокВМакете < КоличествоСтрокВМногострочнойЧасти Тогда
		// Удаление имени области многострочной части.
		ИмяОблМнЧ = ИдентификаторМногострочнойЧасти;
		Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
			КодСтроки = Сред(ИмяОблМнЧ, 7);
			Пока Лев(КодСтроки, 1) = "0" Цикл
				КодСтроки = Сред(КодСтроки, 2);
			КонецЦикла;
			ИмяОблМнЧ = "ДопСтрока" + КодСтроки;
		КонецЕсли;
		
		ОблМнЧ = ТабличныйДокумент.Области.Найти(ИмяОблМнЧ);
		Если ОблМнЧ <> Неопределено Тогда
			ИсходнаяОбластьСтрокВерх = ОблМнЧ.Верх;
			ОблМнЧ.Имя = "";
		Иначе
			ИсходнаяОбластьСтрокВерх = 0;
		КонецЕсли;
		
		ПостфиксСтрокВМакете = "_" + СтрЧГ0(СтрокВМакете);
		
		ИмяВерхнегоЭлементаСтроки = СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксСтрокВМакете;
		ИмяНижнегоЭлементаСтроки  = СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксСтрокВМакете;
		
		ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
		ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
		
		ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		
		// Добавление необходимого количества дополнительных строк.
		ОбластьВставляемойСтроки
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз);
		ОбластьСтрокиПреемника
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиНиз + 1, , ОбластьВставляемойСтрокиНиз
			+ (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
		ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, ОбластьСтрокиПреемника,
			ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		
		// Назначение имени области многострочной части.
		Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
			ОблМнЧ = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, ,
			ОбластьВставляемойСтрокиНиз + (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
			Если ОблМнЧ <> Неопределено Тогда
				ОблМнЧ.Имя = ИмяОблМнЧ;
			КонецЕсли;
		КонецЕсли;
		
		// Назначение имен ячеек с показателями в добавленных дополнительных строках.
		Для НомДопСтроки = СтрокВМакете + 1 По КоличествоСтрокВМногострочнойЧасти Цикл
			
			Смещение = ВысотаСтроки * (НомДопСтроки - 1);
			
			ПостфиксНомДопСтроки = "_" + СтрЧГ0(НомДопСтроки);
			
			ОсноваИмениОблУдаленияСтроки = "";
			
			Для Каждого ЭлементСтруктуры Из СтруктураМногострочнойЧасти.Состав[НомДопСтроки - 1] Цикл
				
				ОсноваИмениПоказателя = ЭлементСтруктуры.Ключ;
				
				ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
				
				ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(
				ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
				ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
				
				ОбластьПоказателяНовойСтроки.Имя = ОсноваИмениПоказателя + ПостфиксНомДопСтроки;
				
				// Установка значений показателей в добавленных дополнительных строках.
				Если ОбластьПоказателяНовойСтроки.СодержитЗначение Тогда
					ОбластьПоказателяНовойСтроки.Значение = ЭлементСтруктуры.Значение;
				Иначе
					ОбластьПоказателяНовойСтроки.Текст = ЭлементСтруктуры.Значение;
				КонецЕсли;
				
				// Получение основы для последующего назначения имени
				// ячейки со значком удаления дополнительной строки.
				Если ОсноваИмениОблУдаленияСтроки = "" Тогда
					Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда
						ОсноваИмениОблУдаленияСтроки = ОсноваИмениПоказателя;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Область значка удаления строки может быть привязана к идентификатору МСЧ.
			Если НЕ ЗначениеЗаполнено(ОсноваИмениОблУдаленияСтроки)
			   И ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИдентификаторМногострочнойЧасти + "_1") <> Неопределено Тогда
				ОсноваИмениОблУдаленияСтроки = ИдентификаторМногострочнойЧасти;
			КонецЕсли;
			
			// Назначение имени ячейки со значком удаления дополнительной строки.
			Если ОсноваИмениОблУдаленияСтроки <> "" Тогда
				ОбластьУдалитьНовая = ТабличныйДокумент.Область(
				ОбластьВставляемойСтрокиВерх + Смещение, 2,
				ОбластьВставляемойСтрокиВерх + Смещение, 2);
				
				ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки + ПостфиксНомДопСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(
		СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяЯчейки = Неопределено Тогда
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтотОбъект, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		ИначеЕсли ВариантЗаполнения = 5 Тогда
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		Иначе
			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(
				ЭтотОбъект, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
			ЭтотОбъект, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрЧГ0(Инд);
				КонецЕсли;
				
				Если ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = ТабличныйДокумент.Области[ИмяПоказателя];
				Если ЗначениеЗаполнено(Комментарий) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 Тогда
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				ИначеЕсли ВариантЗаполнения = 5 Тогда
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОсновныхСтрок(ИмяОтчета)
	
	Если ИмяОтчета = "Пояснения5" Тогда
		Если НЕ ОтображатьСтроки_5503_5523() Тогда
			ТабличныйДокумент.Области.ОсновнаяЧасть5503.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьСтроки_5407_5427()
	
	БлокиМакета = СтруктураОтчета.Пояснения4.БлокиМакета;
	Возврат БлокиМакета.ОсновнаяЧасть5407.Видимость;
	
КонецФункции

&НаСервере
Функция ОтображатьСтроки_5503_5523()
	
	КонецОтчетногоПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонецОтчетногоПериода_1 = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	ОтображатьСтроки_5503_5523 = НЕ РазделяютсяАвансыНаКонецПериода(КонецОтчетногоПериода)
	                         ИЛИ НЕ РазделяютсяАвансыНаКонецПериода(КонецОтчетногоПериода_1);
	
	Возврат ОтображатьСтроки_5503_5523;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДополнительныхСтрок(ИмяОтчета)
	
	Если ИмяОтчета = "Баланс"
	 ИЛИ ИмяОтчета = "ОФР"
	 ИЛИ ИмяОтчета = "Корректировка"
	 ИЛИ ИмяОтчета = "Пояснения7" Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		
		Если ИмяОтчета = "Баланс" Тогда
			ДеревоНастроек = ДеревоНастроекБаланс;
		ИначеЕсли ИмяОтчета = "ОФР" Тогда
			ДеревоНастроек = ДеревоНастроекОФР;
		ИначеЕсли ИмяОтчета = "Корректировка" Тогда
			ДеревоНастроек = ДеревоНастроекКорректировка;
		ИначеЕсли ИмяОтчета = "Пояснения7" Тогда
			ДеревоНастроек = ДеревоНастроекПояснения7;
		КонецЕсли;
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					"ДобавлениеСтроки_" + СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						"ДобавлениеСтроки_" + ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							"ДобавлениеСтроки_" + СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяОтчета = "ОФР" Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		ДеревоНастройкиСостава = ДеревоНастроекОФР;
		
		Если ИспользуютсяМакетыЕНВД() Тогда
			ТабличныйДокумент.Области.ВТомЧисле2110.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
			ТабличныйДокумент.Области.ВТомЧисле2120.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
			ТабличныйДокумент.Области.ВТомЧисле2210.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
			ТабличныйДокумент.Области.ВТомЧисле2220.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
			ТабличныйДокумент.Области.ВТомЧисле2100.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
			ТабличныйДокумент.Области.ВТомЧисле2200.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
			ТабличныйДокумент.Области.ВТомЧисле2300.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
			
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21101.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21201.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22101.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22201.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21001.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22001.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
				
		КонецЕсли;
		
		ТабличныйДокумент.Области.ВТомЧисле2510.Видимость =
			ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока25101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока25102");
		
	КонецЕсли;
	
	Если ИмяОтчета = "Корректировка" Тогда
		УстановитьВидимостьВспомогательныхСтрок_Корректировка(ДеревоНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВспомогательныхСтрок_Корректировка(ДеревоНастроек)
	
	ВидимостьПрошлыйГод1100 = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1110")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1120")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1130")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1140")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1150")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1160")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1170")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1180")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1190");
	ТабличныйДокумент.Области.ПрошлыйГод1100.Видимость = ВидимостьПрошлыйГод1100;
	ТабличныйДокумент.Области.ПрошлыйГод1.Видимость = ВидимостьПрошлыйГод1100;
	
	ВидимостьПрошлыйГод1200 = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1210")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1220")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1230")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1240")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1250")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1260");
	ТабличныйДокумент.Области.ПрошлыйГод1200.Видимость = ВидимостьПрошлыйГод1200;
	ТабличныйДокумент.Области.ПрошлыйГод2.Видимость = ВидимостьПрошлыйГод1200;
	
	ВидимостьПрошлыйГод1600 = ВидимостьПрошлыйГод1100 ИЛИ ВидимостьПрошлыйГод1200;
	ТабличныйДокумент.Области.ПрошлыйГод1600.Видимость = ВидимостьПрошлыйГод1600;
	ТабличныйДокумент.Области.ПрошлыйГодАктив.Видимость = ВидимостьПрошлыйГод1600;
	
	ВидимостьПрошлыйГод1300 = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1310")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1320")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1340")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1350")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1360")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1370");
	ТабличныйДокумент.Области.ПрошлыйГод1300.Видимость = ВидимостьПрошлыйГод1300;
	ТабличныйДокумент.Области.ПрошлыйГод3.Видимость = ВидимостьПрошлыйГод1300;
	
	ВидимостьПрошлыйГод1300НКО = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1310НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1320НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1350НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1360НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1370НКО");
	ТабличныйДокумент.Области.ПрошлыйГод1300НКО.Видимость = ВидимостьПрошлыйГод1300НКО;
	ТабличныйДокумент.Области.ПрошлыйГод3НКО.Видимость = ВидимостьПрошлыйГод1300НКО;
	
	ВидимостьПрошлыйГод1400 = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1410")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1420")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1430")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1450");
	ТабличныйДокумент.Области.ПрошлыйГод1400.Видимость = ВидимостьПрошлыйГод1400;
	ТабличныйДокумент.Области.ПрошлыйГод4.Видимость = ВидимостьПрошлыйГод1400;
	
	ВидимостьПрошлыйГод1500 = ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1510")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1520")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1530")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1540")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ПрошлыйГод1550");
	ТабличныйДокумент.Области.ПрошлыйГод1500.Видимость = ВидимостьПрошлыйГод1500;
	ТабличныйДокумент.Области.ПрошлыйГод5.Видимость = ВидимостьПрошлыйГод1500;
	
	ВидимостьПрошлыйГод1700 = ВидимостьПрошлыйГод1300 ИЛИ ВидимостьПрошлыйГод1300НКО
		ИЛИ ВидимостьПрошлыйГод1400 ИЛИ ВидимостьПрошлыйГод1500;
	ТабличныйДокумент.Области.ПрошлыйГод1700.Видимость = ВидимостьПрошлыйГод1700;
	ТабличныйДокумент.Области.ПрошлыйГодПассив.Видимость = ВидимостьПрошлыйГод1700;
	
	ВидимостьПрошлыйГодЗаголовок = ВидимостьПрошлыйГод1600 ИЛИ ВидимостьПрошлыйГод1700;
	ТабличныйДокумент.Области.ПрошлыйГодЗаголовок.Видимость = ВидимостьПрошлыйГодЗаголовок;
	
	ВидимостьГодПредшествующийПрошлому1100 = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1110")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1120")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1130")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1140")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1150")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1160")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1170")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1180")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1190");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1100.Видимость = ВидимостьГодПредшествующийПрошлому1100;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1.Видимость = ВидимостьГодПредшествующийПрошлому1100;
	
	ВидимостьГодПредшествующийПрошлому1200 = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1210")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1220")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1230")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1240")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1250")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1260");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1200.Видимость = ВидимостьГодПредшествующийПрошлому1200;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому2.Видимость = ВидимостьГодПредшествующийПрошлому1200;
	
	ВидимостьГодПредшествующийПрошлому1600 = ВидимостьГодПредшествующийПрошлому1100 ИЛИ ВидимостьГодПредшествующийПрошлому1200;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1600.Видимость = ВидимостьГодПредшествующийПрошлому1600;
	ТабличныйДокумент.Области.ГодПредшествующийПрошломуАктив.Видимость = ВидимостьГодПредшествующийПрошлому1600;
	
	ВидимостьГодПредшествующийПрошлому1300 = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1310")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1320")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1340")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1350")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1360")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1370");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1300.Видимость = ВидимостьГодПредшествующийПрошлому1300;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому3.Видимость = ВидимостьГодПредшествующийПрошлому1300;
	
	ВидимостьГодПредшествующийПрошлому1300НКО = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1310НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1320НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1350НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1360НКО")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1370НКО");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1300НКО.Видимость = ВидимостьГодПредшествующийПрошлому1300НКО;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому3НКО.Видимость = ВидимостьГодПредшествующийПрошлому1300НКО;
	
	ВидимостьГодПредшествующийПрошлому1400 = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1410")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1420")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1430")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1450");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1400.Видимость = ВидимостьГодПредшествующийПрошлому1400;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому4.Видимость = ВидимостьГодПредшествующийПрошлому1400;
	
	ВидимостьГодПредшествующийПрошлому1500 = ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1510")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1520")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1530")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1540")
		ИЛИ ВключенВОтчет(ДеревоНастроек, "ГодПредшествующийПрошлому1550");
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1500.Видимость = ВидимостьГодПредшествующийПрошлому1500;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому5.Видимость = ВидимостьГодПредшествующийПрошлому1500;
	
	ВидимостьГодПредшествующийПрошлому1700 = ВидимостьГодПредшествующийПрошлому1300 ИЛИ ВидимостьГодПредшествующийПрошлому1300НКО
		ИЛИ ВидимостьГодПредшествующийПрошлому1400 ИЛИ ВидимостьГодПредшествующийПрошлому1500;
	ТабличныйДокумент.Области.ГодПредшествующийПрошлому1700.Видимость = ВидимостьГодПредшествующийПрошлому1700;
	ТабличныйДокумент.Области.ГодПредшествующийПрошломуПассив.Видимость = ВидимостьГодПредшествующийПрошлому1700;
	
	ВидимостьГодПредшествующийПрошломуЗаголовок = ВидимостьГодПредшествующийПрошлому1600 ИЛИ ВидимостьГодПредшествующийПрошлому1700;
	ТабличныйДокумент.Области.ГодПредшествующийПрошломуЗаголовок.Видимость = ВидимостьГодПредшествующийПрошломуЗаголовок;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхПоXML(ТекстXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочныеЧасти" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелМногострочныхЧастей Из Узел.ДочерниеУзлы Цикл
			ИмяРазделаМногострочныхЧастей = ПолучитьАтрибутКакСтроку(УзелМногострочныхЧастей, "ИмяРаздела");
			Если ИспользоватьОписаниеМногострочнойЧасти(ИмяРазделаМногострочныхЧастей) Тогда
				ВнестиОписаниеМногострочныхЧастейРаздела(УзелМногострочныхЧастей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	ЭтоОтчетностьЗаКварталГод = ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ПоказатьЗаКварталГод = 0;
	ПечататьЗаКварталГод = 0;
	Если ЭтоОтчетностьЗаКварталГод Тогда
		ПоказатьЗаКварталГод = 1;
		ПечататьЗаКварталГод = 1;
	КонецЕсли;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОФР";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПечататьЗаКварталГод);
	СтрокаУровня1.ПоказатьСтраницу
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПоказатьЗаКварталГод);
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасчетАктивов";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Корректировка";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 0;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения1";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения2";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения3";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения4";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения5";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения6";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения7";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения8";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения9";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПечататьЗаКварталГод;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = ПоказатьЗаКварталГод;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	ИмяФормыОтчета = ИмяФормыОтчета(ИмяФормы);
	СтраницыОтчета = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ЭтоБалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	РегламентированнаяОтчетность.ИзменитьСоставОтчета(
		"РегламентированныйОтчетБухОтчетность", ИмяФормыОтчета, ПараметрыОтчета, СтраницыОтчета);
		
	ЗначениеВРеквизитФормы(СтраницыОтчета, "мДеревоСтраницОтчета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде =
		ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду =
		ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	
	Если СкрыватьСтрокиРасшифровкиПоПБУ18 И ТабличныйДокумент.Области.Найти("ВТомЧисле2421") <> Неопределено Тогда
		ТабличныйДокумент.Области.ВТомЧисле2421.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2421.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2430.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2430.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2450.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2450.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейРасчетАктивов()
	
	СкрытьСтроку1530 = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2022;
	Если СкрытьСтроку1530 Тогда
		ТабличныйДокумент.Области.Строка1530.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции, ДеревоНастроек, УсловияВключения = Неопределено)
	
	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = ОбъектОтчета(ИмяФормы).ПолучитьМакет(МакетНастроек);
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяСекции) Тогда
		ДеревоНастроек.Очистить();
		Возврат;
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				
				УсловиеВключения = МакетНастроек.Область(НомСтр, 3).Текст;
				Если Лев(УсловиеВключения, 1) = "#" Тогда
					ВключатьВОтчет = (УсловияВключения.Найти(УсловиеВключения) <> Неопределено);
				Иначе
					ВключатьВОтчет = ЗначениеЗаполнено(УсловиеВключения);
				КонецЕсли;
				НовСтр.ВключатьВОтчет = ?(ВключатьВОтчет, 1, 0);
				
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.УсловияДоступности = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				НовСтр.ДостДляРедактирования_Существенность = ЗначениеЗаполнено(НовСтр.Существенность);
				НовСтр.ДостДляРедактирования_МаксимальноеКоличество = ЗначениеЗаполнено(НовСтр.МаксимальноеКоличество);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ИспользоватьОписаниеМногострочнойЧасти(ИмяОписанияМногострочныхЧастей)
	
	Результат = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		Если Отчет.Значение.ИмяОписанияМногострочныхЧастей = ИмяОписанияМногострочныхЧастей Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеМногострочныхЧастейРаздела(УзелРаздела)
	
	ИмяПоляТабличногоДокумента = СтрЗаменить(УзелРаздела.Атрибуты.ПолучитьИменованныйЭлемент("РасположениеРаздела").Значение, "ПолеТабличногоДокумента", "");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторМногострочнойЧасти = ПолучитьАтрибутКакСтроку(Узел, "Идентификатор");
		МинимальноеКоличествоСтрок  = ПолучитьАтрибутКакЧисло(Узел, "МинимальноеКоличествоСтрок");
		МаксимальноеКоличествоСтрок = ПолучитьАтрибутКакЧисло(Узел, "МаксимальноеКоличествоСтрок");
		ВерхнийЭлементСтроки = ПолучитьАтрибутКакСтроку(Узел, "ВерхнийЭлементСтроки");
		НижнийЭлементСтроки  = ПолучитьАтрибутКакСтроку(Узел, "НижнийЭлементСтроки");
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочнойЧасти.Вставить("Масштаб", Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок));
		СтруктураМногострочнойЧасти.Вставить("Габариты", Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", ВерхнийЭлементСтроки, НижнийЭлементСтроки));
		СтруктураМногострочнойЧасти.Вставить("ИмяПоляТабличногоДокумента", ИмяПоляТабличногоДокумента);
		
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ИмяУзла = "Кодификаторы" Тогда
				ВнестиОписаниеКодификаторовМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Заголовки" Тогда
				ВнестиОписаниеЗаголовковМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Состав" Тогда
				ВнестиОписаниеСоставаМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей.Вставить(ИдентификаторМногострочнойЧасти, СтруктураМногострочнойЧасти);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применяться не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
	
	ОрганизацияПерешлаНаУСН   = (РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, ДатаОпределения) = "Упрощенная");
	ОрганизацияПрименяетПБУ18 = РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаОпределения);
	
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеКодификаторовМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивКодификаторов = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Кодификатор" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьКода = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьКода");
		НачальныйКод = ПолучитьАтрибутКакЧисло(ДочернийУзел, "НачальныйКод");
		
		МассивКодификаторов.Добавить(Новый Структура("Область, Код", ОбластьКода, НачальныйКод));
		
	КонецЦикла;
	
	Если МассивКодификаторов.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Кодификаторы", МассивКодификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеЗаголовковМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Заголовок" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьЗаголовка");
		ШаблонЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ШаблонЗаголовка");
		
		МассивЗаголовков.Добавить(Новый Структура("Область, Заголовок", ОбластьЗаголовка, ШаблонЗаголовка));
		
	КонецЦикла;
	
	Если МассивЗаголовков.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Заголовки", МассивЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеСоставаМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
		
	ТаблицаСостава = Новый Массив;
	СтруктураСостава = Новый Структура;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла <> "ЭлементСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьАтрибутКакСтроку(ДочернийУзел, "Область");
		
		СтруктураСостава.Вставить(Область);
		
	КонецЦикла;
	
	НачальноеКоличествоСтрок = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	Для Инд = 1 По НачальноеКоличествоСтрок Цикл
		ТаблицаСостава.Добавить(СтруктураСостава);
	КонецЦикла;
	
	СтруктураМногострочнойЧасти.Вставить("Состав", ТаблицаСостава);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКодЕИ()

	Если ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	ПолучитьСтруктуруМногострочныхЧастей();
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти
		= СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление();
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения <> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиБаланса()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	
	ДеревоНастроек = ДеревоНастроекБаланс;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
			НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
			
			Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации И НомерСтроки = 15302 Тогда
				НомерСтроки = 15301;
			КонецЕсли;
			
			Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
				Если ЗначениеЗаполнено(Строка2Уровня.ВключатьВОтчет) Тогда
					ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
					НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
					ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
					
					КодСтроки = СтрЧГ0(НомерСтроки);
					
					Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбластиНомера) = Неопределено Тогда
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						НомерСтроки = НомерСтроки + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиОФР()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	
	ДеревоНастроек = ДеревоНастроекОФР;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
						
						КодСтроки = СтрЧГ0(НомерСтроки);
						
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиПояснений5()
	
	Если НЕ ОтображатьСтроки_5503_5523() Тогда
		ТабличныйДокумент.Области.П000100550402.Текст = "5503";
		ТабличныйДокумент.Области.П000100552402.Текст = "5523";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиПояснений7()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Пояснения7");
	
	ДеревоНастроек = ДеревоНастроекПояснения7;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П000100" + НомерДопСтроки + "02";
						
						КодСтроки = СтрЧГ0(НомерСтроки);
						
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "УдалитьСтроку", "");
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения3" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если СтрНайти(ТекущаяОбласть.Имя, "ДобавитьСтроку") = 1 Тогда
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
	ИначеЕсли СтрНайти(ТекущаяОбласть.Имя, "УдалитьСтроку") = 1 Тогда
		// Вызов из контекстного меню при клике на значке удаления.
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "УдалитьСтроку", "");
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	Иначе
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
	КонецЕсли;
	
	ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ИдентификаторМногострочнойЧасти =
		СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если НЕ ЗначениеЗаполнено(ИдентификаторМногострочнойЧасти)
	   И СтруктураМногострочныхЧастей.Свойство(ИмяПоказателя) Тогда
		ИдентификаторМногострочнойЧасти = ИмяПоказателя;
	КонецЕсли;
	
	ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	КоличествоСтрокВМногострочнойЧасти = ОписаниеМногострочнойЧасти.Состав.Количество();
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
	
	Если ТабличныйДокумент.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	ПостфиксКоличествоСтрокВМногострочнойЧасти  = "_" + СтрЧГ0(КоличествоСтрокВМногострочнойЧасти);
	ПостфиксКоличествоСтрокВМногострочнойЧасти1 = "_" + СтрЧГ0(КоличествоСтрокВМногострочнойЧасти + 1);
	
	// За основу для копирования используется последняя строка многострочного раздела.
	ИмяВерхнегоЭлементаСтроки = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	ИмяНижнегоЭлементаСтроки  = ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	
	ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
	ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
	
	ОбластьВставляемойСтроки = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
	
	// Добавляем строку к макету и назначаем имена областям показателей.
	ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
	Смещение = ВысотаСтроки * КоличествоСтрокВМногострочнойЧасти;
	
	СтруктураЭлементовМногострочнойЧасти = Новый Структура;
	
	ОсноваИмениОблУдаленияСтроки = "";
	Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
		ОсноваИмениПоказателя = Элемент.Ключ;
		Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда
			ОсноваИмениОблУдаленияСтроки = ОсноваИмениПоказателя;
		КонецЕсли;
		
		СтруктураЭлементовМногострочнойЧасти.Вставить(ОсноваИмениПоказателя);
		
		ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
		
		ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
			ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
		ИмяОбластиНовойСтроки = ОсноваИмениПоказателя + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
		
		ОбластьПоказателяНовойСтроки.Имя = ИмяОбластиНовойСтроки;
		
		Если ТабличныйДокумент.Области[ИмяОбластиНовойСтроки].СодержитЗначение Тогда
			ОбластьПоказателяНовойСтроки.Значение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Область значка удаления строки может быть привязана к идентификатору МСЧ.
	Если НЕ ЗначениеЗаполнено(ОсноваИмениОблУдаленияСтроки)
		   И ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИдентификаторМногострочнойЧасти + "_1") <> Неопределено Тогда
		ОсноваИмениОблУдаленияСтроки = ИдентификаторМногострочнойЧасти;
	КонецЕсли;
	
	// Назначаем новую именнованную область многострочной части.
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьДляИменования = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ВысотаСтроки, );
		ОбластьДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокНиз + 1, 2, ИсходнаяОбластьСтрокНиз + 1, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки  + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
	Иначе
		Верх = ОбластьВставляемойСтрокиВерх;
		Шаг = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(Верх + Шаг, 2, Верх + Шаг, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки  + "_" + СтрЧГ0(ОписаниеМногострочнойЧасти.Состав.Количество() + 1);
	КонецЕсли;
	
	// Зафиксируем увеличение многострочной части в структуре описаний.
	ОписаниеМногострочнойЧасти.Состав.Добавить(СтруктураЭлементовМногострочнойЧасти);
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Установим первое поле добавленной строки текущим.
	НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
	ИмяОбластиДляФокусаВвода = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрЧГ0(НомерПоследнейСтроки);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяОбластиДляФокусаВвода];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезСчетчика(Знач ИмяПоказателя)
	
	ПозицияСчетчика = СтрНайти(ИмяПоказателя, "_");
	
	Если ПозицияСчетчика > 0 Тогда
		Возврат Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	КонецЕсли;
	
	Возврат ИмяПоказателя;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	ИмяПоказателяБезСчетчика = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ИдентификаторМногострочнойЧасти =
		СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	Если НЕ ЗначениеЗаполнено(ИдентификаторМногострочнойЧасти)
	   И СтруктураМногострочныхЧастей.Свойство(ИмяПоказателяБезСчетчика) Тогда
		ИдентификаторМногострочнойЧасти = ИмяПоказателяБезСчетчика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторМногострочнойЧасти) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
													|en = 'Не выбрана удаляемая строка многострочного раздела.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	// Номер строки удаляемой многострочной части определим по имени выделенной ячейки.
	НомерУдаляемойСтроки = Число(Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя, "_") + 1));
	ИндексСтрокиТаблицы = НомерУдаляемойСтроки - 1;
	
	Если ОписаниеМногострочнойЧасти.Состав.Количество() > ОписаниеМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Тогда
		ПеремещатьФокусВвода = (НомерУдаляемойСтроки = ОписаниеМногострочнойЧасти.Состав.Количество());
		
		ПостфиксНомерУдаляемойСтроки = "_" + СтрЧГ0(НомерУдаляемойСтроки);
		
		УдаляемаяОбластьВерх = ТабличныйДокумент.Области[ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксНомерУдаляемойСтроки].Верх;
		УдаляемаяОбластьНиз  = ТабличныйДокумент.Области[ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки  + ПостфиксНомерУдаляемойСтроки].Низ;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование областей многострочной части.
		Для Инд = НомерУдаляемойСтроки + 1 По ОписаниеМногострочнойЧасти.Состав.Количество() Цикл
			ПостфиксИнд  = "_" + СтрЧГ0(Инд);
			ПостфиксИнд1 = "_" + СтрЧГ0(Инд - 1);
			
			ОсноваИмениОблУдаленияСтроки = "";
			Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
				ОсноваИмениОбласти = Элемент.Ключ;
				Если Прав(ОсноваИмениОбласти, 2) = "01" И Лев(ОсноваИмениОбласти, 1) = "П" Тогда
					ОсноваИмениОблУдаленияСтроки = ОсноваИмениОбласти;
				КонецЕсли;
				ПереименуемаяОбласть = ТабличныйДокумент.Области[ОсноваИмениОбласти + ПостфиксИнд];
				ПереименуемаяОбласть.Имя = ОсноваИмениОбласти + ПостфиксИнд1;
			КонецЦикла;
			
			// Область значка удаления строки может быть привязана к идентификатору МСЧ.
			Если НЕ ЗначениеЗаполнено(ОсноваИмениОблУдаленияСтроки)
			   И ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИдентификаторМногострочнойЧасти + ПостфиксИнд) <> Неопределено Тогда
				ОсноваИмениОблУдаленияСтроки = ИдентификаторМногострочнойЧасти;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОсноваИмениОблУдаленияСтроки) Тогда
				ПереименуемаяОбласть = ТабличныйДокумент.Области["УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки + ПостфиксИнд];
				ПереименуемаяОбласть.Имя = "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки + ПостфиксИнд1;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеМногострочнойЧасти.Состав.Удалить(ИндексСтрокиТаблицы);
		
		Если ПеремещатьФокусВвода Тогда
			// Установим первое поле добавленной строки текущим.
			НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
			ИмяБудущейТекущейОбласти = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + "_" + СтрЧГ0(НомерПоследнейСтроки);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяБудущейТекущейОбласти];
		КонецЕсли;
		
	Иначе
		Для Инд = 1 По ОписаниеМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Цикл
			ПостфиксИнд  = "_" + СтрЧГ0(Инд);
			Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
				ИмяОчищаемойОбласти = Элемент.Ключ + ПостфиксИнд;
				ОчищаемаяОбласть = ТабличныйДокумент.Области[ИмяОчищаемойОбласти];
				Если ОчищаемаяОбласть.СодержитЗначение Тогда
					Если ТипЗнч(ОчищаемаяОбласть.Значение) = Тип("Строка") Тогда
						ОчищаемаяОбласть.Значение = "";
					Иначе
						ОчищаемаяОбласть.Значение = 0;
					КонецЕсли;
				Иначе
					ОчищаемаяОбласть.Текст = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхБаланс.ОргКодОКВЭД);
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргКодОКВЭД") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОДДС.ОргКодОКВЭД);
	КонецЕсли;
	
	Если СтруктураДанныхОИК.Свойство("ОргКодОКВЭД") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОИК.ОргКодОКВЭД);
	КонецЕсли;
	
	Если СтруктураДанныхОЦИС.Свойство("ОргКодОКВЭД") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОЦИС.ОргКодОКВЭД);
	КонецЕсли;
	
	Если СтруктураДанныхОФР.Свойство("ОргКодОКВЭД") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОФР.ОргКодОКВЭД);
	КонецЕсли;
	
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхБаланс.ОргОтрасль);
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргОтрасль") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОДДС.ОргОтрасль);
	КонецЕсли;
		
	Если СтруктураДанныхОИК.Свойство("ОргОтрасль") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОИК.ОргОтрасль);
	КонецЕсли;
	
	Если СтруктураДанныхОЦИС.Свойство("ОргОтрасль") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОЦИС.ОргОтрасль);
	КонецЕсли;
	
	Если СтруктураДанныхОФР.Свойство("ОргОтрасль") Тогда
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, СтруктураДанныхОФР.ОргОтрасль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьПоляПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДискФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Попытка
		Если НЕ ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла';
											|en = 'Выберите путь для сохранения файла'");
		
		НачатьПолучениеФайлаССервера(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, ПараметрыДиалога);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
			|%1';
			|en = 'При выгрузке файла возникла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = Неопределено;
	СтруктураХранения.ИмяФайла         = Неопределено;
	СтруктураХранения.Размер           = Неопределено;
	СтруктураХранения.ДатаДобавления   = Неопределено;
	
	// Учет различий в хранении дополнительных файлов в "старой" и "новой" версии реализации.
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьФайл(ВидДополнительногоФайла, ЗаголовокОкнаВыбора)
	
	ПараметрыВыбораФайла = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыВыбораФайла.Заголовок = ЗаголовокОкнаВыбора;
	ПараметрыВыбораФайла.МножественныйВыбор = Ложь;
	ПараметрыВыбораФайла.Фильтр = "Файл PDF (*.pdf)|*.pdf";
	
	ПомещенныйФайл = Ждать ПоместитьФайлНаСерверАсинх( , , , ПараметрыВыбораФайла, УникальныйИдентификатор);
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	АдресХранения = ПомещенныйФайл.Адрес;
	ИмяФайла = ПомещенныйФайл.СсылкаНаФайл.Имя;
	РазмерФайла = ПомещенныйФайл.СсылкаНаФайл.Размер();
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресХранения;
	СтруктураХранения.ИмяФайла         = ИмяФайла;
	СтруктураХранения.Размер           = РазмерФайла;
	СтруктураХранения.ДатаДобавления   = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи()
	
	ДанныеРаздела = ЭтотОбъект["СтруктураДанныхОИК"];
	
	Если ДанныеРаздела.Количество() <= 4
		И (ДанныеРаздела.Свойство("П000100360003")
		ИЛИ ДанныеРаздела.Свойство("П000100360004")
		ИЛИ ДанныеРаздела.Свойство("П000100360005")
		ИЛИ ДанныеРаздела.Свойство("ДатаПодписиОтчета")) Тогда
		
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360003"),
			ДанныеРаздела["П000100360003"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360004"),
			ДанныеРаздела["П000100360004"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360005"),
			ДанныеРаздела["П000100360005"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("ДатаПодписиОтчета"),
			ДанныеРаздела["ДатаПодписиОтчета"], '00010101'));
		
		Возврат МассивПоказателей;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных(ЗаполнятьСведенияОбОрганизации = Истина)
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		МассивПоказателейОИК = Неопределено;
		Если Раздел.ИмяСтраницы = "ОИК" Тогда
			// Предварительное сохранение данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			МассивПоказателейОИК = ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи();
		КонецЕсли;
		
		ПоказательДатаПодписиРаздела = '00010101';
		ВРазделеТолькоДатаПодписи
			= ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 1
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ДатаПодписиОтчета");
		Если ВРазделеТолькоДатаПодписи Тогда
			// Предварительное сохранение значения единственного
			// показателя раздела - "Даты подписи отчета".
			ПоказательДатаПодписиРаздела = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ДатаПодписиОтчета;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
			ИЛИ (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 2
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль")
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД"))
			ИЛИ (МассивПоказателейОИК <> Неопределено ИЛИ ВРазделеТолькоДатаПодписи))
			И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетОтчета(Раздел.ИмяСтраницы));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
	
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("НомерКорректировки") = Неопределено Тогда
				ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ВидОтчетностиОбычная") = Неопределено Тогда
				Если ВидСдачиОтчетности = 1 Тогда
					ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение = "Х";
					ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение = "";
				ИначеЕсли ВидСдачиОтчетности = 3 Тогда
					ТабличныйДокумент.Области.ВидОтчетностиОбычная.Значение = "";
					ТабличныйДокумент.Области.ВидОтчетностиЛиквидационная.Значение = "Х";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль") Тогда
				ТабличныйДокумент.Области.ОргОтрасль.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргОтрасль;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД") Тогда
				ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргКодОКВЭД;
			КонецЕсли;
			
			Если ЗаполнятьСведенияОбОрганизации Тогда
				ЗаполнитьСведенияОбОрганизации();
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
			// Восстановление предварительно сохраненных данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			Если МассивПоказателейОИК <> Неопределено Тогда
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360003", МассивПоказателейОИК[0]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360004", МассивПоказателейОИК[1]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360005", МассивПоказателейОИК[2]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("ДатаПодписиОтчета", МассивПоказателейОИК[3]);
			КонецЕсли;
			
			Если ВРазделеТолькоДатаПодписи Тогда
				// Восстановление предварительно сохраненного значения единственного
				// показателя раздела - "Даты подписи отчета".
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					"ДатаПодписиОтчета", ПоказательДатаПодписиРаздела);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Баланс: при выводе сумм в рублях точность не может превышать 2 знака.';
					|en = 'Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'"));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.';
					|en = 'Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'"));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"),
			?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
								|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
							|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета)
	
	РасшифровкаПодписи = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
	ДатаПодписи        = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ДатаПодписиОтчета;
	
	Для Инд = 1 По 9 Цикл
		ПоказателиПояснения = ПоказателиОтчета["ПолеТабличногоДокументаПояснения" + Инд];
		
		ПоказателиПояснения.Вставить("ОргДиректор", РасшифровкаПодписи);
		ПоказателиПояснения.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВычитаемыеЗначенияРасчетаАктивов(ХранилищеВычитаемыхЗначений, НовыеЗначения)
	
	Если ТипЗнч(НовыеЗначения) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из НовыеЗначения Цикл
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			ЗначениеЭлемента = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип("Число")
			   И ХранилищеВычитаемыхЗначений.Свойство(ИмяЭлемента) Тогда
				ХранилищеВычитаемыхЗначений[ИмяЭлемента] = ЗначениеЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Если НЕ ЭтоАдресВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = Неопределено;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаЗаполняемыхРазделов = СтруктураРеквизитовФормы.ИменаАвтоЗаполняемыхРазделов;
	
	Если НЕ РазделВключенВОтчет("Корректировка")
	   И ИменаЗаполняемыхРазделов.Найти("Корректировка") <> Неопределено Тогда
		ОбработатьРазделКорректировокПослеАвтозаполнения(СтруктураДанных);
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			Для Каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИменаЗаполняемыхРазделов.Найти(ИмяРаздела) <> Неопределено Тогда
				
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
				МассивСтрокВЗ_1 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
				МассивСтрокВЗ_2 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				
				ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
				
				Для Каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
					ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
				КонецЦикла;
				Для Каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
					ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
						= ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сведения для исключения из показателей расчета стоимости чистых активов.
	Если ИменаЗаполняемыхРазделов.Найти("Баланс") <> Неопределено Тогда
		ОборотыСчета75_01 = Неопределено;
		Если СтруктураДанных.Свойство("ОборотыСчета75_01", ОборотыСчета75_01) Тогда
			ЗаполнитьВычитаемыеЗначенияРасчетаАктивов(СтруктураРеквизитовФормы.ОборотыСчета75_01, ОборотыСчета75_01);
		КонецЕсли;
		
		ВычетИзРасчетаАктивов1530 = Неопределено;
		Если СтруктураДанных.Свойство("ВычетИзРасчетаАктивов1530", ВычетИзРасчетаАктивов1530) Тогда
			ЗаполнитьВычитаемыеЗначенияРасчетаАктивов(СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530, ВычетИзРасчетаАктивов1530);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567003", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568003", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567004", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568004", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	СтруктураМСЧ = Неопределено;
	Если СтруктураДанных.Свойство("СтруктураМногострочныхЧастей", СтруктураМСЧ) И ТипЗнч(СтруктураМСЧ) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры ИЗ СтруктураМСЧ Цикл
			СтруктураМногострочныхЧастей.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// ЕНСРаспределенАвтоматическиОтч и ЕНСРаспределенАвтоматическиПрошл присутствуют в СтруктураДанных
	// только если производилось заполнение ОДДС. Значения:
	//   * Неопределено - платежи с ЕНС за период не применялись;
	//   * Истина - платежи распределены по сведениям учета автоматически;
	//   * Ложь - платежи должны распределяться вручную.
	ЕНСРаспределенАвтоматическиОтч   = Неопределено;
	ЕНСРаспределенАвтоматическиПрошл = Неопределено;
	Если СтруктураДанных.Свойство("ЕНСРаспределенАвтоматическиОтч", ЕНСРаспределенАвтоматическиОтч) Тогда
		СтруктураДанных.Свойство("ЕНСРаспределенАвтоматическиПрошл", ЕНСРаспределенАвтоматическиПрошл);
		СформироватьПримечанияОДДС(ЕНСРаспределенАвтоматическиОтч, ЕНСРаспределенАвтоматическиПрошл);
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	ОбработатьПоляНалоговогоОргана();
	
	РасчетНаСервере();
	
КонецПроцедуры

// Скрывает строки раздела "Корректировка", не требующие отображения.
//
&НаСервере
Процедура ОбработатьРазделКорректировокПослеАвтозаполнения(СтруктураДанных)
	
	ПоказатьКорректировку = Ложь;
	
	Показатели = СтруктураДанных.Контейнер.Корректировка;
	ПолучитьДеревоНастроекСоставаДопСтрок("Корректировка");
	
	// Скрыть все строки раздела.
	ДеревоНастроекКорректировка.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	ВсеСтрокиНастроек = ДеревоНастроекКорректировка.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	ДеревоНастроекКорректировка.Колонки.Удалить("ПреобразоватьВМассив");
	
	Для Каждого СтрокаНастройки Из ВсеСтрокиНастроек Цикл
		СтрокаНастройки.ВключатьВОтчет = 0;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1110,1120,1130,1140,1150,1160,1170,1180,1190", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000120%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1210,1220,1230,1240,1250,1260", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000120%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1310,1320,1340,1350,1360,1370", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000120%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1310,1320,1350,1360,1370", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000121%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки + "НКО");
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1410,1420,1430,1450", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000120%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1510,1520,1530,1540,1550", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000120%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ПрошлыйГод" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1110,1120,1130,1140,1150,1160,1170,1180,1190", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000122%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1210,1220,1230,1240,1250,1260", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000122%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1310,1320,1340,1350,1360,1370", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000122%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1310,1320,1350,1360,1370", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000123%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки + "НКО");
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1410,1420,1430,1450", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000122%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиРаздела = СтрРазделить("1510,1520,1530,1540,1550", ",", Ложь);
	Для Каждого НомерСтроки ИЗ СтрокиРаздела Цикл
		ЗначениеПоказателя = Неопределено;
		Если Показатели.Свойство(СтрШаблон("П000122%1%2", НомерСтроки, "04"), ЗначениеПоказателя)
		   И ЗначениеПоказателя <> 0 Тогда
			ВключитьСтрокуРаздела(ДеревоНастроекКорректировка, "ГодПредшествующийПрошлому" + НомерСтроки);
			ПоказатьКорректировку = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказатьКорректировку Тогда
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "Корректировка");
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ПоказатьСтраницу = 1;
		КонецЕсли;
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		СформироватьДеревоРазделовОтчетаНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПримечанияОДДС(ЕНСРаспределенАвтоматическиОтч, ЕНСРаспределенАвтоматическиПрошл)
	
	АвтоСтраховыеВзносы = НСтр("ru = 'Платежи в части страховых взносов и НДФЛ зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'Платежи в части страховых взносов и НДФЛ зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	АвтоНалогНаПрибыль  = НСтр("ru = 'Платежи в части налога на прибыль зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'Платежи в части налога на прибыль зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	АвтоНалогДивиденды  = НСтр("ru = 'Платежи в части налога на прибыль и НДФЛ с дивидендов зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'Платежи в части налога на прибыль и НДФЛ с дивидендов зачтены с ЕНС и указываются в соответствии с представленными ""Уведомлениями об исчисленных суммах налогов, авансовых платежей по налогам, сборов, страховых взносов"" за отчетный период. Рассчитанные показатели могут быть скорректированы вручную в соответствии с принадлежностью фактически уплаченных ЕНП, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	
	РучнСтраховыеВзносы = НСтр("ru = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части страховых взносов и НДФЛ за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части страховых взносов и НДФЛ за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	РучнНалогНаПрибыль  = НСтр("ru = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части налога на прибыль за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части налога на прибыль за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	РучнНалогДивиденды  = НСтр("ru = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части налога на прибыль и НДФЛ с дивидендов за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)';
								|en = 'На %1 обнаружен остаток на ЕНС. Распределение средств ЕНС в части налога на прибыль и НДФЛ с дивидендов за отчетный период указывается вручную в соответствии с принадлежностью ЕНП как текущего отчетного периода, так и предыдущего, определяемой налоговым органом (часть 8, статьи 45 НК РФ)'");
	
	Если ЕНСРаспределенАвтоматическиОтч = Истина Тогда
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412203 = АвтоСтраховыеВзносы;
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412403 = АвтоНалогНаПрибыль;
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432203 = АвтоНалогДивиденды;
	ИначеЕсли ЕНСРаспределенАвтоматическиОтч = Ложь Тогда
		ОписаниеНачалаПериода = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДЛФ=D");
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412203 = СтрШаблон(РучнСтраховыеВзносы, ОписаниеНачалаПериода);
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412403 = СтрШаблон(РучнНалогНаПрибыль, ОписаниеНачалаПериода);
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432203 = СтрШаблон(РучнНалогДивиденды, ОписаниеНачалаПериода);
	Иначе
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412203 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412403 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432203 = "";
	КонецЕсли;
	
	Если ЕНСРаспределенАвтоматическиПрошл = Истина Тогда
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412204 = АвтоСтраховыеВзносы;
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412404 = АвтоНалогНаПрибыль;
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432204 = АвтоНалогДивиденды;
	ИначеЕсли ЕНСРаспределенАвтоматическиПрошл = Ложь Тогда
		ОписаниеНачалаПериода = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12), "ДЛФ=D");
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412204 = СтрШаблон(РучнСтраховыеВзносы, ОписаниеНачалаПериода);
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412404 = СтрШаблон(РучнНалогНаПрибыль, ОписаниеНачалаПериода);
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432204 = СтрШаблон(РучнНалогДивиденды, ОписаниеНачалаПериода);
	Иначе
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412204 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412404 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432204 = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазделВключенВОтчет(ИмяРаздела)
	
	РазделВключенВОтчет = Ложь;
	
	НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", ИмяРаздела);
	Если НайденнаяСтрока <> Неопределено Тогда
		РазделВключенВОтчет = (НайденнаяСтрока.ПоказатьСтраницу <> 0);
	КонецЕсли;
	
	Возврат РазделВключенВОтчет;
	
КонецФункции

&НаСервере
Процедура ВключитьСтрокуРаздела(НастройкиСтрок, ИмяСтроки)
	
	НастройкаСтроки = НастройкиСтрок.Строки.Найти(ИмяСтроки, "ИмяОбластиДопСтроки", Истина);
	Если НастройкаСтроки <> Неопределено Тогда
		НастройкаСтроки.ВключатьВОтчет = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	СохраняемыеЗначения = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		СохраняемыеЗначения.Вставить("АудитДа",      СтруктураДанныхБаланс.АудитДа);
		СохраняемыеЗначения.Вставить("АудитНет",     СтруктураДанныхБаланс.АудитНет);
		СохраняемыеЗначения.Вставить("АудиторИНН",   СтруктураДанныхБаланс.АудиторИНН);
		СохраняемыеЗначения.Вставить("АудиторОГРН",  СтруктураДанныхБаланс.АудиторОГРН);
		СохраняемыеЗначения.Вставить("НаимАудитора", СтруктураДанныхБаланс.НаимАудитора);
		
		СтруктураДанныхБаланс.Очистить();
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа04 = 0;
		СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа05 = 0;
		СтруктураРеквизитовФормы.ВычетИзРасчетаАктивов1530.Графа06 = 0;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОФР" Тогда
		СтруктураДанныхОФР.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОИК" Тогда
		СтруктураДанныхОИК.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОДДС" Тогда
		СтруктураДанныхОДДС.Очистить();
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412203 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412403 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432203 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412204 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100412404 = "";
		СтруктураРеквизитовФормы.ПримечанияОДДС.П000100432204 = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОЦИС" Тогда
		СтруктураДанныхОЦИС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Корректировка" Тогда
		СтруктураДанныхКорректировка.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "РасчетАктивов" Тогда
		СтруктураДанныхРасчетАктивов.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения1" Тогда
		СтруктураДанныхПояснения1.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения2" Тогда
		СтруктураДанныхПояснения2.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения3" Тогда
		СтруктураДанныхПояснения3.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения4" Тогда
		СтруктураДанныхПояснения4.Очистить();
		// Обновление структуры блоков разделов отчета. Ранее сохраненные отчеты могут содержать строки
		// неиспользующиеся в актуальных алгоритмах.
		БлокиМакета = НоваяСтруктураБлоковПояснения4();
		СтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения5" Тогда
		СтруктураДанныхПояснения5.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения6" Тогда
		СтруктураДанныхПояснения6.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения7" Тогда
		СтруктураДанныхПояснения7.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения8" Тогда
		СтруктураДанныхПояснения8.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения9" Тогда
		СтруктураДанныхПояснения9.Очистить();
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетностиОбычная", "Х");
				СтруктураДанныхБаланс.Вставить("ВидОтчетностиЛиквидационная", "");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетностиОбычная", "");
				СтруктураДанныхБаланс.Вставить("ВидОтчетностиЛиквидационная", "Х");
			КонецЕсли;
			
		ИначеЕсли ОчищатьНомерКорректировки Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ВидСдачиОтчетности = 1;
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			СтруктураДанныхБаланс.Вставить("ВидОтчетностиОбычная", "Х");
			СтруктураДанныхБаланс.Вставить("ВидОтчетностиЛиквидационная", "");
			
			ВидОтчетностиОбычная = ТабличныйДокумент.Области.Найти("ВидОтчетностиОбычная");
			ВидОтчетностиЛиквидационная = ТабличныйДокумент.Области.Найти("ВидОтчетностиЛиквидационная");
			Если ВидОтчетностиОбычная <> Неопределено Тогда
				ВидОтчетностиОбычная.Значение = "Х";
				ВидОтчетностиЛиквидационная.Значение = "";
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДанныхБаланс.Вставить("АудитДа",      СохраняемыеЗначения.АудитДа);
		СтруктураДанныхБаланс.Вставить("АудитНет",     СохраняемыеЗначения.АудитНет);
		СтруктураДанныхБаланс.Вставить("АудиторИНН",   СохраняемыеЗначения.АудиторИНН);
		СтруктураДанныхБаланс.Вставить("АудиторОГРН",  СохраняемыеЗначения.АудиторОГРН);
		СтруктураДанныхБаланс.Вставить("НаимАудитора", СохраняемыеЗначения.НаимАудитора);
		
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
	
	ПараметрыОтчета = РегламентированнаяОтчетность.ПараметрыДополненияСтруктурыМногострочныхЧастей();
	ПараметрыОтчета.Организация              = СтруктураРеквизитовФормы.Организация;
	ПараметрыОтчета.ГруппаОрганизаций        = СтруктураРеквизитовФормы.ГруппаОрганизаций;
	ПараметрыОтчета.мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПараметрыОтчета.мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;

	РегламентированнаяОтчетность.ДополнитьСтруктуруМногострочныхЧастей(ПараметрыОтчета, СтруктураМногострочныхЧастей);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	ОбработатьПоляНалоговогоОргана();
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очистка расшифровки.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Если НаимТекущегоРаздела <> "ДополнительныеФайлы" Тогда
				Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
					Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Продолжить;
					КонецЕсли;
					СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	ПоказателиНеПодлежащиеОчистке.Добавить("НомерКорректировки");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетностиОбычная");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетностиЛиквидационная");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаПодписиОтчета");
	
	ПоказателиНеПодлежащиеОчистке.Добавить("АудитДа");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудитНет");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудиторИНН");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудиторОГРН");
	ПоказателиНеПодлежащиеОчистке.Добавить("НаимАудитора");
	
	ПоказателиНеПодлежащиеОчистке.Добавить("КодНО");
	ПоказателиНеПодлежащиеОчистке.Добавить("КПП");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Удаление всех строк многострочных блоков кроме первой.
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если ЗначениеЗаполнено(НаимТекущегоРаздела)
		   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// Очистка структуры группы и воссоздание строки по умолчанию.
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	ОчисткаРасчетаАктивов = СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов"
		ИЛИ НаимТекущегоРаздела = "РасчетАктивов";
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];
		
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита
		   И ТекущаяОбласть.СодержитЗначение = Истина И ТипЗнч(ТекущаяОбласть.Значение) <> Тип("Число")
		   ИЛИ ОчисткаРасчетаАктивов Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ПроверкаСоотношений", Истина);
	ПараметрыВыбора.Вставить("Автосохранение", Ложь);
	ПараметрыВыбора.Вставить("СчетчикСтраниц", Ложь);
	ПараметрыВыбора.Вставить("ЗначенияИзСписка", Ложь);
	ПараметрыВыбора.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		ПараметрыВыбора.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ДоступныеЕдиницыИзмерения = Новый Массив;
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1);
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", ПараметрыВыбора);
	ПараметрыФормы.Вставить("ДоступныеЕдиницыИзмерения", ДоступныеЕдиницыИзмерения);
	
	ИмяФормыНастроек = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	                 + "НастройкиОтчета";
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	ЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			ЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ ЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрЧГ0(ИсходноеЧисло)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(ИсходноеЧисло);
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачалаОперации <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(
			"ЗаполнениеФормыБухгалтерскаяОтчетность", 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтотОбъект, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, 0);
	СтруктураРезультата.Вставить("СтруктураОшибок"				, Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"		, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	СформироватьСлужебныеДанные();
	ВидимыеРазделы = ВидимыеРазделы();

	Если ВидимыеРазделы.Баланс Тогда
	
		// Проверки Бухгалтерского баланса
		ПроверкаКС_01_01(СтруктураРезультата);
		ПроверкаКС_01_02(СтруктураРезультата);
		ПроверкаКС_01_03(СтруктураРезультата);
		ПроверкаКС_02_01(СтруктураРезультата);
		ПроверкаКС_02_02(СтруктураРезультата);
		ПроверкаКС_02_03(СтруктураРезультата);
		
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ПроверкаКС_03_01(СтруктураРезультата);
			ПроверкаКС_03_02(СтруктураРезультата);
			ПроверкаКС_03_03(СтруктураРезультата);
		Иначе
			ПроверкаКС_03_04(СтруктураРезультата);
			ПроверкаКС_03_05(СтруктураРезультата);
			ПроверкаКС_03_06(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_04_01(СтруктураРезультата);
		ПроверкаКС_04_02(СтруктураРезультата);
		ПроверкаКС_04_03(СтруктураРезультата);
		ПроверкаКС_05_01(СтруктураРезультата);
		ПроверкаКС_05_02(СтруктураРезультата);
		ПроверкаКС_05_03(СтруктураРезультата);
		ПроверкаКС_06_01(СтруктураРезультата);
		ПроверкаКС_06_02(СтруктураРезультата);
		ПроверкаКС_06_03(СтруктураРезультата);
		ПроверкаКС_07_01(СтруктураРезультата);
		ПроверкаКС_07_02(СтруктураРезультата);
		ПроверкаКС_07_03(СтруктураРезультата);
		ПроверкаКС_08_01(СтруктураРезультата);
		ПроверкаКС_08_02(СтруктураРезультата);
		ПроверкаКС_08_03(СтруктураРезультата);
		ПроверкаКС_08_04(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОФР Тогда
	
		// Проверки Отчета о финансовых результатах
		ПроверкаКС_09_01(СтруктураРезультата);
		ПроверкаКС_09_02(СтруктураРезультата);
		ПроверкаКС_10_01(СтруктураРезультата);
		ПроверкаКС_10_02(СтруктураРезультата);
		ПроверкаКС_11_01(СтруктураРезультата);
		ПроверкаКС_11_02(СтруктураРезультата);
		
		Если НЕ ЭтоОФР2019(СтруктураОтчета) Тогда
			ПроверкаКС_12_01(СтруктураРезультата);
			ПроверкаКС_12_02(СтруктураРезультата);
			ПроверкаКС_12_10_доп(СтруктураРезультата);
			ПроверкаКС_12_11_доп(СтруктураРезультата);
		Иначе
			ПроверкаКС_12_03(СтруктураРезультата);
			ПроверкаКС_12_04(СтруктураРезультата);
		КонецЕсли;
		
		Если НЕ ЭтоОФР2019(СтруктураОтчета) Тогда
			ПроверкаКС_13_01(СтруктураРезультата);
			ПроверкаКС_13_02(СтруктураРезультата);
		Иначе
			ПроверкаКС_13_03(СтруктураРезультата);
			ПроверкаКС_13_04(СтруктураРезультата);
		КонецЕсли;
	
	КонецЕсли;

	Если ВидимыеРазделы.ОИК Тогда
	
		// Проверки Отчета об изменениях капитала
		ПроверкаКС_14_00(СтруктураРезультата);
		ПроверкаКС_15_00(СтруктураРезультата);
		
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ПроверкаКС_16_01(СтруктураРезультата);
		Иначе
			ПроверкаКС_16_02(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_17_00(СтруктураРезультата);
		ПроверкаКС_18_00(СтруктураРезультата);
		ПроверкаКС_19_00(СтруктураРезультата);
		ПроверкаКС_20_00(СтруктураРезультата);
		ПроверкаКС_21_00(СтруктураРезультата);
		
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ПроверкаКС_22_01(СтруктураРезультата);
		Иначе
			ПроверкаКС_22_02(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_23_00(СтруктураРезультата);
		ПроверкаКС_24_00(СтруктураРезультата);
		ПроверкаКС_25_00(СтруктураРезультата);
		ПроверкаКС_26_00(СтруктураРезультата);
		ПроверкаКС_27_00(СтруктураРезультата);
		
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ПроверкаКС_28_01(СтруктураРезультата);
		Иначе
			ПроверкаКС_28_02(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_29_00(СтруктураРезультата);
		ПроверкаКС_30_00(СтруктураРезультата);
		ПроверкаКС_31_00(СтруктураРезультата);
		ПроверкаКС_32_01(СтруктураРезультата);
		ПроверкаКС_32_02(СтруктураРезультата);
		ПроверкаКС_33_00(СтруктураРезультата);
		ПроверкаКС_34_01(СтруктураРезультата);
		ПроверкаКС_34_02(СтруктураРезультата);
		ПроверкаКС_35_01(СтруктураРезультата);
		ПроверкаКС_35_02(СтруктураРезультата);
		ПроверкаКС_35_03(СтруктураРезультата);
		ПроверкаКС_35_04(СтруктураРезультата);
		ПроверкаКС_36_01(СтруктураРезультата);
		ПроверкаКС_36_02(СтруктураРезультата);
		ПроверкаКС_36_03(СтруктураРезультата);
		ПроверкаКС_36_04(СтруктураРезультата);
		ПроверкаКС_37_01(СтруктураРезультата);
		ПроверкаКС_37_02(СтруктураРезультата);
		ПроверкаКС_38_00(СтруктураРезультата);
		ПроверкаКС_39_01(СтруктураРезультата);
		ПроверкаКС_39_02(СтруктураРезультата);
		ПроверкаКС_40_01(СтруктураРезультата);
		ПроверкаКС_40_02(СтруктураРезультата);
		ПроверкаКС_40_03(СтруктураРезультата);
		ПроверкаКС_40_04(СтруктураРезультата);
		ПроверкаКС_41_01(СтруктураРезультата);
		ПроверкаКС_41_02(СтруктураРезультата);
		ПроверкаКС_41_03(СтруктураРезультата);
		ПроверкаКС_41_04(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОДДС Тогда
	
		// Проверки Отчета о движении денежных средств
		ПроверкаКС_42_01(СтруктураРезультата);
		ПроверкаКС_42_02(СтруктураРезультата);
		ПроверкаКС_43_01(СтруктураРезультата);
		ПроверкаКС_43_02(СтруктураРезультата);
		ПроверкаКС_44_01(СтруктураРезультата);
		ПроверкаКС_44_02(СтруктураРезультата);
		ПроверкаКС_45_01(СтруктураРезультата);
		ПроверкаКС_45_02(СтруктураРезультата);
		ПроверкаКС_46_01(СтруктураРезультата);
		ПроверкаКС_46_02(СтруктураРезультата);
		ПроверкаКС_47_01(СтруктураРезультата);
		ПроверкаКС_47_02(СтруктураРезультата);
		ПроверкаКС_48_01(СтруктураРезультата);
		ПроверкаКС_48_02(СтруктураРезультата);
		ПроверкаКС_49_01(СтруктураРезультата);
		ПроверкаКС_49_02(СтруктураРезультата);
		ПроверкаКС_50_01(СтруктураРезультата);
		ПроверкаКС_50_02(СтруктураРезультата);
		ПроверкаКС_51_01(СтруктураРезультата);
		ПроверкаКС_51_02(СтруктураРезультата);
		ПроверкаКС_52_01(СтруктураРезультата);
		ПроверкаКС_52_02(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОЦИС Тогда
	
		// Проверки Отчета о целевом использовании средств
		ПроверкаКС_53_01(СтруктураРезультата);
		ПроверкаКС_53_02(СтруктураРезультата);
		ПроверкаКС_54_01(СтруктураРезультата);
		ПроверкаКС_54_02(СтруктураРезультата);
		ПроверкаКС_55_01(СтруктураРезультата);
		ПроверкаКС_55_02(СтруктураРезультата);
		ПроверкаКС_56_01(СтруктураРезультата);
		ПроверкаКС_56_02(СтруктураРезультата);
		ПроверкаКС_57_01(СтруктураРезультата);
		ПроверкаКС_57_02(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.Баланс Тогда
	
		// Проверки Бухгалтерского баланса
		ПроверкаКС_58_01(СтруктураРезультата);
		ПроверкаКС_58_02(СтруктураРезультата);
		ПроверкаКС_58_03(СтруктураРезультата);
		ПроверкаКС_58_04(СтруктураРезультата);
		ПроверкаКС_58_05(СтруктураРезультата);
		ПроверкаКС_58_06(СтруктураРезультата);
		ПроверкаКС_58_07(СтруктураРезультата);
		ПроверкаКС_58_08(СтруктураРезультата);
		ПроверкаКС_58_09(СтруктураРезультата);
		ПроверкаКС_58_10(СтруктураРезультата);
		ПроверкаКС_58_11(СтруктураРезультата);
		ПроверкаКС_58_12(СтруктураРезультата);
		ПроверкаКС_58_13(СтруктураРезультата);
		ПроверкаКС_58_14(СтруктураРезультата);
		ПроверкаКС_58_15(СтруктураРезультата);
		ПроверкаКС_58_16(СтруктураРезультата);
		ПроверкаКС_58_17(СтруктураРезультата);
		ПроверкаКС_58_18(СтруктураРезультата);
		ПроверкаКС_58_19(СтруктураРезультата);
		ПроверкаКС_58_20(СтруктураРезультата);
		ПроверкаКС_58_21(СтруктураРезультата);
		ПроверкаКС_58_22(СтруктураРезультата);
		ПроверкаКС_58_23(СтруктураРезультата);
		ПроверкаКС_58_24(СтруктураРезультата);
		ПроверкаКС_58_25(СтруктураРезультата);
		ПроверкаКС_58_26(СтруктураРезультата);
		ПроверкаКС_58_27(СтруктураРезультата);
		ПроверкаКС_58_28(СтруктураРезультата);
		ПроверкаКС_58_29(СтруктураРезультата);
		ПроверкаКС_58_30(СтруктураРезультата);
		ПроверкаКС_58_31(СтруктураРезультата);
		ПроверкаКС_58_32(СтруктураРезультата);
		ПроверкаКС_58_33(СтруктураРезультата);
		ПроверкаКС_58_34(СтруктураРезультата);
		ПроверкаКС_58_35(СтруктураРезультата);
		ПроверкаКС_58_36(СтруктураРезультата);
		ПроверкаКС_58_37(СтруктураРезультата);
		ПроверкаКС_58_38(СтруктураРезультата);
		ПроверкаКС_58_39(СтруктураРезультата);
		ПроверкаКС_58_40(СтруктураРезультата);
		ПроверкаКС_58_41(СтруктураРезультата);
		ПроверкаКС_58_42(СтруктураРезультата);
		ПроверкаКС_58_43(СтруктураРезультата);
		ПроверкаКС_58_44(СтруктураРезультата);
		ПроверкаКС_58_45(СтруктураРезультата);
		ПроверкаКС_58_46(СтруктураРезультата);
		ПроверкаКС_58_47(СтруктураРезультата);
		ПроверкаКС_58_48(СтруктураРезультата);
		ПроверкаКС_58_49(СтруктураРезультата);
		ПроверкаКС_58_50(СтруктураРезультата);
		ПроверкаКС_58_51(СтруктураРезультата);
		ПроверкаКС_58_52(СтруктураРезультата);
		ПроверкаКС_58_53(СтруктураРезультата);
		ПроверкаКС_58_54(СтруктураРезультата);
	
		Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
			ПроверкаКС_58_55(СтруктураРезультата);
			ПроверкаКС_58_56(СтруктураРезультата);
			ПроверкаКС_58_57(СтруктураРезультата);
		КонецЕсли;
		
		ПроверкаКС_58_58(СтруктураРезультата);
		ПроверкаКС_58_59(СтруктураРезультата);
		ПроверкаКС_58_60(СтруктураРезультата);
		ПроверкаКС_58_61(СтруктураРезультата);
		ПроверкаКС_58_62(СтруктураРезультата);
		ПроверкаКС_58_63(СтруктураРезультата);
		ПроверкаКС_58_64(СтруктураРезультата);
		ПроверкаКС_58_65(СтруктураРезультата);
		ПроверкаКС_58_66(СтруктураРезультата);
		ПроверкаКС_58_67(СтруктураРезультата);
		ПроверкаКС_58_68(СтруктураРезультата);
		ПроверкаКС_58_69(СтруктураРезультата);
		ПроверкаКС_58_70(СтруктураРезультата);
		ПроверкаКС_58_71(СтруктураРезультата);
		ПроверкаКС_58_72(СтруктураРезультата);
		ПроверкаКС_58_73(СтруктураРезультата);
		ПроверкаКС_58_74(СтруктураРезультата);
		ПроверкаКС_58_75(СтруктураРезультата);
		ПроверкаКС_58_76(СтруктураРезультата);
		ПроверкаКС_58_77(СтруктураРезультата);
		ПроверкаКС_58_78(СтруктураРезультата);
		ПроверкаКС_58_79(СтруктураРезультата);
		ПроверкаКС_58_80(СтруктураРезультата);
		ПроверкаКС_58_81(СтруктураРезультата);
		ПроверкаКС_58_82(СтруктураРезультата);
		ПроверкаКС_58_83(СтруктураРезультата);
		ПроверкаКС_58_84(СтруктураРезультата);
		ПроверкаКС_58_85(СтруктураРезультата);
		ПроверкаКС_58_86(СтруктураРезультата);
		ПроверкаКС_58_87(СтруктураРезультата);
		ПроверкаКС_58_88(СтруктураРезультата);
		ПроверкаКС_58_89(СтруктураРезультата);
		ПроверкаКС_58_90(СтруктураРезультата);
		ПроверкаКС_58_91(СтруктураРезультата);
		ПроверкаКС_58_92(СтруктураРезультата);
		ПроверкаКС_58_93(СтруктураРезультата);
		ПроверкаКС_58_94(СтруктураРезультата);
		ПроверкаКС_58_95(СтруктураРезультата);
		ПроверкаКС_58_96(СтруктураРезультата);
		ПроверкаКС_58_97(СтруктураРезультата);
		ПроверкаКС_58_98(СтруктураРезультата);
		ПроверкаКС_58_99(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОФР Тогда
	
		// Проверки Отчета о финансовых результатах
		ПроверкаКС_59_01(СтруктураРезультата);
		ПроверкаКС_59_02(СтруктураРезультата);
		ПроверкаКС_59_03(СтруктураРезультата);
		ПроверкаКС_59_04(СтруктураРезультата);
		ПроверкаКС_59_05(СтруктураРезультата);
		ПроверкаКС_59_06(СтруктураРезультата);
		ПроверкаКС_59_07(СтруктураРезультата);
		ПроверкаКС_59_08(СтруктураРезультата);
		ПроверкаКС_59_09(СтруктураРезультата);
		ПроверкаКС_59_10(СтруктураРезультата);
		ПроверкаКС_59_11(СтруктураРезультата);
		ПроверкаКС_59_12(СтруктураРезультата);
		ПроверкаКС_59_13(СтруктураРезультата);
		ПроверкаКС_59_14(СтруктураРезультата);
		ПроверкаКС_59_15(СтруктураРезультата);
		ПроверкаКС_59_16(СтруктураРезультата);
		ПроверкаКС_59_17(СтруктураРезультата);
		ПроверкаКС_59_18(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОИК Тогда
	
		// Проверки Отчета об изменении капитала
		ПроверкаКС_60_01(СтруктураРезультата);
		ПроверкаКС_60_02(СтруктураРезультата);
		ПроверкаКС_60_03(СтруктураРезультата);
		ПроверкаКС_60_04(СтруктураРезультата);
		ПроверкаКС_60_05(СтруктураРезультата);
		ПроверкаКС_60_06(СтруктураРезультата);
		ПроверкаКС_60_07(СтруктураРезультата);
		ПроверкаКС_60_08(СтруктураРезультата);
		ПроверкаКС_60_09(СтруктураРезультата);
		ПроверкаКС_60_10(СтруктураРезультата);
		ПроверкаКС_60_11(СтруктураРезультата);
		ПроверкаКС_60_12(СтруктураРезультата);
		ПроверкаКС_60_13(СтруктураРезультата);
		ПроверкаКС_60_14(СтруктураРезультата);
		ПроверкаКС_60_15(СтруктураРезультата);
		ПроверкаКС_60_16(СтруктураРезультата);
		ПроверкаКС_60_17(СтруктураРезультата);
		ПроверкаКС_60_18(СтруктураРезультата);
		ПроверкаКС_60_19(СтруктураРезультата);
		ПроверкаКС_60_20(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОДДС Тогда
	
		// Проверки Отчета о движении денежных средств
		ПроверкаКС_61_01(СтруктураРезультата);
		ПроверкаКС_61_02(СтруктураРезультата);
		ПроверкаКС_61_03(СтруктураРезультата);
		ПроверкаКС_61_04(СтруктураРезультата);
		ПроверкаКС_61_05(СтруктураРезультата);
		ПроверкаКС_61_06(СтруктураРезультата);
		ПроверкаКС_61_07(СтруктураРезультата);
		ПроверкаКС_61_08(СтруктураРезультата);
		ПроверкаКС_61_09(СтруктураРезультата);
		ПроверкаКС_61_10(СтруктураРезультата);
		ПроверкаКС_61_11(СтруктураРезультата);
		ПроверкаКС_61_12(СтруктураРезультата);
		ПроверкаКС_61_13(СтруктураРезультата);
		ПроверкаКС_61_14(СтруктураРезультата);
		ПроверкаКС_61_15(СтруктураРезультата);
		ПроверкаКС_61_16(СтруктураРезультата);
		ПроверкаКС_61_17(СтруктураРезультата);
		ПроверкаКС_61_18(СтруктураРезультата);
		ПроверкаКС_61_19(СтруктураРезультата);
		ПроверкаКС_61_20(СтруктураРезультата);
		ПроверкаКС_61_21(СтруктураРезультата);
		ПроверкаКС_61_22(СтруктураРезультата);
		ПроверкаКС_61_23(СтруктураРезультата);
		ПроверкаКС_61_24(СтруктураРезультата);
		ПроверкаКС_61_25(СтруктураРезультата);
		ПроверкаКС_61_26(СтруктураРезультата);
		ПроверкаКС_61_27(СтруктураРезультата);
		ПроверкаКС_61_28(СтруктураРезультата);
		ПроверкаКС_61_29(СтруктураРезультата);
		ПроверкаКС_61_30(СтруктураРезультата);
		ПроверкаКС_61_31(СтруктураРезультата);
		ПроверкаКС_61_32(СтруктураРезультата);
		ПроверкаКС_61_33(СтруктураРезультата);
		ПроверкаКС_61_34(СтруктураРезультата);
		ПроверкаКС_61_35(СтруктураРезультата);
		ПроверкаКС_61_36(СтруктураРезультата);
		ПроверкаКС_61_37(СтруктураРезультата);
		ПроверкаКС_61_38(СтруктураРезультата);
		ПроверкаКС_61_39(СтруктураРезультата);
		ПроверкаКС_61_40(СтруктураРезультата);
		ПроверкаКС_61_41(СтруктураРезультата);
		ПроверкаКС_61_42(СтруктураРезультата);
		ПроверкаКС_61_43(СтруктураРезультата);
		ПроверкаКС_61_44(СтруктураРезультата);
		ПроверкаКС_61_45(СтруктураРезультата);
		ПроверкаКС_61_46(СтруктураРезультата);
		ПроверкаКС_61_47(СтруктураРезультата);
		ПроверкаКС_61_48(СтруктураРезультата);
		ПроверкаКС_61_49(СтруктураРезультата);
		ПроверкаКС_61_50(СтруктураРезультата);
		ПроверкаКС_61_51(СтруктураРезультата);
		ПроверкаКС_61_52(СтруктураРезультата);
		ПроверкаКС_61_53(СтруктураРезультата);
		ПроверкаКС_61_54(СтруктураРезультата);
		ПроверкаКС_61_55(СтруктураРезультата);
		ПроверкаКС_61_56(СтруктураРезультата);
		ПроверкаКС_61_57(СтруктураРезультата);
		ПроверкаКС_61_58(СтруктураРезультата);
		ПроверкаКС_61_59(СтруктураРезультата);
		ПроверкаКС_61_60(СтруктураРезультата);
		ПроверкаКС_61_61(СтруктураРезультата);
		ПроверкаКС_61_62(СтруктураРезультата);
		ПроверкаКС_61_63(СтруктураРезультата);
		ПроверкаКС_61_64(СтруктураРезультата);
		ПроверкаКС_61_65(СтруктураРезультата);
		ПроверкаКС_61_66(СтруктураРезультата);
		ПроверкаКС_61_67(СтруктураРезультата);
		ПроверкаКС_61_68(СтруктураРезультата);
		ПроверкаКС_61_69(СтруктураРезультата);
		ПроверкаКС_61_70(СтруктураРезультата);
		ПроверкаКС_61_71(СтруктураРезультата);
		ПроверкаКС_61_72(СтруктураРезультата);
		ПроверкаКС_61_73(СтруктураРезультата);
		ПроверкаКС_61_74(СтруктураРезультата);
		ПроверкаКС_61_75(СтруктураРезультата);
		ПроверкаКС_61_76(СтруктураРезультата);
		ПроверкаКС_61_77(СтруктураРезультата);
		ПроверкаКС_61_78(СтруктураРезультата);
		ПроверкаКС_61_79(СтруктураРезультата);
		ПроверкаКС_61_80(СтруктураРезультата);
	
	КонецЕсли;

	Если ВидимыеРазделы.ОЦИС Тогда
	
		// Проверки Отчета о целевом использовании средств
		ПроверкаКС_62_01(СтруктураРезультата);
		ПроверкаКС_62_02(СтруктураРезультата);
		ПроверкаКС_62_03(СтруктураРезультата);
		ПроверкаКС_62_04(СтруктураРезультата);
		ПроверкаКС_62_05(СтруктураРезультата);
		ПроверкаКС_62_06(СтруктураРезультата);
		ПроверкаКС_62_07(СтруктураРезультата);
		ПроверкаКС_62_08(СтруктураРезультата);
		ПроверкаКС_62_09(СтруктураРезультата);
		ПроверкаКС_62_10(СтруктураРезультата);
		ПроверкаКС_62_11(СтруктураРезультата);
		ПроверкаКС_62_12(СтруктураРезультата);
		ПроверкаКС_62_13(СтруктураРезультата);
		ПроверкаКС_62_14(СтруктураРезультата);
		ПроверкаКС_62_15(СтруктураРезультата);
		ПроверкаКС_62_16(СтруктураРезультата);
		ПроверкаКС_62_17(СтруктураРезультата);
		ПроверкаКС_62_18(СтруктураРезультата);
		ПроверкаКС_62_19(СтруктураРезультата);
		ПроверкаКС_62_20(СтруктураРезультата);
		ПроверкаКС_62_21(СтруктураРезультата);
		ПроверкаКС_62_22(СтруктураРезультата);
		ПроверкаКС_62_23(СтруктураРезультата);
		ПроверкаКС_62_24(СтруктураРезультата);
		ПроверкаКС_62_25(СтруктураРезультата);
		ПроверкаКС_62_26(СтруктураРезультата);
		ПроверкаКС_62_27(СтруктураРезультата);
		ПроверкаКС_62_28(СтруктураРезультата);
		ПроверкаКС_62_29(СтруктураРезультата);
		ПроверкаКС_62_30(СтруктураРезультата);
		ПроверкаКС_62_31(СтруктураРезультата);
		ПроверкаКС_62_32(СтруктураРезультата);
		ПроверкаКС_62_33(СтруктураРезультата);
		ПроверкаКС_62_34(СтруктураРезультата);
		ПроверкаКС_62_35(СтруктураРезультата);
		ПроверкаКС_62_36(СтруктураРезультата);
		ПроверкаКС_62_37(СтруктураРезультата);
		ПроверкаКС_62_38(СтруктураРезультата);
		ПроверкаКС_62_39(СтруктураРезультата);
		ПроверкаКС_62_40(СтруктураРезультата);
		ПроверкаКС_62_41(СтруктураРезультата);
		ПроверкаКС_62_42(СтруктураРезультата);
	
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиформулы , УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	РегламентированнаяОтчетность.ПоместитьВКэш(СписокРасшифровкиПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы" , СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей" , СтруктураРеквизитовФормы.КонтрольныеСоотношенияАдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Бухгалтерского_баланса

&НаСервере
Процедура ПроверкаКС_01_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.1';
													|en = '1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 1.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы внеоборотных активов в стр.1100 гр.4 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + ';
			|en = 'Значение суммы внеоборотных активов в стр.1100 гр.4 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + '") +
		НСтр("ru = '1160 + 1170 + 1180 + 1190) гр.4';
			|en = '1160 + 1170 + 1180 + 1190) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внеоборотных активов';
														|en = 'Ошибочная сумма внеоборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.2';
													|en = '1.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 1.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 1.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы внеоборотных активов в стр.1100 гр.5 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + ';
			|en = 'Значение суммы внеоборотных активов в стр.1100 гр.5 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + '") +
		НСтр("ru = '1160 + 1170 + 1180 + 1190) гр.5';
			|en = '1160 + 1170 + 1180 + 1190) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внеоборотных активов';
														|en = 'Ошибочная сумма внеоборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '1.3';
													|en = '1.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 1.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 1.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы внеоборотных активов в стр.1100 гр.6 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + ';
			|en = 'Значение суммы внеоборотных активов в стр.1100 гр.6 = стр.(1110 + 1120 + 1130 + 1140 + 1150 + '") +
		НСтр("ru = '1160 + 1170 + 1180 + 1190) гр.6';
			|en = '1160 + 1170 + 1180 + 1190) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма внеоборотных активов';
														|en = 'Ошибочная сумма внеоборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_01_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_01_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1100"		, "П00010011000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1110"		, "П00010011100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1120"		, "П00010011200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1130"		, "П00010011300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1140"		, "П00010011400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1150"		, "П00010011500" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1160"		, "П00010011600" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1170"		, "П00010011700" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1180"		, "П00010011800" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1190"		, "П00010011900" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1100.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1100.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.1';
													|en = '2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 2.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 2.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы оборотных активов в стр.1200 гр.4 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + ';
			|en = 'Значение суммы оборотных активов в стр.1200 гр.4 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + '") +
		НСтр("ru = '1260) гр.4';
			|en = '1260) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма оборотных активов';
														|en = 'Ошибочная сумма оборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.2';
													|en = '2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 2.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 2.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы оборотных активов в стр.1200 гр.5 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + ';
			|en = 'Значение суммы оборотных активов в стр.1200 гр.5 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + '") +
		НСтр("ru = '1260) гр.5';
			|en = '1260) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма оборотных активов';
														|en = 'Ошибочная сумма оборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '2.3';
													|en = '2.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 2.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 2.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы оборотных активов в стр.1200 гр.6 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + ';
			|en = 'Значение суммы оборотных активов в стр.1200 гр.6 = стр.(1210 + 1220 + 1230 + 1240 + 1250 + '") +
		НСтр("ru = '1260) гр.6';
			|en = '1260) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма оборотных активов';
														|en = 'Ошибочная сумма оборотных активов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_02_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_02_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1200"		, "П00010012000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1210"		, "П00010012100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1220"		, "П00010012200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1230"		, "П00010012300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1240"		, "П00010012400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1250"		, "П00010012500" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1260"		, "П00010012600" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.1';
													|en = '3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.4 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.4';
			|en = 'Значение суммы капитала в стр.1300 гр.4 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.2';
													|en = '3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.5 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.5';
			|en = 'Значение суммы капитала в стр.1300 гр.5 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.3';
													|en = '3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.6 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.6';
			|en = 'Значение суммы капитала в стр.1300 гр.6 = стр.(1310 + 1320 + 1340 + 1350 + 1360 + 1370) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.4';
													|en = '3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.4)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.4 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.4';
			|en = 'Значение суммы капитала в стр.1300 гр.4 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.5';
													|en = '3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.5)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.5 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.5';
			|en = 'Значение суммы капитала в стр.1300 гр.5 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '3.6';
													|en = '3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 3.6)';
													|en = 'Проверка Бухгалтерского баланса (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы капитала в стр.1300 гр.6 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.6';
			|en = 'Значение суммы капитала в стр.1300 гр.6 = стр.(1310 + 1320 + 1350 + 1360 + 1370) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_03_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_03_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1300"		, "П00010013000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1310"		, "П00010013100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1320"		, "П00010013200" + Настройки.Графа);
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателей.Вставить("Ф1П1340"		, "П00010013400" + Настройки.Графа);
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф1П1350"		, "П00010013500" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1360"		, "П00010013600" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1370"		, "П00010013700" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.1';
													|en = '4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 4.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 4.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы долгосрочных обязательств в стр.1400 гр.4 = стр.(1410 + 1420 + 1430 + 1450) гр.4';
			|en = 'Значение суммы долгосрочных обязательств в стр.1400 гр.4 = стр.(1410 + 1420 + 1430 + 1450) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма долгосрочных обязательств';
														|en = 'Ошибочная сумма долгосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.2';
													|en = '4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 4.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 4.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы долгосрочных обязательств в стр.1400 гр.5 = стр.(1410 + 1420 + 1430 + 1450) гр.5';
			|en = 'Значение суммы долгосрочных обязательств в стр.1400 гр.5 = стр.(1410 + 1420 + 1430 + 1450) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма долгосрочных обязательств';
														|en = 'Ошибочная сумма долгосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '4.3';
													|en = '4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 4.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 4.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы долгосрочных обязательств в стр.1400 гр.6 = стр.(1410 + 1420 + 1430 + 1450) гр.6';
			|en = 'Значение суммы долгосрочных обязательств в стр.1400 гр.6 = стр.(1410 + 1420 + 1430 + 1450) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма долгосрочных обязательств';
														|en = 'Ошибочная сумма долгосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_04_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_04_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1400"		, "П00010014000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1410"		, "П00010014100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1420"		, "П00010014200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1430"		, "П00010014300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1450"		, "П00010014500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1400.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_05_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.1';
													|en = '5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 5.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 5.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы краткосрочных обязательств в стр.1500 гр.4 = стр.(1510 + 1520 + 1530 + 1540 ';
			|en = 'Значение суммы краткосрочных обязательств в стр.1500 гр.4 = стр.(1510 + 1520 + 1530 + 1540 '") +
		НСтр("ru = '+ 1550) гр.4';
			|en = '+ 1550) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма краткосрочных обязательств';
														|en = 'Ошибочная сумма краткосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_05_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_05_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.2';
													|en = '5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 5.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 5.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы краткосрочных обязательств в стр.1500 гр.5 = стр.(1510 + 1520 + 1530 + 1540 ';
			|en = 'Значение суммы краткосрочных обязательств в стр.1500 гр.5 = стр.(1510 + 1520 + 1530 + 1540 '") +
		НСтр("ru = '+ 1550) гр.5';
			|en = '+ 1550) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма краткосрочных обязательств';
														|en = 'Ошибочная сумма краткосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_05_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_05_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '5.3';
													|en = '5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 5.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 5.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение суммы краткосрочных обязательств в стр.1500 гр.6 = стр.(1510 + 1520 + 1530 + 1540 ';
			|en = 'Значение суммы краткосрочных обязательств в стр.1500 гр.6 = стр.(1510 + 1520 + 1530 + 1540 '") +
		НСтр("ru = '+ 1550) гр.6';
			|en = '+ 1550) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма краткосрочных обязательств';
														|en = 'Ошибочная сумма краткосрочных обязательств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_05_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_05_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1500"		, "П00010015000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1510"		, "П00010015100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1520"		, "П00010015200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1530"		, "П00010015300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1540"		, "П00010015400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1550"		, "П00010015500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1500.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1500.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1500.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_06_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.1';
													|en = '6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 6.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 6.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.4 = стр.(1100 + 1200) гр.4';
			|en = 'Значение валюты баланса в стр.1600 гр.4 = стр.(1100 + 1200) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_06_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.2';
													|en = '6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 6.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 6.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.5 = стр.(1100 + 1200) гр.5';
			|en = 'Значение валюты баланса в стр.1600 гр.5 = стр.(1100 + 1200) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_06_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '6.3';
													|en = '6.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 6.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 6.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.6 = стр.(1100 + 1200) гр.6';
			|en = 'Значение валюты баланса в стр.1600 гр.6 = стр.(1100 + 1200) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_06_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_06_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1600"		, "П00010016000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1100"		, "П00010011000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1200"		, "П00010012000" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1600.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1600.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1600.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.1';
													|en = '7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 7.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 7.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.4 = стр.1700 гр.4';
			|en = 'Значение валюты баланса в стр.1600 гр.4 = стр.1700 гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_07_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.2';
													|en = '7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 7.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 7.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.5 = стр.1700 гр.5';
			|en = 'Значение валюты баланса в стр.1600 гр.5 = стр.1700 гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_07_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '7.3';
													|en = '7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 7.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 7.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1600 гр.6 = стр.1700 гр.6';
			|en = 'Значение валюты баланса в стр.1600 гр.6 = стр.1700 гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_07_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_07_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1600"		, "П00010016000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1700"		, "П00010017000" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1600.Значение, Показатели.Ф1П1700.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1600.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1700.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.1';
													|en = '8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 8.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 8.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1700 гр.4 = стр.(1300 + 1400 + 1500) гр.4';
			|en = 'Значение валюты баланса в стр.1700 гр.4 = стр.(1300 + 1400 + 1500) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_08_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.2';
													|en = '8.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 8.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 8.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1700 гр.5 = стр.(1300 + 1400 + 1500) гр.5';
			|en = 'Значение валюты баланса в стр.1700 гр.5 = стр.(1300 + 1400 + 1500) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_08_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.3';
													|en = '8.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 8.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 8.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валюты баланса в стр.1700 гр.6 = стр.(1300 + 1400 + 1500) гр.6';
			|en = 'Значение валюты баланса в стр.1700 гр.6 = стр.(1300 + 1400 + 1500) гр.6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная валюта баланса';
														|en = 'Ошибочная валюта баланса'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_08_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф1П1700"		, "П00010017000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1300"		, "П00010013000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1400"		, "П00010014000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф1П1500"		, "П00010015000" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф1П1700.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф1П1700.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф1П1700.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_08_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '8.4.доп';
													|en = '8.4.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 8.4.доп)';
													|en = 'Проверка Бухгалтерского баланса (КС 8.4.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение кода ОКВЭД2 Бухгалтерского баланса = коду ОКВЭД2, указанному в свойствах организации';
			|en = 'Значение кода ОКВЭД2 Бухгалтерского баланса = коду ОКВЭД2, указанному в свойствах организации'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Возможно неправильно указан код ОКВЭД2';
														|en = 'Возможно неправильно указан код ОКВЭД2'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьФормулу(Настройки);
	КодОКВЭДБаланса						= СокрЛП(СтруктураДанныхБаланс.ОргКодОКВЭД);
	КодОКВЭДБалансаСтр					= ?(ЗначениеЗаполнено(КодОКВЭДБаланса), КодОКВЭДБаланса, "(...)");
	КодОКВЭДОрганизации					= СокрЛП(СтруктураРеквизитовФормы.ОКВЭД2);
	КодОКВЭДОрганизацииСтр				= ?(ЗначениеЗаполнено(КодОКВЭДОрганизации), КодОКВЭДОрганизации, "(...)");
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	НоваяСтрока.ПредставлениеПоказателя = "Код ОКВЭД2 Бухгалтерского баланса";
	НоваяСтрока.ЗначениеПоказателя		= КодОКВЭДБалансаСтр;
	НоваяСтрока.ИмяПоказателя			= "ОргКодОКВЭД";
	НоваяСтрока.ИмяСтраницы				= СтруктураОтчета.Баланс.ИмяСтраницы;
	НоваяСтрока.Страница				= 1;
	НоваяСтрока.СсылкаНаДокументРО		= СтруктураРеквизитовФормы.мСохраненныйДок;
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	НоваяСтрока.ПредставлениеПоказателя = "Код ОКВЭД2 Организации";
	НоваяСтрока.ЗначениеПоказателя		= КодОКВЭДОрганизацииСтр;
	
	Настройки.ЭтоОшибка = ЗначениеЗаполнено(КодОКВЭДОрганизации) И НЕ КодОКВЭДБаланса = КодОКВЭДОрганизации;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", КодОКВЭДБалансаСтр);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", КодОКВЭДОрганизацииСтр);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_финансовых_результатах

&НаСервере
Процедура ПроверкаКС_09_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.1';
													|en = '9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 9.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 9.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валовой прибыли в стр.2100 гр.4 = стр.(2110 - 2120) гр.4';
			|en = 'Значение валовой прибыли в стр.2100 гр.4 = стр.(2110 - 2120) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма валовой прибыли';
														|en = 'Ошибочная сумма валовой прибыли'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_09_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '9.2';
													|en = '9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 9.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 9.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение валовой прибыли в стр.2100 гр.5 = стр.(2110 - 2120) гр.5';
			|en = 'Значение валовой прибыли в стр.2100 гр.5 = стр.(2110 - 2120) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма валовой прибыли';
														|en = 'Ошибочная сумма валовой прибыли'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_09_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_09_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2100"		, "П00010021000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2110"		, "П00010021100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2120"		, "П00010021200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2100.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2100.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '10.1';
													|en = '10.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 10.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 10.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение прибыли (убытка) от продаж в стр.2200 гр.4 = стр.(2100 - 2210 - 2220) гр.4';
			|en = 'Значение прибыли (убытка) от продаж в стр.2200 гр.4 = стр.(2100 - 2210 - 2220) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма прибыли (убытка) от продаж';
														|en = 'Ошибочная сумма прибыли (убытка) от продаж'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_10_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '10.2';
													|en = '10.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 10.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 10.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение прибыли (убытка) от продаж в стр.2200 гр.5 = стр.(2100 - 2210 - 2220) гр.5';
			|en = 'Значение прибыли (убытка) от продаж в стр.2200 гр.5 = стр.(2100 - 2210 - 2220) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма прибыли (убытка) от продаж';
														|en = 'Ошибочная сумма прибыли (убытка) от продаж'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_10_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_10_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2200"		, "П00010022000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2100"		, "П00010021000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2210"		, "П00010022100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2220"		, "П00010022200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.1';
													|en = '11.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 11.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 11.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение прибыли (убытка) до налогообложения в стр.2300 гр.4 = стр.(2200 + 2310 + 2320 - 2330 ';
			|en = 'Значение прибыли (убытка) до налогообложения в стр.2300 гр.4 = стр.(2200 + 2310 + 2320 - 2330 '") +
		НСтр("ru = '+ 2340 - 2350) гр.4';
			|en = '+ 2340 - 2350) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма прибыли (убытка) до налогообложения';
														|en = 'Ошибочная сумма прибыли (убытка) до налогообложения'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '11.2';
													|en = '11.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 11.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 11.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение прибыли (убытка) до налогообложения в стр.2300 гр.5 = стр.(2200 + 2310 + 2320 - 2330 ';
			|en = 'Значение прибыли (убытка) до налогообложения в стр.2300 гр.5 = стр.(2200 + 2310 + 2320 - 2330 '") +
		НСтр("ru = '+ 2340 - 2350) гр.5';
			|en = '+ 2340 - 2350) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма прибыли (убытка) до налогообложения';
														|en = 'Ошибочная сумма прибыли (убытка) до налогообложения'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_11_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_11_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2300"		, "П00010023000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2200"		, "П00010022000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2310"		, "П00010023100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2320"		, "П00010023200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2330"		, "П00010023300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2340"		, "П00010023400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2350"		, "П00010023500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.1';
													|en = '12.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение чистой прибыли (убытка) в стр.2400 гр.4 = стр.(2300 + 2410 + 2460) гр.4';
			|en = 'Значение чистой прибыли (убытка) в стр.2400 гр.4 = стр.(2300 + 2410 + 2460) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма чистой прибыли (убытка)';
														|en = 'Ошибочная сумма чистой прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.2';
													|en = '12.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение чистой прибыли (убытка) в стр.2400 гр.5 = стр.(2300 + 2410 + 2460) гр.5';
			|en = 'Значение чистой прибыли (убытка) в стр.2400 гр.5 = стр.(2300 + 2410 + 2460) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма чистой прибыли (убытка)';
														|en = 'Ошибочная сумма чистой прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.3';
													|en = '12.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2019г""';
													|en = 'Отчетность в редакции ""за 2019г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.3)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение чистой прибыли (убытка) в стр.2400 гр.4 = стр.(2300 + 2410 + 2430 + 2450 + 2460) гр.4';
			|en = 'Значение чистой прибыли (убытка) в стр.2400 гр.4 = стр.(2300 + 2410 + 2430 + 2450 + 2460) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма чистой прибыли (убытка)';
														|en = 'Ошибочная сумма чистой прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.4';
													|en = '12.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2019г""';
													|en = 'Отчетность в редакции ""за 2019г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.4)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение чистой прибыли (убытка) в стр.2400 гр.5 = стр.(2300 + 2410 + 2430 + 2450 + 2460) гр.5';
			|en = 'Значение чистой прибыли (убытка) в стр.2400 гр.5 = стр.(2300 + 2410 + 2430 + 2450 + 2460) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма чистой прибыли (убытка)';
														|en = 'Ошибочная сумма чистой прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_10_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.10.доп';
													|en = '12.10.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.10.доп)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.10.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение налога на прибыль в стр.2410 гр.4 = стр.(2411 + 2412) гр.4';
			|en = 'Значение налога на прибыль в стр.2410 гр.4 = стр.(2411 + 2412) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога на прибыль';
														|en = 'Ошибочная сумма налога на прибыль'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код_доп(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_11_доп(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '12.11.доп';
													|en = '12.11.доп'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Проверка носит справочный характер';
													|en = 'Проверка носит справочный характер'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 12.11.доп)';
													|en = 'Проверка Отчета о финансовых результатах (КС 12.11.доп)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение налога на прибыль в стр.2410 гр.5 = стр.(2411 + 2412) гр.5';
			|en = 'Значение налога на прибыль в стр.2410 гр.5 = стр.(2411 + 2412) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма налога на прибыль';
														|en = 'Ошибочная сумма налога на прибыль'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_12_код_доп(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_код(Настройки)
	
	Перем Показатели;
	
	Если ДанныеКС.Год = 2019 Тогда
		// на 2019 год КС отключено по письму ФНС
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2400"		, "П00010024000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2300"		, "П00010023000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2410"		, "П00010024100" + Настройки.Графа);
	
	Если ЭтоОФР2019(СтруктураОтчета) Тогда
		ИменаПоказателей.Вставить("Ф2П2430"		, "П00010024300" + Настройки.Графа);
		ИменаПоказателей.Вставить("Ф2П2450"		, "П00010024500" + Настройки.Графа);
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф2П2460"		, "П00010024600" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2400.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_12_код_доп(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2410"		, "П00010024100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2411"		, "П00010024110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2412"		, "П00010024120" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2410.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2410.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2410.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.1';
													|en = '13.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 13.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 13.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение совокупного финансового результата в стр.2500 гр.4 = стр.(2400 + 2510 + 2520 + 2530) гр.4';
			|en = 'Значение совокупного финансового результата в стр.2500 гр.4 = стр.(2400 + 2510 + 2520 + 2530) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма совокупного финансового результата';
														|en = 'Ошибочная сумма совокупного финансового результата'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.2';
													|en = '13.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2020г""';
													|en = 'Отчетность в редакции ""за 2020г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 13.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 13.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение совокупного финансового результата в стр.2500 гр.5 = стр.(2400 + 2510 + 2520 + 2530) гр.5';
			|en = 'Значение совокупного финансового результата в стр.2500 гр.5 = стр.(2400 + 2510 + 2520 + 2530) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма совокупного финансового результата';
														|en = 'Ошибочная сумма совокупного финансового результата'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.3';
													|en = '13.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2019г""';
													|en = 'Отчетность в редакции ""за 2019г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 13.3)';
													|en = 'Проверка Отчета о финансовых результатах (КС 13.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение совокупного финансового результата в стр.2500 гр.4 = стр.(2400 + 2510 + 2520) гр.4';
			|en = 'Значение совокупного финансового результата в стр.2500 гр.4 = стр.(2400 + 2510 + 2520) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма совокупного финансового результата';
														|en = 'Ошибочная сумма совокупного финансового результата'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '13.4';
													|en = '13.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Отчетность в редакции ""за 2019г""';
													|en = 'Отчетность в редакции ""за 2019г""'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Отключено для 2019 года по письму ФНС';
													|en = 'Отключено для 2019 года по письму ФНС'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 13.4)';
													|en = 'Проверка Отчета о финансовых результатах (КС 13.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение совокупного финансового результата в стр.2500 гр.5 = стр.(2400 + 2510 + 2520) гр.5';
			|en = 'Значение совокупного финансового результата в стр.2500 гр.5 = стр.(2400 + 2510 + 2520) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма совокупного финансового результата';
														|en = 'Ошибочная сумма совокупного финансового результата'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_13_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_13_код(Настройки)
	
	Перем Показатели;
	
	Если ДанныеКС.Год = 2019 Тогда
		// на 2019 год КС отключено по письму ФНС
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф2П2500"		, "П00010025000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2400"		, "П00010024000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2510"		, "П00010025100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф2П2520"		, "П00010025200" + Настройки.Графа);
	
	Если НЕ ЭтоОФР2019(СтруктураОтчета) Тогда
		ИменаПоказателей.Вставить("Ф2П2530"		, "П00010025300" + Настройки.Графа);
	КонецЕсли;
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф2П2500.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф2П2500.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф2П2500.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_об_изменениях_капитала

&НаСервере
Процедура ПроверкаКС_14_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '14';
													|en = '14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 14)';
													|en = 'Проверка Отчета об изменениях капитала (КС 14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уставного капитала в стр.3100 гр.1 = стр.1310 гр.6 Бухгалтерского баланса';
			|en = 'Значение уставного капитала в стр.3100 гр.1 = стр.1310 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уставного капитала';
														|en = 'Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310003");
	ИменаПоказателей.Вставить("Ф1П1310"		, "П000100131006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1310, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, Показатели.Ф1П1310.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1310.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_15_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '15';
													|en = '15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 15)';
													|en = 'Проверка Отчета об изменениях капитала (КС 15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение выкупленных акций в стр.3100 гр.2 = стр.1320 гр.6 Бухгалтерского баланса';
			|en = 'Значение выкупленных акций в стр.3100 гр.2 = стр.1320 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выкупленных акций';
														|en = 'Ошибочная сумма выкупленных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310004");
	ИменаПоказателей.Вставить("Ф1П1320"		, "П000100132006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1320, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, Показатели.Ф1П1320.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1320.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '16.1';
													|en = '16.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 16.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 16.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3100 гр.3 = стр.(1340 + 1350) гр.6 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3100 гр.3 = стр.(1340 + 1350) гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_16_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '16.2';
													|en = '16.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 16.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 16.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3100 гр.3 = стр.1350 гр.6 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3100 гр.3 = стр.1350 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_16_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_16_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310005");
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателей.Вставить("Ф1П1340"		, "П000100134006");
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф1П1350"		, "П000100135006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1340, СтруктураДанныхБаланс);
	КонецЕсли;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1350, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3100.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_17_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '17';
													|en = '17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 17)';
													|en = 'Проверка Отчета об изменениях капитала (КС 17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение резервного капитала в стр.3100 гр.4 = стр.1360 гр.6 Бухгалтерского баланса';
			|en = 'Значение резервного капитала в стр.3100 гр.4 = стр.1360 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма резервного капитала';
														|en = 'Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310006");
	ИменаПоказателей.Вставить("Ф1П1360"		, "П000100136006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1360, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, Показатели.Ф1П1360.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1360.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_18_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '18';
													|en = '18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 18)';
													|en = 'Проверка Отчета об изменениях капитала (КС 18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение нераспределенной прибыли (убытка) в стр.3100 гр.5 = стр.1370 гр.6 Бухгалтерского баланса';
			|en = 'Значение нераспределенной прибыли (убытка) в стр.3100 гр.5 = стр.1370 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма нераспределенной прибыли (убытка)';
														|en = 'Ошибочная сумма нераспределенной прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310007");
	ИменаПоказателей.Вставить("Ф1П1370"		, "П000100137006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1370, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, Показатели.Ф1П1370.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1370.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_19_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '19';
													|en = '19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 19)';
													|en = 'Проверка Отчета об изменениях капитала (КС 19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение капитала в стр.3100 гр.6 = стр.1300 гр.6 Бухгалтерского баланса';
			|en = 'Значение капитала в стр.3100 гр.6 = стр.1300 гр.6 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310008");
	ИменаПоказателей.Вставить("Ф1П1300"		, "П000100130006");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3100, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1300, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3100.Значение, Показатели.Ф1П1300.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1300.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_20_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '20';
													|en = '20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 20)';
													|en = 'Проверка Отчета об изменениях капитала (КС 20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уставного капитала в стр.3200 гр.1 = стр.1310 гр.5 Бухгалтерского баланса';
			|en = 'Значение уставного капитала в стр.3200 гр.1 = стр.1310 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уставного капитала';
														|en = 'Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320003");
	ИменаПоказателей.Вставить("Ф1П1310"		, "П000100131005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1310, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, Показатели.Ф1П1310.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1310.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_21_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '21';
													|en = '21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 21)';
													|en = 'Проверка Отчета об изменениях капитала (КС 21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение выкупленных акций в стр.3200 гр.2 = стр.1320 гр.5 Бухгалтерского баланса';
			|en = 'Значение выкупленных акций в стр.3200 гр.2 = стр.1320 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выкупленных акций';
														|en = 'Ошибочная сумма выкупленных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320004");
	ИменаПоказателей.Вставить("Ф1П1320"		, "П000100132005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1320, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, Показатели.Ф1П1320.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1320.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_22_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '22.1';
													|en = '22.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 22.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 22.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3200 гр.3 = стр.(1340 + 1350) гр.5 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3200 гр.3 = стр.(1340 + 1350) гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_22_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_22_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '22.2';
													|en = '22.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 22.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 22.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3200 гр.3 = стр.1350 гр.5 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3200 гр.3 = стр.1350 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_22_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_22_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320005");
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателей.Вставить("Ф1П1340"		, "П000100134005");
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф1П1350"		, "П000100135005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1340, СтруктураДанныхБаланс);
	КонецЕсли;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1350, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_23_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '23';
													|en = '23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 23)';
													|en = 'Проверка Отчета об изменениях капитала (КС 23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение резервного капитала в стр.3200 гр.4 = стр.1360 гр.5 Бухгалтерского баланса';
			|en = 'Значение резервного капитала в стр.3200 гр.4 = стр.1360 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма резервного капитала';
														|en = 'Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320006");
	ИменаПоказателей.Вставить("Ф1П1360"		, "П000100136005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1360, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, Показатели.Ф1П1360.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1360.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_24_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '24';
													|en = '24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 24)';
													|en = 'Проверка Отчета об изменениях капитала (КС 24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение нераспределенной прибыли (убытка) в стр.3200 гр.5 = стр.1370 гр.5 Бухгалтерского баланса';
			|en = 'Значение нераспределенной прибыли (убытка) в стр.3200 гр.5 = стр.1370 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма нераспределенной прибыли (убытка)';
														|en = 'Ошибочная сумма нераспределенной прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320007");
	ИменаПоказателей.Вставить("Ф1П1370"		, "П000100137005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1370, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, Показатели.Ф1П1370.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1370.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_25_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '25';
													|en = '25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 25)';
													|en = 'Проверка Отчета об изменениях капитала (КС 25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение капитала в стр.3200 гр.6 = стр.1300 гр.5 Бухгалтерского баланса';
			|en = 'Значение капитала в стр.3200 гр.6 = стр.1300 гр.5 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320008");
	ИменаПоказателей.Вставить("Ф1П1300"		, "П000100130005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3200, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1300, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, Показатели.Ф1П1300.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1300.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_26_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '26';
													|en = '26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 26)';
													|en = 'Проверка Отчета об изменениях капитала (КС 26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уставного капитала в стр.3300 гр.1 = стр.1310 гр.4 Бухгалтерского баланса';
			|en = 'Значение уставного капитала в стр.3300 гр.1 = стр.1310 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уставного капитала';
														|en = 'Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330003");
	ИменаПоказателей.Вставить("Ф1П1310"		, "П000100131004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1310, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, Показатели.Ф1П1310.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1310.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_27_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '27';
													|en = '27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 27)';
													|en = 'Проверка Отчета об изменениях капитала (КС 27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение выкупленных акций в стр.3300 гр.2 = стр.1320 гр.4 Бухгалтерского баланса';
			|en = 'Значение выкупленных акций в стр.3300 гр.2 = стр.1320 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выкупленных акций';
														|en = 'Ошибочная сумма выкупленных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330004");
	ИменаПоказателей.Вставить("Ф1П1320"		, "П000100132004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1320, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, Показатели.Ф1П1320.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1320.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '28.1';
													|en = '28.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 28.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 28.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3300 гр.3 = стр.(1340 + 1350) гр.4 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3300 гр.3 = стр.(1340 + 1350) гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '28.2';
													|en = '28.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Некоммерческая организация';
													|en = 'Некоммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для некоммерческих организаций';
													|en = 'Только для некоммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 28.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 28.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3300 гр.3 = стр.1350 гр.4 Бухгалтерского баланса';
			|en = 'Значение добавочного капитала в стр.3300 гр.3 = стр.1350 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_28_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_28_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330005");
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ИменаПоказателей.Вставить("Ф1П1340"		, "П000100134004");
	КонецЕсли;
	
	ИменаПоказателей.Вставить("Ф1П1350"		, "П000100135004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1340, СтруктураДанныхБаланс);
	КонецЕсли;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1350, СтруктураДанныхБаланс);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_29_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '29';
													|en = '29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 29)';
													|en = 'Проверка Отчета об изменениях капитала (КС 29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение резервного капитала в стр.3300 гр.4 = стр.1360 гр.4 Бухгалтерского баланса';
			|en = 'Значение резервного капитала в стр.3300 гр.4 = стр.1360 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма резервного капитала';
														|en = 'Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330006");
	ИменаПоказателей.Вставить("Ф1П1360"		, "П000100136004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1360, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, Показатели.Ф1П1360.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1360.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_30_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '30';
													|en = '30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 30)';
													|en = 'Проверка Отчета об изменениях капитала (КС 30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение нераспределенной прибыли (убытка) в стр.3300 гр.5 = стр.1370 гр.4 Бухгалтерского баланса';
			|en = 'Значение нераспределенной прибыли (убытка) в стр.3300 гр.5 = стр.1370 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма нераспределенной прибыли (убытка)';
														|en = 'Ошибочная сумма нераспределенной прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330007");
	ИменаПоказателей.Вставить("Ф1П1370"		, "П000100137004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1370, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, Показатели.Ф1П1370.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1370.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_31_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '31';
													|en = '31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 31)';
													|en = 'Проверка Отчета об изменениях капитала (КС 31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение капитала в стр.3300 гр.6 = стр.1300 гр.4 Бухгалтерского баланса';
			|en = 'Значение капитала в стр.3300 гр.6 = стр.1300 гр.4 Бухгалтерского баланса'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма капитала';
														|en = 'Ошибочная сумма капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330008");
	ИменаПоказателей.Вставить("Ф1П1300"		, "П000100130004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3300, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф1П1300, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, Показатели.Ф1П1300.Значение, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.Ф1П1300.Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '32.1';
													|en = '32.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 32.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 32.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уставного капитала в стр.3200 гр.1 = стр.(3100 + 3210 - 3220) гр.1';
			|en = 'Значение уставного капитала в стр.3200 гр.1 = стр.(3100 + 3210 - 3220) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уставного капитала';
														|en = 'Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '32.2';
													|en = '32.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 32.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 32.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение выкупленных акций в стр.3200 гр.2 = стр.(3100 + 3210 - 3220) гр.2';
			|en = 'Значение выкупленных акций в стр.3200 гр.2 = стр.(3100 + 3210 - 3220) гр.2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выкупленных акций';
														|en = 'Ошибочная сумма выкупленных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_32_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_32_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П00010032000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3100"		, "П00010031000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3210"		, "П00010032100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3220"		, "П00010032200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_33_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '33';
													|en = '33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 33)';
													|en = 'Проверка Отчета об изменениях капитала (КС 33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3200 гр.3 = стр.(3100 + 3210 - 3220 + 3230) гр.3';
			|en = 'Значение добавочного капитала в стр.3200 гр.3 = стр.(3100 + 3210 - 3220 + 3230) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320005");
	ИменаПоказателей.Вставить("Ф3П3100"		, "П000100310005");
	ИменаПоказателей.Вставить("Ф3П3210"		, "П000100321005");
	ИменаПоказателей.Вставить("Ф3П3220"		, "П000100322005");
	ИменаПоказателей.Вставить("Ф3П3230"		, "П000100323005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_34_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '34.1';
													|en = '34.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 34.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 34.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение резервного капитала в стр.3200 гр.4 = стр.(3100 + 3210 - 3220 + 3230 + 3240) гр.4';
			|en = 'Значение резервного капитала в стр.3200 гр.4 = стр.(3100 + 3210 - 3220 + 3230 + 3240) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма резервного капитала';
														|en = 'Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_34_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_34_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '34.2';
													|en = '34.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 34.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 34.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение нераспределенной прибыли (убытка) в стр.3200 гр.5 = стр.(3100 + 3210 - 3220 + 3230 ';
			|en = 'Значение нераспределенной прибыли (убытка) в стр.3200 гр.5 = стр.(3100 + 3210 - 3220 + 3230 '") +
		НСтр("ru = '+ 3240) гр.5';
			|en = '+ 3240) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма нераспределенной прибыли (убытка)';
														|en = 'Ошибочная сумма нераспределенной прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '7';
													|en = '7'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_34_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_34_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3200"		, "П00010032000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3100"		, "П00010031000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3210"		, "П00010032100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3220"		, "П00010032200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3230"		, "П00010032300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3240"		, "П00010032400" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_35_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '35.1';
													|en = '35.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 35.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 35.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3210 гр.1 >= стр.(3214 + 3215 + 3216 + 3217 + 3218 + 3219) гр.1';
			|en = 'Значение увеличения капитала в стр.3210 гр.1 >= стр.(3214 + 3215 + 3216 + 3217 + 3218 + 3219) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3210"		, "П000100321003");
	ИменаПоказателей.Вставить("Ф3П3214"		, "П000100321403");
	ИменаПоказателей.Вставить("Ф3П3215"		, "П000100321503");
	ИменаПоказателей.Вставить("Ф3П3216"		, "П000100321603");
	ИменаПоказателей.Вставить("Ф3П3219"		, "П100100321003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3210, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3214, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3215, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3216, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3219.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3219.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3219, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3214.Значение + Показатели.Ф3П3215.Значение + Показатели.Ф3П3216.Значение 
		+ Показатели.Ф3П3219.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3210.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3210.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_35_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '35.2';
													|en = '35.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 35.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 35.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3210 гр.3 >= стр.(3212 + 3213 + 3214 + 3215 + 3216 + 3217 ';
			|en = 'Значение увеличения капитала в стр.3210 гр.3 >= стр.(3212 + 3213 + 3214 + 3215 + 3216 + 3217 '") +
		НСтр("ru = '+ 3218 + 3219) гр.3';
			|en = '+ 3218 + 3219) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3210"		, "П000100321005");
	ИменаПоказателей.Вставить("Ф3П3212"		, "П000100321205");
	ИменаПоказателей.Вставить("Ф3П3213"		, "П000100321305");
	ИменаПоказателей.Вставить("Ф3П3214"		, "П000100321405");
	ИменаПоказателей.Вставить("Ф3П3215"		, "П000100321505");
	ИменаПоказателей.Вставить("Ф3П3216"		, "П000100321605");
	ИменаПоказателей.Вставить("Ф3П3219"		, "П100100321005_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3210, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3212, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3213, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3214, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3215, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3216, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3219.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3219.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3219, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3212.Значение + Показатели.Ф3П3213.Значение + Показатели.Ф3П3214.Значение 
		+ Показатели.Ф3П3215.Значение + Показатели.Ф3П3216.Значение + Показатели.Ф3П3219.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3210.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3210.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_35_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '35.3';
													|en = '35.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 35.3)';
													|en = 'Проверка Отчета об изменениях капитала (КС 35.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3210 гр.4 >= стр.(3216 + 3217 + 3218 + 3219) гр.4';
			|en = 'Значение увеличения капитала в стр.3210 гр.4 >= стр.(3216 + 3217 + 3218 + 3219) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3210"		, "П000100321006");
	ИменаПоказателей.Вставить("Ф3П3216"		, "П000100321606");
	ИменаПоказателей.Вставить("Ф3П3219"		, "П100100321006_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3210, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3216, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3219.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3219.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3219, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3216.Значение + Показатели.Ф3П3219.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3210.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3210.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_35_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '35.4';
													|en = '35.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 35.4)';
													|en = 'Проверка Отчета об изменениях капитала (КС 35.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3210 гр.5 >= стр.(3211 + 3212 + 3213 + 3215 + 3216 + 3217 ';
			|en = 'Значение увеличения капитала в стр.3210 гр.5 >= стр.(3211 + 3212 + 3213 + 3215 + 3216 + 3217 '") +
		НСтр("ru = '+ 3218 + 3219) гр.5';
			|en = '+ 3218 + 3219) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3210"		, "П000100321007");
	ИменаПоказателей.Вставить("Ф3П3211"		, "П000100321107");
	ИменаПоказателей.Вставить("Ф3П3212"		, "П000100321207");
	ИменаПоказателей.Вставить("Ф3П3213"		, "П000100321307");
	ИменаПоказателей.Вставить("Ф3П3215"		, "П000100321507");
	ИменаПоказателей.Вставить("Ф3П3216"		, "П000100321607");
	ИменаПоказателей.Вставить("Ф3П3219"		, "П100100321007_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3210, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3211, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3212, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3213, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3215, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3216, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3219.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3219.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3219, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3211.Значение + Показатели.Ф3П3212.Значение + Показатели.Ф3П3213.Значение 
		+ Показатели.Ф3П3215.Значение + Показатели.Ф3П3216.Значение + Показатели.Ф3П3219.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3210.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3210.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_36_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '36.1';
													|en = '36.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 36.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 36.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3220 гр.1 <= стр.(3224 + 3225 + 3226) гр.1';
			|en = 'Значение уменьшения капитала в стр.3220 гр.1 <= стр.(3224 + 3225 + 3226) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3220"		, "П000100322003");
	ИменаПоказателей.Вставить("Ф3П3224"		, "П000100322403");
	ИменаПоказателей.Вставить("Ф3П3225"		, "П000100322503");
	ИменаПоказателей.Вставить("Ф3П3226"		, "П000100322603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3220.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3220.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3220.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_36_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '36.2';
													|en = '36.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 36.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 36.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3220 гр.3 <= стр.(3222 + 3223 + 3224 + 3225 + 3226) гр.3';
			|en = 'Значение уменьшения капитала в стр.3220 гр.3 <= стр.(3222 + 3223 + 3224 + 3225 + 3226) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3220"		, "П000100322005");
	ИменаПоказателей.Вставить("Ф3П3222"		, "П000100322205");
	ИменаПоказателей.Вставить("Ф3П3223"		, "П000100322305");
	ИменаПоказателей.Вставить("Ф3П3224"		, "П000100322405");
	ИменаПоказателей.Вставить("Ф3П3225"		, "П000100322505");
	ИменаПоказателей.Вставить("Ф3П3226"		, "П000100322605");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3220.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3220.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3220.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_36_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '36.3';
													|en = '36.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 36.3)';
													|en = 'Проверка Отчета об изменениях капитала (КС 36.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3220 гр.4 <= стр.3226 гр.4';
			|en = 'Значение уменьшения капитала в стр.3220 гр.4 <= стр.3226 гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3220"		, "П000100322006");
	ИменаПоказателей.Вставить("Ф3П3226"		, "П000100322606");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3220.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3220.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3220.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_36_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '36.4';
													|en = '36.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 36.4)';
													|en = 'Проверка Отчета об изменениях капитала (КС 36.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3220 гр.5 <= стр.(3221 + 3222 + 3223 + 3224 + 3225 + ';
			|en = 'Значение уменьшения капитала в стр.3220 гр.5 <= стр.(3221 + 3222 + 3223 + 3224 + 3225 + '") +
		НСтр("ru = '3226 + 3227) гр.5';
			|en = '3226 + 3227) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3220"		, "П000100322007");
	ИменаПоказателей.Вставить("Ф3П3221"		, "П000100322107");
	ИменаПоказателей.Вставить("Ф3П3222"		, "П000100322207");
	ИменаПоказателей.Вставить("Ф3П3223"		, "П000100322307");
	ИменаПоказателей.Вставить("Ф3П3224"		, "П000100322407");
	ИменаПоказателей.Вставить("Ф3П3225"		, "П000100322507");
	ИменаПоказателей.Вставить("Ф3П3226"		, "П000100322607");
	ИменаПоказателей.Вставить("Ф3П3227"		, "П000100322707");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3220.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3220.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3220.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_37_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '37.1';
													|en = '37.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 37.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 37.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уставного капитала в стр.3300 гр.1 = стр.(3200 + 3310 - 3320) гр.1';
			|en = 'Значение уставного капитала в стр.3300 гр.1 = стр.(3200 + 3310 - 3320) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уставного капитала';
														|en = 'Ошибочная сумма уставного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_37_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_37_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '37.2';
													|en = '37.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 37.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 37.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение выкупленных акций в стр.3300 гр.2 = стр.(3200 + 3310 - 3320) гр.2';
			|en = 'Значение выкупленных акций в стр.3300 гр.2 = стр.(3200 + 3310 - 3320) гр.2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма выкупленных акций';
														|en = 'Ошибочная сумма выкупленных акций'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_37_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_37_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П00010033000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3200"		, "П00010032000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3310"		, "П00010033100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3320"		, "П00010033200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_38_00(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '38';
													|en = '38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 38)';
													|en = 'Проверка Отчета об изменениях капитала (КС 38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение добавочного капитала в стр.3300 гр.3 = стр.(3200 + 3310 - 3320 + 3330) гр.3';
			|en = 'Значение добавочного капитала в стр.3300 гр.3 = стр.(3200 + 3310 - 3320 + 3330) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма добавочного капитала';
														|en = 'Ошибочная сумма добавочного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П000100330005");
	ИменаПоказателей.Вставить("Ф3П3200"		, "П000100320005");
	ИменаПоказателей.Вставить("Ф3П3310"		, "П000100331005");
	ИменаПоказателей.Вставить("Ф3П3320"		, "П000100332005");
	ИменаПоказателей.Вставить("Ф3П3330"		, "П000100333005");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_39_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '39.1';
													|en = '39.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 39.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 39.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение резервного капитала в стр.3300 гр.4 = стр.(3200 + 3310 - 3320 + 3330 + 3340) гр.4';
			|en = 'Значение резервного капитала в стр.3300 гр.4 = стр.(3200 + 3310 - 3320 + 3330 + 3340) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма резервного капитала';
														|en = 'Ошибочная сумма резервного капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '6';
													|en = '6'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_39_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_39_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '39.2';
													|en = '39.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 39.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 39.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение нераспределенной прибыли (убытка) в стр.3300 гр.5 = стр.(3200 + 3310 - 3320 + 3330 ';
			|en = 'Значение нераспределенной прибыли (убытка) в стр.3300 гр.5 = стр.(3200 + 3310 - 3320 + 3330 '") +
		НСтр("ru = '+ 3340) гр.5';
			|en = '+ 3340) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма нераспределенной прибыли (убытка)';
														|en = 'Ошибочная сумма нераспределенной прибыли (убытка)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '7';
													|en = '7'"));
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_39_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_39_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3300"		, "П00010033000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3200"		, "П00010032000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3310"		, "П00010033100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3320"		, "П00010033200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3330"		, "П00010033300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф3П3340"		, "П00010033400" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_40_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '40.1';
													|en = '40.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 40.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 40.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3310 гр.1 >= стр.(3314 + 3315 + 3316 + 3317 + 3318 + 3319) гр.1';
			|en = 'Значение увеличения капитала в стр.3310 гр.1 >= стр.(3314 + 3315 + 3316 + 3317 + 3318 + 3319) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3310"		, "П000100331003");
	ИменаПоказателей.Вставить("Ф3П3314"		, "П000100331403");
	ИменаПоказателей.Вставить("Ф3П3315"		, "П000100331503");
	ИменаПоказателей.Вставить("Ф3П3316"		, "П000100331603");
	ИменаПоказателей.Вставить("Ф3П3319"		, "П100100331003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3310, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3314, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3315, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3316, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3319.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3319.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3319, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3314.Значение + Показатели.Ф3П3315.Значение + Показатели.Ф3П3316.Значение 
		+ Показатели.Ф3П3319.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3310.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_40_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '40.2';
													|en = '40.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 40.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 40.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3310 гр.3 >= стр.(3312 + 3313 + 3314 + 3315 + 3316 + 3317 ';
			|en = 'Значение увеличения капитала в стр.3310 гр.3 >= стр.(3312 + 3313 + 3314 + 3315 + 3316 + 3317 '") +
		НСтр("ru = '+ 3318 + 3319) гр.3';
			|en = '+ 3318 + 3319) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3310"		, "П000100331005");
	ИменаПоказателей.Вставить("Ф3П3312"		, "П000100331205");
	ИменаПоказателей.Вставить("Ф3П3313"		, "П000100331305");
	ИменаПоказателей.Вставить("Ф3П3314"		, "П000100331405");
	ИменаПоказателей.Вставить("Ф3П3315"		, "П000100331505");
	ИменаПоказателей.Вставить("Ф3П3316"		, "П000100331605");
	ИменаПоказателей.Вставить("Ф3П3319"		, "П100100331005_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3310, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3312, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3313, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3314, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3315, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3316, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3319.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3319.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3319, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3312.Значение + Показатели.Ф3П3313.Значение + Показатели.Ф3П3314.Значение 
		+ Показатели.Ф3П3315.Значение + Показатели.Ф3П3316.Значение + Показатели.Ф3П3319.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3310.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_40_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '40.3';
													|en = '40.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 40.3)';
													|en = 'Проверка Отчета об изменениях капитала (КС 40.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3310 гр.4 >= стр.(3316 + 3317 + 3318 + 3319) гр.4';
			|en = 'Значение увеличения капитала в стр.3310 гр.4 >= стр.(3316 + 3317 + 3318 + 3319) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3310"		, "П000100331006");
	ИменаПоказателей.Вставить("Ф3П3316"		, "П000100331606");
	ИменаПоказателей.Вставить("Ф3П3319"		, "П100100331006_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3310, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3316, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3319.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3319.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3319, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3316.Значение + Показатели.Ф3П3319.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3310.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_40_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '40.4';
													|en = '40.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 40.4)';
													|en = 'Проверка Отчета об изменениях капитала (КС 40.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение увеличения капитала в стр.3310 гр.5 >= стр.(3311 + 3312 + 3313 + 3315 + 3316 + 3317 ';
			|en = 'Значение увеличения капитала в стр.3310 гр.5 >= стр.(3311 + 3312 + 3313 + 3315 + 3316 + 3317 '") +
		НСтр("ru = '+ 3318 + 3319) гр.5';
			|en = '+ 3318 + 3319) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= %2';
													|en = '%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма увеличения капитала';
														|en = 'Ошибочная сумма увеличения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3310"		, "П000100331007");
	ИменаПоказателей.Вставить("Ф3П3311"		, "П000100331107");
	ИменаПоказателей.Вставить("Ф3П3312"		, "П000100331207");
	ИменаПоказателей.Вставить("Ф3П3313"		, "П000100331307");
	ИменаПоказателей.Вставить("Ф3П3315"		, "П000100331507");
	ИменаПоказателей.Вставить("Ф3П3316"		, "П000100331607");
	ИменаПоказателей.Вставить("Ф3П3319"		, "П100100331007_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3310, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3311, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3312, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3313, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3315, СтруктураДанныхОИК);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3316, СтруктураДанныхОИК);
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОИК, Показатели.Ф3П3319.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф3П3319.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф3П3319, СтруктураДанныхОИК, Счетчик);
	КонецЦикла;
	
	РасчетнаяСумма = Показатели.Ф3П3311.Значение + Показатели.Ф3П3312.Значение + Показатели.Ф3П3313.Значение 
		+ Показатели.Ф3П3315.Значение + Показатели.Ф3П3316.Значение + Показатели.Ф3П3319.Итог;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3310.Значение, РасчетнаяСумма, Настройки, 2);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_41_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '41.1';
													|en = '41.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 41.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 41.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3320 гр.1 <= стр.(3324 + 3325 + 3326) гр.1';
			|en = 'Значение уменьшения капитала в стр.3320 гр.1 <= стр.(3324 + 3325 + 3326) гр.1'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3320"		, "П000100332003");
	ИменаПоказателей.Вставить("Ф3П3324"		, "П000100332403");
	ИменаПоказателей.Вставить("Ф3П3325"		, "П000100332503");
	ИменаПоказателей.Вставить("Ф3П3326"		, "П000100332603");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3320.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3320.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_41_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '41.2';
													|en = '41.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 41.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 41.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3320 гр.3 <= стр.(3322 + 3323 + 3324 + 3325 + 3326) гр.3';
			|en = 'Значение уменьшения капитала в стр.3320 гр.3 <= стр.(3322 + 3323 + 3324 + 3325 + 3326) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3320"		, "П000100332005");
	ИменаПоказателей.Вставить("Ф3П3322"		, "П000100332205");
	ИменаПоказателей.Вставить("Ф3П3323"		, "П000100332305");
	ИменаПоказателей.Вставить("Ф3П3324"		, "П000100332405");
	ИменаПоказателей.Вставить("Ф3П3325"		, "П000100332505");
	ИменаПоказателей.Вставить("Ф3П3326"		, "П000100332605");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3320.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3320.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_41_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '41.3';
													|en = '41.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 41.3)';
													|en = 'Проверка Отчета об изменениях капитала (КС 41.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3320 гр.4 <= стр.3326 гр.4';
			|en = 'Значение уменьшения капитала в стр.3320 гр.4 <= стр.3326 гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3320"		, "П000100332006");
	ИменаПоказателей.Вставить("Ф3П3326"		, "П000100332606");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3320.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3320.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_41_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '41.4';
													|en = '41.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 41.4)';
													|en = 'Проверка Отчета об изменениях капитала (КС 41.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение уменьшения капитала в стр.3320 гр.5 <= стр.(3321 + 3322 + 3323 + 3324 + 3325 + ';
			|en = 'Значение уменьшения капитала в стр.3320 гр.5 <= стр.(3321 + 3322 + 3323 + 3324 + 3325 + '") +
		НСтр("ru = '3326 + 3327) гр.5';
			|en = '3326 + 3327) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= %2';
													|en = '%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма уменьшения капитала';
														|en = 'Ошибочная сумма уменьшения капитала'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	
	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф3П3320"		, "П000100332007");
	ИменаПоказателей.Вставить("Ф3П3321"		, "П000100332107");
	ИменаПоказателей.Вставить("Ф3П3322"		, "П000100332207");
	ИменаПоказателей.Вставить("Ф3П3323"		, "П000100332307");
	ИменаПоказателей.Вставить("Ф3П3324"		, "П000100332407");
	ИменаПоказателей.Вставить("Ф3П3325"		, "П000100332507");
	ИменаПоказателей.Вставить("Ф3П3326"		, "П000100332607");
	ИменаПоказателей.Вставить("Ф3П3327"		, "П000100332707");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф3П3320.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф3П3320.Значение, РасчетнаяСумма, Настройки, 3);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф3П3320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_движении_денежных_средств

&НаСервере
Процедура ПроверкаКС_42_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '42.1';
													|en = '42.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 42.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 42.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4100 гр.3 = стр.(4110 - 4120) гр.3';
			|en = 'Значение сальдо денежных потоков в стр.4100 гр.3 = стр.(4110 - 4120) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_42_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_42_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '42.2';
													|en = '42.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 42.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 42.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4100 гр.4 = стр.(4110 - 4120) гр.4';
			|en = 'Значение сальдо денежных потоков в стр.4100 гр.4 = стр.(4110 - 4120) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_42_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_42_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4100"		, "П00010041000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4110"		, "П00010041100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4120"		, "П00010041200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П4100.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4100.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4100.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_43_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '43.1';
													|en = '43.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 43.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 43.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4110 гр.3 = стр.(4111 + 4112 + 4113 + 4114 + 4115 + 4116 + 4117 + ';
			|en = 'Значение поступлений в стр.4110 гр.3 = стр.(4111 + 4112 + 4113 + 4114 + 4115 + 4116 + 4117 + '") +
		НСтр("ru = '4118 + 4119) гр.3';
			|en = '4118 + 4119) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_43_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_43_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '43.2';
													|en = '43.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 43.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 43.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4110 гр.4 = стр.(4111 + 4112 + 4113 + 4114 + 4115 + 4116 + 4117 + ';
			|en = 'Значение поступлений в стр.4110 гр.4 = стр.(4111 + 4112 + 4113 + 4114 + 4115 + 4116 + 4117 + '") +
		НСтр("ru = '4118 + 4119) гр.4';
			|en = '4118 + 4119) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_43_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_43_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4110"		, "П00010041100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4111"		, "П00010041110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4112"		, "П00010041120" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4113"		, "П00010041130" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4118"		, "П10010041100" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4119"		, "П00010041190" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4110, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4111, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4112, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4113, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4118.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4118.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4118, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4119, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4111.Значение + Показатели.Ф4П4112.Значение + Показатели.Ф4П4113.Значение 
		+ Показатели.Ф4П4118.Итог + Показатели.Ф4П4119.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4110.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4110.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_44_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '44.1';
													|en = '44.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 44.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 44.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4120 гр.3 = стр.(4121 + 4122 + 4123 + 4124 + 4125 + 4126 + 4127 + ';
			|en = 'Значение платежей в стр.4120 гр.3 = стр.(4121 + 4122 + 4123 + 4124 + 4125 + 4126 + 4127 + '") +
		НСтр("ru = '4128 + 4129) гр.3';
			|en = '4128 + 4129) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_44_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_44_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '44.2';
													|en = '44.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 44.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 44.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4120 гр.4 = стр.(4121 + 4122 + 4123 + 4124 + 4125 + 4126 + 4127 + ';
			|en = 'Значение платежей в стр.4120 гр.4 = стр.(4121 + 4122 + 4123 + 4124 + 4125 + 4126 + 4127 + '") +
		НСтр("ru = '4128 + 4129) гр.4';
			|en = '4128 + 4129) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_44_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_44_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4120"		, "П00010041200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4121"		, "П00010041210" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4122"		, "П00010041220" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4123"		, "П00010041230" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4124"		, "П00010041240" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4128"		, "П10010041200" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4129"		, "П00010041290" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4120, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4121, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4122, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4123, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4124, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4128.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4128.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4128, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4129, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4121.Значение + Показатели.Ф4П4122.Значение + Показатели.Ф4П4123.Значение 
		+ Показатели.Ф4П4124.Значение + Показатели.Ф4П4128.Итог + Показатели.Ф4П4129.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4120.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4120.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_45_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '45.1';
													|en = '45.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 45.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 45.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4200 гр.3 = стр.(4210 - 4220) гр.3';
			|en = 'Значение сальдо денежных потоков в стр.4200 гр.3 = стр.(4210 - 4220) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_45_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_45_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '45.2';
													|en = '45.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 45.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 45.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4200 гр.4 = стр.(4210 - 4220) гр.4';
			|en = 'Значение сальдо денежных потоков в стр.4200 гр.4 = стр.(4210 - 4220) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_45_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_45_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4200"		, "П00010042000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4210"		, "П00010042100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4220"		, "П00010042200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П4200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_46_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '46.1';
													|en = '46.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 46.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 46.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4210 гр.3 = стр.(4211 + 4212 + 4213 + 4214 + 4215 + 4216 + 4217 + ';
			|en = 'Значение поступлений в стр.4210 гр.3 = стр.(4211 + 4212 + 4213 + 4214 + 4215 + 4216 + 4217 + '") +
		НСтр("ru = '4218 + 4219) гр.3';
			|en = '4218 + 4219) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_46_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_46_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '46.2';
													|en = '46.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 46.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 46.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4210 гр.4 = стр.(4211 + 4212 + 4213 + 4214 + 4215 + 4216 + 4217 + ';
			|en = 'Значение поступлений в стр.4210 гр.4 = стр.(4211 + 4212 + 4213 + 4214 + 4215 + 4216 + 4217 + '") +
		НСтр("ru = '4218 + 4219) гр.4';
			|en = '4218 + 4219) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_46_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_46_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4210"		, "П00010042100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4211"		, "П00010042110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4212"		, "П00010042120" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4213"		, "П00010042130" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4214"		, "П00010042140" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4218"		, "П10010042100" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4219"		, "П00010042190" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4210, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4211, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4212, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4213, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4214, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4218.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4218.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4218, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4219, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4211.Значение + Показатели.Ф4П4212.Значение + Показатели.Ф4П4213.Значение 
		+ Показатели.Ф4П4214.Значение + Показатели.Ф4П4218.Итог + Показатели.Ф4П4219.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4210.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4210.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_47_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '47.1';
													|en = '47.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 47.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 47.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4220 гр.3 = стр.(4221 + 4222 + 4223 + 4224 + 4225 + 4226 + 4227 + ';
			|en = 'Значение платежей в стр.4220 гр.3 = стр.(4221 + 4222 + 4223 + 4224 + 4225 + 4226 + 4227 + '") +
		НСтр("ru = '4228 + 4229) гр.3';
			|en = '4228 + 4229) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_47_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_47_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '47.2';
													|en = '47.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 47.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 47.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4220 гр.4 = стр.(4221 + 4222 + 4223 + 4224 + 4225 + 4226 + 4227 + ';
			|en = 'Значение платежей в стр.4220 гр.4 = стр.(4221 + 4222 + 4223 + 4224 + 4225 + 4226 + 4227 + '") +
		НСтр("ru = '4228 + 4229) гр.4';
			|en = '4228 + 4229) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_47_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_47_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4220"		, "П00010042200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4221"		, "П00010042210" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4222"		, "П00010042220" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4223"		, "П00010042230" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4224"		, "П00010042240" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4228"		, "П10010042200" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4229"		, "П00010042290" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4220, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4221, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4222, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4223, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4224, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4228.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4228.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4228, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4229, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4221.Значение + Показатели.Ф4П4222.Значение + Показатели.Ф4П4223.Значение 
		+ Показатели.Ф4П4224.Значение + Показатели.Ф4П4228.Итог + Показатели.Ф4П4229.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4220.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4220.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_48_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '48.1';
													|en = '48.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 48.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 48.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4300 гр.3 = стр.(4310 - 4320) гр.3';
			|en = 'Значение сальдо денежных потоков в стр.4300 гр.3 = стр.(4310 - 4320) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_48_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_48_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '48.2';
													|en = '48.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 48.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 48.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4300 гр.4 = стр.(4310 - 4320) гр.4';
			|en = 'Значение сальдо денежных потоков в стр.4300 гр.4 = стр.(4310 - 4320) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_48_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_48_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4300"		, "П00010043000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4310"		, "П00010043100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4320"		, "П00010043200" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П4300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_49_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '49.1';
													|en = '49.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 49.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 49.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4310 гр.3 = стр.(4311 + 4312 + 4313 + 4314 + 4315 + 4316 + 4317 + ';
			|en = 'Значение поступлений в стр.4310 гр.3 = стр.(4311 + 4312 + 4313 + 4314 + 4315 + 4316 + 4317 + '") +
		НСтр("ru = '4318 + 4319) гр.3';
			|en = '4318 + 4319) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_49_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_49_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '49.2';
													|en = '49.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 49.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 49.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступлений в стр.4310 гр.4 = стр.(4311 + 4312 + 4313 + 4314 + 4315 + 4316 + 4317 + ';
			|en = 'Значение поступлений в стр.4310 гр.4 = стр.(4311 + 4312 + 4313 + 4314 + 4315 + 4316 + 4317 + '") +
		НСтр("ru = '4318 + 4319) гр.4';
			|en = '4318 + 4319) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступлений';
														|en = 'Ошибочная сумма поступлений'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_49_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_49_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4310"		, "П00010043100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4311"		, "П00010043110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4312"		, "П00010043120" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4313"		, "П00010043130" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4314"		, "П00010043140" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4318"		, "П10010043100" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4319"		, "П00010043190" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4310, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4311, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4312, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4313, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4314, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4318.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4318.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4318, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4319, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4311.Значение + Показатели.Ф4П4312.Значение + Показатели.Ф4П4313.Значение 
		+ Показатели.Ф4П4314.Значение + Показатели.Ф4П4318.Итог + Показатели.Ф4П4319.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4310.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_50_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '50.1';
													|en = '50.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 50.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 50.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4320 гр.3 = стр.(4321 + 4322 + 4323 + 4324 + 4325 + 4326 + 4327 + ';
			|en = 'Значение платежей в стр.4320 гр.3 = стр.(4321 + 4322 + 4323 + 4324 + 4325 + 4326 + 4327 + '") +
		НСтр("ru = '4328 + 4329) гр.3';
			|en = '4328 + 4329) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_50_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_50_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '50.2';
													|en = '50.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 50.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 50.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение платежей в стр.4320 гр.4 = стр.(4321 + 4322 + 4323 + 4324 + 4325 + 4326 + 4327 + ';
			|en = 'Значение платежей в стр.4320 гр.4 = стр.(4321 + 4322 + 4323 + 4324 + 4325 + 4326 + 4327 + '") +
		НСтр("ru = '4328 + 4329) гр.4';
			|en = '4328 + 4329) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма платежей';
														|en = 'Ошибочная сумма платежей'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_50_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_50_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4320"		, "П00010043200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4321"		, "П00010043210" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4322"		, "П00010043220" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4323"		, "П00010043230" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4328"		, "П10010043200" + Настройки.Графа + "_");
	ИменаПоказателей.Вставить("Ф4П4329"		, "П00010043290" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4320, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4321, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4322, СтруктураДанныхОДДС);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4323, СтруктураДанныхОДДС);
	
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели.Ф4П4328.ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели.Ф4П4328.Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4328, СтруктураДанныхОДДС, Счетчик);
	КонецЦикла;
	
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Ф4П4329, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = Показатели.Ф4П4321.Значение + Показатели.Ф4П4322.Значение + Показатели.Ф4П4323.Значение 
		+ Показатели.Ф4П4328.Итог + Показатели.Ф4П4329.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4320.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_51_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '51.1';
													|en = '51.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 51.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 51.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4400 гр.3 = стр.(4100 + 4200 + 4300) гр.3';
			|en = 'Значение сальдо денежных потоков в стр.4400 гр.3 = стр.(4100 + 4200 + 4300) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_51_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_51_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '51.2';
													|en = '51.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 51.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 51.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение сальдо денежных потоков в стр.4400 гр.4 = стр.(4100 + 4200 + 4300) гр.4';
			|en = 'Значение сальдо денежных потоков в стр.4400 гр.4 = стр.(4100 + 4200 + 4300) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочное сальдо денежных потоков';
														|en = 'Ошибочное сальдо денежных потоков'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_51_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_51_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4400"		, "П00010044000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4100"		, "П00010041000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4200"		, "П00010042000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4300"		, "П00010043000" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П4400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4400.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_52_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '52.1';
													|en = '52.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 52.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 52.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение остатка денежных средств в стр.4500 гр.3 = стр.(4400 + 4450 + 4490) гр.3';
			|en = 'Значение остатка денежных средств в стр.4500 гр.3 = стр.(4400 + 4450 + 4490) гр.3'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма остатка денежных средств';
														|en = 'Ошибочная сумма остатка денежных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '3';
													|en = '3'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_52_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_52_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '52.2';
													|en = '52.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 52.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 52.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение остатка денежных средств в стр.4500 гр.4 = стр.(4400 + 4450 + 4490) гр.4';
			|en = 'Значение остатка денежных средств в стр.4500 гр.4 = стр.(4400 + 4450 + 4490) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма остатка денежных средств';
														|en = 'Ошибочная сумма остатка денежных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_52_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_52_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф4П4500"		, "П00010045000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4400"		, "П00010044000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4450"		, "П00010044500" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф4П4490"		, "П00010044900" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф4П4500.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф4П4500.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф4П4500.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Отчета_о_целевом_использовании_средств

&НаСервере
Процедура ПроверкаКС_53_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '53.1';
													|en = '53.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 53.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 53.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступивших средств в стр.6200 гр.4 = стр.(6210 + 6215 + 6220 + 6230 + 6240 + 6250) гр.4';
			|en = 'Значение поступивших средств в стр.6200 гр.4 = стр.(6210 + 6215 + 6220 + 6230 + 6240 + 6250) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступивших средств';
														|en = 'Ошибочная сумма поступивших средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_53_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_53_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '53.2';
													|en = '53.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 53.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 53.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение поступивших средств в стр.6200 гр.5 = стр.(6210 + 6215 + 6220 + 6230 + 6240 + 6250) гр.5';
			|en = 'Значение поступивших средств в стр.6200 гр.5 = стр.(6210 + 6215 + 6220 + 6230 + 6240 + 6250) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма поступивших средств';
														|en = 'Ошибочная сумма поступивших средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_53_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_53_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6200"		, "П00010062000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6210"		, "П00010062100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6215"		, "П00010062150" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6220"		, "П00010062200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6230"		, "П00010062300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6240"		, "П00010062400" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6250"		, "П00010062500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6200.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6200.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф5П6200.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_54_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '54.1';
													|en = '54.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 54.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 54.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение использованных средств в стр.6300 гр.4 = стр.(6310 + 6320 + 6330 + 6350) гр.4';
			|en = 'Значение использованных средств в стр.6300 гр.4 = стр.(6310 + 6320 + 6330 + 6350) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма использованных средств';
														|en = 'Ошибочная сумма использованных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_54_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_54_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '54.2';
													|en = '54.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 54.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 54.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение использованных средств в стр.6300 гр.5 = стр.(6310 + 6320 + 6330 + 6350) гр.5';
			|en = 'Значение использованных средств в стр.6300 гр.5 = стр.(6310 + 6320 + 6330 + 6350) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма использованных средств';
														|en = 'Ошибочная сумма использованных средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_54_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_54_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6300"		, "П00010063000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6310"		, "П00010063100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6320"		, "П00010063200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6330"		, "П00010063300" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6350"		, "П00010063500" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6300.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6300.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф5П6300.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_55_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '55.1';
													|en = '55.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 55.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 55.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение расходов в стр.6310 гр.4 = стр.(6311 + 6312 + 6313) гр.4';
			|en = 'Значение расходов в стр.6310 гр.4 = стр.(6311 + 6312 + 6313) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_55_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_55_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '55.2';
													|en = '55.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 55.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 55.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение расходов в стр.6310 гр.5 = стр.(6311 + 6312 + 6313) гр.5';
			|en = 'Значение расходов в стр.6310 гр.5 = стр.(6311 + 6312 + 6313) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_55_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_55_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6310"		, "П00010063100" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6311"		, "П00010063110" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6312"		, "П00010063120" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6313"		, "П00010063130" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6310.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6310.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф5П6310.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_56_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '56.1';
													|en = '56.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 56.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 56.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение расходов в стр.6320 гр.4 = стр.(6321 + 6322 + 6323 + 6324 + 6325 + 6326) гр.4';
			|en = 'Значение расходов в стр.6320 гр.4 = стр.(6321 + 6322 + 6323 + 6324 + 6325 + 6326) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_56_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_56_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '56.2';
													|en = '56.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 56.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 56.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение расходов в стр.6320 гр.5 = стр.(6321 + 6322 + 6323 + 6324 + 6325 + 6326) гр.5';
			|en = 'Значение расходов в стр.6320 гр.5 = стр.(6321 + 6322 + 6323 + 6324 + 6325 + 6326) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма расходов';
														|en = 'Ошибочная сумма расходов'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_56_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_56_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6320"		, "П00010063200" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6321"		, "П00010063210" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6322"		, "П00010063220" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6323"		, "П00010063230" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6324"		, "П00010063240" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6325"		, "П00010063250" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6326"		, "П00010063260" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6320.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6320.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф5П6320.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_57_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '57.1';
													|en = '57.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 57.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 57.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение остатка средств в стр.6400 гр.4 = стр.(6100 + 6200 - 6300) гр.4';
			|en = 'Значение остатка средств в стр.6400 гр.4 = стр.(6100 + 6200 - 6300) гр.4'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма остатка средств';
														|en = 'Ошибочная сумма остатка средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '4';
													|en = '4'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_57_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_57_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '57.2';
													|en = '57.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 57.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 57.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Арифметическая ошибка';
													|en = 'Арифметическая ошибка'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение остатка средств в стр.6400 гр.5 = стр.(6100 + 6200 - 6300) гр.5';
			|en = 'Значение остатка средств в стр.6400 гр.5 = стр.(6100 + 6200 - 6300) гр.5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 = %2';
													|en = '%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Ошибочная сумма остатка средств';
														|en = 'Ошибочная сумма остатка средств'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);
	Настройки.Вставить("Графа"				, НСтр("ru = '5';
													|en = '5'"));

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКС_57_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_57_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Ф5П6400"		, "П00010064000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6100"		, "П00010061000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6200"		, "П00010062000" + Настройки.Графа);
	ИменаПоказателей.Вставить("Ф5П6300"		, "П00010063000" + Настройки.Графа);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.Ф5П6400.Значение;
	Настройки.ЭтоОшибка = РавенствоНеВыполнено(Показатели.Ф5П6400.Значение, РасчетнаяСумма, Настройки);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.Ф5П6400.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Бухгалтерского_баланса

&НаСервере
Процедура ПроверкаКС_58_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.1';
													|en = '58.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.1)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1100 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1100 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1100");
	Настройки.Вставить("ИмяПоказателя"		, "П000100110004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.2';
													|en = '58.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.2)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1100 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1100 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1100");
	Настройки.Вставить("ИмяПоказателя"		, "П000100110005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.3';
													|en = '58.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.3)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1100 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1100 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1100");
	Настройки.Вставить("ИмяПоказателя"		, "П000100110006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.4';
													|en = '58.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.4)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1110 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1110 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100111004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.5';
													|en = '58.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.5)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1110 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1110 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100111005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.6';
													|en = '58.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.6)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1110 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1110 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100111006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.7';
													|en = '58.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.7)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1120 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1120 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100112004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.8';
													|en = '58.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.8)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1120 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1120 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100112005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.9';
													|en = '58.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.9)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1120 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1120 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100112006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.10';
													|en = '58.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.10)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1130 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1130 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1130");
	Настройки.Вставить("ИмяПоказателя"		, "П000100113004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.11';
													|en = '58.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.11)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1130 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1130 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1130");
	Настройки.Вставить("ИмяПоказателя"		, "П000100113005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.12';
													|en = '58.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.12)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1130 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1130 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1130");
	Настройки.Вставить("ИмяПоказателя"		, "П000100113006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.13';
													|en = '58.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.13)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1140 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1140 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1140");
	Настройки.Вставить("ИмяПоказателя"		, "П000100114004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.14';
													|en = '58.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.14)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1140 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1140 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1140");
	Настройки.Вставить("ИмяПоказателя"		, "П000100114005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.15';
													|en = '58.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.15)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1140 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1140 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1140");
	Настройки.Вставить("ИмяПоказателя"		, "П000100114006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.16';
													|en = '58.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.16)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1150 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1150 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000100115004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.17';
													|en = '58.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.17)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1150 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1150 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000100115005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.18';
													|en = '58.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.18)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1150 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1150 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1150");
	Настройки.Вставить("ИмяПоказателя"		, "П000100115006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.19';
													|en = '58.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.19)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1160 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1160 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1160");
	Настройки.Вставить("ИмяПоказателя"		, "П000100116004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_20(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.20';
													|en = '58.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.20)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1160 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1160 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1160");
	Настройки.Вставить("ИмяПоказателя"		, "П000100116005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_21(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.21';
													|en = '58.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.21)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1160 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1160 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1160");
	Настройки.Вставить("ИмяПоказателя"		, "П000100116006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.22';
													|en = '58.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.22)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1170 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1170 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000100117004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_23(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.23';
													|en = '58.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.23)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1170 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1170 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000100117005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.24';
													|en = '58.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.24)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1170 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1170 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1170");
	Настройки.Вставить("ИмяПоказателя"		, "П000100117006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.25';
													|en = '58.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.25)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1180 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1180 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1180");
	Настройки.Вставить("ИмяПоказателя"		, "П000100118004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_26(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.26';
													|en = '58.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.26)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1180 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1180 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1180");
	Настройки.Вставить("ИмяПоказателя"		, "П000100118005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_27(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.27';
													|en = '58.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.27)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1180 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1180 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1180");
	Настройки.Вставить("ИмяПоказателя"		, "П000100118006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_28(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.28';
													|en = '58.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.28)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1190 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1190 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1190");
	Настройки.Вставить("ИмяПоказателя"		, "П000100119004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.29';
													|en = '58.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.29)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1190 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1190 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1190");
	Настройки.Вставить("ИмяПоказателя"		, "П000100119005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.30';
													|en = '58.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.30)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1190 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1190 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1190");
	Настройки.Вставить("ИмяПоказателя"		, "П000100119006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_31(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.31';
													|en = '58.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.31)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1200 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1200 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100120004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_32(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.32';
													|en = '58.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.32)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1200 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1200 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100120005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_33(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.33';
													|en = '58.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.33)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1200 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1200 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100120006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_34(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.34';
													|en = '58.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.34)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1210 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1210 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100121004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_35(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.35';
													|en = '58.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.35)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1210 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1210 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100121005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_36(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.36';
													|en = '58.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.36)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1210 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1210 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100121006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_37(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.37';
													|en = '58.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.37)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1220 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1220 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100122004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_38(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.38';
													|en = '58.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.38)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1220 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1220 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100122005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_39(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.39';
													|en = '58.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.39)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1220 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1220 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100122006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_40(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.40';
													|en = '58.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.40)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1230 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1230 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000100123004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_41(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.41';
													|en = '58.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.41)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1230 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1230 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000100123005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_42(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.42';
													|en = '58.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.42)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1230 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1230 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1230");
	Настройки.Вставить("ИмяПоказателя"		, "П000100123006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_43(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.43';
													|en = '58.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.43)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.43)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1240 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1240 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1240");
	Настройки.Вставить("ИмяПоказателя"		, "П000100124004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_44(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.44';
													|en = '58.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.44)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.44)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1240 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1240 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1240");
	Настройки.Вставить("ИмяПоказателя"		, "П000100124005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_45(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.45';
													|en = '58.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.45)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.45)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1240 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1240 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1240");
	Настройки.Вставить("ИмяПоказателя"		, "П000100124006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_46(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.46';
													|en = '58.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.46)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.46)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1250 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1250 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000100125004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_47(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.47';
													|en = '58.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.47)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.47)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1250 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1250 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000100125005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_48(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.48';
													|en = '58.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.48)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.48)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1250 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1250 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1250");
	Настройки.Вставить("ИмяПоказателя"		, "П000100125006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_49(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.49';
													|en = '58.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.49)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.49)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1260 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1260 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1260");
	Настройки.Вставить("ИмяПоказателя"		, "П000100126004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_50(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.50';
													|en = '58.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.50)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.50)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1260 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1260 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1260");
	Настройки.Вставить("ИмяПоказателя"		, "П000100126005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_51(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.51';
													|en = '58.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.51)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.51)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1260 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1260 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1260");
	Настройки.Вставить("ИмяПоказателя"		, "П000100126006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_52(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.52';
													|en = '58.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.52)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.52)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1310 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1310 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100131004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_53(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.53';
													|en = '58.53'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.53)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.53)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1310 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1310 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100131005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_54(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.54';
													|en = '58.54'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.54)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.54)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1310 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1310 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100131006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_55(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.55';
													|en = '58.55'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.55)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.55)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1340 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1340 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1340");
	Настройки.Вставить("ИмяПоказателя"		, "П000100134004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_56(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.56';
													|en = '58.56'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.56)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.56)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1340 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1340 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1340");
	Настройки.Вставить("ИмяПоказателя"		, "П000100134005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_57(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.57';
													|en = '58.57'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = 'Коммерческая организация';
													|en = 'Коммерческая организация'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = 'Только для коммерческих организаций';
													|en = 'Только для коммерческих организаций'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.57)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.57)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1340 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1340 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1340");
	Настройки.Вставить("ИмяПоказателя"		, "П000100134006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_58(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.58';
													|en = '58.58'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.58)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.58)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1360 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1360 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000100136004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_59(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.59';
													|en = '58.59'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.59)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.59)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1360 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1360 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000100136005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_60(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.60';
													|en = '58.60'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.60)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.60)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1360 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1360 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1360");
	Настройки.Вставить("ИмяПоказателя"		, "П000100136006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_61(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.61';
													|en = '58.61'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.61)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.61)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1400 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1400 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1400");
	Настройки.Вставить("ИмяПоказателя"		, "П000100140004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_62(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.62';
													|en = '58.62'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.62)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.62)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1400 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1400 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1400");
	Настройки.Вставить("ИмяПоказателя"		, "П000100140005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_63(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.63';
													|en = '58.63'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.63)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.63)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1400 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1400 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1400");
	Настройки.Вставить("ИмяПоказателя"		, "П000100140006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_64(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.64';
													|en = '58.64'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.64)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.64)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1410 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1410 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000100141004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_65(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.65';
													|en = '58.65'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.65)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.65)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1410 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1410 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000100141005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_66(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.66';
													|en = '58.66'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.66)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.66)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1410 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1410 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1410");
	Настройки.Вставить("ИмяПоказателя"		, "П000100141006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_67(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.67';
													|en = '58.67'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.67)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.67)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1420 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1420 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1420");
	Настройки.Вставить("ИмяПоказателя"		, "П000100142004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_68(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.68';
													|en = '58.68'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.68)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.68)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1420 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1420 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1420");
	Настройки.Вставить("ИмяПоказателя"		, "П000100142005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_69(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.69';
													|en = '58.69'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.69)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.69)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1420 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1420 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1420");
	Настройки.Вставить("ИмяПоказателя"		, "П000100142006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_70(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.70';
													|en = '58.70'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.70)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.70)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1430 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1430 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1430");
	Настройки.Вставить("ИмяПоказателя"		, "П000100143004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_71(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.71';
													|en = '58.71'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.71)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.71)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1430 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1430 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1430");
	Настройки.Вставить("ИмяПоказателя"		, "П000100143005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_72(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.72';
													|en = '58.72'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.72)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.72)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1430 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1430 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1430");
	Настройки.Вставить("ИмяПоказателя"		, "П000100143006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_73(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.73';
													|en = '58.73'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.73)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.73)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1450 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1450 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000100145004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_74(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.74';
													|en = '58.74'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.74)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.74)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1450 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1450 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000100145005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_75(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.75';
													|en = '58.75'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.75)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.75)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1450 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1450 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1450");
	Настройки.Вставить("ИмяПоказателя"		, "П000100145006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_76(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.76';
													|en = '58.76'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.76)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.76)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1500 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1500 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1500");
	Настройки.Вставить("ИмяПоказателя"		, "П000100150004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_77(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.77';
													|en = '58.77'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.77)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.77)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1500 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1500 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1500");
	Настройки.Вставить("ИмяПоказателя"		, "П000100150005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_78(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.78';
													|en = '58.78'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.78)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.78)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1500 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1500 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1500");
	Настройки.Вставить("ИмяПоказателя"		, "П000100150006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_79(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.79';
													|en = '58.79'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.79)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.79)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1510 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1510 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000100151004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_80(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.80';
													|en = '58.80'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.80)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.80)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1510 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1510 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000100151005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_81(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.81';
													|en = '58.81'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.81)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.81)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1510 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1510 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1510");
	Настройки.Вставить("ИмяПоказателя"		, "П000100151006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_82(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.82';
													|en = '58.82'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.82)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.82)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1520 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1520 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000100152004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_83(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.83';
													|en = '58.83'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.83)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.83)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1520 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1520 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000100152005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_84(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.84';
													|en = '58.84'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.84)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.84)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1520 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1520 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1520");
	Настройки.Вставить("ИмяПоказателя"		, "П000100152006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_85(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.85';
													|en = '58.85'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.85)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.85)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1530 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1530 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1530");
	Настройки.Вставить("ИмяПоказателя"		, "П000100153004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_86(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.86';
													|en = '58.86'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.86)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.86)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1530 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1530 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1530");
	Настройки.Вставить("ИмяПоказателя"		, "П000100153005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_87(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.87';
													|en = '58.87'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.87)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.87)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1530 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1530 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1530");
	Настройки.Вставить("ИмяПоказателя"		, "П000100153006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_88(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.88';
													|en = '58.88'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.88)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.88)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1540 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1540 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1540");
	Настройки.Вставить("ИмяПоказателя"		, "П000100154004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_89(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.89';
													|en = '58.89'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.89)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.89)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1540 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1540 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1540");
	Настройки.Вставить("ИмяПоказателя"		, "П000100154005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_90(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.90';
													|en = '58.90'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.90)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.90)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1540 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1540 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1540");
	Настройки.Вставить("ИмяПоказателя"		, "П000100154006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_91(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.91';
													|en = '58.91'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.91)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.91)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1550 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1550 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000100155004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_92(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.92';
													|en = '58.92'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.92)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.92)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1550 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1550 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000100155005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_93(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.93';
													|en = '58.93'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.93)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.93)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1550 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1550 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1550");
	Настройки.Вставить("ИмяПоказателя"		, "П000100155006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_94(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.94';
													|en = '58.94'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.94)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.94)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1600 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1600 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000100160004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_95(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.95';
													|en = '58.95'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.95)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.95)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1600 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1600 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000100160005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_96(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.96';
													|en = '58.96'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.96)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.96)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1600 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1600 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1600");
	Настройки.Вставить("ИмяПоказателя"		, "П000100160006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_97(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.97';
													|en = '58.97'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.97)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.97)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1700 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.1700 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000100170004");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_98(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.98';
													|en = '58.98'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.98)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.98)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1700 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.1700 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000100170005");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_99(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '58.99';
													|en = '58.99'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Бухгалтерский баланс';
														|en = 'Бухгалтерский баланс'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Бухгалтерского баланса (КС 58.99)';
													|en = 'Проверка Бухгалтерского баланса (КС 58.99)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.1700 гр.6 должно быть больше или равно 0';
			|en = 'Значение в стр.1700 гр.6 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф1П1700");
	Настройки.Вставить("ИмяПоказателя"		, "П000100170006");
	ПроверкаКС_58_код(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_58_код(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхБаланс);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_финансовых_результатах

&НаСервере
Процедура ПроверкаКС_59_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.1';
													|en = '59.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.1)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2110 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.2110 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100211004");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.2';
													|en = '59.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.2)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2110 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.2110 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100211005");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.3';
													|en = '59.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.3)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2120 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.2120 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100212004");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.4';
													|en = '59.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.4)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2120 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.2120 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100212005");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.5';
													|en = '59.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.5)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2210 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.2210 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100221004");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.6';
													|en = '59.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.6)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2210 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.2210 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100221005");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.7';
													|en = '59.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.7)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2220 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.2220 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100222004");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.8';
													|en = '59.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.8)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2220 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.2220 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100222005");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.9';
													|en = '59.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.9)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2310 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.2310 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100231004");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.10';
													|en = '59.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.10)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2310 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.2310 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100231005");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.11';
													|en = '59.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.11)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2320 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.2320 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100232004");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.12';
													|en = '59.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.12)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2320 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.2320 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100232005");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.13';
													|en = '59.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.13)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2330 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.2330 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2330");
	Настройки.Вставить("ИмяПоказателя"		, "П000100233004");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.14';
													|en = '59.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.14)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2330 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.2330 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2330");
	Настройки.Вставить("ИмяПоказателя"		, "П000100233005");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.15';
													|en = '59.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.15)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2340 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.2340 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2340");
	Настройки.Вставить("ИмяПоказателя"		, "П000100234004");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.16';
													|en = '59.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.16)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2340 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.2340 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2340");
	Настройки.Вставить("ИмяПоказателя"		, "П000100234005");
	ПроверкаКС_59_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.17';
													|en = '59.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.17)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2350 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.2350 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2350");
	Настройки.Вставить("ИмяПоказателя"		, "П000100235004");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '59.18';
													|en = '59.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о финансовых результатах';
														|en = 'Отчет о финансовых результатах'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о финансовых результатах (КС 59.18)';
													|en = 'Проверка Отчета о финансовых результатах (КС 59.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.2350 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.2350 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф2П2350");
	Настройки.Вставить("ИмяПоказателя"		, "П000100235005");
	ПроверкаКС_59_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_59_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОФР);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение > 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_об_изменениях_капитала

&НаСервере
Процедура ПроверкаКС_60_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.1';
													|en = '60.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.1)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3200 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3200 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100320003");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.2';
													|en = '60.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.2)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3200 гр.2 должно быть меньше или равно 0';
			|en = 'Значение в стр.3200 гр.2 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100320004");
	ПроверкаКС_60_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.3';
													|en = '60.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.3)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3200 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3200 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100320005");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.4';
													|en = '60.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.4)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3200 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.3200 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100320006");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.5';
													|en = '60.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.5)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3300 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3300 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100330003");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.6';
													|en = '60.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.6)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3300 гр.2 должно быть меньше или равно 0';
			|en = 'Значение в стр.3300 гр.2 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100330004");
	ПроверкаКС_60_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.7';
													|en = '60.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.7)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3300 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3300 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100330005");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.8';
													|en = '60.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.8)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3300 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.3300 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100330006");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.9';
													|en = '60.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.9)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3310 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3310 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331003");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.10';
													|en = '60.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.10)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3310 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3310 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331005");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.11';
													|en = '60.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.11)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3310 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.3310 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331006");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.12';
													|en = '60.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.12)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3312 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3312 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3312");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331205");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.13';
													|en = '60.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.13)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3313 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3313 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3313");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331305");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.14';
													|en = '60.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.14)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3314 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3314 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3314");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331403");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.15';
													|en = '60.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.15)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3314 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3314 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3314");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331405");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.16';
													|en = '60.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.16)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3315 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3315 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3315");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331503");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.17';
													|en = '60.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.17)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3315 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3315 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3315");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331505");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.18';
													|en = '60.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.18)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3316 гр.1 должно быть больше или равно 0';
			|en = 'Значение в стр.3316 гр.1 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3316");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331603");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.19';
													|en = '60.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.19)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3316 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.3316 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3316");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331605");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '60.20';
													|en = '60.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет об изменениях капитала';
														|en = 'Отчет об изменениях капитала'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета об изменениях капитала (КС 60.20)';
													|en = 'Проверка Отчета об изменениях капитала (КС 60.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.3316 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.3316 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф3П3316");
	Настройки.Вставить("ИмяПоказателя"		, "П000100331606");
	ПроверкаКС_60_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_60_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОИК);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение > 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_движении_денежных_средств

&НаСервере
Процедура ПроверкаКС_61_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.1';
													|en = '61.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.1)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4110 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4110 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411003");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.2';
													|en = '61.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.2)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4110 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4110 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4110");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411004");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.3';
													|en = '61.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.3)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4111 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4111 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4111");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411103");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.4';
													|en = '61.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.4)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4111 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4111 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4111");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411104");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.5';
													|en = '61.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.5)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4112 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4112 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4112");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411203");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.6';
													|en = '61.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.6)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4112 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4112 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4112");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411204");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.7';
													|en = '61.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.7)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4113 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4113 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4113");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411303");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.8';
													|en = '61.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.8)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4113 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4113 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4113");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411304");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.9';
													|en = '61.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.9)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4114 - 4118 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4114 - 4118 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4118");
	Настройки.Вставить("ИмяПоказателя"		, "П100100411003_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.10';
													|en = '61.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.10)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4114 - 4118 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4114 - 4118 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4118");
	Настройки.Вставить("ИмяПоказателя"		, "П100100411004_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.11';
													|en = '61.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.11)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4119 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4119 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4119");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411903");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.12';
													|en = '61.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.12)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4119 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4119 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4119");
	Настройки.Вставить("ИмяПоказателя"		, "П000100411904");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.13';
													|en = '61.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.13)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4120 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4120 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412003");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.14';
													|en = '61.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.14)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4120 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4120 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4120");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412004");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.15';
													|en = '61.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.15)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4121 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4121 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4121");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412103");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.16';
													|en = '61.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.16)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4121 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4121 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4121");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412104");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.17';
													|en = '61.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.17)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4122 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4122 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4122");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412203");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.18';
													|en = '61.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.18)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4122 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4122 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4122");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412204");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.19';
													|en = '61.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.19)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4123 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4123 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4123");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412303");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.20';
													|en = '61.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.20)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4123 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4123 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4123");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412304");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.21';
													|en = '61.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.21)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4124 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4124 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4124");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412403");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.22';
													|en = '61.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.22)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4124 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4124 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4124");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412404");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.23';
													|en = '61.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.23)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4125 - 4128 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4125 - 4128 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4128");
	Настройки.Вставить("ИмяПоказателя"		, "П100100412003_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.24';
													|en = '61.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.24)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4125 - 4128 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4125 - 4128 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4128");
	Настройки.Вставить("ИмяПоказателя"		, "П100100412004_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.25';
													|en = '61.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.25)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4129 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4129 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4129");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412903");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.26';
													|en = '61.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.26)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4129 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4129 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4129");
	Настройки.Вставить("ИмяПоказателя"		, "П000100412904");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.27';
													|en = '61.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.27)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4210 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4210 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421003");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.28';
													|en = '61.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.28)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4210 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4210 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421004");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.29';
													|en = '61.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.29)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4211 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4211 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4211");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421103");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.30';
													|en = '61.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.30)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4211 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4211 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4211");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421104");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.31';
													|en = '61.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.31)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4212 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4212 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4212");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421203");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.32';
													|en = '61.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.32)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4212 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4212 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4212");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421204");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_33(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.33';
													|en = '61.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.33)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4213 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4213 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4213");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421303");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_34(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.34';
													|en = '61.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.34)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4213 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4213 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4213");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421304");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_35(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.35';
													|en = '61.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.35)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4214 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4214 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4214");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421403");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_36(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.36';
													|en = '61.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.36)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4214 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4214 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4214");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421404");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_37(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.37';
													|en = '61.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.37)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4215 - 4218 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4215 - 4218 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4218");
	Настройки.Вставить("ИмяПоказателя"		, "П100100421003_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_38(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.38';
													|en = '61.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.38)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4215 - 4218 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4215 - 4218 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4218");
	Настройки.Вставить("ИмяПоказателя"		, "П100100421004_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_39(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.39';
													|en = '61.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.39)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4219 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4219 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4219");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421903");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_40(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.40';
													|en = '61.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.40)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4219 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4219 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4219");
	Настройки.Вставить("ИмяПоказателя"		, "П000100421904");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_41(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.41';
													|en = '61.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.41)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4220 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4220 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422003");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_42(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.42';
													|en = '61.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.42)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4220 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4220 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422004");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_43(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.43';
													|en = '61.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.43)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.43)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4221 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4221 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4221");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422103");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_44(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.44';
													|en = '61.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.44)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.44)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4221 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4221 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4221");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422104");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_45(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.45';
													|en = '61.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.45)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.45)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4222 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4222 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4222");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422203");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_46(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.46';
													|en = '61.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.46)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.46)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4222 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4222 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4222");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422204");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_47(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.47';
													|en = '61.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.47)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.47)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4223 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4223 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4223");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422303");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_48(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.48';
													|en = '61.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.48)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.48)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4223 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4223 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4223");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422304");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_49(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.49';
													|en = '61.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.49)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.49)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4224 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4224 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4224");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422403");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_50(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.50';
													|en = '61.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.50)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.50)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4224 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4224 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4224");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422404");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_51(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.51';
													|en = '61.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.51)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.51)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4225 - 4228 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4225 - 4228 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4228");
	Настройки.Вставить("ИмяПоказателя"		, "П100100422003_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_52(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.52';
													|en = '61.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.52)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.52)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4225 - 4228 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4225 - 4228 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4228");
	Настройки.Вставить("ИмяПоказателя"		, "П100100422004_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_53(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.53';
													|en = '61.53'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.53)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.53)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4229 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4229 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4229");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422903");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_54(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.54';
													|en = '61.54'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.54)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.54)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4229 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4229 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4229");
	Настройки.Вставить("ИмяПоказателя"		, "П000100422904");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_55(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.55';
													|en = '61.55'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.55)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.55)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4310 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4310 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431003");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_56(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.56';
													|en = '61.56'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.56)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.56)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4310 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4310 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431004");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_57(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.57';
													|en = '61.57'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.57)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.57)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4311 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4311 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4311");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431103");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_58(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.58';
													|en = '61.58'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.58)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.58)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4311 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4311 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4311");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431104");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_59(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.59';
													|en = '61.59'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.59)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.59)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4312 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4312 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4312");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431203");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_60(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.60';
													|en = '61.60'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.60)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.60)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4312 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4312 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4312");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431204");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_61(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.61';
													|en = '61.61'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.61)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.61)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4313 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4313 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4313");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431303");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_62(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.62';
													|en = '61.62'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.62)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.62)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4313 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4313 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4313");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431304");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_63(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.63';
													|en = '61.63'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.63)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.63)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4314 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4314 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4314");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431403");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_64(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.64';
													|en = '61.64'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.64)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.64)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4314 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4314 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4314");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431404");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_65(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.65';
													|en = '61.65'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.65)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.65)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4315 - 4318 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4315 - 4318 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4318");
	Настройки.Вставить("ИмяПоказателя"		, "П100100431003_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_66(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.66';
													|en = '61.66'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.66)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.66)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4315 - 4318 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4315 - 4318 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4318");
	Настройки.Вставить("ИмяПоказателя"		, "П100100431004_");
	ПроверкаКС_61_БольшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_67(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.67';
													|en = '61.67'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.67)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.67)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4319 гр.3 должно быть больше или равно 0';
			|en = 'Значение в стр.4319 гр.3 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4319");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431903");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_68(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.68';
													|en = '61.68'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.68)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.68)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4319 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.4319 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4319");
	Настройки.Вставить("ИмяПоказателя"		, "П000100431904");
	ПроверкаКС_61_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_69(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.69';
													|en = '61.69'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.69)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.69)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4320 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4320 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432003");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_70(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.70';
													|en = '61.70'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.70)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.70)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4320 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4320 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432004");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_71(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.71';
													|en = '61.71'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.71)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.71)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4321 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4321 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4321");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432103");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_72(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.72';
													|en = '61.72'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.72)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.72)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4321 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4321 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4321");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432104");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_73(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.73';
													|en = '61.73'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.73)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.73)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4322 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4322 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4322");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432203");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_74(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.74';
													|en = '61.74'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.74)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.74)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4322 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4322 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4322");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432204");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_75(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.75';
													|en = '61.75'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.75)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.75)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4323 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4323 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4323");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432303");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_76(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.76';
													|en = '61.76'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.76)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.76)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4323 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4323 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4323");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432304");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_77(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.77';
													|en = '61.77'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.77)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.77)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4324 - 4328 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4324 - 4328 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4328");
	Настройки.Вставить("ИмяПоказателя"		, "П100100432003_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_78(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.78';
													|en = '61.78'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.78)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.78)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4324 - 4328 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4324 - 4328 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4328");
	Настройки.Вставить("ИмяПоказателя"		, "П100100432004_");
	ПроверкаКС_61_МеньшеНоляМножество(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_79(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.79';
													|en = '61.79'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.79)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.79)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4329 гр.3 должно быть меньше или равно 0';
			|en = 'Значение в стр.4329 гр.3 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4329");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432903");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_80(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '61.80';
													|en = '61.80'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о движении денежных средств';
														|en = 'Отчет о движении денежных средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о движении денежных средств (КС 61.80)';
													|en = 'Проверка Отчета о движении денежных средств (КС 61.80)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.4329 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.4329 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф4П4329");
	Настройки.Вставить("ИмяПоказателя"		, "П000100432904");
	ПроверкаКС_61_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОДДС);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение > 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_БольшеНоляМножество(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	Настройки.ЭтоОшибка = Ложь;
	МассивРасшифровки = Новый Массив;
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели[Настройки.КлючПоказателя].ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели[Настройки.КлючПоказателя].Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели[Настройки.КлючПоказателя], СтруктураДанныхОДДС, Счетчик);
		Настройки.ЭтоОшибка = Настройки.ЭтоОшибка ИЛИ Показатели[Настройки.КлючПоказателя].Значение < 0;
		МассивРасшифровки.Добавить(Показатели[Настройки.КлючПоказателя].Значение);
	КонецЦикла;
	
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", СтрСоединить(МассивРасшифровки, ";"));
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_61_МеньшеНоляМножество(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	Настройки.ЭтоОшибка = Ложь;
	МассивРасшифровки = Новый Массив;
			
	КолвоСтрок = КоличествоСтрок(СтруктураДанныхОДДС, Показатели[Настройки.КлючПоказателя].ИмяПоказателя);
	Для Счетчик = 1 По КолвоСтрок Цикл
		Показатели[Настройки.КлючПоказателя].Дополнение = "Подстрока " + Счетчик;
		ЗаполнитьИРасшифроватьПоказатель(Показатели[Настройки.КлючПоказателя], СтруктураДанныхОДДС, Счетчик);
		Настройки.ЭтоОшибка = Настройки.ЭтоОшибка ИЛИ Показатели[Настройки.КлючПоказателя].Значение > 0;
		МассивРасшифровки.Добавить(Показатели[Настройки.КлючПоказателя].Значение);
	КонецЦикла;
	
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", СтрСоединить(МассивРасшифровки, ";"));
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область КС_техПроверки_Отчета_о_целевом_использовании_средств

&НаСервере
Процедура ПроверкаКС_62_01(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.1';
													|en = '62.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.1)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6200 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6200 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100620004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.2';
													|en = '62.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.2)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6200 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6200 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6200");
	Настройки.Вставить("ИмяПоказателя"		, "П000100620005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_03(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.3';
													|en = '62.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.3)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6210 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6210 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100621004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_04(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.4';
													|en = '62.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.4)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6210 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6210 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6210");
	Настройки.Вставить("ИмяПоказателя"		, "П000100621005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_05(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.5';
													|en = '62.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.5)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6215 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6215 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6215");
	Настройки.Вставить("ИмяПоказателя"		, "П000100621504");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_06(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.6';
													|en = '62.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.6)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6215 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6215 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6215");
	Настройки.Вставить("ИмяПоказателя"		, "П000100621505");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_07(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.7';
													|en = '62.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.7)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6220 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6220 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100622004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_08(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.8';
													|en = '62.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.8)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6220 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6220 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6220");
	Настройки.Вставить("ИмяПоказателя"		, "П000100622005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_09(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.9';
													|en = '62.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.9)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6230 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6230 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6230");
	Настройки.Вставить("ИмяПоказателя"		, "П000100623004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_10(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.10';
													|en = '62.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.10)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6230 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6230 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6230");
	Настройки.Вставить("ИмяПоказателя"		, "П000100623005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_11(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.11';
													|en = '62.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.11)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6240 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6240 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6240");
	Настройки.Вставить("ИмяПоказателя"		, "П000100624004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_12(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.12';
													|en = '62.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.12)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6240 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6240 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6240");
	Настройки.Вставить("ИмяПоказателя"		, "П000100624005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_13(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.13';
													|en = '62.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.13)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6250 гр.4 должно быть больше или равно 0';
			|en = 'Значение в стр.6250 гр.4 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6250");
	Настройки.Вставить("ИмяПоказателя"		, "П000100625004");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_14(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.14';
													|en = '62.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.14)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6250 гр.5 должно быть больше или равно 0';
			|en = 'Значение в стр.6250 гр.5 должно быть больше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 >= 0';
													|en = '%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Отрицательная сумма';
														|en = 'Отрицательная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6250");
	Настройки.Вставить("ИмяПоказателя"		, "П000100625005");
	ПроверкаКС_62_БольшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_15(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.15';
													|en = '62.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.15)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6300 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6300 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100630004");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_16(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.16';
													|en = '62.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.16)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6300 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6300 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6300");
	Настройки.Вставить("ИмяПоказателя"		, "П000100630005");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_17(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.17';
													|en = '62.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.17)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6310 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6310 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631004");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_18(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.18';
													|en = '62.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.18)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6310 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6310 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6310");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631005");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_19(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.19';
													|en = '62.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.19)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6311 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6311 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6311");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631104");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_20(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.20';
													|en = '62.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.20)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6311 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6311 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6311");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631105");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_21(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.21';
													|en = '62.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.21)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6312 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6312 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6312");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631204");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_22(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.22';
													|en = '62.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.22)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6312 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6312 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6312");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631205");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_23(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.23';
													|en = '62.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.23)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6313 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6313 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6313");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631304");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_24(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.24';
													|en = '62.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.24)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6313 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6313 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6313");
	Настройки.Вставить("ИмяПоказателя"		, "П000100631305");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_25(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.25';
													|en = '62.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.25)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6320 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6320 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632004");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_26(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.26';
													|en = '62.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.26)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6320 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6320 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6320");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632005");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_27(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.27';
													|en = '62.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.27)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6321 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6321 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6321");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632104");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_28(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.28';
													|en = '62.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.28)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6321 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6321 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6321");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632105");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_29(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.29';
													|en = '62.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.29)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6322 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6322 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6322");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632204");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_30(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.30';
													|en = '62.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.30)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6322 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6322 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6322");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632205");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_31(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.31';
													|en = '62.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.31)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6323 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6323 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6323");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632304");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_32(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.32';
													|en = '62.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.32)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6323 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6323 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6323");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632305");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_33(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.33';
													|en = '62.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.33)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6324 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6324 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6324");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632404");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_34(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.34';
													|en = '62.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.34)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6324 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6324 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6324");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632405");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_35(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.35';
													|en = '62.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.35)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6325 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6325 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6325");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632504");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_36(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.36';
													|en = '62.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.36)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6325 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6325 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6325");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632505");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_37(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.37';
													|en = '62.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.37)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6326 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6326 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6326");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632604");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_38(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.38';
													|en = '62.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.38)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6326 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6326 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6326");
	Настройки.Вставить("ИмяПоказателя"		, "П000100632605");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_39(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.39';
													|en = '62.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.39)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6330 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6330 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6330");
	Настройки.Вставить("ИмяПоказателя"		, "П000100633004");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_40(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.40';
													|en = '62.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.40)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6330 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6330 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6330");
	Настройки.Вставить("ИмяПоказателя"		, "П000100633005");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_41(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.41';
													|en = '62.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.41)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6350 гр.4 должно быть меньше или равно 0';
			|en = 'Значение в стр.6350 гр.4 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6350");
	Настройки.Вставить("ИмяПоказателя"		, "П000100635004");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_42(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru = '62.42';
													|en = '62.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru = 'Отчет о целевом использовании средств';
														|en = 'Отчет о целевом использовании средств'"));
	Заголовки.Вставить("Условие"			, НСтр("ru = ''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru = ''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru = 'Проверка Отчета о целевом использовании средств (КС 62.42)';
													|en = 'Проверка Отчета о целевом использовании средств (КС 62.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru = 'Ошибка ввода';
													|en = 'Ошибка ввода'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru = 'Значение в стр.6350 гр.5 должно быть меньше или равно 0';
			|en = 'Значение в стр.6350 гр.5 должно быть меньше или равно 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru = '%1 <= 0';
													|en = '%1 <= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru = 'Положительная сумма';
														|en = 'Положительная сумма'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("КлючПоказателя"		, "Ф5П6350");
	Настройки.Вставить("ИмяПоказателя"		, "П000100635005");
	ПроверкаКС_62_МеньшеНоля(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_БольшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение < 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", 
		Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_62_МеньшеНоля(Настройки)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить(Настройки.КлючПоказателя, Настройки.ИмяПоказателя);
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, СтруктураДанныхОЦИС);
	
	Настройки.ЭтоОшибка = Показатели[Настройки.КлючПоказателя].Значение > 0;
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", 
		Показатели[Настройки.КлючПоказателя].Значение);
	ДополнитьСтруктуруОшибок(Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_Данные

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ДанныеКС.Вставить("УчитыватьПогрешность", 
		СтруктураРеквизитовФормы.мДелитель = 1000 И СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0);
	ДанныеКС.Вставить("Погрешность", 4 * СтруктураРеквизитовФормы.мДелитель);
	ДанныеКС.Вставить("Год", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Ф1", "Бухгалтерского баланса");
	ПредставлениеРазделов.Вставить("Ф2", "Отчета о финансовых результатах");
	ПредставлениеРазделов.Вставить("Ф3", "Отчета об изменениях капитала");
	ПредставлениеРазделов.Вставить("Ф4", "Отчета о движении денежных средств");
	ПредставлениеРазделов.Вставить("Ф5", "Отчета о целевом использовании средств");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Ф1", СтруктураОтчета.Баланс.ИмяСтраницы);
	РазделыПоказателей.Вставить("Ф2", СтруктураОтчета.ОФР.ИмяСтраницы);
	РазделыПоказателей.Вставить("Ф3", СтруктураОтчета.ОИК.ИмяСтраницы);
	РазделыПоказателей.Вставить("Ф4", СтруктураОтчета.ОДДС.ИмяСтраницы);
	РазделыПоказателей.Вставить("Ф5", СтруктураОтчета.ОЦИС.ИмяСтраницы);
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	МногостраничныеРазделы = Новый Массив;
	ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Ф1");
	ЦелочисленныеРазделы.Добавить("Ф2");
	ЦелочисленныеРазделы.Добавить("Ф3");
	ЦелочисленныеРазделы.Добавить("Ф4");
	ЦелочисленныеРазделы.Добавить("Ф5");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
КонецПроцедуры

&НаСервере
Функция ВидимыеРазделы()
	
	ДеревоРазделов = РеквизитФормыВЗначение("мДеревоСтраницОтчета", Тип("ДеревоЗначений"));
	ВидимыеРазделы = Новый Структура("Баланс, ОФР, ОИК, ОДДС, ОЦИС");
	
	Для Каждого Элемент Из ВидимыеРазделы Цикл
		РезультатПоиска = ДеревоРазделов.Строки.Найти(Элемент.Ключ, "ИмяСтраницы");
		ВидимыеРазделы[Элемент.Ключ] = 
			?(НЕ РезультатПоиска = Неопределено И РезультатПоиска.ПоказатьСтраницу = 1, Истина, Ложь);
	КонецЦикла;
	
	Возврат ВидимыеРазделы;
	
КонецФункции

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для Каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления		= Новый Массив;
		ПодстрокаРаздела		= "";
		ПодстрокаСтраницы		= "";
		
		ИндексРаздела			= Сред(Элемент.Ключ, 1, 2);
		ИндексДополнения		= Сред(Элемент.Ключ, 3, 1);
		ПодстрокаДополнения		= Сред(Элемент.Ключ, 9, 1);
		ПодстрокаСтроки			= Сред(Элемент.Значение, 8, 4);
		ПодстрокаГрафы			= Сред(Элемент.Значение, 12,2);
		ПодстрокаГрафы			=?(ИндексРаздела = "Ф3", "0" + Число(ПодстрокаГрафы - 2), ПодстрокаГрафы);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексДополнения	= "С" Тогда
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		ИначеЕсли ИндексДополнения = "Г" Тогда
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
		Иначе
			МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
		КонецЕсли;
		МассивПредставления.Добавить(ПодстрокаРаздела);
		
		Представление			= СтрСоединить(МассивПредставления, " ");
		Многострочный			= СтрДлина(Элемент.Значение) = 14;
		Многостраничный			= НЕ ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление				= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.СсылкаНаДокументРО		= ?(Лев(Показатель.ИмяПоказателя, 7) = Лев(Показатель.Синоним, 7), 
		Неопределено, НоваяСтрока.СсылкаНаДокументРО);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	Перем ЗначениеВИсточнике;
	
	Если ЗначениеЗаполнено(НомерСтроки) И Сред(Показатель.ИмяПоказателя, 14, 1) = "_" Тогда
		Показатель.ИмяПоказателя = Лев(Показатель.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
	КонецЕсли;
	
	Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
		Показатель.Страница = ?(Источник.Свойство("Страница"), Источник.Страница, 1);
		
		Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
			Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(ЭтотОбъект, 
				ЗначениеВИсточнике);
			Показатель.Итог = Показатель.Итог + Показатель.Значение;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
			Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
			Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для Каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")";
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru = ''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru = ''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru = ''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru = ''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru = ''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru = ''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru = ''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru = ''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru = ''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для Каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для Каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Источник, ИмяПоказателя)
	
	Количество = 0;
	ИмяПоказателя = Лев(ИмяПоказателя, 14);
	
	Пока Источник.Свойство(ИмяПоказателя + XMLСтрока(Количество + 1)) Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для Каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РавенствоНеВыполнено(Знач ЛевоеЗначение, Знач ПравоеЗначение, Настройки, КодСравнения = 1)
	
	Если ДанныеКС.УчитыватьПогрешность Тогда
		
		ПравоеЗначениеМин = ПравоеЗначение - ДанныеКС.Погрешность;
		ПравоеЗначениеМак = ПравоеЗначение + ДанныеКС.Погрешность;
		
		Если КодСравнения = 1 Тогда
			// равно
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (± " + ДанныеКС.Погрешность + ")";
			Возврат НЕ (ПравоеЗначениеМин <= ЛевоеЗначение И ЛевоеЗначение <= ПравоеЗначениеМак);
		ИначеЕсли КодСравнения = 2 Тогда
			// больше или равно
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (- " + ДанныеКС.Погрешность + ")";
			Возврат ЛевоеЗначение < ПравоеЗначениеМин;
		ИначеЕсли КодСравнения = 3 Тогда
			Настройки.ШаблонРасшифровки = Настройки.ШаблонРасшифровки + " (+ " + ДанныеКС.Погрешность + ")";
			// меньше или равно
			Возврат ЛевоеЗначение > ПравоеЗначениеМак;
		КонецЕсли;
	
	Иначе
	
		Если КодСравнения = 1 Тогда
			// равно
			Возврат НЕ ЛевоеЗначение = ПравоеЗначение;
		ИначеЕсли КодСравнения = 2 Тогда
			// больше или равно
			Возврат ЛевоеЗначение < ПравоеЗначение;
		ИначеЕсли КодСравнения = 3 Тогда
			// меньше или равно
			Возврат ЛевоеЗначение > ПравоеЗначение;
		КонецЕсли;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура СкрытьСсылкуНастройкаСоставаОрганизаций()
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				Элементы.ВариантЗаполнения.Доступность = Истина;
				Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			Элементы.ВариантЗаполнения.Доступность = Истина;
			Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для Каждого ТекСтрока Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.';
											|en = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML();
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеЭлементовСПАРКВОтчете() Экспорт
	
	ОтправкаОтчетностиВИнтерфакс = "РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправкаОтчетностиВИнтерфакс";
	Если ОбщегоНазначения.ПодсистемаСуществует(ОтправкаОтчетностиВИнтерфакс) Тогда
		МодульОтправкаРегОтчетовВСПАРК = ОбщегоНазначения.ОбщийМодуль("ОтправкаРегОтчетовВСПАРК");
		МодульОтправкаРегОтчетовВСПАРК.ИзменитьОформлениеЭлементовСПАРКВОтчете(ЭтотОбъект);
	Иначе
		Элементы.ФормаОтправитьВСПАРКИзОтчета.Видимость = Ложь;
		Элементы.ПанельОтправкиВСПАРК.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеСтроки()
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ИмяТекРаздела = "ДополнительныеФайлы" Тогда
		ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
		
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл  
			Область = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Область <> Неопределено И Область.СодержитЗначение = Истина Тогда
				Область.Значение  = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СлужебнаяИнформацияДляТехническогоСпециалиста()
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(
		НСтр("ru = 'Актуальная версия служебных структур данных: %1';
			|en = 'Актуальная версия служебных структур данных: %1'"), ВерсияСтруктурыДанных());
		
	Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) =Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		СохраненныеДанные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанные.Свойство("ВерсияСтруктурыДанных")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияСтруктурыДанных) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Сохраненная версия служебных структур данных: %2';
				|en = '%1
				|Сохраненная версия служебных структур данных: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияСтруктурыДанных);
		КонецЕсли;
		
		Если СохраненныеДанные.Свойство("ВерсияКонфигурации")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияКонфигурации) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Отчет сохранен в конфигурации: %2';
				|en = '%1
				|Отчет сохранен в конфигурации: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияКонфигурации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СлужебнаяИнформацияДляТехническогоСпециалиста;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСохранениеФайлаПояснений(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
	Возврат;
	#КонецЕсли
	
	УдалитьИзВременногоХранилища(ДополнительныеПараметры);
	
	ИмяКаталога = Неопределено;
	Если ЗначениеЗаполнено(ПолученныеФайлы) И ПолученныеФайлы.Количество() > 0 Тогда
		ПолноеИмяФайла = ПолученныеФайлы[0].ПолноеИмя;
		СоставляющиеИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
		ИмяКаталога = СоставляющиеИмениФайла.Путь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяКаталога) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Пояснения сохранены';
				|en = 'Пояснения сохранены'"),
			"file:///" + ИмяКаталога,
			СтрШаблон(НСтр("ru = 'в папку %1';
							|en = 'в папку %1'"), ИмяКаталога),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела)
	
	ПредставлениеРаздела = ИдентификаторРаздела;
	
	Если ИдентификаторРаздела = "Баланс" Тогда
		ПредставлениеРаздела = "Бухгалтерский баланс";
	ИначеЕсли ИдентификаторРаздела = "ОФР" Тогда
		ПредставлениеРаздела = "Отчет о финансовых результатах";
	ИначеЕсли ИдентификаторРаздела = "ОИК" Тогда
		ПредставлениеРаздела = "Отчет об изменениях капитала";
	ИначеЕсли ИдентификаторРаздела = "ОДДС" Тогда
		ПредставлениеРаздела = "Отчет о движении денежных средств";
	ИначеЕсли ИдентификаторРаздела = "ОЦИС" Тогда
		ПредставлениеРаздела = "Отчет о целевом использовании средств";
	ИначеЕсли ИдентификаторРаздела = "РасчетАктивов" Тогда
		ПредставлениеРаздела = "Расчет стоимости чистых активов";
	ИначеЕсли ИдентификаторРаздела = "Корректировка" Тогда
		ПредставлениеРаздела = "Корректировка данных отчетного периода";
	ИначеЕсли ИдентификаторРаздела = "Пояснения1" Тогда
		ПредставлениеРаздела = "Пояснения 1. НМА и НИОКР";
	ИначеЕсли ИдентификаторРаздела = "Пояснения2" Тогда
		ПредставлениеРаздела = "Пояснения 2. Основные средства";
	ИначеЕсли ИдентификаторРаздела = "Пояснения3" Тогда
		ПредставлениеРаздела = "Пояснения 3. Финансовые вложения";
	ИначеЕсли ИдентификаторРаздела = "Пояснения4" Тогда
		ПредставлениеРаздела = "Пояснения 4. Запасы";
	ИначеЕсли ИдентификаторРаздела = "Пояснения5" Тогда
		ПредставлениеРаздела = "Пояснения 5. Дебиторская и кредиторская задолженность";
	ИначеЕсли ИдентификаторРаздела = "Пояснения6" Тогда
		ПредставлениеРаздела = "Пояснения 6. Затраты на производство";
	ИначеЕсли ИдентификаторРаздела = "Пояснения7" Тогда
		ПредставлениеРаздела = "Пояснения 7. Оценочные обязательства";
	ИначеЕсли ИдентификаторРаздела = "Пояснения8" Тогда
		ПредставлениеРаздела = "Пояснения 8. Обеспечения обязательств";
	ИначеЕсли ИдентификаторРаздела = "Пояснения9" Тогда
		ПредставлениеРаздела = "Пояснения 9. Государственная помощь";
	ИначеЕсли ИдентификаторРаздела = "ДополнительныеФайлы" Тогда
		ПредставлениеРаздела = "Дополнительные файлы";
	КонецЕсли;
	
	Возврат ПредставлениеРаздела;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Список(СписокРазделенныйЗапятыми)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.Список(СписокРазделенныйЗапятыми);
	
КонецФункции

&НаСервере
Функция ОбъектОтчета(ПолноеИмяФормы) Экспорт
	
	Если ОбъектОтчета = Неопределено Тогда
		ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПолноеИмяФормы);
	КонецЕсли;
	
	Возврат ОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ПолноеИмяФормы)
	
	Форма_Имя = СтрЗаменить(ПолноеИмяФормы, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ПолноеИмяФормы)
	
	Возврат Сред(ПолноеИмяФормы, СтрНайти(ПолноеИмяФормы, ".Форма.") + 7);
	
КонецФункции

#Область ИнтерфейсОбращенияКМодулюОтчета

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьВозможностьВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета,
		ПараметрыВыгрузки,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьДанные(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		Узел,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПолучитьДеревоНастроекСоставаДопСтрок2019(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ИмяРаздела,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР,
		ДеревоНастроекКорректировка,
		ДеревоНастроекПояснения7);
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяМакетыЕНВД() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ИспользуютсяМакетыЕНВД(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ВключенВОтчет(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ДеревоНастроекСтрокРасшифровки,
		ИмяОбластиДопСтроки);
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		мДанныеОтчета,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПараметрыВыгрузкиОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьДанными(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ПараметрыВыгрузки,
		ДеревоВыгрузки,
		ЭтотОбъект,
		мДанныеОтчета,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПолучитьСписокВычитаемыхПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция НоваяСтруктураБлоковПояснения4()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НоваяСтруктураБлоковПояснения4(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Процедура ВосстановитьВариантыАвтозаполненияПоказателейРаздела(ВариантыЗаполнения, СохраненныеВарианты)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ВосстановитьВариантыАвтозаполненияПоказателейРаздела(
		ВариантыЗаполнения,
		СохраненныеВарианты);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьМакетОтчета(МакетОтчета, ИмяРаздела, ПараметрыПодготовки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПодготовитьМакетОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		МакетОтчета,
		ИмяРаздела,
		ПараметрыПодготовки);
	
КонецПроцедуры

&НаСервере
Функция Наименование_ДопСтроки11509()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.Наименование_ДопСтроки11509(
		СтруктураРеквизитовФормы.ПрименяетсяФСБУ25);
	
КонецФункции

&НаСервере
Функция ВерсияСтруктурыДанных()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ВерсияСтруктурыДанных(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция СохраненныеДанные(СохраненныйДокумент)
	
	Если КэшСохраненныхДанныхНаСервере = Неопределено Тогда
		ОбъектОтчета = ОбъектОтчета(РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
			СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета, ИмяФормы));
		КэшСохраненныхДанныхНаСервере = ОбъектОтчета.СохраненныеДанные(СохраненныйДокумент);
	КонецЕсли;
	
	Возврат КэшСохраненныхДанныхНаСервере;
	
КонецФункции

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыАвтозаполнения()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НовыеПараметрыАвтозаполнения(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция НовыйКонтейнерПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НовыйКонтейнерПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

#КонецОбласти

#КонецОбласти
