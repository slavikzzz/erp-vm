#Область ОписаниеПеременных

&НаСервере
Перем ОбъектОтчета; // ОтчетОбъект.РегламентированныйОтчетБухОтчетность - кэш объекта отчета для обращения
//                       к методам модуля объекта без использования основного реквизита формы.

&НаСервере
Перем СтруктураМногострочныхЧастей; // Структура

&НаКлиенте
Перем ИдетПозиционированиеНаОбластьРаздела; // Булево

&НаСервере
Перем ТаблицаСоставПоказателей; // ТаблицаЗначений -
//                                   * ИмяПоляТаблДокумента - Строка
//                                   * КодПоказателяПоСоставу - Строка
//                                   * КодПоказателяПоФорме - Строка
//                                   * ПризнМногострочности - Строка
//                                   * ТипДанныхПоказателя - Строка

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьПервоначальнуюВидимостьЭлементов();
	ИнициализироватьРеквизитыФормы();
	
	ОбъектОтчета().СформироватьСтруктуруРеквизитовФормы(Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.РедакцияФормы             = Параметры.РедакцияФормы;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Параметры.БезОткрытияФормы;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Параметры.ЭтоБалансНекоммерческойОрганизации;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СоздатьНовыйОтчет();
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЭтоИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	ЗаполнитьСведенияОбАвтозаполняемыхПоказателях();
	УстановитьПризнакВидимостиСсылкиВыбораОрганизацийДляЗаполнения();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ОбработатьПоляНалоговогоОргана();
	
	Элементы.ПоказатьИнформациюДляТехническогоСпециалиста.Видимость = ОбщегоНазначения.РежимОтладки();
	
	ИнициализироватьМеханизмыНастройкиЗаполнения();
	УстановитьДоступностьКнопкиНастройкиЗаполнения();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = РезультатЗапускаЗаполненияОтчетаВФоне("");
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьДанныеЗаполнения();
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.ЗаголовокПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.ЗаголовокПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект,
		Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ВставитьДополнительнуюСтроку();
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьДополнительнуюСтроку();
	КонецЕсли;
	
	Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора",
			Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ФормаВыбораОрганизаций", ПараметрыФормы, ЭтотОбъект);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "АудитДа" Тогда
		АудитДа = ТабличныйДокумент.Области.АудитДа.Значение;
		Если НЕ ЗначениеЗаполнено(АудитДа) Тогда
			ТабличныйДокумент.Области.АудитДа.Значение = "Х";
			ТабличныйДокумент.Области.АудитНет.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "АудитНет" Тогда
		АудитНет = ТабличныйДокумент.Области.АудитНет.Значение;
		Если НЕ ЗначениеЗаполнено(АудитНет) Тогда
			ТабличныйДокумент.Области.АудитНет.Значение = "Х";
			ТабличныйДокумент.Области.АудитДа.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "УтверждениеДа" Тогда
		УтверждениеДа = ТабличныйДокумент.Области.УтверждениеДа.Значение;
		Если НЕ ЗначениеЗаполнено(УтверждениеДа) Тогда
			ТабличныйДокумент.Области.УтверждениеДа.Значение = "Х";
			ТабличныйДокумент.Области.УтверждениеНет.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "УтверждениеНет" Тогда
		УтверждениеНет = ТабличныйДокумент.Области.УтверждениеНет.Значение;
		Если НЕ ЗначениеЗаполнено(УтверждениеНет) Тогда
			ТабличныйДокумент.Области.УтверждениеНет.Значение = "Х";
			ТабличныйДокумент.Области.УтверждениеДа.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Область.Имя = "КодНО" И СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		СтандартнаяОбработка = Ложь;
		ВыбратьКодНалоговогоОрганаПолучателя();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "КПП" Тогда
		КодНО = СокрЛП(ТабличныйДокумент.Области.КодНО.Значение);
		КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
		Если ЗначениеЗаполнено(КодНО) И ЗначениеЗаполнено(КПП) Тогда
			СохранитьВведенныйКПП(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ДатаПодписиОтчета" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьДатуПодписиВРазделах(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		ЗаполнитьПодписантаВРазделах(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Возврат;
	КонецЕсли;
	
	РасчетПриИзмененииПоказателя(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
		УдалитьФайл("ФайлПояснительнойЗаписки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлПояснительнойЗаписки", НСтр("ru = 'Выбор файла пояснений';
													|en = 'Выбор файла пояснений'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьФайл("ФайлПояснительнойЗаписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлПояснительнойЗаписки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
		УдалитьФайл("ФайлАудиторскогоЗаключения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлАудиторскогоЗаключения", НСтр("ru = 'Выбор файла аудиторского заключения';
													|en = 'Выбор файла аудиторского заключения'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УдалитьФайл("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлАудиторскогоЗаключения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПоАудиторскомуЗаключениюОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ДокументооборотСКОКлиент.ПодсказкаПоАудиторскомуЗаключениюОбработкаНавигационнойСсылки(ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаОтчетаВСПАРКОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельИнформацииНажатие(Элемент)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	ПодключитьОбработчикОжидания("ОбработатьРазделыОтчетаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	УдалитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюДляТехническогоСпециалиста(Команда)
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СлужебнаяИнформацияДляТехническогоСпециалиста();
	ПоказатьПредупреждение( , СлужебнаяИнформацияДляТехническогоСпециалиста, ,
		"Служебная информация для технического специалиста");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Команда", Команда);
	
	ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущий(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Команда", Команда);
	
	ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?';
		|en = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСведенияОбОрганизацииВРазделахОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		ИмяОтчета(ИмяФормы), ИмяФормыОтчета(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВСПАРКИзОтчета(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ЭтоИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПредупредитьОбОтправкеТолькоКвартальнойОтчетности();
		Возврат;
	КонецЕсли;
	
//	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой",
//		ЭтотОбъект);
//	Отказ = Ложь;
//	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(
//		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ЭтоИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПредупредитьОВыгрузкеТолькоКвартальнойОтчетности();
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СформироватьНастройкиФормыВыбораПечати();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
	ПараметрыФормы.Вставить("РедакцияФормы", "от 04.10.2023 № 157н");

	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	
	ИмяФормыВыбора = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	               + "ВыборПечатнойФормы"
	               + ?(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета > '2020-01-01', "2020", "");
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьОтправкуВСПАРКИзОтчета(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ЭтоИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ЭтоИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОтчетностьЗаКварталГод(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
		ПредупредитьОВыгрузкеТолькоКвартальнойОтчетности();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения,
		ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПояснения(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗаполнение(Команда)
	
	ИдентификаторАктивногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ИмяФормыНастройки = СтруктураРеквизитовФормы.РазделыСПоддержкойНастройкиЗаполнения[ИдентификаторАктивногоРаздела];
	
	Если ЗначениеЗаполнено(ИмяФормыНастройки) Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Раздел", ИдентификаторАктивногоРаздела);
		ПараметрыОткрытияФормы.Вставить("ЗаполняемыеПоказатели", СтруктураРеквизитовФормы.АдресЗаполняемыеПоказатели);
		ПараметрыОткрытияФормы.Вставить("ОтчетнаяДата", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ПараметрыОткрытияФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
		
		ОткрытьФорму(ИмяФормыНастройки, ПараметрыОткрытияФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура СоздатьНовыйОтчет()
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураОтчета = СтруктураОтчета();
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс";
	
	СформироватьЗаголовкиПериодовОтчетов();
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов(), УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	СформироватьСтруктуруСвойствСтраниц();
	СформироватьСтруктуруСтраницОтчета();
	СформироватьСоставПоказателей();
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
	ЗаполнитьДатуПодписиВРазделах();
	ЗаполнитьЕдиницуИзмеренияВРазделах();
	ЗаполнитьСведенияОбОрганизацииВРазделах();
	ЗаполнитьПодписантаВРазделах();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПервоначальнуюВидимостьЭлементов()
	
	Элементы.ПодменюЗаполнить.Видимость = Ложь;
	Элементы.Расшифровать.Видимость = Ложь;
	
	Элементы.СостояниеОтправки.Видимость = Ложь;
	
	Элементы.БлокОшибокИИзвещений.Видимость = Ложь;
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	Элементы.ПанельОтправкиВСПАРК.Видимость = Ложь;
	Элементы.ПанельАудиторскогоЗаключения.Видимость = Ложь;
	
	Элементы.БлокВариантЗаполнения.Видимость = Ложь;
	
	Элементы.Проверить.Видимость = Ложь; // Проверка контрольных соотношений
	Элементы.ФормаСохранитьПояснения.Видимость = Ложь;
	Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	Элементы.ПроверитьВИнтернете.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ИдентификаторыМСЧПоПоказателям = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	Цвета = РегламентированнаяОтчетность.КоллекцияЦветовРаскраски();
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", Цвета.ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", Цвета.ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", Цвета.ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", Цвета.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", Цвета.ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", Цвета.ЦветЗаполняетсяАвтоматически);
	
КонецПроцедуры

&НаСервере
Функция СтруктураОтчета()
	
	ОписаниеСтруктурыОтчета = Новый Структура;
	
	ИмяРаздела = "Баланс";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела + "НКО");
	Иначе
		ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	КонецЕсли;
	
	ИмяРаздела = "ОФР";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "ОЦИС";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "ОИК";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "ОДДС";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения3";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения4";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения5";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения6";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения7";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения8";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения9";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения10";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	ИмяРаздела = "Пояснения11";
	ОписаниеСтруктурыОтчета.Вставить(ИмяРаздела, Новый Структура);
	ОписаниеСтруктурыОтчета[ИмяРаздела].Вставить("ИмяМакета", ИмяРаздела);
	
	Возврат ОписаниеСтруктурыОтчета;
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруСтраницОтчета()
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОФР";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения3";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения4";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения5";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения6";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения7";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения8";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения9";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения10";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения11";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	ИмяФормыОтчета = ИмяФормыОтчета(ИмяФормы);
	СтраницыОтчета = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ЭтоБалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	РегламентированнаяОтчетность.ИзменитьСоставОтчета(
		"РегламентированныйОтчетБухОтчетность", ИмяФормыОтчета, ПараметрыОтчета, СтраницыОтчета);
		
	ЗначениеВРеквизитФормы(СтраницыОтчета, "мДеревоСтраницОтчета");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруСвойствСтраниц()
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс"; // Бухгалтерский баланс
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОФР"; // Отчет о финансовых результатах
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИС"; // Отчет о целевом использовании средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения10";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДеревоДанныхРазделов()
	
	ДеревоДанныхРазделов = НовоеДеревоДанныхРазделов();
	
	СформироватьСтруктуруРаздела_Баланс(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_ОФР(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_ОДДС(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_ОЦИС(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_ОИК(ДеревоДанныхРазделов);
	
	СформироватьСтруктуруРаздела_Пояснения3(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения4(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения5(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения6(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения7(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения8(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения9(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения10(ДеревоДанныхРазделов);
	СформироватьСтруктуруРаздела_Пояснения11(ДеревоДанныхРазделов);
	
	Возврат ДеревоДанныхРазделов;
	
КонецФункции

&НаСервере
Процедура СформироватьСтруктуруРаздела_Баланс(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Баланс";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1105");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1110");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1130");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1140");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1150");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1160");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1170");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1180");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "1190");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1210");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1215");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1220");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1230");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1240");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1250");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "1260");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1310");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1320");
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1330");
	Иначе
		ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1340");
		ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1350");
	КонецЕсли;
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1360");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1370");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1410");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1420");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1430");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "1450");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1510");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1520");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1530");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "1540");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "1550");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_ОФР(ДеревоДанныхРазделов)
	
	ИмяРаздела = "ОФР";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2110");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2120");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2210");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2220");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2310");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2320");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2330");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2340");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2350");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Вписываемый(ОписаниеРаздела, "2410");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2420");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "2460");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2510");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2520");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "2530");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_ОИК(ДеревоДанныхРазделов)
	
	ИмяРаздела = "ОИК";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ИдМСЧ = "П1000103231";
	МСЧ_П1000103231 = ОписаниеРаздела.Строки.Добавить();
	МСЧ_П1000103231.Тип = "МногострочнаяЧасть";
	МСЧ_П1000103231.Идентификатор = ИдМСЧ;
	СтрокаМСЧ_П1000103231 = МСЧ_П1000103231.Строки.Добавить();
	СтрокаМСЧ_П1000103231.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_П1000103231, ИдМСЧ);
	
	ИдМСЧ = "П1000103241";
	МСЧ_П1000103241 = ОписаниеРаздела.Строки.Добавить();
	МСЧ_П1000103241.Тип = "МногострочнаяЧасть";
	МСЧ_П1000103241.Идентификатор = ИдМСЧ;
	СтрокаМСЧ_П1000103241 = МСЧ_П1000103241.Строки.Добавить();
	СтрокаМСЧ_П1000103241.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_П1000103241, ИдМСЧ);
	
	ИдМСЧ = "П1000103331";
	МСЧ_П1000103331 = ОписаниеРаздела.Строки.Добавить();
	МСЧ_П1000103331.Тип = "МногострочнаяЧасть";
	МСЧ_П1000103331.Идентификатор = ИдМСЧ;
	СтрокаМСЧ_П1000103331 = МСЧ_П1000103331.Строки.Добавить();
	СтрокаМСЧ_П1000103331.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_П1000103331, ИдМСЧ);
	
	ИдМСЧ = "П1000103341";
	МСЧ_П1000103341 = ОписаниеРаздела.Строки.Добавить();
	МСЧ_П1000103341.Тип = "МногострочнаяЧасть";
	МСЧ_П1000103341.Идентификатор = ИдМСЧ;
	СтрокаМСЧ_П1000103341 = МСЧ_П1000103341.Строки.Добавить();
	СтрокаМСЧ_П1000103341.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_П1000103341, ИдМСЧ);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_ОДДС(ДеревоДанныхРазделов)
	
	ИмяРаздела = "ОДДС";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4110");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4120");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4210");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4220");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4310");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "4320");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_ОЦИС(ДеревоДанныхРазделов)
	
	ИмяРаздела = "ОЦИС";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6210");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6215");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6220");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6230");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6240");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "6250");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Вписываемый(ОписаниеРаздела, "6310");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "6313");
	ДобавитьОбъявлениеМногострочныхЧастей_Вписываемый(ОписаниеРаздела, "6320");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "6326");
	ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, "6330");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "6350");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения3(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения3";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5111");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5121");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5131");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5132");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5141");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5142");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5151");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5153");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5155");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5161");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5163");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения4(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения4";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5211");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5213");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5221");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5231");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5232");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5233");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5234");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5241");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5242");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5243");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5251");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5253");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5255");
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5261");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5263");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5265");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения5(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения5";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5311");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5313");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5321");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5322");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения6(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения6";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5411");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5421");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5422");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения7(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения7";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5511");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5513");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5521");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения8(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения8";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5611");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5613");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5621");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5631");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения9(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения9";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5711");
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5712");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения10(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения10";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРаздела_Пояснения11(ДеревоДанныхРазделов)
	
	ИмяРаздела = "Пояснения11";
	
	ОписаниеРаздела = ДеревоДанныхРазделов.Строки.Добавить();
	ОписаниеРаздела.Тип = "Раздел";
	ОписаниеРаздела.Идентификатор = ИмяРаздела;
	
	СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела);
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, "5921");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъявлениеМногострочныхЧастей_Полное(ОписаниеРаздела, НомерСтроки, ТолькоОсновная = Ложь)
	
	ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, НомерСтроки);
	ДобавитьОбъявлениеМногострочныхЧастей_Вписываемый(ОписаниеРаздела, НомерСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъявлениеМногострочныхЧастей_Фиксированный(ОписаниеРаздела, НомерСтроки)
	
	ИдМСЧ = "П100010" + НомерСтроки;
	МСЧ = ОписаниеРаздела.Строки.Добавить();
	МСЧ.Тип = "МногострочнаяЧасть";
	МСЧ.Идентификатор = ИдМСЧ;
	СтрокаМСЧ = МСЧ.Строки.Добавить();
	СтрокаМСЧ.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ, ИдМСЧ);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбъявлениеМногострочныхЧастей_Вписываемый(ОписаниеРаздела, НомерСтроки)
	
	ИдМСЧ_1 = "П10001А" + НомерСтроки;
	МСЧ_1 = ОписаниеРаздела.Строки.Добавить();
	МСЧ_1.Тип = "МногострочнаяЧасть";
	МСЧ_1.Идентификатор = ИдМСЧ_1;
	СтрокаМСЧ_1 = МСЧ_1.Строки.Добавить();
	СтрокаМСЧ_1.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_1, ИдМСЧ_1);
	
	ИдМСЧ_2 = "П10001Б" + НомерСтроки;
	МСЧ_2 = СтрокаМСЧ_1.Строки.Добавить();
	МСЧ_2.Тип = "МногострочнаяЧасть";
	МСЧ_2.Идентификатор = ИдМСЧ_2;
	СтрокаМСЧ_2 = МСЧ_2.Строки.Добавить();
	СтрокаМСЧ_2.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ_2, ИдМСЧ_2);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьФиксированныеПоказателиРаздела(ДеревоДанныхРазделов, ИмяРаздела)
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
	МакетРаздела = МакетОтчета(ИмяРаздела);
	
	Для Каждого ОбластьМакета Из МакетРаздела.Области Цикл
		ИмяОбласти = ОбластьМакета.Имя;
		Если ОбластьМакета.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "П1")
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "УдалитьСтроку")
		     И НЕ СтрНачинаетсяС(ИмяОбласти, "ДобавитьСтроку") Тогда
			СтрокаПоказателя = ДанныеРаздела.Строки.Добавить();
			СтрокаПоказателя.Тип = "Показатель";
			СтрокаПоказателя.Идентификатор = ИмяОбласти;
			
			Если ОбластьМакета.СодержитЗначение = Истина Тогда
				СтрокаПоказателя.Данные = ОбластьМакета.Значение;
			Иначе
				СтрокаПоказателя.Данные = ОбластьМакета.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПоказателиСтрокиМногострочнойЧасти(СтрокаМСЧ, ИдМСЧ)
	
	ОписаниеМСЧ = ОписаниеМногострочнойЧасти(ИдМСЧ);
	
	Для Каждого ОписаниеПоказателя Из ОписаниеМСЧ.Показатели Цикл
		ИмяПоказателя = ОписаниеПоказателя.Имя;
		ЗначениеПоказателя = ОписаниеПоказателя.Значение;
		
		СтрокаПоказателя = СтрокаМСЧ.Строки.Добавить();
		СтрокаПоказателя.Тип = "Показатель";
		СтрокаПоказателя.Идентификатор = ИмяПоказателя;
		СтрокаПоказателя.Данные = ЗначениеПоказателя;
		
		ИдентификаторыМСЧПоПоказателям.Вставить(ИмяПоказателя, ИдМСЧ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовкиПериодовОтчетов()
	
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
	     <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		СтруктураРеквизитовФормы.ЗаголовокПериодОтчета =
			Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy")
			+ " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда
			СтруктураРеквизитовФормы.ЗаголовокПериодОтчета =
				Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			СтруктураРеквизитовФормы.ЗаголовокПериодОтчета = "Январь - "
				+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		КонецЕсли;
	КонецЕсли;
	
	ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
	ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
	
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная = "На "
		+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
	СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода = "На "
		+ Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На "
		+ Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
	
	ДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
	
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
	КонецЕсли;
	
	Если Месяц(ДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному) = 1 Тогда
		СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному, "ДФ = 'ММММ гггг'") + " г.";
	Иначе
		СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному, "ДФ = 'ММММ гггг'") + " г.";
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + НРег(СтрПериод);
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + НРег(СтрПериодПрошлыйГод);
	СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному =
		"На " + Формат(ДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному, "ДФ = 'дд ММММ гггг'") + " г.";
	
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная = "На "
		+ Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяДень =
		Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяМесяц =
		Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
	СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяГод =
		Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	
КонецПроцедуры

#Область СоставПоказателей

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	ТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",   ОписаниеТиповСтрока15);
	ТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока15);
	ТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",   ОписаниеТиповСтрока15);
	ТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",   ОписаниеТиповСтрока15);
	ТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",    ОписаниеТиповСтрока15);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	СформироватьСоставПоказателей_Баланс();
	СформироватьСоставПоказателей_ОФР();
	СформироватьСоставПоказателей_ОИК();
	СформироватьСоставПоказателей_ОДДС();
	СформироватьСоставПоказателей_ОЦИС();
	
	СформироватьСоставПоказателей_Пояснения3();
	СформироватьСоставПоказателей_Пояснения4();
	СформироватьСоставПоказателей_Пояснения5();
	СформироватьСоставПоказателей_Пояснения6();
	СформироватьСоставПоказателей_Пояснения7();
	СформироватьСоставПоказателей_Пояснения8();
	СформироватьСоставПоказателей_Пояснения9();
	СформироватьСоставПоказателей_Пояснения10();
	СформироватьСоставПоказателей_Пояснения11();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Баланс()
	
	ИмяРаздела = "Баланс";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0, 06Е0";
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПараметрыПоказателей.Строки = "1105, 1110, 1130, 1140, 1150, 1160, 1170, 1180, 1190,
			|1210, 1215, 1220, 1230, 1240, 1250, 1260,
			|1310, 1320, 1330, 1360, 1370,
			|1410, 1420, 1430, 1450,
			|1510, 1520, 1530, 1540, 1550";
	Иначе
		ПараметрыПоказателей.Строки = "1105, 1110, 1130, 1140, 1150, 1160, 1170, 1180, 1190,
			|1210, 1215, 1220, 1230, 1240, 1250, 1260,
			|1310, 1320, 1340, 1350, 1360, 1370,
			|1410, 1420, 1430, 1450,
			|1510, 1520, 1530, 1540, 1550";
	КонецЕсли;
	
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4, 06Е4";
	ПараметрыПоказателей.Строки = "1100, 1200, 1300, 1400, 1500, 1600, 1700";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки =
		"01105, А1105, Б1105,
		|01110, А1110, Б1110,
		|01130, А1130, Б1130,
		|01140, А1140, Б1140,
		|01150, А1150, Б1150,
		|01160, А1160, Б1160,
		|01170, А1170, Б1170,
		|01180, А1180, Б1180,
		|01190,
		|01210, А1210, Б1210,
		|01215, А1215, Б1215,
		|01220, А1220, Б1220,
		|01230, А1230, Б1230,
		|01240, А1240, Б1240,
		|01250, А1250, Б1250,
		|01260,
		|01310, А1310, Б1310,
		|01320, А1320, Б1320,
		|01360, А1360, Б1360,
		|01370, А1370, Б1370,
		|01410, А1410, Б1410,
		|01420, А1420, Б1420,
		|01430, А1430, Б1430,
		|01450,
		|01510, А1510, Б1510,
		|01520, А1520, Б1520,
		|01530, А1530, Б1530,
		|01540, А1540, Б1540,
		|01550";
		
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		ПараметрыПоказателей.Строки = ПараметрыПоказателей.Строки + ",
			|01330, А1330, Б1330";
	Иначе
		ПараметрыПоказателей.Строки = ПараметрыПоказателей.Строки + ",
			|01340, А1340, Б1340,
			|01350, А1350, Б1350";
	КонецЕсли;
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОФР()
	
	ИмяРаздела = "ОФР";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "2110, 2120, 2210, 2220, 2310, 2320, 2330, 2340, 2350,
		|2410, 2411, 2412, 2420, 2460, 2510, 2520, 2530";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "2100, 2200, 2300, 2400, 2500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Ч0, 05Ч0";
	ПараметрыПоказателей.Строки = "2900, 2910";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки =
		"02110, А2110, Б2110,
		|02120, А2120, Б2120,
		|02210, А2210, Б2210,
		|02220, А2220, Б2220,
		|02310, А2310, Б2310,
		|02320, А2320, Б2320,
		|02330, А2330, Б2330,
		|02340, А2340, Б2340,
		|02350, А2350, Б2350,
		|А2410, Б2410,
		|02420, А2420, Б2420,
		|02460,
		|02510, А2510, Б2510,
		|02520, А2520, Б2520,
		|02530, А2530, Б2530";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОИК()
	
	ИмяРаздела = "ОИК";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е4";
	ПараметрыПоказателей.Строки = "3100, 3110, 3120, 3211, 3212, 3227, 3430, 3216, 3240, 3250,
		|3200, 3210, 3220, 3311, 3312, 3327, 3330, 3316, 3340, 3300";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4, 06Е4, 07Е4, 08Е4, 09Е4, 10Е4";
	ПараметрыПоказателей.Строки = "3130, 3230";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";

	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "3231, 3241, 3331, 3341";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОДДС()
	
	ИмяРаздела = "ОДДС";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "4111, 4112, 4113, 4114, 4119, 4121, 4122, 4123, 4124, 4129,
		|4211, 4212, 4213, 4214, 4219, 4221, 4222, 4223, 4224, 4229,
		|4311, 4312, 4313, 4314, 4319, 4321, 4322, 4323, 4329,
		|4450, 4490";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "4100, 4110, 4120, 4200, 4210, 4220, 4300, 4310, 4320, 4400, 4500";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "4110, 4120, 4210, 4220, 4310, 4320";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_ОЦИС()
	
	ИмяРаздела = "ОЦИС";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "01С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки = "6100, 6210, 6215, 6220, 6230, 6240, 6250,
		|6311, 6312, 6313, 6321, 6322, 6323, 6324, 6325, 6326, 6330, 6350";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 04Е4, 05Е4";
	ПараметрыПоказателей.Строки = "6200, 6300, 6310, 6320, 6400";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 02С0, 03С0, 04Е0, 05Е0";
	ПараметрыПоказателей.Строки =
		"06210, А6210, Б6210,
		|06215, А6215, Б6215,
		|06220, А6220, Б6220,
		|06230, А6230, Б6230,
		|06240, А6240, Б6240,
		|06250,
		|А6310, Б6310, 06313,
		|А6320, Б6320, 06326,
		|06330, А6330, Б6330,
		|06350";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения3()
	
	ИмяРаздела = "Пояснения3";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0, 15Е0";
	ПараметрыПоказателей.Строки = "5111, 5112, 5121, 5122";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5131, 5132, 5141, 5142";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5151, 5152, 5153, 5154, 5155, 5156";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5161, 5162, 5163, 5164";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0, 15Е0,
	                             |33Е0, 34Е0, 35Е0, 36Е0, 37Е0, 38Е0, 39Е0, 40Е0, 41Е0, 42Е0, 43Е0, 44Е0, 45Е0";
	ПараметрыПоказателей.Строки = "5111, 5112, 5121, 5122";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0, 32Е0, 33Е0, 34Е0";
	ПараметрыПоказателей.Строки = "5131, 5132";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5141, 5142";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5151, 5152, 5153, 5154, 5155, 5156";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0,
	                             |33Е0, 34Е0, 35Е0, 36Е0, 37Е0";
	ПараметрыПоказателей.Строки = "5161, 5162, 5163, 5164";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения4()
	
	ИмяРаздела = "Пояснения4";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0, 15Е0";
	ПараметрыПоказателей.Строки = "5211, 5212, 5213, 5214";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0";
	ПараметрыПоказателей.Строки = "5221, 5222";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5231, 5232, 5241, 5242, 5243";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5251, 5252, 5253, 5254, 5255, 5256, 5261, 5262, 5263, 5264, 5265, 5266";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0, 14Е0, 15Е0";
	ПараметрыПоказателей.Строки = "5211, 5212, 5213, 5214";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0, 13Е0";
	ПараметрыПоказателей.Строки = "5221, 5222";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5231, 5232, 5233, 5234, 5241, 5242";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0, 32Е0, 33Е0, 34Е0";
	ПараметрыПоказателей.Строки = "5243";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0";
	ПараметрыПоказателей.Строки = "5251, 5252, 5253, 5254, 5255, 5256, 5261, 5262, 5263, 5264, 5265, 5266";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения5()
	
	ИмяРаздела = "Пояснения5";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5311, 5312, 5313, 5314, 5315, 5316";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5321, 5322, 5323";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5311, 5312, 5313, 5314";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5321, 5322";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения6()
	
	ИмяРаздела = "Пояснения6";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5411, 5412";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5421, 5422";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5411, 5412";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5421, 5422";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения7()
	
	ИмяРаздела = "Пояснения7";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5511, 5512, 5513, 5514";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5515, 5516";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5521";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0, 10Е0, 11Е0, 12Е0";
	ПараметрыПоказателей.Строки = "5511, 5512, 5513, 5514";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5521";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения8()
	
	ИмяРаздела = "Пояснения8";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0";
	ПараметрыПоказателей.Строки = "5611, 5612, 5613, 5614";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 09Е0";
	ПараметрыПоказателей.Строки = "5615, 5616";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5621";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5631, 5632";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0, 08Е0, 09Е0";
	ПараметрыПоказателей.Строки = "5611, 5612, 5613, 5614";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5621";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0, 07Е0";
	ПараметрыПоказателей.Строки = "5631, 5632";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения9()
	
	ИмяРаздела = "Пояснения9";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5711, 5712";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 02Е0, 03Е0, 04Е0";
	ПараметрыПоказателей.Строки = "5711, 5712";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения10()
	
	ИмяРаздела = "Пояснения10";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0";
	ПараметрыПоказателей.Строки = "5811, 5812, 5813, 5814, 5815, 5815, 5816, 5817, 5818";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей_Пояснения11()
	
	ИмяРаздела = "Пояснения11";
	
	ПараметрыПоказателей = НовыеПараметрыПоказателей();
	ПараметрыПоказателей.ИмяРаздела = ИмяРаздела;
	
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Очистить();
	ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела].Добавить();
	
	ПараметрыПоказателей.ПризнакМСЧ = "";
	ПараметрыПоказателей.Префикс = "П00001";
	
	ПараметрыПоказателей.Графы = "02Е0, 03Е0";
	ПараметрыПоказателей.Строки = "5911, 5912, 5913";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	ПараметрыПоказателей.Графы = "03Е0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "5921, 5922";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	// Многострочные части
	ПараметрыПоказателей.ПризнакМСЧ = "/";
	ПараметрыПоказателей.Префикс = "П10001";
	
	ПараметрыПоказателей.Графы = "01С0, 03Е0, 04Е0, 05Е0, 06Е0";
	ПараметрыПоказателей.Строки = "5921, 5922";
	ДобавитьПоказателиРаздела(ПараметрыПоказателей);
	
	мСтруктураВариантыЗаполнения.Вставить(ИмяРаздела, ИмяРаздела);
	мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяРаздела, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиРаздела(ПараметрыПоказателей)
	
	ИмяСтраницы = ПараметрыПоказателей.ИмяРаздела;
	
	Префикс = ПараметрыПоказателей.Префикс;
	ПризнМногострочность = ПараметрыПоказателей.ПризнакМСЧ;
	
	Строки = Список(ПараметрыПоказателей.Строки);
	Графы = Список(ПараметрыПоказателей.Графы);
	
	Для Каждого КодСтроки Из Строки Цикл
		Для Каждого КодификаторГрафы Из Графы Цикл
			КодГрафы = Сред(КодификаторГрафы, 1, 2);
			ТипДанныхРеквизита = Сред(КодификаторГрафы, 3, 1);
			ВариантЗаполненияПоказателя = Число(Сред(КодификаторГрафы, 4));
			
			КодПоказателя = Префикс + Прав("00000" + КодСтроки, 5) + КодГрафы;
			
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = "";
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			Если ВариантЗаполненияПоказателя <> 0 Тогда
				НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = КодПоказателя;
				НоваяСтрока.ВариантЗаполнения  = ВариантЗаполненияПоказателя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыПоказателей()
	
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ИмяРаздела", "");
	ПараметрыПоказателей.Вставить("Префикс", "");
	ПараметрыПоказателей.Вставить("Строки", "");
	ПараметрыПоказателей.Вставить("Графы", "");
	ПараметрыПоказателей.Вставить("ПризнакМСЧ", "");
	ПараметрыПоказателей.Вставить("УсловияВариантовЗаполнения", Новый Структура);
	
	Возврат ПараметрыПоказателей;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОбАвтозаполняемыхПоказателях()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("ДатаНачалаОтчетногоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("ДатаКонцаОтчетногоПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		ИмяОтчета(ИмяФормы), ИмяФормыОтчета(ИмяФормы), ПараметрыОтчета);
	
	ВПрикладномРешенииРеализованоАвтозаполнение = ЗначениеЗаполнено(АвтозаполняемыеПоказатели);
	СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = ВПрикладномРешенииРеализованоАвтозаполнение;
	СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать = ВПрикладномРешенииРеализованоАвтозаполнение;
	Элементы.ПодменюЗаполнить.Видимость = СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить;
	Элементы.Расшифровать.Видимость = СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать;
	
	ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
	Для Каждого АвтозаполняемыйПоказатель Из АвтозаполняемыеПоказатели Цикл
		ПризнакАвтозаполнения = АвтозаполняемыйПоказатель.Значение[0];
		
		Если ПризнакАвтозаполнения Тогда
			НайденноеЗначение = ТаблицаСоставПоказателей.НайтиСтроки(
				Новый Структура("КодПоказателяПоСоставу", АвтозаполняемыйПоказатель.Ключ));
			
			Для Каждого Элемент Из НайденноеЗначение Цикл
				Для Каждого ТаблВариантовЗаполн Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + Элемент.ИмяПоляТаблДокумента] Цикл
					ТаблицаВариантыЗаполнения = ТаблВариантовЗаполн.ТаблицаВариантовЗаполнения;
					
					НайденныеПоказатели = ТаблицаВариантыЗаполнения.НайтиСтроки(
						Новый Структура("КодПоказателя", АвтозаполняемыйПоказатель.Ключ));
					
					Если НайденныеПоказатели.Количество() = 0 Тогда
						СтрТабл = ТаблицаВариантыЗаполнения.Добавить();
						СтрТабл.КодПоказателя = АвтозаполняемыйПоказатель.Ключ;
						СтрТабл.ВариантЗаполнения = 3;
						
					ИначеЕсли НЕ (НайденныеПоказатели[0].ВариантЗаполнения = 1
					          ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 2
					          ИЛИ НайденныеПоказатели[0].ВариантЗаполнения = 4) Тогда
						НайденныйПоказатель = НайденныеПоказатели[0];
						НайденныйПоказатель.ВариантЗаполнения = 3;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДатуПодписиВРазделах(ИмяРазделаВТабличномДокументе = "")
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	РазделыСДатойПодписи = Список("Баланс, ОФР, ОЦИС, ОИК, ОДДС");
	
	Для Каждого ИмяРаздела Из РазделыСДатойПодписи Цикл
		Если ИмяРаздела = ИмяРазделаВТабличномДокументе Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
		ПоместитьПоказательВДерево(ДанныеРаздела, "ДатаПодписиОтчета", ДатаПодписи);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕдиницуИзмеренияВРазделах(ИмяРазделаВТабличномДокументе = "")
	
	ПредставлениеЕдиницыИзмерения = "тыс. руб.";
	КодЕдиницыИзмерения = "384";
	Если СтруктураРеквизитовФормы.мДелитель <> 1000 Тогда
		ПредставлениеЕдиницыИзмерения = "руб.";
		КодЕдиницыИзмерения = "383";
	КонецЕсли;
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	РазделыСЕдиницейИзмерения = Список("Баланс, ОФР, ОЦИС, ОИК, ОДДС");
	
	Для Каждого ИмяРаздела Из РазделыСЕдиницейИзмерения Цикл
		Если ИмяРаздела = ИмяРазделаВТабличномДокументе Тогда
			ТабличныйДокумент.Области.ЕдиницаИзмеренияВРазделе.Текст = ПредставлениеЕдиницыИзмерения;
			ТабличныйДокумент.Области.КодПоОКЕИВРазделе.Текст = КодЕдиницыИзмерения;
		КонецЕсли;
		
		ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
		ПоместитьПоказательВДерево(ДанныеРаздела, "ЕдиницаИзмеренияВРазделе", ПредставлениеЕдиницыИзмерения);
		ПоместитьПоказательВДерево(ДанныеРаздела, "КодПоОКЕИВРазделе", КодЕдиницыИзмерения);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииВРазделах(ИмяРазделаВТабличномДокументе = "")
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	ПереченьСведений = "ИННЮЛ, НаимЮЛПол, ОКПО, ОКОПФ, ОКФС, ФормСобств, ОргПравФорм, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,
		ДатаПодписи, ПереченьСведений);
	
	Если СтруктураРеквизитовФормы.ЭтоИП = Истина Тогда
		НаименованиеОрганизации = СокрЛП(Сведения.ФИО);
		ИНН = Сведения.ИННЮЛ;
	Иначе
		НаименованиеОрганизации = Сведения.НаимЮЛПол;
		ИНН = Сведения.ИННЮЛ;
	КонецЕсли;
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	РазделыСБлокомКодов = Список("Баланс, ОФР, ОЦИС, ОИК, ОДДС");
	
	Для Каждого ИмяРаздела Из РазделыСБлокомКодов Цикл
		Если ИмяРаздела = ИмяРазделаВТабличномДокументе Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
		ПоместитьПоказательВДерево(ДанныеРаздела, "НаименованиеОрганизацииВРазделе", НаименованиеОрганизации);
		ПоместитьПоказательВДерево(ДанныеРаздела, "КодПоОКПОВРазделе", Сведения.ОКПО);
		
	КонецЦикла;
	
	// Заголовочная часть бухгалтерской отчетности.
	АдресОрганизации = АдресОрганизацииПоУмолчанию(Организация);
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти("Баланс", "Идентификатор");
	ПоместитьПоказательВДерево(ДанныеРаздела, "НаименованиеОрганизацииВЗаголовке", НаименованиеОрганизации);
	ПоместитьПоказательВДерево(ДанныеРаздела, "КодПоОКПОВЗаголовке", Сведения.ОКПО);
	ПоместитьПоказательВДерево(ДанныеРаздела, "ИННВЗаголовке", ИНН);
	ПоместитьПоказательВДерево(ДанныеРаздела, "ОКОПФВЗаголовке", Сведения.ОргПравФорм);
	ПоместитьПоказательВДерево(ДанныеРаздела, "КодПоОКОПФВЗаголовке", Сведения.ОКОПФ);
	ПоместитьПоказательВДерево(ДанныеРаздела, "ОКФСВЗаголовке", Сведения.ФормСобств);
	ПоместитьПоказательВДерево(ДанныеРаздела, "КодПоОКФСВЗаголовке", Сведения.ОКФС);
	ПоместитьПоказательВДерево(ДанныеРаздела, "АдресВЗаголовке", АдресОрганизации.Представление);
	
	ЗаполнитьКодНалоговогоОрганаПолучателя(ДанныеРаздела);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписантаВРазделах(ИмяРазделаВТабличномДокументе = "")
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	ПереченьСведений = "ФИОРук, ДолжнРук, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация,
		ДатаПодписи, ПереченьСведений);
	
	Должность = "";
	Если СтруктураРеквизитовФормы.ЭтоИП Тогда
		Подписант = Сведения.ФИО;
	Иначе
		Подписант = Сведения.ФИОРук;
		Должность = Сведения.ДолжнРук;
	КонецЕсли;
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	РазделыСПодписью = Список("Баланс, ОФР, ОЦИС, ОИК, ОДДС");
	
	Для Каждого ИмяРаздела Из РазделыСПодписью Цикл
		Если ИмяРаздела = ИмяРазделаВТабличномДокументе Тогда
			ТабличныйДокумент.Области.ФИОПодписанта.Текст = Подписант;
			ТабличныйДокумент.Области.ДолжностьПодписанта.Текст = Должность;
		КонецЕсли;
		
		ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
		ПоместитьПоказательВДерево(ДанныеРаздела, "ФИОПодписанта", Подписант);
		ПоместитьПоказательВДерево(ДанныеРаздела, "ДолжностьПодписанта", Должность);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
КонецПроцедуры

&НаСервере
Функция АдресОрганизацииПоУмолчанию(Организация)
	
	ПредставлениеАдреса = "";
	АдресПоПредставлению = Ложь;
	
	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		ВидыАдресов = "АдрМЖ, АдрПрописки";
	Иначе
		ВидыАдресов = "АдрФакт_XML, АдрЮР_XML, АдрПочт_XML";
		АдресПоПредставлению = Истина;
	КонецЕсли;
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , ВидыАдресов);
	
	ИменаВидовАдресов = СтрРазделить(ВидыАдресов, ",");
	Для Каждого ИмяВидаАдреса Из ИменаВидовАдресов Цикл
		ИмяВидаАдреса = СокрЛП(ИмяВидаАдреса);
		
		ПолныйАдрес = Адреса[ИмяВидаАдреса];
		Если АдресПоПредставлению Тогда
			ПредставлениеАдреса = ПредставлениеАдресаИзXML(ПолныйАдрес);
			АдресЗаполнен = ЗначениеЗаполнено(ПредставлениеАдреса);
		Иначе
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
			АдресЗаполнен = ЗначениеЗаполнено(СтрЗаменить(ПредставлениеАдреса, ",", ""));
		КонецЕсли;
		
		Если АдресЗаполнен Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Адрес, Представление", ПолныйАдрес, ПредставлениеАдреса);
	
КонецФункции

&НаСервере
Функция ПредставлениеАдресаИзXML(ТекстXML)
	
	ПредставлениеАдреса = "";
	
	Если ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		ПостроительDOM = Новый ПостроительDOM;
		
		КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
		
		Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла <> "КонтактнаяИнформация" Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеАдреса = ПолучитьАтрибутКакСтроку(Узел, "Представление");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакВидимостиСсылкиВыбораОрганизацийДляЗаполнения()
	
	СтруктураРеквизитовФормы.ОтображатьСсылкуВыбораОрганизаций =
		НЕ  РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация()
		И СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМеханизмыНастройкиЗаполнения()
	
	КонтекстОтчета = БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета();
	КонтекстОтчета.Период      = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	КонтекстОтчета.Организация = СтруктураРеквизитовФормы.Организация;
	
	НастраиваемыеРазделыОтчета = ВсеРазделыОтчета("");
	
	БухгалтерскаяОтчетностьБРОПереопределяемый.ПриЗаполненииПеречняНастраиваемыхРазделов(НастраиваемыеРазделыОтчета, Параметры);
	СтруктураРеквизитовФормы.РазделыСПоддержкойНастройкиЗаполнения = НастраиваемыеРазделыОтчета;
	
	Элементы.ФормаНастроитьЗаполнение.Видимость = ЕстьНастраиваемыеРазделыОтчета(СтруктураРеквизитовФормы.РазделыСПоддержкойНастройкиЗаполнения);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресЗаполняемыеПоказатели);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНастраиваемыеРазделыОтчета(РазделыСПоддержкойНастройкиЗаполнения)
	
	Для Каждого ОписаниеРаздела Из РазделыСПоддержкойНастройкиЗаполнения Цикл
		Если Не ПустаяСтрока(ОписаниеРаздела.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВыводОтчетаНаФорму

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(ИмяРаздела)
	
	Если ИмяРаздела <> "ДополнительныеФайлы" Тогда
		ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
		ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
		
		СобратьДанныеТабличногоПоля(ТабличныйДокумент, ДанныеРаздела, ДанныеРаздела);
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
			СтруктураМногострочныхРазделов);
		
	КонецЕсли;
	
КонецПроцедуры

// Собирает данные табличного поля и помещает в соответствующие хранилища.
// 
// Параметры:
//   ТабличноеПоле - ТабличныйДокумент
//   ХранилищеПоказателей - ДеревоЗначений
//   ХранилищеМСЧ - ДеревоЗначений
//
&НаСервере
Процедура СобратьДанныеТабличногоПоля(ТабличноеПоле, ХранилищеПоказателей, ХранилищеМСЧ)
	
	ПоказателиМСЧ = Новый Массив;
	
	МногострочныеЧасти = ХранилищеМСЧ.Строки.НайтиСтроки(Новый Структура("Тип", "МногострочнаяЧасть"), Истина);
	Для Каждого МногострочнаяЧасть Из МногострочныеЧасти Цикл
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Идентификатор;
		ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдентификаторМногострочнойЧасти);
		ПостфиксРодителяМСЧ = ПостфиксРодителяМногострочнойЧасти(МногострочнаяЧасть);
		
		СтрокиМСЧ = СтрокиМногострочнойЧасти(МногострочнаяЧасть);
		Для Инд = 1 По СтрокиМСЧ.Количество() Цикл
			Для Каждого ОписаниеПоказателя Из ОписаниеМногострочнойЧасти.Показатели Цикл
				ИмяПоказателя = ОписаниеПоказателя.Имя;
				ИмяОбластиПоказателя = ИмяПоказателя + ПостфиксРодителяМСЧ + "_" + СтрЧГ0(Инд);
				ПоказателиМСЧ.Добавить(ИмяОбластиПоказателя);
				
				Если ТабличноеПоле.Области[ИмяОбластиПоказателя].СодержитЗначение = Истина Тогда
					СохраняемоеЗначение = ТабличноеПоле.Области[ИмяОбластиПоказателя].Значение;
				Иначе
					СохраняемоеЗначение = ТабличноеПоле.Области[ИмяОбластиПоказателя].Текст;
				КонецЕсли;
				
				ПоместитьПоказательВДерево(СтрокиМСЧ[Инд - 1], ИмяПоказателя, СохраняемоеЗначение);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабличноеПоле.Области Цикл
		ИмяПоказателя = ОбластьТД.Имя;
		ЭтоСлужебнаяОбласть = СтрНачинаетсяС(ИмяПоказателя, "ДобавитьСтроку")
		                      ИЛИ СтрНачинаетсяС(ИмяПоказателя, "УдалитьСтроку");
		
		Если ЭтоСлужебнаяОбласть ИЛИ ОбластьТД.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		     ИЛИ ПоказателиМСЧ.Найти(ИмяПоказателя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбластьТД.СодержитЗначение = Истина Тогда
			СохраняемоеЗначение = ОбластьТД.Значение;
		Иначе
			СохраняемоеЗначение = ОбластьТД.Текст;
		КонецЕсли;
		
		ПоместитьПоказательВДерево(ХранилищеПоказателей, ИмяПоказателя, СохраняемоеЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьПоказательВДерево(ХранилищеПоказателей, ИмяПоказателя, ЗначениеПоказателя)
	
	ПараметрыПоискаПоказателя = Новый Структура("Тип, Идентификатор", "Показатель", ИмяПоказателя);
	СтрокиПоказателей = ХранилищеПоказателей.Строки.НайтиСтроки(ПараметрыПоискаПоказателя);
	
	Если СтрокиПоказателей.Количество() > 0 Тогда
		СтрокаПоказателя = СтрокиПоказателей[0];
	Иначе
		СтрокаПоказателя = ХранилищеПоказателей.Строки.Добавить();
		СтрокаПоказателя.Тип = "Показатель";
		СтрокаПоказателя.Идентификатор = ИмяПоказателя;
	КонецЕсли;
	
	СтрокаПоказателя.Данные = ЗначениеПоказателя;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяТекРаздела, "Идентификатор");
	
	Показатели = ДанныеРаздела.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		// Вывод статических показателей защищен от искажения структуры отчета во внешних механизмах.
		ОбластьПоказателя = ТабличныйДокумент.Области.Найти(СтрокаПоказателя.Идентификатор);
		Если ОбластьПоказателя <> Неопределено Тогда
			Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
				ОбластьПоказателя.Значение = СтрокаПоказателя.Данные;
			Иначе
				ОбластьПоказателя.Текст = СтрокаПоказателя.Данные;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МногострочныеЧасти = ДанныеРаздела.Строки.НайтиСтроки(Новый Структура("Тип", "МногострочнаяЧасть"));
	Для Каждого МногострочнаяЧасть Из МногострочныеЧасти Цикл
		ВывестиМногострочнуюЧасть(МногострочнаяЧасть);
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	УстановитьЦветФонаЯчейкиНаСервере( , , ИмяТекРаздела);
	
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
КонецПроцедуры

// Вывести многострочную часть.
// 
// Параметры:
//  ДанныеМСЧ - СтрокаТаблицыЗначений:
//    * Тип - Строка
//    * Идентификатор - Строка
//    * Данные - Структура
//
&НаСервере
Процедура ВывестиМногострочнуюЧасть(ДанныеМСЧ)
	
	ИдМСЧ = ДанныеМСЧ.Идентификатор;
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	ИмяПозицииВставки = "ДобавлениеСтроки" + ИдМСЧ;
	
	СборкаДляВставки = Новый ТабличныйДокумент;
	
	ПостфиксПоказателейОбразца = "_1";
	
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ДанныеМСЧ);
	Для Инд = 1 По СтрокиМСЧ.Количество() Цикл
		СтрокаМСЧ = СтрокиМСЧ[Инд - 1];
		ПостфиксНовыхПоказателей = "_" + СтрЧГ0(Инд);
		
		ОбразецДляВставки = ОписаниеМногострочнойЧасти.Образец.ПолучитьОбласть();
		
		Показатели = СтрокаМСЧ.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
		Для Каждого СтрокаПоказателя Из Показатели Цикл
			ИмяПоказателя = СтрокаПоказателя.Идентификатор;
			ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксПоказателейОбразца].Имя =
				ИмяПоказателя + ПостфиксНовыхПоказателей;
			
			ОбластьПоказателя = ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксНовыхПоказателей];
			Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
				ОбластьПоказателя.Значение = СтрокаПоказателя.Данные;
			Иначе
				ОбластьПоказателя.Текст = СтрокаПоказателя.Данные;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбразецДляВставки.Области["УдалитьСтроку" + ИдМСЧ + ПостфиксПоказателейОбразца].Имя =
			"УдалитьСтроку" + ИдМСЧ + ПостфиксНовыхПоказателей;
		
		СборкаДляВставки.Вывести(ОбразецДляВставки);
		
		// Отрисовка подчиненных многострочных частей.
		ПараметрыПоиска = Новый Структура("Тип", "МногострочнаяЧасть");
		ОбъявлениеПодчиненныхМСЧ = СтрокаМСЧ.Строки.НайтиСтроки(ПараметрыПоиска);
		Для Каждого ОбъявлениеПодчиненнойМСЧ Из ОбъявлениеПодчиненныхМСЧ Цикл
			ПараметрыОтрисовкиМСЧ = Новый Структура;
			ПараметрыОтрисовкиМСЧ.Вставить("СборкаДляВставки", СборкаДляВставки);
			ПараметрыОтрисовкиМСЧ.Вставить("ДанныеМСЧ", ОбъявлениеПодчиненнойМСЧ);
			ПараметрыОтрисовкиМСЧ.Вставить("ПостфиксРодителя", ПостфиксНовыхПоказателей);
			ВывестиПодчиненнуюМногострочнуюЧасть(ПараметрыОтрисовкиМСЧ);
		КонецЦикла;
		
	КонецЦикла;
	
	ПозицияВставки = ТабличныйДокумент.Область(ИмяПозицииВставки);
	ОбластьПервойСтрокиМСЧ = ТабличныйДокумент.Область(ОписаниеМногострочнойЧасти.Показатели[0].Имя + "_1");
	УдаляемаяОбласть = ТабличныйДокумент.Область(ОбластьПервойСтрокиМСЧ.Верх, , ПозицияВставки.Верх - 1);
	ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ПозицияВставки = ТабличныйДокумент.Область(ИмяПозицииВставки);
	ТабличныйДокумент.ВставитьОбласть(СборкаДляВставки.Область(1, , СборкаДляВставки.ВысотаТаблицы),
		ПозицияВставки, ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненнуюМногострочнуюЧасть(ПараметрыОтрисовкиМСЧ)
	
	СборкаДляВставки = ПараметрыОтрисовкиМСЧ.СборкаДляВставки;
	ДанныеМСЧ = ПараметрыОтрисовкиМСЧ.ДанныеМСЧ;
	ПостфиксРодителя = ПараметрыОтрисовкиМСЧ.ПостфиксРодителя;
	
	ИдМСЧ = ДанныеМСЧ.Идентификатор;
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ДанныеМСЧ);
	Для Инд = 1 По СтрокиМСЧ.Количество() Цикл
		СтрокаМСЧ = СтрокиМСЧ[Инд - 1];
		ПостфиксНовыхПоказателей = ПостфиксРодителя + "_" + СтрЧГ0(Инд);
		ПостфиксПоказателейОбразца = ПостфиксПервичнойСтроки(ПостфиксНовыхПоказателей);
		
		ОбразецДляВставки = ОписаниеМногострочнойЧасти.Образец.ПолучитьОбласть();
		
		Показатели = СтрокаМСЧ.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
		Для Каждого СтрокаПоказателя Из Показатели Цикл
			ИмяПоказателя = СтрокаПоказателя.Идентификатор;
			ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксПоказателейОбразца].Имя =
				ИмяПоказателя + ПостфиксНовыхПоказателей;
			
			ОбластьПоказателя = ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксНовыхПоказателей];
			Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
				ОбластьПоказателя.Значение = СтрокаПоказателя.Данные;
			Иначе
				ОбластьПоказателя.Текст = СтрокаПоказателя.Данные;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбразецДляВставки.Области["УдалитьСтроку" + ИдМСЧ + ПостфиксПоказателейОбразца].Имя =
			"УдалитьСтроку" + ИдМСЧ + ПостфиксНовыхПоказателей;
		
		СборкаДляВставки.Вывести(ОбразецДляВставки);
		
	КонецЦикла;
	
	ПостфиксОбразца = ПостфиксПервичнойСтроки(ПостфиксРодителя);
	ИмяОбразцаДобавленияСтроки = "ДобавлениеСтроки" + ИдМСЧ + ПостфиксОбразца;
	ИмяДобавленияСтроки = "ДобавлениеСтроки" + ИдМСЧ + ПостфиксРодителя;
	ОбразецДляВставки = ТабличныйДокумент.ПолучитьОбласть(ИмяОбразцаДобавленияСтроки);
	ОбразецДляВставки.Области[ИмяОбразцаДобавленияСтроки].Имя = ИмяДобавленияСтроки;
	ОбразецДляВставки.Области["ДобавитьСтрокуЗначок_" + ИдМСЧ + ПостфиксОбразца].Имя =
		"ДобавитьСтрокуЗначок_" + ИдМСЧ + ПостфиксРодителя;
	ОбразецДляВставки.Области["ДобавитьСтроку_" + ИдМСЧ + ПостфиксОбразца].Имя =
		"ДобавитьСтроку_" + ИдМСЧ + ПостфиксРодителя;
	СборкаДляВставки.Вывести(ОбразецДляВставки);
	
КонецПроцедуры

&НаСервере
Функция ПостфиксПервичнойСтроки(ИсходныйПостфикс)
	
	РаздельныйПостфикс = СтрРазделить(ИсходныйПостфикс, "_");
	
	// В первом элементе массива может содержаться идентификатор многострочной части или служебное значение.
	Если РаздельныйПостфикс.Количество() > 0 Тогда
		РаздельныйПостфикс[0] = "";
	КонецЕсли;
	
	Для Инд = 1 По РаздельныйПостфикс.ВГраница() Цикл
		РаздельныйПостфикс[Инд] = "1";
	КонецЦикла;
	
	Возврат СтрСоединить(РаздельныйПостфикс, "_");
	
КонецФункции

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ОбрабатываемыйМакет)
	
	МСЧСоЗначкамиУдаления = Новый Массив;
	
	Для Каждого ОбластьТД Из ОбрабатываемыйМакет.Области Цикл
		ИмяОбласти = ОбластьТД.Имя;
		РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИмяОбласти, "^(УдалитьСтроку.+)(_2)$");
		
		Если РезультатПоиска.Длина <> 0 Тогда
			ГруппыПоиска = РезультатПоиска.ПолучитьГруппы();
			МСЧСоЗначкамиУдаления.Добавить(ГруппыПоиска[0].Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ОбрабатываемыйМакет.Области Цикл
		ИмяОбласти = ОбластьТД.Имя;
		РезультатПоиска = СтрНайтиПоРегулярномуВыражению(ИмяОбласти, "^(УдалитьСтроку.+)(_[0-9]+)$");
		
		Если РезультатПоиска.Длина <> 0 Тогда
			ИмяБезПоследнегоИндекса = РезультатПоиска.ПолучитьГруппы()[0].Значение;
			Если МСЧСоЗначкамиУдаления.Найти(ИмяБезПоследнегоИндекса) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено,
	ИмяТекущейСтраницыПанели = "")
	
	ЦветФона = Неопределено;
	КомментарийВарианта = "";
	
	Если ИмяЯчейки = Неопределено Тогда
		ТаблицаВариантыЗаполнения =
			РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
				ЭтотОбъект, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			КомментарийВарианта      =  Строка.Комментарий;
			
			Если ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекОбластьЯчеек = ТабличныйДокумент.Области[ИмяПоказателя];
			Если ЗначениеЗаполнено(КомментарийВарианта) Тогда
				ТекОбластьЯчеек.Примечание.Текст = КомментарийВарианта;
			КонецЕсли;
			
			Ключ = "_" + ВариантЗаполнения;
			мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
			
			Если ВариантЗаполнения = 4 Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
			ИначеЕсли ВариантЗаполнения = 5 Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
			Иначе
				ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
			КонецЕсли;
			
			ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	КонецЕсли;
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяВФорме  = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		Если ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезИндексов)
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	ИдентификаторМногострочнойЧасти = ИдМСЧСервер(ИмяПоказателяБезИндексов);
	
	ВсеЭкземплярыМСЧ = ДеревоДанныхРазделов.Строки.НайтиСтроки(
		Новый Структура("Идентификатор", ИдентификаторМногострочнойЧасти), Истина);
		
	Для Каждого ДанныеМСЧ Из ВсеЭкземплярыМСЧ Цикл
		СуффиксРодителей = "";
		
		РодительМСЧ = ДанныеМСЧ.Родитель;
		Пока РодительМСЧ.Тип = "Строка" Цикл
			ВсеСтрокиРодителя = СтрокиМногострочнойЧасти(РодительМСЧ.Родитель);
			ИндексРодителя = ВсеСтрокиРодителя.Найти(РодительМСЧ);
			СуффиксРодителей = "_" + СтрЧГ0(ИндексРодителя + 1) + СуффиксРодителей;
			РодительМСЧ = ДанныеМСЧ.Родитель.Родитель; // уровень объявления МСЧ
		КонецЦикла;
		
		ВсеСтрокиМСЧ = СтрокиМногострочнойЧасти(ДанныеМСЧ);
		КоличествоСтрокВМногострочнойЧасти = ВсеСтрокиМСЧ.Количество();
		Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
			ИмяОбласти = ИмяПоказателяБезИндексов + СуффиксРодителей + "_" + СтрЧГ0(Инд);
			Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
			Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МакетОтчета(ИмяРаздела)
	
	ИмяМакетаОтчета = ИмяФормыОтчета(ИмяФормы) + "_" + СтруктураОтчета[ИмяРаздела].ИмяМакета;
	МакетОтчета = ОбъектОтчета().ПолучитьМакет(ИмяМакетаОтчета);
	
	ПараметрыПодготовкиМакета = Новый Структура;
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетная",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаКонцаПрошлогоГода",
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода",
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетногоПериода",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокПериодОтчета",
		СтруктураРеквизитовФормы.ЗаголовокПериодОтчета);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному",
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПериодаПрошлогоГодаАналогичногоОтчетному);
		
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетнаяДень",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяДень);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетнаяМесяц",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяМесяц);
	ПараметрыПодготовкиМакета.Вставить("ЗаголовокДатаОтчетнаяГод",
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетнаяГод);
		
	ПараметрыПодготовкиМакета.Вставить("ОтображатьСсылкуВыбораОрганизаций",
		СтруктураРеквизитовФормы.ОтображатьСсылкуВыбораОрганизаций);
		
	ОбъектОтчета().ПодготовитьМакетОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
		МакетОтчета, ИмяРаздела, ПараметрыПодготовкиМакета);
	
	Возврат МакетОтчета;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоРазделам

&НаКлиенте
Процедура ОбработатьРазделыОтчетаПриАктивизацииСтроки()
	
	ИдентификаторРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ПереключитьРаздел(ИдентификаторРаздела);
	УстановитьДоступностьКнопкиНастройкиЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если ИдетПозиционированиеНаОбластьРаздела Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРаздела = Ячейка.Раздел;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРаздела) Тогда
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	РазделВДеревеАктивныхРазделов = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	Если РазделВДеревеАктивныхРазделов = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Для перехода в раздел ""%1"" включите его отображение';
																	|en = 'Для перехода в раздел ""%1"" включите его отображение'"),
			ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела)));
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
		ИдентификаторАктивногоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Иначе
		ИдентификаторАктивногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если ИдентификаторРаздела <> ИдентификаторАктивногоРаздела Тогда
		ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела);
	КонецЕсли;
	
	Если ИдентификаторРаздела <> "ДополнительныеФайлы" Тогда
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НайденнаяОбласть = Неопределено Тогда
			НайденнаяОбласть = ТабличныйДокумент.Область(1, 1);
		КонецЕсли;
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела)
	
	АктивируемыйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	
	Элементы.РазделыОтчета.ТекущаяСтрока = АктивируемыйРаздел.ПолучитьИдентификатор();
	
	ПереключитьРаздел(ИдентификаторРаздела);
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элементы.РазделыОтчета.ТекущаяСтрока;
	УстановитьДоступностьКнопкиНастройкиЗаполнения();
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРаздел(ИдентификаторРаздела)
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Элементы.ЗаполнитьТекущий.Доступность = Истина;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Ложь;
	
	Если ИдентификаторРаздела = "ДополнительныеФайлы" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ДопФайлы;
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
	Иначе
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИдентификаторРаздела);
		
	КонецЕсли;
	
	Если ИдентификаторРаздела = "Баланс" Тогда
		ОбработатьПоляНалоговогоОргана();
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаМногострочныхЧастей

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если СтрНачинаетсяС(ТекущаяОбласть.Имя, "ДобавитьСтроку") Тогда
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
	ИначеЕсли СтрНайти(ТекущаяОбласть.Имя, "УдалитьСтроку") = 1 Тогда
		// Вызов из контекстного меню при клике на значке удаления.
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "УдалитьСтроку", "");
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	Иначе
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
	КонецЕсли;
	
	ВставитьСтрокуМногострочнойЧасти(ИмяПоказателя);
	
КонецПроцедуры

// Вставляет строку многострочной части.
//
// Параметры:
//   ИмяПоказателя - Строка - Идентификатор многострочной части с постфиксом родителя,
//                            если родителя нет, то посфикс пустой.
//
&НаСервере
Процедура ВставитьСтрокуМногострочнойЧасти(ИмяПоказателя)
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ИдМСЧ = Лев(ИмяПоказателя, 11);
	
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	УстановитьФорматПоказателейОбразцаМСЧ(ОписаниеМногострочнойЧасти);
	
	ДеревоДанныхРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
	
	РаздельныйАдресПоказателя = СтрРазделить(ИмяПоказателя, "_");
	
	// Поиск родителя.
	РодительМСЧ = ДеревоДанныхРаздела;
	Для Инд = 1 По РаздельныйАдресПоказателя.ВГраница() Цикл
		ИдМСЧРодителя = ОписаниеМногострочнойЧасти.Родители[Инд - 1];
		ОбъявлениеРодительскойМСЧ = РодительМСЧ.Строки.Найти(ИдМСЧРодителя, "Идентификатор");
		СтрокиРодительскойМСЧ = СтрокиМногострочнойЧасти(ОбъявлениеРодительскойМСЧ);
		РодительМСЧ = СтрокиРодительскойМСЧ[РаздельныйАдресПоказателя[Инд] - 1];
	КонецЦикла;
	
	// Поиск строки многострочной части.
	ДанныеМСЧ = РодительМСЧ.Строки.Найти(ИдМСЧ, "Идентификатор");
	НоваяСтрокаМСЧ = ДанныеМСЧ.Строки.Добавить();
	НоваяСтрокаМСЧ.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(НоваяСтрокаМСЧ, ИдМСЧ);
	
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ДанныеМСЧ);
	
	РаздельныйАдресОбразца = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресПоказателя);
	Для Инд = 1 По РаздельныйАдресОбразца.ВГраница() Цикл
		РаздельныйАдресОбразца[Инд] = "1";
	КонецЦикла;
	РаздельныйАдресОбразца[0] = "";
	РаздельныйАдресОбразца.Добавить("1");
	ПостфиксПоказателейОбразца = СтрСоединить(РаздельныйАдресОбразца, "_");
	
	РаздельныйАдресНовогоПоказателя = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресПоказателя);
	РаздельныйАдресНовогоПоказателя[0] = "";
	РаздельныйАдресНовогоПоказателя.Добавить(СтрЧГ0(СтрокиМСЧ.Количество()));
	ПостфиксНовыхПоказателей = СтрСоединить(РаздельныйАдресНовогоПоказателя, "_");
	
	ОбразецДляВставки = ОписаниеМногострочнойЧасти.Образец.ПолучитьОбласть();
	Для Каждого ОписаниеПоказателя Из ОписаниеМногострочнойЧасти.Показатели Цикл
		ИмяПоказателя = ОписаниеПоказателя.Имя;
		ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксПоказателейОбразца].Имя =
			ИмяПоказателя + ПостфиксНовыхПоказателей;
	КонецЦикла;
	ОбразецДляВставки.Области["УдалитьСтроку" + ИдМСЧ + ПостфиксПоказателейОбразца].Имя =
		"УдалитьСтроку" + ИдМСЧ + ПостфиксНовыхПоказателей;
	
	РаздельныйАдресМестаВставки = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресПоказателя);
	РаздельныйАдресМестаВставки[0] = "";
	ПостфиксМестаВставки = СтрСоединить(РаздельныйАдресМестаВставки, "_");
	
	ИмяПозицииВставки = "ДобавлениеСтроки" + ИдМСЧ + ПостфиксМестаВставки;
	ПозицияВставки = ТабличныйДокумент.Области[ИмяПозицииВставки];
	ТабличныйДокумент.ВставитьОбласть(ОбразецДляВставки.Область(), ПозицияВставки,
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	// Вставка подчиненных многострочных частей.
	ПараметрыПоиска = Новый Структура("Тип", "МногострочнаяЧасть");
	ОбразцыПодчиненныхМСЧ = СтрокиМСЧ[0].Строки.НайтиСтроки(ПараметрыПоиска);
	Для Каждого ОбразецПодчиненнойМСЧ Из ОбразцыПодчиненныхМСЧ Цикл
		ПараметрыДобавленияМСЧ = Новый Структура;
		ПараметрыДобавленияМСЧ.Вставить("РодительскаяСтрока", НоваяСтрокаМСЧ);
		ПараметрыДобавленияМСЧ.Вставить("ОбразецМСЧ", ОбразецПодчиненнойМСЧ);
		ПараметрыДобавленияМСЧ.Вставить("ИмяПозицииВставки", ИмяПозицииВставки);
		ПараметрыДобавленияМСЧ.Вставить("РаздельныйАдресРодителя", РаздельныйАдресНовогоПоказателя);
		ПараметрыДобавленияМСЧ.Вставить("ПостфиксНовыхПоказателейРодителя", ПостфиксНовыхПоказателей);
		ДобавитьПодчиненныеМногострочныеЧасти(ПараметрыДобавленияМСЧ);
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеМногострочныеЧасти(ПараметрыДобавления)
	
	РодительскаяСтрока = ПараметрыДобавления.РодительскаяСтрока;
	ОбразецМСЧ = ПараметрыДобавления.ОбразецМСЧ;
	ИмяПозицииВставки = ПараметрыДобавления.ИмяПозицииВставки;
	РаздельныйАдресРодителя = ПараметрыДобавления.РаздельныйАдресРодителя;
	ПостфиксНовыхПоказателейРодителя = ПараметрыДобавления.ПостфиксНовыхПоказателейРодителя;
	
	ИдМСЧ = ОбразецМСЧ.Идентификатор;
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	УстановитьФорматПоказателейОбразцаМСЧ(ОписаниеМногострочнойЧасти);
	
	// Формирование структур данных многострочной части.
	ОбъявлениеМСЧ = РодительскаяСтрока.Строки.Добавить();
	ОбъявлениеМСЧ.Тип = "МногострочнаяЧасть";
	ОбъявлениеМСЧ.Идентификатор = ИдМСЧ;
	
	ПерваяСтрокаМСЧ = ОбъявлениеМСЧ.Строки.Добавить();
	ПерваяСтрокаМСЧ.Тип = "Строка";
	СформироватьПоказателиСтрокиМногострочнойЧасти(ПерваяСтрокаМСЧ, ИдМСЧ);
	
	// Отрисовка строки многострочной части.
	ОбразецДляВставки = ОписаниеМногострочнойЧасти.Образец.ПолучитьОбласть();
	
	РаздельныйАдресОбразца = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресРодителя);
	Для Инд = 1 По РаздельныйАдресОбразца.ВГраница() Цикл
		РаздельныйАдресОбразца[Инд] = "1";
	КонецЦикла;
	ПостфиксПоказателейОбразцаРодителя = СтрСоединить(РаздельныйАдресОбразца, "_");
	РаздельныйАдресОбразца.Добавить("1");
	ПостфиксПоказателейОбразца = СтрСоединить(РаздельныйАдресОбразца, "_");
	
	РаздельныйАдресНовогоПоказателя = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресРодителя);
	РаздельныйАдресНовогоПоказателя.Добавить("1");
	ПостфиксНовыхПоказателей = СтрСоединить(РаздельныйАдресНовогоПоказателя, "_");
	
	Для Каждого ОписаниеПоказателя Из ОписаниеМногострочнойЧасти.Показатели Цикл
		ИмяПоказателя = ОписаниеПоказателя.Имя;
		ОбразецДляВставки.Области[ИмяПоказателя + ПостфиксПоказателейОбразца].Имя =
			ИмяПоказателя + ПостфиксНовыхПоказателей;
	КонецЦикла;
	ОбразецДляВставки.Области["УдалитьСтроку" + ИдМСЧ + ПостфиксПоказателейОбразца].Имя =
		"УдалитьСтроку" + ИдМСЧ + ПостфиксНовыхПоказателей;
	
	ПозицияВставки = ТабличныйДокумент.Область(ИмяПозицииВставки);
	ТабличныйДокумент.ВставитьОбласть(ОбразецДляВставки.Область(), ПозицияВставки,
		ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	// Отрисовка области добавления строки многострочной части.
	ОбразецОбластиДобавленияСтроки = ТабличныйДокумент.ПолучитьОбласть(
		"ДобавлениеСтроки" + ИдМСЧ + ПостфиксПоказателейОбразцаРодителя);
		
	ОбразецОбластиДобавленияСтроки.Области["ДобавлениеСтроки" + ИдМСЧ + ПостфиксПоказателейОбразцаРодителя].Имя =
		"ДобавлениеСтроки" + ИдМСЧ + ПостфиксНовыхПоказателейРодителя;
	ОбразецОбластиДобавленияСтроки.Области["ДобавитьСтроку_" + ИдМСЧ + ПостфиксПоказателейОбразцаРодителя].Имя =
		"ДобавитьСтроку_" + ИдМСЧ + ПостфиксНовыхПоказателейРодителя;
	ОбразецОбластиДобавленияСтроки.Области["ДобавитьСтрокуЗначок_" + ИдМСЧ + ПостфиксПоказателейОбразцаРодителя].Имя =
		"ДобавитьСтрокуЗначок_" + ИдМСЧ + ПостфиксНовыхПоказателейРодителя;
	
	ПозицияВставки = ТабличныйДокумент.Область(ИмяПозицииВставки);
	ТабличныйДокумент.ВставитьОбласть(ОбразецОбластиДобавленияСтроки.Область(), ПозицияВставки,
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматПоказателейОбразцаМСЧ(ОписаниеМногострочнойЧасти)
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого ОбластьОбразца Из ОписаниеМногострочнойЧасти.Образец.Области Цикл
		Если СтрНачинаетсяС(ОбластьОбразца.Имя, "П10001") Тогда
			ИмяПоказателя = СтрРазделить(ОбластьОбразца.Имя, "_")[0];
			ОписаниеПоказателя = ТаблицаСоставПоказателей.Найти(ИмяПоказателя, "КодПоказателяПоСоставу");
			
			Если ОписаниеПоказателя <> Неопределено Тогда
				ТипДанныхПоказателя = СокрЛП(ОписаниеПоказателя.ТипДанныхПоказателя);
				Если ТипДанныхПоказателя = "Е" Тогда
					ОбластьОбразца.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтроку()
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ДополнительныеПараметры = Новый Структура("ИмяПоказателя", ИмяПоказателя);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "УдалитьСтроку", "");
	
	УдалитьСтрокуМногострочнойЧасти(ИмяПоказателя);
	
	РасчетПриИзмененииПоказателя(СтруктураРеквизитовФормы.НаимТекущегоРаздела, "");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуМногострочнойЧасти(ИмяПоказателя)
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	ДеревоДанныхРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
	
	ИдМСЧ = Лев(ИмяПоказателя, 11);
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	
	// Первый элемент - имя показателя без счетчиков или идентификатор многострочной части.
	// Последний элемент - номер удаляемой строки в многострочной части.
	РаздельныйАдресПоказателя = СтрРазделить(ИмяПоказателя, "_");
	
	РодительМСЧ = ДеревоДанныхРаздела; // родителем может быть или объявление раздела или строка многострочной части
	Для Инд = 1 По РаздельныйАдресПоказателя.ВГраница() - 1 Цикл
		ОбъявлениеМСЧ = РодительМСЧ.Строки.Найти(ОписаниеМногострочнойЧасти.Родители[Инд - 1], "Идентификатор");
		ВсеСтрокиРодителя = СтрокиМногострочнойЧасти(ОбъявлениеМСЧ);
		РодительМСЧ = ВсеСтрокиРодителя[Число(РаздельныйАдресПоказателя[Инд]) - 1];
	КонецЦикла;
	
	НомерУдаляемойСтроки = Число(РаздельныйАдресПоказателя[РаздельныйАдресПоказателя.ВГраница()]);
	ОбъявлениеМСЧ = РодительМСЧ.Строки.Найти(ИдМСЧ, "Идентификатор");
	ВсеСтрокиМСЧ = СтрокиМногострочнойЧасти(ОбъявлениеМСЧ);
	УдаляемаяСтрокаМСЧ = ВсеСтрокиМСЧ[НомерУдаляемойСтроки - 1];
	ЭтоПоследняяСтрокаМСЧ = (НомерУдаляемойСтроки = ВсеСтрокиМСЧ.Количество());
	
	// Первый показатель расположен на верхней границе области многострочной части.
	РаздельныйАдресДляПостфикса = ОбщегоНазначения.СкопироватьРекурсивно(РаздельныйАдресПоказателя);
	РаздельныйАдресДляПостфикса[0] = "";
	ПостфиксПоказателейУдаляемойСтроки = СтрСоединить(РаздельныйАдресДляПостфикса, "_");
	
	ОбластьПервогоПоказателя =
		ТабличныйДокумент.Области[ОписаниеМногострочнойЧасти.Показатели[0].Имя + ПостфиксПоказателейУдаляемойСтроки];
	ВерхУдаляемойОбласти = ОбластьПервогоПоказателя.Верх;
	
	Если ЭтоПоследняяСтрокаМСЧ Тогда
		// Область удаления от строки с первым показателем до строки,
		// предшествующей области добавления строки.
		РаздельныйАдресДляПостфикса.Удалить(РаздельныйАдресДляПостфикса.ВГраница());
		ПостфиксОбластиДобавленияСтроки = СтрСоединить(РаздельныйАдресДляПостфикса, "_");
		
		ОбластьДобавленияСтроки =
			ТабличныйДокумент.Области["ДобавлениеСтроки" + ИдМСЧ + ПостфиксОбластиДобавленияСтроки];
		НизУдаляемойОбласти = ОбластьДобавленияСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдаляемойОбласти, , НизУдаляемойОбласти);
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ОбъявлениеМСЧ.Строки.Удалить(УдаляемаяСтрокаМСЧ);
		
	Иначе
		// Область удаления от строки с первым показателем до строки,
		// предшествующей области первого показателя следующей строки.
		НомерУдаляемойСтроки = Число(РаздельныйАдресДляПостфикса[РаздельныйАдресДляПостфикса.ВГраница()]);
		РаздельныйАдресДляПостфикса[РаздельныйАдресДляПостфикса.ВГраница()] = СтрЧГ0(НомерУдаляемойСтроки + 1);
		ПостфиксПоказателейСледующейСтроки = СтрСоединить(РаздельныйАдресДляПостфикса, "_");
		
		ОбластьСледующегоПоказателя =
			ТабличныйДокумент.Области[ОписаниеМногострочнойЧасти.Показатели[0].Имя + ПостфиксПоказателейСледующейСтроки];
		НизУдаляемойОбласти = ОбластьСледующегоПоказателя.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдаляемойОбласти, , НизУдаляемойОбласти);
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование показателей нижележащих строк.
		Для НомерПоследующейСтроки = НомерУдаляемойСтроки + 1 По ВсеСтрокиМСЧ.Количество() Цикл
			ПоследующаяСтрокаМСЧ = ВсеСтрокиМСЧ[НомерПоследующейСтроки - 1];
			РаздельныйАдресДляПостфикса[РаздельныйАдресДляПостфикса.ВГраница()] = СтрЧГ0(НомерПоследующейСтроки);
			ПостфиксПоказателейПеренумеруемойСтроки = СтрСоединить(РаздельныйАдресДляПостфикса, "_");
			
			РаздельныйАдресДляПостфикса[РаздельныйАдресДляПостфикса.ВГраница()] = СтрЧГ0(НомерПоследующейСтроки - 1);
			НовыйПостфиксПоказателей = СтрСоединить(РаздельныйАдресДляПостфикса, "_");
			
			Для Каждого ОписаниеПоказателя Из ОписаниеМногострочнойЧасти.Показатели Цикл
				ИмяПоказателя = ОписаниеПоказателя.Имя;
				ТабличныйДокумент.Области[ИмяПоказателя + ПостфиксПоказателейПеренумеруемойСтроки].Имя =
					ИмяПоказателя + НовыйПостфиксПоказателей;
			КонецЦикла;
			ТабличныйДокумент.Области["УдалитьСтроку" + ИдМСЧ + ПостфиксПоказателейПеренумеруемойСтроки].Имя =
				"УдалитьСтроку" + ИдМСЧ + НовыйПостфиксПоказателей;
			
			ПараметрыПоиска = Новый Структура("Тип", "МногострочнаяЧасть");
			ПодчиненныеМСЧ = ПоследующаяСтрокаМСЧ.Строки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ПодчиненнаяМСЧ Из ПодчиненныеМСЧ Цикл
				ПараметрыПеренумерации = Новый Структура;
				ПараметрыПеренумерации.Вставить("ПодчиненнаяМСЧ", ПодчиненнаяМСЧ);
				ПараметрыПеренумерации.Вставить("ИсходныйПостфиксРодителя", ПостфиксПоказателейПеренумеруемойСтроки);
				ПараметрыПеренумерации.Вставить("НовыйПостфиксРодителя", НовыйПостфиксПоказателей);
				ПеренумероватьПоказателиПодчиненнойМногострочныеЧасти(ПараметрыПеренумерации);
			КонецЦикла;
			
		КонецЦикла;
		
		ОбъявлениеМСЧ.Строки.Удалить(УдаляемаяСтрокаМСЧ);
		
	КонецЕсли;
	
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	// В удаленной строке может содержаться расшифровка алгоритма заполнения.
	АдаптироватьМеханизмРасшифровки2011(ДеревоДанныхРазделов);
	ПерезаполнитьРаскраскуВписываемыхПоказателейРаздела(ИмяРаздела, ДеревоДанныхРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьПоказателиПодчиненнойМногострочныеЧасти(ПараметрыПеренумерации)
	
	ПодчиненнаяМСЧ = ПараметрыПеренумерации.ПодчиненнаяМСЧ;
	ИсходныйПостфиксРодителя = ПараметрыПеренумерации.ИсходныйПостфиксРодителя;
	НовыйПостфиксРодителя = ПараметрыПеренумерации.НовыйПостфиксРодителя;
	
	ИдМСЧ = ПодчиненнаяМСЧ.Идентификатор;
	ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти(ИдМСЧ);
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ПодчиненнаяМСЧ);
	
	Для Инд = 1 По СтрокиМСЧ.Количество() Цикл
		ПостфиксСтроки = "_" + СтрЧГ0(Инд);
		Для Каждого ОписаниеПоказателя Из ОписаниеМногострочнойЧасти.Показатели Цикл
			ИмяПоказателя = ОписаниеПоказателя.Имя;
			ТабличныйДокумент.Области[ИмяПоказателя + ИсходныйПостфиксРодителя + ПостфиксСтроки].Имя =
				ИмяПоказателя + НовыйПостфиксРодителя + ПостфиксСтроки;
		КонецЦикла;
		
		ТабличныйДокумент.Области["УдалитьСтроку" + ИдМСЧ + ИсходныйПостфиксРодителя + ПостфиксСтроки].Имя =
			"УдалитьСтроку" + ИдМСЧ + НовыйПостфиксРодителя + ПостфиксСтроки;
		
	КонецЦикла;
	
	ТабличныйДокумент.Области["ДобавлениеСтроки" + ИдМСЧ + ИсходныйПостфиксРодителя].Имя =
		"ДобавлениеСтроки" + ИдМСЧ + НовыйПостфиксРодителя;
	ТабличныйДокумент.Области["ДобавитьСтроку_" + ИдМСЧ + ИсходныйПостфиксРодителя].Имя =
		"ДобавитьСтроку_" + ИдМСЧ + НовыйПостфиксРодителя;
	ТабличныйДокумент.Области["ДобавитьСтрокуЗначок_" + ИдМСЧ + ИсходныйПостфиксРодителя].Имя =
		"ДобавитьСтрокуЗначок_" + ИдМСЧ + НовыйПостфиксРодителя;
		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРаскраскуВписываемыхПоказателейРаздела(ИмяРаздела, ДеревоДанныхРаздела);
	
	// Процедура используется для обновления вариантов раскраски вписываемых показателей
	// после удаления вписываемой строки. Дополнительная переокраска областей макета
	// не требуется.
	
	УдалитьВписываемыеПоказателиРазделаИзРаскраски(ИмяРаздела);
	
	МногострочныеЧастиРаздела = МногострочныеЧастиЭлементаРазделаОтчета(ДеревоДанныхРаздела);
	Для Каждого ОбъявлениеМСЧ Из МногострочныеЧастиРаздела Цикл
		ПостфиксСтрокиРодителя = "";
		ДобавитьПоказателиМСЧВРаскраску(ИмяРаздела, ОбъявлениеМСЧ, ПостфиксСтрокиРодителя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезСчетчика(Знач ИмяПоказателя)
	
	ПозицияСчетчика = СтрНайти(ИмяПоказателя, "_");
	
	Если ПозицияСчетчика > 0 Тогда
		Возврат Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	КонецЕсли;
	
	Возврат ИмяПоказателя;
	
КонецФункции

// Возвращает описание многострочной части по идентификатору.
// 
// Параметры:
//   ИдМСЧ - Строка
// 
// Возвращаемое значение:
//   Структура - Описание многострочной части:
//     * Родители - Массив из Строка - Идентификаторы родительских многострочных частей
//     * Показатели - Массив из Строка - Идентификаторы показателей без постфиксов
//     * Образец - ТабличныйДокумент - Идентификаторы показателей без постфиксов
//
&НаСервере
Функция ОписаниеМногострочнойЧасти(ИдМСЧ)
	
	ОписаниеМногострочнойЧасти = Новый Структура;
	ОписаниеМногострочнойЧасти.Вставить("Родители", Новый Массив);
	ОписаниеМногострочнойЧасти.Вставить("Показатели", Новый Массив);
	ОписаниеМногострочнойЧасти.Вставить("Образец", Новый ТабличныйДокумент);
	
	Если СтрНачинаетсяС(ИдМСЧ, "П1000101")
	     ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001А1")
	     ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001Б1") Тогда
		ДобавитьОписаниеМСЧ_Баланс(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П1000102")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001А2")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001Б2") Тогда
		ДобавитьОписаниеМСЧ_ОФР(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П1000103") Тогда
		ДобавитьОписаниеМСЧ_ОИК(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П1000104")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001А4")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001Б4") Тогда
		ДобавитьОписаниеМСЧ_ОДДС(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П1000106")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001А6")
	          ИЛИ СтрНачинаетсяС(ИдМСЧ, "П10001Б6") Тогда
		ДобавитьОписаниеМСЧ_ОЦИС(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001051") Тогда
		ДобавитьОписаниеМСЧ_Пояснения3(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001052") Тогда
		ДобавитьОписаниеМСЧ_Пояснения4(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001053") Тогда
		ДобавитьОписаниеМСЧ_Пояснения5(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001054") Тогда
		ДобавитьОписаниеМСЧ_Пояснения6(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001055") Тогда
		ДобавитьОписаниеМСЧ_Пояснения7(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001056") Тогда
		ДобавитьОписаниеМСЧ_Пояснения8(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001057") Тогда
		ДобавитьОписаниеМСЧ_Пояснения9(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П10001059") Тогда
		ДобавитьОписаниеМСЧ_Пояснения11(ОписаниеМногострочнойЧасти, ИдМСЧ);
		
	КонецЕсли;
	
	Возврат ОписаниеМногострочнойЧасти;
	
КонецФункции

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Баланс(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Баланс");
	
	НомерСтроки = Прав(ИдМСЧ, 4);
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", ""));
	
	Если НЕ СтрНачинаетсяС(ИдМСЧ, "П10001А") Тогда
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", ""));
	КонецЕсли;
	
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "05", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "06", 0));
	
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
	Если СтрНачинаетсяС(ИдМСЧ, "П10001Б") Тогда
		ОписаниеМногострочнойЧасти.Родители = Список(СтрШаблон("П10001А%(1)", НомерСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_ОФР(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("ОФР");
	
	НомерСтроки = Прав(ИдМСЧ, 4);
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", ""));
	
	Если НЕ СтрНачинаетсяС(ИдМСЧ, "П10001А") Тогда
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", ""));
	КонецЕсли;
	
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "05", 0));
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
	Если СтрНачинаетсяС(ИдМСЧ, "П10001Б") Тогда
		ОписаниеМногострочнойЧасти.Родители = Список(СтрШаблон("П10001А%(1)", НомерСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_ОИК(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("ОИК");
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "05", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "06", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "07", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "08", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "09", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "10", 0));
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_ОДДС(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("ОДДС");
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "05", 0));
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_ОЦИС(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("ОЦИС");
	
	НомерСтроки = Прав(ИдМСЧ, 4);
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", ""));
	
	Если НЕ СтрНачинаетсяС(ИдМСЧ, "П10001А") Тогда
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", ""));
	КонецЕсли;
	
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "05", 0));
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
	Если СтрНачинаетсяС(ИдМСЧ, "П10001Б") Тогда
		ОписаниеМногострочнойЧасти.Родители = Список(СтрШаблон("П10001А%(1)", НомерСтроки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения3(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения3");
	
	Если ИдМСЧ = "П1000105111" Тогда
		КодыСтрокМСЧ = Список("5111, 5112");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15,
		                  |33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105121" Тогда
		КодыСтрокМСЧ = Список("5121, 5122");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15,
		                  |33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105131" ИЛИ ИдМСЧ = "П1000105132" Тогда
		ГрафыМСЧ = Список("02, 03, 04, 32, 33, 34");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого Графа Из ГрафыМСЧ Цикл
			ИмяПоказателя = ИдМСЧ + Графа;
			ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105141" ИЛИ ИдМСЧ = "П1000105142" Тогда
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105151" Тогда
		КодыСтрокМСЧ = Список("5151, 5152");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105153" Тогда
		КодыСтрокМСЧ = Список("5153, 5154");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105155" Тогда
		КодыСтрокМСЧ = Список("5155, 5156");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105161" Тогда
		КодыСтрокМСЧ = Список("5161, 5162");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 33, 34, 35, 36, 37");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105163" Тогда
		КодыСтрокМСЧ = Список("5163, 5164");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 33, 34, 35, 36, 37");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения4(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	ПараметрыДобавления = НовыеПараметрыДобавленияМногострочнойЧасти();
	
	ПараметрыДобавления.ОписаниеМногострочнойЧасти = ОписаниеМногострочнойЧасти;
	ПараметрыДобавления.МакетРаздела = МакетОтчета("Пояснения4");
	ПараметрыДобавления.ИдМСЧ = ИдМСЧ;
	
	Если ИдМСЧ = "П1000105211" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5211, 5212");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15");
		
	ИначеЕсли ИдМСЧ = "П1000105213" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5213, 5214");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15");
		
	ИначеЕсли ИдМСЧ = "П1000105221" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5221, 5222");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13");
		
	ИначеЕсли СтрНачинаетсяС(ИдМСЧ, "П100010523") ИЛИ СтрНачинаетсяС(ИдМСЧ, "П100010524") Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", Прав(ИдМСЧ, 4));
		Если ИдМСЧ = "П1000105243" Тогда
			ПараметрыДобавления.Вставить("ОбщиеГрафы", "02, 03, 04, 32, 33, 34");
		Иначе
			ПараметрыДобавления.Вставить("ОбщиеГрафы", "02, 03, 04");
		КонецЕсли;
		
	ИначеЕсли ИдМСЧ = "П1000105251" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5251, 5252");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	ИначеЕсли ИдМСЧ = "П1000105253" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5253, 5254");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	ИначеЕсли ИдМСЧ = "П1000105255" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5255, 5256");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	ИначеЕсли ИдМСЧ = "П1000105261" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5261, 5262");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	ИначеЕсли ИдМСЧ = "П1000105263" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5263, 5264");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	ИначеЕсли ИдМСЧ = "П1000105265" Тогда
		ПараметрыДобавления.Вставить("КодыСтрок", "5265, 5266");
		ПараметрыДобавления.Вставить("ОбщиеГрафы", "03, 04, 05, 06, 07, 08, 09, 10");
		
	КонецЕсли;
	
	ДобавитьОписаниеМногострочнойЧасти(ПараметрыДобавления);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения5(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения5");
	
	Если ИдМСЧ = "П1000105311" Тогда
		КодыСтрокМСЧ = Список("5311, 5312");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105313" Тогда
		КодыСтрокМСЧ = Список("5313, 5314");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105321" ИЛИ ИдМСЧ = "П1000105322" Тогда
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения6(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения6");
	
	Если ИдМСЧ = "П1000105411" Тогда
		КодыСтрокМСЧ = Список("5411, 5412");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105421" ИЛИ ИдМСЧ = "П1000105422" Тогда
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения7(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения7");
	
	Если ИдМСЧ = "П1000105511" Тогда
		КодыСтрокМСЧ = Список("5511, 5512");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105513" Тогда
		КодыСтрокМСЧ = Список("5513, 5514");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09, 10, 11, 12");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105521" Тогда
		ГрафыМСЧ = Список("02, 03, 04, 05, 06, 07");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого Графа Из ГрафыМСЧ Цикл
			ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + Графа, 0));
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения8(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения8");
	
	Если ИдМСЧ = "П1000105611" Тогда
		КодыСтрокМСЧ = Список("5611, 5612");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105613" Тогда
		КодыСтрокМСЧ = Список("5613, 5614");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07, 08, 09");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105621" Тогда
		ГрафыМСЧ = Список("02, 03, 04");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого Графа Из ГрафыМСЧ Цикл
			ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + Графа, 0));
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	ИначеЕсли ИдМСЧ = "П1000105631" Тогда
		КодыСтрокМСЧ = Список("5631, 5632");
		ГрафыМСЧ = Список("03, 04, 05, 06, 07");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения9(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения9");
	
	Если ИдМСЧ = "П1000105711" ИЛИ ИдМСЧ = "П1000105712" Тогда
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "02", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "03", 0));
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "04", 0));
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеМСЧ_Пояснения11(ОписаниеМногострочнойЧасти, ИдМСЧ)
	
	МакетРаздела = МакетОтчета("Пояснения11");
	
	Если ИдМСЧ = "П1000105921" Тогда
		КодыСтрокМСЧ = Список("5921, 5922");
		ГрафыМСЧ = Список("03, 04, 05, 06");
		ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
		ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
		Для Каждого КодСтроки Из КодыСтрокМСЧ Цикл
			Для Каждого Графа Из ГрафыМСЧ Цикл
				ИмяПоказателя = "П100010" + КодСтроки + Графа;
				ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
			КонецЦикла;
		КонецЦикла;
		СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовыеПараметрыДобавленияМногострочнойЧасти()
	
	ПараметрыДобавления = Новый Структура;
	
	ПараметрыДобавления.Вставить("ОписаниеМногострочнойЧасти"); // см. ОписаниеМногострочнойЧасти -
	ПараметрыДобавления.Вставить("МакетРаздела", Новый ТабличныйДокумент);
	ПараметрыДобавления.Вставить("ИдМСЧ", "");
	ПараметрыДобавления.Вставить("КодыСтрок", "");
	ПараметрыДобавления.Вставить("ОбщиеГрафы", "");
	
	Возврат ПараметрыДобавления;
	
КонецФункции

&НаСервере
Процедура ДобавитьОписаниеМногострочнойЧасти(ПараметрыДобавления)
	
	ОписаниеМногострочнойЧасти = ПараметрыДобавления.ОписаниеМногострочнойЧасти;
	МакетРаздела = ПараметрыДобавления.МакетРаздела;
	ИдМСЧ = ПараметрыДобавления.ИдМСЧ;
	КодыСтрок = Список(ПараметрыДобавления.КодыСтрок);
	ОбщиеГрафы = Список(ПараметрыДобавления.ОбщиеГрафы);
	
	ОписаниеМногострочнойЧасти.Показатели = Новый Массив;
	
	// Первая графа первой строки всегда содержит наименование вписываемого показателя.
	ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИдМСЧ + "01", ""));
	
	// У основной строки может быть парная строка с показателями за другой строки.
	Для Каждого КодСтроки Из КодыСтрок Цикл
		Для Каждого Графа Из ОбщиеГрафы Цикл
			ИмяПоказателя = "П100010" + КодСтроки + Графа;
			ОписаниеМногострочнойЧасти.Показатели.Добавить(Новый Структура("Имя, Значение", ИмяПоказателя, 0));
		КонецЦикла;
	КонецЦикла;
	
	СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОбразецОбластиМногострочнойЧасти(ИдМСЧ, ОписаниеМногострочнойЧасти, МакетРаздела)
	
	ИмяОбластиОбразца = "МногострочнаяЧасть" + ИдМСЧ;
	Образец = МакетРаздела.ПолучитьОбласть(ИмяОбластиОбразца);
	Образец.Области[ИмяОбластиОбразца].Имя = "";
	
	ОписаниеМногострочнойЧасти.Образец = Образец;
	
КонецПроцедуры

// Возвращает постфикс имен областей родительской многострочной части.
//
// Параметры:
//   ДанныеМногострочнойЧасти - ДеревоЗначений
// 
// Возвращаемое значение:
//   Строка
//
&НаСервере
Функция ПостфиксРодителяМногострочнойЧасти(ДанныеМногострочнойЧасти)
	
	Постфикс = "";
	
	СтрокаРодителя = ДанныеМногострочнойЧасти.Родитель;
	ОбъявлениеРодителя = СтрокаРодителя.Родитель;
	Пока ОбъявлениеРодителя <> Неопределено И ОбъявлениеРодителя.Тип = "МногострочнаяЧасть" Цикл
		ВсеСтрокиРодителя = СтрокиМногострочнойЧасти(ОбъявлениеРодителя);
		НомерСтроки = ВсеСтрокиРодителя.Найти(СтрокаРодителя) + 1;
		
		Постфикс = Постфикс + "_" + СтрЧГ0(НомерСтроки);
		
		СтрокаРодителя = СтрокаРодителя.Родитель;
		ОбъявлениеРодителя = СтрокаРодителя.Родитель;
		
	КонецЦикла;
	
	Возврат Постфикс;
	
КонецФункции

&НаСервере
Функция ИдМСЧСервер(ИмяПоказателя)
	
	Возврат ИдМСЧ(ИдентификаторыМСЧПоПоказателям, ИмяПоказателя);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдМСЧ(ИдентификаторыМСЧПоПоказателям, ИмяПоказателя)
	
	ИмяПоказателяБезИндексов = Лев(ИмяПоказателя, 13);
	
	Возврат ИдентификаторыМСЧПоПоказателям[ИмяПоказателяБезИндексов];
	
КонецФункции

#КонецОбласти

#Область РасчетПоказателей

&НаКлиенте
Процедура РасчетПриИзмененииПоказателя(ИмяРаздела, ОбластьИмя)
	
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Показатели = ПоказателиТабличногоДокумента(ТабличныйДокумент);
	
	ПараметрыРасчета = НовыеПараметрыРасчета();
	ПараметрыРасчета.ИмяРаздела = ИмяРаздела;
	ПараметрыРасчета.ИмяПоказателя = ОбластьИмя;
	ПараметрыРасчета.Делитель = СтруктураРеквизитовФормы.мДелитель;
	ПараметрыРасчета.Точность = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	ПараметрыРасчета.ЭтоБалансНекоммерческойОрганизации = СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации;
	
	ВыбратьАлгоритмИРассчитатьРаздел(ИмяРаздела, Показатели, ПараметрыРасчета);
	
	Для Каждого ЭлементРасчета Из Показатели Цикл
		ИмяПоказателя = ЭлементРасчета.Ключ;
		ОбластьПоказателя = ТабличныйДокумент.Области[ИмяПоказателя];
		Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
			ОбластьПоказателя.Значение = ЭлементРасчета.Значение;
		Иначе
			ОбластьПоказателя.Текст = ЭлементРасчета.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ГибридныйРасчетПоказателей()
	
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = НовыеПараметрыРасчета();
	ПараметрыРасчета.ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ПараметрыРасчета.Делитель = СтруктураРеквизитовФормы.мДелитель;
	ПараметрыРасчета.Точность = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	ПараметрыРасчета.ЭтоБалансНекоммерческойОрганизации = СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации;
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	Для Каждого ДанныеРаздела Из ДеревоДанныхРазделов.Строки Цикл
		ИмяРаздела = ДанныеРаздела.Идентификатор;
		
		Если ДанныеРаздела.Идентификатор = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Показатели = ПоказателиТабличногоДокумента(ТабличныйДокумент);
			
			ВыбратьАлгоритмИРассчитатьРаздел(ИмяРаздела, Показатели, ПараметрыРасчета);
			
			Для Каждого ЭлементРасчета Из Показатели Цикл
				ИмяПоказателя = ЭлементРасчета.Ключ;
				ОбластьПоказателя = ТабличныйДокумент.Области[ИмяПоказателя];
				Если ОбластьПоказателя.СодержитЗначение = Истина Тогда
					ОбластьПоказателя.Значение = ЭлементРасчета.Значение;
				Иначе
					ОбластьПоказателя.Текст = ЭлементРасчета.Значение;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Показатели = ПоказателиИзДереваРазделов(ДанныеРаздела);
			ВыбратьАлгоритмИРассчитатьРаздел(ИмяРаздела, Показатели, ПараметрыРасчета);
			ПоместитьПоказателиВДеревоРазделов(ДанныеРаздела, Показатели);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыбратьАлгоритмИРассчитатьРаздел(ИмяРаздела, Показатели, ПараметрыРасчета)
	
	Если ИмяРаздела = "Баланс" Тогда
		Расчет_Баланс(Показатели, ПараметрыРасчета);
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		Расчет_ОФР(Показатели, ПараметрыРасчета);
	ИначеЕсли ИмяРаздела = "ОИК" Тогда
		Расчет_ОИК(Показатели, ПараметрыРасчета);
	ИначеЕсли ИмяРаздела = "ОДДС" Тогда
		Расчет_ОДДС(Показатели, ПараметрыРасчета);
	ИначеЕсли ИмяРаздела = "ОЦИС" Тогда
		Расчет_ОЦИС(Показатели, ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров расчета.
//
// Возвращаемое значение:
//   Структура - Новые параметры расчета:
//     * ИмяРаздела - Строка - имя активного раздела отчета
//     * ИмяПоказателя - Строка - имя показателя, измененного пользователем при работе с разделом
//     * Делитель - Число
//     * Точность - Число
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыРасчета()
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ИмяРаздела", "");
	ПараметрыРасчета.Вставить("ИмяПоказателя", "");
	ПараметрыРасчета.Вставить("Делитель", 1);
	ПараметрыРасчета.Вставить("Точность", 0);
	
	ПараметрыРасчета.Вставить("ЭтоБалансНекоммерческойОрганизации", Ложь);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Баланс(Показатели, ПараметрыРасчета)
	
	ЭтоБалансНекоммерческойОрганизации = ПараметрыРасчета.ЭтоБалансНекоммерческойОрганизации;
	
	Графы = Список("04, 05, 06");
	
	Для Каждого Графа Из Графы Цикл
		УстановитьЗначениеПоказателя(Показатели, "П0000101100" + Графа,
			ПоказательОтчета(Показатели, "П0000101105" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1105" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101110" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1110" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101130" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1130" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101140" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1140" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101150" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1150" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101160" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1160" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101170" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1170" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101180" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1180" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101190" + Графа));
			
		УстановитьЗначениеПоказателя(Показатели, "П0000101200" + Графа,
			ПоказательОтчета(Показатели, "П0000101210" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1210" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101215" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1215" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101220" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1220" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101230" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1230" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101240" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1240" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101250" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1250" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101260" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000101600" + Графа,
			ПоказательОтчета(Показатели, "П0000101100" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101200" + Графа));
		
		Если ЭтоБалансНекоммерческойОрганизации Тогда
			УстановитьЗначениеПоказателя(Показатели, "П0000101300" + Графа,
				ПоказательОтчета(Показатели, "П0000101310" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1310" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101320" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1320" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101330" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1330" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101360" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1360" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101370" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1370" + Графа));
		Иначе
			УстановитьЗначениеПоказателя(Показатели, "П0000101300" + Графа,
				ПоказательОтчета(Показатели, "П0000101310" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1310" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101320" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1320" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101340" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1340" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101350" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1350" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101360" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1360" + Графа)
				+ ПоказательОтчета(Показатели, "П0000101370" + Графа)
				+ СуммаМногострочныхПоказателей(Показатели, "П10001А1370" + Графа));
		КонецЕсли;
		
		УстановитьЗначениеПоказателя(Показатели, "П0000101400" + Графа,
			ПоказательОтчета(Показатели, "П0000101410" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1410" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101420" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1420" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101430" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1430" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101450" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000101500" + Графа,
			ПоказательОтчета(Показатели, "П0000101510" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1510" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101520" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1520" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101530" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1530" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101540" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А1540" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101550" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000101700" + Графа,
			ПоказательОтчета(Показатели, "П0000101300" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101400" + Графа)
			+ ПоказательОтчета(Показатели, "П0000101500" + Графа));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОФР(Показатели, ПараметрыРасчета)
	
	Графы = Список("04, 05");
	
	Для Каждого Графа Из Графы Цикл
		УстановитьЗначениеПоказателя(Показатели, "П0000102100" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102110" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2110" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102120" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2120" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000102200" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102100" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102210" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2210" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102220" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2220" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000102300" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102200" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102310" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2310" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102320" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2320" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102330" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2330" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102340" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2340" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102350" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2350" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000102400" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102300" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102410" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2410" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102420" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2420" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102460" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000102500" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102400" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102510" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2510" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102520" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2520" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000102530" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П10001А2530" + Графа));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК(Показатели, ПараметрыРасчета)
	
	Графы = Список("04, 05, 06, 07, 08, 09");
	
	// Расчет суммы строк по графе.
	Для Каждого Графа Из Графы Цикл
		УстановитьЗначениеПоказателя(Показатели, "П0000103130" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103100" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103110" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103120" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000103230" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103200" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103210" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000103220" + Графа));
		
	КонецЦикла;
	
	// Расчет графы 10 "Итого" построчно для фиксированных показателей.
	КодыСтрок = Список("3100, 3110, 3120, 3130, 3211, 3212, 3227, 3230, 3430, 3216, 3240, 3250,
	                   |3200, 3210, 3220, 3311, 3312, 3327, 3330, 3316, 3340, 3300"); // Коды по областям макета
	
	Для Каждого КодСтроки Из КодыСтрок Цикл
		ЗначениеГрафы10 = 0;
		Для Каждого Графа Из Графы Цикл
			ЗначениеГрафы10 = ЗначениеГрафы10
				+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П000010" + КодСтроки + Графа);
		КонецЦикла;
		
		УстановитьЗначениеПоказателя(Показатели, "П000010" + КодСтроки + "10", ЗначениеГрафы10);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОДДС(Показатели, ПараметрыРасчета)
	
	Графы = Список("04, 05");
	
	Для Каждого Графа Из Графы Цикл
		УстановитьЗначениеПоказателя(Показатели, "П0000104110" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104111" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104112" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104113" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104114" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104119" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104110" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104120" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104121" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104122" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104123" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104124" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104129" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104120" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104100" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104110" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104120" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104210" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104211" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104212" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104213" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104214" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104219" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104210" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104220" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104221" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104222" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104223" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104224" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104229" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104220" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104200" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104210" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104220" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104310" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104311" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104312" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104313" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104314" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104319" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104310" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104320" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104321" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104322" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104323" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104329" + Графа)
			+ СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, Показатели, "П1000104320" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104300" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104310" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104320" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104400" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104100" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104200" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104300" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000104500" + Графа,
			ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104400" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104450" + Графа)
			+ ПоказательОтчетаОкрЕд(ПараметрыРасчета, Показатели, "П0000104490" + Графа));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОЦИС(Показатели, ПараметрыРасчета)
	
	Графы = Список("04, 05");
	
	Для Каждого Графа Из Графы Цикл
		УстановитьЗначениеПоказателя(Показатели, "П0000106200" + Графа,
			ПоказательОтчета(Показатели, "П0000106210" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6210" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106215" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6215" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106220" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6220" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106230" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6230" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106240" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6240" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106250" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000106310" + Графа,
			ПоказательОтчета(Показатели, "П0000106311" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106312" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106313" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000106320" + Графа,
			ПоказательОтчета(Показатели, "П0000106321" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106322" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106323" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106324" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106325" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106326" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П1000106320" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000106300" + Графа,
			ПоказательОтчета(Показатели, "П0000106310" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106320" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106330" + Графа)
			+ СуммаМногострочныхПоказателей(Показатели, "П10001А6330" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106350" + Графа));
		
		УстановитьЗначениеПоказателя(Показатели, "П0000106400" + Графа,
			ПоказательОтчета(Показатели, "П0000106100" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106200" + Графа)
			+ ПоказательОтчета(Показатели, "П0000106300" + Графа));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказателиТабличногоДокумента(ИсходныйТабличныйДокумент)
	
	Показатели = Новый Структура;
	
	Для Каждого Область Из ИсходныйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбласти = Область.Имя;
		ЭтоПоказательУчаствующийВРасчете = СтрНачинаетсяС(ИмяОбласти, "П0")
			ИЛИ СтрНачинаетсяС(ИмяОбласти, "П1") И СтрЧислоВхождений(ИмяОбласти, "_") = 1;
		
		Если ЭтоПоказательУчаствующийВРасчете Тогда
			Если Область.СодержитЗначение = Истина Тогда
				ЗначениеПоказателя = Область.Значение;
			Иначе
				ЗначениеПоказателя = Область.Текст;
			КонецЕсли;
			
			Показатели.Вставить(ИмяОбласти, ЗначениеПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Функция ПоказателиИзДереваРазделов(ДанныеРаздела)
	
	Показатели = Новый Структура;
	
	СтрокиПоказателей = ДанныеРаздела.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
	Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
		Показатели.Вставить(СтрокаПоказателя.Идентификатор, СтрокаПоказателя.Данные);
	КонецЦикла;
	
	ОбъявлениеМногострочныхЧастей = ДанныеРаздела.Строки.НайтиСтроки(Новый Структура("Тип", "МногострочнаяЧасть"));
	Для Каждого ОбъявлениеМСЧ Из ОбъявлениеМногострочныхЧастей Цикл
		СтрокиМСЧ = СтрокиМногострочнойЧасти(ОбъявлениеМСЧ);
		Для НомерСтроки = 1 По СтрокиМСЧ.Количество() Цикл
			СтрокаМСЧ = СтрокиМСЧ[НомерСтроки - 1];
			Постфикс = "_" + СтрЧГ0(НомерСтроки);
			СтрокиПоказателей = СтрокаМСЧ.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				Показатели.Вставить(СтрокаПоказателя.Идентификатор + Постфикс, СтрокаПоказателя.Данные);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

&НаСервере
Процедура ПоместитьПоказателиВДеревоРазделов(ХранилищеПоказателей, Показатели)
	
	Для Каждого ОписаниеПоказателя Из Показатели Цикл
		ИмяПоказателя = ОписаниеПоказателя.Ключ;
		ЗначениеПоказателя = ОписаниеПоказателя.Значение;
		ПоместитьПоказательВДерево(ХранилищеПоказателей, ИмяПоказателя, ЗначениеПоказателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчета(РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = РазмещениеДанных[ИмяПоказателя];
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаОкрЕд(ПараметрыРасчета, РазмещениеДанных, ИмяПоказателя)
	
	Делитель = ПараметрыРасчета.Делитель;
	Точность = ПараметрыРасчета.Точность;
	
	ИсходноеЗначение = ПоказательОтчета(РазмещениеДанных, ИмяПоказателя);
	ОкругленноеЗначение = Окр(ИсходноеЗначение / Делитель, Точность) * Делитель;
	
	Возврат ОкругленноеЗначение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаМногострочныхПоказателей(РазмещениеДанных, ИмяПоказателя)
	
	Инд = 1;
	СуммаПоказателей = 0;
	
	Пока РазмещениеДанных.Свойство(ИмяПоказателя + "_" + СтрЧГ0(Инд)) Цикл
		ПолноеИмяПоказателя = ИмяПоказателя + "_" + СтрЧГ0(Инд);
		СуммаПоказателей = СуммаПоказателей + ПоказательОтчета(РазмещениеДанных, ПолноеИмяПоказателя);
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат СуммаПоказателей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаМногострочныхПоказателейОкрЕд(ПараметрыРасчета, РазмещениеДанных, ИмяПоказателя)
	
	Инд = 1;
	СуммаПоказателей = 0;
	
	Пока РазмещениеДанных.Свойство(ИмяПоказателя + "_" + СтрЧГ0(Инд)) Цикл
		ПолноеИмяПоказателя = ИмяПоказателя + "_" + СтрЧГ0(Инд);
		СуммаПоказателей = СуммаПоказателей
		                   + ПоказательОтчетаОкрЕд(ПараметрыРасчета, РазмещениеДанных, ПолноеИмяПоказателя);
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат СуммаПоказателей;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	РазмещениеДанных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаОтчета

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("ПроверкаСоотношений", Ложь);
	ПараметрыВыбора.Вставить("Автосохранение", Ложь);
	ПараметрыВыбора.Вставить("СчетчикСтраниц", Ложь);
	ПараметрыВыбора.Вставить("ЗначенияИзСписка", Ложь);
	ПараметрыВыбора.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		ПараметрыВыбора.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ДоступныеЕдиницыИзмерения = Новый Массив;
	ДоступныеЕдиницыИзмерения.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1"));
	ДоступныеЕдиницыИзмерения.Добавить(ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1000"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", Ложь);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", Ложь);
	ПараметрыФормы.Вставить("мПараметры", ПараметрыВыбора);
	ПараметрыФормы.Вставить("ДоступныеЕдиницыИзмерения", ДоступныеЕдиницыИзмерения);
	
	ИмяФормыНастроек = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6) + "НастройкиОтчета";
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеАвторасчета", ЗначениеАвторасчета);
	ДополнительныеПараметры.Вставить("ЗначениеЕдИзм", ЗначениеЕдИзм);
	ДополнительныеПараметры.Вставить("ЗначениеЗпт", ЗначениеЗпт);
	ДополнительныеПараметры.Вставить("НомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
	ДополнительныеПараметры.Вставить("ТекущийРазделОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение",
		 ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	ЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		ИсходнаяОтметка = мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу;
		НоваяОтметка    = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу;
		Если ИсходнаяОтметка <> НоваяОтметка Тогда
			ЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
	     ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ ЗначенияИдентичны Тогда
		// Позиционирование на разделе, активном до открытия формы настройки.
		СформироватьДеревоРазделовОтчета(ЭтотОбъект);
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(),
				"КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
			     И НЕ НомерСтраницыРазделаОтчета = Неопределено 
			     И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
					НайденнаяСтрока.ПолучитьЭлементы(),
					"КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	ИзменитьТаблицуВариантовЗаполнения();
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполнения()
	
	ПолныйРучнойВвод = НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ПереборЗнач = мДеревоСтраницОтчета.ПолучитьЭлементы().Количество();
	
	Пока ПереборЗнач > 0 Цикл
		ИмяСтраницы = мДеревоСтраницОтчета.ПолучитьЭлементы()[ПереборЗнач - 1].ИмяСтраницы;
		ПереборЗнач = ПереборЗнач - 1;
		
		ВариантыЗаполненияРаздела = ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницы);
		
		Если ВариантыЗаполненияРаздела = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПолныйРучнойВвод Тогда
			Для Каждого Стр Из ВариантыЗаполненияРаздела Цикл
				Если Стр.ВариантЗаполнения = 0 Тогда
					Стр.ВариантЗаполнения = 4
				КонецЕсли;
			КонецЦикла;
			
			УстановитьЦветФонаЯчейкиНаСервере( , , СтруктураРеквизитовФормы.НаимТекущегоРаздела);
				
		Иначе
			Для Каждого Строка Из ВариантыЗаполненияРаздела Цикл
				Если Строка.ВариантЗаполнения = 4 Тогда
					Строка.ВариантЗаполнения = 0;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьЦветФонаЯчейкиНаСервере( , , СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуВариантовЗаполнения(ИмяСтраницыПанели)
	
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	
	Если мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		МассивВариантовЗаполненияСтраниц = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницыПанели];
		ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[0].ТаблицаВариантовЗаполнения;
	КонецЕсли;
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект, ПараметрыОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ЗаполнитьЕдиницуИзмеренияВРазделах(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ГибридныйРасчетПоказателей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеОтчета

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	ЭтоСтандартноеСохранение = РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(
		ЭтотОбъект, , Автосохранение, Вариант);
	Если НЕ ЭтоСтандартноеСохранение Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = ПодобныйОтчетСуществует
	                              ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение,
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
	Иначе
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
	 ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	     И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		ПодобныйОтчетСуществует = Истина;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено;
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	     ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
	     ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		     ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// Действия не требуются.
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	     ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"),
			?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Автосохранение", Автосохранение);
		ДополнительныеПараметры.Вставить("Вариант", Вариант);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		ДополнительныеПараметры.Вставить("ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки",
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки =
		ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
		ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение,
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
			"ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение",
			Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
								|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь,
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
							|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен,
		Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
	ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела)
	
	ИсходныйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок;
	СохраняемыйДокумент = Неопределено;
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СохраняемыйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект,
		КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СохраняемыйДокумент);
	
	СтруктураРеквизитовФормы.мВариант = Вариант;
	
	СохраняемыйДокумент.ИсточникОтчета           = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СохраняемыйДокумент.НаименованиеОтчета       = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СохраняемыйДокумент.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СохраняемыйДокумент.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СохраняемыйДокумент.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СохраняемыйДокумент.Организация              = СтруктураРеквизитовФормы.Организация;
	СохраняемыйДокумент.ДатаПодписи              = ДатаПодписи;
	СохраняемыйДокумент.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СохраняемыйДокумент.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СохраняемыйДокумент.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СохраняемыйДокумент.Комментарий              = Комментарий;
	СохраняемыйДокумент.Вид                      = Вариант;
	
	ПредставлениеВида = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СохраняемыйДокумент.Вид);
	СохраняемыйДокумент.ПредставлениеВида = ПредставлениеВида;
	СохраняемыйДокумент.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ВерсияСтруктурыДанных", ОбъектОтчета().ВерсияСтруктурыДанных(
		СтруктураРеквизитовФормы.мВыбраннаяФорма));
	СписокСохранения.Вставить("ВерсияКонфигурации", РегламентированнаяОтчетность.НазваниеПрограммы()
		+ " " + РегламентированнаяОтчетность.ВерсияПрограммы());
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	Если НЕ СтруктураРеквизитовФормы.мСохранятьРасшифровку Тогда
		ВсеСтрокиРасшифровки = ДеревоДанныхРазделов.Строки.НайтиСтроки(Новый Структура("Тип", "Расшифровка"), Истина);
		Для Каждого УдаляемаяСтрока Из ВсеСтрокиРасшифровки Цикл
			УдаляемаяСтрока.Родитель.Строки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Вставить("ДеревоДанныхРазделов", ДеревоДанныхРазделов);
	
	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		Если НЕ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
		     И СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
			КодНалоговогоОргана = ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, "Баланс", "КодНО");
		Иначе
			КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
		КонецЕсли;
		
		СохраняемыйДокумент.КодНалоговогоОргана = КодНалоговогоОргана;
		
	КонецЕсли;
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		
		Для Каждого ЭлементМассива Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресРасшифровки);
	КонецЕсли;
	СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
	
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	СписокСохранения.Вставить("АвторасчетОтключен", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("ЭтоКрупнейшийНалогоплательщик",
		СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик);
	СписокСохранения.Вставить("ЭтоБалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки",   ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения", ИмяФайлаАудиторскогоЗаключения);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения, Новый СжатиеДанных(1));
	СохраняемыйДокумент.ДанныеОтчета = ХранилищеДанных;
	
	ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СохраняемыйДокумент.ДеревоНастройкиСтраниц = ХранилищеДанных;
	
	// Подготовка макетов печатных форм для интерфейса печати отчета.
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	// Запись документа, хранящего данные отчета
	Попытка
		НачатьТранзакцию();
		
		СохраняемыйДокумент.Записать();
		СтруктураРеквизитовФормы.мСохраненныйДок = СохраняемыйДокумент.Ссылка;
		
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
		
		ОбъектОтчета().СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
		
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки,
			"Пояснительная записка");
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения,
			"Аудиторское заключение");
		
		ЗаполняемыеПоказатели = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресЗаполняемыеПоказатели);
		Если ЗначениеЗаполнено(ЗаполняемыеПоказатели) Тогда
			БухгалтерскаяОтчетностьБРОПереопределяемый.ПриЗаписиНастроекЗаполнения(ЗаполняемыеПоказатели,
				СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СохраняемыйДокумент.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СохраняемыйДокумент = Неопределено; // разблокировка документа, заблокированного в объекте записи
	
	Если ЗначениеЗаполнено(ИсходныйДокумент)
	     И ИсходныйДокумент <> СтруктураРеквизитовФормы.мСохраненныйДок Тогда
		РазблокироватьДанныеДляРедактирования(ИсходныйДокумент, УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок)
	     И НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла)
	
	Если СтруктураДопФайла.СведенияИзменены = Истина
	     ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		Если ЗначениеЗаполнено(СтруктураДопФайла.ХранилищеФайла) Тогда
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.ХранилищеФайла));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.Размер;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		СтруктураДопФайла.СведенияИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	СохраненныйДокумент = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	ТребуетсяОбновитьРеквизитыОрганизации = ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация)
		И СтруктураРеквизитовФормы.Организация <> СохраненныйДокумент.Организация;
	Если НЕ ТребуетсяОбновитьРеквизитыОрганизации Тогда
		СтруктураРеквизитовФормы.Организация = СохраненныйДокумент.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СохраненныйДокумент.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СохраненныйДокумент.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СохраненныйДокумент.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СохраненныйДокумент.Комментарий;
	
	СохраненныйВид = СохраненныйДокумент.Вид;
	СтруктураРеквизитовФормы.мВариант = СохраненныйВид;
	СтруктураРеквизитовФормы.ВидДокумента = ?(ЗначениеЗаполнено(СохраненныйДокумент.Вид), 1, 0);
	НомерКорректировки = СтруктураРеквизитовФормы.ВидДокумента * СохраненныйВид;
	
	СохраненныеДанные = ОбъектОтчета().СохраненныеДанные(СохраненныйДокумент);
	ВосстановитьДопРеквизитыФормы(СохраненныеДанные);
	
	ВосстановитьСохраненныеНастройкиДереваРазделов();
	
	СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	
	ДеревоДанныхРазделов = СохраненныеДанные.ДеревоДанныхРазделов;
	ЗаполнитьИдентификаторыМСЧПоПоказателямИзСохраненныхДанных(ДеревоДанныхРазделов);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	ВосстановитьДополнительныеФайлы(СохраненныеДанные);
	
	// Формирование служебных структур на основании сохраненных данных.
	СтруктураОтчета = СтруктураОтчета();
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс";
	
	СформироватьЗаголовкиПериодовОтчетов();
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	СформироватьСоставПоказателей();
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
	
	Элементы.Расшифровать.Доступность =
		ДеревоДанныхРазделов.Строки.Найти("Расшифровка", "Тип", Истина) <> Неопределено;
	УчестьВписываемыеПоказателиСАвтозаполнением(ДеревоДанныхРазделов);
	
	Если ТребуетсяОбновитьРеквизитыОрганизации Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
		ЗаполнитьДатуПодписиВРазделах();
		ЗаполнитьСведенияОбОрганизацииВРазделах();
		ЗаполнитьПодписантаВРазделах();
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект,
			Список("ИмяФайлаПояснительнойЗаписки, ИмяФайлаАудиторскогоЗаключения"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДопРеквизитыФормы(СохраненныеДанные)
	
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = СохраненныеДанные.АвторасчетОтключен;
	
	СтруктураРеквизитовФормы.ГруппаОрганизаций = СохраненныеДанные.ГруппаОрганизаций;
	СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик = СохраненныеДанные.ЭтоКрупнейшийНалогоплательщик;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = СохраненныеДанные.ЭтоБалансНекоммерческойОрганизации;
	
	СтруктураРеквизитовФормы.мСохранятьРасшифровку = СохраненныеДанные.СохранятьРасшифровку;
	
	ТаблицаРасшифровки = Неопределено;
	Если СохраненныеДанные.Свойство("Расшифровка", ТаблицаРасшифровки) Тогда
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеНастройкиДереваРазделов()
	
	СформироватьСтруктуруСтраницОтчета(); // формирование дерева разделов по умолчанию
	СформироватьСтруктуруСвойствСтраниц();
	
	// Исключение всех разделов, чтобы видны были только разделы, включенные в сохраненый отчет.
	ОтборВсехСтрок = Новый Структура("ПреобразоватьВМассив", Ложь);
	ИсходноеДеревоСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	ИсходноеДеревоСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	СтрокиИсходногоДерева = ИсходноеДеревоСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	Для Каждого СтрокаДерева Из СтрокиИсходногоДерева Цикл
		СтрокаДерева.ПоказатьСтраницу = 0;
	КонецЦикла;
	ИсходноеДеревоСтраниц.Колонки.Удалить(ИсходноеДеревоСтраниц.Колонки.ПреобразоватьВМассив);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	ДеревоНастройкиСтраниц.Колонки.Добавить("ПреобразоватьВМассив", Новый ОписаниеТипов("Булево"));
	СтрокиНастройкиСтраниц = ДеревоНастройкиСтраниц.Строки.НайтиСтроки(ОтборВсехСтрок, Истина);
	
	Для Каждого СтрокаНастройкиСтраницы Из СтрокиНастройкиСтраниц Цикл
		ИмяРаздела = СтрокаНастройкиСтраницы.ИмяСтраницы;
		СтрокаДереваРазделов = ИсходноеДеревоСтраниц.Строки.Найти(ИмяРаздела, "ИмяСтраницы", Истина);
		
		Если СтрокаДереваРазделов <> Неопределено Тогда
			ИсключаемыеСвойства = "Представление";
			ЗаполнитьЗначенияСвойств(СтрокаДереваРазделов, СтрокаНастройкиСтраницы, , ИсключаемыеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
	// Раздел "Бухгалтерский баланс" обязательный и всегда включается в отчет.
	СтрокаРазделаБаланс = ИсходноеДеревоСтраниц.Строки.Найти("Баланс", "ИмяСтраницы");
	Если СтрокаРазделаБаланс <> Неопределено Тогда
		СтрокаРазделаБаланс.ПоказатьСтраницу = 1;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ИсходноеДеревоСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторыМСЧПоПоказателямИзСохраненныхДанных(ДеревоДанныхРазделов)
	
	МногострочныеЧасти = ДеревоДанныхРазделов.Строки.НайтиСтроки(Новый Структура("Тип", "МногострочнаяЧасть"), Истина);
	Для Каждого МногострочнаяЧасть Из МногострочныеЧасти Цикл
		ИдМСЧ = МногострочнаяЧасть.Идентификатор;
		СтрокаМСЧ = СтрокиМногострочнойЧасти(МногострочнаяЧасть)[0];
		Показатели = ПоказателиЭлементаРазделаОтчета(СтрокаМСЧ);
		
		Для Каждого Показатель Из Показатели Цикл
			ИмяПоказателя = Показатель.Идентификатор;
			Если НЕ ИдентификаторыМСЧПоПоказателям.Свойство(ИмяПоказателя) Тогда
				ИдентификаторыМСЧПоПоказателям.Вставить(ИмяПоказателя, ИдМСЧ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДополнительныеФайлы(СохраненныеДанные)
	
	СписокДополнительныхФайлов = СохраненныеДанные.СписокДополнительныхФайлов;
	ИмяФайлаПояснительнойЗаписки   = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
	ИмяФайлаАудиторскогоЗаключения = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка", ИмяФайлаПояснительнойЗаписки);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение", ИмяФайлаАудиторскогоЗаключения);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла, ИмяДопФайлаПредыдущейВерсии)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			СтруктураДопФайла.Вставить("СведенияИзменены", Ложь);
			РегламентированнаяОтчетность.ПоместитьВКэш(ЗаписьРегистраСведений.СодержимоеФайла.Получить(),
				УникальныйИдентификатор, СтруктураДопФайла.ХранилищеФайла);
			СтруктураДопФайла.Вставить("ИмяФайла",       ЗаписьРегистраСведений.ИмяФайла);
			СтруктураДопФайла.Вставить("Размер",         ЗаписьРегистраСведений.Размер);
			СтруктураДопФайла.Вставить("ДатаДобавления", ЗаписьРегистраСведений.ДатаДобавления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено
	     И СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок))
	     И СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Заблокирован() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект().Разблокировать();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено
	   И СтруктураРеквизитовФормы.мСохраненныйДок <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок)) Тогда
		РазблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДополнительныхФайлов

&НаКлиенте
Процедура СохранитьНаДискФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Попытка
		Если НЕ ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла';
											|en = 'Выберите путь для сохранения файла'");
		
		НачатьПолучениеФайлаССервера(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, ПараметрыДиалога);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
			|%1';
			|en = 'При выгрузке файла возникла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = Неопределено;
	СтруктураХранения.ИмяФайла         = Неопределено;
	СтруктураХранения.Размер           = Неопределено;
	СтруктураХранения.ДатаДобавления   = Неопределено;
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьФайл(ВидДополнительногоФайла, ЗаголовокОкнаВыбора)
	
	ПараметрыВыбораФайла = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыВыбораФайла.Заголовок = ЗаголовокОкнаВыбора;
	ПараметрыВыбораФайла.МножественныйВыбор = Ложь;
	ПараметрыВыбораФайла.Фильтр = "Файл PDF (*.pdf)|*.pdf";
	
	ПомещенныйФайл = Ждать ПоместитьФайлНаСерверАсинх( , , , ПараметрыВыбораФайла, УникальныйИдентификатор);
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	АдресХранения = ПомещенныйФайл.Адрес;
	ИмяФайла = ПомещенныйФайл.СсылкаНаФайл.Имя;
	РазмерФайла = ПомещенныйФайл.СсылкаНаФайл.Размер();
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресХранения;
	СтруктураХранения.ИмяФайла         = ИмяФайла;
	СтруктураХранения.Размер           = РазмерФайла;
	СтруктураХранения.ДатаДобавления   = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчета

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаФоновогоЗадания = РезультатЗапускаЗаполненияОтчетаВФоне(ДополнительныеПараметры.Команда.Имя);
	
	Если РезультатЗапускаФоновогоЗадания <> Неопределено
	     И РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗаполненияОтчетаВФоне",
			ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Автоматическое заполнение по сведениям информационной базы';
												|en = 'Автоматическое заполнение по сведениям информационной базы'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении,
			ПараметрыОжидания);
		
	Иначе
		ОбработатьЗавершениеЗаполненияОтчетаВФоне(РезультатЗапускаФоновогоЗадания, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатЗапускаЗаполненияОтчетаВФоне(ИмяКомандыЗаполнения)
	
	ЗаполняемыеРазделы = ВсеРазделыОтчета(Ложь);
	Если ИмяКомандыЗаполнения = "ЗаполнитьТекущий" Тогда
		ЗаполняемыеРазделы[СтруктураРеквизитовФормы.НаимТекущегоРаздела] = Истина;
		ОчиститьРазделыОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
			Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
				ЗаполняемыеРазделы[ЭлементДереваСтраницОтчета.ИмяСтраницы] = Истина;
			КонецЕсли;
		КонецЦикла;
		ОчиститьРазделыОтчета();
	КонецЕсли;
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	НаименованиеЗадания = НСтр("ru = 'Заполнение бухгалтерской отчетности по сведениям информационной базы';
								|en = 'Заполнение бухгалтерской отчетности по сведениям информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыЗаполненияОтчета(ЗаполняемыеРазделы));
	ПараметрыПроцедуры.Вставить("Контейнер", ДеревоДанныхРазделов);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция ПараметрыЗаполненияОтчета(ЗаполняемыеРазделы)
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресРезультатаЗаполнения);
		
	ПараметрыЗаполнения = ОбъектОтчета().НовыеПараметрыАвтозаполнения(ИмяФормыОтчета(ИмяФормы));
	ПараметрыЗаполнения.Организация       = СтруктураРеквизитовФормы.Организация;
	ПараметрыЗаполнения.ГруппаОрганизаций = СтруктураРеквизитовФормы.ГруппаОрганизаций;
	ПараметрыЗаполнения.ДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПараметрыЗаполнения.ДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ПараметрыЗаполнения.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗаполнения.АдресВоВременномХранилище = СтруктураРеквизитовФормы.АдресРезультатаЗаполнения;
	
	ПараметрыЗаполнения.ЗаполняемыеРазделы = ЗаполняемыеРазделы;
	ПараметрыЗаполнения.НастройкиЗаполненияСтрок = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресЗаполняемыеПоказатели);
	
	ПараметрыЗаполнения.ЭтоБалансНекоммерческойОрганизации = СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаполненияОтчетаВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьДанныеЗаполнения();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеЗаполнения()
	
	Если НЕ ЭтоАдресВременногоХранилища(СтруктураРеквизитовФормы.АдресРезультатаЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаполнения = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресРезультатаЗаполнения);
	РегламентированнаяОтчетность.ПоместитьВКэш(РезультатЗаполнения.Контейнер, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	АдаптироватьМеханизмРасшифровки2011(РезультатЗаполнения.Контейнер);
	УчестьВписываемыеПоказателиСАвтозаполнением(РезультатЗаполнения.Контейнер);
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОбработатьПоляНалоговогоОргана();
	ГибридныйРасчетПоказателей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура АдаптироватьМеханизмРасшифровки2011(ДеревоДанныхРазделов)
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя", Новый ОписаниеТипов("Строка"));
	ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя", Новый ОписаниеТипов("Строка"));
	ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого", Новый ОписаниеТипов("Строка"));
	ТаблицаРасшифровки.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела", Новый ОписаниеТипов("Строка"));
	ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	ТаблицаРасшифровки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Для Каждого РазделОтчета Из ДеревоДанныхРазделов.Строки Цикл
		ФиксированныеПоказателиРаздела = ПоказателиЭлементаРазделаОтчета(РазделОтчета);
		Для Каждого Показатель Из ФиксированныеПоказателиРаздела Цикл
			СтрокиРасшифровки = РасшифровкиПоказателя(Показатель);
			Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				НоваяЗаписьРасшифровки = ТаблицаРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗаписьРасшифровки, СтрокаРасшифровки.Данные);
				НоваяЗаписьРасшифровки.ИмяПоказателя = Показатель.Идентификатор;
			КонецЦикла;
		КонецЦикла;
		
		МногострочныеЧастиРаздела = МногострочныеЧастиЭлементаРазделаОтчета(РазделОтчета);
		Для Каждого ОбъявлениеМСЧ Из МногострочныеЧастиРаздела Цикл
			ПостфиксСтрокиРодителя = "";
			ДобавитьПоказателиМСЧВРасшифровку(ТаблицаРасшифровки, ОбъявлениеМСЧ, ПостфиксСтрокиРодителя);
		КонецЦикла;
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресРасшифровки);
	
	Элементы.Расшифровать.Доступность =
		ДеревоДанныхРазделов.Строки.Найти("Расшифровка", "Тип", Истина) <> Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиМСЧВРасшифровку(ТаблицаРасшифровки, ОбъявлениеМСЧ, ПостфиксСтрокиРодителя)
	
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ОбъявлениеМСЧ);
	Для НомерСтроки = 1 По СтрокиМСЧ.Количество() Цикл
		СтрокаМСЧ = СтрокиМСЧ[НомерСтроки - 1];
		Постфикс = "_" + СтрЧГ0(НомерСтроки);
		ПоказателиМСЧ = ПоказателиЭлементаРазделаОтчета(СтрокаМСЧ);
		
		Для Каждого Показатель Из ПоказателиМСЧ Цикл
			СтрокиРасшифровки = РасшифровкиПоказателя(Показатель);
			Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				НоваяЗаписьРасшифровки = ТаблицаРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗаписьРасшифровки, СтрокаРасшифровки.Данные);
				НоваяЗаписьРасшифровки.ИмяПоказателя = Показатель.Идентификатор + ПостфиксСтрокиРодителя + Постфикс;
			КонецЦикла;
			
		КонецЦикла;
		
		ПодчиненныеМногострочныеЧасти = МногострочныеЧастиЭлементаРазделаОтчета(СтрокаМСЧ);
		Для Каждого ОбъявлениеПодчиненнойМСЧ Из ПодчиненныеМногострочныеЧасти Цикл
			ДобавитьПоказателиМСЧВРасшифровку(ТаблицаРасшифровки, ОбъявлениеПодчиненнойМСЧ,
				ПостфиксСтрокиРодителя + Постфикс);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УчестьВписываемыеПоказателиСАвтозаполнением(ДеревоДанныхРазделов)
	
	Для Каждого РазделОтчета Из ДеревоДанныхРазделов.Строки Цикл
		ИмяРаздела = РазделОтчета.Идентификатор;
		МногострочныеЧастиРаздела = МногострочныеЧастиЭлементаРазделаОтчета(РазделОтчета);
		Для Каждого ОбъявлениеМСЧ Из МногострочныеЧастиРаздела Цикл
			ПостфиксСтрокиРодителя = "";
			ДобавитьПоказателиМСЧВРаскраску(ИмяРаздела, ОбъявлениеМСЧ, ПостфиксСтрокиРодителя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоказателиМСЧВРаскраску(ИмяРаздела, ОбъявлениеМСЧ, ПостфиксСтрокиРодителя)
	
	ТаблицаВариантыЗаполнения =
		РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
			ЭтотОбъект, ИмяРаздела);
	
	СтрокиМСЧ = СтрокиМногострочнойЧасти(ОбъявлениеМСЧ);
	Для НомерСтроки = 1 По СтрокиМСЧ.Количество() Цикл
		СтрокаМСЧ = СтрокиМСЧ[НомерСтроки - 1];
		Постфикс = "_" + СтрЧГ0(НомерСтроки);
		ПоказателиМСЧ = ПоказателиЭлементаРазделаОтчета(СтрокаМСЧ);
		
		Для Каждого Показатель Из ПоказателиМСЧ Цикл
			СтрокиРасшифровки = РасшифровкиПоказателя(Показатель);
			Если СтрокиРасшифровки.Количество() <> 0 Тогда
				КодПоказателя = Показатель.Идентификатор + ПостфиксСтрокиРодителя + Постфикс;
				ПараметрыПоиска = Новый Структура("КодПоказателя", КодПоказателя);
				ВариантыРаскраски = ТаблицаВариантыЗаполнения.НайтиСтроки(ПараметрыПоиска);
				
				Если ВариантыРаскраски.Количество() = 0 Тогда
					ВариантРаскраски = ТаблицаВариантыЗаполнения.Добавить();
					ВариантРаскраски.КодПоказателя = КодПоказателя;
				Иначе
					ВариантРаскраски = ВариантыРаскраски[0];
				КонецЕсли;
				
				ВариантРаскраски.ВариантЗаполнения = 3;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПодчиненныеМногострочныеЧасти = МногострочныеЧастиЭлементаРазделаОтчета(СтрокаМСЧ);
		Для Каждого ОбъявлениеПодчиненнойМСЧ Из ПодчиненныеМногострочныеЧасти Цикл
			ДобавитьПоказателиМСЧВРаскраску(ИмяРаздела, ОбъявлениеПодчиненнойМСЧ,
				ПостфиксСтрокиРодителя + Постфикс);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьРазделыОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		ОчиститьРазделыОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделыОтчета(ИмяРаздела = "")
	
	ОчищатьВсеРазделы = НЕ ЗначениеЗаполнено(ИмяРаздела);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела); // для показателей, не подлежащих очистке
	
	ДеревоДанныхРазделов = ПолучитьИзВременногоХранилища(СтруктураМногострочныхРазделов);
	
	СписокУниверсальныхПоказателей = "НаименованиеОрганизацииВРазделе, ЕдиницаИзмеренияВРазделе,
		|КодПоОКПОВРазделе, КодПоОКЕИВРазделе,
		|ДолжностьПодписанта, ФИОПодписанта, ДатаПодписиОтчета";
	СписокПоказателейБаланса = СписокУниверсальныхПоказателей + ",
		|НомерКорректировки, НаименованиеОрганизацииВЗаголовке,
		|КодПоОКПОВЗаголовке, ИННВЗаголовке, ОКОПФВЗаголовке, КодПоОКОПФВЗаголовке, ОКФСВЗаголовке,
		|КодПоОКФСВЗаголовке, АдресВЗаголовке, АудитДа, АудитНет, НаименованиеАудиторскойОрганизацииВЗаголовке,
		|ИННАудиторскойОрганизацииВЗаголовке, ОГРНАудиторскойОрганизацииВЗаголовке, УтверждениеДа, УтверждениеНет,
		|НаименованиеУтверждающегоОрганаВЗаголовке";
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СписокПоказателейБаланса = СписокПоказателейБаланса + ", КодНО, КПП";
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Баланс" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Баланс", СписокПоказателейБаланса);
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "ОФР" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "ОФР", СписокУниверсальныхПоказателей);
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "ОЦИС" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "ОЦИС", СписокУниверсальныхПоказателей);
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "ОИК" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "ОИК", СписокУниверсальныхПоказателей);
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "ОДДС" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "ОДДС", СписокУниверсальныхПоказателей);
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения3" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения3", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения4" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения4", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения5" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения5", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения6" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения6", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения7" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения7", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения8" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения8", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения9" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения9", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения10" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения10", "");
	КонецЕсли;
	
	Если ОчищатьВсеРазделы ИЛИ ИмяРаздела = "Пояснения11" Тогда
		ОчиститьРазделОтчета(ДеревоДанныхРазделов, "Пояснения11", "");
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРазделов, УникальныйИдентификатор,
		СтруктураМногострочныхРазделов);
	
	АдаптироватьМеханизмРасшифровки2011(ДеревоДанныхРазделов);
	
	Модифицированность = Истина;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОбработатьПоляНалоговогоОргана();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРазделОтчета(ДеревоДанныхРазделов, ИмяРаздела, СписокПоказателей)
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
	СохраненныеПоказатели = ПоказателиРазделаПоСписку(ДанныеРаздела, СписокПоказателей);
	
	ДеревоДанныхРазделов.Строки.Удалить(ДанныеРаздела);
	
	Если ИмяРаздела = "Баланс" Тогда
		СформироватьСтруктуруРаздела_Баланс(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "ОФР" Тогда
		СформироватьСтруктуруРаздела_ОФР(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "ОЦИС" Тогда
		СформироватьСтруктуруРаздела_ОЦИС(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "ОИК" Тогда
		СформироватьСтруктуруРаздела_ОИК(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "ОДДС" Тогда
		СформироватьСтруктуруРаздела_ОДДС(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения3" Тогда
		СформироватьСтруктуруРаздела_Пояснения3(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
		СформироватьСтруктуруРаздела_Пояснения4(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения5" Тогда
		СформироватьСтруктуруРаздела_Пояснения5(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения6" Тогда
		СформироватьСтруктуруРаздела_Пояснения6(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения7" Тогда
		СформироватьСтруктуруРаздела_Пояснения7(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения8" Тогда
		СформироватьСтруктуруРаздела_Пояснения8(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
		СформироватьСтруктуруРаздела_Пояснения9(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения10" Тогда
		СформироватьСтруктуруРаздела_Пояснения10(ДеревоДанныхРазделов);
	ИначеЕсли ИмяРаздела = "Пояснения11" Тогда
		СформироватьСтруктуруРаздела_Пояснения11(ДеревоДанныхРазделов);
	КонецЕсли;
	
	ДанныеРаздела = ДеревоДанныхРазделов.Строки.Найти(ИмяРаздела, "Идентификатор");
	ПоместитьПоказателиВДеревоРазделов(ДанныеРаздела, СохраненныеПоказатели);
	
	УдалитьВписываемыеПоказателиРазделаИзРаскраски(ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Функция ПоказателиРазделаПоСписку(ДанныеРаздела, СписокПоказателей)
	
	ИменаПоказателей = Список(СписокПоказателей);
	ПоказателиРаздела = Новый Структура;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		СтрокаПоказателя = ДанныеРаздела.Строки.НайтиСтроки(
			Новый Структура("Тип, Идентификатор", "Показатель", ИмяПоказателя))[0];
		ПоказателиРаздела.Вставить(СтрокаПоказателя.Идентификатор, СтрокаПоказателя.Данные);
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Процедура УдалитьВписываемыеПоказателиРазделаИзРаскраски(ИмяРаздела)
	
	ТаблицаВариантыЗаполнения =
		РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(
			ЭтотОбъект, ИмяРаздела);
	
	ВсегоОписанийПоказателей = ТаблицаВариантыЗаполнения.Количество();
	Для Инд = 1 По ВсегоОписанийПоказателей Цикл
		ОписаниеПоказателя = ТаблицаВариантыЗаполнения[ВсегоОписанийПоказателей - Инд];
		Если СтрНачинаетсяС(ОписаниеПоказателя.КодПоказателя, "П10001") Тогда
			ТаблицаВариантыЗаполнения.Удалить(ОписаниеПоказателя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КрупнейшийНалогоплательщик

&НаСервере
Процедура ЗаполнитьКодНалоговогоОрганаПолучателя(ДанныеРаздела)
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик = Организация.КрупнейшийНалогоплательщик;
	
	Если СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		РегистрацияВНО = РегистрацияВНалоговыхОрганах(СтруктураРеквизитовФормы.Организация, ДатаПодписи);
		Если ЗначениеЗаполнено(РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО) Тогда
			ПоместитьПоказательВДерево(ДанныеРаздела, "КодНО", РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО);
			ПоместитьПоказательВДерево(ДанныеРаздела, "КПП", РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КПП);
		Иначе
			ПоместитьПоказательВДерево(ДанныеРаздела, "КодНО", РегистрацияВНО.ПоМестуНахождения.КодНО);
			ПоместитьПоказательВДерево(ДанныеРаздела, "КПП", РегистрацияВНО.ПоМестуНахождения.КПП);
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьПоляНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыбратьКодНалоговогоОрганаПолучателя()
	
	РегистрацияВНО = РегистрацияВНалоговыхОрганах(СтруктураРеквизитовФормы.Организация, ДатаПодписи);
	
	ПунктыМеню = Новый СписокЗначений;
	ПунктыМеню.Добавить(РегистрацияВНО.ПоМестуНахождения,
		СтрШаблон(НСтр("ru = '%1 - по месту нахождения организации';
						|en = '%1 - по месту нахождения организации'"),
			РегистрацияВНО.ПоМестуНахождения.КодНО));
	ПунктыМеню.Добавить(РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика,
		СтрШаблон(НСтр("ru = '%1 - по месту регистрации крупнейшнего налогоплательщика';
						|en = '%1 - по месту регистрации крупнейшнего налогоплательщика'"),
			РегистрацияВНО.ПоМестуКрупнейшегоНалоплательщика.КодНО));
	
	Результат = Ждать ВыбратьИзМенюАсинх(ПунктыМеню);
	
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		ТабличныйДокумент.Области.КодНО.Значение = Результат.Значение.КодНО;
		ТабличныйДокумент.Области.КПП.Значение = Результат.Значение.КПП;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сведения о регистрациях в налоговых органах.
// 
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ДатаПодписи - Дата
// 
// Возвращаемое значение:
//   Структура:
//     * ПоМестуНахождения - Структура - регистрация по месту нахождения организации:
//       ** КодНО - Строка
//       ** КПП - Строка
//     * ПоМестуКрупнейшегоНалоплательщика - Структура - регистрация в качестве крупнейшего налогоплательщика:
//       ** КодНО - Строка
//       ** КПП - Строка
//
&НаСервереБезКонтекста
Функция РегистрацияВНалоговыхОрганах(Организация, ДатаПодписи)
	
	Реквизиты = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи,
		"КодНО, КППЮЛ, КодНОКрупнейший, КППЮЛКрупнейший");
	
	Если НЕ ЗначениеЗаполнено(Реквизиты.КППЮЛКрупнейший) Тогда
		Реквизиты.КППЮЛКрупнейший = КППКрупнейшегоНалогоплательщика(Организация, Реквизиты.КодНОКрупнейший);
	КонецЕсли;
	
	РегистрацияВНО = Новый Структура;
	РегистрацияВНО.Вставить("ПоМестуНахождения",
		Новый Структура("КодНО, КПП", Реквизиты.КодНО, Реквизиты.КППЮЛ));
	РегистрацияВНО.Вставить("ПоМестуКрупнейшегоНалоплательщика",
		Новый Структура("КодНО, КПП", Реквизиты.КодНОКрупнейший, Реквизиты.КППЮЛКрупнейший));
	
	Возврат РегистрацияВНО;
	
КонецФункции

&НаСервере
Процедура ОбработатьПоляНалоговогоОргана()
	
	Если ТабличныйДокумент.Области.Найти("КодНО") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКодНО = ТабличныйДокумент.Области.Найти("КодНО");
	ОбластьКодНОЗаголовок = ТабличныйДокумент.Области.Найти("КодНОЗаголовок");
	ОбластьКПП = ТабличныйДокумент.Области.Найти("КПП");
	ОбластьКППЗаголовок = ТабличныйДокумент.Области.Найти("КППЗаголовок");
	
	Если ОбластьКодНО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЭтоКрупнейшийНалогоплательщик Тогда
		ОбластьКодНОЗаголовок.Текст = "Представляется в налоговый орган (код)";
		СкопироватьОформлениеОбласти("ИННАудиторскойОрганизацииВЗаголовке", "КодНО");
		ОбластьКодНО.Защита = Ложь;
		
		ОбластьКППЗаголовок.Текст = "КПП";
		СкопироватьОформлениеОбласти("ИННАудиторскойОрганизацииВЗаголовке", "КПП");
		ОбластьКПП.Защита = Ложь;
		
	Иначе
		ОбластьКодНОЗаголовок.Текст= "";
		ОбластьКодНО.Очистить(Истина, Истина, Истина);
		ОбластьКодНО.Защита = Истина;
		
		ОбластьКППЗаголовок.Текст= "";
		ОбластьКПП.Очистить(Истина, Истина, Истина);
		ОбластьКПП.Защита = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьОформлениеОбласти(ИмяИсходнойОбласта, ИмяОформляемойОбласти)
	
	ИсходнаяОбласть = ТабличныйДокумент.Области[ИмяИсходнойОбласта];
	ОформляемаяОбласть = ТабличныйДокумент.Области[ИмяОформляемойОбласти];
	
	ОформляемаяОбласть.ЦветФона = ИсходнаяОбласть.ЦветФона;
	
	ОформляемаяОбласть.Шрифт = ИсходнаяОбласть.Шрифт;
	ОформляемаяОбласть.ГоризонтальноеПоложение = ИсходнаяОбласть.ГоризонтальноеПоложение;
	ОформляемаяОбласть.ВертикальноеПоложение = ИсходнаяОбласть.ВертикальноеПоложение;
	
	ОформляемаяОбласть.ГраницаСверху = ИсходнаяОбласть.ГраницаСверху;
	ОформляемаяОбласть.ГраницаСнизу  = ИсходнаяОбласть.ГраницаСнизу;
	ОформляемаяОбласть.ГраницаСлева  = ИсходнаяОбласть.ГраницаСлева;
	ОформляемаяОбласть.ГраницаСправа = ИсходнаяОбласть.ГраницаСправа;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьВведенныйКПП(Организация, КодНО, КПП)
	
	КлючиХранилища = КлючиХранилищаНастроекДанныхФормы();
	
	РеквизитыКН = ХранилищеНастроекДанныхФорм.Загрузить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек);
	Если РеквизитыКН = Неопределено Тогда
		РеквизитыКН = Новый ТаблицаЗначений;
		РеквизитыКН.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		РеквизитыКН.Колонки.Добавить("КодНО", Новый ОписаниеТипов("Строка"));
		РеквизитыКН.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	КлючПоиска = Новый Структура("Организация, КодНО", Организация, КодНО);
	НайденныеРеквизиты = РеквизитыКН.НайтиСтроки(КлючПоиска);
	Если НайденныеРеквизиты.Количество() > 0 Тогда
		СтрокаРеквизитов = НайденныеРеквизиты[0];
	Иначе
		СтрокаРеквизитов = РеквизитыКН.Добавить();
		СтрокаРеквизитов.Организация = Организация;
		СтрокаРеквизитов.КодНО = КодНО;
	КонецЕсли;
	
	СтрокаРеквизитов.КПП = КПП;
	
	ХранилищеНастроекДанныхФорм.Сохранить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек, РеквизитыКН);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КППКрупнейшегоНалогоплательщика(Организация, КодНО)
	
	КПП = "";
	
	КлючиХранилища = КлючиХранилищаНастроекДанныхФормы();
	
	РеквизитыКН = ХранилищеНастроекДанныхФорм.Загрузить(КлючиХранилища.КлючОбъекта, КлючиХранилища.КлючНастроек);
	Если РеквизитыКН <> Неопределено Тогда
		КлючПоиска = Новый Структура("Организация, КодНО", Организация, КодНО);
		НайденныеРеквизиты = РеквизитыКН.НайтиСтроки(КлючПоиска);
		Если НайденныеРеквизиты.Количество() > 0 Тогда
			КПП = НайденныеРеквизиты[0].КПП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КПП;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючиХранилищаНастроекДанныхФормы()
	
	Ключи = Новый Структура;
	
	Ключи.Вставить("КлючОбъекта", "Отчет.РегламентированныйОтчетБухОтчетность.Форма.ФормаОтчета2025Кв1");
	Ключи.Вставить("КлючНастроек", "РеквизитыКрупнейшегоНалогоплательщика");
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеДереваРазделов

// Конструктор неинициализированного дерева данных разделов регламентированного отчета.
//
// Возвращаемое значение:
//   ДеревоЗначений - Пустое дерево данных разделов:
//     * Тип - Строка - тип строки дерева данных разделов, может принимать значения:
//             "Раздел" - строка с объявлением раздела регламентированного отчета;
//             "МногострочнаяЧасть" - строка с объявлением многострочной части;
//             "Строка" - строка многострочной части;
//             "Показатель" - строка со значением показателя;
//             "Расшифровка" - строка многострочной части.
//     * Идентификатор - Строка - идентификатор объекта, связанного со строкой.
//     * Данные - Структура - упакованная группа значений, связанных со строкой;
//              - Строка - значение показателя;
//              - Число - значение показателя;
//              - Дата - значение показателя.
//
&НаСервере
Функция НовоеДеревоДанныхРазделов()
	
	ДеревоДанныхРазделов = Новый ДеревоЗначений;
	ДеревоДанныхРазделов.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхРазделов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ДеревоДанныхРазделов.Колонки.Добавить("Данные");
	
	Возврат ДеревоДанныхРазделов;
	
КонецФункции

// Возвращает многострочные части элемента раздела отчета.
// 
// Параметры:
//   ЭлементРазделаОтчета - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//   Массив из СтрокаДереваЗначений
//
&НаСервере
Функция МногострочныеЧастиЭлементаРазделаОтчета(ЭлементРазделаОтчета)
	
	Возврат ЭлементРазделаОтчета.Строки.НайтиСтроки(Новый Структура("Тип", "МногострочнаяЧасть"));
	
КонецФункции

&НаСервере
Функция СтрокиМногострочнойЧасти(ОбъявлениеМногострочнойЧасти)
	
	Возврат ОбъектОтчета().СтрокиМногострочнойЧасти(ОбъявлениеМногострочнойЧасти);
	
КонецФункции

// Возвращает показатели элемента раздела отчета (фиксированные показатели, или показатели строки многострочной части).
// 
// Параметры:
//   ЭлементРазделаОтчета - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//   Массив из СтрокаДереваЗначений
//
&НаСервере
Функция ПоказателиЭлементаРазделаОтчета(ЭлементРазделаОтчета)
	
	Возврат ЭлементРазделаОтчета.Строки.НайтиСтроки(Новый Структура("Тип", "Показатель"));
	
КонецФункции

&НаСервере
Функция ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, ИмяРаздела, ИмяПоказателя)
	
	Возврат ОбъектОтчета().ЗначениеПоказателяРаздела(ДеревоДанныхРазделов, ИмяРаздела, ИмяПоказателя);
	
КонецФункции

// Возвращает расшифровки показателя с сохранением порядка следования.
// 
// Параметры:
//   Показатель - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//   Массив из СтрокаДереваЗначений
//
&НаСервере
Функция РасшифровкиПоказателя(Показатель)
	
	СтрокиРасшифровки = Новый Массив;
	
	Для Каждого СтрокаМСЧ Из Показатель.Строки Цикл
		Если СтрокаМСЧ.Тип = "Расшифровка" Тогда
			СтрокиРасшифровки.Добавить(СтрокаМСЧ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокиРасшифровки;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаОтчетности

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета().УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
		
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
		
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиВыгрузки

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", ,
		ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОтчетностьЗаКварталГод(ДатаКонцаПериодаОтчета)
	
	Возврат Месяц(ДатаКонцаПериодаОтчета) % 3 = 0;
	
КонецФункции

&НаКлиенте
Процедура ПредупредитьОВыгрузкеТолькоКвартальнойОтчетности()
	
	ТекстПредупреждения = НСтр("ru = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде';
								|en = 'Выгрузка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде'");
	ПоказатьПредупреждение( , ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОбОтправкеТолькоКвартальнойОтчетности()
	
	ТектПредупреждения = НСтр("ru = 'Отправка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде';
								|en = 'Отправка обычной бухгалтерской отчетности за выбранный период не предусмотрена форматом представления в электронном виде'");
	ПоказатьПредупреждение(, ТектПредупреждения);
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетности

&НаКлиенте
Функция СформироватьНастройкиФормыВыбораПечати()
	
	ПечатьPDF417Разрешена = Ложь;
	
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ПечатьPDF417Разрешена);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, "ПоказатьСДвухмернымШтрихкодомPDF417");
			
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			ПечататьИзФормы("ПоказатьБланк");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидПечати = ДополнительныеПараметры.ВидПечати;
	
	Печать(ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ТекстСостояния = СтрШаблон(НСтр("ru = '%1. Формируется печатная форма...';
									|en = '%1. Формируется печатная форма...'"), Заголовок);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

// Формирует набор печатных бланков в СтруктураРеквизитовФормы.мПечатныеФормы
//
// Параметры:
//   ВидПечати - Строка - определяет вариант и режим печати.
//
&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
				|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоСтраницОтчета) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		ЭтоРазделДополнительныхФайлов = (СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы");
		Если ЭтоРазделДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		
		ПараметрыПечатиРаздела = НовыеПараметрыПечатиРаздела();
		ПараметрыПечатиРаздела.НаименованиеЛиста  = СтрокаУровня1.Представление;
		ПараметрыПечатиРаздела.ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ПараметрыПечатиРаздела.ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		ПараметрыПечатиРаздела.ВидПечати          = ВидПечати;
		ПараметрыПечатиРаздела.ИмяСтраницы        = ИмяСтраницыПанели;
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели);
		
		ВывестиНаПечатьЛист(ПараметрыПечатиРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
		ЭтотОбъект, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

// Конструктор параметров печати раздела.
//
// Возвращаемое значение:
//   Структура - Новые параметры печати раздела:
//     * НаименованиеЛиста - Строка - название листа в списке сформированных страниц
//     * ОриентацияЛиста - Строка - ориентация листа, может принимать значения "Портрет" и "Ландшафт"
//     * ИмяОбластиТаблПоля - Строка - имя области табличного документа, выводимой на печать
//     * ВидПечати - Строка - способ печати раздела
//     * ИмяСтраницы - Строка - имя раздела
//
&НаСервере
Функция НовыеПараметрыПечатиРаздела()
	
	ПараметрыПечатиРаздела = Новый Структура;
	ПараметрыПечатиРаздела.Вставить("НаименованиеЛиста",  "");
	ПараметрыПечатиРаздела.Вставить("ОриентацияЛиста",    "");
	ПараметрыПечатиРаздела.Вставить("ИмяОбластиТаблПоля", "");
	ПараметрыПечатиРаздела.Вставить("ВидПечати",          "");
	ПараметрыПечатиРаздела.Вставить("ИмяСтраницы",        "");
	
	Возврат ПараметрыПечатиРаздела;
	
КонецФункции

&НаСервере
Функция КартаОбластейРаздела()
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх",        Новый ОписаниеТипов("Число"));
	Карта.Колонки.Добавить("Низ",         Новый ОписаниеТипов("Число"));
	Карта.Колонки.Добавить("ИспОбласти",  Новый ОписаниеТипов("Строка"));
	Карта.Колонки.Добавить("НомКолСГС",   Новый ОписаниеТипов("Число"));
	Карта.Колонки.Добавить("НеВыводить",  Новый ОписаниеТипов("Булево"));
	Карта.Колонки.Добавить("НеПроверять", Новый ОписаниеТипов("Булево"));
	Карта.Колонки.Добавить("НовСтраница", Новый ОписаниеТипов("Булево"));
	
	ТекстВТомЧисле = "в том числе:";
	
	ТекстыДругие = Новый Массив;
	ТекстыДругие.Добавить("основные средства, потребительские свойства которых с течением времени не изменяются");
	ТекстыДругие.Добавить("инвестиционная недвижимость, оцениваемая по переоцененной стоимости");
	
	НачИмениГСУдалитьСтроку  = "УдалитьСтроку";
	НачИмениГСДобавитьСтроку = "ДобавитьСтрокуЗначок";
	
	СлужебныеСтроки = Новый Массив;
	
	ОбластьСлужебныхРеквизитов = ТабличныйДокумент.Области.Найти("ОбластьСлужебныхРеквизитов");
	Если ОбластьСлужебныхРеквизитов <> Неопределено Тогда
		СлужебныеСтроки.Добавить(
			Новый Структура("Верх, Низ", ОбластьСлужебныхРеквизитов.Верх, ОбластьСлужебныхРеквизитов.Низ));
	КонецЕсли;
	
	ОбластьСсылкиОрганизаций = ТабличныйДокумент.Области.Найти("ОбластьСсылкиОрганизаций");
	Если ОбластьСсылкиОрганизаций <> Неопределено Тогда
		СлужебныеСтроки.Добавить(
			Новый Структура("Верх, Низ", ОбластьСсылкиОрганизаций.Верх, ОбластьСсылкиОрганизаций.Низ));
	КонецЕсли;
	
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	НовСтр = Карта.Добавить();
	НовСтр.Верх = 1;
	НовСтр.Низ  = 1;
	
	Для НомСтр = 1 По КолСтрок Цикл
		НайденнаяСлужебнаяСтрока = Неопределено;
		Для Каждого СлужебнаяСтрока Из СлужебныеСтроки Цикл
			Если СлужебнаяСтрока.Верх <= НомСтр И НомСтр <= СлужебнаяСтрока.Низ Тогда
				НайденнаяСлужебнаяСтрока = СлужебнаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденнаяСлужебнаяСтрока <> Неопределено Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НайденнаяСлужебнаяСтрока.Верх;
			НовСтр.Низ = НайденнаяСлужебнаяСтрока.Низ;
			НовСтр.ИспОбласти = "СлО"; // Служебная область без вывода в печатную форму.
			НовСтр.НеВыводить = Истина;
			
			НомСтр = НайденнаяСлужебнаяСтрока.Низ + 1;
			
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НомСтр;
			
		КонецЕсли;
		
		ТДокСтрока = ТабличныйДокумент.ПолучитьОбласть(НомСтр, , НомСтр);
		
		ОблВТомЧисле = ТДокСтрока.НайтиТекст(ТекстВТомЧисле, , , Истина);
		Если ОблВТомЧисле = Неопределено Тогда
			Для Каждого ТекстДляПоиска Из ТекстыДругие Цикл
				ОблТекст = ТДокСтрока.НайтиТекст(ТекстДляПоиска, , , Истина);
				Если ОблТекст <> Неопределено Тогда
					ОблВТомЧисле = ОблТекст;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОблВТомЧисле <> Неопределено Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НомСтр;
			НовСтр.ИспОбласти = "ВТЧ"; // область содержит строку "в том числе:"
			НовСтр.НомКолСГС = Макс(ОблВТомЧисле.Лево - 3, 2); // соответствует позиции ГС МЧ
			Если НовСтр.НомКолСГС > 3 Тогда
				НовСтр.НомКолСГС = 3;
			КонецЕсли;
			
		Иначе
			Для Каждого Область Из ТДокСтрока.Области Цикл
				Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					
					Если СтрНачинаетсяС(Область.Имя, НачИмениГСУдалитьСтроку) Тогда
						НовСтр = Карта.Добавить();
						НовСтр.Верх = НомСтр;
						НовСтр.ИспОбласти = "МЧ"; // область содержит строку многострочной части
						НовСтр.НомКолСГС = Область.Лево;
						
						Прервать;
					ИначеЕсли СтрНачинаетсяС(Область.Имя, НачИмениГСДобавитьСтроку) И Область.Гиперссылка Тогда
						НовСтр = Карта.Добавить();
						НовСтр.Верх = НомСтр;
						НовСтр.ИспОбласти = "ДС"; // область с гиперссылкой для добавления строки
						НовСтр.НомКолСГС  = Область.Лево;
						НовСтр.НеВыводить = Истина;
						
						Прервать;
					КонецЕсли;
				
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НовСтр.ИспОбласти = "ДС" И НомСтр > НовСтр.Верх Тогда // область добавления строки всегда однострочная
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НомСтр;
			
		КонецЕсли;
		
		НовСтр.Низ = НомСтр;
		
		Если ТДокСтрока.Область(1, , 1).КонецСтраницы И НомСтр < КолСтрок Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НомСтр + 1;
			НовСтр.Низ = НомСтр + 1;
			НовСтр.НовСтраница = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьКартуОбластейРаздела(Карта);
	
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ЗначенияОбластейНеЗаполнены(ТДок)
	
	ВсеЗначенияНеЗаполнены = Истина;
	
	Для Каждого Область Из ТДок.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И НЕ Область.Защита И Область.СодержитЗначение Тогда
			
			ЗначениеПоказателя = Область.Значение;
			
			ЭтоПустоеЗначение = (РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(ЗначениеПоказателя))
				= ЗначениеПоказателя);
			Если НЕ (ЭтоПустоеЗначение ИЛИ ПустаяСтрока(СтрЗаменить(ЗначениеПоказателя,"0", ""))) Тогда
				ВсеЗначенияНеЗаполнены = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеЗначенияНеЗаполнены;
	
КонецФункции

&НаСервере
Процедура ОбработатьКартуОбластейРаздела(КартаОбластей)
	
	ЗаполнениеУровней = Новый Массив;
	
	КоличествоСтрок = КартаОбластей.Количество();
	
	Для НомСтроки = 1 По КоличествоСтрок Цикл
		ОбратныйИндекс = КоличествоСтрок - НомСтроки;
		
		ЭлементКарты = КартаОбластей[ОбратныйИндекс];
		
		Если ЭлементКарты.ИспОбласти = "ДС" Тогда
			Если ЭлементКарты.НомКолСГС > ЗаполнениеУровней.ВГраница() Тогда
				ЗаполнениеУровней.Вставить(ЭлементКарты.НомКолСГС, Истина);
			Иначе
				ЗаполнениеУровней[ЭлементКарты.НомКолСГС] = Истина;
			КонецЕсли;
			
		ИначеЕсли ЭлементКарты.ИспОбласти = "МЧ" Тогда
			Если НЕ ЭлементКарты.НеПроверять Тогда
				ТДокСтрокиМЧ = ТабличныйДокумент.ПолучитьОбласть(ЭлементКарты.Верх, , ЭлементКарты.Низ);
				ЭлементКарты.НеВыводить = ЗначенияОбластейНеЗаполнены(ТДокСтрокиМЧ);
			КонецЕсли;
			
			Если НЕ ЭлементКарты.НеВыводить Тогда
				Если ЭлементКарты.НомКолСГС > ЗаполнениеУровней.ВГраница() Тогда
					ЗаполнениеУровней.Вставить(ЭлементКарты.НомКолСГС, Ложь);
				Иначе
					ЗаполнениеУровней[ЭлементКарты.НомКолСГС] = Ложь;
				КонецЕсли;
				
				Если ЗаполнениеУровней.ВГраница() > 1 И ЗаполнениеУровней[ЭлементКарты.НомКолСГС - 1] <> Неопределено Тогда 
					ЗаполнениеУровней[ЭлементКарты.НомКолСГС - 1] = Ложь; // разрешаем вывод для родительского уровня
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭлементКарты.ИспОбласти = "ВТЧ" И ЭлементКарты.Низ - ЭлементКарты.Верх = 0 Тогда
			ЭлементКарты.НеВыводить = ?(ЗаполнениеУровней.ВГраница() >= ЭлементКарты.НомКолСГС,
				ЗаполнениеУровней[ЭлементКарты.НомКолСГС], Ложь);
			
			Если НЕ ЭлементКарты.НеВыводить Тогда
				ЭлементКартыРодитель = КартаОбластей[ОбратныйИндекс - 1];
				Если ЭлементКартыРодитель.ИспОбласти = "МЧ" И ЭлементКартыРодитель.НомКолСГС < ЭлементКарты.НомКолСГС Тогда
					ЭлементКартыРодитель.НеВыводить  = Ложь;
					ЭлементКартыРодитель.НеПроверять = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(СтруктураПараметровЛиста)
	
	ИмяЛиста = СтруктураПараметровЛиста.НаименованиеЛиста;
	ОриентацияЛиста = СтруктураПараметровЛиста.ОриентацияЛиста;
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ОриентацияЛиста = "Портрет",
		ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	Карта = КартаОбластейРаздела();
	
	Для Каждого ЭлементКарты Из Карта Цикл
		Если ЭлементКарты.НеВыводить Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(ЭлементКарты.Верх, , ЭлементКарты.Низ);
		
		Если ЭлементКарты.ИспОбласти = "МЧ" Тогда
			// Очистка области с гиперссылкой для удаления строки, перенос линий таблицы.
			ОбластьУдалитьСтроку = ОбластьВыводимаяНаПечать.Область(1, ЭлементКарты.НомКолСГС,
				1, ЭлементКарты.НомКолСГС);
			
			ОбластьУдалитьСтроку.Гиперссылка = Ложь;
			ОбластьУдалитьСтроку.Очистить();
			ОбластьУдалитьСтроку.Имя = "";
			
			КонвертироватьПунктирнуюГраницу(ОбластьВыводимаяНаПечать, Истина);
			
		ИначеЕсли ЭлементКарты.ИспОбласти = "ВТЧ" Тогда
			КонвертироватьПунктирнуюГраницу(ОбластьВыводимаяНаПечать, Ложь);
			
		КонецЕсли;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьВыводимаяНаПечать);
		
		ВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
			ПечатнаяФорма, ВыводимыеОбласти, Ложь);
			
		Если НЕ ВыводимыеОбластиУмещаютсяНаСтраницу ИЛИ ЭлементКарты.НовСтраница Тогда
			ПечатнаяФорма.Область().ЦветФона = Новый Цвет;
			
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
			
			ПечатнаяФорма = Новый ТабличныйДокумент;
			
			ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
			ПечатнаяФорма.ОтображатьСетку     = Ложь;
			ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
			ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
			ПечатнаяФорма.Автомасштаб         = Истина;
			ПечатнаяФорма.ОриентацияСтраницы  = ?(ОриентацияЛиста = "Портрет",
				ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
			
			ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
			
		КонецЕсли;
		
		ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		
	КонецЦикла;
	
	ПечатнаяФорма.Область().ЦветФона = Новый Цвет;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, ИмяЛиста);
	
КонецПроцедуры

// Заменяет пунктирную границу на сплошную и удаляет следующую сплошную границу в строке таблицы.
//
// Параметры:
//   ОбластьВыводимаяНаПечать - ТабличныйДокумент - 
//   ПрорисовыватьНиз - Булево - прорисовывать нижнюю границу в области, где была пунктирная граница
//
&НаСервере
Процедура КонвертироватьПунктирнуюГраницу(ОбластьВыводимаяНаПечать, ПрорисовыватьНиз)
	
	Для Инд1 = 2 По ОбластьВыводимаяНаПечать.ШиринаТаблицы Цикл
		ПроверяемаяОбласть = ОбластьВыводимаяНаПечать.Область(1, Инд1, 1, Инд1);
		Если ПроверяемаяОбласть.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир Тогда
			ПроверяемаяОбласть.ЦветРамки = Новый Цвет();
			ПроверяемаяОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ПроверяемаяОбласть.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
			Если ПрорисовыватьНиз Тогда
				ПроверяемаяОбласть.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			КонецЕсли;
			
			Для Инд2 = Инд1 + 1 По ОбластьВыводимаяНаПечать.ШиринаТаблицы Цикл
				ПроверяемаяОбласть = ОбластьВыводимаяНаПечать.Область(1, Инд2, 1, Инд2);
				Если ПроверяемаяОбласть.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Сплошная Тогда
					ПроверяемаяОбласть.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения <> Неопределено
	     И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеЗаполненияОтчетаВФоне",
			ЭтотОбъект);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Автоматическое заполнение по сведениям информационной базы';
												|en = 'Автоматическое заполнение по сведениям информационной базы'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении,
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизацииВРазделахОтчета()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ЗаполнитьСведенияОбОрганизацииВРазделах();
	ЗаполнитьПодписантаВРазделах();
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела)
	
	ПредставленияРазделов = Новый Структура;
	ПредставленияРазделов.Вставить("Баланс",      "Бухгалтерский баланс");
	ПредставленияРазделов.Вставить("ОФР",         "Отчет о финансовых результатах");
	ПредставленияРазделов.Вставить("ОИК",         "Отчет об изменениях капитала");
	ПредставленияРазделов.Вставить("ОДДС",        "Отчет о движении денежных средств");
	ПредставленияРазделов.Вставить("ОЦИС",        "Отчет о целевом использовании средств");
	ПредставленияРазделов.Вставить("Пояснения3",  "Пояснения 3. Нематериальные активы");
	ПредставленияРазделов.Вставить("Пояснения4",  "Пояснения 4. Основные средства");
	ПредставленияРазделов.Вставить("Пояснения5",  "Пояснения 5. Финансовые вложения");
	ПредставленияРазделов.Вставить("Пояснения6",  "Пояснения 6. Запасы");
	ПредставленияРазделов.Вставить("Пояснения7",  "Пояснения 7. Дебиторская задолженность");
	ПредставленияРазделов.Вставить("Пояснения8",  "Пояснения 8. Обязательства");
	ПредставленияРазделов.Вставить("Пояснения9",  "Пояснения 9. Обеспечения обязательств");
	ПредставленияРазделов.Вставить("Пояснения10", "Пояснения 10. Расходы по обычным видам деятельности");
	ПредставленияРазделов.Вставить("Пояснения11", "Пояснения 11. Государственная помощь");
	ПредставленияРазделов.Вставить("ДополнительныеФайлы", "Дополнительные файлы");
	
	ПредставлениеРаздела = "";
	Если НЕ ПредставленияРазделов.Свойство(ИдентификаторРаздела, ПредставлениеРаздела) Тогда
		ПредставлениеРаздела = ИдентификаторРаздела;
	КонецЕсли;
	
	Возврат ПредставлениеРаздела;
	
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СлужебнаяИнформацияДляТехническогоСпециалиста()
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(
		НСтр("ru = 'Актуальная версия служебных структур данных: %1';
			|en = 'Актуальная версия служебных структур данных: %1'"),
			ОбъектОтчета().ВерсияСтруктурыДанных(СтруктураРеквизитовФормы.мВыбраннаяФорма));
		
	Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) =Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		СохраненныеДанные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанные.Свойство("ВерсияСтруктурыДанных")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияСтруктурыДанных) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Сохраненная версия служебных структур данных: %2';
				|en = '%1
				|Сохраненная версия служебных структур данных: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияСтруктурыДанных);
		КонецЕсли;
		
		Если СохраненныеДанные.Свойство("ВерсияКонфигурации")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияКонфигурации) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Отчет сохранен в конфигурации: %2';
				|en = '%1
				|Отчет сохранен в конфигурации: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияКонфигурации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СлужебнаяИнформацияДляТехническогоСпециалиста;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКнопкиНастройкиЗаполнения()
	
	
	ИдентификаторАктивногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ИмяФормыНастройки = СтруктураРеквизитовФормы.РазделыСПоддержкойНастройкиЗаполнения[ИдентификаторАктивногоРаздела];
	
	Элементы.ФормаНастроитьЗаполнение.Доступность = ЗначениеЗаполнено(ИмяФормыНастройки);
	
КонецПроцедуры

&НаСервере
Функция ВсеРазделыОтчета(ЗначениеПоУмолчанию = Неопределено)
	
	ВсеРазделыОтчета = Новый Структура;
	
	ВсеРазделыОтчета.Вставить("Баланс", ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("ОФР",    ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("ОИК",    ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("ОДДС",   ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("ОЦИС",   ЗначениеПоУмолчанию);
	
	ВсеРазделыОтчета.Вставить("Пояснения3",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения4",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения5",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения6",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения7",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения8",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения9",  ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения10", ЗначениеПоУмолчанию);
	ВсеРазделыОтчета.Вставить("Пояснения11", ЗначениеПоУмолчанию);
	
	ВсеРазделыОтчета.Вставить("ДополнительныеФайлы", ЗначениеПоУмолчанию);
	
	Возврат ВсеРазделыОтчета;
	
КонецФункции

&НаСервере
Функция ОбъектОтчета()
	
	Если ОбъектОтчета = Неопределено Тогда
		ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормы);
	КонецЕсли;
	
	Возврат ОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ИмяФормы)
	
	Возврат СтрРазделить(ИмяФормы, ".")[1];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ИмяФормы)
	
	Возврат СтрРазделить(ИмяФормы, ".")[3];
	
КонецФункции

#Область Обертки

&НаКлиентеНаСервереБезКонтекста
Функция СтрЧГ0(ИсходноеЧисло)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СтрЧГ0(ИсходноеЧисло);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Список(СписокРазделенныйЗапятыми)
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.Список(СписокРазделенныйЗапятыми);
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсОбращенияКМодулюОтчета

&НаСервере
Процедура СформироватьСтруктуруПоказателей()
	
	// Переменные для совместимости механизмов проверки предыдущих редакций отчетности.
	ДеревоНастроекБаланс = Неопределено;
	ДеревоНастроекОФР = Неопределено;
	
	ОбъектОтчета().СформироватьСтруктуруПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		мДанныеОтчета,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Возврат ОбъектОтчета().ПараметрыВыгрузкиОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	Возврат ОбъектОтчета().ПроверитьВозможностьВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета,
		ПараметрыВыгрузки,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	Возврат ОбъектОтчета().ИзвлечьСтруктуруXML(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбъектОтчета().ЗаполнитьДанными(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ПараметрыВыгрузки,
		ДеревоВыгрузки,
		ЭтотОбъект,
		мДанныеОтчета,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	Возврат ОбъектОтчета().ПроверитьДанные(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		Узел,
		ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#КонецОбласти
