#Область ОписаниеПеременных

&НаСервере
Перем ОбъектОтчета;

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ВремяНачалаОперации;

&НаСервере
Перем КлючеваяОперация;
// СтандартныеПодсистемы.ОценкаПроизводительности

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

&НаСервере
Перем СтруктураМногострочныхЧастей;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем ДеревоНастроекБаланс,
      ДеревоНастроекОФР;

&НаКлиенте
Перем ИдетПозиционированиеНаОбластьРаздела;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		Параметры.мВыбраннаяФорма, СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// Имена вспомогательных макетов и форм.
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("МакетСоставаПоказателей",           "СоставПоказателей2011Кв4");
	НастройкиФормы.Вставить("МакетНастройкиСоставаПоказателей",  "НастройкаСоставаПоказателей2011Кв4");
	НастройкиФормы.Вставить("МакетСтруктурыМногострочныхЧастей", "СтруктураМногострочныхЧастей2011Кв4");
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	ДеревоНастроекБаланс = Новый ДеревоЗначений;
	ДеревоНастроекОФР = Новый ДеревоЗначений;
	
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекБаланс);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекОФР);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
	
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	СтруктураДанныхБаланс              = Новый Структура;
	СтруктураДанныхФормаОтчета         = Новый Структура;
	СтруктураДанныхОДДС                = Новый Структура;
	СтруктураДанныхОИК                 = Новый Структура;
	СтруктураДанныхОЦИПС               = Новый Структура;
	СтруктураДанныхПояснения1          = Новый Структура;
	СтруктураДанныхПояснения2          = Новый Структура;
	СтруктураДанныхПояснения3          = Новый Структура;
	СтруктураДанныхПояснения4          = Новый Структура;
	СтруктураДанныхПояснения5          = Новый Структура;
	СтруктураДанныхПояснения6          = Новый Структура;
	СтруктураДанныхПояснения7          = Новый Структура;
	СтруктураДанныхПояснения8          = Новый Структура;
	СтруктураДанныхПояснения9          = Новый Структура;
	СтруктураДанныхРасчетАктивов       = Новый Структура;
	СтруктураДанныхДополнительныеФайлы = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
			
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Параметры.ЭтоБалансНекоммерческойОрганизации;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра = "РегламентированныйОтчетБухОтчетность_ФормаОтчета2011Кв4_Изменения";
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = Загрузить(СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
	СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета = СтрЧислоСтрок(ОбъектОтчета(ИмяФормы).ПолучитьМакет("ФормаОтчета2011Кв4_Изменения").ПолучитьТекст());
	
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить("РасходыУчитываютсяПоЭЗВОтчетномГоду",   Неопределено);
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить("РасходыУчитываютсяПоЭЗВПредыдущемГоду", Неопределено);
	
	СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки                = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения              = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей = ПустаяСтруктураДанныхФайла();
	
	СтруктураРеквизитовФормы.ОборотыСчета75_01 = Новый Структура;
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа04", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа05", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа06", 0);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	КлючеваяОперация = "ЗаполнениеФормыБухгалтерскаяОтчетность";
	
	Элементы.ПоказатьИнформациюДляТехническогоСпециалиста.Видимость = ОбщегоНазначения.РежимОтладки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	КонецЕсли;
	
	Если Область.Имя = "НастройкаСоставаСтрок" Тогда
		НастроитьСтроки(Неопределено);
		
		Модифицированность = Истина;
		Возврат;
		
	ИначеЕсли Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтотОбъект);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		
		Модифицированность = Истина;
		Возврат;
		
	ИначеЕсли Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Периоды.Добавить("2", "Промежуточная при ликвидации/реорганизации");
		Периоды.Добавить("3", "Ликвидационная");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		
		Модифицированность = Истина;
		Возврат;
		
	ИначеЕсли Область.Имя = "ОргПочтАдрес" Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТаблицаВыбора.Очистить();
		
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
		
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'В контактной информации не указаны адреса организации.';
										|en = 'В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;
		
		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
		Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
		Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
		Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер")) Тогда
		
		Если Область.Имя = "П000100123004" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		ИначеЕсли Область.Имя = "П000100123005" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		ИначеЕсли Область.Имя = "П000100123006" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ОргОтрасль" Тогда
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхОЦИПС.Вставить("ОргОтрасль", Область.Значение);
		СтруктураДанныхФормаОтчета.Вставить("ОргОтрасль", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОЦИПС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхФормаОтчета.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		
	ИначеЕсли Область.Имя = "ОргКодОКВЭД" Тогда
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхОЦИПС.Вставить("ОргКодОКВЭД", Область.Значение);
		СтруктураДанныхФормаОтчета.Вставить("ОргКодОКВЭД", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОЦИПС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхФормаОтчета.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
	ИначеЕсли Область.Имя = "ДатаПодписиОтчета" Тогда
		ДатаПодписи = Область.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
		СтруктураДанныхОДДС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОИК.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхОЦИПС.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхФормаОтчета.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		СтруктураДанныхПояснения1.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения2.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения3.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения4.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения5.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения6.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения7.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения8.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения9.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(
			ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(
			ДатаПодписи, СтруктураРеквизитовФормы, ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		
		Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок_", "");
			ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "П") = 1 И СтрНайти(ИмяОбласти, "_") > 1 Тогда
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяОбласти);
		Иначе 
			Возврат;
		КонецЕсли;
		
		ИмяГруппы = ?(ЗначениеЗаполнено(ИмяПоказателя), Лев(ИмяПоказателя, СтрДлина(ИмяПоказателя) - 2), "");
		
		Если ЗначениеЗаполнено(ИмяГруппы) Тогда
			ТестовоеИмя = ИмяГруппы + "01_2";
			Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
			Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") = 0 И
				ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	ПодключитьОбработчикОжидания("ОбработатьРазделыОтчетаПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
		
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизации();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?';
		|en = 'Внимание! Будут очищены все показатели отчета.
		|Продолжить операцию?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены сведения о дополнительных файлах.
			|Продолжить операцию?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?';
			|en = 'Внимание! Будут очищены все показатели текущего отчета.
			|Продолжить операцию?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СформироватьНастройкиФормыВыбораПечати();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) >= 2018 Тогда
		ПараметрыФормы.Вставить("РедакцияФормы", "от 06.03.2018 № 41н");
	Иначе
		ПараметрыФормы.Вставить("РедакцияФормы", "от 02.07.2010 № 66н");
	КонецЕсли;
	
	ИмяФормыВыбора = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	               + "ВыборПечатнойФормы";
	ФормаВыбора = ПолучитьФорму(ИмяФормыВыбора, ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  			СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ИмяФормы), ИмяФормыОтчета(ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПояснения(Команда)
	
	АдресФайлаВХранилище = СформироватьФайлXLSВХранилище();
	
	Если АдресФайлаВХранилище <> Неопределено Тогда
		ИмяСохраняемогоФайла = СтрШаблон("Пояснения к бухгалтерскому балансу и отчету о финансовых результатах за %1 (%2).xls",
			НРег(СтруктураРеквизитовФормы.СтрПериодОтчета),
			СтруктураРеквизитовФормы.НаимОрганизации);
		ИмяСохраняемогоФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСохраняемогоФайла);
		
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
		ПараметрыСохранения.Диалог.Фильтр = "Лист Excel (*.xls)|*.xls";
		
		ОбработчикЗавершения = Новый ОписаниеОповещения("ЗавершитьСохранениеФайлаПояснений", ЭтотОбъект, АдресФайлаВХранилище);
		
		ФайловаяСистемаКлиент.СохранитьФайл(ОбработчикЗавершения, АдресФайлаВХранилище,
			ИмяСохраняемогоФайла, ПараметрыСохранения);
		
	Иначе
		ПоказатьПредупреждение( , НСтр("ru = 'В отчет не включено ни одно из пояснений.
		                                   |Установите флажки у соответствующих разделов в настройках отчета.';
		                                   |en = 'В отчет не включено ни одно из пояснений.
		                                   |Установите флажки у соответствующих разделов в настройках отчета.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	ДополнительныеПараметры = Новый Структура("ИмяПоказателя", ИмяПоказателя);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьДляОтправкиВБанк(Команда)
	
	ШаблонТекстаСостояния = НСтр("ru = 'Подготовка отчета %1 для отправки в банк...';
								|en = 'Подготовка отчета %1 для отправки в банк...'");
	ТекстСостояния = СтрШаблон(ШаблонТекстаСостояния, Заголовок);
	Состояние(ТекстСостояния);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		// У несохраненного отчета печатные формы будут сформированы при записи отчета
		СообщитьОЗавершенииПодготовкиФайловДляБанка();
		Возврат;
	КонецЕсли;
	
	ПодготовитьФайлыДляБанка();
	СообщитьОЗавершенииПодготовкиФайловДляБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюДляТехническогоСпециалиста(Команда)
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СлужебнаяИнформацияДляТехническогоСпециалиста();
	ПоказатьПредупреждение( , СлужебнаяИнформацияДляТехническогоСпециалиста, ,
		"Служебная информация для технического специалиста");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроек)
	
	ОписаниеТиповСтрока   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки());
	ОписаниеТиповЧисло1   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло3   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло5_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	КолонкиДН = ДеревоНастроек.Колонки;
	
	КолонкиДН.Добавить("Наименование", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("Код", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ВключатьВОтчет", ОписаниеТиповЧисло1);
	КолонкиДН.Добавить("Существенность", ОписаниеТиповЧисло5_2);
	КолонкиДН.Добавить("ИмяОбластиДопСтроки", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ТипСостава", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("МаксимальноеКоличество", ОписаниеТиповЧисло3);
	КолонкиДН.Добавить("ДостДляРедактирования_Существенность", ОписаниеТиповБулево);
	КолонкиДН.Добавить("ДостДляРедактирования_МаксимальноеКоличество", ОписаниеТиповБулево);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	ТабличныйДокумент.Очистить(); // очистка необходима в случае повторного вызова процедуры "Инициализация"
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД = ДопСтрокиОФРПриПримененииЕНВД();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		КонецЕсли;
		СохраненныеДанные.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		СохраненныеДанные.Свойство("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
		
		ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные);
		
	Иначе
		ИнициализацияЗаполнитьСтруктурыДанных();
		
	КонецЕсли;
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИнициализироватьОписанияМногострочныхЧастей();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду);
	
	НачалоПредшествующегоПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12);
	КонецПредшествующегоПериодаОтчета  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,  -12);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		НачалоПредшествующегоПериодаОтчета,
		КонецПредшествующегоПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду);
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	УстановитьПризнакиПримененияУСН();
	
	ПолучитьСведенияОПоказателяхОтчета(); // Исходная таблица автозаполняемых показателей для отчета
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		// Инициализация переменных настройки формы.
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		// Заполним настройки состава дополнительных строк по умолчанию.
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
		
		ИнициализироватьСтруктуруДанныхРазделов();
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ИмяРаздела = "ДополнительныеФайлы" Тогда
		Если ТабличныйДокумент.Области.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(
				Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_"
				+ ?(ИмяРаздела = "ФормаОтчета", СтруктураОтчета.ОПУ.ИмяМакета, СтруктураОтчета[ИмяРаздела].ИмяМакета)));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяРаздела);
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	АктивируемыйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = АктивируемыйРаздел.ПолучитьИдентификатор();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизации();
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
	КонецЕсли;
	
	// Отправка бухгалтерской отчетности в Росстат.
	ОтправкаБухгалтерскойОтчетностиВРосстат.ОпределитьСсылкуНаСуществующийОтчетВРосстат(ЭтотОбъект);
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиентСервер.УстановитьВидимостьСсылкиНаОтчетРосстатаИПанелиПредупреждения(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-12-01' Тогда
		ОчиститьПолеПодписиБухгалтера();
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере(,, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СкрытьПоказательДатаУтвержденияОтчетности();
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
	КонецЕсли;
	
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлПояснительнойЗаписки"];
	ИмяФайлаПояснительнойЗаписки = СтруктураХранения.ИмяФайла;
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлАудиторскогоЗаключения"];
	ИмяФайлаАудиторскогоЗаключения = СтруктураХранения.ИмяФайла;
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлЗаявленияСоюзаСельхозпроизводителей"];
	ИмяФайлаЗаявленияРевизионногоСоюза = СтруктураХранения.ИмяФайла;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ПризнМногострочности",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",    ОписаниеТиповСтрока15);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаСервере
Функция ДопСтрокиОФРПриПримененииЕНВД()
	
	НовМассив = Новый Массив;
	
	НовМассив.Добавить("ДопСтрока21101");
	НовМассив.Добавить("ДопСтрока21102");
	НовМассив.Добавить("ДопСтрока21201");
	НовМассив.Добавить("ДопСтрока21202");
	НовМассив.Добавить("ДопСтрока22101");
	НовМассив.Добавить("ДопСтрока22102");
	НовМассив.Добавить("ДопСтрока22201");
	НовМассив.Добавить("ДопСтрока22202");
	НовМассив.Добавить("ДопСтрока21001");
	НовМассив.Добавить("ДопСтрока21002");
	НовМассив.Добавить("ДопСтрока22001");
	НовМассив.Добавить("ДопСтрока22002");
	НовМассив.Добавить("ДопСтрока23001");
	НовМассив.Добавить("ДопСтрока23002");
	
	Возврат НовМассив;
	
КонецФункции

&НаСервере
Процедура ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные = Неопределено)
	
	Если СохраненныеДанные = Неопределено Тогда
		// Создание нового отчета.
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-01-01' Тогда
			СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4();
		ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-12-01' Тогда
			СтруктураОтчета = ПолучитьСтруктуруОтчета2012Кв1();
		ИначеЕсли СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2014-11-01' Тогда
			СтруктураОтчета = ПолучитьСтруктуруОтчета2012Кв4_3();
		Иначе
			СтруктураОтчета = ПолучитьСтруктуруОтчета2014Кв4();
		КонецЕсли;
		
	Иначе
		// Восстановление сохраненного отчета.
		СохраненнаяСтруктураОтчета = Неопределено;
		Если СохраненныеДанные.Свойство("СтруктураОтчета", СохраненнаяСтруктураОтчета) Тогда
			СтруктураОтчета = СохраненнаяСтруктураОтчета;
			
			Для Каждого Элемент Из СтруктураОтчета Цикл
				Если СтрЧислоВхождений(Элемент.Значение.ИмяМакета, Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))) > 0 Тогда
					Элемент.Значение.ИмяМакета = Сред(Элемент.Значение.ИмяМакета, СтрДлина(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_") + 1);
				КонецЕсли;
				
				Элемент.Значение.ИмяМакета = СтрЗаменить(Элемент.Значение.ИмяМакета, "_2011Кв4", "");
				
				Если Элемент.Значение.Свойство("ИдентификаторАвтозаполнения") Тогда
					Элемент.Значение.ИдентификаторАвтозаполнения = СтрЗаменить(Элемент.Значение.ИдентификаторАвтозаполнения, "_2011Кв4", "");
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2014-11-01'
				И СтруктураОтчета.РасчетАктивов.ИмяМакета <> "РасчетАктивов_2014Кв4" Тогда
				УстановитьСтруктуруРасчетаАктивов2014Кв4(СтруктураОтчета);
				УстановитьСтруктуруОИК2014Кв4(СтруктураОтчета);
			КонецЕсли;
			
			// Переход на макет Пояснений 4 со скрываемой строкой.
			Если НЕ СохраненнаяСтруктураОтчета.Пояснения4.Свойство("БлокиМакета") Тогда
				БлокиМакета = НоваяСтруктураБлоковПояснения4();
				БлокиМакета.ОсновнаяЧасть5407.Видимость = Истина;
				СтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
			КонецЕсли;
			
		Иначе
			// Отчет был сохранен со структурой данных 2011Кв4.
			СтруктураОтчета = ПолучитьСтруктуруОтчета2011Кв4();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату", "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода", "На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему", "На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхЧастей()
	
	ИмяМакетаСтруктурыМногострочныхЧастей = НастройкиФормы.МакетСтруктурыМногострочныхЧастей;
	ТекстОписанияСтруктуры = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыМногострочныхЧастей).ПолучитьТекст();
	ИнициализироватьОписанияМногострочныхПоXML(ТекстОписанияСтруктуры);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Заполнение соответствия показателей и их описаний в структуре
	// для возможности получения описания по имени показателя.
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Ключ;
		ПоказателиМногострочнойЧасти    = МногострочнаяЧасть.Значение.Состав;
		
		Если ТипЗнч(ПоказателиМногострочнойЧасти) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Показатель Из ПоказателиМногострочнойЧасти[0] Цикл
			СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию.Вставить(Показатель.Ключ, ИдентификаторМногострочнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета"; // Отчет о прибылях и убытках
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИПС"; // Отчет о целевом использовании полученных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РасчетАктивов";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// БАЛАНС.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210004", "П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210005", "П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100104", "П000102110104;П000102120104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100105", "П000102110105;П000102120105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100204", "П000102110204;П000102120204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100205", "П000102110205;П000102120205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200104", "П000102110104;П000102120104;П000102210104;П000102220104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200105", "П000102110105;П000102120105;П000102210105;П000102220105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200205", "П000102110205;П000102120205;П000102210205;П000102220205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300104", "П000102110104;П000102120104;П000102210104;П000102220104;П000100231004;П000100232004;П000100234004;П000100233004;П000100235004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300105", "П000102110105;П000102120105;П000102210105;П000102220105;П000100231005;П000100232005;П000100234005;П000100233005;П000100235005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300205", "П000102110205;П000102120205;П000102210205;П000102220205");
	
	// ОТЧЕТ ОБ ИЗМЕНЕНИЯХ КАПИТАЛА.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321108", "П000100321107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321208", "П000100321205;П000100321207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321308", "П000100321305;П000100321307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100321008", "П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603;П100100321003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604;П100100321004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605;П100100321005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321006", "П000100321606;П100100321006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321008", "П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П100100321008;П000100321107;П000100321205;П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;П000100321605;П000100321606;П000100321607;П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322108", "П000100322107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322208", "П000100322205;П000100322207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322308", "П000100322305;П000100322307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322708", "П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100324007", "П000100324006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322006", "П000100322606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008", "П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;П000100322607;П000100322707;П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331108", "П000100331107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331208", "П000100331205;П000100331207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331308", "П000100331305;П000100331307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100331008", "П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603;П100100331003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604;П100100331004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605;П100100331005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331006", "П000100331606;П100100331006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331008", "П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П100100331008;П000100331107;П000100331205;П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;П000100331605;П000100331606;П000100331607;П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332108", "П000100332107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332208", "П000100332205;П000100332207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332308", "П000100332305;П000100332307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332708", "П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332006", "П000100332606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332008", "П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100334007", "П000100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100340006_1", "П100100340003_1;П100100340004_1;П100100340005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100341006_1", "П100100341003_1;П100100341004_1;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100342006_1", "П100100342003_1;П100100342004_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350003_1", "П100100340003_1;П100100341003_1;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350004_1", "П100100340004_1;П100100341004_1;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350005_1", "П100100340005_1;П100100341005_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100350006_1", "П100100350003_1;П100100350004_1;П100100350005_1;П100100340003_1;П100100341003_1;П100100342003_1;П100100340004_1;П100100341004_1;П100100342004_1;П100100340005_1;П100100341005_1;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341003", "П000100341103;П100100341003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341004", "П000100341104;П100100341004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341005", "П000100341105;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342003", "П000100342103;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342004", "П000100342104;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342005", "П000100342105;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П100100341003_1;П000100341104;П100100341004_1;П000100341105;П100100341005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П100100342003_1;П000100342104;П100100342004_1;П000100342105;П100100342005_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П100100341003_1;П000100342103;П100100342003_1;П000100340004;П000100341004;П000100342004;П000100341104;П100100341004_1;П000100342104;П100100342004_1;П000100340005;П000100341005;П000100342005;П000100341105;П100100341005_1;П000100342105;П100100342005_1;П000100340006;П000100340003;П000100340004");
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20141101' Тогда
		
		// Данные "Стоимости чистых активов" (из РАСЧЕТА АКТИВОВ).
		//
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360003", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360004", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360005", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
		
	КонецЕсли;
	
	// ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П100100411003;П000100411903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П100100411004;П000100411904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	
	// ОТЧЕТ О ЦЕЛЕВОМ ИСПОЛЬЗОВАНИИ ПОЛУЧЕННЫХ СРЕДСТВ.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620004", "П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631004", "П000100631104;П000100631204;П000100631304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632004", "П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630004", "П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640004", "П000100610004;П000100620004;П000100630004;П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620005", "П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631005", "П000100631105;П000100631205;П000100631305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632005", "П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630005", "П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640005", "П000100610005;П000100620005;П000100630005;П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005;П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	
	// РАСЧЕТ АКТИВОВ.
	//
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20141101'
		И СтруктураОтчета.РасчетАктивов.ИмяМакета = "РасчетАктивов_2014Кв4" Тогда
		
		// Активы.
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111004", "П000100111004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111005", "П000100111005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111006", "П000100111006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112004", "П000100112004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112005", "П000100112005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112006", "П000100112006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113004", "П000100113004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113005", "П000100113005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113006", "П000100113006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114004", "П000100114004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114005", "П000100114005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114006", "П000100114006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115004", "П000100115004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115005", "П000100115005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115006", "П000100115006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116004", "П000100116004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116005", "П000100116005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116006", "П000100116006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117004", "П000100117004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117005", "П000100117005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117006", "П000100117006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118004", "П000100118004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118005", "П000100118005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118006", "П000100118006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119004", "П000100119004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119005", "П000100119005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119006", "П000100119006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121004", "П000100121004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121005", "П000100121005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121006", "П000100121006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122004", "П000100122004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122005", "П000100122005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122006", "П000100122006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123004", "П000100123004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123005", "П000100123005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123006", "П000100123006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124004", "П000100124004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124005", "П000100124005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124006", "П000100124006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125004", "П000100125004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125005", "П000100125005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125006", "П000100125006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126004", "П000100126004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126005", "П000100126005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126006", "П000100126006");
		
		// ИТОГО активы.
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
		
		// Пассивы.
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141004", "П000100141004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141005", "П000100141005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141006", "П000100141006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142004", "П000100142004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142005", "П000100142005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142006", "П000100142006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143004", "П000100143004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143005", "П000100143005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143006", "П000100143006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145004", "П000100145004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145005", "П000100145005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145006", "П000100145006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151004", "П000100151004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151005", "П000100151005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151006", "П000100151006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152004", "П000100152004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152005", "П000100152005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152006", "П000100152006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154004", "П000100154004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154005", "П000100154005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154006", "П000100154006");
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155004", "П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155005", "П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155006", "П000100155006");
		
		// ИТОГО пассивы.
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200004", "П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200005", "П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200006", "П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
		
		// Стоимость чистых активов.
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
		
	Иначе
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000103", "П000100111005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000104", "П000100111004");
		
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
			
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000203", "П000100115005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000204", "П000100115004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000303", "П000100119005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000304", "П000100119004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000403", "П000100116005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000404", "П000100116004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000503", "П000100117005;П000100124005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000504", "П000100117004;П000100124004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000603", "П000100112005;П000100113005;П000100114005;П000100118005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000604", "П000100112004;П000100113004;П000100114004;П000100118004");
			
		Иначе
			
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000203", "П000100113005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000204", "П000100113004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000303", "П000100117005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000304", "П000100117004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000403", "П000100114005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000404", "П000100114004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000503", "П000100115005;П000100124005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000504", "П000100115004;П000100124004");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000603", "П000100112005;П000100116005");
			СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000604", "П000100112004;П000100116004");
			
		КонецЕсли;
		
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000703", "П000100121005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000704", "П000100121004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000803", "П000100122005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000804", "П000100122004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000903", "П000100123005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100000904", "П000100123004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001003", "П000100125005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001004", "П000100125004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001103", "П000100126005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001104", "П000100126004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001203", "П000100111005;П000100113005;П000100117005;П000100114005;П000100115005;П000100124005;П000100112005;П000100116005;П000100121005;П000100122005;П000100123005;П000100125005;П000100126005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001204", "П000100111004;П000100113004;П000100117004;П000100114004;П000100115004;П000100124004;П000100112004;П000100116004;П000100121004;П000100122004;П000100123004;П000100125004;П000100126004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001303", "П000100141005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001304", "П000100141004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001403", "П000100142005;П000100145005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001404", "П000100142004;П000100145004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001503", "П000100151005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001504", "П000100151004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001603", "П000100152005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001604", "П000100152004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001703", "П000101520705");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001704", "П000101520704");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001803", "П000100154005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001804", "П000100154004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001903", "П000100155005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100001904", "П000100155004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100002003", "П000100141005;П000100142005;П000100151005;П000100152005;П000100154005;П000100155005;П000100145005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100002004", "П000100141004;П000100142004;П000100151004;П000100152004;П000100154004;П000100155004;П000100145004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100002103", "П000100111005;П000100113005;П000100117005;П000100114005;П000100115005;П000100124005;П000100112005;П000100116005;П000100121005;П000100122005;П000100123005;П000100125005;П000100126005;П000100141005;П000100142005;П000100151005;П000100152005;П000100154005;П000100155005;П000100145005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100002104", "П000100111004;П000100113004;П000100117004;П000100114004;П000100115004;П000100124004;П000100112004;П000100116004;П000100121004;П000100122004;П000100123004;П000100125004;П000100126004;П000100141004;П000100142004;П000100151004;П000100152004;П000100154004;П000100155004;П000100145004");
		
	КонецЕсли;
	// ПОЯСНЕНИЯ 3.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530004", "П000100530104;П000100530504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530005", "П000100530105;П000100530505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530006", "П000100530106;П000100530506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530007", "П000100530107;П000100530507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530008", "П000100530108;П000100530508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530009", "П000100530109;П000100530509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530010", "П000100530110;П000100530510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530011", "П000100530111;П000100530511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530012", "П000100530112;П000100530512");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531004", "П000100531104;П000100531504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531005", "П000100531105;П000100531505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531006", "П000100531106;П000100531506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531007", "П000100531107;П000100531507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531008", "П000100531108;П000100531508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531009", "П000100531109;П000100531509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531010", "П000100531110;П000100531510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531011", "П000100531111;П000100531511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531012", "П000100531112;П000100531512");
	
	// ПОЯСНЕНИЯ 5.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550004", "П000100550104;П000100551104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552004", "П000100552104;П000100553104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550005", "П000100550105;П000100551105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552005", "П000100552105;П000100553105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550006", "П000100550106;П000100551106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552006", "П000100552106;П000100553106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550007", "П000100550107;П000100551107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552007", "П000100552107;П000100553107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550008", "П000100550108;П000100551108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552008", "П000100552108;П000100553108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550009", "П000100550109;П000100551109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552009", "П000100552109;П000100553109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550010", "П000100550110;П000100551110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552010", "П000100552110;П000100553110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550012", "П000100550112;П000100551112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552012", "П000100552112;П000100553112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550013", "П000100550113;П000100551113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552013", "П000100552113;П000100553113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555004", "П000100555104;П000100556004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557004", "П000100557104;П000100558004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555005", "П000100555105;П000100556005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557005", "П000100557105;П000100558005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555006", "П000100555106;П000100556006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557006", "П000100557106;П000100558006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555007", "П000100555107;П000100556007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557007", "П000100557107;П000100558007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555008", "П000100555108;П000100556008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557008", "П000100557108;П000100558008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555010", "П000100555110;П000100556010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557010", "П000100557110;П000100558010");
	
	// ПОЯСНЕНИЯ 6.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003;П000100566503;П000100567003;П000100568003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004;П000100566504;П000100567004;П000100568004");
	
	// ПОЯСНЕНИЯ 7.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100570007", "П100100570003;П100100570004;П100100570005;П100100570006");
	
	// ПОЯСНЕНИЯ 9.
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590003", "П000100590103;П000100590503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590004", "П000100590104;П000100590504");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	ФормироватьСтруктуруСтраницОтчета();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПримененияУСН()
	
	ОтчетныйПериодКонец  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ОтчетныйПериодНачало = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	ПредшествующийПериодКонец  = ОтчетныйПериодНачало - 1;
	ПредшествующийПериодНачало = НачалоГода(ПредшествующийПериодКонец);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ОтчетныйПериодНачало, ОтчетныйПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН0 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ПредшествующийПериодНачало, ПредшествующийПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН1 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруДанныхРазделов()
	
	Для Каждого РазделОтчета Из СтруктураОтчета Цикл
		Если РазделОтчета.Значение.Свойство("ИмяМакета") Тогда
			ИмяСтраницы = РазделОтчета.Значение.ИмяСтраницы;
			ИмяМакетаРаздела = РазделОтчета.Значение.ИмяМакета;
			СтруктураДанныхРаздела = ЭтотОбъект["СтруктураДанных" + ИмяСтраницы];
			
			МакетРаздела = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяФормыОтчета(ИмяФормы) + "_" + ИмяМакетаРаздела);
			
			Для Каждого ОбластьМакета Из МакетРаздела.Области Цикл
				ИмяОбласти = ОбластьМакета.Имя;
				Если ОбластьМакета.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				   И ОбластьМакета.СодержитЗначение = Истина
				   И НЕ СтруктураДанныхРаздела.Свойство(ИмяОбласти) Тогда
					СтруктураДанныхРаздела.Вставить(ИмяОбласти, ОбластьМакета.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчета

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ИмяРаздела = Неопределено;
	Если Команда.Имя = "ЗаполнитьТекущий" Тогда
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(ИмяРаздела, ВремяНачалаОперации);
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ИмяРаздела = Неопределено, ВремяНачалаОперации = Неопределено)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Модифицированность = Истина;
	
	РезультатПроверкиАктуализацииДанныхУчета = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРезультатПроверкиАктуализацииДанныхУчета(
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		РезультатПроверкиАктуализацииДанныхУчета);
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	Если НЕ РезультатПроверкиАктуализацииДанныхУчета = Неопределено 
	   И РезультатПроверкиАктуализацииДанныхУчета.ТребуетсяАктуализация Тогда
		
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок = Новый Массив;
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = 'Данные учета неактуальны с ';
																		|en = 'Данные учета неактуальны с '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(Формат(РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности, "ДЛФ=Д"), Новый Шрифт(, , Истина)));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = '. Рекомендуется выполнить ';
																		|en = '. Рекомендуется выполнить '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'закрытие месяца';
																									|en = 'закрытие месяца'"), , , , "ОткрытьФормуЗакрытияМесяца"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru = ' и автозаполнить отчет повторно.';
																		|en = ' и автозаполнить отчет повторно.'"));
		
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок =
		Новый ФорматированнаяСтрока(ПроверкаАктуализацииДанныхПредупреждениеЗаголовок);
		
		СтруктураРеквизитовФормы.ДатаАктуальностиДанных = РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности;
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяРаздела) ИЛИ ИмяРаздела = "Пояснения4" Тогда
		// Обновление структуры блоков разделов отчета. Ранее сохраненные отчеты могут содержать строки
		// неиспользующиеся в актуальных алгоритмах.
		БлокиМакета = НоваяСтруктураБлоковПояснения4();
		СтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
	КонецЕсли;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(Неопределено, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ПараметрыОтчета = НовыеПараметрыАвтозаполнения();
	ПараметрыОтчета.Организация       = СтруктураРеквизитовФормы.Организация;
	ПараметрыОтчета.ГруппаОрганизаций = СтруктураРеквизитовФормы.ГруппаОрганизаций;
	ПараметрыОтчета.мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ПараметрыОтчета.мДатаКонцаПериодаОтчета  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ПараметрыОтчета.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыОтчета.АдресВоВременномХранилище = СтруктураРеквизитовФормы.АдресВоВременномХранилище;
	ПараметрыОтчета.СтруктураОтчета = СтруктураОтчета;
	ПараметрыОтчета.СоставДополнительныхСтрокБаланс = ДеревоНастроекБаланс;
	ПараметрыОтчета.СоставДополнительныхСтрокОПУ    = ДеревоНастроекОФР;
	ПараметрыОтчета.ПрименениеЕНВД = СтруктураРеквизитовФормы.ПрименениеЕНВД;
	ПараметрыОтчета.ПрименениеУСН0 = СтруктураРеквизитовФормы.ПрименениеУСН0;
	ПараметрыОтчета.ПрименениеУСН1 = СтруктураРеквизитовФормы.ПрименениеУСН1;
	ПараметрыОтчета.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	Иначе
		ТаблицаРасшифровки = Неопределено;
	КонецЕсли;
	ПараметрыОтчета.ТаблицаРасшифровки = ТаблицаРасшифровки;
	
	ЗаполнятьВсеВидимые = (НЕ ЗначениеЗаполнено(ИмяРаздела));
	
	ПараметрыОтчета.ЗаполнятьБаланс     = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Баланс")      И СтраницаВидимаНаСервере("Баланс");
	ПараметрыОтчета.ЗаполнятьОФР        = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ФормаОтчета") И СтраницаВидимаНаСервере("ФормаОтчета");
	ПараметрыОтчета.ЗаполнятьОИК        = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ОИК")         И СтраницаВидимаНаСервере("ОИК");
	ПараметрыОтчета.ЗаполнятьОДДС       = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ОДДС")        И СтраницаВидимаНаСервере("ОДДС");
	ПараметрыОтчета.ЗаполнятьОЦИПС      = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "ОЦИПС")       И СтраницаВидимаНаСервере("ОЦИПС");
	ПараметрыОтчета.ЗаполнятьПояснения1 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения1")  И СтраницаВидимаНаСервере("Пояснения1");
	ПараметрыОтчета.ЗаполнятьПояснения2 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения2")  И СтраницаВидимаНаСервере("Пояснения2");
	ПараметрыОтчета.ЗаполнятьПояснения4 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения4")  И СтраницаВидимаНаСервере("Пояснения4");
	ПараметрыОтчета.ЗаполнятьПояснения5 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения5")  И СтраницаВидимаНаСервере("Пояснения5");
	ПараметрыОтчета.ЗаполнятьПояснения6 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения6")  И СтраницаВидимаНаСервере("Пояснения6");
	ПараметрыОтчета.ЗаполнятьПояснения7 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения7")  И СтраницаВидимаНаСервере("Пояснения7");
	ПараметрыОтчета.ЗаполнятьПояснения8 = (ЗаполнятьВсеВидимые ИЛИ ИмяРаздела = "Пояснения8")  И СтраницаВидимаНаСервере("Пояснения8");
	
	// Для обработки данных после автозаполнения необходимо знать, какие разделы заполнялись.
	ИменаЗаполняемыхРазделов = Новый Массив;
	Если ПараметрыОтчета.ЗаполнятьБаланс Тогда
		ИменаЗаполняемыхРазделов.Добавить("Баланс");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОФР Тогда
		ИменаЗаполняемыхРазделов.Добавить("ФормаОтчета");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОИК Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОИК");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОДДС Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОДДС");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьОЦИПС Тогда
		ИменаЗаполняемыхРазделов.Добавить("ОЦИПС");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения1 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения1");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения2 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения2");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения4 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения4");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения5 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения5");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения6 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения6");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения7 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения7");
	КонецЕсли;
	Если ПараметрыОтчета.ЗаполнятьПояснения8 Тогда
		ИменаЗаполняемыхРазделов.Добавить("Пояснения8");
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("ИменаАвтоЗаполняемыхРазделов", ИменаЗаполняемыхРазделов);
	
	СохрДатаУтвОтчетности = Неопределено;
	Если СтруктураДанныхБаланс.Свойство("ДатаУтвОтчетности") Тогда
		СохрДатаУтвОтчетности = СтруктураДанныхБаланс.ДатаУтвОтчетности;
	КонецЕсли;
	
	ОчиститьНаСервере(ИмяРаздела, Ложь);
	
	Если СохрДатаУтвОтчетности <> Неопределено Тогда
		СтруктураДанныхБаланс.Вставить("ДатаУтвОтчетности", СохрДатаУтвОтчетности);
	КонецЕсли;
	
	СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	Если ВидСдачиОтчетности = 1 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
	КонецЕсли;
	
	Контейнер = НовыйКонтейнерПоказателей();
	Контейнер.Баланс = СтруктураДанныхБаланс;
	Контейнер.ФормаОтчета   = СтруктураДанныхФормаОтчета;
	Контейнер.ОИК           = СтруктураДанныхОИК;
	Контейнер.ОДДС          = СтруктураДанныхОДДС;
	Контейнер.ОЦИПС         = СтруктураДанныхОЦИПС;
	Контейнер.РасчетАктивов = СтруктураДанныхРасчетАктивов;
	Контейнер.Пояснения1    = СтруктураДанныхПояснения1;
	Контейнер.Пояснения2    = СтруктураДанныхПояснения2;
	Контейнер.Пояснения3    = СтруктураДанныхПояснения3;
	Контейнер.Пояснения4    = СтруктураДанныхПояснения4;
	Контейнер.Пояснения5    = СтруктураДанныхПояснения5;
	Контейнер.Пояснения6    = СтруктураДанныхПояснения6;
	Контейнер.Пояснения7    = СтруктураДанныхПояснения7;
	Контейнер.Пояснения8    = СтруктураДанныхПояснения8;
	Контейнер.Пояснения9    = СтруктураДанныхПояснения9;
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы';
								|en = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

#КонецОбласти

#Область РасчетПоказателей

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтотОбъект, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Баланс" Тогда
		Расчет_Баланс(Форма, ОбластьИмя);
		Расчет_РасчетАктивов(Форма, ОбластьИмя);
		Расчет_ОИК_Таблица3(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ФормаОтчета" Тогда
		Расчет_ОФР(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОИК" Тогда
		Расчет_ОИК(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОДДС" Тогда
		Расчет_ОДДС(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОЦИПС" Тогда
		Расчет_ОЦИПС(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения3" Тогда
		Расчет_Пояснения3(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения5" Тогда
		Расчет_Пояснения5(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения6" Тогда
		Расчет_Пояснения6(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения7" Тогда
		Расчет_Пояснения7(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения9" Тогда
		Расчет_Пояснения9(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		Расчет(Форма, "Баланс",        ОбластьИмя);
		Расчет(Форма, "ФормаОтчета",   ОбластьИмя);
		Расчет(Форма, "ОИК",           ОбластьИмя);
		Расчет(Форма, "ОДДС",          ОбластьИмя);
		Расчет(Форма, "ОЦИПС",         ОбластьИмя);
		Расчет(Форма, "Пояснения3",    ОбластьИмя);
		Расчет(Форма, "Пояснения5",    ОбластьИмя);
		Расчет(Форма, "Пояснения6",    ОбластьИмя);
		Расчет(Форма, "Пояснения7",    ОбластьИмя);
		Расчет(Форма, "Пояснения9",    ОбластьИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Баланс(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Баланс");
	
	Графы = СтрРазделить("04,05,06", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		// Актив.
		// Строка 1100.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001100" + Графа], ОбластьИмя) > 0 Тогда
			СуммаСтрок1180_1190 = 0;
			Если НЕ ПустаяСтрока(Форма.СтруктураОтчета.Баланс.ИмяМакета)
				И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
				И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
				И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
				И НЕ Форма.СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда
				СуммаСтрок1180_1190 =
					ПоказательОтчета(Форма, РазмещениеДанных, "П0001001180" + Графа)
					+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001190" + Графа);
			КонецЕсли;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001100" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001110" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001120" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001130" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001140" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001150" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001160" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001170" + Графа)
				+ СуммаСтрок1180_1190);
			
		КонецЕсли;
		
		// Строка 1200.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001200" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001200" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001210" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001220" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001230" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001240" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001250" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001260" + Графа));
		КонецЕсли;
		
		// Строка 1600.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001600" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001600" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001100" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001200" + Графа));
		КонецЕсли;
		
		// Пассив
		// Строка 1300.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001300" + Графа], ОбластьИмя) > 0 Тогда
			Строка1340 = 0;
			Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
				Строка1340 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001001340" + Графа);
			КонецЕсли;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001300" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001310" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001320" + Графа)
				+ Строка1340
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001350" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001360" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001370" + Графа));
			
		КонецЕсли;
		
		// Строка 1400.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001400" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001400" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001410" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001420" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001430" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001450" + Графа));
		КонецЕсли;
		
		// Строка 1500.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001500" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001500" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001510" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001520" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001530" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001540" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001550" + Графа));
		КонецЕсли;
		
		// Строка 1700.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001001700" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001001700" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанных, "П0001001300" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001400" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанных, "П0001001500" + Графа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОФР(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ФормаОтчета");
	
	ВключенныеДопСтроки = Форма.СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД;
	
	Графы = СтрРазделить("04,05", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002100" + Графа], ОбластьИмя) > 0 Тогда
			Строка2110 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002110" + Графа);
			Строка2120 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002120" + Графа);
			
			РасчетСтроки2100 = Строка2110 + Строка2120;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002100" + Графа, РасчетСтроки2100);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002200" + Графа], ОбластьИмя) > 0 Тогда
			Строка2100 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002100" + Графа);
			Строка2210 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002210" + Графа);
			Строка2220 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002220" + Графа);
			
			РасчетСтроки2200 = Строка2100 + Строка2210 + Строка2220;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002200" + Графа, РасчетСтроки2200);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002300" + Графа], ОбластьИмя) > 0 Тогда
			Строка2200 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002200" + Графа);
			Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002310" + Графа);
			Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002320" + Графа);
			Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002330" + Графа);
			Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002340" + Графа);
			Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002350" + Графа);
			
			РасчетСтроки2300 = Строка2200 + Строка2310 + Строка2320 + Строка2330 + Строка2340 + Строка2350;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002300" + Графа, РасчетСтроки2300);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002400" + Графа], ОбластьИмя) > 0 Тогда
			Строка2300 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002300" + Графа);
			Строка2410 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002410" + Графа);
			Строка2430 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002430" + Графа);
			Строка2450 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002450" + Графа);
			Строка2460 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002460" + Графа);
			
			РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2430 + Строка2450 + Строка2460;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002400" + Графа, РасчетСтроки2400);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001002500" + Графа], ОбластьИмя) > 0 Тогда
			Строка2400 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002400" + Графа);
			Строка2510 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002510" + Графа);
			Строка2520 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002520" + Графа);
			
			РасчетСтроки2500 = Строка2400 + Строка2510 + Строка2520;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001002500" + Графа, РасчетСтроки2500);
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
			// Строка 21001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001021001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки21001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
					Строка21101 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21101") <> Неопределено Тогда
						Строка21101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021101" + Графа);
					КонецЕсли;
					
					Строка21201 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21201") <> Неопределено Тогда
						Строка21201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021201" + Графа);
					КонецЕсли;
					
					РасчетСтроки21001 = Строка21101 + Строка21201;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001021001" + Графа, РасчетСтроки21001);
				
			КонецЕсли;
			
			// Строка 21002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001021002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки21002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
					Строка21102 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21102") <> Неопределено Тогда
						Строка21102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021102" + Графа);
					КонецЕсли;
					
					Строка21202 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21202") <> Неопределено Тогда
						Строка21202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021202" + Графа);
					КонецЕсли;
					
					РасчетСтроки21002 = Строка21102 + Строка21202;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001021002" + Графа, РасчетСтроки21002);
				
			КонецЕсли;
			
			// Строка 22001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001022001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки22001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
					Строка21001 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
						Строка21001 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021001" + Графа);
					КонецЕсли;
					
					Строка22101 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22101") <> Неопределено Тогда
						Строка22101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022101" + Графа);
					КонецЕсли;
					
					Строка22201 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22201") <> Неопределено Тогда
						Строка22201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022201" + Графа);
					КонецЕсли;
					
					РасчетСтроки22001 = Строка21001 + Строка22101 + Строка22201;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001022001" + Графа, РасчетСтроки22001);
				
			КонецЕсли;
			
			// Строка 22002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001022002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки22002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
					Строка21002 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
						Строка21002 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001021002" + Графа);
					КонецЕсли;
					
					Строка22102 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22102") <> Неопределено Тогда
						Строка22102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022102" + Графа);
					КонецЕсли;
					
					Строка22202 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22202") <> Неопределено Тогда
						Строка22202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022202" + Графа);
					КонецЕсли;
					
					РасчетСтроки22002 = Строка21002 + Строка22102 + Строка22202;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001022002" + Графа, РасчетСтроки22002);
				
			КонецЕсли;
			
			// Строка 23001.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001023001" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки23001 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока23001") <> Неопределено Тогда
					Строка22001 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
						Строка22001 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022001" + Графа);
					КонецЕсли;
					
					Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002310" + Графа);
					Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002320" + Графа);
					Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002330" + Графа);
					Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002340" + Графа);
					Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001002350" + Графа);
					
					РасчетСтроки23001 = Строка22001 + Строка2310 + Строка2320 + Строка2340 + Строка2330 + Строка2350;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001023001" + Графа, РасчетСтроки23001);
				
			КонецЕсли;
			
			// Строка 23002.
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001023002" + Графа], ОбластьИмя) > 0 Тогда
				РасчетСтроки23002 = 0;
				Если ВключенныеДопСтроки.Найти("ДопСтрока23002") <> Неопределено Тогда
					Строка22002 = 0;
					Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
						Строка22002 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001022002" + Графа);
					КонецЕсли;
					
					РасчетСтроки23002 = Строка22002;
					
				КонецЕсли;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001023002" + Графа, РасчетСтроки23002);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК(Форма, ОбластьИмя)
	
	Расчет_ОИК_Таблица1(Форма, ОбластьИмя);
	Расчет_ОИК_Таблица2(Форма, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица1(Форма, ОбластьИмя)
	
	Перем Индекс, ИндексСтр;
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОИК");
	
	НомПозиции = СтрНайти(ОбластьИмя, "_");
	
	Если ЗначениеЗаполнено(ОбластьИмя) Тогда
		ИндексВИмениОбласти = "_" + СтрокаЧГ0(Сред(ОбластьИмя, НомПозиции + 1));
	Иначе
		ИндексВИмениОбласти = "_" + СтрокаЧГ0(1);
	КонецЕсли;
	
	Если НомПозиции > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
		П000100310003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310003");
		П000100310004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310004");
		П000100310005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310005");
		П000100310006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310006");
		П000100310007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100310007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100310008",
			П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
		П000100321107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321108",
			П000100321107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
		П000100321205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321205");
		П000100321207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321208",
			П000100321205 + П000100321207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
		П000100321305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321305");
		П000100321307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321308",
			П000100321305 + П000100321307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
		П000100321403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321403");
		П000100321404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321404");
		П000100321405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321405");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321408",
			П000100321403 + П000100321404 + П000100321405);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
		П000100321603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321603");
		П000100321604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321604");
		П000100321605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321605");
		П000100321606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321606");
		П000100321607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321608",
			П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
		
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			
			П100100321003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321003" + ИндексВИмениОбласти);
			П100100321004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321004" + ИндексВИмениОбласти);
			П100100321005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321005" + ИндексВИмениОбласти);
			П100100321006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321006" + ИндексВИмениОбласти);
			П100100321007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100321008" + ИндексВИмениОбласти,
				П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100321008_" + ИндексСтр) Цикл
				П100100321003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321003_" + ИндексСтр);
				П100100321004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321004_" + ИндексСтр);
				П100100321005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321005_" + ИндексСтр);
				П100100321006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321006_" + ИндексСтр);
				П100100321007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100321007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100321008_" + ИндексСтр,
					П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
		П000100321403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321403");
		П000100321503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321503");
		П000100321603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321003",
			П000100321403 + П000100321503 + П000100321603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
		
		П000100321404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321404");
		П000100321504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321504");
		П000100321604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321004",
			П000100321404 + П000100321504 + П000100321604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
		П000100321205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321205");
		П000100321305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321305");
		П000100321405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321405");
		П000100321505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321505");
		П000100321605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321005",
			П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
		П000100321606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321006",
			П000100321606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
		П000100321107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321107");
		П000100321207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321207");
		П000100321307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321307");
		П000100321507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321507");
		П000100321607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321007",
			П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
		П000100321108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321108");
		П000100321208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321208");
		П000100321308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321308");
		П000100321408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321408");
		П000100321608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100321608");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100321008",
			П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100321008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
		П000100322107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322108",
			П000100322107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
		П000100322205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322205");
		П000100322207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322208",
			П000100322205 + П000100322207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
		П000100322305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322305");
		П000100322307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322308",
			П000100322305 + П000100322307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
		П000100322403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322403");
		П000100322404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322404");
		П000100322405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322405");
		П000100322407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322407");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322408",
			П000100322403 + П000100322404 + П000100322405 + П000100322407);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
		П000100322503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322503");
		П000100322504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322504");
		П000100322505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322505");
		П000100322507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322507");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322508",
			П000100322503 + П000100322504 + П000100322505 + П000100322507);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
		П000100322603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322603");
		П000100322604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322604");
		П000100322605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322605");
		П000100322606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322606");
		П000100322607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322608",
			П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
		П000100322707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322708",
			П000100322707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
		П000100322003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322003");
		П000100322004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322004");
		П000100322005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322005");
		П000100322006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322006");
		П000100322007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322008",
			П000100322003 + П000100322004 + П000100322005 + П000100322006 + П000100322007);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
		П000100324006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100324006");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100324007",
			-П000100324006);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
		П000100322403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322403");
		П000100322503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322503");
		П000100322603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322003",
			П000100322403 + П000100322503 + П000100322603);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
		П000100322404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322404");
		П000100322504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322504");
		П000100322604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322004",
			П000100322404 + П000100322504 + П000100322604);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
		П000100322205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322205");
		П000100322305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322305");
		П000100322405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322405");
		П000100322505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322505");
		П000100322605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322005",
			П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
		П000100322606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322006",
			П000100322606);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
		П000100322107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322107");
		П000100322207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322207");
		П000100322307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322307");
		П000100322407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322407");
		П000100322507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322507");
		П000100322607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322607");
		П000100322707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322007",
			П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
		П000100322108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322108");
		П000100322208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322208");
		П000100322308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322308");
		П000100322408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322408");
		П000100322508 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322508");
		П000100322608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322608");
		П000100322708 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100322708");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100322008",
			П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
		П000100320003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320003");
		П000100320004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320004");
		П000100320005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320005");
		П000100320006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320006");
		П000100320007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100320007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100320008",
			П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
		П000100331107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331108",
			П000100331107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
		П000100331205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331205");
		П000100331207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331208",
			П000100331205 + П000100331207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
		П000100331305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331305");
		П000100331307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331308",
			П000100331305 + П000100331307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
		П000100331403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331403");
		П000100331404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331404");
		П000100331405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331405");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331408",
			П000100331403 + П000100331404 + П000100331405);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
		П000100331603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331603");
		П000100331604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331604");
		П000100331605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331605");
		П000100331606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331606");
		П000100331607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331608",
			П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			П100100331003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331003" + ИндексВИмениОбласти);
			П100100331004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331004" + ИндексВИмениОбласти);
			П100100331005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331005" + ИндексВИмениОбласти);
			П100100331006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331006" + ИндексВИмениОбласти);
			П100100331007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331007" + ИндексВИмениОбласти);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100331008" + ИндексВИмениОбласти,
				П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
			
		Иначе
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			
			Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100331008_" + ИндексСтр) Цикл
				
				П100100331003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331003_" + ИндексСтр);
				П100100331004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331004_" + ИндексСтр);
				П100100331005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331005_" + ИндексСтр);
				П100100331006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331006_" + ИндексСтр);
				П100100331007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100331007_" + ИндексСтр);
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100331008_" + ИндексСтр,
					П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
				
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
		П000100331403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331403");
		П000100331503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331503");
		П000100331603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331003",
			П000100331403 + П000100331503 + П000100331603
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331003"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
		П000100331404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331404");
		П000100331504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331504");
		П000100331604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331004",
			П000100331404 + П000100331504 + П000100331604
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331004"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
		П000100331205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331205");
		П000100331305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331305");
		П000100331405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331405");
		П000100331505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331505");
		П000100331605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331005",
			П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331005"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
		
		П000100331606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331006",
			П000100331606
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331006"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
		П000100331107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331107");
		П000100331207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331207");
		П000100331307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331307");
		П000100331507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331507");
		П000100331607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331007",
			П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331007"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
		П000100331108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331108");
		П000100331208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331208");
		П000100331308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331308");
		П000100331408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331408");
		П000100331608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100331608");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100331008",
			П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608
			+ ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П100100331008"));
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
		П000100332107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332107");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332108",
			П000100332107);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
		П000100332205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332205");
		П000100332207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332207");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332208",
			П000100332205 + П000100332207);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
		П000100332305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332305");
		П000100332307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332307");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332308",
			П000100332305 + П000100332307);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
		П000100332403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332403");
		П000100332404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332404");
		П000100332405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332405");
		П000100332407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332407");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332408",
			П000100332403 + П000100332404 + П000100332405 + П000100332407);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
		П000100332503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332503");
		П000100332504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332504");
		П000100332505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332505");
		П000100332507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332507");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332508",
			П000100332503 + П000100332504 + П000100332505 + П000100332507);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
		П000100332603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332603");
		П000100332604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332604");
		П000100332605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332605");
		П000100332606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332606");
		П000100332607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332607");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332608",
			П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
		П000100332707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332708",
			П000100332707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
		П000100332403 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332403");
		П000100332503 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332503");
		П000100332603 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332603");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332003",
			П000100332403 + П000100332503 + П000100332603);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
		П000100332404 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332404");
		П000100332504 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332504");
		П000100332604 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332604");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332004",
			П000100332404 + П000100332504 + П000100332604);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
		П000100332205 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332205");
		П000100332305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332305");
		П000100332405 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332405");
		П000100332505 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332505");
		П000100332605 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332605");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332005",
			П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
		П000100332606 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332606");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332006",
			П000100332606);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
		П000100332107 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332107");
		П000100332207 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332207");
		П000100332307 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332307");
		П000100332407 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332407");
		П000100332507 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332507");
		П000100332607 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332607");
		П000100332707 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332707");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332007",
			П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
		П000100332108 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332108");
		П000100332208 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332208");
		П000100332308 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332308");
		П000100332408 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332408");
		П000100332508 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332508");
		П000100332608 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332608");
		П000100332708 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100332708");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100332008",
			П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
		П000100334006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100334006");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100334007",
			-П000100334006);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
		П000100330003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330003");
		П000100330004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330004");
		П000100330005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330005");
		П000100330006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330006");
		П000100330007 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100330007");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100330008",
			П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица2(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОИК");
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
		П000100340106 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340106");
		П000100340103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340103");
		П000100340104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340104");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100340105",
			П000100340106 - П000100340103 - П000100340104);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
		П000100341103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100341104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100341105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341106",
			П000100341103 + П000100341104 + П000100341105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
		П000100342103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		П000100342104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		П000100342105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342106",
			П000100342103 + П000100342104 + П000100342105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
		П000100340103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340103");
		П000100341103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100342103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350103",
			П000100340103 + П000100341103 + П000100342103);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
		П000100340104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340104");
		П000100341104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100342104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350104",
			П000100340104 + П000100341104 + П000100342104);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
		П000100340105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340105");
		П000100341105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		П000100342105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350105",
			П000100340105 + П000100341105 + П000100342105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
		П000100350103 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350103");
		П000100350104 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350104");
		П000100350105 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350105");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350106",
			П000100350103 + П000100350104 + П000100350105);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100340006_1, ОбластьИмя) > 0 Тогда
		П100100340003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340003_1");
		П100100340004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340004_1");
		П100100340005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100340006_1",
			П100100340003_1 + П100100340004_1 + П100100340005_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100341006_1, ОбластьИмя) > 0 Тогда
		П100100341003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341003_1");
		П100100341004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341004_1");
		П100100341005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100341006_1",
			П100100341003_1 + П100100341004_1 + П100100341005_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100342006_1, ОбластьИмя) > 0 Тогда
		П100100342003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342003_1");
		П100100342004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342004_1");
		П100100342005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100342006_1",
			П100100342003_1 + П100100342004_1 + П100100342005_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350003_1, ОбластьИмя) > 0 Тогда
		П100100340003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340003_1");
		П100100341003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341003_1");
		П100100342003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342003_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100350003_1",
			П100100340003_1 + П100100341003_1 + П100100342003_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350004_1, ОбластьИмя) > 0 Тогда
		П100100340004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340004_1");
		П100100341004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341004_1");
		П100100342004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342004_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100350004_1",
			П100100340004_1 + П100100341004_1 + П100100342004_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350005_1, ОбластьИмя) > 0 Тогда
		П100100340005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100340005_1");
		П100100341005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341005_1");
		П100100342005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100350005_1",
			П100100340005_1 + П100100341005_1 + П100100342005_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100350006_1, ОбластьИмя) > 0 Тогда
		П100100350003_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100350003_1");
		П100100350004_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100350004_1");
		П100100350005_1 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100350005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100350006_1",
			П100100350003_1 + П100100350004_1 + П100100350005_1);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341103");
		П000100341003 = П000100341003 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341003_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341003",
			П000100341003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341104");
		П000100341004 = П000100341004 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341004_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341004",
			П000100341004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341105");
		П000100341005 = П000100341005 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100341005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341005",
			П000100341005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342103");
		П000100342003 = П000100342003 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342003_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342003",
			П000100342003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342104");
		П000100342004 = П000100342004 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342004_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342004",
			П000100342004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342105");
		П000100342005 = П000100342005 + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100342005_1");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342005",
			П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
		П000100340006 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340006");
		П000100340003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340003");
		П000100340004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340004");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100340005",
			П000100340006 - П000100340003 - П000100340004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341003");
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341004");
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100341006",
			П000100341003 + П000100341004 + П000100341005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342003");
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342004");
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100342006",
			П000100342003 + П000100342004 + П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
		П000100340003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340003");
		П000100341003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341003");
		П000100342003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342003");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350003",
			П000100340003 + П000100341003 + П000100342003);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
		П000100340004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340004");
		П000100341004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341004");
		П000100342004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342004");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350004",
			П000100340004 + П000100341004 + П000100342004);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
		П000100340005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100340005");
		П000100341005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100341005");
		П000100342005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100342005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350005",
			П000100340005 + П000100341005 + П000100342005);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
		П000100350003 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350003");
		П000100350004 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350004");
		П000100350005 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П000100350005");
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П000100350006",
			П000100350003 + П000100350004 + П000100350005);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОИК_Таблица3(Форма, ОбластьИмя)
	
	Если НЕ Форма.СтруктураОтчета.РасчетАктивов.ИмяМакета = "РасчетАктивов_2014Кв4" Тогда
		Возврат;
	КонецЕсли;
	
	РазмещениеДанныхРасчетАктивов = МестоРазмещенияДанных(Форма, "РасчетАктивов");
	РазмещениеДанныхОИК = МестоРазмещенияДанных(Форма, "ОИК");
	
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360003",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300004"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360004",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхОИК, "П000100360005",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000110300006"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОДДС(Форма, ОбластьИмя)
	
	Инициатор = Лев(ОбластьИмя, 13);
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОДДС");
	
	Графы = СтрРазделить("03,04", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004110" + Графа], Инициатор) > 0 Тогда
			Строка4111 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004111" + Графа);
			Строка4112 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004112" + Графа);
			Строка4113 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004113" + Графа);
			Строка4119 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004119" + Графа);
			
			ИтогМСЧ4110 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004110" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004110" + Графа,
				Строка4111 + Строка4112 + Строка4113 + ИтогМСЧ4110 + Строка4119);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004120" + Графа], Инициатор) > 0 Тогда
			Строка4121 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004121" + Графа);
			Строка4122 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004122" + Графа);
			Строка4123 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004123" + Графа);
			Строка4124 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004124" + Графа);
			Строка4129 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004129" + Графа);
			
			ИтогМСЧ4120 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004120" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004120" + Графа,
				Строка4121 + Строка4122 + Строка4123 + Строка4124 + ИтогМСЧ4120 + Строка4129);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004100" + Графа], Инициатор) > 0 Тогда
			Строка4110 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004110" + Графа);
			Строка4120 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004120" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004100" + Графа,
				Строка4110 + Строка4120);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004210" + Графа], Инициатор) > 0 Тогда
			
			Строка4211 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004211" + Графа);
			Строка4212 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004212" + Графа);
			Строка4213 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004213" + Графа);
			Строка4214 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004214" + Графа);
			Строка4219 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004219" + Графа);
			
			ИтогМСЧ4210 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004210" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004210" + Графа,
				Строка4211 + Строка4212 + Строка4213 + Строка4214 + ИтогМСЧ4210 + Строка4219);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004220" + Графа], Инициатор) > 0 Тогда
			Строка4221 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004221" + Графа);
			Строка4222 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004222" + Графа);
			Строка4223 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004223" + Графа);
			Строка4224 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004224" + Графа);
			Строка4229 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004229" + Графа);
			
			ИтогМСЧ4220 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004220" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004220" + Графа,
				Строка4221 + Строка4222 + Строка4223 + Строка4224 + ИтогМСЧ4220 + Строка4229);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004200" + Графа], Инициатор) > 0 Тогда
			Строка4210 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004210" + Графа);
			Строка4220 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004220" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004200" + Графа,
				Строка4210 + Строка4220);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004310" + Графа], Инициатор) > 0 Тогда
			Строка4311 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004311" + Графа);
			Строка4312 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004312" + Графа);
			Строка4313 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004313" + Графа);
			Строка4314 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004314" + Графа);
			Строка4319 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004319" + Графа);
			
			ИтогМСЧ4310 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004310" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004310" + Графа,
				Строка4311 + Строка4312 + Строка4313 + Строка4314 + ИтогМСЧ4310 + Строка4319);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004320" + Графа], Инициатор) > 0 Тогда
			Строка4321 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004321" + Графа);
			Строка4322 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004322" + Графа);
			Строка4323 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004323" + Графа);
			Строка4329 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004329" + Графа);
			
			ИтогМСЧ4320 = ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, "П1001004320" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004320" + Графа,
				Строка4321 + Строка4322 + Строка4323 + ИтогМСЧ4320 + Строка4329);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004300" + Графа], Инициатор) > 0 Тогда
			Строка4310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004310" + Графа);
			Строка4320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004320" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004300" + Графа,
				Строка4310 + Строка4320);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004400" + Графа], Инициатор) > 0 Тогда
			Строка4100 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004100" + Графа);
			Строка4200 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004200" + Графа);
			Строка4300 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004300" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004400" + Графа,
				Строка4100 + Строка4200 + Строка4300);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Инициатор)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001004500" + Графа], Инициатор) > 0 Тогда
			Строка4400 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004400" + Графа);
			Строка4450 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004450" + Графа);
			Строка4490 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001004490" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001004500" + Графа,
				Строка4400 + Строка4450 + Строка4490);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_ОЦИПС(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "ОЦИПС");
	
	Графы = СтрРазделить("04,05", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006200" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6210 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006210" + Графа);
			Строка6215 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006215" + Графа);
			Строка6220 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006220" + Графа);
			Строка6230 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006230" + Графа);
			Строка6240 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006240" + Графа);
			Строка6250 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006250" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006200" + Графа,
				Строка6210 + Строка6215 + Строка6220 + Строка6230 + Строка6240 + Строка6250);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006310" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6311 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006311" + Графа);
			Строка6312 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006312" + Графа);
			Строка6313 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006313" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006310" + Графа,
				Строка6311 + Строка6312 + Строка6313);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006320" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6321 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006321" + Графа);
			Строка6322 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006322" + Графа);
			Строка6323 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006323" + Графа);
			Строка6324 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006324" + Графа);
			Строка6325 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006325" + Графа);
			Строка6326 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006326" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006320" + Графа,
				Строка6321 + Строка6322 + Строка6323 + Строка6324 + Строка6325 + Строка6326);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006300" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6310 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006310" + Графа);
			Строка6320 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006320" + Графа);
			Строка6330 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006330" + Графа);
			Строка6350 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006350" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006300" + Графа,
				Строка6310 + Строка6320 + Строка6330 + Строка6350);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001006400" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка6100 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006100" + Графа);
			Строка6200 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006200" + Графа);
			Строка6300 = ПоказательОтчета(Форма, РазмещениеДанных, "П0001006300" + Графа);
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001006400" + Графа,
				Строка6100 + Строка6200 + Строка6300);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_РасчетАктивов(Форма, ОбластьИмя)
	
	Если Форма.СтруктураОтчета.РасчетАктивов.ИмяМакета = "РасчетАктивов_2014Кв4" Тогда
		Расчет_РасчетАктивов_2014Кв4(Форма, ОбластьИмя);
	Иначе
		Расчет_РасчетАктивов_2011Кв4(Форма, ОбластьИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_РасчетАктивов_2011Кв4(Форма, ОбластьИмя)
	
	РазмещениеДанныхБаланс = МестоРазмещенияДанных(Форма, "Баланс");
	РазмещениеДанныхРасчетАктивов = МестоРазмещенияДанных(Форма, "РасчетАктивов");
	
	// Строка 1.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000103, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000103",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100111005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000104, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000104",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100111004"));
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
		// Строка 2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000203",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100115005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000204",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100115004"));
		КонецЕсли;
		
		// Строка 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000303",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100119005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000304",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100119004"));
		КонецЕсли;
		
		// Строка 4.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000403",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100116005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000404",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100116004"));
		КонецЕсли;
		
		// Строка 5.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000503",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100117005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100124005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000504",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100117004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100124004"));
		КонецЕсли;
		
		// Строка 6.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000603",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100112005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100113005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100114005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100118005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000604",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100112004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100113004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100114004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100118004"));
		КонецЕсли;
		
	Иначе
		// Строка 2.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000203",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100113005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000204",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100113004"));
		КонецЕсли;
		
		// Строка 3.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000303",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100117005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000304",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100117004"));
		КонецЕсли;
		
		// Строка 4.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000403",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100114005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000404",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100114004"));
		КонецЕсли;
		
		// Строка 5.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000503",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100115005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100124005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000504",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100115004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100124004"));
		КонецЕсли;
		
		// Строка 6.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000603",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100112005")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100116005"));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000604",
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100112004")
				+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100116004"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Строка 7.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000703, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000703",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100121005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000704, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000704",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100121004"));
	КонецЕсли;
	
	// Строка 8.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000803, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000803",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100122005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000804, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000804",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100122004"));
	КонецЕсли;
	
	// Строка 9.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000903, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000903",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100123005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(
		Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000904, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100000904",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100123004"));
	КонецЕсли;
	
	// Строка 10.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001003, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001003",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100125005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001004, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001004",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100125004"));
	КонецЕсли;
	
	// Строка 11.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001103, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001103",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100126005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001104, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001104",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100126004"));
	КонецЕсли;
	
	// Строка 12.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001203, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001203",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000103")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000203")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000303")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000403")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000503")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000603")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000703")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000803")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000903")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001003")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001103"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001204, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001204", 
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000104")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000204")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000304")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000404")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000504")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000604")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000704")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000804")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100000904")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001004")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001104"));
	КонецЕсли;
	
	// Строка 13.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001303, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001303",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100141005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001304, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001304",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100141004"));
	КонецЕсли;
	
	// Строка 14.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001403, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001403",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100142005")
			+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100145005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001404, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001404",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100142004")
			+ ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100145004"));
	КонецЕсли;
	
	// Строка 15.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001503, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001503",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100151005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001504, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001504",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100151004"));
	КонецЕсли;
	
	// Строка 16.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001603, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001603",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100152005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001604, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001604",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100152004"));
	КонецЕсли;
	
	// Строка 17.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001703, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001703",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000101520705"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001704, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001704",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000101520704"));
	КонецЕсли;
	
	// Строка 18.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001803, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001803",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100154005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001804, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001804",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100154004"));
	КонецЕсли;
	
	// Строка 19.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001903, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001903",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100155005"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001904, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100001904",
			ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100155004"));
	КонецЕсли;
	
	// Строка 20.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002003, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100002003",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001303")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001403")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001503")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001603")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001803")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001903"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя)
	 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002004, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100002004",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001304")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001404")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001504")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001604")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001804")
			+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001904"));
	КонецЕсли;
	
	// Строка 21.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
		Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002103, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100002103",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001203")
			- ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100002003"));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
		Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002104, ОбластьИмя) > 0 Тогда
		УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000100002104",
			ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100001204")
			- ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П000100002004"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_РасчетАктивов_2014Кв4(Форма, ОбластьИмя)
	
	РазмещениеДанныхБаланс = МестоРазмещенияДанных(Форма, "Баланс");
	РазмещениеДанныхРасчетАктивов = МестоРазмещенияДанных(Форма, "РасчетАктивов");
	
	Графы = СтрРазделить("04,05,06", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		// Активы.
		СтрокиАктивов = СтрРазделить("1110,1120,1130,1140,1150,1160,1170,1180,1190,
			|1210,1220,1240,1250,1260", ",", Ложь);
		
		Для Каждого КодСтроки ИЗ СтрокиАктивов Цикл
			КодСтроки = СокрЛП(КодСтроки);
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000110" + КодСтроки + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000110" + КодСтроки + Графа,
					ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100" + КодСтроки + Графа));
			КонецЕсли;
		КонецЦикла;
		
		// Перенос значений строки 1230 с учетом исключения счета 75.01.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001101230" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001101230" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П0001001230" + Графа)
				- Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа" + Графа]);
		КонецЕсли;
		
		// ИТОГО активы.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001101000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001101000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101110" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101120" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101130" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101140" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101150" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101160" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101170" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101180" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101190" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101210" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101220" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101230" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101240" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101250" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101260" + Графа));
		КонецЕсли;
		
		// Пассивы.
		СтрокиПассивов = СтрРазделить("1410,1420,1430,1450,
			|1510,1520,1540,1550", ",", Ложь);
		
		Для Каждого КодСтроки ИЗ СтрокиПассивов Цикл
			КодСтроки = СокрЛП(КодСтроки);
			Если НЕ ЗначениеЗаполнено(ОбластьИмя)
			 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П000110" + КодСтроки + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П000110" + КодСтроки + Графа,
					ПоказательОтчета(Форма, РазмещениеДанныхБаланс, "П000100" + КодСтроки + Графа));
			КонецЕсли;
		КонецЦикла;
		
		// ИТОГО пассивы.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001102000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001102000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101410" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101420" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101430" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101450" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101510" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101520" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101540" + Графа)
				+ ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101550" + Графа));
		КонецЕсли;
		
		// Стоимость чистых активов.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001103000" + Графа], ОбластьИмя) > 0 Тогда
			УстановитьЗначениеПоказателя(РазмещениеДанныхРасчетАктивов, "П0001103000" + Графа,
				ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001101000" + Графа)
				- ПоказательОтчета(Форма, РазмещениеДанныхРасчетАктивов, "П0001102000" + Графа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения3(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения3");
	
	Графы = СтрРазделить("04,05,06,07,08,09,10,11,12", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005300" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5301 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005301" + Графа);
			Строка5305 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005305" + Графа);
			
			РасчетСтроки5300 = Строка5301 + Строка5305;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005300" + Графа, РасчетСтроки5300);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005310" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5311 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005311" + Графа);
			Строка5315 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005315" + Графа);
			
			РасчетСтроки5310 = Строка5311 + Строка5315;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005310" + Графа, РасчетСтроки5310);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения5(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения5");
	
	Графы = СтрРазделить("04,05,06,07,08,09,10,12,13", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005500" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5501 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005501" + Графа);
			Строка5510 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005511" + Графа);
			
			РасчетСтроки5500 = Строка5501 + Строка5510;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005500" + Графа, РасчетСтроки5500);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя)
		 ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005520" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5521 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005521" + Графа);
			Строка5530 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005531" + Графа);
			
			РасчетСтроки5520 = Строка5521 + Строка5530;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005520" + Графа, РасчетСтроки5520);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Графы = СтрРазделить("04,05,06,07,08,10", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005550" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5551 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005551" + Графа);
			Строка5560 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005560" + Графа);
			
			РасчетСтроки5550 = Строка5551 + Строка5560;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005550" + Графа, РасчетСтроки5550);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005570" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5571 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005571" + Графа);
			Строка5580 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005580" + Графа);
			
			РасчетСтроки5570 = Строка5571 + Строка5580;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005570" + Графа, РасчетСтроки5570);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения6(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения6");
	
	Для Графа = 3 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010056600" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5610 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056100" + Графа);
			Строка5620 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056200" + Графа);
			Строка5630 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056300" + Графа);
			Строка5640 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056400" + Графа);
			Строка5650 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056500" + Графа);
			
			РасчетСтроки5660 = Строка5610 + Строка5620 + Строка5630 + Строка5640 + Строка5650;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010056600" + Графа, РасчетСтроки5660);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010056000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5660 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056600" + Графа);
			Строка5665 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056650" + Графа);
			Строка5670 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056700" + Графа);
			Строка5680 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010056800" + Графа);
			
			РасчетСтроки5600 = Строка5660 + Строка5665 + Строка5670 + Строка5680;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010056000" + Графа, РасчетСтроки5600);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения7(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения7");
	
	// Многострочная часть.
	Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
		КонечныйНомер = 1;
		Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, "П100100570001_" + СтрокаЧГ0(КонечныйНомер + 1)) Цикл
			КонечныйНомер = КонечныйНомер + 1;
		КонецЦикла;
		
		Для Инд = 1 По КонечныйНомер Цикл
			Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, "П100100570003_" + СтрокаЧГ0(Инд));
		КонецЦикла;
		
	Иначе
		Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения7_СтрокаМСЧ(Форма, РазмещениеДанных, ИмяОбластиМСЧ)
	
	НомПозиции = СтрНайти(ИмяОбластиМСЧ, "_");
	Постфикс = "_" + СтрокаЧГ0(Сред(ИмяОбластиМСЧ, НомПозиции + 1));
	ОбластьИмя = Лев(ИмяОбластиМСЧ, НомПозиции - 1);
	
	Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100570007, ОбластьИмя) > 0 Тогда
		Строка5700Гр3 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570003" + Постфикс);
		Строка5700Гр4 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570004" + Постфикс);
		Строка5700Гр5 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570005" + Постфикс);
		Строка5700Гр6 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П100100570006" + Постфикс);
		
		УстановитьЗначениеПоказателя(РазмещениеДанных, "П100100570007" + Постфикс,
			Строка5700Гр3 + Строка5700Гр4 + Строка5700Гр5 + Строка5700Гр6);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет_Пояснения9(Форма, ОбластьИмя)
	
	РазмещениеДанных = МестоРазмещенияДанных(Форма, "Пояснения9");
	
	Графы = СтрРазделить("03,04", ",", Ложь);
	
	Для Каждого Графа Из Графы Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П0001005900" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5901 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005901" + Графа);
			Строка5905 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П0001005905" + Графа);
			
			РасчетСтроки5900 = Строка5901 + Строка5905;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П0001005900" + Графа, РасчетСтроки5900);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МестоРазмещенияДанных(Форма, ИмяРаздела)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма["СтруктураДанных" + ИмяРаздела];
	КонецЕсли;
	
	Возврат РазмещениеДанных;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИтогПоГрафеМСЧ(Форма, РазмещениеДанных, ИмяПоказателя)
	
	Перем Индекс, ИндексСтр;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	ИтогПоГрафеМСЧ = 0;
	
	Пока ПоказательОтчетаСуществует(Форма, РазмещениеДанных, ИмяПоказателя + "_" + ИндексСтр) Цикл
		ИтогПоГрафеМСЧ = ИтогПоГрафеМСЧ + ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя + "_" + ИндексСтр);
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
	КонецЦикла;
		
	Возврат ИтогПоГрафеМСЧ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		ЗначениеПоказателя = РазмещениеДанных.Области[ИмяПоказателя].Значение;
	Иначе
		ЗначениеПоказателя = РазмещениеДанных[ИмяПоказателя];
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаСуществует(Форма, РазмещениеДанных, ИмяПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РезультатПроверки = (РазмещениеДанных.Области.Найти(ИмяПоказателя) <> Неопределено);
	Иначе
		РезультатПроверки = РазмещениеДанных.Свойство(ИмяПоказателя);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя);
	
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РазмещениеДанных.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	Иначе
		РазмещениеДанных[ИмяПоказателя] = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеОтчета

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтотОбъект,
		КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок);

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета             = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета         = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                   = Вариант;

	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ВерсияСтруктурыДанных", ВерсияСтруктурыДанных());
	СписокСохранения.Вставить("ВерсияКонфигурации", РегламентированнаяОтчетность.НазваниеПрограммы()
		+ " " + РегламентированнаяОтчетность.ВерсияПрограммы());
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	
	// Флажок разрешения печати без штрихкода.
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СохрСоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				ПолучитьДеревоНастроекСоставаДопСтрок(Элемент.Ключ);
				
				Если Элемент.Ключ = "Баланс" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекБаланс);
				ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекОФР);
				КонецЕсли;
			
			КонецЦикла;
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, СтруктураСоставов);
			
		Иначе	
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		
		КонецЕсли;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СохрСоставДополнительныхСтрок);
	
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда
				
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				
				Для Каждого Колонка Из Колонки Цикл
					
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
					
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					СтрТаблЗнач = ТаблЗнач.Добавить();
					
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе 
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("ОтчетностьВРосстат", ОтчетностьВРосстат);
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки",       ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения",     ИмяФайлаАудиторскогоЗаключения);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаЗаявленияРевизионногоСоюза", ИмяФайлаЗаявленияРевизионногоСоюза);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	СписокСохранения.Вставить("ОборотыСчета75_01", СтруктураРеквизитовФормы.ОборотыСчета75_01);
	
	СписокСохранения.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	
	Если Элементы.ПанельПроверкиАктуальностиДанных.Видимость Тогда
		
		СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	// Запись документа, хранящего данные отчета
	Попытка
		НачатьТранзакцию();
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
		
		СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
		
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки,
			"Пояснительная записка");
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения,
			"Аудиторское заключение");
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей,
			"Заявление союза сельхозпроизводителей");
		
		СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьПечатныеМакетыОтчетов(ДокументСДанными)
	
	ЗаписиРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьНаборЗаписей();
	ЗаписиРегистраСведений.Отбор.РегламентированныйОтчет.Установить(ДокументСДанными);
	ЗаписиРегистраСведений.Прочитать();
	
	УдаляемыеЗаписи = Новый Массив;
	
	Для Каждого ЗаписьРегистраСведений Из ЗаписиРегистраСведений Цикл
		Если СтрНайти(ЗаписьРегистраСведений.ВидДополнительногоФайла, "БланкОтчета.") = 1 Тогда
			УдаляемыеЗаписи.Добавить(ЗаписьРегистраСведений);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЗаписьРегистраСведений Из УдаляемыеЗаписи Цикл
		ЗаписиРегистраСведений.Удалить(ЗаписьРегистраСведений);
	КонецЦикла;
	
	Для Каждого ПечатныйБланк Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		ЗаписьРегистраСведений = ЗаписиРегистраСведений.Добавить();
		ЗаписьРегистраСведений.РегламентированныйОтчет = ДокументСДанными;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = "БланкОтчета." + ПечатныйБланк.Представление;
		
		ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(ПечатныйБланк.Значение[0]));
		ЗаписьРегистраСведений.ИмяФайла = ПечатныйБланк.Представление + ".mxl";
		ЗаписьРегистраСведений.Размер = 1;
		ЗаписьРегистраСведений.ДатаДобавления = ДокументСДанными.Дата;
		
	КонецЦикла;
	
	ЗаписиРегистраСведений.Записать();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла)
	
	Если СтруктураДопФайла.СведенияИзменены = Истина
	 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		Если ЗначениеЗаполнено(СтруктураДопФайла.ХранилищеФайла) Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.ХранилищеФайла));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.Размер;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		СтруктураДопФайла.СведенияИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариантовАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	
	// Обновление сведений об организации в случае копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	УстановитьПризнакиПримененияУСН();
	
	СохраненныеДанные = СохраненныеДанные(СтруктураРеквизитовФормы.мСохраненныйДок);
	ВосстановитьДопРеквизитыФормы(СохраненныеДанные);
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	// Раздел "Бухгалтерский баланс" обязательный и всегда включается в отчет.
	СтрокаРазделаБаланс = ДеревоНастройкиСтраниц.Строки.Найти("Баланс", "ИмяСтраницы");
	Если СтрокаРазделаБаланс <> Неопределено Тогда
		СтрокаРазделаБаланс.ПоказатьСтраницу = 1;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	ВосстановитьВариантыАвтозаполненияПоказателей(СохраненныеДанные);
	
	СохраненныеДанные.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СохраненныеДанные.Свойство("ОтчетностьВРосстат", ОтчетностьВРосстат);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	ВосстановитьСтруктуруМСЧ(СохраненныеДанные);
	ВосстановитьСоставДополнительныхСтрок(СохраненныеДанные);
	
	Если (СохраненныеДанные.Свойство("ВерсияФормы", ВерсияФормы) И ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы)
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "РасчетАктивов");
		
		Если ЭлементВДереве <> Неопределено Тогда
			ЭлементВДереве.Представление = ЗаголовокСтраницыВДеревеРазделовОтчета(
				"РасчетАктивов", СтруктураОтчета.РасчетАктивов.ИмяМакета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ВосстановитьРасшифровкуПоказателей(СохраненныеДанные);
	
	СохраненныеОборотыСчета75_01 = Неопределено;
	Если СохраненныеДанные.Свойство("ОборотыСчета75_01", СохраненныеОборотыСчета75_01) Тогда
		УстановитьОборотыСчета75_01(СохраненныеОборотыСчета75_01);
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если НЕ ПоказателиОтчета.ПолеТабличногоДокументаПояснения1.Свойство("ОргДиректор") Тогда
		ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета);
	КонецЕсли;
	
	ВосстановитьДополнительныеФайлы(СохраненныеДанные);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	ВосстановитьЗначенияПоказателей(ИмяТекРаздела, ПоказателиОтчета);
	
	ЗаполнитьПустыеСтруктурыДанных(Ложь);
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СохраненныеДанные.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	Если ЗначениеЗаполнено(Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок) Тогда
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ПеренумероватьСтрокиРасшифровкиБаланса();
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДопРеквизитыФормы(СохраненныеДанные)
	
	Авторасчет = Неопределено;
	СохраненныеДанные.Свойство("Авторасчет", Авторасчет);
	Если Авторасчет <> Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СохраненныеДанные.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СохраненныеДанные.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	Если СтруктураРеквизитовФормы.мАдресДляВыгрузки = Неопределено Тогда
		АдресОрганизации = АдресОрганизацииПоУмолчанию(СтруктураРеквизитовФормы.Организация);
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = АдресОрганизации.Адрес;
	КонецЕсли;
	
	СохраненныеДанные.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СохраненныеДанные.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СохраненныеДанные.Свойство("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтруктуруМСЧ(СохраненныеДанные)
	
	СохраненнаяСтруктураМногострочныхЧастей = Неопределено;
	СохраненныеДанные.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			ЭлементСтруктуры.Значение.Состав = ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭлементСтруктуры.Значение.Состав);
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента =
				СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
		КонецЦикла;
		
		КонвертироватьСтруктуруМногострочныхЧастей(СохраненнаяСтруктураМногострочныхЧастей);
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьСтруктуруМногострочныхЧастей(СохрСтруктураМногострочныхЧастей)
	
	Для Каждого ЭлемИницСтруктурыМногострочныхЧастей Из СтруктураМногострочныхЧастей Цикл
		Если НЕ СохрСтруктураМногострочныхЧастей.Свойство(ЭлемИницСтруктурыМногострочныхЧастей.Ключ) Тогда
			СохрСтруктураМногострочныхЧастей.Вставить(
				ЭлемИницСтруктурыМногострочныхЧастей.Ключ,
				ЭлемИницСтруктурыМногострочныхЧастей.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСоставДополнительныхСтрок(СохраненныеДанные)
	
	СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СохраненныеДанные.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		// Используются настройки по умолчанию.
	ИначеЕсли Число(СоставДополнительныхСтрок.Версия) > Число (СохраненныйСоставДополнительныхСтрок.Версия) Тогда
		Если СохраненныйСоставДополнительныхСтрок.Модифицированность Тогда
			ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок);
		Иначе
			// Используются настройки по умолчанию новой версии.
		КонецЕсли;
	Иначе
		СоставДополнительныхСтрок.Очистить();
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				СтруктураСоставов = Новый Структура;
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					Если Элемент.Ключ = "Баланс" Тогда
						ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
					ИначеЕсли Элемент.Ключ = "ФормаОтчета" Тогда
						ДеревоНастроекОФР = Элемент.Значение.Скопировать();
						РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
							СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
						ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
					КонецЕсли;
					
					СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
					
				КонецЦикла;
				
				СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
				
			Иначе
				СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок)
	
	// Обновление настроек Бухгалтерского баланса.
	СохраненныйСоставДопСтрокБаланса = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс", СохраненныйСоставДопСтрокБаланса) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопстрокБаланса.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекБаланс.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
		
	КонецЕсли;
	
	// Обновление настроек Отчета о прибылях и убытках.
	СохраненныйСоставДопСтрокОПУ = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета", СохраненныйСоставДопСтрокОПУ) Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокОПУ.Строки Цикл
			ЭтоФиксированныеДопстроки = ПустаяСтрока(СтрокаУровня1.ТипСостава);
			
			Если ЭтоФиксированныеДопстроки Тогда
				Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
					ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
					НайденныеСтроки = ДеревоНастроекОФР.Строки.НайтиСтроки(
						Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденныеСтрокиУровня1 = ДеревоНастроекОФР.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", СтрокаУровня1.ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтрокиУровня1.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтрокиУровня1[0], СтрокаУровня1);
					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
						НоваяПользовательскаяСтрока = НайденныеСтрокиУровня1[0].Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПользовательскаяСтрока, СтрокаУровня2);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
		ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД()
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Очистить();
	
	МассивДопСтрок = ДопСтрокиОФРПриПримененииЕНВД();
	
	Для Каждого ДопСтрока Из МассивДопСтрок Цикл
		Если ВключенВОтчет(ДеревоНастроекОФР, ДопСтрока) Тогда
			СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Добавить(ДопСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьВариантыАвтозаполненияПоказателей(СохраненныеДанные)
	
	ДанныеВариантовАвтоЗаполнения = Неопределено;
	Если СохраненныеДанные.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		Если ДанныеВариантовАвтоЗаполнения <> Неопределено Тогда
			Для Каждого СохраненныеВарианты Из ДанныеВариантовАвтоЗаполнения Цикл
				ИмяРаздела = СохраненныеВарианты.Ключ;
				ВариантыЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения;
				ВосстановитьВариантыАвтозаполненияПоказателейРаздела(ВариантыЗаполнения, СохраненныеВарианты);
				
				Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					// Требуется изменение варианта заполнения для авторасчитываемых показателей.
					Для Каждого Вариант Из ВариантыЗаполнения Цикл
						Если Вариант.ВариантЗаполнения = 4 Тогда
							Вариант.ВариантЗаполнения = 0;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначенияПоказателей(ИмяТекРаздела, ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	ИнициализироватьСтруктуруДанныхРазделов();
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если Раздел.ИмяСтраницы <> "ДополнительныеФайлы" Тогда
			Для Каждого Показатель Из ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы] Цикл
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					Показатель.Ключ, Показатель.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод показателей в текущий раздел на форме.
	Если ИмяТекРаздела <> "ДополнительныеФайлы" Тогда
		ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
		
		// Создание строк многострочных частей.
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			ОбластьПоказателя = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если ОбластьПоказателя <> Неопределено И ОбластьПоказателя.СодержитЗначение = Истина Тогда
				ОбластьПоказателя.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРасшифровкуПоказателей(СохраненныеДанные)
	
	ТаблицаРасшифровки = Неопределено;
	СохраненныеДанные.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто, ЗначениеСубконто",
						Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать( , "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации,
				|НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДополнительныеФайлы(СохраненныеДанные)
	
	СписокДополнительныхФайлов = Неопределено;
	Если СохраненныеДанные.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов)
	   И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки       = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения     = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
		ИмяФайлаЗаявленияРевизионногоСоюза = СписокДополнительныхФайлов.ИмяФайлаЗаявленияРевизионногоСоюза;
	КонецЕсли;
	
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка", ИмяФайлаПояснительнойЗаписки);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение", ИмяФайлаАудиторскогоЗаключения);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлЗаявленияСоюзаСельхозпроизводителей, "Заявление союза сельхозпроизводителей",
		ИмяФайлаЗаявленияРевизионногоСоюза);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла, ИмяДопФайлаПредыдущейВерсии)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			СтруктураДопФайла.Вставить("СведенияИзменены", Ложь);
			РегламентированнаяОтчетность.ПоместитьВКэш(ЗаписьРегистраСведений.СодержимоеФайла.Получить(),
				УникальныйИдентификатор, СтруктураДопФайла.ХранилищеФайла);
			СтруктураДопФайла.Вставить("ИмяФайла",       ЗаписьРегистраСведений.ИмяФайла);
			СтруктураДопФайла.Вставить("Размер",         ЗаписьРегистраСведений.Размер);
			СтруктураДопФайла.Вставить("ДатаДобавления", ЗаписьРегистраСведений.ДатаДобавления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетности

&НаКлиенте
Функция СформироватьНастройкиФормыВыбораПечати()
	
	ЭтоЛиквидационнаяОтчетность = ВидСдачиОтчетности = 2 ИЛИ ВидСдачиОтчетности = 3;
	ЭтоКвартальнаяОтчетность2011 = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2012-01-01'
		И Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0;
	ЭтоГодоваяОтчетность = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-01-01'
		И Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
	
	ПечатьPDF417Разрешена = НЕ СтруктураРеквизитовФормы.ИП
		И (ЭтоКвартальнаяОтчетность2011 ИЛИ ЭтоГодоваяОтчетность ИЛИ ЭтоЛиквидационнаяОтчетность);
	
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ПечатьPDF417Разрешена);
	НастройкиФормыВыбораПечати.Вставить("ВключатьКодыСтрок", Истина);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, "ПоказатьСДвухмернымШтрихкодомPDF417");
			
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			Если Результат.ВключатьКодыСтрок Тогда
				ПечататьИзФормы("ПоказатьБланк");
			Иначе
				ПечататьИзФормы("ПоказатьБланк");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидПечати = ДополнительныеПараметры.ВидПечати;
	
	Печать(ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ТекстСостояния = СтрШаблон(НСтр("ru = '%1. Формируется печатная форма...';
									|en = '%1. Формируется печатная форма...'"), Заголовок);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

// Формирует набор печатных бланков в СтруктураРеквизитовФормы.мПечатныеФормы
//
// Параметры:
//   ВидПечати - Строка - определяет вариант и режим печати.
//
&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
				|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		ЭтоЗакладкаДополнительныхФайлов = (СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы");
		Если ЭтоЗакладкаДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтотОбъект["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
		ЭтотОбъект, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛист(ПараметрыПечати)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Сокрытие областей, не предназначенных для вывода на печать.
	Если ПараметрыПечати.ИмяСтраницы = "Баланс" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФормаОтчета" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОФР();
	ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ОИК" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОИК();
	КонецЕсли;
	
	ВывестиНаПечатьЛистОбщая(ПараметрыПечати);
	
	// Восстанавление отображения скрытых областей.
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
	Если ПараметрыПечати.ИмяСтраницы = "ФормаОтчета" Тогда
		УстановитьВидимостьПолейПоПБУ18();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	Если ПустаяСтрока(СтруктураОтчета.Баланс.ИмяМакета)
	ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс"
	ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО"
	ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2011Кв4"
	ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2011Кв4" Тогда
		СкрытьОбластиПередПечатьюБаланс_2011Кв4(МассивСкрытыхОбластей);
	Иначе
		СкрытьОбластиПередПечатьюБаланс_2012(МассивСкрытыхОбластей);
	КонецЕсли;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Процедура СкрытьОбластиПередПечатьюБаланс_2012(МассивСкрытыхОбластей)
	
	СтрокаОтраженияСчета46    = "1210";
	СтрокаОтраженияСчета96    = "1260";
	СтрокаОтраженияСчета76_АВ = "1260";
	СтрокаОтраженияСчета76_ВА = "1550";
					
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4" Тогда
		СтрокаОтраженияСчета46 = "1260";
	КонецЕсли;
					   
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_2"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета46 = "1230";
		СтрокаОтраженияСчета96 = "1230";
	КонецЕсли;
	
	Если СтруктураОтчета.Баланс.ИмяМакета = "Баланс_2012Кв4_3"
	 ИЛИ СтруктураОтчета.Баланс.ИмяМакета = "БалансНКО_2012Кв4_3" Тогда
		СтрокаОтраженияСчета76_АВ = "1520";
		СтрокаОтраженияСчета76_ВА = "1230";
	КонецЕсли;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = "П1001001110";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1110"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П1001001120";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1120"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001130";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1130"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001140";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1140"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока11501, ДопСтрока11502, ДопСтрока11503, ДопСтрока11504, ДопСтрока11505,
		|ДопСтрока11506, ДопСтрока11507, ДопСтрока11508, ДопСтрока11509");
	МногострочнаяЧасть = "П1001001150";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1150"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11601, ДопСтрока11602, ДопСтрока11603, ДопСтрока11604");
	МногострочнаяЧасть = "П1001001160";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1160"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701");
	МногострочнаяЧасть = "П1001001170";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1170"]);
	КонецЕсли;
	
	// Строка 1180
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001180";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1180"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1180"]);
	КонецЕсли;
	
	// Строка 1190
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11901, ДопСтрока11902, ДопСтрока11903");
	МногострочнаяЧасть = "П1001001190";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1190"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1190"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105,
		|ДопСтрока12106, " + ?(СтрокаОтраженияСчета46 = "1210", "ДопСтрока12107", "") + ", ДопСтрока12108, ДопСтрока12109, ДопСтрока12110,
		|ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П1001001210";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1210"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205,
		|ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П1001001220";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1220"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305,
		|ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310"
		+ ?(СтрокаОтраженияСчета46 = "1230", ", ДопСтрока12311", "")
		+ ?(СтрокаОтраженияСчета96 = "1230", ", ДопСтрока12312", "")
		+ ", ДопСтрока12313");
	МногострочнаяЧасть = "П1001001230";
	
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1230"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405,
		|ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П1001001240";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1240"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505,
		|ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510,
		|ДопСтрока12511, ДопСтрока12512");
	МногострочнаяЧасть = "П1001001250";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1250"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, " + ?(СтрокаОтраженияСчета76_АВ = "1260", "ДопСтрока12605,", "")
		+ "ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610"
		+ ?(СтрокаОтраженияСчета96 = "1260", ", ДопСтрока12610", "")
		+ ?(СтрокаОтраженияСчета46 = "1260", ", ДопСтрока12611", ""));
	МногострочнаяЧасть = "П1001001260";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1260"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001310";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1310"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001320";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1320"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П1001001340";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1340"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1350"]);
	КонецЕсли;
	
	// Строка 1360
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001360";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1360"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001370";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1370"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П1001001410";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1410"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001420";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1420"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1450"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105,
		|ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110,
		|ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П1001001510";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1510"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205,
		|ДопСтрока15206, ДопСтрока15207, ДопСтрока15208, ДопСтрока15209");
	МногострочнаяЧасть = "П1001001520";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1520"]);
	КонецЕсли;
	
	// Строка 1530
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001530";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1530"]);
	КонецЕсли;
	
	// Строка 1540
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001540";
	Если НЕ ТабличныйДокумент.Области.Найти(МногострочнаяЧасть + "01_1") = Неопределено Тогда
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1540"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1540"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001550";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1550"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьОбластиПередПечатьюБаланс_2011Кв4(МассивСкрытыхОбластей)
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = "П0001011199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11199"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П0001011299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11299"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока11301, ДопСтрока11302, ДопСтрока11303, ДопСтрока11304, ДопСтрока11305,
		|ДопСтрока11306, ДопСтрока11307, ДопСтрока11308");
	МногострочнаяЧасть = "П0001011399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11399"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11401, ДопСтрока11402, ДопСтрока11403, ДопСтрока11404");
	МногострочнаяЧасть = "П0001011499";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11499"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501");
	МногострочнаяЧасть = "П0001011599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11599"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001011699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11699"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701, ДопСтрока11702, ДопСтрока11703");
	МногострочнаяЧасть = "П0001011799";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11799"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105,
		|ДопСтрока12106, ДопСтрока12107, ДопСтрока12108, ДопСтрока12109, ДопСтрока12110,
		|ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П0001012199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12199"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205,
		|ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П0001012299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12299"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305,
		|ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310");
	МногострочнаяЧасть = "П0001012399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12399"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405,
		|ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П0001012499";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12499"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505,
		|ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510,
		|ДопСтрока12511");
	МногострочнаяЧасть = "П0001012599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12599"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, ДопСтрока12605,
		|ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610");
	МногострочнаяЧасть = "П0001012699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12699"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13199"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13299"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П0001013499";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13499"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13599"]);
	КонецЕсли;
	
	// Строка 1360
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П0001013699";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13699"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001013799";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13799"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П0001014199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14199"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001014299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14299"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001014599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14599"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105,
		|ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110,
		|ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П0001015199";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15199"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205,
		|ДопСтрока15206, ДопСтрока15207, ДопСтрока15208, ДопСтрока15209");
	МногострочнаяЧасть = "П0001015299";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15299"]);
	КонецЕсли;
	
	// Строка 1530
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
			"ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П0001015399";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15399"]);
	КонецЕсли;
	
	// Строка 1540
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001015499";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1540"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15499"]);
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П0001015599";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15599"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюОФР()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	ДеревоНастройкиСостава = ДеревоНастроекОФР;
	
	Если НЕ ИспользуютсяМакетыЕНВД() Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002100";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002200";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002300";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405,
		|ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410,
		|ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415,
		|ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420,
		|ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424, ДопСтрока23425,
		|ДопСтрока23426");
	МногострочнаяЧасть = "П1001002340";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505,
		|ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510,
		|ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515,
		|ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520,
		|ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525,
		|ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530,
		|ДопСтрока23521, ДопСтрока23532, ДопСтрока23533, ДопСтрока23534");
	МногострочнаяЧасть = "П1001002350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002421";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002430";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602, ДопСтрока24603");
	МногострочнаяЧасть = "П1001002460";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюОИК()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	СкрываемыеДопСтроки = СтрРазделить("ДопСтрока3210,ДопСтрока3240,ДопСтрока3310,ДопСтрока3340", ",");
	
	Для Каждого МногострочнаяЧасть Из СкрываемыеДопСтроки Цикл
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области[МногострочнаяЧасть]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)

	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции

&НаСервере
Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		
		Если НЕ СтруктураМногострочныхЧастей.Свойство(МногострочнаяЧасть) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[МногострочнаяЧасть].Состав;
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаМногострочногоРаздела[0] Цикл
			ОбластьЭлементаМСЧ = ТабличныйДокумент.Области[Колонка.Ключ + "_1"];
			Если ОбластьЭлементаМСЧ.СодержитЗначение И ЗначениеЗаполнено(ОбластьЭлементаМСЧ.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистОбщая(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");
	
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);
	
	КартаСтраницРаздела = КартаЛистовРаздела();
	
	НомЛиста = 0;
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста);
		Для Каждого Эл Из ПечатныеЛисты Цикл
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Эл.Значение, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КартаЛистовРаздела()
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТабличныйДокумент.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа
	Перем Ориентация;         // ориентация страницы
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
			ПечатнаяФорма, ОбластьОграничители, Ложь);
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			ОграничительНаращивания = 69;
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(
					ПечатнаяФорма, ВыводимыеОбласти, Ложь);
				// Некоторые драйверы принтеров некорректно взаимодействуют с проверкой вывода.
				Если ОграничительНаращивания <= 0 Тогда
					флВыводимыеОбластиУмещаютсяНаСтраницу = Ложь;
				КонецЕсли;
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
					ОграничительНаращивания = ОграничительНаращивания - 1;
					
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	КонецЕсли;
	
	ПечатнаяФорма.Область().ЦветФона = Новый Цвет;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаОтчетности

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // обход ошибки в платформе
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
			
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
							|en = 'Отчет ""%1"" не сохранен.'"), ТекстЗаголовка));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".';
					|en = 'Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'"));
			Возврат Ложь;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0"".';
					|en = 'Перед выгрузкой необходимо установить точность ""0"".'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ТаблицаСообщений;
	                   	
	РезультатВыгрузки = ОбъектОтчета(ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
	
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
	
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
	
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
	
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
	
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
		
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиВыгрузки

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.';
														|en = 'Организация не выбрана! Выгрузка невозможна.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УведомлениеОбИзмененияхВФорме

&НаКлиенте
Процедура ОткрытьУведомление(ОткрытьПринудительно = Ложь) Экспорт
	
	ЗначениеНеПоказывать = Формат(СтруктураРеквизитовФормы.КоличествоСтрокИнформационногоМакета, "ЧН=; ЧГ=") + "_НеПоказывать";
	
	СтруктураРеквизитовФормы.СохраненныйВыборПользователя = ЗначениеНеПоказывать;
	
	ПоказатьОписаниеИзменений = ОткрытьПринудительно
	                        ИЛИ СтруктураРеквизитовФормы.СохраненныйВыборПользователя <> ЗначениеНеПоказывать;
	
	Если ПоказатьОписаниеИзменений Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимОткрытия", ?(ОткрытьПринудительно, "Принудительно", "ПоВыбору"));
		ПараметрыФормы.Вставить("ИмяСохраняемогоПараметра", СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		ПараметрыФормы.Вставить("ЗначениеНеПоказывать", ЗначениеНеПоказывать);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УведомлениеОбИзмененияхВФормеОтчета",
			ПараметрыФормы, ЭтотОбъект, СтруктураРеквизитовФормы.ИмяСохраняемогоПараметра);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСоставаДопСтрок

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДеревоНастроек",
		СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроек"
		+ СтруктураРеквизитовФормы.НаимТекущегоРаздела]);
	
	ИмяФормыНастроек = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	                 + "НастройкаРасшифровкиОтдельныхПоказателей";
	ФормаНастроек = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормы);
	
	КонецЗаголовка = "";
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		КонецЗаголовка = "бухгалтерского баланса";
	Иначе
		Если ДатаПодписи >= '2013-01-01' Тогда
			КонецЗаголовка = "отчета о финансовых результатах";
		Иначе
			КонецЗаголовка = "отчета о прибылях и убытках";
		КонецЕсли;
	КонецЕсли;
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей " + КонецЗаголовка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСтрокиЗавершение", ЭтотОбъект);
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтрокиЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ТекстОбластиТаблДок = ТабличныйДокумент.Область().Текст;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки)
	
	Если РезультатНастройки <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			ДеревоНастроекБаланс = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекБаланс"]);
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
			ДеревоНастроекОФР = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
				СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекФормаОтчета"]);
			ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		ПеренумероватьСтрокиРасшифровкиОПУ();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РеквизитыОрганизации

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПереченьСведений = "ИННЮЛ, НаимЮЛПол, ОКПО, ОКОПФ, ОКФС, ФормСобств, ОргПравФорм, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, ПереченьСведений);
	
	Если СтруктураРеквизитовФормы.ИП = Истина Тогда
		НаименованиеОрганизации = СокрЛП(Сведения.ФИО);
	Иначе
		НаименованиеОрганизации = Сведения.НаимЮЛПол;
	КонецЕсли;
	
	РазделыСРеквизитами = РазделыСРеквизитами();
	
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргИНН",         Сведения.ИННЮЛ);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргНазв",        НаименованиеОрганизации);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКПО",     Сведения.ОКПО);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргФорма",       Сведения.ОргПравФорм);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКОПФ",    Сведения.ОКОПФ);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргКодОКФС",     Сведения.ОКФС);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами, "ОргФормаСобств", Сведения.ФормСобств);
	
	ЗаполнитьОбластьВРазделе("РасчетАктивов", "ОргНазв", НаименованиеОрганизации);
	
	ЗаполнитьСведенияОбОКВЭД();
	
	АдресОрганизации = АдресОрганизацииПоУмолчанию(Организация);
	СтруктураРеквизитовФормы.мАдресДляВыгрузки = АдресОрганизации.Адрес;
	ЗаполнитьОбластьВРазделе("Баланс", "ОргПочтАдрес", АдресОрганизации.Представление);
	
	ЗаполнитьПоляПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОКВЭД()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаПодписи, "ОКВЭД, ОКВЭД2, ОснВидДеят, ОснВидДеят2");
	
	СтруктураРеквизитовФормы.ОКВЭД       = СведенияОбОрганизации.ОКВЭД;
	СтруктураРеквизитовФормы.ОснВидДеят  = СведенияОбОрганизации.ОснВидДеят;
	СтруктураРеквизитовФормы.ОКВЭД2      = СведенияОбОрганизации.ОКВЭД2;
	СтруктураРеквизитовФормы.ОснВидДеят2 = СведенияОбОрганизации.ОснВидДеят2;
	
	Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <= 2015 Тогда
		ДействующийОКВЭД = СведенияОбОрганизации.ОКВЭД;
		ОснВидДеят       = СведенияОбОрганизации.ОснВидДеят;
	Иначе
		ДействующийОКВЭД = СведенияОбОрганизации.ОКВЭД2;
		ОснВидДеят       = СведенияОбОрганизации.ОснВидДеят2;
	КонецЕсли;
	
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами(), "ОргКодОКВЭД", ДействующийОКВЭД);
	ЗаполнитьОбластьВРазделах(РазделыСРеквизитами(), "ОргОтрасль", ОснВидДеят);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПодписей()
	
	Организация = СтруктураРеквизитовФормы.Организация;
	
	ПереченьСведений = "ФИОРук, ФИОБух, ФИО";
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, ПереченьСведений);
	
	Если СтруктураРеквизитовФормы.ИП = Истина Тогда
		ОргДиректор = Сведения.ФИО;
	Иначе
		ОргДиректор = Сведения.ФИОРук;
	КонецЕсли;
	
	ЗаполнитьОбластьВРазделах(ВсеРазделы(), "ОргДиректор", ОргДиректор);
	ЗаполнитьОбластьВРазделах(ВсеРазделы(), "ОргБухгалтер", Сведения.ФИОБух);
	
КонецПроцедуры

&НаСервере
Функция РазделыСРеквизитами()
	
	ИменаРазделов = Новый Массив;
	
	ИменаРазделов.Добавить("Баланс");
	ИменаРазделов.Добавить("ФормаОтчета");
	ИменаРазделов.Добавить("ОДДС");
	ИменаРазделов.Добавить("ОЦИПС");
	ИменаРазделов.Добавить("ОИК");
	
	Возврат ИменаРазделов;
	
КонецФункции

&НаСервере
Функция ВсеРазделы()
	
	ИменаРазделов = Новый Массив;
	
	ИменаРазделов.Добавить("Баланс");
	ИменаРазделов.Добавить("ФормаОтчета");
	ИменаРазделов.Добавить("ОДДС");
	ИменаРазделов.Добавить("ОЦИПС");
	ИменаРазделов.Добавить("ОИК");
	
	ИменаРазделов.Добавить("РасчетАктивов");
	
	ИменаРазделов.Добавить("Пояснения1");
	ИменаРазделов.Добавить("Пояснения2");
	ИменаРазделов.Добавить("Пояснения3");
	ИменаРазделов.Добавить("Пояснения4");
	ИменаРазделов.Добавить("Пояснения5");
	ИменаРазделов.Добавить("Пояснения6");
	ИменаРазделов.Добавить("Пояснения7");
	ИменаРазделов.Добавить("Пояснения8");
	ИменаРазделов.Добавить("Пояснения9");
	
	Возврат ИменаРазделов;
	
КонецФункции

// Заполняет значение в указанных разделах отчета
//
// Параметры:
//   Разделы - Массив - имена разделов отчета
//   ИмяОбласти - Строка
//   ЗначениеЗаполнения - Произвольный
//
&НаСервере
Процедура ЗаполнитьОбластьВРазделах(Разделы, ИмяОбласти, ЗначениеЗаполнения)
	
	Для Каждого ИмяРаздела Из Разделы Цикл
		ЗаполнитьОбластьВРазделе(ИмяРаздела, ИмяОбласти, ЗначениеЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластьВРазделе(ИмяРаздела, ИмяОбласти, ЗначениеЗаполнения)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
		РазмещениеДанных = ТабличныйДокумент;
		ОбластьПоказателя = РазмещениеДанных.Области.Найти(ИмяОбласти);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Значение = ЗначениеЗаполнения;
		КонецЕсли;
		
	Иначе
		РазмещениеДанных = ЭтотОбъект["СтруктураДанных" + ИмяРаздела];
		Если РазмещениеДанных.Свойство(ИмяОбласти) Тогда
			РазмещениеДанных[ИмяОбласти] = ЗначениеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область НавигацияПоРазделам

&НаКлиенте
Процедура ОбработатьРазделыОтчетаПриАктивизацииСтроки()
	
	ИдентификаторРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	НомерСтраницыРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	ПереключитьРаздел(ИдентификаторРаздела, НомерСтраницыРаздела);
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если ИдетПозиционированиеНаОбластьРаздела Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРаздела = Ячейка.Раздел;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРаздела) Тогда
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	РазделВДеревеАктивныхРазделов = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	Если РазделВДеревеАктивныхРазделов = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Для перехода в раздел ""%1"" включите его отображение';
																	|en = 'Для перехода в раздел ""%1"" включите его отображение'"),
			ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела)));
		ИдетПозиционированиеНаОбластьРаздела = Ложь;
		Возврат;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные <> Неопределено Тогда
		ИдентификаторАктивногоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Иначе
		ИдентификаторАктивногоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	Если ИдентификаторРаздела <> ИдентификаторАктивногоРаздела Тогда
		ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела);
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
	Если ИдентификаторРаздела <> "ДополнительныеФайлы" Тогда
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НайденнаяОбласть = Неопределено Тогда
			НайденнаяОбласть = ТабличныйДокумент.Область(1, 1);
		КонецЕсли;
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
	КонецЕсли;
	
	ИдетПозиционированиеНаОбластьРаздела = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРазделПриАктивацииПоляОтчета(ИдентификаторРаздела)
	
	АктивируемыйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИдентификаторРаздела);
	
	Элементы.РазделыОтчета.ТекущаяСтрока = АктивируемыйРаздел.ПолучитьИдентификатор();
	
	ПереключитьРаздел(ИдентификаторРаздела, 0);
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элементы.РазделыОтчета.ТекущаяСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьРаздел(ИдентификаторРаздела, НомерСтраницыРаздела)
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Ложь;
	Элементы.ЗаполнитьТекущий.Доступность = Истина;
	
	Если ИдентификаторРаздела = "ДополнительныеФайлы" Тогда
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ДопФайлы;
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
	Иначе
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИдентификаторРаздела, НомерСтраницыРаздела);
		
	КонецЕсли;
	
	Если ИдентификаторРаздела = "Баланс" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если ИдентификаторРаздела = "Баланс"
	 ИЛИ ИдентификаторРаздела = "ФормаОтчета" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
		
	ИначеЕсли ИдентификаторРаздела = "ОДДС"
	      ИЛИ ИдентификаторРаздела = "ОИК"
	      ИЛИ (СтрЧислоВхождений(ИдентификаторРаздела, "Пояснения") > 0
	        И НЕ ИдентификаторРаздела = "Пояснения6") Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
	КонецЕсли;
	
	Если ИдентификаторРаздела = "ОЦИПС" Тогда
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
		ТаблВариантыЗаполнения = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИдентификаторРаздела];
		Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
			Для Каждого Элем Из ТаблВариантыЗаполнения[0].ТаблицаВариантовЗаполнения Цикл
				Если Элем.ВариантЗаполнения = 3 Тогда
					Элементы.ЗаполнитьТекущий.Доступность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ИдентификаторРаздела = "РасчетАктивов"
	      ИЛИ ИдентификаторРаздела = "Пояснения3"
	      ИЛИ ИдентификаторРаздела = "Пояснения9" Тогда
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция МакетОтчета(Знач ИмяРаздела)
	
	ИмяРаздела = ?(ИмяРаздела = "ФормаОтчета", "ОПУ", ИмяРаздела);
	
	ИмяМакетаОтчета = Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета"))
	                + "_" + СтруктураОтчета[ИмяРаздела].ИмяМакета;
	МакетОтчета = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакетаОтчета);
	
	ПодготовитьМакетОтчета(МакетОтчета, ИмяРаздела, Новый Структура("СтруктураОтчета", СтруктураОтчета));
	
	Возврат МакетОтчета;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФайлыДляБанка()
	
	// Подготовка макетов печатных форм для интерфейса печати отчета
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов.Очистить();
	ПечатьНаСервере("ПоказатьБланк");
	
	НачатьТранзакцию();
	
	СохранитьПечатныеМакетыОтчетов(СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОЗавершенииПодготовкиФайловДляБанка()
	
	ШаблонТекстаПредупреждения = НСтр("ru = 'В информационной базе сохранены печатные формы отчета %1 для передачи в банк в составе отчетности заемщика';
										|en = 'В информационной базе сохранены печатные формы отчета %1 для передачи в банк в составе отчетности заемщика'");
	ТекстПредупреждения = СтрШаблон(ШаблонТекстаПредупреждения, Заголовок);
	
	ПоказатьПредупреждение( , ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция ПустаяСтруктураДанныхФайла()
	
	СтруктураДанныхФайла = Новый Структура;
	СтруктураДанныхФайла.Вставить("СведенияИзменены", Ложь);
	СтруктураДанныхФайла.Вставить("ХранилищеФайла");
	СтруктураДанныхФайла.Вставить("ИмяФайла");
	СтруктураДанныхФайла.Вставить("Размер");
	СтруктураДанныхФайла.Вставить("ДатаДобавления");
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

&НаСервере
Функция Загрузить(ИмяСохраняемогоПараметра)
	
	Возврат ХранилищеНастроекДанныхФорм.Загрузить("Отчет.РегламентированныйОтчетБухОтчетность.Форма.УведомлениеОбИзменениях", ИмяСохраняемогоПараметра);
	
КонецФункции

&НаСервере
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(Знач КодПоказателя)
	
	ПолучитьТаблицуСоставаПоказателей();
	
	НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоСоставу", КодПоказателя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
	Иначе
		НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоФорме", КодПоказателя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруМногострочныхЧастей()
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтчета2012Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура();
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО_2012Кв1");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2012Кв1");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс_2012Кв1");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв1");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОтчета2012Кв4_3()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура();
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2012Кв4_3");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв4_3");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОтчета2014Кв4()
	
	СоставНастройкаОтчета = Новый Структура;
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура();
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "БалансНКО_2012Кв4_3");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы", "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс_2012Кв4_3");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв4_3");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета);
	
	УстановитьСтруктуруРасчетаАктивов2014Кв4(СоставНастройкаОтчета);
	УстановитьСтруктуруОИК2014Кв4(СоставНастройкаОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура УстановитьСтруктуруРасчетаАктивов2014Кв4(СоставНастройкаОтчета)
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяМакета",                      "РасчетАктивов_2014Кв4");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "РасчетАктивов_2014Кв4");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтруктуруОИК2014Кв4(СоставНастройкаОтчета)
	
	// Отчет об изменениях капитала.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураРаздела.Вставить("ИмяМакета",                      "ОИК");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "ОИК_2014Кв4");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)
	
	Перем Кодификаторы;
	Перем Заголовки;
	
	Если НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация.
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				НачальныйНомер = Кодификатор.Код;
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб") Тогда
					СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок);
				КонецЕсли;
				ПереопределитьПараметрыМСЧ(НачальныйНомер, МаксимальноеКоличествоСтрок);
				
				Если ЗначениеЗаполнено(МаксимальноеКоличествоСтрок) Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = СтрокаЧГ0(НачальныйНомер + Инд - 1);
				КонецЦикла;
				
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрокаЧГ0(Инд)];
				ОбластьСКодом.Текст = СтрокаЧГ0(Кодификаторы.Код + Инд - 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если в описании структуры встречаются поля с датами, то производится их заполнение.
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьПараметрыМСЧ(НачальныйНомер, МаксимальноеКоличествоСтрок)
	
	Если ЗначениеЗаполнено(МаксимальноеКоличествоСтрок) Тогда
		Если (НачальныйНомер = 5408 ИЛИ НачальныйНомер = 5428)
		   И НЕ ОтображатьСтроки_5407_5427() Тогда
			МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если НачальныйНомер = 5408 И НЕ ОтображатьСтроки_5407_5427() Тогда
		НачальныйНомер = 5507;
	ИначеЕсли НачальныйНомер = 5428 И НЕ ОтображатьСтроки_5407_5427() Тогда
		НачальныйНомер = 5527;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтображатьСтроки_5407_5427()
	
	БлокиМакета = СтруктураОтчета.Пояснения4.БлокиМакета;
	Возврат БлокиМакета.ОсновнаяЧасть5407.Видимость;
	
КонецФункции

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	// Конвертация имен секций показателей при переходе с 2.0 на 3.0.
	Если СтруктураОтчета.Свойство("ОИК") Тогда
		Если СтруктураОтчета.ОИК.ИмяСекцииПоказателей = "ОИК2014Кв4" Тогда
			СтруктураОтчета.ОИК.ИмяСекцииПоказателей = "ОИК_2014Кв4";
		КонецЕсли;
	КонецЕсли;
	Если СтруктураОтчета.Свойство("РасчетАктивов") Тогда
		Если СтруктураОтчета.РасчетАктивов.ИмяСекцииПоказателей = "РасчетАктивов2014Кв4" Тогда
			СтруктураОтчета.РасчетАктивов.ИмяСекцииПоказателей = "РасчетАктивов_2014Кв4";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		
		ИмяСтраницы = Отчет.Значение.ИмяСтраницы;
		ИмяОбласти  = Отчет.Значение.ИмяСекцииПоказателей;
		
		ТекОбласть = МакетСоставаПоказателей.Области[ИмяОбласти];
		
		ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Очистить();
		ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <> КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВОтчетномПериоде Тогда
				Если КодПоказателя = "П000100242104"
				 ИЛИ КодПоказателя = "П000100243004"
				 ИЛИ КодПоказателя = "П000100245004" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВПредыдущемГоду Тогда
				Если КодПоказателя = "П000100242105"
				 ИЛИ КодПоказателя = "П000100243005"
				 ИЛИ КодПоказателя = "П000100245005" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0
		 ИЛИ СтрЧислоВхождений(ИмяСтраницы, "Пояснения") > 0 Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаСоставПоказателей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтотОбъект);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	Перем СтруктураГруппы;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";
	КонецЕсли;
	
	ПоказатьКодЕИ();
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		Если ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = ОбъектОтчета(ИмяФормы).ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекБаланс);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.ОПУ.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекОФР);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекБаланс, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс);
	РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоНастроекОФР, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекФормаОтчета);
	ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", "ДеревоНастроекБаланс");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ФормаОтчета", "ДеревоНастроекФормаОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаОтчетная2.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ФормаОтчета" Тогда
		
		//ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОИК" Тогда
		
		ДатаКонцаПериодаОтчета 	  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаКорректировокПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКорректировокПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ПериодКорректировокПрошлогоГода.Значение   = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		
	ИначеЕсли НаимТекущегоРаздела = "ОДДС" Тогда
		
		//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОЦИПС" Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "РасчетАктивов" Тогда
		
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20141101'
			И СтруктураОтчета.РасчетАктивов.ИмяМакета = "РасчетАктивов_2014Кв4" Тогда
			
			ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
			ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
			
			СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			// Заголовки таблицы.
			ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			
		Иначе
			
			ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
			
			Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
					СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
				Иначе
					СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
				КонецЕсли;
			КонецЕсли;
			
			ПериодОтчета = " за " + СтрПериод;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заголовки для использования в расшфировках ОФР.
	ДатаКонцаАналогичногоПериодаПрошлогоГода = КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ОписаниеПериода = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
	Иначе
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			ОписаниеПериода = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			ОписаниеПериода = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЗаголовокДатаАналогичногоПериодаПрошлогоГода =  "За " + ОписаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(ИмяТекРаздела)

	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		НазваниеЕдиницыИзмерения = "руб.";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб.";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		НазваниеЕдиницыИзмерения = "млн. руб.";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		НазваниеОПУ = "о финансовых результатах";
	Иначе
		НазваниеОПУ = "о прибылях и убытках";
	КонецЕсли;

	ЗаголовокПояснения1 = "Пояснения к бухгалтерскому балансу" + Символы.ПС 
						+ "и отчету " + НазваниеОПУ + " (" + НазваниеЕдиницыИзмерения + ")";
						
	Если ИмяТекРаздела = "Пояснения1" Тогда
		ТабличныйДокумент.Области.ЗаголовокРаздела.Текст = ЗаголовокПояснения1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела)

	Если ИмяРаздела = "Пояснения1" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения1();
	ИначеЕсли ИмяРаздела = "Пояснения2" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения2();
	ИначеЕсли ИмяРаздела = "Пояснения3" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения3();
	ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения4();
	ИначеЕсли ИмяРаздела = "Пояснения5" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения5();
	ИначеЕсли ИмяРаздела = "Пояснения6" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения6();
	ИначеЕсли ИмяРаздела = "Пояснения8" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения8();
	ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения9();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения1()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5100.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5110.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату12.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода12.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему12.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.НаОтчетнуюДату13.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода13.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему13.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5140.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5150.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5160.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5170.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5180.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5190.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения2()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5200.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5210.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5220.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5230.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода23.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода23.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату24.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода24.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему24.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения3()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5301.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5311.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5305.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5315.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5300.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5310.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату32.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода32.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему32.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения4()
	
	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];
	
	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5400.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5420.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5401.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5421.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5402.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5422.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5403.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5423.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5404.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5424.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5405.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5425.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5406.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5426.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5407.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5427.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.НаОтчетнуюДату42.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода42.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему42.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения5()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5501.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5521.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5502.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5522.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5503.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5523.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5504.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5524.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5511.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5531.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5512.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5532.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5513.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5533.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5514.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5534.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5500.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5520.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату52.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода52.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему52.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5551.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5571.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5552.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5572.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5553.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5573.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5554.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5574.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5560.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5580.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5561.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5581.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5562.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5582.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5563.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5583.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5564.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5584.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5565.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5585.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5566.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5586.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5550.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5570.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату54.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода54.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему54.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения6()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода6.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода6.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения8()

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.НаОтчетнуюДату8.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода8.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему8.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения9()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода9.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода9.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5910.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5920.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтотОбъект["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтотОбъект, "ТабличныйДокумент");
			
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ФормаОтчета"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС"
	 ИЛИ ИмяТекРаздела = "Пояснения1"
	 ИЛИ ИмяТекРаздела = "Пояснения2"
	 ИЛИ ИмяТекРаздела = "Пояснения3"
	 ИЛИ ИмяТекРаздела = "Пояснения4"
	 ИЛИ ИмяТекРаздела = "Пояснения5"
	 ИЛИ ИмяТекРаздела = "Пояснения7"
	 ИЛИ ИмяТекРаздела = "Пояснения8"
	 ИЛИ ИмяТекРаздела = "Пояснения9" Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено И Обл.СодержитЗначение Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяТекРаздела);
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	УстановитьВидимостьДополнительныхСтрок(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли ИмяТекРаздела = "ФормаОтчета" Тогда
		ПеренумероватьСтрокиРасшифровкиОПУ();
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2012-12-01' Тогда
		ОчиститьПолеПодписиБухгалтера();
	КонецЕсли;
	
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ФормаОтчета"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС"
	 ИЛИ ИмяТекРаздела = "Пояснения1"
	 ИЛИ ИмяТекРаздела = "Пояснения2"
	 ИЛИ ИмяТекРаздела = "Пояснения3"
	 ИЛИ ИмяТекРаздела = "Пояснения4"
	 ИЛИ ИмяТекРаздела = "Пояснения5"
	 ИЛИ ИмяТекРаздела = "Пояснения7"
	 ИЛИ ИмяТекРаздела = "Пояснения8"
	 ИЛИ ИмяТекРаздела = "Пояснения9" Тогда
	
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
		
	КонецЕсли;
	
	ИзменитьНазванияОтчетов(ИмяТекРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СкрытьПоказательДатаУтвержденияОтчетности();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочнойЧасти)
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	СтрокВМакете = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Если СтрокВМакете < КоличествоСтрокВМногострочнойЧасти Тогда
		
		// Удаление имени области многострочной части.
		ИмяОблМнЧ = ИдентификаторМногострочнойЧасти;
		Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
			КодСтроки = Сред(ИмяОблМнЧ, 7);
			Пока Лев(КодСтроки, 1) = "0" Цикл
				КодСтроки = Сред(КодСтроки, 2);
			КонецЦикла;
			ИмяОблМнЧ = "ДопСтрока" + КодСтроки;
		КонецЕсли;
		ОблМнЧ = ТабличныйДокумент.Области.Найти(ИмяОблМнЧ);
		Если ОблМнЧ <> Неопределено Тогда
			ИсходнаяОбластьСтрокВерх = ОблМнЧ.Верх;
			ИсходнаяОбластьСтрокНиз  = ОблМнЧ.Низ;
			ОблМнЧ.Имя = "";
		Иначе
			ИсходнаяОбластьСтрокВерх = 0;
			ИсходнаяОбластьСтрокНиз  = 0;
		КонецЕсли;
		
		ПостфиксСтрокВМакете = "_" + СтрокаЧГ0(СтрокВМакете);
		
		ИмяВерхнегоЭлементаСтроки = СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксСтрокВМакете;
		ИмяНижнегоЭлементаСтроки  = СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксСтрокВМакете;
		
		ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
		ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
		
		ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		
		// Добавление необходимого количества дополнительных строк.
		ОбластьВставляемойСтроки
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз);
		ОбластьСтрокиПреемника
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиНиз + 1, , ОбластьВставляемойСтрокиНиз
			+ (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
		ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, ОбластьСтрокиПреемника,
			ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		
		// Назначение имени области многострочной части.
		Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
			ОблМнЧ = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, ,
			ОбластьВставляемойСтрокиНиз + (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
			Если ОблМнЧ <> Неопределено Тогда
				ОблМнЧ.Имя = ИмяОблМнЧ;
			КонецЕсли;
		КонецЕсли;
		
		// Назначение имен ячеек с показателями в добавленных дополнительных строках.
		Для НомДопСтроки = СтрокВМакете + 1 По КоличествоСтрокВМногострочнойЧасти Цикл
			
			Смещение = ВысотаСтроки * (НомДопСтроки - 1);
			
			ПостфиксНомДопСтроки = "_" + СтрокаЧГ0(НомДопСтроки);
			
			ОсноваИмениОблУдаленияСтроки = "";
			
			Для Каждого ЭлементСтруктуры Из СтруктураМногострочнойЧасти.Состав[НомДопСтроки - 1] Цикл
				
				ОсноваИмениПоказателя = ЭлементСтруктуры.Ключ;
				
				ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
				
				ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(
				ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
				ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
				
				ОбластьПоказателяНовойСтроки.Имя = ОсноваИмениПоказателя + ПостфиксНомДопСтроки;
				
				// Установка значений показателей в добавленных дополнительных строках.
				Если ОбластьПоказателяНовойСтроки.СодержитЗначение Тогда
					ОбластьПоказателяНовойСтроки.Значение = ЭлементСтруктуры.Значение;
				Иначе
					ОбластьПоказателяНовойСтроки.Текст = ЭлементСтруктуры.Значение;
				КонецЕсли;
				
				// Получение основы для последующего назначения имени
				// ячейки со значком удаления дополнительной строки.
				Если ОсноваИмениОблУдаленияСтроки = "" Тогда
					Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда
						ОсноваИмениОблУдаленияСтроки = ОсноваИмениПоказателя;
					КонецЕсли;
				КонецЕсли;
				
			Конеццикла;
			
			// Назначение имени ячейки со значком удаления дополнительной строки.
			Если ОсноваИмениОблУдаленияСтроки <> "" Тогда
				
				ОбластьУдалитьНовая = ТабличныйДокумент.Область(
				ОбластьВставляемойСтрокиВерх + Смещение, 2,
				ОбластьВставляемойСтрокиВерх + Смещение, 2);
				
				ОбластьУдалитьНовая.Имя
				= "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки + ПостфиксНомДопСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы Или СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтотОбъект, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		ИначеЕсли ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭтотОбъект[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтотОбъект, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрокаЧГ0(Инд);
					
				КонецЕсли;
				
				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				ИначеЕсли ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтотОбъект, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДополнительныхСтрок(ИмяОтчета)
	
	Если ИмяОтчета = "Баланс"
	 ИЛИ ИмяОтчета = "ФормаОтчета" Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		
		Если ИмяОтчета = "Баланс" Тогда
			ДеревоНастроек = ДеревоНастроекБаланс;
		ИначеЕсли ИмяОтчета = "ФормаОтчета" Тогда
			ДеревоНастроек = ДеревоНастроекОФР;
		КонецЕсли;
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					"ДобавлениеСтроки_" + СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						"ДобавлениеСтроки_" + ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							"ДобавлениеСтроки_" + СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяОтчета = "ФормаОтчета" Тогда
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		ДеревоНастройкиСостава = ДеревоНастроекОФР;
		
		Если ИспользуютсяМакетыЕНВД() Тогда
			ТабличныйДокумент.Области.ВТомЧисле2110.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
			ТабличныйДокумент.Области.ВТомЧисле2120.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
			ТабличныйДокумент.Области.ВТомЧисле2210.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
			ТабличныйДокумент.Области.ВТомЧисле2220.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
			ТабличныйДокумент.Области.ВТомЧисле2100.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
			ТабличныйДокумент.Области.ВТомЧисле2200.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
			ТабличныйДокумент.Области.ВТомЧисле2300.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
			
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21101.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21201.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22101.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22201.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21001.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
			ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22001.Видимость =
				ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
				ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
			
		КонецЕсли;
		
		ТабличныйДокумент.Области.ВТомЧисле2510.Видимость =
			ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока25101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока25102");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхПоXML(ТекстXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочныеЧасти" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелМногострочныхЧастей Из Узел.ДочерниеУзлы Цикл
			ИмяРазделаМногострочныхЧастей = ПолучитьАтрибутКакСтроку(УзелМногострочныхЧастей, "ИмяРаздела");
			Если ИспользоватьОписаниеМногострочнойЧасти(ИмяРазделаМногострочныхЧастей) Тогда
				ВнестиОписаниеМногострочныхЧастейРаздела(УзелМногострочныхЧастей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	ЭтоОтчетностьЗаГод = (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Если ЭтоОтчетностьЗаГод Тогда
		ПризнакПоказаСтраницы = 1;
		ПризнакПечатиСтраницы = 1;
	Иначе
		ПризнакПоказаСтраницы = 0;
		ПризнакПечатиСтраницы = 0;
	КонецЕсли;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИПС";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы,
	                                         СтруктураОтчета.ОЦИПС.ИмяМакета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПризнакПечатиСтраницы);
	СтрокаУровня1.ПоказатьСтраницу
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПризнакПоказаСтраницы);
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасчетАктивов";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы,
	                                         СтруктураОтчета.РасчетАктивов.ИмяМакета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения1";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения2";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения3";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения4";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения5";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения6";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения7";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения8";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения9";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = ПредставлениеРазделаПоИдентификатору(СтрокаУровня1.ИмяСтраницы);
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	ИмяФормыОтчета = ИмяФормыОтчета(ИмяФормы);
	СтраницыОтчета = РеквизитФормыВЗначение("мДеревоСтраницОтчета");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ЭтоБалансНекоммерческойОрганизации",
		СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	РегламентированнаяОтчетность.ИзменитьСоставОтчета(
		"РегламентированныйОтчетБухОтчетность", ИмяФормыОтчета, ПараметрыОтчета, СтраницыОтчета);
		
	ЗначениеВРеквизитФормы(СтраницыОтчета, "мДеревоСтраницОтчета");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовокСтраницыВДеревеРазделовОтчета(ИмяРаздела, ИмяМакета, ДатаКонцаПериодаОтчета)
	
	Если ИмяРаздела = "РасчетАктивов" Тогда
		Если ДатаКонцаПериодаОтчета >= '2014-11-01' И ИмяМакета = "РасчетАктивов_2014Кв4" Тогда
			Возврат "Расчет стоимости чистых активов";
		Иначе
			Возврат "Расчет оценки стоимости чистых активов акционерного общества";
		КонецЕсли;
	ИначеЕсли ИмяРаздела = "ОЦИПС" Тогда
		Если ДатаКонцаПериодаОтчета >= '2018-01-01' И ИмяМакета = "ОЦИС" Тогда
			Возврат "Отчет о целевом использовании средств";
		Иначе
			Возврат "Отчет о целевом использовании полученных средств";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ПолеВыбораВидСдачиОтчетности = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ПолеВыбораВидСдачиОтчетности = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
	    ПолеВыбораВидСдачиОтчетности = "Ликвидационная";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде =
		ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду =
		ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	
	Если СкрыватьСтрокиРасшифровкиПоПБУ18 И ТабличныйДокумент.Области.Найти("ВТомЧисле2421") <> Неопределено Тогда
		ТабличныйДокумент.Области.ВТомЧисле2421.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2421.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2430.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2430.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2450.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2450.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции, ДеревоНастроек)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = ОбъектОтчета(ИмяФормы).ПолучитьМакет(МакетНастроек);
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяСекции) Тогда
		
		ДеревоНастроек.Очистить();
		
		Возврат;
		
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				НовСтр.ДостДляРедактирования_Существенность = ЗначениеЗаполнено(НовСтр.Существенность);
				НовСтр.ДостДляРедактирования_МаксимальноеКоличество = ЗначениеЗаполнено(НовСтр.МаксимальноеКоличество);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ИспользоватьОписаниеМногострочнойЧасти(ИмяОписанияМногострочныхЧастей)
	
	Результат = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		Если Отчет.Значение.ИмяОписанияМногострочныхЧастей = ИмяОписанияМногострочныхЧастей Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеМногострочныхЧастейРаздела(УзелРаздела)
	
	ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	
	ИмяПоляТабличногоДокумента = СтрЗаменить(УзелРаздела.Атрибуты.ПолучитьИменованныйЭлемент("РасположениеРаздела").Значение, "ПолеТабличногоДокумента", "");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторМногострочнойЧасти = ПолучитьАтрибутКакСтроку(Узел, "Идентификатор");
		МинимальноеКоличествоСтрок  = ПолучитьАтрибутКакЧисло(Узел, "МинимальноеКоличествоСтрок");
		МаксимальноеКоличествоСтрок = ПолучитьАтрибутКакЧисло(Узел, "МаксимальноеКоличествоСтрок");
		ВерхнийЭлементСтроки = ПолучитьАтрибутКакСтроку(Узел, "ВерхнийЭлементСтроки");
		НижнийЭлементСтроки  = ПолучитьАтрибутКакСтроку(Узел, "НижнийЭлементСтроки");
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочнойЧасти.Вставить("Масштаб", Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок));
		СтруктураМногострочнойЧасти.Вставить("Габариты", Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", ВерхнийЭлементСтроки, НижнийЭлементСтроки));
		СтруктураМногострочнойЧасти.Вставить("ИмяПоляТабличногоДокумента", ИмяПоляТабличногоДокумента);
		
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ИмяУзла = "Кодификаторы" Тогда
				ВнестиОписаниеКодификаторовМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Заголовки" Тогда
				ВнестиОписаниеЗаголовковМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Состав" Тогда
				ВнестиОписаниеСоставаМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей.Вставить(ИдентификаторМногострочнойЧасти, СтруктураМногострочнойЧасти);
		
	КонецЦикла;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применяться не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
				
	ОрганизацияПерешлаНаУСН   = (РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, ДатаОпределения) = "Упрощенная");
	ОрганизацияПрименяетПБУ18 = РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаОпределения);
		
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеКодификаторовМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивКодификаторов = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Кодификатор" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьКода = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьКода");
		НачальныйКод = ПолучитьАтрибутКакЧисло(ДочернийУзел, "НачальныйКод");
		
		МассивКодификаторов.Добавить(Новый Структура("Область, Код", ОбластьКода, НачальныйКод));
		
	КонецЦикла;
	
	Если МассивКодификаторов.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Кодификаторы", МассивКодификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеЗаголовковМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Заголовок" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьЗаголовка");
		ШаблонЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ШаблонЗаголовка");
		
		МассивЗаголовков.Добавить(Новый Структура("Область, Заголовок", ОбластьЗаголовка, ШаблонЗаголовка));
		
	КонецЦикла;
	
	Если МассивЗаголовков.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Заголовки", МассивЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеСоставаМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
		
	ТаблицаСостава = Новый Массив;
	СтруктураСостава = Новый Структура;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла <> "ЭлементСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьАтрибутКакСтроку(ДочернийУзел, "Область");
		
		СтруктураСостава.Вставить(Область);
		
	КонецЦикла;
	
	НачальноеКоличествоСтрок = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	Для Инд = 1 По НачальноеКоличествоСтрок Цикл
		ТаблицаСостава.Добавить(СтруктураСостава);
	КонецЦикла;
	
	СтруктураМногострочнойЧасти.Вставить("Состав", ТаблицаСостава);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКодЕИ()

	Если ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "385";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	ПолучитьСтруктуруМногострочныхЧастей();
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти
		= СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ОткрытьУведомление();
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения <> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиБаланса()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	
	ДеревоНастроек = ДеревоНастроекБаланс;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
			НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
			
			Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации И НомерСтроки = 15302 Тогда
				НомерСтроки = 15301;
			КонецЕсли;
			
			Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
				Если ЗначениеЗаполнено(Строка2Уровня.ВключатьВОтчет) Тогда
					ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
					НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
					ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
					
					КодСтроки = СтрокаЧГ0(НомерСтроки);
					
					Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбластиНомера) = Неопределено Тогда
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						НомерСтроки = НомерСтроки + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиОПУ()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ФормаОтчета");
	
	ДеревоНастроек = ДеревоНастроекОФР;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
						
						КодСтроки = СтрокаЧГ0(НомерСтроки);
						
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "УдалитьСтроку", "");
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку(ИмяПоказателя);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения3" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если СтрНайти(ТекущаяОбласть.Имя, "ДобавитьСтроку") = 1 Тогда
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
	Иначе
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
	КонецЕсли;
	
	ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с именем области многострочной части в таблице.
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	
	Попытка
		Если ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
					|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'"));
			Возврат;
		КонецЕсли;
		
		ПолучитьСтруктуруМногострочныхЧастей();
		
		ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбран многострочный раздел, в который необходимо добавить строку.';
				|en = 'Не выбран многострочный раздел, в который необходимо добавить строку.'"));
		Возврат;
		
	КонецПопытки;
	
	КоличествоСтрокВМногострочнойЧасти = ОписаниеМногострочнойЧасти.Состав.Количество();
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
	
	Если ТабличныйДокумент.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	ПостфиксКоличествоСтрокВМногострочнойЧасти  = "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти);
	ПостфиксКоличествоСтрокВМногострочнойЧасти1 = "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти + 1);
	
	// За основу для копирования используется последняя строка многострочного раздела.
	ИмяВерхнегоЭлементаСтроки = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	ИмяНижнегоЭлементаСтроки  = ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	
	ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
	ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
	
	ОбластьВставляемойСтроки = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
	
	// Добавляем строку к макету и назначаем имена областям показателей.
	ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
	Смещение = ВысотаСтроки * КоличествоСтрокВМногострочнойЧасти;
	
	СтруктураЭлементовМногострочнойЧасти = Новый Структура;
	
	ОсноваИмениПоказателяДляДопСтроки = "";
	Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
		ОсноваИмениПоказателя = Элемент.Ключ;
		Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда
			ОсноваИмениПоказателяДляДопСтроки = ОсноваИмениПоказателя;
		КонецЕсли;
		
		СтруктураЭлементовМногострочнойЧасти.Вставить(ОсноваИмениПоказателя);
		
		ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
		
		ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
		                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
		ИмяОбластиНовойСтроки = ОсноваИмениПоказателя + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
		
		ОбластьПоказателяНовойСтроки.Имя = ИмяОбластиНовойСтроки;
		
		Если ТабличныйДокумент.Области[ИмяОбластиНовойСтроки].СодержитЗначение Тогда
			ОбластьПоказателяНовойСтроки.Значение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Назначаем новую именнованную область многострочной части.
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьДляИменования = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ВысотаСтроки, );
		ОбластьДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокНиз + 1, 2, ИсходнаяОбластьСтрокНиз + 1, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
	Иначе 
		Верх = ОбластьВставляемойСтрокиВерх;
		Шаг = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(Верх + Шаг, 2, Верх + Шаг, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + "_" + СтрокаЧГ0(ОписаниеМногострочнойЧасти.Состав.Количество() + 1);
	КонецЕсли;
	
	// Зафиксируем увеличение многострочной части в структуре описаний.
	ОписаниеМногострочнойЧасти.Состав.Добавить(СтруктураЭлементовМногострочнойЧасти);
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Установим первое поле добавленной строки текущим.
	НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
	ИмяОбластиДляФокусаВвода = ИмяПоказателя + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяОбластиДляФокусаВвода];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезСчетчика(Знач ИмяПоказателя)
	
	ПозицияСчетчика = СтрНайти(ИмяПоказателя, "_");
	
	Если ПозицияСчетчика > 0 Тогда
		Возврат Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	КонецЕсли;
	
	Возврат ИмяПоказателя;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтроку(ИмяПоказателя)
	
	УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с областью многострочной части в таблице.
	ИмяПоказателяБезСчетчика = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	
	Если ИдентификаторМногострочнойЧасти = Неопределено
	 ИЛИ ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
													|en = 'Не выбрана удаляемая строка многострочного раздела.'"));
		Возврат;
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	// Номер строки удаляемой многострочной части определим по имени выделенной ячейки.
	НомерУдаляемойСтроки = Число(Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя, "_") + 1));
	ИндексСтрокиТаблицы = НомерУдаляемойСтроки - 1;
	
	Если СтруктураМногострочнойЧасти.Состав.Количество() > СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Тогда
		
		ПеремещатьФокусВвода = (НомерУдаляемойСтроки = СтруктураМногострочнойЧасти.Состав.Количество());
		
		ПостфиксНомерУдаляемойСтроки = "_" + СтрокаЧГ0(НомерУдаляемойСтроки);
		
		УдаляемаяОбластьВерх = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксНомерУдаляемойСтроки].Верх;
		УдаляемаяОбластьНиз  = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки  + ПостфиксНомерУдаляемойСтроки].Низ;
		
		ВысотаСтроки = УдаляемаяОбластьНиз - УдаляемаяОбластьВерх + 1;
		УдаляемаяОбласть = ТабличныйДокумент.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование областей многострочной части.
		Для Инд = НомерУдаляемойСтроки + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
			ПостфиксИнд  = "_" + СтрокаЧГ0(Инд);
			ПостфиксИнд1 = "_" + СтрокаЧГ0(Инд - 1);
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ОсноваИмениОбласти = Элемент.Ключ;
				Если Прав(ОсноваИмениОбласти, 2) = "01" И Лев(ОсноваИмениОбласти, 1) = "П" Тогда
					ПереименуемаяОбласть = ТабличныйДокумент.Области["УдалитьСтроку" + ОсноваИмениОбласти + ПостфиксИнд];
					ПереименуемаяОбласть.Имя = "УдалитьСтроку" + ОсноваИмениОбласти + ПостфиксИнд1;
				КонецЕсли;
				ПереименуемаяОбласть = ТабличныйДокумент.Области[ОсноваИмениОбласти + ПостфиксИнд];
				ПереименуемаяОбласть.Имя = ОсноваИмениОбласти + ПостфиксИнд1;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураМногострочнойЧасти.Состав.Удалить(ИндексСтрокиТаблицы);
		
		Если ПеремещатьФокусВвода Тогда
			// Установим первое поле добавленной строки текущим.
			НомерПоследнейСтроки = СтруктураМногострочнойЧасти.Состав.Количество();
			ИмяБудущейТекущейОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяБудущейТекущейОбласти];
		КонецЕсли;
		
	Иначе
		Для Инд = 1 По СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Цикл
			ПостфиксИнд  = "_" + СтрокаЧГ0(Инд);
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ИмяОчищаемойОбласти = Элемент.Ключ + ПостфиксИнд;
				ОчищаемаяОбласть = ТабличныйДокумент.Области[ИмяОчищаемойОбласти];
				Если ОчищаемаяОбласть.СодержитЗначение Тогда
					Если ТипЗнч(ОчищаемаяОбласть.Значение) = Тип("Строка") Тогда
						ОчищаемаяОбласть.Значение = "";
					Иначе
						ОчищаемаяОбласть.Значение = 0;
					КонецЕсли;
				Иначе
					ОчищаемаяОбласть.Текст = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	РегламентированнаяОтчетность.ПоместитьВКэш(СтруктураМногострочныхЧастей, УникальныйИдентификатор,
		СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргКодОКВЭД);
		
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргКодОКВЭД);
																	 
	КонецЕсли;
	
	Если СтруктураДанныхОИК.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргКодОКВЭД);
																	 
	КонецЕсли;
		
	Если СтруктураДанныхОЦИПС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИПС.ОргКодОКВЭД);
																	 
	КонецЕсли;
		
	Если СтруктураДанныхФормаОтчета.Свойство("ОргКодОКВЭД") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхФормаОтчета.ОргКодОКВЭД);
																	 
	КонецЕсли;
																	 
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОДДС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргОтрасль);
		
	КонецЕсли;
		
	Если СтруктураДанныхОИК.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОЦИПС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИПС.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхФормаОтчета.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхФормаОтчета.ОргОтрасль);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьПоляПодписей();
	
	ИзменитьНазванияОтчетов(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДискФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Попытка
		Если НЕ ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла';
											|en = 'Выберите путь для сохранения файла'");
		
		НачатьПолучениеФайлаССервера(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, ПараметрыДиалога);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
			|%1';
			|en = 'При выгрузке файла возникла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение( , ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяУдаляемогоФайла)
	
	УдаляемыйФайл = Новый Файл(ИмяУдаляемогоФайла);
	Если УдаляемыйФайл.Существует() Тогда
		УдалитьФайлы(ИмяУдаляемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = Неопределено;
	СтруктураХранения.ИмяФайла         = Неопределено;
	СтруктураХранения.Размер           = Неопределено;
	СтруктураХранения.ДатаДобавления   = Неопределено;
	
	// Учет различий в хранении дополнительных файлов в "старой" и "новой" версии реализации.
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлЗаявленияСоюзаСельхозпроизводителей" Тогда
		ИмяФайлаЗаявленияРевизионногоСоюза = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог, ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузки = ПолучитьИмяВременногоФайла();
	
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	
	Файл = Новый Файл(ФайлЗагрузки);
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресФайла;
	СтруктураХранения.ИмяФайла         = ИмяФайла;
	СтруктураХранения.Размер           = Файл.Размер();
	СтруктураХранения.ДатаДобавления   = ТекущаяДатаСеанса();
	
	Модифицированность = Истина;
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(ВидДополнительногоФайла)
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ВидДополнительногоФайла);
	
	Попытка
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
			|%1';
			|en = 'При загрузке файла возникла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, ВидДополнительногоФайла) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".DOC"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".XLS"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".RTF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			ТекстПредупреждения = НСтр(
				"ru = 'Файл пояснительной записки должен иметь одно из допустимых расширений: DOC, XLS, RTF, TIF, PDF, JPG!';
				|en = 'Файл пояснительной записки должен иметь одно из допустимых расширений: DOC, XLS, RTF, TIF, PDF, JPG!'");
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			Если ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
				ВидДопФайла = "Файл аудиторского заключения";
			Иначе
				ВидДопФайла = "Файл заявления ревизионного союза сельскохозяйственных производителей";
			КонецЕсли;
			
			ТекстПредупреждения = СтрШаблон(НСтр("ru = '%1 должен иметь одно из допустимых расширений: TIF, PDF, JPG!';
												|en = '%1 должен иметь одно из допустимых расширений: TIF, PDF, JPG!'"),
				ВидДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			
			Прервать;
			
		Иначе
			
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог, ВидДополнительногоФайла);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
			|%1';
			|en = 'При загрузке файла возникла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка';
														|en = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлЗаявленияСоюзаСельхозпроизводителей" Тогда
		ИмяФайлаЗаявленияРевизионногоСоюза = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();

	Модифицированность = Истина;
	      	             		
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи()
	
	ДанныеРаздела = ЭтотОбъект["СтруктураДанныхОИК"];
	
	Если ДанныеРаздела.Количество() <= 4
		И (ДанныеРаздела.Свойство("П000100360003")
		ИЛИ ДанныеРаздела.Свойство("П000100360004")
		ИЛИ ДанныеРаздела.Свойство("П000100360005")
		ИЛИ ДанныеРаздела.Свойство("ДатаПодписиОтчета")) Тогда
		
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360003"),
			ДанныеРаздела["П000100360003"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360004"),
			ДанныеРаздела["П000100360004"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360005"),
			ДанныеРаздела["П000100360005"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("ДатаПодписиОтчета"),
			ДанныеРаздела["ДатаПодписиОтчета"], '00010101'));
		
		Возврат МассивПоказателей;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных(ЗаполнятьСведенияОбОрганизации = Истина)
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		МассивПоказателейОИК = Неопределено;
		Если Раздел.ИмяСтраницы = "ОИК" Тогда
			// Предварительное сохранение данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			МассивПоказателейОИК = ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи();
		КонецЕсли;
		
		ПоказательДатаПодписиРаздела = '00010101';
		ВРазделеТолькоДатаПодписи
			= ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 1
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ДатаПодписиОтчета");
		Если ВРазделеТолькоДатаПодписи Тогда
			// Предварительное сохранение значения единственного
			// показателя раздела - "Даты подписи отчета".
			ПоказательДатаПодписиРаздела = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ДатаПодписиОтчета;
		КонецЕсли;
				  
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
			ИЛИ (ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 2
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль")
			И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД"))
			ИЛИ (МассивПоказателейОИК <> Неопределено ИЛИ ВРазделеТолькоДатаПодписи))
			И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ?(Раздел.ИмяСтраницы = "ФормаОтчета", СтруктураОтчета.ОПУ.ИмяМакета, СтруктураОтчета[Раздел.ИмяСтраницы].ИмяМакета)));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
	
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("НомерКорректировки") = Неопределено Тогда
				ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ВидОтчетности") = Неопределено Тогда
				Если ВидСдачиОтчетности = 1 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
				ИначеЕсли ВидСдачиОтчетности = 2 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
				ИначеЕсли ВидСдачиОтчетности = 3 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль") Тогда
				ТабличныйДокумент.Области.ОргОтрасль.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргОтрасль;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено
			   И ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД") Тогда
				ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].ОргКодОКВЭД;
			КонецЕсли;
			
			Если ЗаполнятьСведенияОбОрганизации Тогда
				ЗаполнитьСведенияОбОрганизации();
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
			// Восстановление предварительно сохраненных данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			Если МассивПоказателейОИК <> Неопределено Тогда
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360003", МассивПоказателейОИК[0]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360004", МассивПоказателейОИК[1]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360005", МассивПоказателейОИК[2]);
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("ДатаПодписиОтчета", МассивПоказателейОИК[3]);
			КонецЕсли;
			
			Если ВРазделеТолькоДатаПодписи Тогда
				// Восстановление предварительно сохраненного значения единственного
				// показателя раздела - "Даты подписи отчета".
				ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					"ДатаПодписиОтчета", ПоказательДатаПодписиРаздела);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтотОбъект["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Баланс: при выводе сумм в рублях точность не может превышать 2 знака.';
					|en = 'Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'"));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.';
					|en = 'Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'"));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.';
					|en = 'Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'"));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"),
			?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
								|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтрШаблон(НСтр("ru = 'Сохраняется %1...';
							|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Процедура ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета)
	
	РасшифровкаПодписи = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
	ДатаПодписи        = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ДатаПодписиОтчета;
	
	Для Инд = 1 По 9 Цикл
		ПоказателиПояснения = ПоказателиОтчета["ПолеТабличногоДокументаПояснения" + Инд];
		
		ПоказателиПояснения.Вставить("ОргДиректор", РасшифровкаПодписи);
		ПоказателиПояснения.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОборотыСчета75_01(СохраненноеЗначение)
	
	Если ТипЗнч(СохраненноеЗначение) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из СохраненноеЗначение Цикл
			
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			ЗначениеЭлемента = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип("Число")
				И СтруктураРеквизитовФормы.ОборотыСчета75_01.Свойство(ИмяЭлемента) Тогда
				СтруктураРеквизитовФормы.ОборотыСчета75_01[ИмяЭлемента] = ЗначениеЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтраницаВидимаНаСервере(ИмяСтраницыОтчета)
	
	Результат = Ложь;
	
	ДеревоСтраницОтчета = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	
	НайденнаяСтраницаОтчета = ДеревоСтраницОтчета.Строки.Найти(ИмяСтраницыОтчета, "ИмяСтраницы");
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Если НЕ ЭтоАдресВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	УдалитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = Неопределено;
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		ИменаЗаполняемыхРазделов = СтруктураРеквизитовФормы.ИменаАвтоЗаполняемыхРазделов;
		
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			Для Каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИменаЗаполняемыхРазделов.Найти(ИмяРаздела) <> Неопределено Тогда
				
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
				МассивСтрокВЗ_1 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
				МассивСтрокВЗ_2 = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				
				ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
				
				Для Каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
					ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
				КонецЦикла;
				Для Каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
					ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
						= ЭтотОбъект["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Сведения для исключения из показателей расчета стоимости чистых активов.
	Если ИменаЗаполняемыхРазделов.Найти("Баланс") <> Неопределено Тогда
		ОборотыСчета75_01 = Неопределено;
		Если СтруктураДанных.Свойство("ОборотыСчета75_01", ОборотыСчета75_01) Тогда
			УстановитьОборотыСчета75_01(ОборотыСчета75_01);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567003", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568003", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567004", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568004", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		РегламентированнаяОтчетность.ПоместитьВКэш(ТаблицаРасшифровки, УникальныйИдентификатор,
			СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	СтруктураМСЧ = Неопределено;
	Если СтруктураДанных.Свойство("СтруктураМногострочныхЧастей", СтруктураМСЧ) И ТипЗнч(СтруктураМСЧ) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры ИЗ СтруктураМСЧ Цикл
			СтруктураМногострочныхЧастей.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		СтруктураДанныхБаланс.Очистить();
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ФормаОтчета" Тогда
		СтруктураДанныхФормаОтчета.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОИК" Тогда
		СтруктураДанныхОИК.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОДДС" Тогда
		СтруктураДанныхОДДС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОЦИПС" Тогда
		СтруктураДанныхОЦИПС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "РасчетАктивов" Тогда
		СтруктураДанныхРасчетАктивов.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения1" Тогда
		СтруктураДанныхПояснения1.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения2" Тогда
		СтруктураДанныхПояснения2.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения3" Тогда
		СтруктураДанныхПояснения3.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения4" Тогда
		СтруктураДанныхПояснения4.Очистить();
		// Обновление структуры блоков разделов отчета. Ранее сохраненные отчеты могут содержать строки
		// неиспользующиеся в актуальных алгоритмах.
		БлокиМакета = НоваяСтруктураБлоковПояснения4();
		СтруктураОтчета.Пояснения4.Вставить("БлокиМакета", БлокиМакета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения5" Тогда
		СтруктураДанныхПояснения5.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения6" Тогда
		СтруктураДанныхПояснения6.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения7" Тогда
		СтруктураДанныхПояснения7.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения8" Тогда
		СтруктураДанныхПояснения8.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения9" Тогда
		СтруктураДанныхПояснения9.Очистить();
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 2 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
		ИначеЕсли ОчищатьНомерКорректировки Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ВидСдачиОтчетности = 1;
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда
				ОблВидОтчетности.Значение = "Обычная";
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
				
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Если НаимТекущегоРаздела <> "ДополнительныеФайлы" Тогда
				Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
					Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Продолжить;
					КонецЕсли;
					СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Модифицированность = Истина;
			
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	ПоказателиНеПодлежащиеОчистке.Добавить("НомерКорректировки");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетности");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаПодписиОтчета");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаУтвОтчетности");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если ЗначениеЗаполнено(НаимТекущегоРаздела)
		   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение = Неопределено ИЛИ НЕ ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита Тогда
			Если НЕ (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов"
				И НаимТекущегоРаздела <> "РасчетАктивов"
				И ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число")) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ИмяФормыНастроек = Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") + 6)
	                 + "НастройкиОтчета";
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыНастроек, ПараметрыФормы, ЭтотОбъект);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтотОбъект, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтотОбъект, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML();
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуЗакрытияМесяца" Тогда
		
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуЗакрытияМесяца(
														   СтруктураРеквизитовФормы.Организация,
														   СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	КонецЕсли;
													   
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧГ=");
	
КонецФункции

&НаСервере
Процедура ИзменитьНазванияОтчетов(ИмяТекРаздела)
	
	НазваниеОПУ = НазваниеОПУ();
	НазваниеОЦИПС = НазваниеОЦИПС();
	
	Если ИмяТекРаздела = "ФормаОтчета" Тогда
		ТабличныйДокумент.Области.НазваниеОтчета.Текст          = НазваниеОПУ;
		ТабличныйДокумент.Области.НазваниеСтрокиСправочно.Текст = НазваниеСтрокиСправочно_ОПУ();
		ТабличныйДокумент.Области.НазваниеСтроки2900.Текст      = НазваниеСтроки2900_ОПУ();
	ИначеЕсли ИмяТекРаздела = "ОЦИПС" Тогда
		ТабличныйДокумент.Области.НазваниеОтчета.Текст     = НазваниеОЦИПС;
		ТабличныйДокумент.Области.НазваниеСтроки6240.Текст = НазваниеСтроки6240_ОЦИПС();
	КонецЕсли;
	
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "ФормаОтчета");
	
	Если НЕ РазделФормаОтчета = Неопределено Тогда
		РазделФормаОтчета.КолонкаРазделыОтчета = НазваниеОПУ;
	КонецЕсли;
	
	РазделОЦИПС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "ОЦИПС");
	
	Если НЕ РазделОЦИПС = Неопределено Тогда
		РазделОЦИПС.КолонкаРазделыОтчета = НазваниеОЦИПС;
	КонецЕсли;
		
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "ФормаОтчета");
	РазделФормаОтчета.Представление = НазваниеОПУ;
		
	РазделФормаОтчета = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "ФормаОтчета");
	РазделФормаОтчета.Представление = НазваниеОПУ;
			
	РазделОЦИПС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "ОЦИПС");
	РазделОЦИПС.Представление = НазваниеОЦИПС;
	
	РазделОЦИПС = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(мДеревоВыбранныхСтраниц.ПолучитьЭлементы(), "ИмяСтраницы", "ОЦИПС");
	РазделОЦИПС.Представление = НазваниеОЦИПС;
	
	ЗаполнитьЗаголовкиВРазделахОтчетностиПоЕдиницеИзмерения(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Функция НазваниеОПУ()
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		Возврат "Отчет о финансовых результатах";
	Иначе
		Возврат "Отчет о прибылях и убытках";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеСтроки2900_ОПУ()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		Возврат "Справочно" + Символы.ПС + "Базовая прибыль (убыток) на акцию";
	Иначе
		Возврат "Базовая прибыль (убыток) на акцию";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеСтрокиСправочно_ОПУ()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		Возврат "";
	Иначе
		Возврат "СПРАВОЧНО";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеОЦИПС()
	
	Если ДатаПодписи >= '2013-01-01' Тогда
		Возврат "Отчет о целевом использовании средств";
	Иначе
		Возврат "Отчет о целевом использовании полученных средств";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НазваниеСтроки6240_ОЦИПС()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2015-01-01' Тогда
		Возврат "Прибыль от приносящей доход деятельности";
	Иначе
		Возврат "Прибыль от предпринимательской деятельности организации";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОчиститьПолеПодписиБухгалтера()
	
	Если НЕ ТабличныйДокумент.Области.Найти("ПодписьБухгалтер") = Неопределено
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов" Тогда
		ТабличныйДокумент.Области.ПодписьБухгалтер.Очистить(Истина, Истина, Истина);
		ТабличныйДокумент.Области.ОргБухгалтер.Имя = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачалаОперации <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(
			"ЗаполнениеФормыБухгалтерскаяОтчетность", 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьИнформационноеОкно(Команда)
			
	ОткрытьУведомление(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура СкрытьСсылкуНастройкаСоставаОрганизаций()
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкрытьПоказательДатаУтвержденияОтчетности()
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '2015-01-01' Тогда
		
		НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		
		Обл1 = ТабличныйДокумент.Области.Найти("ДатаУтвОтчетности");
		Если Обл1 <> Неопределено Тогда
			Обл1.Значение = "";
			Обл1.Формат = "";
			Обл1.ГраницаСверху = НетЛинии;
			Обл1.ГраницаСнизу = НетЛинии;
			Обл1.ГраницаСлева = НетЛинии;
			Обл1.ГраницаСправа = НетЛинии;
			Обл1.Защита = Истина;
			Обл1.ЦветФона = мСтруктураЦветовРаскраски["_5"];
		КонецЕсли;
		Обл1 = ТабличныйДокумент.Области.Найти("ДатаУтвОтчетностиЗаголовок");
		Если Обл1 <> Неопределено Тогда
			Обл1.Текст = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Отправка бух. отчетности в Росстат
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Отправка бух. отчетности в Росстат
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	УдалитьФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
		УдалитьФайл("ФайлПояснительнойЗаписки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УдалитьФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
		УдалитьФайл("ФайлАудиторскогоЗаключения");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УдалитьФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗаявленияРевизионногоСоюзаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаЗаявленияРевизионногоСоюза) Тогда
		УдалитьФайл("ФайлЗаявленияСоюзаСельхозпроизводителей");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				Элементы.ВариантЗаполнения.Доступность = Истина;
				Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			Элементы.ВариантЗаполнения.Доступность = Истина;
			Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для Каждого ТекСтрока Из ЭтотОбъект["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

// Отправка бух. отчетности в Росстат
&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаНавигационнойСсылкиКраснойПанели(
		ЭтотОбъект, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатСкрытьНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОтправкаБухОтчетностиВРосстатСкрытьНажатие(
		ЭтотОбъект, 
		Элемент);
		
КонецПроцедуры
// Конец Отправка бух. отчетности в Росстат

&НаСервере
Функция СформироватьФайлXLSВХранилище()
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		ЭтоЗакладкаПояснения = (Лев(СтрокаУровня1.ИмяСтраницы, 9) = "Пояснения");
		Если НЕ ЭтоЗакладкаПояснения Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          "ВидПечати");
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтотОбъект["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ИсходныйТабличныйДокумент);
	
	ТабличныйДокументДляСохранения = Новый ТабличныйДокумент;
	
	Для Каждого ТабличныйДокументПояснений Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		УдалитьНенужноеИзПечатнойФормы(ТабличныйДокументПояснений.Значение);
		ТабличныйДокументДляСохранения.Вывести(ТабличныйДокументПояснений.Значение);
	КонецЦикла;
	
	АдресВХранилище = Неопределено;
	
	// Удаление лишних пустых строк из заполненного документа.
	ВсегоСтрок = ТабличныйДокументДляСохранения.ВысотаТаблицы;
	
	Если ВсегоСтрок > 0 Тогда
		ИспользованиеСтрок = Новый Массив(ВсегоСтрок);
		
		Для Каждого Область Из ТабличныйДокументДляСохранения.Области Цикл
			Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;
			
			Для Инд = Область.Верх По Область.Низ Цикл
				ИспользованиеСтрок[Инд-1] = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Инд = 1 По ВсегоСтрок Цикл
			Если ИспользованиеСтрок[ВсегоСтрок - Инд] = Неопределено Тогда
				НомерСтроки = ВсегоСтрок - Инд + 1;
				УдаляемаяОбласть = ТабличныйДокументДляСохранения.Область(НомерСтроки, , НомерСтроки, );
				ТабличныйДокументДляСохранения.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокументДляСохранения.Область().ЦветФона = Новый Цвет();
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ТабличныйДокументДляСохранения.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
		
		СохраняемыйФайл = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(СохраняемыйФайл, УникальныйИдентификатор);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.';
											|en = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции

&НаСервере
Функция СлужебнаяИнформацияДляТехническогоСпециалиста()
	
	СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(
		НСтр("ru = 'Актуальная версия служебных структур данных: %1';
			|en = 'Актуальная версия служебных структур данных: %1'"), ВерсияСтруктурыДанных());
		
	Если ТипЗнч(СтруктураРеквизитовФормы.мСохраненныйДок) =Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		СохраненныеДанные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанные.Свойство("ВерсияСтруктурыДанных")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияСтруктурыДанных) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Сохраненная версия служебных структур данных: %2';
				|en = '%1
				|Сохраненная версия служебных структур данных: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияСтруктурыДанных);
		КонецЕсли;
		
		Если СохраненныеДанные.Свойство("ВерсияКонфигурации")
		   И ЗначениеЗаполнено(СохраненныеДанные.ВерсияКонфигурации) Тогда
			СлужебнаяИнформацияДляТехническогоСпециалиста = СтрШаблон(НСтр("ru = '%1
				|Отчет сохранен в конфигурации: %2';
				|en = '%1
				|Отчет сохранен в конфигурации: %2'"),
				СлужебнаяИнформацияДляТехническогоСпециалиста,
				СохраненныеДанные.ВерсияКонфигурации);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СлужебнаяИнформацияДляТехническогоСпециалиста;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСохранениеФайлаПояснений(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Если ВебКлиент Тогда
	Возврат;
	#КонецЕсли
	
	УдалитьИзВременногоХранилища(ДополнительныеПараметры);
	
	ИмяКаталога = Неопределено;
	Если ЗначениеЗаполнено(ПолученныеФайлы) И ПолученныеФайлы.Количество() > 0 Тогда
		ПолноеИмяФайла = ПолученныеФайлы[0].ПолноеИмя;
		СоставляющиеИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайла);
		ИмяКаталога = СоставляющиеИмениФайла.Путь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяКаталога) Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Пояснения сохранены';
				|en = 'Пояснения сохранены'"),
			"file:///" + ИмяКаталога,
			СтрШаблон(НСтр("ru = 'в папку %1';
							|en = 'в папку %1'"), ИмяКаталога),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРазделаПоИдентификатору(ИдентификаторРаздела, ИмяМакета = Неопределено, ДатаКонцаПериодаОтчета = Неопределено)
	
	ПредставлениеРаздела = ИдентификаторРаздела;
	
	Если ИдентификаторРаздела = "Баланс" Тогда
		ПредставлениеРаздела = "Бухгалтерский баланс";
	ИначеЕсли ИдентификаторРаздела = "ФормаОтчета" Тогда
		ПредставлениеРаздела = "Отчет о прибылях и убытках";
	ИначеЕсли ИдентификаторРаздела = "ОИК" Тогда
		ПредставлениеРаздела = "Отчет об изменениях капитала";
	ИначеЕсли ИдентификаторРаздела = "ОДДС" Тогда
		ПредставлениеРаздела = "Отчет о движении денежных средств";
	ИначеЕсли ИдентификаторРаздела = "ОЦИПС" Тогда
		ПредставлениеРаздела = ЗаголовокСтраницыВДеревеРазделовОтчета(ИдентификаторРаздела, ИмяМакета, ДатаКонцаПериодаОтчета);
	ИначеЕсли ИдентификаторРаздела = "РасчетАктивов" Тогда
		ПредставлениеРаздела = ЗаголовокСтраницыВДеревеРазделовОтчета(ИдентификаторРаздела, ИмяМакета, ДатаКонцаПериодаОтчета);
	ИначеЕсли ИдентификаторРаздела = "Пояснения1" Тогда
		ПредставлениеРаздела = "Пояснения 1. НМА и НИОКР";
	ИначеЕсли ИдентификаторРаздела = "Пояснения2" Тогда
		ПредставлениеРаздела = "Пояснения 2. Основные средства";
	ИначеЕсли ИдентификаторРаздела = "Пояснения3" Тогда
		ПредставлениеРаздела = "Пояснения 3. Финансовые вложения";
	ИначеЕсли ИдентификаторРаздела = "Пояснения4" Тогда
		ПредставлениеРаздела = "Пояснения 4. Запасы";
	ИначеЕсли ИдентификаторРаздела = "Пояснения5" Тогда
		ПредставлениеРаздела = "Пояснения 5. Дебиторская и кредиторская задолженность";
	ИначеЕсли ИдентификаторРаздела = "Пояснения6" Тогда
		ПредставлениеРаздела = "Пояснения 6. Затраты на производство";
	ИначеЕсли ИдентификаторРаздела = "Пояснения7" Тогда
		ПредставлениеРаздела = "Пояснения 7. Оценочные обязательства";
	ИначеЕсли ИдентификаторРаздела = "Пояснения8" Тогда
		ПредставлениеРаздела = "Пояснения 8. Обеспечения обязательств";
	ИначеЕсли ИдентификаторРаздела = "Пояснения9" Тогда
		ПредставлениеРаздела = "Пояснения 9. Государственная помощь";
	ИначеЕсли ИдентификаторРаздела = "ДополнительныеФайлы" Тогда
		ПредставлениеРаздела = "Дополнительные файлы";
	КонецЕсли;
	
	Возврат ПредставлениеРаздела;
	
КонецФункции

&НаСервере
Функция ОбъектОтчета(ПолноеИмяФормы) Экспорт
	
	Если ОбъектОтчета = Неопределено Тогда
		ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПолноеИмяФормы);
	КонецЕсли;
	
	Возврат ОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ПолноеИмяФормы)
	
	Форма_Имя = СтрЗаменить(ПолноеИмяФормы, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ПолноеИмяФормы)
	
	Возврат Сред(ПолноеИмяФормы, СтрНайти(ПолноеИмяФормы, ".Форма.") + 7);
	
КонецФункции

#Область ИнтерфейсОбращенияКМодулюОтчета

&НаСервере
Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПолучитьДеревоНастроекСоставаДопСтрок(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ИмяРаздела,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОтчета2011Кв4()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПолучитьСтруктуруОтчета2011Кв4(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура ДополнитьСтруктуруОтчетаОбщимиОтчетами(СоставНастройкаОтчета)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ДополнитьСтруктуруОтчетаОбщимиОтчетами(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СоставНастройкаОтчета,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяМакетыЕНВД() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ИспользуютсяМакетыЕНВД(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ВключенВОтчет(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ДеревоНастроекСтрокРасшифровки,
		ИмяОбластиДопСтроки);
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.СформироватьСтруктуруПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		мДанныеОтчета,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПараметрыВыгрузкиОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьВозможностьВыгрузки(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета,
		ПараметрыВыгрузки,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьДанными(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ПараметрыВыгрузки,
		ДеревоВыгрузки,
		ЭтотОбъект,
		мДанныеОтчета,
		СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьДанные(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		Узел,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ПолучитьСписокВычитаемыхПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция НоваяСтруктураБлоковПояснения4()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НоваяСтруктураБлоковПояснения4(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Процедура ВосстановитьВариантыАвтозаполненияПоказателейРаздела(ВариантыЗаполнения, СохраненныеВарианты)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ВосстановитьВариантыАвтозаполненияПоказателейРаздела(
		ВариантыЗаполнения,
		СохраненныеВарианты);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьМакетОтчета(МакетОтчета, ИмяРаздела, ПараметрыПодготовки)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.ПодготовитьМакетОтчета(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		МакетОтчета,
		ИмяРаздела,
		ПараметрыПодготовки);
	
КонецПроцедуры

&НаСервере
Функция АдресОрганизацииПоУмолчанию(Организация)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.АдресОрганизацииПоУмолчанию(Организация);
	
КонецФункции

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	ОбъектОтчета.УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
	
КонецПроцедуры

&НаСервере
Функция ВерсияСтруктурыДанных()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.ВерсияСтруктурыДанных(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция СохраненныеДанные(СохраненныйДокумент)
	
	ОбъектОтчета = ОбъектОтчета(РегламентированнаяОтчетностьВызовСервера.ПолныйПутьКФорме(
		СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета, ИмяФормы));
	
	Возврат ОбъектОтчета.СохраненныеДанные(СохраненныйДокумент);
	
КонецФункции

&НаСервере
Функция НовыеПараметрыАвтозаполнения()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НовыеПараметрыАвтозаполнения(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция НовыйКонтейнерПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ИмяФормы);
	
	Возврат ОбъектОтчета.НовыйКонтейнерПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма);
	
КонецФункции

#КонецОбласти

#КонецОбласти
