#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт; // для варианта внешнего отчета
Перем мВерсияОтчета Экспорт; // для варианта внешнего отчета

// Структура реквизитов формы отчета.
Перем СтруктураРеквизитовФормы;

// Соответствие, содержащее кеш проверенных по классификатору адресов.
// Процесс проверки может включать http запрос и занимать много времени.
// При этом адреса часто повторяются.
Перем СоответствиеКешАдресов;

// Массивы кодов из макета Списки.
Перем СписокКодовДеятельности, СписокКодовПродукции;
// Структура адреса из схемы xsd, если отличается от стандартной.
Перем ОписаниеСтруктурыАдресаИзОтчета;
// Признак режима отладки.
Перем РежимОтладки;
// Предельное количество ошибок, по достижении которого дальнейшая проверка прекращается.
Перем МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок;
Перем МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений;
// Дата начала и конца отчета.
Перем ДатаНачалаОтчета, ДатаКонцаОтчета;
// Границы дат по xsd.
Перем НижняяГраницаДатыПоXSD, ВерхняяГраницаДатыПоXSD;

// Данные обособленных подразделений разделов.
Перем ДанныеОП;

// Справочники.
Перем СправочникиОтчета;

// Документ.РегламентированныйОтчет к которому привязан отчет.
Перем ДокументСсылкаАлкоОтчет;

// Структура получаемая функцией ПолучитьСтруктуруСервисРегистров()
// модуля формы отчета.
Перем СтруктураСервисРегистров;

// Объект метаданных отчета.
Перем ОбъектЭтогоОтчета;

// Переменные, полученные из реквизитов формы отчета.
Перем СтруктураДанныхТитульный, мДеревоВыбранныхСтраниц, ДополнительныеДанные,
	НомерКорректировки, ДатаПодписи;

// Переменные, используемые при проверке и выгрузке отчета.
Перем ДеревоВыгрузки, ПараметрыВыгрузки, СтатусПроверки, ИмяФормыОбъекта;

// Переменные, полученные из реквизитов формы отчета.
Перем ТаблицаСтраницыЛицензии, ТаблицаСтраницыДекларация;

// Таблица значений, в которую записываются найденные при проверке выгрузки ошибки.
Перем ТаблицаСообщений;

// Таблица значений, в который записываются информационные сообщения при проверке выгрузки ошибки.
Перем ТаблицаСообщенийДляСведения;

// Счетчики для справочников отчета.
Перем СчетчикИДПроизвИмп, СчетчикИдПоставщиков, СчетчикИдЛицензий;

// Данные движений продукции с привязкой к производителю-импортеру.
Перем ДанныеДвижений;

// Вспомогательные переменные.
Перем ВсегоСтрокПоРазделу1, ВсегоСтрокПоРазделу2, НужноОбработатьСтрок,
	ОбработаноСтрок, КолСтрокПриПроверкеЗаполнения;

// Содержит процент выполнения процесса проверки или выгрузки, который соответсвует проверке заполнения разделов.
// Для процесса проверки с ошибками - 100%, проверка без ошибок - 90%, при выгрузке без ошибок - 84%.
Перем ПроцентБезЗавершающейПроверкиДанных, ПроцентБезКонвертацииАрхивации;

// Адрес временного хранилища для обмена вспомогательной информацией (процент выполнения, этап).
Перем ВспомогательныйАдрес;
// Содержит шаг информирования о проценте выполнения процесса.
Перем ШагИнформирования;

// Признак отсутствия ошибок при проверке.
Перем НетОшибокПроверки;

// Версия БСП.
Перем ВерсияБСПЧислом;

// Квартал отчета, от него зависит расчет.
Перем КварталОтчета;
#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ОбработкаПриЗаполнении

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
// Используется при импорте таблиц значений в регистр сведений отчета.
// Совпадает с процедурой ОбработкаЗаписи(), но сделана отдельной для возможности при необходимости
// поменять работу заполнения регистра только лишь поменяв отчет, не трогая глобальные модули.
// Это нужно для поддержки выпуска внешних отчетов в случае серьезных ошибок.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		СтрокаТЗ					- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаСтрокиТаблицыСтарогоФормата(ИмяРегистра, СтрокаТЗ,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	ОбработкаЗаписи(ИмяРегистра, СтрокаТЗ, ВышеБРО_1_1_11_0, ДатаКонцаПериодаОтчета);

КонецПроцедуры
#КонецОбласти

#Область ОбработкаПриЗаписиИзФормЗаписиРегистров

// В зависимости от имени регистра обрабатывает поля ресурсов, измерений, реквизитов записи
// или поля структуры, строки таблицы значений и вычисляет значения при необходимости.
//
// Параметры:
//
//	 	ИмяРегистра 				- Строка - Имя регистра, запись которого обрабатывается.
// 		Запись 						- Запись регистра сведений, строка таблицы значений или Структура. 
//									Должна соответствовать измерениям, ресурсам и реквизитам регистра 
//									сведений с именем ИмяРегистра.
//		ВышеБРО_1_1_11_0			- Булево. Признак, что текущая версия БРО выше 1.1.11.0
//		ДатаКонцаПериодаОтчета		- Дата.
//
Процедура ОбработкаЗаписи(ИмяРегистра, Запись,
		ВышеБРО_1_1_11_0 = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	Если ВышеБРО_1_1_11_0 = Неопределено Тогда
		ВышеБРО_1_1_11_0 = РегламентированнаяОтчетностьАЛКОВызовСервера.СравнениеВерсииПодсистемы("РегламентированнаяОтчетность", "1.1.11.0");
	КонецЕсли;

	Если ЗначениеЗаполнено(Запись.Документ) И ВышеБРО_1_1_11_0 Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.Документ, "Организация");
		Запись.Организация = ЗначенияРеквизитов.Организация;
	КонецЕсли;

	Если ИмяРегистра = "СведенияРеглОтчетАлкоПрил24Декларация" Тогда
	
		АдресМестаДеятельности = СокрЛП(Запись.П000010000301);
		Запись.П000010000301 = АдресМестаДеятельности;
		
		РегламентированнаяОтчетностьАЛКО.ОбработкаСохраненияАдреса(
									Запись.П000010000301XML, Запись.П000010000301);
				
		ВидДеятельности = СокрЛП(Запись.П000010000302);
		Запись.П000010000302 = ВидДеятельности;
		
		Запись.П000010000303 = СокрЛП(Запись.П000010000303);
		
		Запись.П000010000304 = СокрЛП(Запись.П000010000304);
		КодПродукции = Запись.П000010000304; 

		Запись.ХешИдКодПродВидДеятельности = РегламентированнаяОтчетностьАЛКО.ПолучитьХешSHA256(
							КодПродукции + "/" + ВидДеятельности + "/" + АдресМестаДеятельности);

	КонецЕсли;

	Если ИмяРегистра = "СведенияРеглОтчетАлкоЛицензии" Тогда		
		РегламентированнаяОтчетностьАЛКО.ОбработкаЗаписиРегистраАлкоЛицензии(Запись);		
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьПроизводителяИмпортера(ИНН, КПП, ПолноеНаименование,
		КодПродукции) Экспорт

	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьПроизводителяИмпортераАЛКО(ИНН, КПП, ПолноеНаименование, КодПродукции, "НеПиво");
КонецФункции

Функция ОпределитьПоставщика(ИНН, КПП, ПолноеНаименование) Экспорт

	Возврат РегламентированнаяОтчетностьАЛКО.ОпределитьКонтрагентаИзЛицензийПоставщиковАЛКО(ИНН, КПП, ПолноеНаименование, "НеПиво");
КонецФункции
#КонецОбласти

#Область Расчет

// Производит расчет "по строке" полей ресурсов Записи. 
//
// Параметры:
//
//	 	ИдГруппы 				- Строка - Имя табличной группы, к которой относится регистр сведений.
// 		Запись 					- Запись регистра сведений	- Запись, которая обрабатывается.
//		КварталОтчета			- Число - Номер квартала отчета. Нужен в некоторых отчетах, в остальных
//								параметр для унификации вызова процедуры Расчет для любых отчетов
//								из процедур модуля РегламентированнаяОтчетностьАЛКО.
//
Процедура Расчет(ИдГруппы, Запись, КварталОтчета, ДатаКонцаПериодаОтчета = Неопределено) Экспорт

	Если ИдГруппы = "П0000100003" Тогда
		РасчетДекларация(Запись, КварталОтчета);
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Служебные

Процедура СообщитьОбОшибкеЗаполнения(ДокументСсылка,
		ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета = Ложь, СтруктураОшибки,
		МаксимальноеКоличествоОшибок = Неопределено, ТекущееКоличествоОшибок = Неопределено)

	РегламентированнаяОтчетностьАЛКО.СообщитьОбОшибкеЗаполнения(
		ДокументСсылка, ТаблицаСообщенийОбОшибках, СтатусПроверкиОтчета, СтруктураОшибки, РежимОтладки,
		МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

КонецПроцедуры

Функция ПолучитьИмяРегистраСведений(ИдГруппы)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьИмяРегистраСведенийАЛКО(ИдГруппы, СтруктураРеквизитовФормы);

КонецФункции

Функция ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппы, ИндексСтраницы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];
		 
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоСтраницеИзСервисРегистровГруппы(
						СервисРегистровГруппы, ИндексСтраницы, БезПомеченныхНаУдаление);
	
КонецФункции

Функция ПолучитьКоличествоСтрокПоГруппе(ИдГруппы, БезПомеченныхНаУдаление = Истина)
	
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);
	СервисРегистровГруппы = СтруктураСервисРегистров[ИмяРегистраСведений];			
	
	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ПолучитьКоличествоСтрокПоГруппеИзСервисРегистровГруппы(
						СервисРегистровГруппы, БезПомеченныхНаУдаление);
	
КонецФункции
					
Функция ЗначениеПоКлючуСтруктуры(Ключ, Структура)

	Возврат РегламентированнаяОтчетностьАЛКОКлиентСервер.ЗначениеПоКлючуСтруктуры(Ключ, Структура);

КонецФункции

Функция ИзвлечьСтруктуруXML()

	Возврат РегламентированнаяОтчетностьАЛКО.ИзвлечьСтруктуруXMLАЛКО(ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета);

КонецФункции
#КонецОбласти


#Область СлужебныеРасчет

Процедура РасчетДекларация(Запись, КварталОтчета)

	// На всякий случай проверяем числовые значения, такая ситуация возможна, 
	// если вместо записи регистра передается 
	// строка таблицы значений при импорте из старого формата или при заполнении по данным ИБ.
	Для Индекс = 5 По 12 Цикл
		
		НомерКолонки = Формат(Индекс, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 05, 06..12.
		Запись["П0000100003" + НомерКолонки] = ?(Запись["П0000100003" + НомерКолонки] = Неопределено, 
													0, Запись["П0000100003" + НомерКолонки]);
	
	КонецЦикла; 
	
	// Мощность за год равна сумме мощностей по кварталам с 1-го по 4-ый.
	Запись["П000010000306"] = Запись["П000010000307"] + Запись["П000010000308"] 
							+ Запись["П000010000309"] + Запись["П000010000310"];
							
	МощностьЗаКварталОтчета = Запись["П0000100003" + Формат(6 + КварталОтчета, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН=")];
							
	// Коэффициент использования за период отчета в процентах.
	Если МощностьЗаКварталОтчета > 0 Тогда	
		Запись["П000010000312"] = (Запись["П000010000311"]/МощностьЗаКварталОтчета) * 100;	
	Иначе
		Запись["П000010000312"] = 0;
	КонецЕсли; 
	
КонецПроцедуры
#КонецОбласти

#Область ПроверитьВыгрузку

Функция ПроверитьЗаполнениеТитульный(СтатусПроверки)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
	
	СтруктураПараметров.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураПараметров.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураПараметров.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	

	Результат = РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеТитульный(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
					СтатусПроверки, ПараметрыВыгрузки, СтруктураПараметров, РежимОтладки, СоответствиеКешАдресов);
								
	СтруктураПараметров.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураПараметров.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
	Возврат Результат;

КонецФункции

Функция ЛицензируемаяДеятельность()
	
	Возврат РегламентированнаяОтчетностьАЛКО.ЛицензируемаяДеятельностьАЛКО(ТаблицаСтраницыЛицензии, "П000000000105");

КонецФункции

Функция УказанаЛицензия(ДанныеЛиста)

	Возврат РегламентированнаяОтчетностьАЛКО.УказанаЛицензия(ДанныеЛиста, "П000000000105");

КонецФункции

Процедура ПроверитьЗаполнениеЛицензии(СтатусПроверки)

	СтруктураСведенийРазделаЛицензий = Новый Структура;

	// Заполняются ли в разделе лицензии декларанта - Истина, или только адреса мест деятельности - Ложь.
	СтруктураСведенийРазделаЛицензий.Вставить("ЕстьЛицензииВРазделеЛицензии", Истина);
	СтруктураСведенийРазделаЛицензий.Вставить("ЛицензияМожетБытьПустой", Истина);

	// Если не передавать - по умолчанию будет установлен "П000000000105".
	СтруктураСведенийРазделаЛицензий.Вставить("ИмяПоляКодВидаДеятельности", "П000000000105");

	// Нижняя и верхняя границы даты по схеме XSD. 
	// Если не задана - по умолчанию устанавливается в '1000.01.01 00:00.00' и '2099.12.31 23:59.59' соответственно.	
	СтруктураСведенийРазделаЛицензий.Вставить("НижняяГраницаДатыПоXSD", НижняяГраницаДатыПоXSD);
	СтруктураСведенийРазделаЛицензий.Вставить("ВерхняяГраницаДатыПоXSD", ВерхняяГраницаДатыПоXSD);

	// Даты начала и конца отчета.	
	СтруктураСведенийРазделаЛицензий.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
	СтруктураСведенийРазделаЛицензий.Вставить("ДатаКонцаОтчета", ДатаКонцаОтчета);

	// Массив кодов видов деятельности из макета Списки нужного периода.
	СтруктураСведенийРазделаЛицензий.Вставить("СписокКодовДеятельности", СписокКодовДеятельности);

	СтруктураСведенийРазделаЛицензий.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
	СтруктураСведенийРазделаЛицензий.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
	РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеРазделаЛицензии(ДокументСсылкаАлкоОтчет, СтатусПроверки, ТаблицаСтраницыЛицензии, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтруктураСведенийРазделаЛицензий, РежимОтладки);

	СтруктураСведенийРазделаЛицензий.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
	СтруктураСведенийРазделаЛицензий.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДекларации(СтатусПроверки)

	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	ПоказательОП = "ОбособленноеПодразделение";
	
	// Необходимость проверки определяется переменной ЕстьАктивныеСтрокиВТаблице.
	ИдГруппыДекларация = СтруктураРеквизитовФормы.мИдГруппы12;
			
	ДанныеРаздела = ТаблицаСтраницыДекларация;

	ИмяРегистраДекларация = ПолучитьИмяРегистраСведений(ИдГруппыДекларация);
	СервисРегистровДекларация = СтруктураСервисРегистров[ИмяРегистраДекларация];
	
	НомерЛиста = 0;
	Для Каждого ЛистРаздела Из ДанныеРаздела Цикл

		НомерЛиста = НомерЛиста + 1;

		СтруктураСведенийПроверки = Новый Структура;
		СтруктураСведенийПроверки.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
		СтруктураСведенийПроверки.Вставить("ИмяРаздела", ИмяРаздела);
		СтруктураСведенийПроверки.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
		СтруктураСведенийПроверки.Вставить("НомерЛиста", НомерЛиста);
		СтруктураСведенийПроверки.Вставить("ЛистРаздела", ЛистРаздела);

		// Если есть заполненные строки при незаполненном ОП - нужно выдать ошибку.
		КолАктивныхСтрокДекларация = ПолучитьКоличествоСтрокПоСтраницеГруппы(ИдГруппыДекларация, НомерЛиста - 1, Истина);
				
		ЕстьАктивныеСтрокиВТаблице = (КолАктивныхСтрокДекларация > 0);

		СтруктураСведенийПроверки.Вставить("ПроверятьНаПустоту", ЕстьАктивныеСтрокиВТаблице);

		СтруктураСведенийПроверки.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);
		
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
		СтруктураСведенийПроверки.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
	
		СведенияОбОП = Неопределено;

		РегламентированнаяОтчетностьАЛКО.ВерноеЗаполнениеОП(
					ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, СтатусПроверки, 
					СтруктураСведенийПроверки, СведенияОбОП, РежимОтладки, СоответствиеКешАдресов);

		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
		СтруктураСведенийПроверки.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
		
		СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, Неопределено, Неопределено, РежимОтладки);

		ИндексСтраницыРегистраДекларация = СервисРегистровДекларация[НомерЛиста - 1].ИндексСтраницыРегистра;
		
		ИдОП = "";
				
		Если ТипЗнч(ЛистРаздела.ДополнительныеДанные[0].Значение) = Тип("Структура")
				И ЛистРаздела.ДополнительныеДанные[0].Значение.Свойство("СведенияОбОП", СведенияОбОП) Тогда

			Если ЗначениеЗаполнено(СведенияОбОП.КПП)
					или ЗначениеЗаполнено(СведенияОбОП.Наименование) Тогда

				Наименование_ОП = СведенияОбОП.Наименование;
				КПП_ОП = СведенияОбОП.КПП;
				ИдОП = ИдентификаторОП(СведенияОбОП);

				// Контроль записей на уникальность в Разделе("КПП ОП" + "Наименование ОП").
				Если НЕ ДанныеОП["Декларация"].Получить(ИдОП) = Неопределено Тогда

				// Такое ОП уже есть.
					ЛистПовтора = ДанныеОП["Декларация"][ИдОП]["НомерЛиста"];
					ЛистПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(ЛистПовтора);
					ТекстОписанияОшибки = СтрокаГде
						+ " обособленное подразделение повторяет заполненное на листе "
						+ ЛистПовтораСтроковый + "!
						|ОП: " + Наименование_ОП + ?(ПустаяСтрока(КПП_ОП), "", ", (КПП "
						+ КПП_ОП + ")")
						+ ?(НЕ ЗначениеЗаполнено(СведенияОбОП.ПредставлениеАдреса), "", "
						|Адрес: " + СведенияОбОП.ПредставлениеАдреса);

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", ПоказательОП);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ПовторОП");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
												МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Иначе

					ДанныеОП["Декларация"].Вставить(ИдОП, Новый Соответствие);

					КопияСведенияОбОП = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("ОП", КопияСведенияОбОП);

					ДанныеОП["Декларация"][ИдОП].Вставить("НомерЛиста", НомерЛиста);

					ДанныеОП["Декларация"][ИдОП].Вставить("ИндексСтраницыРегистраДекларация", ИндексСтраницыРегистраДекларация);
					
					ДанныеОП["Декларация"][ИдОП].Вставить("КолСтрокПоДекларация", 0);
					
					ДанныеДвижений.Вставить(ИдОП, Новый Соответствие);

				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;

		Если КолАктивныхСтрокДекларация > 0 Тогда
			ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппыДекларация, НомерЛиста, ИдОП);
		КонецЕсли;
		
		Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда

			НетОшибокПроверки = Ложь;
			ПроцентБезЗавершающейПроверкиДанных = 100;
			НужноОбработатьСтрок = НужноОбработатьСтрок / 2;

		КонецЕсли;

		Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
			ОбработаноСтрок = НужноОбработатьСтрок;			
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТаблицыДекларация(СтатусПроверки, ИдГруппы,
		НомерЛиста, ИдОП = "")

	ИндексСтраницы = НомерЛиста - 1;

	ИмяТаблицы = "";
	
	ЕстьИдОП = НЕ ПустаяСтрока(СтрЗаменить(ИдОП, "\", ""));

	// Опеределим регистр сведений.
	ИмяРегистраСведений = ПолучитьИмяРегистраСведений(ИдГруппы);

	СервисРегистров = СтруктураСервисРегистров[ИмяРегистраСведений];
	ИндексСтраницыРегистра = СервисРегистров[ИндексСтраницы].ИндексСтраницыРегистра;
	ИДДокИндСтраницы = РегламентированнаяОтчетностьАЛКО.ПолучитьИдДокИндСтраницы(ДокументСсылкаАлкоОтчет, ИндексСтраницыРегистра);

	ДанныеДвиженийПоОП = Неопределено;
	Если ЕстьИдОП Тогда
		ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
		ДанныеОП["Декларация"][ИдОП].Вставить("ИДДокИндСтраницыДекларация", ИДДокИндСтраницы);
	КонецЕсли;

	ТекущийИндексСтроки = 0;
	КолСтрокДекларация = 0;

	// Зафиксируем имена ключевых полей.
	ИмяКодаВидаПродукции = ИдГруппы + "04";
	ИмяВидаДеятельности  = ИдГруппы + "02";
	
	ИмяАдресаДеятельности 	 = ИдГруппы + "01";
	ИмяАдресаXMLДеятельности = ИдГруппы + "01XML";
	

	ИмяРаздела = "Декларация";
	СтрВКакомРазделе = "В разделе Декларация";
	КоличествоКолонокВРазделе = 12;
	
	КоличествоПервых = 1000;

	СтруктураСинонимовЗаписи = РегламентированнаяОтчетностьАЛКО.ПолучитьСтруктуруСинонимовЗаписиРегистраСведений(ИмяРегистраСведений, , Тип("Число"));
	РабочийРегистрСведений = РегистрыСведений[ИмяРегистраСведений];
	НаборЗаписей = РабочийРегистрСведений.СоздатьНаборЗаписей();
	ВременнаяЗаписьРегистра = НаборЗаписей.Добавить();
	
	Пока Истина Цикл

		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("КоличествоПервых", КоличествоПервых);
		СтруктураНастроек.Вставить("ТекущийИндексСтроки", ТекущийИндексСтроки);
		
		РезЗапросаДанных = РегламентированнаяОтчетностьАЛКО.ЗаполнитьПоСтраницеРазделаАЛКО(ИдГруппы, ИндексСтраницы, СтруктураРеквизитовФормы, , ИДДокИндСтраницы, Ложь, СтруктураНастроек);

		Если РезЗапросаДанных.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;

		Для каждого СтрокаДекларации Из РезЗапросаДанных Цикл

			НомерСтроки = СтрокаДекларации.ИндексСтроки;
			ТекущийИндексСтроки = СтрокаДекларации.ИндексСтроки;
			КолСтрокДекларация = КолСтрокДекларация + 1;

			НомерСтрокиСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(НомерСтроки);

			СтрокаЗаполнена = РегламентированнаяОтчетностьАЛКО.СтрокаДекларацииЗаполнена(СтрокаДекларации, ИдГруппы, КоличествоКолонокВРазделе);

			СтрокаГде = РегламентированнаяОтчетностьАЛКО.СтрокаГдеСообщенийОбОшибках(СтрВКакомРазделе, НомерЛиста, НомерСтрокиСтроковый, ИмяТаблицы, РежимОтладки);

			Если НЕ СтрокаЗаполнена Тогда

				ТекстОписанияОшибки = СтрокаГде + " не заполнено ни одно поле!";

				ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				Продолжить;
			КонецЕсли;

			ОбработаноСтрок = ОбработаноСтрок + 1;

			ИмяПоказателя = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;
			КодВидаПродукции = СокрЛП(СтрокаДекларации[ИмяКодаВидаПродукции]);

			СтруктураИнформацииВидаПродукции = Новый Структура;

			СтруктураИнформацииВидаПродукции.Вставить("ИмяПоказателя", ИмяПоказателя);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяРаздела", ИмяРаздела);
			СтруктураИнформацииВидаПродукции.Вставить("НомерЛиста", НомерЛиста);
			СтруктураИнформацииВидаПродукции.Вставить("СписокКодов", СписокКодовПродукции);
			СтруктураИнформацииВидаПродукции.Вставить("СтрокаГде", СтрокаГде);
			СтруктураИнформацииВидаПродукции.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			СтруктураИнформацииВидаПродукции.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			СтруктураИнформацииВидаПродукции.Вставить("ИмяТаблицы", ИмяТаблицы);
			
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			СтруктураИнформацииВидаПродукции.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			СтруктураИнформацииВидаПродукции.Вставить("МинДлинаКода", 3);
			СтруктураИнформацииВидаПродукции.Вставить("МаксДлинаКода", 5);
			
			РегламентированнаяОтчетностьАЛКО.ВерныйКодВидаПродукции(
							ДокументСсылкаАлкоОтчет, ТаблицаСообщений, ТаблицаСообщенийДляСведения, 
							СтатусПроверки, КодВидаПродукции, СтруктураИнформацииВидаПродукции, РежимОтладки);
							
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			СтруктураИнформацииВидаПродукции.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			// Данные адреса для определения принадлежности.
			ИмяПоказателяАдреса = ИмяАдресаДеятельности + "_" + НомерСтрокиСтроковый;
			
			АдресДеятельности = СокрЛП(СтрокаДекларации[ИмяАдресаДеятельности]);
			АдресДеятельностиXML = СокрЛП(СтрокаДекларации[ИмяАдресаXMLДеятельности]);
			
			СтруктураАдресДеятельности = РегламентированнаяОтчетностьАЛКО.СтруктураАдресаИзСтрокиСтруктурыХранения(
																	АдресДеятельностиXML);
																	
			КодСтраны = СтруктураАдресДеятельности.КодСтраны;
						
			РоссийскийРезидент = Истина;
			РезидентЕАЭС = Истина;
											
			////////////////////////////////////////////////////////////////////////////////								
			// Контроль Адреса.
			
			РодПадежАдресЧего = "места деятельности";
			Обязательный = Истина;
			ТолькоРоссия = РоссийскийРезидент;
			ТолькоЕАЭС = (НЕ ТолькоРоссия);
			ТолькоИностранныйКромеЕАЭС = Ложь;
			ЛюбойИностранный = Ложь;
			
			ВспомогательнаяСтруктураДанных = Новый Структура;

			ВспомогательнаяСтруктураДанных.Вставить("ИмяРаздела", ИмяРаздела);
			ВспомогательнаяСтруктураДанных.Вставить("СтрокаГде", СтрокаГде);
			ВспомогательнаяСтруктураДанных.Вставить("СтрВКакомРазделе", СтрВКакомРазделе);
			ВспомогательнаяСтруктураДанных.Вставить("Показатель", ИмяПоказателяАдреса);

			// Поля, заполненны только при проверке строчных и многостраничных разделов.
			ВспомогательнаяСтруктураДанных.Вставить("НомерЛиста", НомерЛиста);
			ВспомогательнаяСтруктураДанных.Вставить("НомерСтрокиСтроковый", НомерСтрокиСтроковый);
			ВспомогательнаяСтруктураДанных.Вставить("ИмяТаблицы", ИмяТаблицы);
			ВспомогательнаяСтруктураДанных.Вставить("РодПадежАдресЧего", РодПадежАдресЧего);

			ВспомогательнаяСтруктураДанных.Вставить("ОписаниеСтруктурыАдресаИзОтчета", ОписаниеСтруктурыАдресаИзОтчета);

			ВспомогательнаяСтруктураДанных.Вставить("Обязательный", Обязательный);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоРоссия", ТолькоРоссия);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоЕАЭС", ТолькоЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ТолькоИностранныйКромеЕАЭС", ТолькоИностранныйКромеЕАЭС);
			ВспомогательнаяСтруктураДанных.Вставить("ЛюбойИностранный", ЛюбойИностранный);
			
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоОшибок", МаксимальноеКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Вставить("МаксимальноеКоличествоПредупреждений", МаксимальноеКоличествоПредупреждений);
			ВспомогательнаяСтруктураДанных.Вставить("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);

			ПроверкаАдресаПройдена = РегламентированнаяОтчетностьАЛКО.ВерныйАдрес(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, 
										ТаблицаСообщенийДляСведения, СтатусПроверки, СтруктураАдресДеятельности, 
										ВспомогательнаяСтруктураДанных, РежимОтладки, СоответствиеКешАдресов);
										
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоОшибок", ТекущееКоличествоОшибок);
			ВспомогательнаяСтруктураДанных.Свойство("ТекущееКоличествоПредупреждений", ТекущееКоличествоПредупреждений);
			
			//
			////////////////////////////////////////////////////////////////////////////////
			
			
			// Проверяем соответствие расчету.
			ЗаполнитьЗначенияСвойств(ВременнаяЗаписьРегистра, СтрокаДекларации);
			РасчетДекларация(ВременнаяЗаписьРегистра, КварталОтчета);

			СуммаЧисловыхПолей = 0;
			ЕстьЧисловыеПоля = Ложь;
			
			Для каждого КлючЗначение Из СтруктураСинонимовЗаписи Цикл

				Показатель = КлючЗначение.Ключ + "_" + НомерСтрокиСтроковый;
				
				Если НЕ ЕстьЧисловыеПоля Тогда
				// Это первое числовое поле.
					ИмяПоказателяПустаяСтрока = Показатель;				
				КонецЕсли; 
				ЕстьЧисловыеПоля = Истина;
				
				НазваниеПоказателя = КлючЗначение.Значение;
				СтрНомерКолонки = Прав(КлючЗначение.Ключ, 2);

				СуммаЧисловыхПолей = СуммаЧисловыхПолей + СтрокаДекларации[КлючЗначение.Ключ];
				
				// Проверяются только данные типа Число.
				Если СтрокаДекларации[КлючЗначение.Ключ] <> ВременнаяЗаписьРегистра[КлючЗначение.Ключ] Тогда

				// Значение строки декларации не соответствует расчетному.
					ТекстОписанияОшибки = СтрокаГде + " значение не соответствует расчетному
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя + """).
						|Текущее значение   : "
						+ Формат(СтрокаДекларации[КлючЗначение.Ключ], "ЧГ=0; ЧВН=") + "
						|Расчетное значение : "
						+ Формат(ВременнаяЗаписьРегистра[КлючЗначение.Ключ], "ЧГ=0; ЧВН=");

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "НеверныйРасчет");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщенийДляСведения, , СтруктураОшибки,
												МаксимальноеКоличествоПредупреждений, ТекущееКоличествоПредупреждений);

				КонецЕсли;

				// Проверяем на отрицательные значения.
				Если СтрокаДекларации[КлючЗначение.Ключ] < 0 Тогда

				// Значение строки декларации не может быть отрицательным.
					ТекстОписанияОшибки = СтрокаГде + " отрицательное значение
						|в колонке """ + СтрНомерКолонки + """ (""" + НазваниеПоказателя
						+ """).";

					СтруктураОшибки = Новый Структура;
					СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
					СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
					СтруктураОшибки.Вставить("Показатель", Показатель);
					СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
					СтруктураОшибки.Вставить("ТипОшибки", "ОтрицательноеЗначение");

					СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЧисловыеПоля И СуммаЧисловыхПолей = 0 Тогда
			
				ТекстОписанияОшибки = СтрокаГде + " не заполнены числовые данные!";
				
				ИмяПоказателя = ИмяПоказателяПустаяСтрока;
				
				СтруктураОшибки = Новый Структура;
				СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
				СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
				СтруктураОшибки.Вставить("Показатель", ИмяПоказателя);
				СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
				СтруктураОшибки.Вставить("ТипОшибки", "ПустаяСтрока");

				СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки, 
											МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);                
			
			КонецЕсли; 

			
			Если ЕстьИдОП Тогда

				ИдКодПродВидДеятельности = "Х" + СтрокаДекларации.ХешИдКодПродВидДеятельности;
				
				Если НЕ ПустаяСтрока(КодВидаПродукции) Тогда
				
					// Ведущие нули в строке вызывают ошибку при попытке назначения ключем.
					КодВидаПродукцииКлюч = "Х" + КодВидаПродукции;

					Если ДанныеДвиженийПоОП.Получить(ИдКодПродВидДеятельности) = Неопределено Тогда

						ДанныеДвиженийПоОП.Вставить(ИдКодПродВидДеятельности, Новый Соответствие);
						
						ДанныеДвиженийПоОП[ИдКодПродВидДеятельности].Вставить("НомерСтрокиДекларация", НомерСтроки);
						
						// Нет смысла собирать данные по Движениям, если есть ошибки заполнения.
						Если ТекущееКоличествоОшибок = 0 Тогда
							
							ДанныеДвиженийПоОП[ИдКодПродВидДеятельности].Вставить("ВидДеят", СтрокаДекларации[ИмяВидаДеятельности]);
							ДанныеДвиженийПоОП[ИдКодПродВидДеятельности].Вставить("Адрес", СтруктураАдресДеятельности);

							//Заполняем ключи с П000000000003 по П000000000011.
							Для Счетчик = 4 По 12 Цикл
			
								Колонка = Формат(Счетчик, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 04, 05..12.
							   	ЗначениеПоКолонке = СтрокаДекларации[ИдГруппы + Колонка];
								
								КолонкаВыгрузки = Формат(Счетчик - 1, "ЧЦ=2; ЧН=; ЧГ=0; ЧВН="); // 03, 04..11.
								ПрефиксКлюча = "П0000000000";
								
								ДанныеДвиженийПоОП[ИдКодПродВидДеятельности].Вставить(ПрефиксКлюча + КолонкаВыгрузки, ЗначениеПоКолонке);
								
							КонецЦикла;
							
						КонецЕсли;
													
					Иначе
						// Проверка на дублирование.
						СтрокаПовтора = ДанныеДвиженийПоОП[ИдКодПродВидДеятельности]["НомерСтрокиДекларация"];
						СтрокаПовтораСтроковый = РегламентированнаяОтчетностьАЛКОКлиентСервер.СтрокаЧГ0(СтрокаПовтора);

						АдресДубликата = ИмяКодаВидаПродукции + "_" + НомерСтрокиСтроковый;

						ТекстОписанияОшибки = СтрокаГде
							+ " повторяется сочетание кода вида продукции и вида деятельности по лицензии по одному адресу места деятельности,
							|ранее обнаруженное в строке " + СтрокаПовтораСтроковый + "!";

						СтруктураОшибки = Новый Структура;
						СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
						СтруктураОшибки.Вставить("Раздел", ИмяРаздела);
						СтруктураОшибки.Вставить("Показатель", АдресДубликата);
						СтруктураОшибки.Вставить("ЛистРаздела", НомерЛиста);
						СтруктураОшибки.Вставить("ТипОшибки", "ПовторСочетанияКодВидДеятельности");

						СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
													МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;

			Если НетОшибокПроверки и (ТекущееКоличествоОшибок > 0) Тогда
				НетОшибокПроверки = Ложь;
				ПроцентБезЗавершающейПроверкиДанных = 100;
				НужноОбработатьСтрок = НужноОбработатьСтрок / 2;
			КонецЕсли;

			Если ТекущееКоличествоОшибок > МаксимальноеКоличествоОшибок Тогда
				ОбработаноСтрок = НужноОбработатьСтрок;
				Возврат;
			КонецЕсли;

			// Информируем о ходе выполнения.
			Если (НужноОбработатьСтрок > 0) И (ОбработаноСтрок % ШагИнформирования = 0) Тогда

				РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
						ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

			КонецЕсли;

		КонецЦикла;

		// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

	КонецЦикла;

	Если ЕстьИдОП Тогда
		ДанныеОП["Декларация"][ИдОП].Вставить("КолСтрокПоДекларация", КолСтрокДекларация);
	КонецЕсли;

КонецПроцедуры

Функция ОтчетЗаполненКорректно()

	СтатусПроверки = Истина;

	ПроверитьЗаполнениеТитульный(СтатусПроверки);

	ПроверитьЗаполнениеЛицензии(СтатусПроверки);

	Если ТекущееКоличествоОшибок < МаксимальноеКоличествоОшибок Тогда

	// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка заполнения Декларации.", 
					ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

		КонецЕсли;

		ПроверитьЗаполнениеДекларации(СтатусПроверки);

	КонецЕсли;

	КолСтрокПриПроверкеЗаполнения = ОбработаноСтрок;

	Возврат СтатусПроверки;

КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)

	РегламентированнаяОтчетностьАЛКО.ОтсечьНезаполненныеНеобязательныеУзлыАЛКО(Узел);

КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)

	РегламентированнаяОтчетностьАЛКО.ОбработатьУсловныеЭлементыАЛКО(ПараметрыВыгрузки, Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, ВерсияБСПЧислом);

КонецПроцедуры

Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)

	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьПодчиненныйЭлементАЛКО(Узел, КодЭлемента);

КонецФункции

Функция НовыйУзелИзПрототипа(ПрототипУзла)

	Возврат РегламентированнаяОтчетностьАЛКО.НовыйУзелИзПрототипаАЛКО(ПрототипУзла);

КонецФункции

Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента,
		ЗначениеЭлемента)

	РегламентированнаяОтчетностьАЛКО.УстановитьЗначениеЭлементаАЛКО(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента);

КонецПроцедуры

Функция ИдентификаторОП(СведенияОП)

	Возврат РегламентированнаяОтчетностьАЛКО.ИдентификаторОП_АЛКО(СведенияОП);

КонецФункции

Процедура ВывестиПоказательВXML(Узел, ЗначениеПоказателя)

	РегламентированнаяОтчетностьАЛКО.ВывестиПоказательВXML_АЛКО(Узел, ЗначениеПоказателя);

КонецПроцедуры

Функция ПроверитьДанные(Узел)

	Возврат РегламентированнаяОтчетностьАЛКО.ПроверитьДанныеАЛКО(Узел, ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки);

КонецФункции

Процедура ЗаполнитьСведенияДекларации(НовыйУзелОбъемОборота, ИдОП)

	ОбразецУзлаОборот = ПолучитьПодчиненныйЭлемент(НовыйУзелОбъемОборота, "МощностьПоВидамПродукции");
	
	ДанныеДвиженийПоОП = ДанныеДвижений[ИдОП];
	
	НомерПП = 0;
	
	Для Каждого ЭлементДвиженияПоОП Из ДанныеДвиженийПоОП Цикл
				
		Движение = ЭлементДвиженияПоОП.Значение;
		
	    НовыйУзелОборот = НовыйУзелИзПрототипа(ОбразецУзлаОборот);
		
		НомерПП = НомерПП + 1;
		
		УстановитьЗначениеЭлемента(НовыйУзелОборот, "ПN", НомерПП);
		
		Для каждого КлючЗначение Из Движение Цикл
			
			Если КлючЗначение.Ключ = "Адрес" Тогда
				
				Узел_Адрес = ПолучитьПодчиненныйЭлемент(НовыйУзелОборот, "Адрес");
				АдресМестаДеятельности = КлючЗначение.Значение;
				
				УстановитьЗначениеЭлемента(Узел_Адрес, "КодСтраны", 	АдресМестаДеятельности.КодСтраны);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Индекс", 		АдресМестаДеятельности.Индекс);
				УстановитьЗначениеЭлемента(Узел_Адрес, "КодРегион", 	АдресМестаДеятельности.КодРегиона);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Район", 		АдресМестаДеятельности.Район);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Город", 		АдресМестаДеятельности.Город);
				УстановитьЗначениеЭлемента(Узел_Адрес, "НаселПункт", 	АдресМестаДеятельности.НаселенныйПункт);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Улица", 		АдресМестаДеятельности.Улица);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Дом", 			АдресМестаДеятельности.Дом);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Корпус", 		АдресМестаДеятельности.Корпус);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Литера", 		АдресМестаДеятельности.Литера);
				УстановитьЗначениеЭлемента(Узел_Адрес, "Кварт", 		АдресМестаДеятельности.Квартира); 
				
			Иначе	
				УстановитьЗначениеЭлемента(НовыйУзелОборот, КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;						
		
		КонецЦикла; 
		
		ДанныеДвиженийПоОП.Удалить(ЭлементДвиженияПоОП.Ключ);
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		
		// информируем о ходе выполнения				
		Если НужноОбработатьСтрок > 0 Тогда
			
			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", ОбработаноСтрок, 
										НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);
			
		КонецЕсли;
	
	КонецЦикла; 
			
	РегламентированнаяОтчетность.УдалитьУзел(ОбразецУзлаОборот);

КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, КорневойУзел,
		ПараметрыВыгрузки)

	Узел_Документ = УзелРодитель;

	Узел_Организация = ПолучитьПодчиненныйЭлемент(Узел_Документ, "Организация");
	
	Узел_Деятельность = ПолучитьПодчиненныйЭлемент(Узел_Организация, "Деятельность");
	
	Если НЕ Узел_Деятельность = Неопределено Тогда
	
		// Формат Выгрузки 4.40
		Узел_Лицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Лицензируемая");
		Узел_Нелицензируемая = ПолучитьПодчиненныйЭлемент(Узел_Деятельность, "Нелицензируемая");

		ДанныеОтчетаЛицензии = ТаблицаСтраницыЛицензии;
		ДопДанные = ДанныеОтчетаЛицензии[0].ДополнительныеДанные[0].Значение;
		
		ПустаяЛицензия = Ложь;
		
		Если ТаблицаСтраницыЛицензии.Количество() = 1 Тогда
		
			Страница = ТаблицаСтраницыЛицензии[0];
			ДанныеСтраницы = Страница.Данные[0].Значение;
			
			ПустаяЛицензия = (Не УказанаЛицензия(ДанныеСтраницы));
		
		КонецЕсли;
		
		ЭтоЛицензируемаяДеятельность = ЛицензируемаяДеятельность() ИЛИ ПустаяЛицензия;

		Если ЭтоЛицензируемаяДеятельность Тогда
			
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Нелицензируемая);
			ПрототипУзла_Лицензия = ПолучитьПодчиненныйЭлемент(Узел_Лицензируемая, "Лицензия");
			
			Для Каждого Страница Из ДанныеОтчетаЛицензии Цикл
				
				ДанныеСтраницы = Страница.Данные[0].Значение;
				
				Если Не УказанаЛицензия(ДанныеСтраницы) Тогда
					Продолжить;
				КонецЕсли;
				
				ДополнительныеДанныеСтраницы = Страница.ДополнительныеДанные[0].Значение;
				Узел_Лицензия = НовыйУзелИзПрототипа(ПрототипУзла_Лицензия);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ВидДеят", ЗначениеПоКлючуСтруктуры("П000000000105", ДополнительныеДанныеСтраницы));
				УстановитьЗначениеЭлемента(Узел_Лицензия, "СерНомЛиц", ДанныеСтраницы.П000000000101
					+ " " + ДанныеСтраницы.П000000000102);
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаНачЛиц", ДанныеСтраницы.П000000000103);
				
				// Заполнение для разных вариантов XSD.
				// Ошибки не будет - перед заполнением проверяется наличие элемента.
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОкончЛиц", ДанныеСтраницы.П000000000104);								
				УстановитьЗначениеЭлемента(Узел_Лицензия, "ДатаОконЛиц", ДанныеСтраницы.П000000000104);
								
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_Лицензия);
			
		Иначе
			РегламентированнаяОтчетность.УдалитьУзел(Узел_Лицензируемая);
			УстановитьЗначениеЭлемента(Узел_Нелицензируемая, "ВидДеят", ЗначениеПоКлючуСтруктуры("П000000000105", ДопДанные));
		КонецЕсли;
	КонецЕсли;

	ПрототипУзла_ИспользуемыеМощности = ПолучитьПодчиненныйЭлемент(Узел_Документ, "ИспользуемыеМощности");

	Для Каждого ЭлементОП Из ДанныеОП["Декларация"] Цикл

		ИдОП = ЭлементОП.Ключ;
		СтруктураОП = ЭлементОП.Значение;

		СведенияОбОП = СтруктураОП["ОП"];

		// Заполняем сведения по ОП.
		НазваниеОП = СведенияОбОП.Наименование;
		КПП = СведенияОбОП.КПП;

		Если ПустаяСтрока(НазваниеОП) И ПустаяСтрока(КПП) Тогда
			Продолжить;
		КонецЕсли;

		Узел_ИспользуемыеМощности = НовыйУзелИзПрототипа(ПрототипУзла_ИспользуемыеМощности);

		// Заполнение для разных вариантов XSD.
		// Ошибки не будет - перед заполнением проверяется наличие элемента.
		УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "Наим", НазваниеОП);				
		УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "НаимЮЛ", НазваниеОП);		
				
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "КППЮЛ", КПП);
		КонецЕсли;

		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ИспользуемыеМощности, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", СведенияОбОП.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", СведенияОбОП.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", СведенияОбОП.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", СведенияОбОП.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", СведенияОбОП.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", СведенияОбОП.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", СведенияОбОП.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", СведенияОбОП.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", СведенияОбОП.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", СведенияОбОП.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", СведенияОбОП.Квартира);

		ЗаполнитьСведенияДекларации(Узел_ИспользуемыеМощности, ИдОП);
				
	КонецЦикла;

	// Для пустой декларации надо выгрузить хотя бы один узел ОбъемОборота.
	// В качестве ОП - сама организация.
	Если ДанныеОП["Декларация"].Количество() = 0 Тогда

	// Заполняем сведения по ОП.
		НазваниеОргСокр = ПараметрыВыгрузки.НаимСокр;
		КПП = "";
		ПараметрыВыгрузки.Свойство("КППЮЛ", КПП);

		Узел_ИспользуемыеМощности = НовыйУзелИзПрототипа(ПрототипУзла_ИспользуемыеМощности);

		
		// Заполнение для разных вариантов XSD.
		// Ошибки не будет - перед заполнением проверяется наличие элемента.
		УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "Наим", НазваниеОргСокр);				
		УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "НаимЮЛ", НазваниеОргСокр);
		
		Если ЗначениеЗаполнено(КПП) Тогда
			УстановитьЗначениеЭлемента(Узел_ИспользуемыеМощности, "КППЮЛ", КПП);
		КонецЕсли;

		АдресОрганизации = ПараметрыВыгрузки.АдресОрганизации;
		Узел_АдрОрг = ПолучитьПодчиненныйЭлемент(Узел_ИспользуемыеМощности, "АдрОрг");
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодСтраны", АдресОрганизации.КодСтраны);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Индекс", АдресОрганизации.Индекс);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "КодРегион", АдресОрганизации.КодРегиона);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Район", АдресОрганизации.Район);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Город", АдресОрганизации.Город);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "НаселПункт", АдресОрганизации.НаселенныйПункт);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Улица", АдресОрганизации.Улица);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Дом", АдресОрганизации.Дом);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Корпус", АдресОрганизации.Корпус);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Литера", АдресОрганизации.Литера);
		УстановитьЗначениеЭлемента(Узел_АдрОрг, "Кварт", АдресОрганизации.Квартира);
		
	КонецЕсли;

	РегламентированнаяОтчетность.УдалитьУзел(ПрототипУзла_ИспользуемыеМощности);

	КолСтрокЗаполнено = ОбработаноСтрок - КолСтрокПриПроверкеЗаполнения;

	Если КолСтрокЗаполнено <> КолСтрокПриПроверкеЗаполнения Тогда

	// Выгружено не то количество, что есть по данным заполнения отчета.
		ТекстОписанияОшибки = "В выгрузку попало меньшее количество строк, чем заполнено в Декларации!
			|Немедленно свяжитесь с техподдержкой, желательно выслать выгрузку 
			|Вашей информационной базы в виде файла .dt";

		СтруктураОшибки = Новый Структура;
		СтруктураОшибки.Вставить("ТекстОписанияОшибки", ТекстОписанияОшибки);
		СтруктураОшибки.Вставить("Раздел", "Титульный");
		СтруктураОшибки.Вставить("Показатель", Неопределено);
		СтруктураОшибки.Вставить("ЛистРаздела", Неопределено);
		СтруктураОшибки.Вставить("ТипОшибки", "НеВсяИнформацияПопалаВВыгрузку");

		СообщитьОбОшибкеЗаполнения(ДокументСсылкаАлкоОтчет, ТаблицаСообщений, СтатусПроверки, СтруктураОшибки,
									МаксимальноеКоличествоОшибок, ТекущееКоличествоОшибок);

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел,
		НомерСтроки = Неопределено)

	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если ПараметрыВыгрузки.Свойство("ИмяКлючевогоУзлаСодержательнойЧасти")
					И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				ЗаполнитьСодержательнуюЧасть(Стр, Узел, ПараметрыВыгрузки);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда

				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда

					НайденКлюч = Истина;
					КлючВыгрузки = Строка(Стр.Ключ);
					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
					СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

					Пока ПозицияТочки > 0 Цикл

						ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
						КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

						Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
							СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
						Иначе
							НайденКлюч = Ложь;
							Прервать;
						КонецЕсли;

						ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

					КонецЦикла;

					Если НайденКлюч Тогда
						
						ЗначениеПараметра = Неопределено;
                    	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
						
						Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
							ВывестиПоказательВXML(Стр, ЗначениеПараметра);
						Иначе	
							Стр.Значение = "";
						КонецЕсли; 
                    	
					Иначе
						Стр.Значение = "";
					КонецЕсли;

				Иначе
					Стр.Значение = "";
				КонецЕсли;

			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда

				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);

				НайденКлюч = Истина;
				КлючВыгрузки = Строка(Ключ);
				ПозицияТочки = СтрНайти(КлючВыгрузки, ".");
				СтруктураПараметровВыгрузки = ПараметрыВыгрузки;

				Пока ПозицияТочки > 0 Цикл

					ПромежуточныйКлюч = Лев(КлючВыгрузки, ПозицияТочки - 1);
					КлючВыгрузки = Сред(КлючВыгрузки, ПозицияТочки + 1);

					Если СтруктураПараметровВыгрузки.Свойство(ПромежуточныйКлюч) Тогда
						СтруктураПараметровВыгрузки = СтруктураПараметровВыгрузки[ПромежуточныйКлюч];
					Иначе
						НайденКлюч = Ложь;
						Прервать;
					КонецЕсли;

					ПозицияТочки = СтрНайти(КлючВыгрузки, ".");

				КонецЦикла;

				Если НайденКлюч Тогда
						
					ЗначениеПараметра = Неопределено;
                	СтруктураПараметровВыгрузки.Свойство(КлючВыгрузки, ЗначениеПараметра);
					
					Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПараметра);
					Иначе	
						Стр.Значение = "";
					КонецЕсли; 
                	
				Иначе
					Стр.Значение = "";
				КонецЕсли;

			Иначе
				ВывестиПоказательВXML(Стр, Стр.ЗначениеПоУмолчанию);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанными()

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);

	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

КонецПроцедуры

Функция ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка = Ложь) Экспорт

	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ВерсияБСПЧислом = РегламентированнаяОтчетностьАлко.ПолучитьВерсиюБСПЧислом();

	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();

	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;
	ПараметрыВыгрузки = ПараметрыДокумента.ПараметрыВыгрузки;

	СоответствиеКешАдресов = Новый Соответствие;

	// Таблица результата.
	ТаблицаСообщений = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();
	ТаблицаСообщенийДляСведения = РегламентированнаяОтчетностьАлко.СоздатьТаблицуСообщенийОбОшибках();

	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;

	ОбработаноСтрок = 0;
	ШагИнформирования = 200;
	НетОшибокПроверки = Истина;

	ДатаНачалаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	ДатаКонцаОтчета = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НижняяГраницаДатыПоXSD = Неопределено;
	ВерхняяГраницаДатыПоXSD = Неопределено;
	
	МаксимальноеКоличествоОшибок = 1000;
	ТекущееКоличествоОшибок = 0;
	МаксимальноеКоличествоПредупреждений = 1000; 
	ТекущееКоличествоПредупреждений = 0;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();

	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
		
	ДанныеДвижений = Новый Соответствие;
	
	ДанныеОП = Новый Соответствие;
	ДанныеОП.Вставить("Декларация", Новый Соответствие);
		
	// Один проход при проверке заполнения,
	// второй - при заполнении выгрузки - все вместе 90%
	// на завершающую проверку данных отводим 10%.
	НужноОбработатьСтрок = 2 * ВсегоСтрокПоРазделу1;
	// При выгрузке проверка заполнения строк и заполнение дерева выгрузки составляет примерно 84%.
	// При проверке выгрузки - примерно 90% от общего времени выполнения.
	ПроцентБезЗавершающейПроверкиДанных = ?(ЭтоВыгрузка, 84, 90);
	

	// ОписаниеСтруктурыАдресаИзОтчета	- Структура.
	//		Поля структуры соответствуют структуре, получаемой при вызове
	//		функции ПолучитьПустуюСтруктуруАдреса(). 
	//		Может не содержать поля УникальныйНомерФИАС, ДополнительныеКоды, АдресXML, КодСтраны
	//		Страна, КодРегиона, Регион, ТипДома, ТипКорпуса, ТипКвартиры, ПредставлениеАдреса.
	//		При наличии перечисленных полей - они будут удалены!
	//		
	//		Значениями всех полей структуры является структура вида:
	//			* ПредставлениеПоля - осмысленное название поля адреса.
	//			* МинДлина - минимальная длина строки поля адреса, к которому относится структура.
	//			* МаксДлина- максимальная длина строки поля адреса, к которому относится структура.
	//			* ТолькоЦифры - Булево. Признак что в поле адреса должны быть только цифры.
	//
	// Эта структура используется в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() для контроля типа и длины полей.
	// Если не указана - в РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес() используется структура по умолчанию,
	// на момент написания кода структура по умолчанию соответствует описанию адреса во всех схемах XSD ФСРАР.
	//
	// Если в будущем описание адреса для конкретных отчетов изменится - нужно заполнять структуру ОписаниеСтруктурыАдресаИзОтчета
	// для этого отчета. Если описание изменится для всех отчетов - нужно менять описание структуры в
	// РегламентированнаяОтчетностьАЛКО.ПроверитьАдрес().
	ОписаниеСтруктурыАдресаИзОтчета = Неопределено;
	
	ИмяОбластиКодовМакета = "ВидыДеятельности";
	КоллекцияСписковВыбора = Неопределено;
	СписокКодовДеятельности = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
			ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета, , КоллекцияСписковВыбора);
	ИмяОбластиКодовМакета = "ВидыПродукции";
	СписокКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(ИмяОбластиКодовМакета, 
			ДатаКонцаОтчета, ИмяФормыОбъекта, ОбъектЭтогоОтчета, , КоллекцияСписковВыбора);
			
	КварталОтчета = Число(РегламентированнаяОтчетностьАЛКОКлиентСервер.КварталОтчетаСтрокой(СтруктураРеквизитовФормы));

	Если НЕ ОтчетЗаполненКорректно() Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Заполнение данными дерева выгрузки.", 
				ОбработаноСтрок, НужноОбработатьСтрок, ПроцентБезЗавершающейПроверкиДанных, РежимОтладки);

	КонецЕсли;

	ЗаполнитьДанными();

	Если ТекущееКоличествоОшибок > 0 Тогда

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("Проверка данных по схеме выгрузки.", 
				ПроцентБезЗавершающейПроверкиДанных, 100, , РежимОтладки);

	КонецЕсли;

	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
	// Информируем о ходе выполнения.
		Если НужноОбработатьСтрок > 0 Тогда

			РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

		КонецЕсли;

		Результат = Новый Структура;
		Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
		Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);
		Возврат Результат;

	КонецЕсли;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(?(ЭтоВыгрузка, "Запись выгрузки в XML.", ""), 
				?(ЭтоВыгрузка, 93, 100), 100, , РежимОтладки);

	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаСообщений", ТаблицаСообщений);
	Результат.Вставить("ТаблицаСообщенийДляСведения", ТаблицаСообщенийДляСведения);

	Возврат Результат;

КонецФункции

Функция СписокРазделовОшибок() Экспорт
	
	СписокРазделов = Новый Массив;
	СписокРазделов.Добавить("Титульный");
	СписокРазделов.Добавить("Лицензии");
	СписокРазделов.Добавить("Декларация");
	
	Возврат СписокРазделов;

КонецФункции
#КонецОбласти

#Область Выгрузка

Функция ВыгрузитьОтчет(ПараметрыДокумента) Экспорт

	ЭтоВыгрузка = Истина;

	Результат = ПроверитьВыгрузку(ПараметрыДокумента, ЭтоВыгрузка);

	Если ТекущееКоличествоОшибок > 0 Тогда
	// Есть сообщения о ошибках
		Возврат Результат;
	КонецЕсли;

	// Проверка прошла успешно.
	// Пишем XML в файл.
	ИмяФайлаXML = Неопределено;

	// расширение по умолчанию - .tmp
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();

	РегламентированнаяОтчетностьАЛКО.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки, ИмяФайлаXML);

	// информируем о ходе выполнения				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения("", 100, 100, , РежимОтладки);

	КонецЕсли;

	Результат.Вставить("ИмяФайлаXML", ИмяФайлаXML);

	Возврат Результат;

КонецФункции
#КонецОбласти

#Область Печать

Функция ПечататьРаздел(СтрокаРаздела)

	// Если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим.
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		СтруктураРеквизитовФормы.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;

	Возврат 0;

КонецФункции

Функция ПечатьОтчета(ПараметрыДокумента) Экспорт

	ОбъектЭтогоОтчета = ЭтотОбъект;
	
	ДокументСсылкаАлкоОтчет = ПараметрыДокумента.ДокументСсылка;

	ИмяФормыОбъекта = ПараметрыДокумента.ИмяФормыОбъекта;
	ВспомогательныйАдрес = ПараметрыДокумента.ВспомогательныйАдрес;
	ПараметрыФормы = ПараметрыДокумента.ПараметрыФормы;

	ВидПечати = ПараметрыДокумента.ВидПечати;

	ТаблицаСтраницыЛицензии = ПараметрыФормы.ТаблицаСтраницыЛицензии;
	ТаблицаСтраницыДекларация = ПараметрыФормы.ТаблицаСтраницыДекларация;
	
	СтруктураСервисРегистров = ПараметрыФормы.СтруктураСервисРегистров;

	СтруктураРеквизитовФормы = ПараметрыФормы.СтруктураРеквизитовФормы;

	ВсегоСтрокПоЛицензиям = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы01, Истина);
	ВсегоСтрокПоРазделу1 = ПолучитьКоличествоСтрокПоГруппе(СтруктураРеквизитовФормы.мИдГруппы12, Истина);
	

	// Один проход при выводе в целом по организации,
	// второй - при выводе по ОП
	// Лицензии выводятся один раз.
	// Все это в 2 кратном размере, поскольку сначала вся информация отбирается в запросе.
	НужноОбработатьСтрок = (2 * ВсегоСтрокПоРазделу1
		+ ВсегоСтрокПоЛицензиям) * 2;

	ОбработаноСтрок = 0;

	ТипЭкспорта = ?(СтруктураРеквизитовФормы.Свойство("ТипЭкспорта"),
					СтруктураРеквизитовФормы.ТипЭкспорта, Неопределено);
	
	ПроцентБезКонвертацииАрхивации = 
		РегламентированнаяОтчетностьАЛКОКлиентСервер.ПроцентБезКонвертацииАрхивации(ВидПечати, ТипЭкспорта);

	СтруктураДанныхТитульный = ПараметрыФормы.СтруктураДанныхТитульный;
	мДеревоВыбранныхСтраниц = ПараметрыФормы.мДеревоВыбранныхСтраниц;
	НомерКорректировки = ПараметрыФормы.НомерКорректировки;
	ДополнительныеДанные = ПараметрыФормы.ДополнительныеДанные;
	ДатаПодписи = ПараметрыФормы.ДатаПодписи;

	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.Строки Цикл

		Пометка = ПечататьРаздел(СтрокаУровня1);

		ИмяСтраницыПанели = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста = СтрокаУровня1.Представление;
		ОриентацияЛиста = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста", НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста", ОриентацияЛиста);
		СтруктураПараметров.Вставить("ИмяСтраницы", ИмяСтраницыПанели);
		СтруктураПараметров.Вставить("ИмяРаздела", ИмяСтраницыПанели);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати", ВидПечати);
		СтруктураПараметров.Вставить("ИмяФормыОбъекта", ИмяФормыОбъекта);

		Если ИмяСтраницыПанели = "Титульный" Тогда

			ВывестиНаПечатьТитульный(СтруктураПараметров);

		ИначеЕсли ИмяСтраницыПанели = "Декларация" Тогда

			СтруктураПараметров.Вставить("ИмяРаздела", "Декларация");
			ВывестиНаПечатьДекларацию(СтруктураПараметров);
				
		ИначеЕсли ИмяСтраницыПанели = "Лицензии" Тогда

			ВывестиНаПечатьРазделЛицензии(СтруктураПараметров);

		КонецЕсли;

	КонецЦикла;

	// Информируем о ходе выполнения.				
	Если НужноОбработатьСтрок > 0 Тогда

		РегламентированнаяОтчетностьАлко.СообщитьПроцентВыполнения(
				?(ВидПечати = "ПечатьФайлZIP", "Конвертация в выбранный формат и архивация.", ""), 
				НужноОбработатьСтрок, НужноОбработатьСтрок, ПроцентБезКонвертацииАрхивации, РежимОтладки);

	КонецЕсли;

	Возврат СтруктураРеквизитовФормы;

КонецФункции

Процедура ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы)

	НастройкиСтраницы = Новый Структура;

	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 5);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьТитульный(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, ОбъектЭтогоОтчета);

КонецПроцедуры

Процедура ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы)

	НастройкиСтраницы = Новый Структура;

	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	НастройкиСтраницы.Вставить("ПолеСверху", 10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыЛицензии", ТаблицаСтраницыЛицензии);
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделЛицензии(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, 
																	ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);

КонецПроцедуры

Процедура ВывестиНаПечатьДекларацию(СтруктураПараметровСтраницы)

// В структуре СтруктураПараметровСтраницы уже установлены свойства 
	// ИмяФормыОбъекта, ИмяРаздела, НаименованиеЛиста - в процедуре ПечатьОтчета().
	СтруктураПараметровСтраницы.Вставить("ДокументСсылкаАлкоОтчет", ДокументСсылкаАлкоОтчет);
	СтруктураПараметровСтраницы.Вставить("СтруктураДанныхТитульный", СтруктураДанныхТитульный);
	СтруктураПараметровСтраницы.Вставить("СтруктураСервисРегистров", СтруктураСервисРегистров);
	СтруктураПараметровСтраницы.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	
	СтруктураПараметровСтраницы.Вставить("ТаблицаСтраницыРаздела", ТаблицаСтраницыДекларация);
	СтруктураПараметровСтраницы.Вставить("ИдГруппыРаздела", СтруктураРеквизитовФормы.мИдГруппы12);

	// Настройки листа.
	НастройкиСтраницы = Новый Структура;
	НастройкиСтраницы.Вставить("ОтображатьЗаголовки", Ложь);
	НастройкиСтраницы.Вставить("ОтображатьСетку", Ложь);
	НастройкиСтраницы.Вставить("ЧерноБелыйПросмотр", Истина);
	НастройкиСтраницы.Вставить("ЧерноБелаяПечать", Истина);
	НастройкиСтраницы.Вставить("Автомасштаб", Истина);
	НастройкиСтраницы.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Ландшафт);
	НастройкиСтраницы.Вставить("ПолеСверху", 10);
	НастройкиСтраницы.Вставить("ПолеСнизу", 5);
	НастройкиСтраницы.Вставить("ПолеСлева", 5);
	НастройкиСтраницы.Вставить("ПолеСправа", 5);

	СтруктураПараметровСтраницы.Вставить("НастройкиСтраницы", НастройкиСтраницы);

	// Высоты в стандартных строках с установленным свойством "Автовысота" (11,25).
	// Вычисляются методом пробной печати заведомо большого количества строк.
	// Например ВысотаСтраницыВСтроках = 120 и строк в отчете 200, значения короткие чтобы в одну строку 
	// помещались в поле.
	// После печати считается сколько поместилось на странице, с учетом что некоторые строки высотой в 2-3
	// "стандартных" - это и есть правильная ВысотаСтраницыВСтроках. 
	// Лучше ставить с небольшим запасом, в меньшую сторону. Если строк на листе вышло 100, лучше поставить 95.
	// Остальные высоты считаются по макету - сколько стандартных строк по высоте занимают.
	СтруктураВысот = Новый Структура;
	СтруктураВысот.Вставить("ВысотаСтраницыВСтроках", 100);
	СтруктураВысот.Вставить("Высота_НомерСтраницыВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокЛистаВСтроках", 6);
	СтруктураВысот.Вставить("Высота_ПустаяСтрокаВСтроках", 1);
	СтруктураВысот.Вставить("Высота_ЗаголовокТаблицыВСтроках", 14);
	СтруктураВысот.Вставить("Высота_СтрокаОПВСтроках", 2);
	СтруктураВысот.Вставить("Высота_ПодвалВСтроках", 1);

	СтруктураПараметровСтраницы.Вставить("СтруктураВысот", СтруктураВысот);

	НастройкиАлгоритмаПечати = Новый Структура;

	/////////////////////////////////////////////////////////////
	// Общие настройки печати по разделу.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПустаяСтрока", "ПустаяСтрока");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиПодвал", "Подвал");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргДиректор", "ОргДиректор");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиОргБухгалтер", "ОргБухгалтер");
	НастройкиАлгоритмаПечати.Вставить("ВыводитьСводнуюТаблицуПоОрганизацииВЦелом", Истина);
	НастройкиАлгоритмаПечати.Вставить("ВыводитьВозвратыЗаДекларацией", Ложь);
	// Описание заголовка и шапки таблицы.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиНомерСтраницы", "НомерСтраницы");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокЛиста", "ЗаголовокЛиста");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокТаблицы", "ЗаголовокТаблицы");

	// СписокПереносимыхПолей - список, значения которого - количество стандартных символов, помещающихся в 
	// в одну строчку по длине поля ,при шрифте и величине шрифта, установленных для поля в макете в области
	// "СтрокаТаблицы" или аналогичном.	
	// В представлении элементов списка хранится имена ИмяПоляПереносимойСтроки, т.е поля,
	// в котором слова могут переносится на следующую строку, если не хватает длины, или номера колонок, т.е
	// в представлении можно указывать либо полное имя поля регистра сведений вида ИдГруппы + НомерКолонки,
	// либо просто НомерКолонки.
	// Строка "СтрокаТаблицы" или аналогичная должна иметь настройку АвтовысотаСтроки = Истина.
	//	
	// Действуют и на общую часть по организации и на часть по ОП.
	СписокПереносимыхПолей = Новый СписокЗначений;
	СписокПереносимыхПолей.Добавить(52, "01");
	СписокПереносимыхПолей.Добавить(52, "02");
	СписокПереносимыхПолей.Добавить(52, "03");

	НастройкиАлгоритмаПечати.Вставить("СписокПереносимыхПолей", СписокПереносимыхПолей);
	
	// Описание областей макета, выводящих строки общей информации по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОП", "СтрокаОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиСтрокаОрг", "СтрокаОП");

	// Описание областей макета, выводящих строки общей информации по ОП и организации. 
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОП", "ЗаголовокРеквизитов");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиЗаголовокРеквизитовОрг", "ЗаголовокРеквизитов");

	// Текст пояснения к общим сведениям по ОП и организации.
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОП", "Сведение по обособленному подразделению (с указанием ИНН, КПП и адреса)");
	НастройкиАлгоритмаПечати.Вставить("ЗаголовокРеквизитовОрг", "Сведения по организации");

	// Имя области в которой выводится общая информация по ОП и Организации.
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОП", "ОП");
	НастройкиАлгоритмаПечати.Вставить("ИмяОбластиРеквизитовОрг", "ОП");

	// Информация по колонкам группировки, суммирования и запрету вывода.
	// Используется при выводе строк по организации - выводить "как есть" или сворачивать
	// по определенным полям.
	//
	// Пустая строка колонок группировки и суммирования означает автоопределение 
	// - все что не числа - колонки группировки.
	// - все что числа - колонки суммирования.
	//
	// Значение "Не сворачивать" или "НеСворачивать" в колонках группировки вместо списка колонок
	// предотвращает сворачивание, независимо от значения колонок суммирования.
	НастройкиАлгоритмаПечати.Вставить("КолонкиГруппировокОрг", "");
	НастройкиАлгоритмаПечати.Вставить("КолонкиСуммированияОрг", "");
	НастройкиАлгоритмаПечати.Вставить("КолонкиНеВыводитьОрг", "");

	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк ОП.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечатиСтрокОП = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиНомера", "П000010000300");
	НастройкиАлгоритмаПечатиСтрокОП.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");

	СписокСтруктурИнформацииИтогов = Новый СписокЗначений;

	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11");

	СписокСтруктурИнформацииИтогов.Добавить(СтруктураИнформацииИтога2, "2");

	НастройкиАлгоритмаПечатиСтрокОП.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтогов);

	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОП", НастройкиАлгоритмаПечатиСтрокОП);

	/////////////////////////////////////////////////////////////
	// Алгоритм печати строк Организации.
	/////////////////////////////////////////////////////////////
	НастройкиАлгоритмаПечатиСтрокОрг = Новый Структура;
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИдГруппыОбластиСтрокаМакета", "П0000100003");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиНомера", "П000010000300");
	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("ИмяОбластиСтрокаТаблицы", "СтрокаТаблицы");

	СписокСтруктурИнформацииИтоговОрг = Новый СписокЗначений;

	СтруктураИнформацииИтога2 = Новый Структура;
	СтруктураИнформацииИтога2.Вставить("ИдГруппыОбластейМакетаИтоги", "П0000100004");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиСтрокаИтогов", "СтрокаИтого");
	СтруктураИнформацииИтога2.Вставить("ИмяОбластиРазмещенияПояснения", "ОписаниеИтого");
	СтруктураИнформацииИтога2.Вставить("ТекстПояснения", "ИТОГО");
	СтруктураИнформацииИтога2.Вставить("КолонкиГруппировок", "");
	СтруктураИнформацииИтога2.Вставить("КолонкиСуммирования", "06,07,08,09,10,11");

	СписокСтруктурИнформацииИтоговОрг.Добавить(СтруктураИнформацииИтога2, "2");

	НастройкиАлгоритмаПечатиСтрокОрг.Вставить("СписокСтруктурИнформацииИтогов", СписокСтруктурИнформацииИтоговОрг);

	НастройкиАлгоритмаПечати.Вставить("НастройкиАлгоритмаПечатиСтрокОрг", НастройкиАлгоритмаПечатиСтрокОрг);

	/////////////////////////////////////////////////////////////
	// Конец настроек алгоритма печати
	/////////////////////////////////////////////////////////////
	СтруктураПараметровСтраницы.Вставить("НастройкиАлгоритмаПечати", НастройкиАлгоритмаПечати);

	// Заполнение данных для показа шкалы прогресса.
	СтруктураПараметровСтраницы.Вставить("НужноОбработатьСтрок", НужноОбработатьСтрок);
	СтруктураПараметровСтраницы.Вставить("ПроцентБезКонвертацииАрхивации", ПроцентБезКонвертацииАрхивации);

	РегламентированнаяОтчетностьАЛКО.ВывестиНаПечатьРазделДекларации(СтруктураПараметровСтраницы, СтруктураРеквизитовФормы, 
																		ОбработаноСтрок, ОбъектЭтогоОтчета, РежимОтладки);

КонецПроцедуры
																	
#КонецОбласти

#Область ВнешнийОтчет

// Процедуры и функции этой области используются только в случае
// публикации в виде внешнего отчета.

#Область ПрограммныйИнтерфейсВнешнийОтчет

Функция ВерсияФорматаВыгрузки(Знач НаДату = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт
	
	Если НаДату = Неопределено Тогда
		НаДату = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Перечисления.ВерсииФорматовВыгрузки.Версия401алко;
		
КонецФункции

Функция ТаблицаФормОтчета() Экспорт
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблицаФормОтчета = Новый ТаблицаЗначений;
	ТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
	ТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
	ТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);
	ТаблицаФормОтчета.Колонки.Добавить("РедакцияФормы",      ОписаниеТиповСтрока, "Редакция формы", 20);
	
	НоваяФорма = ТаблицаФормОтчета.Добавить();
	НоваяФорма.ФормаОтчета        = "ФормаОтчета2021Кв1";
	НоваяФорма.ОписаниеОтчета     = "Приложение № 6 к Порядку представления в форме электронного документа "
									+ "деклараций об объеме производства, оборота и (или) использования "
									+ "этилового спирта, алкогольной и спиртосодержащей продукции, "
									+ "об использовании производственных мощностей производителями пива и "
									+ "пивных напитков сидра, пуаре, медовухи "
									+ "(Утверждено приказом ФСРАР РФ от 17.12.2020 г. № 396).";
	НоваяФорма.РедакцияФормы	  = "от 17.12.2020 № 396.";
	НоваяФорма.ДатаНачалоДействия = '20210101';
	НоваяФорма.ДатаКонецДействия  = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	
	Возврат ТаблицаФормОтчета;
	
КонецФункции

Функция ДанныеРеглОтчета(ЭкземплярРеглОтчета) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

Функция ДеревоФормИФорматов() Экспорт
	
	ФормыИФорматы = Новый ДеревоЗначений;
	ФормыИФорматы.Колонки.Добавить("Код");
	ФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	ФормыИФорматы.Колонки.Добавить("НомерПриказа");
	ФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	ФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	ФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	ФормыИФорматы.Колонки.Добавить("Описание");
	
	Форма20210101 = ОпределитьФормуВДеревеФормИФорматов(ФормыИФорматы, "1152042", '2020-12-17', "396", "ФормаОтчета2021Кв1");
	ОпределитьФорматВДеревеФормИФорматов(Форма20210101, "4.40", , , '2021-01-01');
	
	
	Возврат ФормыИФорматы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииВнешнийОтчет

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код,
		ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
		ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101',
		Описание = "")

	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;

КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия,
		ДатаПриказа = '00010101', НомерПриказа = "",
		ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено,
		ИмяОбъекта = "", Описание = "")

	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;

КонецФункции
#КонецОбласти

мВерсияОтчета = "БПКОРП 3.0.42.54.4";

#КонецОбласти

#КонецОбласти

#КонецЕсли
