
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройки();
	ТекущаяСтрока = -1;
	ЭтоРежимРасшифровки = Ложь;
	
	Если НЕ Параметры.Заказ.Пустая() Тогда
		
		Заказ = Параметры.Заказ;
		НоменклатураОтбор = Параметры.Номенклатура;
		КлючНоменклатураПоиск = Параметры.КлючНоменклатура;
		НазначениеОтбор = Параметры.Назначение;
		
		Если ТипЗнч(Параметры.ЗаказНаЗапускЭтапы) = Тип("ФиксированныйМассив")
			И Параметры.ЗаказНаЗапускЭтапы.ВГраница() <> -1 Тогда
			ЭтапыОтбор = Параметры.ЗаказНаЗапускЭтапы;
			ЭтапыОтборНоменклатура = Параметры.ЗаказНаЗапускНоменклатура;
			ЭтапыОтборХарактеристика = Параметры.ЗаказНаЗапускХарактеристика;
			ЭтапыОтборСклад = Параметры.ЗаказНаЗапускСклад;
			ЭтапыОтборНазначение = Параметры.ЗаказНаЗапускНазначение;
			ЭтоРежимРасшифровки = Истина;
		КонецЕсли;
		
		Если Параметры.Свойство("ПоказыватьЭтапы") Тогда
			ПоказыватьЭтапы = Параметры.ПоказыватьЭтапы;
		КонецЕсли;
		
		Действие = "Заполнить";
		Результат = ЗапуститьВыполнениеДействия();
		Если Не Результат.ДействиеЗапущено
			И СтруктураЗаказаКлиентСервер.ОжидатьЗавершениеРасчетаСтруктурыЗаказа(
				Результат.ПротоколРасчета.Состояние, Результат.ПротоколРасчета.КодыСостояний) Тогда
			НачатьОжиданиеРасчетаПриОткрытии = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТипЗнч(ЭтапыОтбор) = Тип("ФиксированныйМассив") Тогда
		ЭтапыОтбор = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	ЕстьПравоФормированияЭтапов = ПравоДоступа("Использование", Метаданные.Обработки.ФормированиеЭтаповПроизводства);
	Элементы.СформироватьЭтапы.Видимость = ЕстьПравоФормированияЭтапов;
	
	Если ЭтоРежимРасшифровки Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Расшифровка строки структуры заказа %1';
									|en = 'Drill down the line of the %1 order structure'"), ПредставлениеЗаказаНаСервереБезКонтекста(Заказ));
		Элементы.Заказ.ТолькоПросмотр = Истина;
		Элементы.НазначениеОтбор.Видимость = Ложь;
	Иначе
		УстановитьСтандартныйЗаголовокФормыНаКлиентеНаСервереБезКонтекста(ЭтаФорма);
	КонецЕсли;
	
	РазмерПорцииВыборки = Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.РазмерПорцииВыборки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НачатьОжиданиеРасчетаПриОткрытии Тогда
		НачатьОжиданиеРасчетаПриОткрытии = Ложь;
		ПодключитьОбработчикОжидания("НачатьОжиданиеЗавершенияРасчетаПриОткрытии", 0.1, Истина);
	ИначеЕсли НачатьОжиданиеДлительнойОперации Тогда
		ПодключитьОбработчикОжидания("НачатьОжиданиеДлительнойОперацииПриОткрытии", 0.1, Истина);
	ИначеЕсли НЕ Заказ.Пустая() Тогда
		РазвернутьСтроки();
		Если ОжиданиеРасчетаИтогов <> Неопределено Тогда
			ПодключитьОбработчикОжидания("НачатьОжиданиеРасчетаИтоговПриОткрытии", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияРасчетаПриОткрытии()
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперацииПриОткрытии()
	
	НачатьОжиданиеДлительнойОперации("ЗаполнитьВФонеЗавершение");
	НачатьОжиданиеРасчетаИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеРасчетаИтоговПриОткрытии()
	
	НачатьОжиданиеРасчетаИтогов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаказПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ИнформационнаяСтрока = Неопределено;
	
	Если Заказ.Пустая() Тогда
		Дерево.ПолучитьЭлементы().Очистить();
		Возврат;
	КонецЕсли;
	
	УстановитьСтандартныйЗаголовокФормыНаКлиентеНаСервереБезКонтекста(ЭтаФорма);
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЭтапыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОтборПриИзменении(Элемент)
	
	КлючНоменклатураПоиск = Неопределено;
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОтборПриИзменении(Элемент)
	
	ОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОтборПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриИзменении()
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоискВСтруктуре(ЭтаФорма) Тогда
		
		Действие = "Заполнить";
		ОжидатьРасчетСтруктурыИВыполнитьДействие();
		
	ИначеЕсли ОтборУстановлен Тогда
		
		Действие = "ЗаполнитьРазвернуть";
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ИдентификаторыСтрок", ИдентификаторыРазвернутыхСтрок());
		
		ОжидатьРасчетСтруктурыИВыполнитьДействие();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПеремещенияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	МониторингЗаказаКлиент.ИнформационнаяСтрокаОбработкаНавигационнойСсылки(Заказ, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОшибкиПодбораСпецификацийВЗаказахНаПроизводствоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Заказ);
	ОткрытьФорму("РегистрСведений.ПротоколРасчетаСтруктурыЗаказа.Форма.ВыводОшибокПодбораСпецификацийВЗаказахНаПроизводство", СтруктураПараметров, Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиЗаполненияДанныхОбИзделияхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Заказ);
	ОткрытьФорму("РегистрСведений.ПротоколРасчетаСтруктурыЗаказа.Форма.ВыводОшибокРазузлованияСтруктурыИзделия", СтруктураПараметров, Заказ);

КонецПроцедуры

&НаКлиенте
Процедура ОшибкиРасчетаНормативногоГрафикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ЗаказНаПроизводство", Заказ);
	ОткрытьФорму("РегистрСведений.НормативныйГрафикСтруктурыЗаказа.Форма.ЖурналОшибок", СтруктураПараметров, Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьМатериалыПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЭтапов

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаДерева = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если Поле.Имя = "Спецификация"
		И ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Спецификация);
		
	ИначеЕсли Поле.Имя = "СкладПодразделение"
		И ЗначениеЗаполнено(СтрокаДерева.СкладПодразделение) Тогда
		
		ПоказатьЗначение(, СтрокаДерева.СкладПодразделение);
		
	ИначеЕсли Поле.Имя = "Склад"
		И ЗначениеЗаполнено(СтрокаДерева.Склад) Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Склад);
		
	ИначеЕсли Поле.Имя = "Подразделение"
		И ЗначениеЗаполнено(СтрокаДерева.Подразделение) Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Подразделение);
		
	ИначеЕсли (Поле.Имя = "Осталось"
			   Или Поле.Имя = "ИндексКартинкиОсталосьСвободныйИлиНеНужный"
			   Или Поле.Имя = "ИндексКартинкиОсталосьПоДругимНазначением"
			   Или Поле.Имя = "ИндексКартинкиОсталосьНаДругомСкладе"
			   Или Поле.Имя = "ИндексКартинкиОсталось")
			И СтрокаДерева.ИндексКартинкиОсталось > 0 Тогда
		
		ОткрытьОтчетОстаткиИДоступностьТоваров(СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика);
		
	ИначеЕсли (Поле.Имя = "Требуется" Или Поле.Имя = "Готово" Или Поле.Имя = "Осталось" Или Поле.Имя = "Запущено")
			И (СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат()
				Или СтрокаДерева.ТипСтроки = ТипСтрокиПеремещение()
				Или СтрокаДерева.ТипСтроки = ТипСтрокиМатериал()) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("КлючВарианта"			 , "ПоИсточникамИДатамКонтекст");
		ПараметрыФормы.Вставить("Отбор"					 , Новый Структура);
		ПараметрыФормы.Вставить("ПараметрКоманды"		 , Заказ);
		
		ПараметрыФормы.Отбор.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
		ПараметрыФормы.Отбор.Вставить("Характеристика", СтрокаДерева.Характеристика);
		ПараметрыФормы.Отбор.Вставить("Склад",          СтрокаДерева.Склад);
		ПараметрыФормы.Отбор.Вставить("Назначение",     СтрокаДерева.Назначение);
		ПараметрыФормы.Отбор.Вставить("ЗаказНаПроизводство", Заказ);
		
		ОткрытьФорму("Отчет.УкомплектованностьЗаказов.Форма", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЭтапСтруктуры()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиЭтапДокумент() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.ЭтапСсылка);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиИзделие()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиПеремещение()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиМатериал()
		ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиНоменклатураРасшифровки() Тогда
		
		ПоказатьЗначение(, СтрокаДерева.Номенклатура);
		
	ИначеЕсли СтрокаДерева.ТипСтроки = ТипСтрокиЗаказНаЗапуск() Тогда
		
		Если ЗначениеРеквизитаОбъекта(СтрокаДерева.ЗаказНаЗапуск, "ДинамическаяСтруктура") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заказ", СтрокаДерева.ЗаказНаЗапуск);
			ПараметрыФормы.Вставить("ПоказыватьЭтапы", Истина);
			
			Уникальность = Неопределено;
			
			СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
			Если СтрокаДерева.ЗаказНаЗапускЭтапы.ВГраница() <> -1 Тогда
				ПараметрыФормы.Вставить("ЗаказНаЗапускЭтапы", СтрокаДерева.ЗаказНаЗапускЭтапы);
				ПараметрыФормы.Вставить("ЗаказНаЗапускНоменклатура", СтрокаРодитель.Номенклатура);
				ПараметрыФормы.Вставить("ЗаказНаЗапускХарактеристика", СтрокаРодитель.Характеристика);
				ПараметрыФормы.Вставить("ЗаказНаЗапускСклад", СтрокаРодитель.Склад);
				ПараметрыФормы.Вставить("ЗаказНаЗапускНазначение", СтрокаРодитель.Назначение);
				Уникальность = СтрокаДерева.ЗаказНаЗапускЭтапы[0];
			Иначе
				ПараметрыФормы.Вставить("Назначение", СтрокаРодитель.Назначение);
				Уникальность = СтрокаДерева.ЗаказНаЗапуск;
			КонецЕсли;
			
			ОткрытьФорму(
				"Отчет.СтруктураЗаказаНаПроизводствоДинамическая.Форма.ФормаОтчета",
				ПараметрыФормы,
				ЭтаФорма,
				Уникальность);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заказ", СтрокаДерева.ЗаказНаЗапуск);
			
			ОткрытьФорму(
				"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
				ПараметрыФормы,
				ЭтаФорма,
				СтрокаДерева.ЗаказНаЗапуск);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	СтрокаДерева = Элемент.ДанныеСтроки(Строка);
	
	Если СтрокаДерева.ДостроитьДерево Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени(
			"Отчет.СтруктураЗаказаНаПроизводствоДинамическая.ФормаОтчета.ДостроитьДерево");
		
		Строки = СтрокаДерева.ПолучитьЭлементы();
		
		КлючиПартий = Новый Массив;
		Для Индекс = -Строки.Количество()+1 По 0 Цикл
			Строка = Строки[-Индекс];
			Если Строка.ТипСтроки = ТипСтрокиСлужебный() Тогда
				КлючиПартий.Добавить(Строка.КлючПартия);
				Строки.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДерева.ДостроитьДерево = Ложь;
		
		ДостроитьДерево(КлючиПартий, СтрокаДерева.ЭтапСсылка, СтрокаДерева.ПолучитьИдентификатор());
		
		РазвернутьСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	МожноЗаменитьСпецификацию = ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиИзделие()
				И Не ТекущиеДанные.НесколькоСпецификаций
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
				И Не ТекущиеДанные.НесколькоСпецификаций
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры())
		И ТекущиеДанные.Осталось > 0;
	Элементы.ЗаменитьСпецификацию.Доступность = МожноЗаменитьСпецификацию;
	Элементы.ДеревоКонтекстноеМенюЗаменитьСпецификацию.Доступность = МожноЗаменитьСпецификацию;
	
	МожноПерезаполнитьПоСпецификации = ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиИзделие()
				И Не ТекущиеДанные.НесколькоСпецификаций
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
				И Не ТекущиеДанные.НесколькоСпецификаций
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент());
	Элементы.ДеревоКонтекстноеМенюПерезаполнитьПоСпецификации.Доступность = МожноПерезаполнитьПоСпецификации;

	Элементы.ДеревоКонтекстноеМенюСоздатьДокументПеремещениеИзделия.Доступность = 
		ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиПеремещение() ИЛИ ТекущиеДанные.НесколькоСкладов
			ИЛИ ТекущиеДанные.ПолучитьРодителя() <> Неопределено И ТекущиеДанные.ПолучитьРодителя().ТипСтроки = ТипСтрокиПеремещение());
	
	Элементы.ДеревоКонтекстноеМенюСоздатьДокументПеремещениеКомплектующих.Доступность =
		ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиИзделие()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры());
	
	Элементы.ДеревоКонтекстноеМенюСоздатьДокументКорректировкаНазначения.Доступность = 
		ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПеремещение()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиМатериал())
		И ЗначениеЗаполнено(ТекущиеДанные.Назначение)
		И ТекущиеДанные.Осталось > 0;
	
	Элементы.ДеревоКонтекстноеМенюСформироватьЭтапыПоСтроке.Доступность = 
		ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипСтроки <> ТипСтрокиМатериал();
		
	Элементы.ДеревоКонтекстноеМенюИзменитьПартию.Доступность =
		ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент();
	
	Элементы.ДеревоКонтекстноеМенюУдалитьЭтапыПартии.Доступность =
		ТекущиеДанные <> Неопределено
		И ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент();
	
	Элементы.ДеревоКонтекстноеМенюСформироватьОтчетРасшифровкаУкомплектованностиКонтекст.Доступность =
		ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПеремещение()
			ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиМатериал());
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьТекущееСостояниеОбеспечения", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = "Заполнить";
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСпецификацию(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ?(ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры() Или ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент(),
		ТекущиеДанные.ПолучитьРодителя(),
		ТекущиеДанные);
	
	СтрокаСтруктурой = Новый Структура("ЗаказНаПроизводство,Номенклатура,Характеристика,Склад,Назначение");
	ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, ДанныеСтроки);
	СтрокаСтруктурой.ЗаказНаПроизводство = Заказ;
	
	Если Не ПроверитьВозможностьЗаменыСпецификации(ДанныеСтроки.ТипСтроки, СтрокаСтруктурой) Тогда
		ТекстЗаголовка = НСтр("ru = 'Замена спецификации недоступна.';
								|en = 'Cannot replace the bill of materials.'");
		ТекстСообщения = НСтр("ru = 'Не поддерживается замена спецификации для полуфабрикатов производимых в процессе с предустановленной спецификацией.';
								|en = 'Replacement of the bill of materials is not supported for semi-finished products manufactured throughout the process with the predefined bill of materials.'");
		ПоказатьПредупреждение(, ТекстСообщения,,ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаменитьСпецификациюЗавершение", ЭтаФорма, Новый Структура("ДанныеСтроки", СтрокаСтруктурой));
	
	ДанныеВыбранныхСтрок = Новый Массив;
	СтруктураДанных = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
	СтруктураДанных.Номенклатура   = ДанныеСтроки.Номенклатура;
	СтруктураДанных.Характеристика = ДанныеСтроки.Характеристика;
	ДанныеЗаказа = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Заказ, "Подразделение, НаправлениеДеятельности, НачатьНеРанее");
	СтруктураДанных.НачалоПроизводства      = ДанныеЗаказа.НачатьНеРанее;
	СтруктураДанных.ПодразделениеДиспетчер  = ДанныеЗаказа.Подразделение;
	СтруктураДанных.НаправлениеДеятельности = ДанныеЗаказа.НаправлениеДеятельности;
	ДанныеВыбранныхСтрок.Добавить(СтруктураДанных);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	ПараметрыВыбораСпецификаций.Вставить("ИсключитьСпецификацию", ТекущиеДанные.Спецификация);
	
	УправлениеДаннымиОбИзделияхКлиент.ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(ДанныеВыбранныхСтрок, ПараметрыВыбораСпецификаций, ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСпецификациюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗамены = ЗаменитьСпецификациюНаСервере(ДополнительныеПараметры.ДанныеСтроки, РезультатЗакрытия);
	
	Если Не РезультатЗамены.ЕстьОшибки Тогда
		
		ДлительнаяОперация = Неопределено;
		
		Действие = "Заполнить";
		ОжидатьРасчетСтруктурыИВыполнитьДействие();
		
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить замену.';
									|en = 'Cannot replace.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоСпецификации(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить пересчет материалов, трудозатрат по выбранной строке.';
									|en = 'Cannot recalculate materials and labor costs for the selected line.'"));
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = Неопределено;
	
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент() Тогда
		
		ПоказатьОповещениеПользователя(
			ПерезаполнитьПартиюИмяЗадания(),,
			НСтр("ru = 'Запущено перезаполнение партии по спецификации.';
				|en = 'Lot refilling by the BOM is started.'"),
			БиблиотекаКартинок.Информация32);
		ПерезаполнитьПартиюПоСпецификацииСервер(ТекущиеДанные.КлючПартия);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ПерезаполнитьПартиюПоСпецификацииВФонеЗавершение", ЭтотОбъект),
			ПараметрыОжидания);
		
	Иначе
		
		СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказаПоСпецификации(ТекущиеДанные.Спецификация, Заказ);
		
		Действие = "Заполнить";
		ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПартию(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ДелениеПартииПроизводства.Форма.РабочееМесто",
		Новый Структура("ПартияПроизводства, Этап", ТекущиеДанные.КлючПартия, ТекущиеДанные.ЭтапСсылка),
		ЭтаФорма,
		ТекущиеДанные.КлючПартия);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументКорректировкаНазначения(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	ПараметрыДанных = ВстречнаяКорректировкаНазначенияКлиент.ПараметрыВстречнойКорректировкиНазначения();
	
	ВстречнаяКорректировкаНазначенияКлиент.ЗаполнитьПараметрыВстречнойКорректировкиНазначения(
		ПараметрыДанных, ТекущиеДанные, ЭтотОбъект);
	
	ДанныеВстречнойКорректировки =
		ВстречнаяКорректировкаНазначенияВызовСервера.ДанныеВстречнойКорректировкиНазначения(ПараметрыДанных, УникальныйИдентификатор);
	
	ОписаниеКоманды = ВстречнаяКорректировкаНазначенияКлиент.ОписаниеКоманды(
						ЭтотОбъект, ПараметрыДанных, ДанныеВстречнойКорректировки);
	
	СозданиеНаОснованииУТКлиент.ОткрытьМастерВстречнойКорректировкиНазначения(ОписаниеКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПеремещениеИзделия(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	КлючНоменклатура = Null;
	
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиПеремещение()
		Или ТекущиеДанные.НесколькоСкладов Тогда
		
		КлючНоменклатура = ТекущиеДанные.КлючНоменклатура;
		
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя().ТипСтроки = ТипСтрокиПеремещение() Тогда
		
		КлючНоменклатура = ТекущиеДанные.ПолучитьРодителя().КлючНоменклатура;
		
	КонецЕсли;
	
	ТабличнаяЧастьТовары = СтруктураЗаказаВызовСервера.ТабличнаяЧастьПеремещениеИзделийПоНоменклатурномуПлану(КлючНоменклатура, ПараметрыПеремещенияТоваров.ТолькоВНаличии);
	
	Если ТабличнаяЧастьТовары.Количество() > 0 Тогда
		
		СкладОтправитель = ТабличнаяЧастьТовары[0].СкладОтправитель;
		СкладПолучатель  = ТабличнаяЧастьТовары[0].СкладПолучатель;
		
		ЖелаемаяДатаПоступления = ТабличнаяЧастьТовары[0].ЖелаемаяДатаПоступления;
		
	Иначе
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"РезультатВопросаСоздатьПеремещениеВручнуюЗавершение",
				ЭтаФорма,
				Новый Структура("Номенклатура,Характеристика", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика)),
			НСтр("ru = 'Нет данных для оформления перемещения номенклатуры, создать новый документ для заполнения вручную?';
				|en = 'No data to register the item transfer. Do you want to create a new document to fill manually?'"),
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет);

		Возврат;
		
	КонецЕсли;
	
	СтрокаИзделие = ТекущиеДанные; // переходим от текущей строки к сборочное единице
	СтрокаИзделие = ?(СтрокаИзделие.ТипСтроки = ТипСтрокиПолуфабрикат()
		Или СтрокаИзделие.ТипСтроки = ТипСтрокиМатериал(), СтрокаИзделие.ПолучитьРодителя(), СтрокаИзделие);
	СтрокаИзделие = ?(СтрокаИзделие.ТипСтроки = ТипСтрокиПеремещение(), СтрокаИзделие.ПолучитьРодителя(), СтрокаИзделие);
	СтрокаИзделие = ?(СтрокаИзделие.ТипСтроки = ТипСтрокиЭтапСтруктуры()
		Или СтрокаИзделие.ТипСтроки = ТипСтрокиЭтапДокумент(), СтрокаИзделие.ПолучитьРодителя(), СтрокаИзделие);
	
	СоответствиеОбъектов = Новый Соответствие;
	СоответствиеОбъектов.Вставить(Заказ, "Номер, Дата");
	СоответствиеОбъектов.Вставить(СтрокаИзделие.Номенклатура,   "Наименование");
	СоответствиеОбъектов.Вставить(СтрокаИзделие.Характеристика, "Наименование");

	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(СоответствиеОбъектов);

	Комментарий = СтрШаблон(
		НСтр("ru = 'Сформирован по заказу на производство %1 для обеспечения номенклатуры ""%2"" комплектующими';
			|en = 'Generated by the %1 production order to supply the ""%2"" item with components'"),
		СтруктураЗаказаВызовСервера.ПолноеПредставлениеЗаказа(
			ЗначенияРеквизитов[Заказ].Номер,
			ЗначенияРеквизитов[Заказ].Дата,
			'00010101'),
		НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ЗначенияРеквизитов[СтрокаИзделие.Номенклатура].Наименование, ЗначенияРеквизитов[СтрокаИзделие.Характеристика].Наименование));
	
	ОткрытьФормуВводаЗаказаНаПеремещение(СкладОтправитель, СкладПолучатель, ТабличнаяЧастьТовары, ЖелаемаяДатаПоступления, Комментарий);

КонецПроцедуры

&НаКлиенте
Процедура РезультатВопросаСоздатьПеремещениеВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СкладОтправитель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		СкладПолучатель  = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
		ТабличнаяЧастьТовары = Новый Массив();
		
		СтрокаТовары = Новый Структура;
		
		СтрокаТовары.Вставить("ЖелаемаяДатаПоступления", '00010101');
		
		СтрокаТовары.Вставить("СкладОтправитель",	  СкладОтправитель);
		СтрокаТовары.Вставить("СкладПолучатель",	  СкладПолучатель);
		СтрокаТовары.Вставить("НачалоОтгрузки",		  '00010101');
		СтрокаТовары.Вставить("ОкончаниеПоступления", '00010101');
		
		СтрокаТовары.Вставить("Номенклатура",		  ДополнительныеПараметры.Номенклатура);
		СтрокаТовары.Вставить("Характеристика",		  ДополнительныеПараметры.Характеристика);
		
		ТабличнаяЧастьТовары.Добавить(СтрокаТовары);
		
		ОткрытьФормуВводаЗаказаНаПеремещение(СкладПолучатель, СкладОтправитель, ТабличнаяЧастьТовары);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПеремещениеКомплектующих(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	ДанныеИзделия = ?(ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры(),
		ТекущиеДанные.ПолучитьРодителя(),
		ТекущиеДанные);
	
	СтруктураДанных = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,ЗаказНаПроизводство"
		+ ?(ДанныеИзделия.ТипСтроки = ТипСтрокиПолуфабрикат(), ",КлючНоменклатура", ""));
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ДанныеИзделия);
	СтруктураДанных.ЗаказНаПроизводство = Заказ;
	
	ТабличнаяЧастьТовары = СтруктураЗаказаВызовСервера.ТабличнаяЧастьПеремещениеКомплектующихПоНоменклатурномуПлану(СтруктураДанных, ТекущиеДанные.ЭтапСсылка, ПараметрыПеремещенияТоваров.ТолькоВНаличии);
	
	СписокСкладов = Новый Массив();
	
	КоличествоСтрок = ТабличнаяЧастьТовары.Количество();
	X = 0;
	Y = 0;
	Граница = -1;
	
	Пока КоличествоСтрок > X Цикл
		
		ДанныеСтроки = ТабличнаяЧастьТовары[X];
		
		Если Y > Граница Тогда
			
			СписокСкладов.Добавить(Новый Структура("СкладОтправитель, СкладПолучатель", ДанныеСтроки.СкладОтправитель, ДанныеСтроки.СкладПолучатель));
			Граница = Граница + 1;
			X = X + 1;
			Продолжить;
		
		КонецЕсли;
		
		Если СписокСкладов[Y].СкладОтправитель = ДанныеСтроки.СкладОтправитель И СписокСкладов[Y].СкладПолучатель = ДанныеСтроки.СкладПолучатель Тогда
			X = X + 1;
			Продолжить;
		КонецЕсли;
		
		Y = Y + 1;
		
	КонецЦикла;
	
	Если СписокСкладов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Нет данных для оформления перемещения комплектующих';
				|en = 'No data to register the component transfer'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ДанныеИзделия, СписокСкладов, ТабличнаяЧастьТовары", ДанныеИзделия, СписокСкладов, ТабличнаяЧастьТовары);
	
	Если СписокСкладов.Количество() = 1 Тогда
		
		СоздатьДокументПеремещениеКомплектующихЗавершение(0, ДополнительныеПараметры);
		
	Иначе
		
		ЗначенияДляВыбора = Новый СписокЗначений();
		
		Для Индекс = 0 По СписокСкладов.ВГраница() Цикл
			ЗначенияДляВыбора.Добавить(Индекс, СтрШаблон("%1 / %2", СписокСкладов[Индекс].СкладОтправитель, СписокСкладов[Индекс].СкладПолучатель));
		КонецЦикла;
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьДокументПеремещениеКомплектующихЗавершение",
			ЭтаФорма, 
			ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ЗначенияДляВыбора);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада отправителя / получателя';
													|en = 'Select an origin / destination warehouse'"));
			
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ЭтаФорма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПеремещениеКомплектующихЗавершение(ИндексСклада, ДополнительныеПараметры) Экспорт
	
	Если ИндексСклада = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИзделия = ДополнительныеПараметры.ДанныеИзделия;
	
	СкладОтправитель = ДополнительныеПараметры.СписокСкладов[ИндексСклада].СкладОтправитель;
	СкладПолучатель  = ДополнительныеПараметры.СписокСкладов[ИндексСклада].СкладПолучатель;
	
	ТабличнаяЧастьТовары = Новый Массив();
	
	Для каждого Строка Из ДополнительныеПараметры.ТабличнаяЧастьТовары Цикл
		
		Если Строка.СкладОтправитель <> СкладОтправитель Или Строка.СкладПолучатель <> СкладПолучатель Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличнаяЧастьТовары.Добавить(Строка);
		
	КонецЦикла;
	
	СоответствиеОбъектов = Новый Соответствие;
	СоответствиеОбъектов.Вставить(Заказ, "Номер, Дата");
	СоответствиеОбъектов.Вставить(ДанныеИзделия.Номенклатура,        "Наименование");
	СоответствиеОбъектов.Вставить(ДанныеИзделия.Характеристика,      "Наименование");

	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(СоответствиеОбъектов);

	Комментарий = СтрШаблон(
		НСтр("ru = 'Сформирован по заказу на производство %1 для обеспечения изделия ""%2"" комплектующими';
			|en = 'Generated by the %1 production order to supply the ""%2"" product with components'"),
		СтруктураЗаказаВызовСервера.ПолноеПредставлениеЗаказа(
			ЗначенияРеквизитов[Заказ].Номер,
			ЗначенияРеквизитов[Заказ].Дата,
			'00010101'),
		НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ЗначенияРеквизитов[ДанныеИзделия.Номенклатура].Наименование, ЗначенияРеквизитов[ДанныеИзделия.Характеристика].Наименование));
	
	ОткрытьФормуВводаЗаказаНаПеремещение(СкладОтправитель, СкладПолучатель, ТабличнаяЧастьТовары,, Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетРасшифровкаУкомплектованностиКонтекст(Команда)
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта"			 , "ПоИсточникамИДатамКонтекст");
	ПараметрыФормы.Вставить("Отбор"					 , Новый Структура);
	ПараметрыФормы.Вставить("ПараметрКоманды"		 , Заказ);
	
	ПараметрыФормы.Отбор.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыФормы.Отбор.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыФормы.Отбор.Вставить("Склад",          ТекущиеДанные.Склад);
	ПараметрыФормы.Отбор.Вставить("Назначение",     ТекущиеДанные.Назначение);
	ПараметрыФормы.Отбор.Вставить("ЗаказНаПроизводство", Заказ);
	
	ОткрытьФорму("Отчет.УкомплектованностьЗаказов.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭтапы(Команда)
	
	СтруктураОтборов = Новый Структура("ЗаказНаПроизводство", Заказ);
	ПараметрыФормы = Новый Структура("СтруктураОтборов", СтруктураОтборов);
	ОткрытьФорму("Обработка.ФормированиеЭтаповПроизводства.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПеремещения(Команда)
	
	СтруктураОтборов = Новый Структура("ЗаказНаПроизводство", Заказ);
	ПараметрыФормы = Новый Структура("СтруктураОтборов", СтруктураОтборов);
	ОткрытьФорму("Обработка.ФормированиеПеремещенийПоЗаказамНаПроизводство.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭтапыПоСтроке(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура;
	
	Если ТекущиеДанные.ТипСтроки = ТипСтрокиИзделие()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиПеремещение()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиНоменклатураРасшифровки() Тогда
		
		СтруктураОтборов.Вставить("ЗаказНаПроизводство", Заказ);
		СтруктураОтборов.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураОтборов.Вставить("Спецификация", ТекущиеДанные.Спецификация);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапСтруктуры()
		ИЛИ ТекущиеДанные.ТипСтроки = ТипСтрокиЭтапДокумент() Тогда
		
		СтруктураОтборов.Вставить("ЗаказНаПроизводство", Заказ);
		СтруктураОтборов.Вставить("Номенклатура", ТекущиеДанные.ПолучитьРодителя().Номенклатура);
		СтруктураОтборов.Вставить("Спецификация", ТекущиеДанные.ПолучитьРодителя().Спецификация);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ТипСтрокиЗаказНаЗапуск() Тогда
		
		СтруктураОтборов.Вставить("ЗаказНаПроизводство", ТекущиеДанные.ЗаказНаЗапуск);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СтруктураОтборов", СтруктураОтборов);
	ОткрытьФорму("Обработка.ФормированиеЭтаповПроизводства.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьВсеНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПодчиненные(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	РазвернутьВсеНаКлиенте(Истина, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Очередь = Новый Массив;
	Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Очередь.Добавить(Строка);
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс <= Очередь.ВГраница() Цикл
		Для каждого Строка Из Очередь[Индекс].ПолучитьЭлементы() Цикл
			Очередь.Добавить(Строка);
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для Индекс = -Очередь.ВГраница() По 0 Цикл
		Если Элементы.Дерево.Развернут(Очередь[-Индекс].ПолучитьИдентификатор()) Тогда
			Элементы.Дерево.Свернуть(Очередь[-Индекс].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьНастройкиЗавершение", ЭтаФорма);
	
	ПараметрыОткрытия = Новый Структура("ПараметрыПеремещенияТоваров", ПараметрыПеремещенияТоваров);
	
	ОткрытьФорму("Отчет.СтруктураЗаказаНаПроизводствоДинамическая.Форма.РедактированиеНастроек", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьИзменения = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Свойство("ПараметрыПеремещенияТоваров", ПараметрыПеремещенияТоваров) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтруктуруЗаказа(Команда)
	
	Если Заказ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран заказ на производство';
																|en = 'Production order is not selected'"),,"Заказ");
		Возврат;
	КонецЕсли;
	
	Действие = "Заполнить";
	СтруктураЗаказаКлиент.ЗапуститьПересчетСтруктурыЗаказа(Заказ);
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущееСостояниеОбеспеченияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОстаткиИДоступностьТоваров" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьОтчетОстаткиИДоступностьТоваров(ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтапыПартии(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбрана строка структуры заказа';
				|en = 'Order structure line is not selected'"),
			,
			"Дерево");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьЭтапыВопросЗавершение",
		ЭтотОбъект,
		ТекущиеДанные.КлючПартия);
	
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Пометить на удаление цепочку этапов?';
			|en = 'Do you want to mark the stage chain for deletion?'"),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Заполнить

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Заполнить отчет
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Структура заказа на производство""';
			|en = 'Generate the ""Production order structure"" report'");
	
	ЭтапыОтборАналитика = Новый Структура;
	ЭтапыОтборАналитика.Вставить("Номенклатура", ЭтапыОтборНоменклатура);
	ЭтапыОтборАналитика.Вставить("Характеристика", ЭтапыОтборХарактеристика);
	ЭтапыОтборАналитика.Вставить("Склад", ЭтапыОтборСклад);
	ЭтапыОтборАналитика.Вставить("Назначение", ЭтапыОтборНазначение);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Заказ", Заказ);
	ПараметрыПроцедуры.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	ПараметрыПроцедуры.Вставить("ПоказыватьПеремещения", ПоказыватьПеремещения);
	ПараметрыПроцедуры.Вставить("ПоказыватьМатериалы", ПоказыватьМатериалы);
	ПараметрыПроцедуры.Вставить("Назначение", НазначениеОтбор);
	ПараметрыПроцедуры.Вставить("Этапы", ЭтапыОтбор);
	ПараметрыПроцедуры.Вставить("ЭтапыАналитика", ЭтапыОтборАналитика);
	
	Если ЭтоПоискВСтруктуре(ЭтаФорма) Тогда
		ПараметрыПроцедуры.Вставить("Номенклатура", НоменклатураОтбор);
		ПараметрыПроцедуры.Вставить("Склад", СкладОтбор);
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.ПостроитьДеревоПоиска",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		ОтборУстановлен = Истина;
	Иначе
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
			"Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.ПостроитьДеревоЗаказа",
			ПараметрыПроцедуры,
			ПараметрыВыполнения);
		ОтборУстановлен = Ложь;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		НачатьОжиданиеДлительнойОперации = Истина;
	Иначе
		ОбработатьРезультатЗаполнитьВФоне(ДлительнаяОперация);
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
	// Обновить итоги
	Если ОжиданиеРасчетаИтогов <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ОжиданиеРасчетаИтогов.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Расчет итогов для отчета ""Структура заказа на производство""';
			|en = 'Totals calculation for the ""Production order structure"" report'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗаказНаПроизводство", Заказ);
	
	ОжиданиеРасчетаИтогов = ДлительныеОперации.ВыполнитьВФоне(
		"МониторингЗаказа.ОбновитьИтогиПоЗаказуНаПроизводство",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	// Прочее
	ТаблицаОстатковСостояниеОбеспечения.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Дерево.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	Иначе
		ОбработатьРезультатЗаполнитьВФоне(Результат);
		РазвернутьСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполнитьВФоне(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		СтрокиДерева = Дерево.ПолучитьЭлементы();
		СтрокиДерева.Очистить();
		РазвернутыеСтроки.Очистить();
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ДеревоДанных.Строки.Количество() > 0 Тогда
			Если ЭтоПоискВСтруктуре(ЭтаФорма) Тогда
				ЗаполнитьДеревоРекурсивноПоиск(СтрокиДерева, ДеревоДанных.Строки, Истина);
			Иначе
				ЗаполнитьДеревоРекурсивно(СтрокиДерева, ДеревоДанных.Строки);
				Для каждого Строка Из СтрокиДерева Цикл
					РазвернутыеСтроки.Добавить(Строка.ПолучитьИдентификатор());
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
	Иначе
		
		Дерево.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаказаКлиентСервер.ОтобразитьСостояниеРасчетаСтруктуры(
		Элементы,
		Документы.ЗаказНаПроизводство2_2.ПротоколРасчетаСтруктурыЗаказа(Заказ));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРекурсивно(СтрокиДерева, СтрокиСтруктуры)
	
	Для каждого СтрокаСтруктура Из СтрокиСтруктуры Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтруктура);
		
		Если СтрокаСтруктура.Строки.Количество() > 0 Тогда
			ЗаполнитьДеревоРекурсивно(НоваяСтрока.ПолучитьЭлементы(), СтрокаСтруктура.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРекурсивноПоиск(СтрокиДерева, СтрокиСтруктуры, РазвернутьСтроки)
	
	Для каждого СтрокаСтруктура Из СтрокиСтруктуры Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтруктура);
		
		РазвернутьУзел = РазвернутьСтроки
			И (Не НоваяСтрока.СтрокаПоиска
				ИЛИ НоваяСтрока.КлючНоменклатура = КлючНоменклатураПоиск);
		
		Если РазвернутьУзел Тогда
			РазвернутыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючНоменклатураПоиск)
				И НоваяСтрока.КлючНоменклатура = КлючНоменклатураПоиск Тогда
			ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ИначеЕсли НоваяСтрока.СтрокаПоиска
				И ТекущаяСтрока = -1 Тогда
			ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если СтрокаСтруктура.Строки.Количество() > 0 Тогда
			ЗаполнитьДеревоРекурсивноПоиск(
				НоваяСтрока.ПолучитьЭлементы(),
				СтрокаСтруктура.Строки,
				РазвернутьСтроки И Не НоваяСтрока.СтрокаПоиска);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПоискВСтруктуре(Форма)
	
	Возврат Не(Форма.НоменклатураОтбор.Пустая()
		И Форма.СкладОтбор.Пустая());
	
КонецФункции

#КонецОбласти

#Область ЗаполнитьРазвернуть

&НаСервере
Процедура ЗаполнитьРазвернутьНаСервере(Идентификаторы)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Структура заказа на производство""';
			|en = 'Generate the ""Production order structure"" report'");
		
	ЭтапыОтборАналитика = Новый Структура;
	ЭтапыОтборАналитика.Вставить("Номенклатура", ЭтапыОтборНоменклатура);
	ЭтапыОтборАналитика.Вставить("Характеристика", ЭтапыОтборХарактеристика);
	ЭтапыОтборАналитика.Вставить("Склад", ЭтапыОтборСклад);
	ЭтапыОтборАналитика.Вставить("Назначение", ЭтапыОтборНазначение);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Заказ", Заказ);
	ПараметрыПроцедуры.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	ПараметрыПроцедуры.Вставить("ПоказыватьПеремещения", ПоказыватьПеремещения);
	ПараметрыПроцедуры.Вставить("ПоказыватьМатериалы", ПоказыватьМатериалы);
	ПараметрыПроцедуры.Вставить("РазвернутыеСтроки", КлючиРазвернутыхСтрок(Идентификаторы));
	ПараметрыПроцедуры.Вставить("Назначение", НазначениеОтбор);
	ПараметрыПроцедуры.Вставить("Этапы", ЭтапыОтбор);
	ПараметрыПроцедуры.Вставить("ЭтапыАналитика", ЭтапыОтборАналитика);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.ПостроитьДеревоРазвернутыхСтрок",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	ОтборУстановлен = Ложь;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		НачатьОжиданиеДлительнойОперации = Истина;
	Иначе
		ОбработатьРезультатЗаполнитьРазвернутьВФоне(ДлительнаяОперация, Идентификаторы);
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРазвернутьВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Дерево.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	Иначе
		ОбработатьРезультатЗаполнитьРазвернутьВФоне(Результат, ИдентификаторыРазвернутыхСтрок());
		РазвернутьСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполнитьРазвернутьВФоне(Результат, Идентификаторы)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		// Таблица развернутых строк
		СтрокиРазвернуть = КлючиРазвернутыхСтрок(Идентификаторы);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Склад");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("ЭтапСсылка");
		
		// Кеш текущей строки
		КешТекущейСтроки = Неопределено;
		Если Элементы.Дерево.ТекущаяСтрока <> Неопределено Тогда
			
			СтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
			
			КешТекущейСтроки = Новый Структура;
			КешТекущейСтроки.Вставить("Номенклатура", СтрокаДерева.Номенклатура);
			КешТекущейСтроки.Вставить("Характеристика", СтрокаДерева.Характеристика);
			КешТекущейСтроки.Вставить("Склад", СтрокаДерева.Склад);
			КешТекущейСтроки.Вставить("Назначение", СтрокаДерева.Назначение);
			КешТекущейСтроки.Вставить("ЭтапСсылка", СтрокаДерева.ЭтапСсылка);
			КешТекущейСтроки.Вставить("НомерСтроки", СтрокаДерева.НомерСтроки);
			КешТекущейСтроки.Вставить("КлючНоменклатура", СтрокаДерева.КлючНоменклатура);
			
		КонецЕсли;
		
		// Очистка коллекций
		СтрокиДерева = Дерево.ПолучитьЭлементы();
		СтрокиДерева.Очистить();
		РазвернутыеСтроки.Очистить();
		
		// Заполнение дерева
		ДеревоДанных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если ДеревоДанных.Строки.Количество() > 0 Тогда
			
			ЗаполнитьРазвернутьДеревоРекурсивно(
				СтрокиДерева,
				ДеревоДанных.Строки,
				СтрокиРазвернуть,
				СтруктураПоиска,
				КешТекущейСтроки);
			
			Для каждого Строка Из СтрокиДерева Цикл
				РазвернутыеСтроки.Добавить(Строка.ПолучитьИдентификатор());
			КонецЦикла;
			
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
	Иначе
		
		Дерево.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазвернутьДеревоРекурсивно(СтрокиДерева, СтрокиСтруктуры, СтрокиРазвернуть, СтруктураПоиска, КешТекущейСтроки)
	
	Для каждого СтрокаСтруктура Из СтрокиСтруктуры Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтруктура);
		
		Если СтрокаСтруктура.ТипСтроки = ТипСтрокиЭтапСтруктуры()
				ИЛИ СтрокаСтруктура.ТипСтроки = ТипСтрокиЭтапДокумент() Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСтруктура.Родитель,
				"Номенклатура, Характеристика, Склад, Назначение");
			СтруктураПоиска.ЭтапСсылка = СтрокаСтруктура.ЭтапСсылка;
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСтруктура);
		КонецЕсли;
		
		Если СтрокиРазвернуть.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1 Тогда
			РазвернутыеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Если КешТекущейСтроки <> Неопределено
				И НоваяСтрока.Номенклатура = КешТекущейСтроки.Номенклатура
				И НоваяСтрока.Характеристика = КешТекущейСтроки.Характеристика
				И НоваяСтрока.Склад = КешТекущейСтроки.Склад
				И НоваяСтрока.Назначение = КешТекущейСтроки.Назначение
				И НоваяСтрока.ЭтапСсылка = КешТекущейСтроки.ЭтапСсылка
				И НоваяСтрока.НомерСтроки = КешТекущейСтроки.НомерСтроки
				И НоваяСтрока.КлючНоменклатура = КешТекущейСтроки.КлючНоменклатура Тогда
			ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КешТекущейСтроки = Неопределено;
		КонецЕсли;
		
		Если СтрокаСтруктура.Строки.Количество() > 0 Тогда
			ЗаполнитьРазвернутьДеревоРекурсивно(
				НоваяСтрока.ПолучитьЭлементы(),
				СтрокаСтруктура.Строки,
				СтрокиРазвернуть,
				СтруктураПоиска,
				КешТекущейСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИдентификаторыРазвернутыхСтрок()
	
	Результат = Новый Массив;
	
	Очередь = Новый Массив;
	Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Элементы.Дерево.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			Очередь.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Пока Очередь.ВГраница() <> -1 Цикл
		Для каждого Строка Из Очередь[0].ПолучитьЭлементы() Цикл
			Если Элементы.Дерево.Развернут(Строка.ПолучитьИдентификатор()) Тогда
				Результат.Добавить(Строка.ПолучитьИдентификатор());
				Очередь.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Очередь.Удалить(0);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КлючиРазвернутыхСтрок(Идентификаторы)
	
	СтрокиРазвернуть = Новый ТаблицаЗначений;
	СтрокиРазвернуть.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	СтрокиРазвернуть.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	СтрокиРазвернуть.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия,СправочникСсылка.Склады"));
	СтрокиРазвернуть.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	СтрокиРазвернуть.Колонки.Добавить("ЭтапСсылка", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства, ДокументСсылка.ЭтапПроизводства2_2"));
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		
		СтрокаДерева = Дерево.НайтиПоИдентификатору(Идентификатор);
		
		НоваяСтрока = СтрокиРазвернуть.Добавить();
		Если СтрокаДерева.ТипСтроки = ТипСтрокиЭтапСтруктуры()
				ИЛИ СтрокаДерева.ТипСтроки = ТипСтрокиЭтапДокумент() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева.ПолучитьРодителя(),
				"Номенклатура, Характеристика, Склад, Назначение");
			НоваяСтрока.ЭтапСсылка = СтрокаДерева.ЭтапСсылка;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиРазвернуть.Индексы.Добавить("Номенклатура, Характеристика, Склад, Назначение, ЭтапСсылка");
	
	Возврат СтрокиРазвернуть;
	
КонецФункции

#КонецОбласти

#Область РазвернутьВсе

&НаКлиенте
Процедура ПоказатьВопросРазвернутьВсеПродолжитьВывод(ИдентификаторСтроки)
		
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросРазвернутьВсеПродолжитьВыводЗавершение", ЭтаФорма, ИдентификаторСтроки),
		СтрШаблон(НСтр("ru = 'Выведено %1 элементов. Продолжить вывод?';
						|en = '%1 items are displayed. Continue?'"), РазмерПорцииВыборки),
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРазвернутьВсеПродолжитьВыводЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РазвернутьВсеНаКлиенте(Ложь, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеНаКлиенте(ПорционнаяВыборка, ИдентификаторСтроки = Неопределено)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = "РазвернутьВсе";
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ПорционнаяВыборка", ПорционнаяВыборка);
	ПараметрыДействия.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	
	ОжидатьРасчетСтруктурыИВыполнитьДействие();
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьВсеНаСервере(ПорционнаяВыборка, ИдентификаторСтроки)
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Узлы = Новый Соответствие;
	РазвернутыеСтроки.Очистить();
	
	Очередь = Новый Массив;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		
		Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
			Очередь.Добавить(СтрокаДерева);
			РазвернутыеСтроки.Добавить(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
	Иначе
		
		СтрокаДерева = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
				
		Если СтрокаДерева.ДостроитьДерево Тогда
			КлючиПартий = Новый Массив;
			Для каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
				КлючиПартий.Добавить(Строка.КлючПартия);
			КонецЦикла;
			Узлы.Вставить(ИдентификаторСтроки,
				Новый Структура("КлючиПартий, Этап", КлючиПартий, СтрокаДерева.ЭтапСсылка));
		Иначе
			Очередь.Добавить(СтрокаДерева);
			РазвернутыеСтроки.Добавить(ИдентификаторСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	Пока Очередь.ВГраница() <> -1 Цикл
		Для каждого СтрокаДерева Из Очередь[0].ПолучитьЭлементы() Цикл
			
			Если СтрокаДерева.ДостроитьДерево Тогда
				КлючиПартий = Новый Массив;
				Для каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
					КлючиПартий.Добавить(Строка.КлючПартия);
				КонецЦикла;
				Узлы.Вставить(СтрокаДерева.ПолучитьИдентификатор(),
					Новый Структура("КлючиПартий, Этап", КлючиПартий, СтрокаДерева.ЭтапСсылка));
			Иначе
				Очередь.Добавить(СтрокаДерева);
				РазвернутыеСтроки.Добавить(СтрокаДерева.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		Очередь.Удалить(0);
	КонецЦикла;
	
	Если Узлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Формирование отчета ""Структура заказа на производство""';
			|en = 'Generate the ""Production order structure"" report'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Заказ", Заказ);
	ПараметрыПроцедуры.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	ПараметрыПроцедуры.Вставить("ПоказыватьПеремещения", ПоказыватьПеремещения);
	ПараметрыПроцедуры.Вставить("ПоказыватьМатериалы", ПоказыватьМатериалы);
	ПараметрыПроцедуры.Вставить("Узлы", Узлы);
	ПараметрыПроцедуры.Вставить("ПорционнаяВыборка", ПорционнаяВыборка);
	ПараметрыПроцедуры.Вставить("Назначение", НазначениеОтбор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.РазвернутьВсеУровни",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		НачатьОжиданиеДлительнойОперации = Истина;
	Иначе
		ОбработатьРезультатРазвернутьВсеВФоне(ДлительнаяОперация, ИдентификаторСтроки);
		НачатьОжиданиеДлительнойОперации = Ложь;
		ДлительнаяОперация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат = Неопределено Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	Иначе
		ОбработатьРезультатРазвернутьВсеВФоне(Результат, ДополнительныеПараметры);
		РазвернутьСтроки();
		Если ПродолжитьВывод Тогда
			ПоказатьВопросРазвернутьВсеПродолжитьВывод(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатРазвернутьВсеВФоне(Результат, ИдентификаторСтроки)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
	
	ПродолжитьВывод = Ложь;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатФормирования = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Узлы = РезультатФормирования.Узлы;
		Для каждого КлючИЗначение Из Узлы Цикл
			СтрокаДерева = Дерево.НайтиПоИдентификатору(КлючИЗначение.Ключ);
			Если СтрокаДерева <> Неопределено Тогда
				Строки = СтрокаДерева.ПолучитьЭлементы();
				Для Индекс = -Строки.Количество()+1 По 0 Цикл
					Строка = Строки[-Индекс];
					Если Строка.ТипСтроки = ТипСтрокиСлужебный() Тогда
						Строки.Удалить(-Индекс);
					КонецЕсли;
				КонецЦикла;
				СтрокаДерева.ДостроитьДерево = Ложь;
				ЗаполнитьДеревоРекурсивно(Строки, КлючИЗначение.Значение.Строки);
			КонецЕсли;
		КонецЦикла;
		
		ПродолжитьВывод = Не РезультатФормирования.ВсеДанныеВыбраны;
		
		РазвернутыеСтроки.Очистить();
		Очередь = Новый Массив;
		Если ИдентификаторСтроки = Неопределено Тогда
			Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
				Очередь.Добавить(Строка);
			КонецЦикла;
		Иначе
			Строка = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если Строка <> Неопределено Тогда
				Очередь.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
		Пока Очередь.ВГраница() <> -1 Цикл
			Если Не Очередь[0].ДостроитьДерево Тогда
				РазвернутыеСтроки.Добавить(Очередь[0].ПолучитьИдентификатор());
				Для каждого Строка Из Очередь[0].ПолучитьЭлементы() Цикл
					Очередь.Добавить(Строка);
				КонецЦикла;
			КонецЕсли;
			Очередь.Удалить(0);
		КонецЦикла;
		
	Иначе
		
		Если Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаменаСпецификации

&НаСервереБезКонтекста
Функция ПроверитьВозможностьЗаменыСпецификации(Знач ТипСтроки, Знач ДанныеСтроки)
	
	Если ТипСтроки = ТипСтрокиИзделие() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если ТипСтроки = ТипСтрокиПолуфабрикат() И СтруктураЗаказаСлужебный.ЗаменаСпецификацииВСтруктуреЗаказаДопускается(ДанныеСтроки) Тогда
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаменитьСпецификациюНаСервере(Знач ДанныеСтроки, Знач Спецификация)
	
	ДанныеЗамены = Документы.ЗаказНаПроизводство2_2.ДанныеЗаменыСпецификаций();
	
	Замена = ДанныеЗамены.Добавить();
	ЗаполнитьЗначенияСвойств(Замена, ДанныеСтроки);
	Замена.Спецификация = Спецификация;
	
	РезультатЗамены = Документы.ЗаказНаПроизводство2_2.ЗаменитьСпецификацииБезКонтроля(ДанныеЗамены);
	
	Возврат РезультатЗамены;
	
КонецФункции

#КонецОбласти

#Область Перемещение

&НаКлиенте
Процедура ОткрытьФормуВводаЗаказаНаПеремещение(СкладОтправитель, СкладПолучатель, ТабличнаяЧастьТовары, ЖелаемаяДатаПоступления = '00010101', Комментарий = "")

	ВариантОформления = ПараметрыПеремещенияТоваров.ВариантОформления;

	СоответствиеОбъектов = Новый Соответствие;
	СоответствиеОбъектов.Вставить(Заказ,           "Номер, Дата, Приоритет, НаправлениеДеятельности, Организация");
	СоответствиеОбъектов.Вставить(СкладПолучатель, "Подразделение, ЦеховаяКладовая");
	
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(СоответствиеОбъектов);
	
	Если ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПеремещения.ЗаказНаПеремещение") Тогда
	
		Если ЗначениеЗаполнено(СкладПолучатель) И ЗначенияРеквизитов[СкладПолучатель].ЦеховаяКладовая Тогда
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
	
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Статус",					  ПредопределенноеЗначение("Перечисление.СтатусыЗаказовМатериаловВПроизводство.КВыполнению"));
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Приоритет",					  ЗначенияРеквизитов[Заказ].Приоритет);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("НаправлениеДеятельности",	  ЗначенияРеквизитов[Заказ].НаправлениеДеятельности);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Организация",				  ЗначенияРеквизитов[Заказ].Организация);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Склад",						  СкладОтправитель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ЦеховаяКладовая",			  СкладПолучатель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Подразделение",				  ЗначенияРеквизитов[СкладПолучатель].Подразделение);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДлительностьПеремещения", Ложь);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ЖелаемаяДатаПоступления",	  ЖелаемаяДатаПоступления);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Товары",					  ТабличнаяЧастьТовары);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Комментарий",				  Комментарий);
			
			ОткрытьФорму("Документ.ЗаказМатериаловВПроизводство.ФормаОбъекта", ПараметрыФормы);
			
		Иначе
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
			
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Статус",					  ПредопределенноеЗначение("Перечисление.СтатусыВнутреннихЗаказов.КВыполнению"));
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Приоритет",					  ЗначенияРеквизитов[Заказ].Приоритет);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("НаправлениеДеятельности",	  ЗначенияРеквизитов[Заказ].НаправлениеДеятельности);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Организация",				  ЗначенияРеквизитов[Заказ].Организация);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("СкладОтправитель",			  СкладОтправитель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("СкладПолучатель",			  СкладПолучатель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ИспользоватьДлительностьПеремещения", Ложь);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ЖелаемаяДатаПоступления",	  ЖелаемаяДатаПоступления);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Товары",					  ТабличнаяЧастьТовары);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Комментарий",				  Комментарий);
			
			ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(СкладПолучатель) И ЗначенияРеквизитов[СкладПолучатель].ЦеховаяКладовая Тогда
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
			
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация",		  ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"));
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("РеквизитыШапки",			  Новый Структура);
			ПараметрыФормы.ЗначенияЗаполнения.РеквизитыШапки.Вставить("НаправлениеДеятельности",	  ЗначенияРеквизитов[Заказ].НаправлениеДеятельности);
			ПараметрыФормы.ЗначенияЗаполнения.РеквизитыШапки.Вставить("Организация",				  ЗначенияРеквизитов[Заказ].Организация);
			ПараметрыФормы.ЗначенияЗаполнения.РеквизитыШапки.Вставить("Отправитель",				  СкладОтправитель);
			ПараметрыФормы.ЗначенияЗаполнения.РеквизитыШапки.Вставить("Получатель",					  СкладПолучатель);
			ПараметрыФормы.ЗначенияЗаполнения.РеквизитыШапки.Вставить("Комментарий",				  Комментарий);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Товары",					  ТабличнаяЧастьТовары);
		
			ОткрытьФорму("Документ.ДвижениеПродукцииИМатериалов.ФормаОбъекта", ПараметрыФормы);
			
		Иначе
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
			
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Статус",					  ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Отгружено"));
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("НаправлениеДеятельности",	  ЗначенияРеквизитов[Заказ].НаправлениеДеятельности);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Организация",				  ЗначенияРеквизитов[Заказ].Организация);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("СкладОтправитель",			  СкладОтправитель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("СкладПолучатель",			  СкладПолучатель);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Товары",					  ТабличнаяЧастьТовары);
			ПараметрыФормы.ЗначенияЗаполнения.Вставить("Комментарий",				  Комментарий);
		
			ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиИзделие()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПолуфабрикат()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЭтапСтруктуры()
	
	Возврат 3;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиПеремещение()
	
	Возврат 4;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЭтапДокумент()
	
	Возврат 5;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиЗаказНаЗапуск()
	
	Возврат 6;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиСлужебный()
	
	Возврат 7;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиМатериал()
	
	Возврат 8;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипСтрокиНоменклатураРасшифровки()
	
	Возврат 9;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	ТипыСтрокПервогоУровня = Новый СписокЗначений;
	ТипыСтрокПервогоУровня.Добавить(ТипСтрокиИзделие());
	ТипыСтрокПервогоУровня.Добавить(ТипСтрокиНоменклатураРасшифровки());
	
	#Область СкрытьНазначениеПолуфабриката
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Назначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыСтрокПервогоУровня;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область СкрытьКартинкиВСтроках
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерКартинки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыСтрокПервогоУровня;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
		
	#Область ШрифтПродукция
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дерево.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыСтрокПервогоУровня;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	#КонецОбласти
	
	#Область ПредставлениеСтроки
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НомерКартинки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеСтроки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Назначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЗаказНаЗапуск();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеСтрокиГиперссылка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ТипСтрокиЗаказНаЗапуск();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	#Область ПроизводствоНаСтороне
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Готово.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Запущено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Осталось.Имя);
	
	ТипыСтрок = Новый СписокЗначений();
	ТипыСтрок.Добавить(ТипСтрокиЭтапДокумент());
	ТипыСтрок.Добавить(ТипСтрокиЭтапСтруктуры());
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыСтрок;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	
	#КонецОбласти
	
	#Область НесколькоСкладов
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Склад.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СкладПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.НесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<несколько складов>';
																|en = '<several warehouses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	#КонецОбласти
	
	#Область ТребуетсяОбеспечение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.Обеспечено.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбеспеченоПроцент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.ТребуетсяОбеспечение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	
	#КонецОбласти
	
	#Область НесколькоСпецификаций
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Спецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дерево.НесколькоСпецификаций");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<несколько спецификаций>';
																|en = '<several bills of materials>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Отчет.СтруктураЗаказаНаПроизводствоДинамическая", "");
	
	Если Настройки = Неопределено
		ИЛИ Не Настройки.Свойство("ПараметрыПеремещенияТоваров")
		ИЛИ Не ОбщегоНазначенияУТКлиентСервер.СтруктураСодержитКлючи(
				Настройки.ПараметрыПеремещенияТоваров,
				"ВариантОформления, ТолькоВНаличии",
				Истина) Тогда
		ПараметрыПеремещенияТоваров = Новый Структура;
		ПараметрыПеремещенияТоваров.Вставить("ВариантОформления", Перечисления.ВариантыОформленияДокументовПеремещения.ПеремещениеТоваров);
		ПараметрыПеремещенияТоваров.Вставить("ТолькоВНаличии", Истина);
	Иначе
		ПараметрыПеремещенияТоваров = Настройки.ПараметрыПеремещенияТоваров;
	КонецЕсли;
	
	Если Настройки <> Неопределено Тогда
		Настройки.Свойство("ПоказыватьЭтапы", ПоказыватьЭтапы);
		Настройки.Свойство("ПоказыватьПеремещения", ПоказыватьПеремещения);
		Настройки.Свойство("ПоказыватьМатериалы", ПоказыватьМатериалы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	Настройки.Вставить("ПоказыватьПеремещения", ПоказыватьПеремещения);
	Настройки.Вставить("ПоказыватьМатериалы", ПоказыватьМатериалы);
	Настройки.Вставить("ПараметрыПеремещенияТоваров", ПараметрыПеремещенияТоваров);
	
	СохранитьНастройкиНаСервере(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Отчет.СтруктураЗаказаНаПроизводствоДинамическая", "", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ДостроитьДерево(КлючиПартий, Этап, ИдентификаторСтроки)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ПоказыватьЭтапы", ПоказыватьЭтапы);
	ПараметрыВывода.Вставить("ПоказыватьПеремещения", ПоказыватьПеремещения);
	ПараметрыВывода.Вставить("ПоказыватьМатериалы", ПоказыватьМатериалы);
	
	Результат = Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.ДеревоПолуфабрикатов(
		Заказ, КлючиПартий, Этап, ПараметрыВывода, НазначениеОтбор);
	
	ЗаполнитьДеревоРекурсивно(
		Дерево.НайтиПоИдентификатору(ИдентификаторСтроки).ПолучитьЭлементы(),
		Результат.Строки);
	
	РазвернутыеСтроки.Очистить();
	РазвернутыеСтроки.Добавить(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Для каждого Строка Из РазвернутыеСтроки Цикл
		Если НЕ Элементы.Дерево.Развернут(Строка.Значение) Тогда
			Элементы.Дерево.Развернуть(Строка.Значение, Ложь);
		КонецЕсли;
	КонецЦикла;
	РазвернутыеСтроки.Очистить();
	
	Если ТекущаяСтрока <> -1 Тогда
		Элементы.Дерево.ТекущаяСтрока = ТекущаяСтрока;
		ТекущаяСтрока = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьРасчетСтруктурыИВыполнитьДействие() Экспорт
	
	Результат = ЗапуститьВыполнениеДействия();
	
	Если Результат.ДействиеЗапущено Тогда
		
		ОжиданиеРасчетаСтруктуры = Неопределено;
		
		Если НачатьОжиданиеДлительнойОперации Тогда
			ИмяПроцедуры = "";
			Если Действие = "Заполнить" Тогда
				ИмяПроцедуры = "ЗаполнитьВФонеЗавершение";
			ИначеЕсли Действие = "ЗаполнитьРазвернуть" Тогда
				ИмяПроцедуры = "ЗаполнитьРазвернутьВФонеЗавершение";
			ИначеЕсли Действие = "РазвернутьВсе" Тогда
				ИмяПроцедуры = "РазвернутьВсеВФонеЗавершение";
			КонецЕсли;
			ДополнительныеПараметры = ?(Действие = "РазвернутьВсе", ПараметрыДействия.ИдентификаторСтроки, Неопределено);
			НачатьОжиданиеДлительнойОперации(ИмяПроцедуры, ДополнительныеПараметры);
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
			РазвернутьСтроки();
		КонецЕсли;
		
		Если Действие = "Заполнить" Тогда
			НачатьОжиданиеРасчетаИтогов();
		КонецЕсли;
		
		Если Действие = "РазвернутьВсе" И ПродолжитьВывод Тогда
			ПоказатьВопросРазвернутьВсеПродолжитьВывод(ПараметрыДействия.ИдентификаторСтроки);
		КонецЕсли;
		
	ИначеЕсли СтруктураЗаказаКлиентСервер.ОжидатьЗавершениеРасчетаСтруктурыЗаказа(
		Результат.ПротоколРасчета.Состояние, Результат.ПротоколРасчета.КодыСостояний) Тогда
		
		Если ОжиданиеРасчетаСтруктуры = Неопределено Тогда
			ОжиданиеРасчетаСтруктуры = Новый Структура("Интервал", 1);
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		Иначе
			ОжиданиеРасчетаСтруктуры.Интервал = ?(ОжиданиеРасчетаСтруктуры.Интервал * 1.4 < 15,
				ОжиданиеРасчетаСтруктуры.Интервал * 1.4,
				15);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОжидатьРасчетСтруктурыИВыполнитьДействие", ОжиданиеРасчетаСтруктуры.Интервал, Истина);
		
	Иначе
		
		ОжиданиеРасчетаСтруктуры = Неопределено;
		
		Дерево.ПолучитьЭлементы().Очистить();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДанные;
		
		СтруктураЗаказаКлиентСервер.ОтобразитьСостояниеРасчетаСтруктуры(Элементы, Результат.ПротоколРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеДействия()
	
	ДействиеЗапущено = Ложь;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	График.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ИЗ
		|	РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК График
		|ГДЕ
		|	График.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И График.КлючПартия = &ПустойКлючСвязи
		|	И График.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)");
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", Заказ);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НормативныйГрафикРассчитан = Не Запрос.Выполнить().Пустой();
	
	ПротоколРасчета = Документы.ЗаказНаПроизводство2_2.ПротоколРасчетаСтруктурыЗаказа(Заказ);
	СтруктураРассчитана = ПротоколРасчета.Состояние = ПротоколРасчета.КодыСостояний.Рассчитан;
	
	Если НормативныйГрафикРассчитан
		Или СтруктураРассчитана
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Статус")
			= Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт Тогда
		
		Если Действие = "Заполнить" Тогда
			ЗаполнитьНаСервере();
		ИначеЕсли Действие = "ЗаполнитьРазвернуть" Тогда
			ЗаполнитьРазвернутьНаСервере(ПараметрыДействия.ИдентификаторыСтрок);
		ИначеЕсли Действие = "РазвернутьВсе" Тогда
			РазвернутьВсеНаСервере(ПараметрыДействия.ПорционнаяВыборка, ПараметрыДействия.ИдентификаторСтроки);
		КонецЕсли;
		
		ДействиеЗапущено = Истина;
		
	КонецЕсли;
	
	Возврат Новый Структура("ДействиеЗапущено, ПротоколРасчета", ДействиеЗапущено, ПротоколРасчета);
	
КонецФункции

&НаКлиенте
Процедура НачатьОжиданиеДлительнойОперации(ИмяПроцедуры, ДополнительныеПараметры = Неопределено)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	
	НачатьОжиданиеДлительнойОперации = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеРасчетаИтогов()
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("РасчетИтоговВФонеЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ОжиданиеРасчетаИтогов,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтоговВФонеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОжиданиеРасчетаИтогов = Неопределено;
	
	ИнформационнаяСтрока = ?(Результат <> Неопределено И Результат.Статус = "Выполнено",
		ИнформационнаяСтрока(Заказ),
		Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформационнаяСтрока(Заказ)
	
	Результат = Неопределено;
	МониторингЗаказа.ЗаполнитьИнформационнуюСтроку(Заказ, Результат);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектов(СоответствиеОбъектов)
	
	ЗначенияРеквизитов = Новый Соответствие;
	
	Для каждого ЭлементОбъектов Из СоответствиеОбъектов Цикл
		
		ЗначенияРеквизитов.Вставить(
			ЭлементОбъектов.Ключ,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОбъектов.Ключ, ЭлементОбъектов.Значение));
		
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчетОстаткиИДоступностьТоваров(
			Номенклатура = Неопределено, Характеристика = Неопределено, КлючВарианта = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Если КлючВарианта <> Неопределено Тогда
		ПараметрыФормы.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Новый Структура);
	
	ПараметрыФормы.Отбор.Вставить("ПоказатьОбособленныеТовары", Истина);
	
	Если Номенклатура <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если Характеристика <> Неопределено Тогда
		ПараметрыФормы.Отбор.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ОстаткиИДоступностьТоваров.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущееСостояниеОбеспечения() Экспорт
	
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.ТипСтроки = ТипСтрокиМатериал()
			Или ТекущиеДанные.ТипСтроки = ТипСтрокиПолуфабрикат()) Тогда
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("Номенклатура");
		ПараметрыРасшифровки.Вставить("Характеристика");
		ПараметрыРасшифровки.Вставить("Склад");
		ПараметрыРасшифровки.Вставить("Назначение");
		ПараметрыРасшифровки.Вставить("КлючНоменклатура");
		ПараметрыРасшифровки.Вставить("КлючПартия");
		
		ЗаполнитьЗначенияСвойств(ПараметрыРасшифровки, ТекущиеДанные);
		
		НайденныеСтроки = ТаблицаОстатковСостояниеОбеспечения.НайтиСтроки(ПараметрыРасшифровки);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРасшифровки = НайденныеСтроки[0];
		Иначе
			
			ПараметрыРасшифровки.КлючПартия =
				ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ТекущиеДанные.ОбеспечениеПартии, Ложь);
			
			СтрокаРасшифровки = ДанныеРасшифровкиСостояниеОбеспечения(ПараметрыРасшифровки);
			
			СтрокаТаблицы = ТаблицаОстатковСостояниеОбеспечения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРасшифровки);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПараметрыРасшифровки,, "КлючПартия");
			СтрокаТаблицы.КлючПартия = ТекущиеДанные.КлючПартия;
			
			Если ТаблицаОстатковСостояниеОбеспечения.Количество() > 15 Тогда
				ТаблицаОстатковСостояниеОбеспечения.Удалить(0);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущееСостояниеОбеспечения = ТекущееСостояниеОбеспечения(ТекущиеДанные, СтрокаРасшифровки);
	Иначе
		ТекущееСостояниеОбеспечения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущееСостояниеОбеспечения(ДанныеСтроки, СтрокаРасшифровки)
	
	ЖирныйШрифт = Новый Шрифт(Элементы.ТекущееСостояниеОбеспечения.Шрифт,,, Истина);
	
	ПреставлениеЕдиницы = СокрЛП(ДанныеСтроки.ЕдиницаИзмерения);
	
	МассивРасшифровки = Новый Массив;
	
	//1. На текущем складе
	МассивРасшифровки.Добавить(НСтр("ru = 'На текущем складе:';
									|en = 'In the current warehouse:'"));
	
	ПредставлениеКоличество = СтрШаблон(
								НСтр("ru = ' %1 %2';
									|en = ' %1 %2'"),
								Формат(СтрокаРасшифровки.НаТекущемСкладе, "ЧН=0; ЧГ=;"),
								ПреставлениеЕдиницы);
	МассивРасшифровки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличество, ЖирныйШрифт));
	
	//
	Если СтрокаРасшифровки.НаТекущемСкладеСвободноИзлишек > 0 Тогда
	
		МассивРасшифровки.Добавить(НСтр("ru = ', в т.ч. излишек:';
										|en = 'including the surplus:'"));
		
		ПредставлениеКоличество = СтрШаблон(
									НСтр("ru = ' %1 %2';
										|en = ' %1 %2'"),
									Формат(СтрокаРасшифровки.НаТекущемСкладеСвободноИзлишек, "ЧН=0; ЧГ=;"),
									ПреставлениеЕдиницы);
		МассивРасшифровки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличество, ЖирныйШрифт));
		
	КонецЕсли;
	
	//2. На других складах
	Если СтрокаРасшифровки.НаДругихСкладах > 0 Тогда
		
		МассивРасшифровки.Добавить(НСтр("ru = ', на других складах:';
										|en = ', at other warehouses:'"));
		
		ПредставлениеКоличество = СтрШаблон(
									НСтр("ru = ' %1 %2';
										|en = ' %1 %2'"),
									Формат(СтрокаРасшифровки.НаДругихСкладах, "ЧГ=;"),
									ПреставлениеЕдиницы);
		МассивРасшифровки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличество, ЖирныйШрифт));
	
		//
		Если СтрокаРасшифровки.НаДругихСкладахСвободноИзлишек > 0 Тогда
	
			МассивРасшифровки.Добавить(НСтр("ru = ', в т.ч. излишек:';
											|en = 'including the surplus:'"));
			
			ПредставлениеКоличество = СтрШаблон(
										НСтр("ru = ' %1 %2';
											|en = ' %1 %2'"),
										Формат(СтрокаРасшифровки.НаДругихСкладахСвободноИзлишек, "ЧН=0; ЧГ=;"),
										ПреставлениеЕдиницы);
			МассивРасшифровки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеКоличество, ЖирныйШрифт));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивРасшифровки,,,, "ОстаткиИДоступностьТоваров");
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеРасшифровкиСостояниеОбеспечения(ПараметрыРасшифровки)
	
	РезультатРасшифровки = Новый Структура;
	РезультатРасшифровки.Вставить("НаТекущемСкладе",                0);
	РезультатРасшифровки.Вставить("НаТекущемСкладеСвободноИзлишек", 0);
	РезультатРасшифровки.Вставить("НаДругихСкладах",                0);
	РезультатРасшифровки.Вставить("НаДругихСкладахСвободноИзлишек", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Отчеты.СтруктураЗаказаНаПроизводствоДинамическая.ТекстЗапросаОстаткиПоДругимНазначениямВКоличественномВыражение();
	
	Для каждого ПараметрРасшифровки Из ПараметрыРасшифровки Цикл
		Запрос.УстановитьПараметр(ПараметрРасшифровки.Ключ, ПараметрРасшифровки.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(РезультатРасшифровки, Выборка);
		
	КонецЕсли;
	
	Возврат РезультатРасшифровки;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьПартиюПоСпецификацииСервер(КлючПартия)
	
	ТаблицаПартий = Новый ТаблицаЗначений;
	ТаблицаПартий.Колонки.Добавить("ПартияПроизводства", Новый ОписаниеТипов("СправочникСсылка.ПартииПроизводства"));
	ТаблицаПартий.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	
	НоваяСтрока = ТаблицаПартий.Добавить();
	НоваяСтрока.ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку(КлючПартия);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Партии", ТаблицаПартий);
	ПараметрыПроцедуры.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПерезаполнитьПартиюИмяЗадания();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ЭтапПроизводства2_2.ПерезаполнитьПартииВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПартиюПоСпецификацииВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатСтруктура = ОбработатьРезультатПерезаполненияПартииПоСпецификации(Результат);
		Если РезультатСтруктура.Отказ Тогда
			МассивРезультатов = РезультатСтруктура.МассивРезультатов;
			Если МассивРезультатов.Количество() = 1 И ЗначениеЗаполнено(МассивРезультатов[0].Сообщения) Тогда
				ТекстСообщения = МассивРезультатов[0].Сообщения[0];
			Иначе
				ТекстСообщения = НСтр("ru = 'При выполнении операции возникли ошибки. Подробности см. в журнале регистрации.';
										|en = 'Errors occurred when executing the operation. For more information, see the event log.'");
			КонецЕсли;
			ПоказатьОповещениеПользователя(ПерезаполнитьПартиюИмяЗадания(),, ТекстСообщения, БиблиотекаКартинок.Предупреждение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатПерезаполненияПартииПоСпецификации(Результат)
	
	РезультатСтруктура = Неопределено;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПерезаполнитьПартиюИмяЗадания()
	
	Возврат НСтр("ru = 'Перезаполнение партии по спецификации';
				|en = 'Refill lots by the BOM'");
	
КонецФункции

&НаКлиенте
Процедура УдалитьЭтапыВопросЗавершение(РезультатВопроса, КлючПартия) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = Неопределено;
	
	ПоказатьОповещениеПользователя(
		УдалитьЭтапыИмяЗадания(),,
		НСтр("ru = 'Запущено удаление этапов партии.';
			|en = 'Deletion of lot stages is started.'"),
		БиблиотекаКартинок.Информация32);
	
	УдалитьЭтапыСервер(КлючПартия);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("УдалитьЭтапыВФонеЗавершение", ЭтотОбъект),
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭтапыСервер(КлючПартия)
	
	ПартияПроизводства = Справочники.ПартииПроизводства.ПолучитьСсылку(КлючПартия);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = УдалитьЭтапыИмяЗадания();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.ЭтапПроизводства2_2.ПометитьНаУдалениеЭтапыОтложенно",
		ПартияПроизводства,
		ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтапыВФонеЗавершение(Результат, ДопПараметры) Экспорт
	
	ДлительнаяОперация = Неопределено;
	
	Если Результат <> Неопределено Тогда
		
		РезультатЗадания = ОбработатьРезультатУдалитьЭтапы(Результат);
		
		УправлениеПроизводствомКлиент.ОповеститьПользователяОПометкеНаУдалениеЭтаповПроизводства(
			РезультатЗадания);
		
		Действие = "Заполнить";
		ОжидатьРасчетСтруктурыИВыполнитьДействие();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьРезультатУдалитьЭтапы(Результат)
	
	РезультатСтруктура = Неопределено;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
		РезультатСтруктура = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
	КонецЕсли;
	
	Возврат РезультатСтруктура;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдалитьЭтапыИмяЗадания()
	
	Возврат НСтр("ru = 'Удаление этапов партии';
				|en = 'Delete lot stages'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЗаказаНаСервереБезКонтекста(Заказ)
	
	Возврат Документы.ЗаказНаПроизводство2_2.ПредставлениеЗаказа(Заказ, "");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьСтандартныйЗаголовокФормыНаКлиентеНаСервереБезКонтекста(ЭтаФорма)
	
	Если Не ЭтаФорма.Заказ.Пустая() Тогда
		ЭтаФорма.Заголовок = СтрШаблон(НСтр("ru = 'Структура заказа %1';
											|en = '%1 order structure'"), ПредставлениеЗаказаНаСервереБезКонтекста(ЭтаФорма.Заказ));
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = 'Структура заказа на производство';
									|en = 'Production order structure'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
