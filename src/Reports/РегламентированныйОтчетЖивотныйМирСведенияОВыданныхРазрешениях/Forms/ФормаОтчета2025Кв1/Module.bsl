
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2025";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР2М2");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("СписокСоответствияСтавокКодамОЖМ", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	РегламентированнаяОтчетностьЗагрузка.ДополнитьСтруктуруРеквизитовПараметрамиКопирования(СтруктураРеквизитовФормы);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы,
	СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьСписокСоответствияСтавокСбораКодамНаименованийОбъектовЖМ();
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Ложь;
	
	РегламентированнаяОтчетностьЗагрузка.ЗаполнитьПарметрыКопирования(ЭтотОбъект);
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		Если СтруктураРеквизитовФормы.мВыбраннаяФорма = СтруктураРеквизитовФормы.мСкопированаФорма 
			Или СтруктураРеквизитовФормы.мСкопированаФорма = Неопределено Тогда
			
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.мСохраненныйДок.Организация)
				<> РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			РегламентированнаяОтчетность.БлокировкаИлиЗапретРедактированияОтчета(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтотОбъект);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
			РасчетНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтотОбъект);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтотОбъект);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтотОбъект);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект);
	
	Если НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.жив.мир.св.выд.разр.",
		'20250201') Тогда
		Элементы.ОтправитьВКонтролирующийОрган.Видимость = Ложь;
	КонецЕсли;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1 = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР2М1 = "П00002М1";
	СтруктураРеквизитовФормы.мИдГруппыР2М2 = "П00002М2";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М112003");
	ИменаГраф.Добавить("П00001М113003");
	ИменаГраф.Добавить("П00001М113004");
	ИменаГраф.Добавить("П00001М114003");
	ИменаГраф.Добавить("П00001М115003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00002М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00002М100103");
	ИменаГраф.Добавить("П00002М101003");
	ИменаГраф.Добавить("П00002М102003");
	ИменаГраф.Добавить("П00002М103003");
	ИменаГраф.Добавить("П00002М104003");
	ИменаГраф.Добавить("П00002М105003");
	ИменаГраф.Добавить("П00002М105004");
	ИменаГраф.Добавить("П00002М106003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР2М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00002М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00002М200103");
	ИменаГраф.Добавить("П00002М201003");
	ИменаГраф.Добавить("П00002М203003");
	ИменаГраф.Добавить("П00002М203004");
	ИменаГраф.Добавить("П00002М203005");
	ИменаГраф.Добавить("П00002М204003");
	ИменаГраф.Добавить("П00002М205003");
	ИменаГраф.Добавить("П00002М205004");
	ИменаГраф.Добавить("П00002М206003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР2М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР2М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР2М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
			ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтотОбъект["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2025Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000103", 1, ,
	"Выбор признака сведений", КоллекцияСписковВыбора["ПризнакиСведений"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010001003", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010009003", 2, ,
	"Выбор кода вида документа", КоллекцияСписковВыбора["КодыВидаДокумента"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М112003", 3, ,
	"Выбор кода наименования объекта", КоллекцияСписковВыбора["КодыОбъектов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М113003", 1, ,
	"Выбор кода пользования объектом", КоллекцияСписковВыбора["КодыПользования"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00002М100103", 1, ,
	"Выбор признака сведений", КоллекцияСписковВыбора["ПризнакиСведений"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00002М200103", 1, ,
	"Выбор признака сведений", КоллекцияСписковВыбора["ПризнакиСведений"]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСоответствияСтавокСбораКодамНаименованийОбъектовЖМ()
	
	СписокСоответствияСтавокКодамОЖМ = Новый СписокЗначений;
	
	МакетСоставаПоказателей = ОбъектОтчета(ИмяФормы).ПолучитьМакет("СпискиВыбора2025Кв1");
	
	Область = МакетСоставаПоказателей.Области.Найти("КодыОбъектов");
	Если Область <> Неопределено И Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
		ВерхОбласти = Область.Верх;
		НизОбласти = Область.Низ;
		Для НомСтр = ВерхОбласти По НизОбласти Цикл
			КодОЖМ = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
			Если ЗначениеЗаполнено(КодОЖМ) Тогда
				СтавкаОЖМ = СтрЗаменить(МакетСоставаПоказателей.Область(НомСтр, 3).Текст, " ", "");
				СписокСоответствияСтавокКодамОЖМ.Добавить(КодОЖМ, СтавкаОЖМ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("СписокСоответствияСтавокКодамОЖМ", СписокСоответствияСтавокКодамОЖМ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ВозможныеПериоды = ВозможныеПериоды();
	
	КодОтчетногоПериода = ВозможныеПериоды[МесяцОкончания - 1];
	
	Форма.ТабличныйДокумент.Области.Период.Значение = КодОтчетногоПериода;
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
	Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВозможныеПериоды()
	
	Возврат СтрРазделить("01,02,03,04,05,06,07,08,09,10,11,12", ",");
	
КонецФункции

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтотОбъект, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?';
			|en = 'Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																				|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сохраняется %1...';
																			|en = 'Сохраняется %1...'"), Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтотОбъект);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтотОбъект, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтотОбъект, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураРеквизитовФормы, "ЗаблокированоВДругомСеансе", Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтотОбъект, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(
	                                                                    СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц   = Новый ХранилищеЗначения(
	                                                                    РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтотОбъект);
	Исключение
		Если НЕ Автосохранение Тогда
			ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки())));
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	Если НЕ СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц) Тогда
		СтруктураРеквизитовФормы.мСчетчикСтраниц = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтотОбъект);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтотОбъект, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		СформироватьЗаголовокОтчета();
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010002003" Тогда
		
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено';
				|en = 'Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено'"));
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000010001003" Тогда
		
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено';
				|en = 'Код бюджетной классификации должен состоять из 20 цифр. Значение очищено'"));
		КонецЕсли;
		
	ИначеЕсли ИмяПоказателя = "П000010011003" Тогда
		
		Тел = СокрЛП(ЗначПоказателя);
		Тел = СтрЗаменить(Тел, " ", "");
		Тел = СтрЗаменить(Тел, "(", "");
		Тел = СтрЗаменить(Тел, ")", "");
		Тел = СтрЗаменить(Тел, "-", "");
		Область.Значение = Тел;
		
	ИначеЕсли ИмяПоказателя = "П000010006003" ИЛИ СтрНачинаетсяС(ИмяПоказателя, "П00002М201003") Тогда
		
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если ДлинаИНН = 12 ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'ИНН физического лица должен состоять из 12 цифр. Значение очищено';
				|en = 'ИНН физического лица должен состоять из 12 цифр. Значение очищено'"));
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ИмяПоказателя, "П00002М101003") Тогда
		
		ИНН = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаИНН = СтрДлина(ИНН);
		Если ДлинаИНН = 10 ИЛИ ДлинаИНН = 0 Тогда
			Область.Значение = ИНН;
		Иначе
			Область.Значение = "";
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'ИНН организации должен состоять из 10 цифр. Значение очищено';
				|en = 'ИНН организации должен состоять из 10 цифр. Значение очищено'"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтотОбъект, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Длина значения показателя должна быть равна "
				+ ПараметрВводаПоля.Длина + ". Значение очищено'"));
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтотОбъект);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Код налогового органа необходимо задать в справочнике ""Организации""';
			|en = 'Код налогового органа необходимо задать в справочнике ""Организации""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
			"ru = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""';
			|en = 'Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе""'"));
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
						|en = 'Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр, ИндексПодч, ИндексПодчСтр;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ТДО["СекцияПояснение"].Видимость = ТДО["НомерКорректировки"].Значение > 0;
		
	ИначеЕсли ИмяРаздела = "Раздел1" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = ТДО.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтотОбъект["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ИмяФормы)].ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтотОбъект["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	НовВетка = ДеревоРаздела.Строки.Добавить();
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ИмяФормы, СтрНайти(ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Удалить текущую страницу?';
						|en = 'Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ИмяОбласти = ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты
			+ СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана удаляемая строка многострочного раздела.';
														|en = 'Не выбрана удаляемая строка многострочного раздела.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выбранную строку?';
							|en = 'Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтотОбъект, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем Индекс, ИндексСтрока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтрока);
				
				Пока ТДО.Найти("П00001М112003_" + ИндексСтрока) <> Неопределено Цикл
					
					КодОЖМ = СокрЛП(ТДО["П00001М112003_" + ИндексСтрока].Значение);
					ЭлемСписка = Форма.СтруктураРеквизитовФормы.СписокСоответствияСтавокКодамОЖМ.НайтиПоЗначению(КодОЖМ);
					СтавкаСбораЗаОЖМ = ?(ЭлемСписка <> Неопределено, СокрЛП(ЭлемСписка.Представление), "0");
					СтавкаСбораЗаОЖМ = ?(ЗначениеЗаполнено(СтавкаСбораЗаОЖМ), Число(СтавкаСбораЗаОЖМ), 0);
					
					КодПользованияОЖМ = СокрЛП(ТДО["П00001М113003_" + ИндексСтрока].Значение);
					СтавкаСбораПоКодуПользованияОЖМ = 0;
					Если КодПользованияОЖМ = "1" Тогда
						СтавкаСбораПоКодуПользованияОЖМ = 100;
					ИначеЕсли КодПользованияОЖМ = "2" Тогда
						СтавкаСбораПоКодуПользованияОЖМ = 50;
					КонецЕсли;
					
					Форма.ТабличныйДокумент.Области["П00001М113004_" + ИндексСтрока].Значение
					= Окр(СтавкаСбораПоКодуПользованияОЖМ * СтавкаСбораЗаОЖМ / 100, 2);
					
					Форма.ТабличныйДокумент.Области["П00001М115003_" + ИндексСтрока].Значение
					= Окр(Форма.ТабличныйДокумент.Области["П00001М113004_" + ИндексСтрока].Значение
					* Форма.ТабличныйДокумент.Области["П00001М114003_" + ИндексСтрока].Значение);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтрока);
					
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ТДО = Форма.ТабличныйДокумент.Области;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел1" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧ = Форма.СтруктураРеквизитовФормы.мИдГруппыР1М1;
		СтруктураГруппыМнЧ = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
		ИменаГрафМнЧ = СтруктураГруппыМнЧ["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, ТДО[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
				
				КодОЖМ = СокрЛП(СтрокаМнЧ.Данные["П00001М112003"]);
				ЭлемСписка = Форма.СтруктураРеквизитовФормы.СписокСоответствияСтавокКодамОЖМ.НайтиПоЗначению(КодОЖМ);
				СтавкаСбораЗаОЖМ = ?(ЭлемСписка <> Неопределено, СокрЛП(ЭлемСписка.Представление), "0");
				СтавкаСбораЗаОЖМ = ?(ЗначениеЗаполнено(СтавкаСбораЗаОЖМ), Число(СтавкаСбораЗаОЖМ), 0);
				
				КодПользованияОЖМ = СокрЛП(СтрокаМнЧ.Данные["П00001М113003"]);
				СтавкаСбораПоКодуПользованияОЖМ = 0;
				Если КодПользованияОЖМ = "1" Тогда
					СтавкаСбораПоКодуПользованияОЖМ = 100;
				ИначеЕсли КодПользованияОЖМ = "2" Тогда
					СтавкаСбораПоКодуПользованияОЖМ = 50;
				КонецЕсли;
				
				СтрокаМнЧ.Данные.Вставить("П00001М113004",
					Окр(СтавкаСбораПоКодуПользованияОЖМ * СтавкаСбораЗаОЖМ / 100, 2));
				
				СтрокаМнЧ.Данные.Вставить("П00001М115003",
				Окр(СтрокаМнЧ.Данные["П00001М113004"] * СтрокаМнЧ.Данные["П00001М114003"]));
				
			КонецЦикла;
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧ.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ТДО[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 1.
	Структ = Новый Структура;
	Структ.Вставить("П00001М113004");
	Структ.Вставить("П00001М115003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел1", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура СравнитьОтчеты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьОтчетыЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьОтчетыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьСравнениеКлиент.СравнитьОтчеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция СравнениеОтчетов(ДанныеДляСравнения) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СравнениеОтчетовНаСервере(ДанныеДляСравнения);
	
КонецФункции

&НаСервере
Функция СравнениеОтчетовНаСервере(ДанныеДляСравнения)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляСравнения = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Результат = РегламентированнаяОтчетностьСравнение.СравнениеОтчетов(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляСравнения, ДеревоДляСравнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Отчет ""%1"" не сохранен.';
																	|en = 'Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ПроверятьВозможностьВыгрузки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Отчет """ + ТекстЗаголовка + """ не сохранен");
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр(
				"ru = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""';
				|en = 'Перед выгрузкой необходимо установить единицу измерения ""в рублях""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Перед выгрузкой необходимо установить точность ""0""';
															|en = 'Перед выгрузкой необходимо установить точность ""0""'"));
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ПроверятьВозможностьВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если ПроверятьВозможностьВыгрузки И НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	
	СтруктураПараметров = Новый Структура("Организация, ДатаЗначения",
	СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
	РегламентированнаяОтчетность.КодНалоговогоОрганаПолучателяОтчетности(СтруктураПараметров));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ЖивМир");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_ZHIVMIR"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеПериоды = ВозможныеПериоды();
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН индивидуального предпринимателя", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН индивидуального предпринимателя, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН организации, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП организации, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код месяца", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеПериоды.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код месяца", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПервичныеСведения = ПараметрыВыгрузки["НомКорр"] = "0";
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	
	ЗаполненРаздел1 = ЗаполненРаздел(ДеревоРаздела, "Раздел1");
	
	Если ЗаполненРаздел1 Тогда
		
		ВозмПрСвед     = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000010000103");
		ВозмКодВидДок  = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000010009003");
		ВозмКодНаимОб  = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00001М112003");
		ВозмКодПользОб = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00001М113003");
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П000010000103"]);
			Если ПервичныеСведения Тогда
				Если ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
					+ ": признак сведений не должен быть задан, если на Титульном листе номер корректировки равен 0",
					"Раздел1", "П000010000103", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задан признак сведений",
					"Раздел1", "П000010000103", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли ВозмПрСвед.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": признак сведений должен принимать одно из значений: "
					+ ВозмПрСвед.СтрокаЗначений, "Раздел1", "П000010000103", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010001003"]));
			Если ДлинаЗначПок <> 20 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код бюджетной классификации" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 20 цифр"),
				"Раздел1", "П000010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010002003"]));
			Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "задан код по ОКТМО" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 8 или 11 цифр"),
				"Раздел1", "П000010002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010003003"]));
			Если ДлинаЗначПок <> 15 Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": " + ?(ДлинаЗначПок = 0, "не ", "")
				+ "заданы серия и номер разрешения" + ?(ДлинаЗначПок = 0, "", ", не состоящие из 15 символов"),
				"Раздел1", "П000010003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = Ветка.Данные["П000010004003"];
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задана дата выдачи разрешения (срок уплаты сбора)",
				"Раздел1", "П000010004003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": задана дата выдачи разрешения (срок уплаты сбора), "
				+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Раздел1", "П000010004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010005003"])) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задана фамилия физического лица",
				"Раздел1", "П000010005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010005004"])) Тогда
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задано имя физического лица",
				"Раздел1", "П000010005004", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Заполнен_ИННФЛ = ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010006003"]));
			Заполнен_ИдЕРН = ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010007003"]));
			Заполнены_ПерсДанФЛ = ЗначениеЗаполнено(Ветка.Данные["П000010008003"])
			ИЛИ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010009003"]))
			ИЛИ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010010003"]));
			
			Если Заполнен_ИННФЛ И НЕ Заполнен_ИдЕРН И НЕ Заполнены_ПерсДанФЛ Тогда
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010006003"]));
				Если ДлинаЗначПок <> 12 Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": задан ИНН физического лица, не состоящий из 12 цифр",
					"Раздел1", "П000010006003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли НЕ Заполнен_ИННФЛ И Заполнен_ИдЕРН И НЕ Заполнены_ПерсДанФЛ Тогда
				
				ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные["П000010007003"]));
				Если ДлинаЗначПок <> 12 Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": задан номер записи в ЕРН, не состоящий из 12 цифр",
					"Раздел1", "П000010007003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			ИначеЕсли НЕ Заполнен_ИННФЛ И НЕ Заполнен_ИдЕРН И Заполнены_ПерсДанФЛ Тогда
				
				ЗначПок = Ветка.Данные["П000010008003"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задана дата рождения физического лица",
					"Раздел1", "П000010008003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": задана дата рождения физического лица, "
					+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Раздел1", "П000010008003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Заполнено_УдЛичн = ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010009003"]))
					ИЛИ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010010003"]));
				
				Если Заполнено_УдЛичн Тогда
					
					ЗначПок = СокрЛП(Ветка.Данные["П000010009003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задан код вида документа, удостоверяющего личность",
						"Раздел1", "П000010009003", НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодВидДок.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
						+ ": код вида документа, удостоверяющего личность, должен принимать одно из значений: "
						+ ВозмКодВидДок.СтрокаЗначений, "Раздел1", "П000010009003", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П000010010003"])) Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
						+ ": не заданы серия и номер документа, удостоверяющего личность",
						"Раздел1", "П000010010003", НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				МасИменПок = СтрРазделить("П000010010003,П000010009003,П000010008003,П000010007003,П000010006003", ",", Ложь);
				Для Каждого ИмяПок Из МасИменПок Цикл
					Если ЗначениеЗаполнено(Ветка.Данные[ИмяПок]) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
				+ ": либо должна быть заполнена строка 060, при этом не заполнены строки 070-100;"
				+ " либо должна быть заполнена строка 070, при этом не заполнены строки 060, 080-100;"
				+ " либо должна быть заполнена строка 080 (строки 090, 100 заполняются при наличии сведений),"
				+ " при этом не заполнены строки 060, 070", "Раздел1", ИмяПок, НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
			
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00001М112003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задан код наименования объекта",
						"Раздел1", "П00001М112003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодНаимОб.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
						+ ": код наименования объекта должен принимать одно из значений: "
						+ ВозмКодНаимОб.СтрокаЗначений, "Раздел1", "П00001М112003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00001М113003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не задан код пользования объектом",
						"Раздел1", "П00001М113003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодПользОб.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы
						+ ": код пользования объектом должен принимать одно из значений: "
						+ ВозмКодПользОб.СтрокаЗначений, "Раздел1", "П00001М113003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Раздел 1 -> Страница " + НомСтраницы + ": не заполнены данные об объекте животного мира",
				"Раздел1", "П00001М112003_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	ЗаполненРаздел2 = ЗаполненРаздел(ДеревоРаздела, "Раздел2");
	
	Если ЗаполненРаздел2 Тогда
		
		НомСтраницы = "1";
		
		Ветка = ДеревоРаздела.Строки[0];
		
		// Сведения по юридическим лицам.
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М1];
		
		Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
			
			ВозмПрСвед = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00002М100103");
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00002М100103"]);
				Если ПервичныеСведения Тогда
					Если ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Строка " + НомСтроки
						+ " раздела 2 (по ЮЛ): признак сведений не должен быть задан, если на Титульном листе номер корректировки равен 0",
						"Раздел2", "П00002М100103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): не задан признак сведений",
						"Раздел2", "П00002М100103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмПрСвед.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): признак сведений должен принимать одно из значений: "
						+ ВозмПрСвед.СтрокаЗначений, "Раздел2", "П00002М100103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М101003"]));
				Если ДлинаЗначПок <> 10 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "задан ИНН" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 10 цифр"),
					"Раздел2", "П00002М101003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М102003"]));
				Если ДлинаЗначПок <> 9 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "задан КПП" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 9 символов"),
					"Раздел2", "П00002М102003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00002М103003"])) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): не задано наименование организации",
					"Раздел2", "П00002М103003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если СтрокаМнЧ.Данные["П00002М104003"] = 0 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): не задано количество выданных бланков разрешений",
					"Раздел2", "П00002М104003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М105003"]));
				Если ДлинаЗначПок <> 15 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "заданы серия и номер бланка разрешения - начало диапазона" + ?(ДлинаЗначПок = 0, "",
					", не состоящие из 15 символов"), "Раздел2", "П00002М105003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М105004"]));
				Если ДлинаЗначПок <> 15 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "заданы серия и номер бланка разрешения - конец диапазона" + ?(ДлинаЗначПок = 0, "",
					", не состоящие из 15 символов"), "Раздел2", "П00002М105004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СтрокаМнЧ.Данные["П00002М106003"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): не задана дата выдачи бланков разрешений",
					"Раздел2", "П00002М106003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ЮЛ): задана дата выдачи бланков разрешений, "
					+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Раздел2", "П00002М106003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Сведения по индивидуальным предпринимателям.
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М2];
		
		Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
			
			ВозмПрСвед = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00002М200103");
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00002М200103"]);
				Если ПервичныеСведения Тогда
					Если ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Строка " + НомСтроки
						+ " раздела 2 (по ИП): признак сведений не должен быть задан, если на Титульном листе номер корректировки равен 0",
						"Раздел2", "П00002М200103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): не задан признак сведений",
						"Раздел2", "П00002М200103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмПрСвед.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): признак сведений должен принимать одно из значений: "
						+ ВозмПрСвед.СтрокаЗначений, "Раздел2", "П00002М200103_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М201003"]));
				Если ДлинаЗначПок <> 12 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "задан ИНН" + ?(ДлинаЗначПок = 0, "", ", не состоящий из 12 цифр"),
					"Раздел2", "П00002М201003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00002М203003"])) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): не задана фамилия индивидуального предпринимателя",
					"Раздел2", "П00002М203003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаМнЧ.Данные["П00002М203004"])) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): не задано имя индивидуального предпринимателя",
					"Раздел2", "П00002М203004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если СтрокаМнЧ.Данные["П00002М204003"] = 0 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): не задано количество выданных бланков разрешений",
					"Раздел2", "П00002М204003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М205003"]));
				Если ДлинаЗначПок <> 15 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "заданы серия и номер бланка разрешения - начало диапазона" + ?(ДлинаЗначПок = 0, "",
					", не состоящие из 15 символов"), "Раздел2", "П00002М205003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00002М205004"]));
				Если ДлинаЗначПок <> 15 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): " + ?(ДлинаЗначПок = 0, "не ", "")
					+ "заданы серия и номер бланка разрешения - конец диапазона" + ?(ДлинаЗначПок = 0, "",
					", не состоящие из 15 символов"), "Раздел2", "П00002М205004_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СтрокаМнЧ.Данные["П00002М206003"];
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): не задана дата выдачи бланков разрешений",
					"Раздел2", "П00002М206003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(ЗначПок) Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 2 (по ИП): задана дата выдачи бланков разрешений, "
					+ "выходящая за пределы периода с 01.01.1900 по 31.12.2099", "Раздел2", "П00002М206003_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗаполненРаздел1 И НЕ ЗаполненРаздел2 Тогда
		
		НомСтраницы = "1";
		СообщитьВТС("Должен быть заполнен раздел 1 и(или) раздел 2", "Раздел1",
		?(ПервичныеСведения, "П000010001003", "П000010000103"), НомСтраницы);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ДатаВходитВРазрешенныйПериод(ПровДата, ЛеваяГраница = '19000101', ПраваяГраница = '20991231')
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтотОбъект, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтотОбъект, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтотОбъект, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
				"ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
					ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	СведВыдФЛ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СведВыдФЛ");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзСведВыдФЛ = СкопироватьУзел(УзелРодитель, СведВыдФЛ, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСведВыдФЛ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзСведВыдФЛ, "СведФЛ"));
		
		ДанОбЖив = ПолучитьПодчиненныйЭлемент(ЭкзСведВыдФЛ, "ДанОбЖив");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзДанОбЖив = СкопироватьУзел(ЭкзСведВыдФЛ, ДанОбЖив, ЭкзСведВыдФЛ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзДанОбЖив);
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	СведВыдЮЛИП = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СведВыдЮЛИП");
	
	ЭкзСведВыдЮЛИП = СкопироватьУзел(УзелРодитель, СведВыдЮЛИП, УзелРодитель.Строки.Количество() - 1);
	
	Ветка = ДеревоРаздела.Строки[0];
	
	СведЮЛ = ПолучитьПодчиненныйЭлемент(ЭкзСведВыдЮЛИП, "СведЮЛ");
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М1];
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЭкзСведЮЛ = СкопироватьУзел(ЭкзСведВыдЮЛИП, СведЮЛ, ЭкзСведВыдЮЛИП.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСведЮЛ);
	КонецЦикла;
	
	СведИП = ПолучитьПодчиненныйЭлемент(ЭкзСведВыдЮЛИП, "СведИП");
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М2];
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЭкзСведИП = СкопироватьУзел(ЭкзСведВыдЮЛИП, СведИП, ЭкзСведВыдЮЛИП.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСведИП);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
		СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
			И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0
			ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника),
			ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ЖивотныйМирСведенияОВыданныхЛицензиях");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтотОбъект);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки501");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета
	= РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтотОбъект);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтотОбъект);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?';
								|en = 'Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтотОбъект, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтотОбъект);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в рублях точность не может превышать 2 знака';
					|en = '%1: при выводе сумм в рублях точность не может превышать 2 знака'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака';
					|en = '%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения
		= ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков';
					|en = '%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), Заголовок));
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтотОбъект, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтотОбъект, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
	Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Внимание! Будет очищена текущая страница.%1Продолжить?';
		|en = 'Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения
	= Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ИмяФормы)].ПолучитьМакет(
		Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		СформироватьЗаголовокОтчета();
		
		ЗаполнитьПериодОтчета(ЭтотОбъект);
		
	Иначе
		
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru = '%1. Формируется печатная форма...';
	|en = '%1. Формируется печатная форма...'"), Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтотОбъект, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию';
			|en = 'Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
		<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			"ru = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""';
			|en = 'Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0""'"));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтотОбъект, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	МасФИО = Новый Массив;
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР1М1;
		
		СтрокМнЧНаЛисте = 2;
		
		ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
		
		КС = Новый КвалификаторыСтроки(182);
		Мас = Новый Массив;
		Мас.Добавить(Тип("Строка"));
		ОписаниеТиповС_182 = Новый ОписаниеТипов(Мас, , КС);
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				НемногострочныеДанные = Ветка.Данные;
				Для каждого Пок Из НемногострочныеДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Если Обл.Имя = "П000010005003" Тогда
							
							// Особая обработка для ФИО.
							Обл.ТипЗначения = ОписаниеТиповС_182;
							МасФИО.Очистить();
							МасФИО.Добавить(СокрЛП(НемногострочныеДанные["П000010005003"]));
							МасФИО.Добавить(СокрЛП(НемногострочныеДанные["П000010005004"]));
							МасФИО.Добавить(СокрЛП(НемногострочныеДанные["П000010005005"]));
							Обл.Значение = СокрЛП(СтрСоединить(МасФИО, " "));
							
						Иначе
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(
		ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		КС = Новый КвалификаторыСтроки(12);
		Мас = Новый Массив;
		Мас.Добавить(Тип("Строка"));
		ОписаниеТиповС_12 = Новый ОписаниеТипов(Мас, , КС);
		
		Ветка = ДеревоДанныхРаздела.Строки[0];
		
		СтрокМнЧНаЛисте = 2;
		
		// Особая обработка: объединение данных 2-х многострочных частей для вывода на печать.
		//
		ОбъединенныеДанныеМнЧ = Новый Массив;
		
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыР2М1;
		
		// В объединении используются имена показателей первой из 2-х многострочных частей.
		ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
		ЗаполненаМнЧ1 = ЗаполненаМногострочнаяЧасть(ДанныеМнЧ);
		Если ЗаполненаМнЧ1 Тогда
			Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ДанныеТекСтрокиМнЧ = Новый Структура;
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ДанныеТекСтрокиМнЧ.Вставить(ИмяГрафы, СтрокаМнЧ.Данные[ИмяГрафы]);
				КонецЦикла;
				ОбъединенныеДанныеМнЧ.Добавить(ДанныеТекСтрокиМнЧ);
			КонецЦикла;
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР2М2];
		ЗаполненаМнЧ2 = ЗаполненаМногострочнаяЧасть(ДанныеМнЧ);
		Если ЗаполненаМнЧ2 Тогда
			Для Каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				ДанныеТекСтрокиМнЧ = Новый Структура;
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					Если ИмяГрафы = "П00002М102003" Тогда
						ТекЗнач = "";
					ИначеЕсли ИмяГрафы = "П00002М103003" Тогда
						МасФИО.Очистить();
						МасФИО.Добавить(СокрЛП(СтрокаМнЧ.Данные["П00002М203003"]));
						МасФИО.Добавить(СокрЛП(СтрокаМнЧ.Данные["П00002М203004"]));
						МасФИО.Добавить(СокрЛП(СтрокаМнЧ.Данные["П00002М203005"]));
						ТекЗнач = СокрЛП(СтрСоединить(МасФИО, " "));
					Иначе
						ТекЗнач = СтрокаМнЧ.Данные[СтрЗаменить(ИмяГрафы,
							СтруктураРеквизитовФормы.мИдГруппыР2М1, СтруктураРеквизитовФормы.мИдГруппыР2М2)];
					КонецЕсли;
					ДанныеТекСтрокиМнЧ.Вставить(ИмяГрафы, ТекЗнач);
				КонецЦикла;
				ОбъединенныеДанныеМнЧ.Добавить(ДанныеТекСтрокиМнЧ);
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЗаполненаМнЧ1 И НЕ ЗаполненаМнЧ2 Тогда
			СтрокаМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ].Строки[0];
			ДанныеТекСтрокиМнЧ = Новый Структура;
			Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
				ДанныеТекСтрокиМнЧ.Вставить(ИмяГрафы, СтрокаМнЧ.Данные[ИмяГрафы]);
			КонецЦикла;
			ОбъединенныеДанныеМнЧ.Добавить(ДанныеТекСтрокиМнЧ);
		КонецЕсли;
		
		// Определение количества листов.
		//
		КолСтрокМнЧ = ОбъединенныеДанныеМнЧ.Количество();
		ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
		ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
		КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
		
		// Подготовка многострочных данных для заполнения листов.
		//
		МассивДанныхМнЧДляПечати = Новый Массив;
		
		Для НомЛиста = 1 По КолЛистовРаздела Цикл
			
			ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
			ДанныеМнЧДляПечати = Новый Структура;
			Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
				_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
				ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
				Если ИндСПриращением > ОбъединенныеДанныеМнЧ.Количество() Тогда
					Прервать;
				КонецЕсли;
				Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ОбъединенныеДанныеМнЧ[ИндСПриращением - 1][ИмяГрафы]);
				КонецЦикла;
			КонецЦикла;
			МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			
		КонецЦикла;
		
		// Вывод листов.
		//
		Для НомЛиста = 1 По КолЛистовРаздела Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
				ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
			КонецЦикла;
			
			ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					
					Если СтрНачинаетсяС(Обл.Имя, "П00002М101003") Тогда
						
						// Особая обработка для ИНН.
						Обл.ТипЗначения = ОписаниеТиповС_12;
						Обл.Значение = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Пок.Значение, 12, "-", "Справа");
						
					Иначе
						Обл.Значение = Пок.Значение;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2025Кв1_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
	Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2)
		+ Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(
									Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(
									Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа,
							ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось заполнить область ""%1""';
							|en = 'Не удалось заполнить область ""%1""'"), ИмяОбласти));
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		СтруктураПараметров = Новый Структура("Организация, ДатаЗначения, СведенияОбОрганизации",
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СведенияОбОрганизации);
		РегламентированнаяОтчетность.ЗаменитьСведенияОбОрганизацииСведениямиОКрупнейшемНалогоплательщике(
		СтруктураПараметров);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтотОбъект);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтотОбъект[ТекущийЭлемент.Имя].Области.Найти(
			КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя
			+ Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
	"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
	ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
	ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтотОбъект, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтотОбъект[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение
			= СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтотОбъект, Ячейка);
	Иначе
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	РазделыОтчета.ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = РазделыОтчета.ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"),
						СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = ?(СтруктураПодчРаздела.Свойство("НаимСтраницы"),
								СтруктураПодчРаздела["НаимСтраницы"], "Стр. ");
								ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда) Экспорт 
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтотОбъект, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(
	ЭтотОбъект, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокОтчета();
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

	Если СтруктураРеквизитовФормы.НеобходимоПреобразованиеИзПрошлойРедакции Тогда 
		ОО = Новый ОписаниеОповещения("ВопросВыполнитьПреобразованиеИзПрошлойРедакции", ЭтотОбъект);
		ПоказатьВопрос(ОО, "Была скопирована форма другой редакции. Выполнить конвертацию данных?",
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьПреобразованиеИзПрошлойРедакции(РезультатВопроса, ДополнительныеПараметры) Экспорт
	РегламентированнаяОтчетностьЗагрузкаКлиент.ВыполнитьПреобразованиеИзПрошлойРедакции(ЭтотОбъект, РезультатВопроса);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокОтчета()
	
	НомКорр = Неопределено;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		Обл = ТабличныйДокумент.Области.Найти("НомерКорректировки");
		Если Обл <> Неопределено Тогда
			НомКорр = Обл.Значение;
		КонецЕсли;
	Иначе
		СтруктураДанныхТитульный.Свойство("НомерКорректировки", НомКорр);
	КонецЕсли;
	ПредстНомКорр = ?(ТипЗнч(НомКорр) = Тип("Число") И НомКорр > 0, " К/" + Формат(НомКорр, "ЧГ="), "");
	
	Заголовок = "Сведения о выданных разрешениях на добычу объектов животного мира за "
	+ СтруктураРеквизитовФормы.СтрПериодОтчета + ПредстНомКорр + " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")"
	+ ?(СтрНайти(ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтотОбъект);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтотОбъект, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтотОбъектИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтотОбъектИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтотОбъектИмя)
	
	Форма_Имя = СтрЗаменить(ЭтотОбъектИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
