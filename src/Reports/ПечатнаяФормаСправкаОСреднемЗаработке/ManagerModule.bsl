#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СправкаОСреднемЗаработке2019");
	НастройкиВарианта.Описание = НСтр("ru = 'Справка о среднем заработке за последние три месяца по последнему месту работы (службы) (2019)';
										|en = 'Certificate on average earnings for the last three months at the last place of work (service) (2019)'");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СправкаОСреднемЗаработке2023");
	НастройкиВарианта.Описание = НСтр("ru = 'Справка о среднем заработке за последние три месяца по последнему месту работы (службы) (2023)';
										|en = 'Справка о среднем заработке за последние три месяца по последнему месту работы (службы) (2023)'");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "СправкаОСреднемЗаработке2025");
	НастройкиВарианта.Описание = НСтр("ru = 'Справка о среднем заработке за последние три месяца по последнему месту работы (службы) (2025)';
										|en = 'Справка о среднем заработке за последние три месяца по последнему месту работы (службы) (2025)'");
	НастройкиВарианта.Включен = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКомандуПечати(КомандыПечати, ИдентификаторыПФ = Неопределено) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ПечатнаяФормаСправкаОСреднемЗаработке) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаСправкаОСреднемЗаработке";
		КомандаПечати.Идентификатор = ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2019();
		КомандаПечати.Представление = НСтр("ru = 'Справка для пособия по безработице (2019)';
											|en = 'Справка для пособия по безработице (2019)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ПериодРегистрации", '20230801', ВидСравненияКомпоновкиДанных.Меньше);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаСобытия", '20230801', ВидСравненияКомпоновкиДанных.Меньше);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаУвольнения", '20230801', ВидСравненияКомпоновкиДанных.Меньше);
		
		Если ИдентификаторыПФ <> Неопределено Тогда
			ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		КонецЕсли;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаСправкаОСреднемЗаработке";
		КомандаПечати.Идентификатор = ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2023();
		КомандаПечати.Представление = НСтр("ru = 'Справка для пособия по безработице (2023, 2024)';
											|en = 'Справка для пособия по безработице (2023, 2024)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ПериодРегистрации", '20230801', ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаСобытия", '20230801', ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаУвольнения", '20230801', ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ПериодРегистрации", ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025(), ВидСравненияКомпоновкиДанных.Меньше);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаСобытия", ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025(), ВидСравненияКомпоновкиДанных.Меньше);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаУвольнения", ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025(), ВидСравненияКомпоновкиДанных.Меньше);
		
		Если ИдентификаторыПФ <> Неопределено Тогда
			ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		КонецЕсли;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати";
		КомандаПечати.МенеджерПечати = "Отчет.ПечатнаяФормаСправкаОСреднемЗаработке";
		КомандаПечати.Идентификатор = ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2025();
		КомандаПечати.Представление = НСтр("ru = 'Справка для пособия по безработице (2025)';
											|en = 'Справка для пособия по безработице (2025)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("РеквизитыДетализации", "РаботаСотрудник");
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ПериодРегистрации", НачалоМесяца(ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025()), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаСобытия", ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025(), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, 
			"ДатаУвольнения", ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025(), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		
		Если ИдентификаторыПФ <> Неопределено Тогда
			ЗарплатаКадры.ДобавитьИдентификаторКомандыДляПечатиВПакетномРежиме(ИдентификаторыПФ, КомандаПечати);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2019()
	Возврат "ПФ_MXL_СправкаОСреднемЗаработке2019";
КонецФункции

Функция ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2023() Экспорт
	Возврат "ПФ_MXL_СправкаОСреднемЗаработке2023";
КонецФункции

Функция ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2025() Экспорт
	Возврат "ПФ_MXL_СправкаОСреднемЗаработке2025";
КонецФункции

Функция ДатаНачалаИспользованияПФ_MXL_СправкаОСреднемЗаработке2025()
	Возврат '20250211';
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, СписокСотрудников = Неопределено) Экспорт
	
	РабочаяДатаПользователя = ОбщегоНазначения.РабочаяДатаПользователя();
	Если ЗначениеЗаполнено(РабочаяДатаПользователя) И РабочаяДатаПользователя < '20190111' Тогда
		
		Обработки.ПечатьКадровыхПриказов.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
		Возврат;
		
	КонецЕсли;
	
	Если СписокСотрудников <> Неопределено Тогда
		
		СписокОтборов = Новый Массив;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			СписокОтборов, "Работа.Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, СписокСотрудников);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Отбор", СписокОтборов);
		
	Иначе
		ДополнительныеПараметры = Неопределено;
	КонецЕсли;
	
	ЗарплатаКадрыОтчеты.ВывестиВКоллекциюПечатнуюФорму("Отчет.ПечатнаяФормаСправкаОСреднемЗаработке",
		МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ВнешниеНаборыДанных(), ДополнительныеПараметры);
	
КонецПроцедуры

Процедура Сформировать(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Если РезультатКомпоновки.ОтчетПустой Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатКомпоновки.КлючВарианта = "СправкаОСреднемЗаработке2025" Тогда
		Сформировать2025(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати, ПараметрыПечати);
		Возврат;
	КонецЕсли;
	
	ПараметрыДатаСправки = Новый Структура("ПараметрыДанныхДатаСправки", ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ОбъектОтчета = Отчеты.ПечатнаяФормаСправкаОСреднемЗаработке.Создать();
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗарплатаКадрыОтчеты.ЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, ОбъектОтчета, РезультатКомпоновки.КлючВарианта);
	
	ПараметрДатаСправки = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроекКД, "ДатаСправки");
	Если ПараметрДатаСправки <> Неопределено Тогда
		
		Если ПараметрДатаСправки.Использование
			И ТипЗнч(ПараметрДатаСправки.Значение) = Тип("Дата") Тогда
			
			ПараметрыДатаСправки.ПараметрыДанныхДатаСправки = ПараметрДатаСправки.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстРедакции = "";
	Если РезультатКомпоновки.КлючВарианта = "СправкаОСреднемЗаработке2019" Тогда
		Если ПараметрыДатаСправки.ПараметрыДанныхДатаСправки < '20210925' Тогда
			ТекстПояснения =
				НСтр("ru = 'Расчет среднего заработка производится в соответствии с Порядком исчисления среднего заработка для определения размера пособия по безработице и стипендии, выплачиваемой гражданам в период профессиональной подготовки, переподготовки и повышения квалификации по направлению органов службы занятости. (Постановление Министерства труда и социального развития Российской Федерации от 12 августа 2003 года № 62).';
					|en = 'Average earnings are calculated in accordance with the Procedure for average earnings calculation to determine an amount of unemployment benefit and scholarship that is paid to citizens during the period of professional training, retraining and advanced training as directed by employment service agencies. (Decree No. 62 of the Ministry of Labor and Social Development of the Russian Federation dated August 12, 2003).'");
		Иначе
			ТекстПояснения =
				НСтр("ru = 'Расчет среднего заработка производится в соответствии с Правилами исчисления среднего заработка для определения размера пособия по безработице и стипендии, выплачиваемой гражданам в период профессиональной подготовки, переподготовки и повышения квалификации по направлению органов службы занятости. (Постановление Правительства РФ от 14.09.2021 N 1552 ""Об утверждении Правил исчисления среднего заработка по последнему месту работы (службы)"").';
					|en = 'Average earnings are calculated in accordance with the Procedure for average earnings calculation to determine an amount of unemployment benefit and scholarship that is paid to citizens during the period of professional training, retraining, and advanced training as directed by employment service agencies. (Decree No. 1552 of the Government of the Russian Federation ""On approval of the Rules for calculating average earnings at the last place of work (service)"" dated 09/14/2021).'");
		КонецЕсли;

	Иначе
		ТекстРедакции = НСтр("ru = 'от 27 июля 2023 г. № 604н';
							|en = 'dated June 27, 2023, No. 604n'");
		Если ПараметрыДатаСправки.ПараметрыДанныхДатаСправки < '20240719' Тогда
			ТекстПояснения =
				НСтр("ru = 'Средний заработок, исчисленный в соответствии с Правилами исчисления среднего заработка по последнему месту работы (службы), утвержденными постановлением Правительства Российской Федерации от 24 июня 2023 г. № 1026, составил';
					|en = 'Average earnings calculated in accordance with the Procedure for average earnings calculation at the last place of work (service), established by the decree of the Government of the Russian Federation dated June 24, 2023, No. 1026, amounted to'");
		Иначе
			ТекстРедакции = ТекстРедакции + Символы.ПС + НСтр("ru = '(в ред. Приказа Минтруда России от 27.04.2024 № 239н)';
																|en = '(в ред. Приказа Минтруда России от 27.04.2024 № 239н)'");
			ТекстПояснения =
				НСтр("ru = 'Средний заработок, исчисленный в соответствии с Порядком исчисления среднего заработка для назначения пособия по безработице, утвержденным приказом Министерства труда и социальной защиты Российской Федерации от 13 февраля 2024 г. N 57н (зарегистрирован Министерством юстиции Российской Федерации 21 марта 2024 г., регистрационный N 77585), составил';
					|en = 'The average income accrued in accordance with the Order of the accrual of the average income for the assignment of an unemployment leave, confirmed by the Government of the Ministry of Labor and Social Security of the Russian Federation date February 13, 2024. N 57n (registered by the Ministry of Justice of the RUssian Federation date March 21, 2024, registration number 77585) constituted'");
		КонецЕсли;
	КонецЕсли;
	ПараметрыДатаСправки.Вставить("ТекстРедакции", ТекстРедакции);
	ПараметрыДатаСправки.Вставить("ТекстПояснения", ТекстПояснения);
	
	Если РезультатКомпоновки.КлючВарианта = "СправкаОСреднемЗаработке2019" Тогда
		ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОСреднемЗаработке2019";
	Иначе
		ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОСреднемЗаработке2023";
	КонецЕсли;
	
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	КадровыеДанные = Новый ТаблицаЗначений;
	КадровыеДанные.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеДанные.Колонки.Добавить("ДатаПриема", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ПриказОбУвольнении", Документы.ТипВсеСсылки());
	КадровыеДанные.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	
	СуммированныйУчетРабочегоВремениИспользуется =
		РезультатКомпоновки.ДанныеОтчета.Колонки.Найти("РаботаГрафикРаботыСуммированныйУчетРабочегоВремени") <> Неопределено;
	
	ЕдинственнаяГоловнаяОрганизация = Неопределено;
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаДатаУвольнения) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КадровыеДанные.Добавить();
			
			Если ДанныеДетальныхЗаписей.Владелец().Колонки.Найти("РаботаСотрудникГоловнаяОрганизация") <> Неопределено Тогда
				НоваяСтрока.ГоловнаяОрганизация = ДанныеДетальныхЗаписей.РаботаСотрудникГоловнаяОрганизация;
			Иначе
				Если ЕдинственнаяГоловнаяОрганизация = Неопределено Тогда
					ЕдинственнаяГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДетальныхЗаписей.РаботаСотрудник, "ГоловнаяОрганизация");
				КонецЕсли;
				НоваяСтрока.ГоловнаяОрганизация = ЕдинственнаяГоловнаяОрганизация;
			КонецЕсли;
			
			НоваяСтрока.Сотрудник = ДанныеДетальныхЗаписей.РаботаСотрудник;
			НоваяСтрока.ДатаПриема = ДанныеДетальныхЗаписей.РаботаДатаПриема;
			НоваяСтрока.ДатаУвольнения = ДанныеДетальныхЗаписей.РаботаДатаУвольнения;
			НоваяСтрока.ПриказОбУвольнении = ДанныеДетальныхЗаписей.РаботаПриказОбУвольнении;
			Если СуммированныйУчетРабочегоВремениИспользуется Тогда
				НоваяСтрока.СуммированныйУчетРабочегоВремени = ДанныеДетальныхЗаписей.РаботаГрафикРаботыСуммированныйУчетРабочегоВремени;
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
	СведенияОСреднемЗаработке = КадровыйУчетВнутренний.СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанные);
	ДанныеОтсутствийСотрудников = КадровыйУчет.ДанныеОтсутствийСотрудникаДляПособияПоБезработице(КадровыеДанные.Скопировать());
	
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			НомерСтрокиНачалаОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаДатаУвольнения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Сотрудник %1 еще не уволен.';
									|en = 'Employee %1has not been dismissed yet.'"), ДанныеДетальныхЗаписей.РаботаСотрудник));
				
				Продолжить;
				
			КонецЕсли;
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОкончаниеПериодаОтсутствий = ДанныеДетальныхЗаписей.РаботаДатаУвольнения;
			НачалоПериодаОтсутствий = ДобавитьМесяц(НачалоМесяца(ОкончаниеПериодаОтсутствий) - 1, -12);
			Если НачалоПериодаОтсутствий < ДанныеДетальныхЗаписей.РаботаДатаПриема Тогда
				НачалоПериодаОтсутствий = ДанныеДетальныхЗаписей.РаботаДатаПриема;
			КонецЕсли;
			
			ДанныеПолучаемыеНаХоду = Новый Структура(
				"СреднийЗаработок,
				|СреднийЗаработокПрописью,
				|ДанныеГрафикаПолногоРабочегоДня,
				|ДанныеГрафикаСокращенногоРабочегоДня,
				|ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира,
				|ОтпускПоБеременностиИРодамНачало,
				|ОтпускПоБеременностиИРодамОкончание,
				|ОтпускПоУходуЗаРебенкомНачало,
				|ОтпускПоУходуЗаРебенкомОкончание,
				|ОтпускБезОплатыНачало,
				|ОтпускБезОплатыОкончание");
			
			ДанныеОтсутствий = ДанныеОтсутствийСотрудников.Получить(ДанныеДетальныхЗаписей.РаботаСотрудник);
			
			Если ДанныеОтсутствий <> Неопределено Тогда
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускПоБеременностиИРодам");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускПоБеременностиИРодамНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускПоБеременностиИРодамОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
				
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускПоУходуЗаРебенком");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускПоУходуЗаРебенкомНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускПоУходуЗаРебенкомОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
				
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускНеоплачиваемый");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускБезОплатыНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускБезОплатыОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
			КонецЕсли;
			
			ШаблонОписанияГрафика = НСтр("ru = '%1 часовой рабочий день (смена), %2 дневная неделя (часовая неделя)';
										|en = '%1 hour working day (shift), %2 day week (hour week)'");
			
			ДанныеПолучаемыеНаХоду.ДанныеГрафикаПолногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
				ДанныеДетальныхЗаписей.РаботаГрафикРаботыЧасовВДеньПредставление, ДанныеДетальныхЗаписей.РаботаГрафикРаботыДнейВНеделюПредставление);
			
			ДанныеПолучаемыеНаХоду.ДанныеГрафикаСокращенногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
				ДанныеДетальныхЗаписей.РаботаГрафикРаботыЧасовВДеньСокращенныйПредставление, ДанныеДетальныхЗаписей.РаботаГрафикРаботыДнейВНеделюСокращенныйПредставление);
			
			КадровыйУчет.ОписаниеГрафикаРаботыДляСправкиПоБезработице(ДанныеДетальныхЗаписей,
				ШаблонОписанияГрафика,
				СуммированныйУчетРабочегоВремениИспользуется,
				ДанныеПолучаемыеНаХоду);
			
			СреднийЗаработок = СведенияОСреднемЗаработке.Получить(ДанныеДетальныхЗаписей.РаботаСотрудник);
			Если Не ЗначениеЗаполнено(СреднийЗаработок) И ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаСотрудник) Тогда
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(
					Истина, ДанныеДетальныхЗаписей.РаботаСотрудник, "ФОТ", ДанныеДетальныхЗаписей.РаботаДатаУвольнения);
				СреднийЗаработок = КадровыеДанные.ФОТ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СреднийЗаработок) Тогда
				
				ДанныеПолучаемыеНаХоду.СреднийЗаработок = ЗарплатаКадрыОтчеты.ТарифнаяСтавкаНаПечать(СреднийЗаработок, Истина);
				
				ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
				ДанныеПолучаемыеНаХоду.СреднийЗаработокПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					Окр(СреднийЗаработок, 2), ВалютаУчета);
				
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			СведенияОВыдачеДокумента = Новый Массив;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан) Тогда
					СведенияОВыдачеДокумента.Добавить(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан);
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения) Тогда
					СведенияОВыдачеДокумента.Добавить(СтрШаблон(НСтр("ru = 'код подразделения: %1';
																	|en = 'business unit code:%1'"), ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения));
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи) Тогда
					СведенияОВыдачеДокумента.Добавить(Формат(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи, "ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОВыдачеДокумента) Тогда
				ДанныеПолучаемыеНаХоду.ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан =
					СтрСоединить(СведенияОВыдачеДокумента, ", ");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей) Тогда
					СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород =
						ГородИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица =
						УлицаИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом =
						ДомИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус =
						КорпусИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира =
						КвартираИзСведенийОбАдресе(СведенияОбАдресе);
				КонецЕсли;
			КонецЕсли;
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат,
				РезультатКомпоновки.МакетПечатнойФормы,
				"Бланк",
				ДанныеНаПечать,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей,
				ДанныеПолучаемыеНаХоду,
				ПараметрыДатаСправки);
			
			Если РезультатКомпоновки.КлючВарианта = "СправкаОСреднемЗаработке2019" Тогда
				КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2019(),
					НомерСтрокиНачалаОбласти, ДанныеДетальныхЗаписей, ДанныеНаПечать.СсылкаНаОбъект);
			Иначе
				КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2023(),
					НомерСтрокиНачалаОбласти, ДанныеДетальныхЗаписей, ДанныеНаПечать.СсылкаНаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено И ПерваяСтрокаПечатнойФормы < ДокументРезультат.ВысотаТаблицы Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Сформировать2025(ДокументРезультат, РезультатКомпоновки, ОбъектыПечати = Неопределено, ПараметрыПечати = Неопределено) Экспорт
	
	Если РезультатКомпоновки.ОтчетПустой Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДатаСправки = Новый Структура("ПараметрыДанныхДатаСправки", ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ОбъектОтчета = Отчеты.ПечатнаяФормаСправкаОСреднемЗаработке.Создать();
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗарплатаКадрыОтчеты.ЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, ОбъектОтчета, РезультатКомпоновки.КлючВарианта);
	
	ПараметрДатаСправки = ЗарплатаКадрыОтчеты.НайтиПараметр(КомпоновщикНастроекКД, "ДатаСправки");
	Если ПараметрДатаСправки <> Неопределено Тогда
		
		Если ПараметрДатаСправки.Использование
			И ТипЗнч(ПараметрДатаСправки.Значение) = Тип("Дата") Тогда
			
			ПараметрыДатаСправки.ПараметрыДанныхДатаСправки = ПараметрДатаСправки.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_СправкаОСреднемЗаработке2025";
	
	ДокументРезультат.ОриентацияСтраницы= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	КадровыеДанные = Новый ТаблицаЗначений;
	КадровыеДанные.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеДанные.Колонки.Добавить("ДатаПриема", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	КадровыеДанные.Колонки.Добавить("ПриказОбУвольнении", Документы.ТипВсеСсылки());
	КадровыеДанные.Колонки.Добавить("СуммированныйУчетРабочегоВремени", Новый ОписаниеТипов("Булево"));
	
	СуммированныйУчетРабочегоВремениИспользуется =
		РезультатКомпоновки.ДанныеОтчета.Колонки.Найти("РаботаГрафикРаботыСуммированныйУчетРабочегоВремени") <> Неопределено;
	
	ЕдинственнаяГоловнаяОрганизация = Неопределено;
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаДатаУвольнения) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КадровыеДанные.Добавить();
			
			Если ДанныеДетальныхЗаписей.Владелец().Колонки.Найти("РаботаСотрудникГоловнаяОрганизация") <> Неопределено Тогда
				НоваяСтрока.ГоловнаяОрганизация = ДанныеДетальныхЗаписей.РаботаСотрудникГоловнаяОрганизация;
			Иначе
				Если ЕдинственнаяГоловнаяОрганизация = Неопределено Тогда
					ЕдинственнаяГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДетальныхЗаписей.РаботаСотрудник, "ГоловнаяОрганизация");
				КонецЕсли;
				НоваяСтрока.ГоловнаяОрганизация = ЕдинственнаяГоловнаяОрганизация;
			КонецЕсли;
			
			НоваяСтрока.Сотрудник = ДанныеДетальныхЗаписей.РаботаСотрудник;
			НоваяСтрока.ДатаПриема = ДанныеДетальныхЗаписей.РаботаДатаПриема;
			НоваяСтрока.ДатаУвольнения = ДанныеДетальныхЗаписей.РаботаДатаУвольнения;
			НоваяСтрока.ПриказОбУвольнении = ДанныеДетальныхЗаписей.РаботаПриказОбУвольнении;
			Если СуммированныйУчетРабочегоВремениИспользуется Тогда
				НоваяСтрока.СуммированныйУчетРабочегоВремени = ДанныеДетальныхЗаписей.РаботаГрафикРаботыСуммированныйУчетРабочегоВремени;
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
	СведенияОСреднемЗаработке = КадровыйУчетВнутренний.СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанные);
	ДанныеОтсутствийСотрудников = КадровыйУчет.ДанныеОтсутствийСотрудникаДляПособияПоБезработице(КадровыеДанные.Скопировать());
	
	Для Каждого ДанныеНаПечать Из РезультатКомпоновки.ДанныеОтчета.Строки Цикл
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			НомерСтрокиНачалаОбласти = ДокументРезультат.ВысотаТаблицы + 1;
			
			Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаДатаУвольнения) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Сотрудник %1 еще не уволен.';
									|en = 'Сотрудник %1 еще не уволен.'"), ДанныеДетальныхЗаписей.РаботаСотрудник));
				
				Продолжить;
				
			КонецЕсли;
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОкончаниеПериодаОтсутствий = ДанныеДетальныхЗаписей.РаботаДатаУвольнения;
			НачалоПериодаОтсутствий = ДобавитьМесяц(НачалоМесяца(ОкончаниеПериодаОтсутствий) - 1, -12);
			Если НачалоПериодаОтсутствий < ДанныеДетальныхЗаписей.РаботаДатаПриема Тогда
				НачалоПериодаОтсутствий = ДанныеДетальныхЗаписей.РаботаДатаПриема;
			КонецЕсли;
			
			ДанныеПолучаемыеНаХоду = Новый Структура(
				"СреднийЗаработок,
				|СреднийЗаработокПрописью,
				|ДанныеГрафикаПолногоРабочегоДня,
				|ДанныеГрафикаСокращенногоРабочегоДня,
				|ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан,
				
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус,
				|ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира,
				
				|ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейГород,
				|ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейУлица,
				|ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейДом,
				|ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейКорпус,
				|ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейКвартира,
				
				|ОтпускПоБеременностиИРодамНачало,
				|ОтпускПоБеременностиИРодамОкончание,
				|ОтпускПоУходуЗаРебенкомНачало,
				|ОтпускПоУходуЗаРебенкомОкончание,
				|ОтпускБезОплатыНачало,
				|ОтпускБезОплатыОкончание");
			
			ДанныеОтсутствий = ДанныеОтсутствийСотрудников.Получить(ДанныеДетальныхЗаписей.РаботаСотрудник);
			
			Если ДанныеОтсутствий <> Неопределено Тогда
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускПоБеременностиИРодам");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускПоБеременностиИРодамНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускПоБеременностиИРодамОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
				
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускПоУходуЗаРебенком");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускПоУходуЗаРебенкомНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускПоУходуЗаРебенкомОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
				
				ДанныеОтсутствия = ДанныеОтсутствий.Получить("ОтпускНеоплачиваемый");
				Если ДанныеОтсутствия <> Неопределено Тогда
					ДанныеПолучаемыеНаХоду.ОтпускБезОплатыНачало = ДанныеОтсутствия.Начало;
					ДанныеПолучаемыеНаХоду.ОтпускБезОплатыОкончание = ДанныеОтсутствия.Окончание;
				КонецЕсли;
			КонецЕсли;
			
			ШаблонОписанияГрафика = НСтр("ru = '%1 часовой рабочий день (смена), %2 дневная неделя (часовая неделя)';
										|en = '%1 часовой рабочий день (смена), %2 дневная неделя (часовая неделя)'");
			
			ДанныеПолучаемыеНаХоду.ДанныеГрафикаПолногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
				ДанныеДетальныхЗаписей.РаботаГрафикРаботыЧасовВДеньПредставление, ДанныеДетальныхЗаписей.РаботаГрафикРаботыДнейВНеделюПредставление);
			
			ДанныеПолучаемыеНаХоду.ДанныеГрафикаСокращенногоРабочегоДня = СтрШаблон(ШаблонОписанияГрафика,
				ДанныеДетальныхЗаписей.РаботаГрафикРаботыЧасовВДеньСокращенныйПредставление, ДанныеДетальныхЗаписей.РаботаГрафикРаботыДнейВНеделюСокращенныйПредставление);
			
			КадровыйУчет.ОписаниеГрафикаРаботыДляСправкиПоБезработице(ДанныеДетальныхЗаписей,
				ШаблонОписанияГрафика,
				СуммированныйУчетРабочегоВремениИспользуется,
				ДанныеПолучаемыеНаХоду);
			
			СреднийЗаработок = СведенияОСреднемЗаработке.Получить(ДанныеДетальныхЗаписей.РаботаСотрудник);
			Если Не ЗначениеЗаполнено(СреднийЗаработок) И ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаСотрудник) Тогда
				КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудника(
					Истина, ДанныеДетальныхЗаписей.РаботаСотрудник, "ФОТ", ДанныеДетальныхЗаписей.РаботаДатаУвольнения);
				СреднийЗаработок = КадровыеДанные.ФОТ;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СреднийЗаработок) Тогда
				
				ДанныеПолучаемыеНаХоду.СреднийЗаработок = ЗарплатаКадрыОтчеты.ТарифнаяСтавкаНаПечать(СреднийЗаработок, Истина);
				
				ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
				ДанныеПолучаемыеНаХоду.СреднийЗаработокПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
					Окр(СреднийЗаработок, 2), ВалютаУчета);
				
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(РезультатКомпоновки.ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			СведенияОВыдачеДокумента = Новый Массив;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан) Тогда
					СведенияОВыдачеДокумента.Добавить(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКемВыдан);
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения) Тогда
					СведенияОВыдачеДокумента.Добавить(СтрШаблон(НСтр("ru = 'код подразделения: %1';
																	|en = 'код подразделения: %1'"), ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьКодПодразделения));
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи) Тогда
					СведенияОВыдачеДокумента.Добавить(Формат(ДанныеДетальныхЗаписей.ЛичныеДанныеДокументУдостоверяющийЛичностьДатаВыдачи, "ДЛФ=D"));
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОВыдачеДокумента) Тогда
				ДанныеПолучаемыеНаХоду.ЛичныеДанныеДокументУдостоверяющийЛичностьКемИКогдаВыдан =
					СтрСоединить(СведенияОВыдачеДокумента, ", ");
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей) Тогда
					СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолей);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейГород =
						ГородИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейУлица =
						УлицаИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейДом =
						ДомИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКорпус =
						КорпусИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияЗначенияПолейКвартира =
						КвартираИзСведенийОбАдресе(СведенияОбАдресе);
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДетальныхЗаписей, "ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолей") Тогда
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолей) Тогда
					СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ДанныеДетальныхЗаписей.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолей);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейГород =
						ГородИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейУлица =
						УлицаИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейДом =
						ДомИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейКорпус =
						КорпусИзСведенийОбАдресе(СведенияОбАдресе);
					ДанныеПолучаемыеНаХоду.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеЗначенияПолейКвартира =
						КвартираИзСведенийОбАдресе(СведенияОбАдресе);
				КонецЕсли;
			КонецЕсли;
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат,
				РезультатКомпоновки.МакетПечатнойФормы,
				"Бланк",
				ДанныеНаПечать,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей,
				ДанныеПолучаемыеНаХоду,
				ПараметрыДатаСправки);
			
			КадровыйЭДО.ЗадатьДетальнуюОбластьПечати(ПараметрыПечати, ДокументРезультат, ИдентификаторПечатнойФормыПФ_MXL_СправкаОСреднемЗаработке2025(),
				НомерСтрокиНачалаОбласти, ДанныеДетальныхЗаписей, ДанныеНаПечать.СсылкаНаОбъект);
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено И ПерваяСтрокаПечатнойФормы < ДокументРезультат.ВысотаТаблицы Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВнешниеНаборыДанных() Экспорт
	
	ВнешниеНаборы = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешниеНаборы.Вставить("ДанныеОрганизаций", ДанныеОрганизаций());
	ВнешниеНаборы.Вставить("ДанныеГрафиковРаботы", КадровыйУчет.ДанныеГрафиковРаботыДляСправкиОСреднемЗаработке());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВнешниеНаборы;
	
КонецФункции

Функция ДанныеОрганизаций()
	
	ТаблицаДанныхОрганизаций = Новый ТаблицаЗначений;
	
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Руководитель", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("ГлавныйБухгалтер", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаДанныхОрганизаций.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = ТаблицаДанныхОрганизаций.Добавить();
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "ТелОрганизации");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "АдрФакт_JSON");
		Сведения.Добавить("", "АдрЮР_JSON");
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, ТекущаяДатаСеанса(), Сведения);
		
		Если ОргСведения.Свойство("ТелОрганизации") Тогда
			НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		КонецЕсли;
		Если ОргСведения.Свойство("КППЮЛ") Тогда
			НоваяСтрокаСведенияОбОрганизациях.КПП = ОргСведения.КППЮЛ;
		КонецЕсли;
		Если ОргСведения.Свойство("АдрФакт_JSON") Тогда
			НоваяСтрокаСведенияОбОрганизациях.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОргСведения.АдрФакт_JSON);
		КонецЕсли;
		Если ПустаяСтрока(НоваяСтрокаСведенияОбОрганизациях.Адрес) И ОргСведения.Свойство("АдрЮР_JSON") Тогда
			НоваяСтрокаСведенияОбОрганизациях.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ОргСведения.АдрЮР_JSON);
		КонецЕсли;
		
		ОтветственныеЛицаОрганизации = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Выборка.Организация, "Руководитель,ГлавныйБухгалтер", ТекущаяДатаСеанса());
		НоваяСтрокаСведенияОбОрганизациях.Руководитель = ОтветственныеЛицаОрганизации.Руководитель;
		НоваяСтрокаСведенияОбОрганизациях.ГлавныйБухгалтер = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхОрганизаций;
	
КонецФункции

Функция ГородИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.ГородСокращение)
			И СведенияОбАдресе.ГородСокращение <> НСтр("ru = 'г';
														|en = 'city'") Тогда
			
			Возврат СтрШаблон("%1. %2", СведенияОбАдресе.ГородСокращение, СведенияОбАдресе.Город);
		КонецЕсли;
		Возврат СведенияОбАдресе.Город;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОбАдресе.Регион) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.РегионСокращение)
			И СведенияОбАдресе.РегионСокращение <> НСтр("ru = 'г';
														|en = 'city'") Тогда
			
			ПредставлениеГорода = ПредставлениеАдресногоЭлемента(СведенияОбАдресе.РегионСокращение, СведенияОбАдресе.Регион);
			Если ЗначениеЗаполнено(СведенияОбАдресе.Район) Тогда
				ПредставлениеГорода = СтрШаблон("%1, %2", ПредставлениеГорода, ПредставлениеАдресногоЭлемента(СведенияОбАдресе.РайонСокращение, СведенияОбАдресе.Район));
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
				ПредставлениеГорода = СтрШаблон("%1, %2", ПредставлениеГорода, ПредставлениеАдресногоЭлемента(СведенияОбАдресе.НаселенныйПунктСокращение, СведенияОбАдресе.НаселенныйПункт));
			КонецЕсли;
			Возврат ПредставлениеГорода;
		КонецЕсли;
		Возврат СведенияОбАдресе.Регион;
	КонецЕсли;
КонецФункции

Функция ПредставлениеАдресногоЭлемента(Сокращение, Элемент)
	Если ЗначениеЗаполнено(Сокращение) Тогда
		Если СтрДлина(Сокращение) < 3 Тогда
			Возврат СтрШаблон("%1. %2", Сокращение, Элемент);
		КонецЕсли;
		Возврат СтрШаблон("%1 %2", Элемент, Сокращение);
	КонецЕсли;
	Возврат Элемент;
КонецФункции

Функция УлицаИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.УлицаСокращение)
		И СведенияОбАдресе.УлицаСокращение <> НСтр("ru = 'ул';
													|en = 'str'") Тогда
		
		Возврат СтрШаблон("%1. %2", СведенияОбАдресе.УлицаСокращение, СведенияОбАдресе.Улица);
	КонецЕсли;
	Возврат СведенияОбАдресе.Улица;
КонецФункции

Функция ДомИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Здание.ТипЗдания)
		И СведенияОбАдресе.Здание.ТипЗдания <> НСтр("ru = 'Дом';
													|en = 'House'") Тогда
		
		Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Здание.ТипЗдания, СведенияОбАдресе.Здание.Номер);
	КонецЕсли;
	Возврат СведенияОбАдресе.Здание.Номер;
КонецФункции

Функция КорпусИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.Корпуса[0].ТипКорпуса)
			И СведенияОбАдресе.Корпуса[0].ТипКорпуса <> НСтр("ru = 'Корпус';
															|en = 'Block'") Тогда
			
			Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Корпуса[0].ТипКорпуса, СведенияОбАдресе.Корпуса[0].Номер);
		КонецЕсли;
		Возврат СведенияОбАдресе.Корпуса[0].Номер;
	КонецЕсли;
	Возврат "";
КонецФункции

Функция КвартираИзСведенийОбАдресе(СведенияОбАдресе)
	Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения) Тогда
		Если ЗначениеЗаполнено(СведенияОбАдресе.Помещения[0].ТипПомещения)
			И СведенияОбАдресе.Помещения[0].ТипПомещения <> НСтр("ru = 'Квартира';
																|en = 'Apartment'") Тогда
			
			Возврат СтрШаблон("%1 %2", СведенияОбАдресе.Помещения[0].ТипПомещения, СведенияОбАдресе.Помещения[0].Номер);
		КонецЕсли;
		Возврат СведенияОбАдресе.Помещения[0].Номер;
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#КонецЕсли