////////////////////////////////////////////////////////////////////////////////
// ОтчетностьВБанкиСлужебныйВызовСервера: Механизм отправки отчетов в банки.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет возможность отправки отчета для данной организации.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - ссылка на организацию;
//  Банк - ОпределяемыйТип.СправочникБанки - ссылка на банк;
//  ПодключенаИнтернетПоддержка - Булево - (возвращаемый параметр). Если Истина - то интернет-поддержка включена.
//  СоглашениеПринято - Булево - (возвращаемый параметр). Если Истина - то соглашение было принято пользователем.
// 
// Возвращаемое значение:
// Булево - если Истина, то отправка отчета возможна.
//
Функция ВозможнаОтправкаОтчета(Знач Организация, Знач Банк, Знач ПараметрыКлиента, ПодключенаИнтернетПоддержка = Ложь, СоглашениеПринято = Ложь) Экспорт
	
	Дата = ТекущаяДатаСеанса();
	
	РеквизитыОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Дата, "ИННЮЛ, КППЮЛ");
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ВремФайл);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("inn");
	ЗаписьJSON.ЗаписатьЗначение(РеквизитыОрганизации.ИННЮЛ);
	ЗаписьJSON.ЗаписатьИмяСвойства("kpp");
	ЗаписьJSON.ЗаписатьЗначение(РеквизитыОрганизации.КППЮЛ);
	ЗаписьJSON.ЗаписатьИмяСвойства("bic");
	ЗаписьJSON.ЗаписатьЗначение(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код"));
	
	ОтчетностьВБанкиСлужебный.ДобавитьДополнительныеПараметры(ЗаписьJSON, ПараметрыКлиента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Данные = Новый ДвоичныеДанные(ВремФайл);
	
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		ВидОперации = НСтр("ru = 'Удаление временного файла.';
							|en = 'Удаление временного файла.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Результат = ОтчетностьВБанкиСлужебный.ОтправитьЗапросНаСервер(
		"https://reportbank.1c.ru", "/api/rest/organization/check/", Заголовки, Данные, Истина, 15);
	
	Успех = Ложь;
	ТекстСообщения = ""; ТекстОшибки = "";
	
	Если Результат.Статус Тогда
		ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
		Если НЕ ДанныеОтвета = Неопределено Тогда
			Успех = ДанныеОтвета.result;
			Если Не Успех Тогда
				ТекстСообщения = НСтр("ru = 'Для указанной организации нет возможности отправлять отчеты.
											|Обратитесь в свой банк.';
											|en = 'Для указанной организации нет возможности отправлять отчеты.
											|Обратитесь в свой банк.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Результат.Тело) Тогда
			ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
			Если НЕ ДанныеОтвета = Неопределено Тогда
				Если ДанныеОтвета.Свойство("errorText") Тогда
					ТекстСообщения = ДанныеОтвета.errorText;
				Иначе
					ТекстСообщения = НСтр("ru = 'Получена неизвестная ошибка с сервиса https://reportbank.1c.ru.';
											|en = 'Получена неизвестная ошибка с сервиса https://reportbank.1c.ru.'");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных с сервиса https://reportbank.1c.ru.
								|Код состояния: %1
								|%2';
								|en = 'Ошибка получения данных с сервиса https://reportbank.1c.ru.
								|Код состояния: %1
								|%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния, Результат.Тело);
		Иначе
			ТекстСообщения = Результат.СообщениеОбОшибке;
			ТекстОшибки = НСтр("ru = 'Ошибка получения данных с сервиса https://reportbank.1c.ru.
								|Код состояния: %1';
								|en = 'Ошибка получения данных с сервиса https://reportbank.1c.ru.
								|Код состояния: %1'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) ИЛИ ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВидОперации = НСтр("ru = 'Проверка организации на сервисе https://reportbank.1c.ru.';
							|en = 'Проверка организации на сервисе https://reportbank.1c.ru.'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПодключенаИнтернетПоддержка = ОбщегоНазначения.РазделениеВключено()
		ИЛИ ДанныеАутентификации <> Неопределено;
	СоглашениеПринято = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтчетностьВБанки", "СоглашениеПринято", Ложь);
	
	Возврат Успех;
	
КонецФункции

// Выводит текст ошибки в виде сообщения и производит запись в журнал регистрации.
//
// Параметры:
//  ВидОперации - Строка - выполняемая операция
//  ПодробныйТекстОшибки - Строка - подробная информация об ошибке
//  ТекстСообщения - Строка - текст сообщения, выводимый пользователю.
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Если ЭтоПолноправныйПользователь И ЗначениеЗаполнено(ПодробныйТекстОшибки) И НЕ ПустаяСтрока(ТекстСообщения)
		И ПодробныйТекстОшибки <> ТекстСообщения Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ Нстр("ru = 'Подробности см. в журнале регистрации.';
					|en = 'Подробности см. в журнале регистрации.'");
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Если Прав(ВидОперации, 1) <> "." Тогда
		ВидОперации = ВидОперации + ".";
	КонецЕсли;
	ТекстОшибки = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
		|%2';
		|en = 'Выполнение операции: %1
		|%2'"), ВидОперации, ПодробныйТекстОшибки);
	
	ВыполнитьЗаписьСобытияВЖурналРегистрации(ТекстОшибки);
	
КонецПроцедуры

// Отправляет отчет в банк.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация;
//  Банк - ОпределяемыйТип.СправочникБанки - банк;
//  ДанныеФайл - ДвоичныеДанные - данные файла отчета;
//  ИмяФайла - Строка - имя файла документа
//  ЭлектроннаяПодпись - ДвоичныеДанные - данные электронной подписи.
//  ПараметрыКлиента - Структура - содержит параметры клиентского приложения:
//        * ТипПлатформы - Строка - тип клиентского приложения;
//        * ВерсияОС - Строка - версия ОС на клиенте;
//  Отчет - ДокументСсылка.РегламентированныйОтчет - ссылка на отправляемый отчет.
//
// Возвращаемое значение:
//  Булево - если Истина, то отчет успешно отправлен.
//
Функция ОтправитьДанныеВБанк(Знач Организация, Знач Банк, Знач ДанныеФайла, Знач ИмяФайла, Знач ЭлектроннаяПодпись, Знач ПараметрыКлиента, Знач Отчет, ДатаОтправки) Экспорт
	
	БИК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	Результат = СформироватьПакетИОтправитьДанныеВБанк(Организация, БИК, ДанныеФайла, ИмяФайла, ЭлектроннаяПодпись, ПараметрыКлиента);
	
	Если Результат.Выполнено Тогда
		
		Объект = Отчет.ПолучитьОбъект();
		Объект.Идентификатор = Результат.ИдентификаторДокумента;
		Объект.СтатусОтчета  = Результат.Статус;
		Объект.ДатаОтправки  = ДатаОтправки;
		Объект.Записать();
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьПакетИОтправитьДанныеВБанк(Знач Организация, Знач БИК, Знач ДанныеФайла, Знач ИмяФайла, Знач ЭлектроннаяПодписьПодОтчетом, Знач ПараметрыКлиента) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Выполнено", Ложь);
	ДополнительныеПараметры.Вставить("ИдентификаторДокумента", Неопределено);
	ДополнительныеПараметры.Вставить("Статус", НСтр("ru = 'Ошибка';
													|en = 'Ошибка'"));
	
	ТикетАутентификации = ТикетАутентификации();
	Если Не ЗначениеЗаполнено(ТикетАутентификации) Тогда
		Возврат ДополнительныеПараметры;
	КонецЕсли;
	
	НазваниеКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(НазваниеКаталога);
	
	НазваниеКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НазваниеКаталога);
	ВремФайлОтчет = НазваниеКаталога + ИмяФайла;
	ВремФайлЭП =  НазваниеКаталога + ИмяФайла + ".p7s";
	ДанныеФайла.Записать(ВремФайлОтчет);
	ЭлектроннаяПодписьПодОтчетом.Записать(ВремФайлЭП);
	ФайлZIP = ПолучитьИмяВременногоФайла("zip");
	
	ЗаписьZIP = Новый ЗаписьZipФайла(ФайлZIP, , , , УровеньСжатияZIP.Максимальный);
	ЗаписьZIP.Добавить(ВремФайлОтчет);
	ЗаписьZIP.Добавить(ВремФайлЭП);
	ЗаписьZIP.Записать();
	
	Попытка
		УдалитьФайлы(НазваниеКаталога);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отчетность в банки. Ошибка удаления временного каталога';
										|en = 'Отчетность в банки. Ошибка удаления временного каталога'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ДвоичныеДанныеZIP = Новый ДвоичныеДанные(ФайлZIP);
	
	Попытка
		УдалитьФайлы(ФайлZIP);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отчетность в банки. Ошибка удаления временного файла';
										|en = 'Отчетность в банки. Ошибка удаления временного файла'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Дата = ТекущаяДатаСеанса();
	РеквизитыОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Дата, "ИННЮЛ, КППЮЛ");
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ВремФайл);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("authenticationInfo");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("authToken");
	ЗаписьJSON.ЗаписатьЗначение(ТикетАутентификации);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("inn");
	ЗаписьJSON.ЗаписатьЗначение(РеквизитыОрганизации.ИННЮЛ);
	ЗаписьJSON.ЗаписатьИмяСвойства("kpp");
	ЗаписьJSON.ЗаписатьЗначение(РеквизитыОрганизации.КППЮЛ);
	ЗаписьJSON.ЗаписатьИмяСвойства("bic");
	ЗаписьJSON.ЗаписатьЗначение(БИК);
	ЗаписьJSON.ЗаписатьИмяСвойства("data");
	СтрокаДанных = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеZIP), Символы.ПС, ""), Символы.ВК, "");
	ЗаписьJSON.ЗаписатьЗначение(СтрокаДанных);
	
	ОтчетностьВБанкиСлужебный.ДобавитьДополнительныеПараметры(ЗаписьJSON, ПараметрыКлиента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	Данные = Новый ДвоичныеДанные(ВремФайл);
	
	Попытка
		УдалитьФайлы(ВремФайл);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отчетность в банки. Ошибка удаления временного файла';
										|en = 'Отчетность в банки. Ошибка удаления временного файла'"),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Результат = ОтчетностьВБанкиСлужебный.ОтправитьЗапросНаСервер(
		"https://reportbank.1c.ru", "/api/rest/report/send/", Заголовки, Данные, Истина, 300);
		
	Успех = Ложь;
	ТекстСообщения = ""; ТекстОшибки = "";
	
	Если Результат.Статус Тогда
		ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
		ИдентификаторДокумента = ДанныеОтвета.guid;
	Иначе
		Если ЗначениеЗаполнено(Результат.Тело) Тогда
			ДанныеОтвета = ОтчетностьВБанкиСлужебный.ДанныеИзСтрокиJSON(Результат.Тело);
			Если НЕ ДанныеОтвета = Неопределено Тогда
				Если ДанныеОтвета.Свойство("errorText") Тогда
					ТекстСообщения = ДанныеОтвета.errorText;
				Иначе
					ТекстСообщения = НСтр("ru = 'Получена неизвестная ошибка с сервиса https://reportbank.1c.ru.';
											|en = 'Получена неизвестная ошибка с сервиса https://reportbank.1c.ru.'");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = НСтр("ru = 'Ошибка отправки отчета на https://reportbank.1c.ru.
								|Код состояния: %1
								|%2';
								|en = 'Ошибка отправки отчета на https://reportbank.1c.ru.
								|Код состояния: %1
								|%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния, Результат.Тело);
		Иначе
			ТекстСообщения = Результат.СообщениеОбОшибке;
			ТекстОшибки = НСтр("ru = 'Ошибка отправки отчета на https://reportbank.1c.ru.
								|Код состояния: %1
								|%2';
								|en = 'Ошибка отправки отчета на https://reportbank.1c.ru.
								|Код состояния: %1
								|%2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.КодСостояния, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) ИЛИ ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВидОперации = НСтр("ru = 'Отправка отчета на https://reportbank.1c.ru.';
							|en = 'Отправка отчета на https://reportbank.1c.ru.'");
		ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
		Возврат ДополнительныеПараметры;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Выполнено", Истина);
	ДополнительныеПараметры.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ДополнительныеПараметры.Вставить("Статус", НСтр("ru = 'Отправлено';
													|en = 'Отправлено'"));
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ТикетАутентификации()
	
	Тикет          			= Неопределено;
	ПодробныйТекстОшибки	= "";
	ТекстСообщения 			= "";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("reportBank");
	
	Если ЗначениеЗаполнено(Результат.Тикет) Тогда
		Тикет = Результат.Тикет;
	Иначе
		ПодробныйТекстОшибки = Результат.ИнформацияОбОшибке;
		ТекстСообщения 		 = Результат.СообщениеОбОшибке;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодробныйТекстОшибки) ИЛИ ЗначениеЗаполнено(ТекстСообщения) Тогда
		ВидОперации = НСтр("ru = 'Ошибка аутентификации на сервисе 1С:Логин.';
							|en = 'Ошибка аутентификации на сервисе 1С:Логин.'");
		ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
	КонецЕсли;
	
	Возврат Тикет;
	
КонецФункции

Процедура ВыполнитьЗаписьСобытияВЖурналРегистрации(ОписаниеСобытия, УровеньВажности = Неопределено, РежимТранзакции = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Отчетность в банки';
						|en = 'Отчетность в банки'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УровеньВажностиСобытия = ?(ТипЗнч(УровеньВажности) = Тип("УровеньЖурналаРегистрации"),
		УровеньВажности, УровеньЖурналаРегистрации.Ошибка);
	
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньВажностиСобытия, , , ОписаниеСобытия, РежимТранзакции);
	
КонецПроцедуры

Функция СведенияОСбоеОтправкиОтчетностиВСбербанк() Экспорт
	
	ОписаниеСбоя = "";
	
	ПользовательМожетНастраиватьОтправку = РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности");
		
	Если НЕ ПользовательМожетНастраиватьОтправку Тогда
		Возврат ОписаниеСбоя;
	КонецЕсли;
	
	ЗапросПоНастройкам = Новый Запрос;
	ЗапросПоНастройкам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОтправкиОтчетностиВБанк.Организация КАК Организация,
		|	НастройкиОтправкиОтчетностиВБанк.ОтправлятьОтчеты КАК Транзакции,
		|	НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВ КАК ОСВ,
		|	НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВПоСчетам КАК ОСВПоСчетам,
		|	НастройкиОтправкиОтчетностиВБанк.ОтправлятьАнализыСчетов КАК АнализыСчетов,
		|	ЛОЖЬ КАК ЗаданиеВключено
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиОтчетностиВБанк КАК НастройкиОтправкиОтчетностиВБанк
		|ГДЕ
		|	(НастройкиОтправкиОтчетностиВБанк.ОтправлятьОтчеты
		|			ИЛИ НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВПоСчетам
		|			ИЛИ НастройкиОтправкиОтчетностиВБанк.ОтправлятьОСВ
		|			ИЛИ НастройкиОтправкиОтчетностиВБанк.ОтправлятьАнализыСчетов)";
	
	РезультатЗапроса = ЗапросПоНастройкам.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НастройкиПоОрганизациям = РезультатЗапроса.Выгрузить();
		ПрочитатьНастройкиРегламентныхЗаданийОтправки(НастройкиПоОрганизациям);
		
		ПодключенныеОрганизации = Новый Массив;
		ВыявитьОтключенныеРегламентныеЗадания(ОписаниеСбоя, НастройкиПоОрганизациям, ПодключенныеОрганизации);
		
		ПроверитьСостояниеПоследнихПередачОтчетности(ОписаниеСбоя, ПодключенныеОрганизации);
		
	КонецЕсли;
	
	Возврат ОписаниеСбоя;
	
КонецФункции

Процедура ПрочитатьНастройкиРегламентныхЗаданийОтправки(НастройкиПоОрганизациям)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Метаданные", "ОтправкаОтчетностиВБанк");
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого РегЗадание Из Задания Цикл
		Если РегЗадание.Параметры.Количество() > 0 Тогда
			Организация = РегЗадание.Параметры[0];
			СтрокаНастройки = НастройкиПоОрганизациям.Найти(Организация, "Организация");
			Если СтрокаНастройки <> Неопределено Тогда
				СтрокаНастройки.ЗаданиеВключено = РегЗадание.Использование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыявитьОтключенныеРегламентныеЗадания(ОписаниеСбоя, НастройкиПоОрганизациям, ПодключенныеОрганизации)
	
	Для Каждого СтрокаНастройки Из НастройкиПоОрганизациям Цикл
		Если СтрокаНастройки.ЗаданиеВключено Тогда
			ПодключенныеОрганизации.Добавить(СтрокаНастройки.Организация);
		Иначе
			ОписаниеСбоя = ДополнитьПереводомСтроки(ОписаниеСбоя)
				+ СтрШаблон(НСтр("ru = 'Отключено регламентное задание отправки отчетности в Сбербанк от %1';
								|en = 'Отключено регламентное задание отправки отчетности в Сбербанк от %1'"), СтрокаНастройки.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСостояниеПоследнихПередачОтчетности(ОписаниеСбоя, ПодключенныеОрганизации)
	
	ЗапросПоОтправкам = Новый Запрос;
	ЗапросПоОтправкам.Текст =
		"ВЫБРАТЬ
		|	ЖурналПередачиОтчетностиВБанк.Организация КАК Организация,
		|	МАКСИМУМ(ЖурналПередачиОтчетностиВБанк.ДатаОтправки) КАК ДатаОтправки
		|ПОМЕСТИТЬ ВТ_ПоследниеОтправки
		|ИЗ
		|	РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|ГДЕ
		|	ЖурналПередачиОтчетностиВБанк.Организация В(&ПодключенныеОрганизации)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналПередачиОтчетностиВБанк.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеОтправки.Организация КАК Организация,
		|	ВТ_ПоследниеОтправки.ДатаОтправки КАК ДатаОтправки,
		|	ЖурналПередачиОтчетностиВБанк.Состояние КАК Состояние
		|ИЗ
		|	ВТ_ПоследниеОтправки КАК ВТ_ПоследниеОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналПередачиОтчетностиВБанк КАК ЖурналПередачиОтчетностиВБанк
		|		ПО ВТ_ПоследниеОтправки.Организация = ЖурналПередачиОтчетностиВБанк.Организация
		|			И ВТ_ПоследниеОтправки.ДатаОтправки = ЖурналПередачиОтчетностиВБанк.ДатаОтправки";
	
	ЗапросПоОтправкам.УстановитьПараметр("ПодключенныеОрганизации", ПодключенныеОрганизации);
	
	СтатусОшибка = НСтр("ru = 'Ошибка';
						|en = 'Ошибка'");
	СтатусНачато = НСтр("ru = 'Начато';
						|en = 'Начато'");
	ОжидаемыйПределЗавершенияОтправки = ТекущаяДатаСеанса() - 4 * 60 * 60;
	
	ВыборкаПоСостоянию = ЗапросПоОтправкам.Выполнить().Выбрать();
	Пока ВыборкаПоСостоянию.Следующий() Цикл
		Если (ВыборкаПоСостоянию.Состояние = СтатусНачато И ВыборкаПоСостоянию.ДатаОтправки < ОжидаемыйПределЗавершенияОтправки)
		 ИЛИ (ВыборкаПоСостоянию.Состояние = СтатусОшибка) Тогда
			ОписаниеСбоя = ДополнитьПереводомСтроки(ОписаниеСбоя)
				+ СтрШаблон(НСтр("ru = 'Ошибка отправки отчетности в Сбербанк от %1';
								|en = 'Ошибка отправки отчетности в Сбербанк от %1'"), ВыборкаПоСостоянию.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьПереводомСтроки(Знач ДополняемаяСтрока)
	
	Если ЗначениеЗаполнено(ДополняемаяСтрока) Тогда
		ДополняемаяСтрока = ДополняемаяСтрока + Символы.ПС;
	КонецЕсли;
	
	Возврат ДополняемаяСтрока;
	
КонецФункции

#КонецОбласти
