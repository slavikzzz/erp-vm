////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции интерфейсов взаимодействия БРО
// с другими библиотеками/конфигурациями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Предназначена для получения сведений об уполномоченном представителе организации в налоговом органе.
// Параметры:
//	 РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - должно быть непустым значением.
//	 ДатаПодписи - дата - дата, по состоянию на которую будут читаться данные представителя-физлица.
//
// Возвращаемое значение: 
//   Структура - структура с полями: 
//	   * ТипПодписанта - строка со значениями "1", "2";
//	   * ПредставительЮрЛицо - Булево - признак представителя юр. лица; 
//	   * НаименованиеОрганизацииПредставителя - Строка - наименование организации представителя;
//	   * ДокументПредставителя - Строка - документ представителя;
//	   * Фамилия - Строка - фамилия;
//	   * Имя - Строка - имя;
//	   * Отчество - Строка - отчество;
//	   * ФИОПредставителя - Строка - ФИО представителя.
//
Функция СведенияОПредставителеПоРегистрацииВНалоговомОргане(РегистрацияВНалоговомОргане, ДатаПодписи) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПодписанта", "1");
	Результат.Вставить("ПредставительЮрЛицо", Истина);
	Результат.Вставить("НаименованиеОрганизацииПредставителя", "");
	Результат.Вставить("ДокументПредставителя", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("ФИОПредставителя", "");

	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Представитель, УполномоченноеЛицоПредставителя, ДокументПредставителя");
	
	Если НЕ ЗначениеЗаполнено(ДанныеРегистрации.Представитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Представитель = ДанныеРегистрации.Представитель;
	Результат.Вставить("ТипПодписанта", "2");
	
	Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		
		ИмяПоля = ?(Представитель.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено, "НаименованиеПолное", "Наименование");
		Результат.Вставить("НаименованиеОрганизацииПредставителя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Представитель, ИмяПоля));
		Результат.Вставить("ФИОПредставителя", СокрЛП(ДанныеРегистрации.УполномоченноеЛицоПредставителя));
		СтрокиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеРегистрации.УполномоченноеЛицоПредставителя, " ");
		
		Если СтрокиФИО.Количество() > 0 Тогда
			
			Результат.Фамилия = СокрЛП(СтрокиФИО[0]);
			
			Если СтрокиФИО.Количество() > 1 Тогда
				
				Результат.Имя = СокрЛП(СтрокиФИО[1]);
				
				Если СтрокиФИО.Количество() > 2 Тогда
					
					Для ИндСтроки = 2 По СтрокиФИО.ВГраница() Цикл
						Результат.Отчество = Результат.Отчество + ?(ЗначениеЗаполнено(Результат.Отчество), " ", "") + СтрокиФИО[ИндСтроки]
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Результат.Вставить("ПредставительЮрЛицо", Ложь);
		ЗаполнитьЗначенияСвойств(Результат, РегламентированнаяОтчетность.ПолучитьФИОФизЛица(Представитель, ДатаПодписи));
		Результат.Вставить("ФИОПредставителя", СокрЛП(СокрЛП(Результат.Фамилия) + " " + СокрЛП(Результат.Имя) + " " + СокрЛП(Результат.Отчество)));
		
	КонецЕсли;
	
	Результат.Вставить("ДокументПредставителя", ДанныеРегистрации.ДокументПредставителя);
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату подключения учетной записи документооборота для организации или наименьшую дату одобрения заявления.
Функция ДатаПодключения1СОтчетности(Организация) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Организация,
			"ВидОбменаСКонтролирующимиОрганами, УчетнаяЗаписьОбмена");
		
		Если РеквизитыОрганизации.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
			ИЛИ НЕ ЗначениеЗаполнено(РеквизитыОрганизации.УчетнаяЗаписьОбмена) Тогда
			
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыОрганизации.УчетнаяЗаписьОбмена,
			"ДатаПодключения");
		
		ДатаПодключенияИзЗаявления = Неопределено;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ДатаПолученияОтвета КАК ДатаПолученияОтвета
			|ИЗ
			|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
			|ГДЕ
			|	ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
			|	И ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено)
			|	И ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
			|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
			|УПОРЯДОЧИТЬ ПО
			|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаПолученияОтвета");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаПодключенияИзЗаявления = Выборка.ДатаПолученияОтвета;
			
			Если НЕ ЗначениеЗаполнено(Результат)
			ИЛИ (ЗначениеЗаполнено(ДатаПодключенияИзЗаявления) И ДатаПодключенияИзЗаявления < Результат) Тогда
				Результат = ДатаПодключенияИзЗаявления;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для получения информации о регистрации заявления о ввозе товаров в налоговом органе.
// Параметры:
//	 ЗаявлениеОВвозеТоваровИлиМассив - ДокументСсылка.ЗаявлениеОВвозеТоваров, Массив.
//
// Возвращаемое значение:
//   Структура, Массив:
//	   * Выполнено              - Булево - если Истина, то функция успешно выполнена и получен результат, иначе см. ОписаниеОшибки.
//	   * ОписаниеОшибки         - Строка - описание ошибки (недостаточно прав, некорректная структура квитанции).
//	   * ЗаявлениеОВвозеТоваров - ДокументСсылка.ЗаявлениеОВвозеТоваров.
//	   * ЕстьКвитанцияОПриеме   - Булево.
//	   * РегНом                 - Строка - регистрационный номер заявления, присвоенный налоговым органом, регламентирован формат
//	                                       до 16 символов.
//	   * ДатаРег                - Строка - дата регистрации заявления в налоговом органе, регламентирован формат ДД.ММ.ГГГГ.
//
Функция СведенияКвитанцииОПриемеЗаявления(ЗаявлениеОВвозеТоваровИлиМассив) Экспорт
	
	МассивРезультатов = Новый Массив;
	ЭтоМассивСсылок = (ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("Массив")
		ИЛИ ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("ФиксированныйМассив")
		ИЛИ ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("СписокЗначений"));
	МассивЗаявленийОВвозеТоваров = ?(ЭтоМассивСсылок, ЗаявлениеОВвозеТоваровИлиМассив,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаявлениеОВвозеТоваровИлиМассив));
	
	ИменаСвойствКвитанции = Новый Массив;
	ИменаСвойствКвитанции.Добавить("РегНом");
	ИменаСвойствКвитанции.Добавить("ДатаРег");
	
	ИменаСвойствКвитанцииВРег = Новый Массив;
	Для каждого ИмяСвойстваКвитанции Из ИменаСвойствКвитанции Цикл
		ИмяСвойстваКвитанцииВРег = ВРег(ИмяСвойстваКвитанции);
		ИменаСвойствКвитанцииВРег.Добавить(ИмяСвойстваКвитанцииВРег);
	КонецЦикла;
	
	ИндексЗаявленияОВвозеТоваров = -1;
	КонтекстЭДО = Неопределено;
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	
	Для каждого ЗаявлениеОВвозеТоваров Из МассивЗаявленийОВвозеТоваров Цикл
		СсылкаНаЗаявлениеОВвозеТоваров = ?(ТипЗнч(ЗаявлениеОВвозеТоваровИлиМассив) = Тип("СписокЗначений"),
			ЗаявлениеОВвозеТоваров.Значение, ЗаявлениеОВвозеТоваров);
		ИндексЗаявленияОВвозеТоваров = ИндексЗаявленияОВвозеТоваров + 1;
		
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", 				Ложь);
		Результат.Вставить("ОписаниеОшибки", 			"");
		Результат.Вставить("ЗаявлениеОВвозеТоваров", 	СсылкаНаЗаявлениеОВвозеТоваров);
		Результат.Вставить("ЕстьКвитанцияОПриеме", 		Ложь);
		Для каждого ИмяСвойстваКвитанции Из ИменаСвойствКвитанции Цикл
			Результат.Вставить(ИмяСвойстваКвитанции, Неопределено);
		КонецЦикла;
		
		// получаем вложение транспортного сообщения результата приема последней отправки
		
		Если ИндексЗаявленияОВвозеТоваров = 0 Тогда
			КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
		КонецЕсли;
		Если КонтекстЭДО = Неопределено Тогда
			Результат.ОписаниеОшибки = ТекстСообщенияПолучитьОбработкуЭДО;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Отправка = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаЗаявлениеОВвозеТоваров);
		Если НЕ ЗначениеЗаполнено(Отправка) Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Сообщения = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(Отправка, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
		Если Сообщения.Количество() = 0 Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		СсылкаНаСообщение = Сообщения[0].Ссылка;
		
		Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СсылкаНаСообщение, Истина,
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриемеЗаявления);
		Если Вложения.Количество() = 0 Тогда
			Результат.Выполнено = Истина;
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Результат.ЕстьКвитанцияОПриеме = Истина;
		ДанныеВложения = Вложения[0].Данные;
		
		ФайлВложения = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеВложения = ДанныеВложения.Получить();
		Если ДвоичныеДанныеВложения = Неопределено Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML квитанции о приеме: пустое содержимое квитанции.';
											|en = 'Ошибка разбора XML квитанции о приеме: пустое содержимое квитанции.'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		ДвоичныеДанныеВложения.Записать(ФайлВложения);
		
		// загружаем и анализируем XML
		
		ОписаниеОшибки = "";
		ДеревоXML = КонтекстЭДО.ЗагрузитьXMLВДеревоЗначений(ФайлВложения,, ОписаниеОшибки);
		Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
			Результат.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка разбора XML квитанции о приеме:%1';
					|en = 'Ошибка разбора XML квитанции о приеме:%1'"),
				Символы.ПС + ОписаниеОшибки);
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Файл"".';
											|en = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Файл"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Документ"".';
											|en = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""Документ"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		УзелСвКвит = УзелДокумент.Строки.Найти("СвКвит", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелСвКвит) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""СвКвит"".';
											|en = 'Некорректная структура XML квитанции о приеме: не обнаружен узел ""СвКвит"".'");
			МассивРезультатов.Добавить(Результат);
			Продолжить;
		КонецЕсли;
		
		Результат.Выполнено = Истина;
		
		// разбираем узел с общими сведениями
		
		Для каждого УзелОбщСвед Из УзелСвКвит.Строки Цикл
			ИмяСвойстваКвитанцииВРег = ВРег(УзелОбщСвед.Имя);
			Если ИменаСвойствКвитанцииВРег.Найти(ИмяСвойстваКвитанцииВРег) <> Неопределено Тогда
				ЗначениеСвойстваКвитанции = СокрЛП(УзелОбщСвед.Значение);
				Результат.Вставить(УзелОбщСвед.Имя, ЗначениеСвойстваКвитанции);
			КонецЕсли;
		КонецЦикла;
		
		МассивРезультатов.Добавить(Результат);
	КонецЦикла;
	
	Возврат ?(ЭтоМассивСсылок, МассивРезультатов, МассивРезультатов[0]);
	
КонецФункции

// Предназначена для получения квитанций и протоколов отчета.
// Параметры:
//   СсылкаНаОтчет - Ссылка из определяемого типа ПредметЦиклаОбмена - например,
//                                            ДокументСсылка.РегламентированныйОтчет,
//                                            СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов,
//                                            ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
//   ТипТранспортногоСообщения - Перечисления.ТипыТранспортныхСообщений - например,
//                                            Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
//                             - Строка - контролирующий орган и имя поля объекта отправки, например "ФССКвитанция",
//                                        значение ТипыСодержимогоТранспортногоКонтейнера в этом случае не учитывается
//   ТипыСодержимогоТранспортногоКонтейнера - Перечисления.ТипыСодержимогоТранспортногоКонтейнера - например,
//                                            Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР
//                                            для получения XML протокола СЗВ-ТД,
//                                            Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР
//                                            для получения XML и HTML приложений к протоколу СЗВ-М
//
// Возвращаемое значение:
//   Структура:
//     * Выполнено      - Булево          - если Истина, то функция успешно выполнена, иначе см. ОписаниеОшибки.
//     * ОписаниеОшибки - Строка          - описание ошибки, например, недостаточно прав.
//     * Сведения       - ТаблицаЗначений - содержимое РегистрСведений.СодержимоеТранспортныхКонтейнеров,
//                                          основные колонки (при строковом значении параметра "ТипТранспортногоСообщения"
//                                          возващается одна запись только с этими колонками):
//                                          ИмяФайла - Строка
//                                          ВАрхиве  - Булкво - при Истина содерджмое недоступно
//                                          Данные   - ХранилищеЗначения - ДвоичныеДанные квитанции/протокола
//                                          ТипСодержимогоФайла - Перечисления.ТипыСодержимогоФайлов - например,
//                                            Перечисления.ТипыСодержимогоФайлов.Xml
//                                          Содержимое - колонка присутствует при строковом значении параметра
//                                            "ТипТранспортногоСообщения", при значении "ФССКвитанция" для реестра
//                                            стимулирующих выплат медицинским и социальным работникам содержит
//                                            структуру:
//                                              ИдентификаторОтправки - Строка - значение узла "recriveID",
//                                              СтатусОбработки - Число - значение узла "statusGeneral",
//                                              ДатаВремяОбработки - Дата - значение узла "dateTimeReceive",
//                                              СообщенияОбОшибках - Строка - все сообщения из узла "firstErrorList"
//                                              с кодами ошибок в скобках, разделенные переводами строк,
//                                              ОшибкиПервичнойОбработки - Массив - из узла "firstErrorList":
//                                                КодОшибки - Строка - узел "errorCode",
//                                                ОписаниеОшибки - Строка - узел "errorDescription",
//                                              ПротоколОбработки - Массив - из узла "protocol" - "failedList" - 
//                                              "failedBatchNoDetail":
//                                                НомерЗаписи - Строка - узел "batchNo",
//                                                ОшибкиОбработки - Массив - из узла "errorList":
//                                                  КодОшибки - Строка - узел "errorCode",
//                                                  ОписаниеОшибки - Строка - узел "errorDescription".
//
Функция СведенияКвитанцийОтчета(
		СсылкаНаОтчет,
		ТипТранспортногоСообщения,
		ТипыСодержимогоТранспортногоКонтейнера = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 		Ложь);
	Результат.Вставить("Сведения", 			Неопределено);
	Результат.Вставить("ОписаниеОшибки", 	"");
	
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДО = Неопределено Тогда
		Результат.ОписаниеОшибки = ТекстСообщенияПолучитьОбработкуЭДО;
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ТипТранспортногоСообщения) = Тип("Строка") И (ВРег(Лев(ТипТранспортногоСообщения, 3)) = "ФСС"
		ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 5)) = "ФСРАР" ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 3)) = "РПН"
		ИЛИ ВРег(Лев(ТипТранспортногоСообщения, 3)) = "ФТС") Тогда
		
		ДлинаПрефикса = ?(ВРег(Лев(ТипТранспортногоСообщения, 5)) = "ФСРАР", 5, 3);
		КонтролирующийОрган = Лев(ТипТранспортногоСообщения, ДлинаПрефикса);
		РеквизитОтправки = Сред(ТипТранспортногоСообщения, ДлинаПрефикса + 1);
		
		ПоследняяОтправка = КонтекстЭДО.ПолучитьПоследнююОтправкуОтчета(КонтролирующийОрган, СсылкаНаОтчет);
		Если ЗначениеЗаполнено(ПоследняяОтправка) Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоследняяОтправка, РеквизитОтправки
				+ ", ВидОтчета");
			Результат.Сведения = Новый ТаблицаЗначений;
			Результат.Сведения.Колонки.Добавить("ИмяФайла");
			Результат.Сведения.Колонки.Добавить("ВАрхиве");
			Результат.Сведения.Колонки.Добавить("Данные");
			Результат.Сведения.Колонки.Добавить("ТипСодержимогоФайла");
			Результат.Сведения.Колонки.Добавить("Содержимое");
			
			СтрокаСведений = Результат.Сведения.Добавить();
			СтрокаСведений.ИмяФайла = РеквизитОтправки;
			СтрокаСведений.ВАрхиве = Ложь;
			СтрокаСведений.Данные = ЗначенияРеквизитов[РеквизитОтправки];
			СтрокаСведений.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.Xml;
			СтрокаСведений.Содержимое = Неопределено;
			
			Если ВРег(РеквизитОтправки) = ВРег("Квитанция") И ЗначенияРеквизитов.ВидОтчета =
				Справочники.ВидыОтправляемыхДокументов.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам Тогда
				
				ДвоичныеДанныеРезультата = ЗначенияРеквизитов[РеквизитОтправки].Получить();
				ТекстРезультата = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеРезультата);
				СтрокаСведений.Содержимое =
					КонтекстЭДО.РезультатыОтправкиРеестраСтимулирующихВыплатМедицинскимИСоциальнымРаботникам(ТекстРезультата);
			КонецЕсли;
		КонецЕсли;
		
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Отправка = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(Отправка) Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Сообщения = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(Отправка, ТипТранспортногоСообщения);
	Если Сообщения.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	СсылкаНаСообщение = Сообщения[0].Ссылка;
	
	Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СсылкаНаСообщение, Истина,
		ТипыСодержимогоТранспортногоКонтейнера);
	Если Вложения.Количество() = 0 Тогда
		Результат.Выполнено = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.Сведения = Вложения;
	Возврат Результат;
	
КонецФункции

// Возвращает форму для уведомления
// Например: Отчет.РегламентированноеУведомлениеЛьготаТранспортЗемля.Форма.Форма2019_1
// Параметры:
//              ВидУведомления - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения.
//              ДатаСведений - Дата, на какую дату нужна форма
Функция ПолучитьИмяФормыУведомленияПоУмолчанию(ВидУведомления, ДатаСведений) Экспорт 
	Попытка
		ОтчетИмя = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ПолучитьСоответствиеВидовУведомленийИменамОтчетов()[ВидУведомления];
		ТаблицаФорм = Отчеты[ОтчетИмя].ПолучитьТаблицуФорм();
		Если ТаблицаФорм.Количество() = 1 Тогда 
			Возврат "Отчет." + ОтчетИмя + ".Форма." + ТаблицаФорм[0].ИмяФормы;
		ИначеЕсли ТаблицаФорм.Количество() = 0 Тогда 
			Возврат Отчеты[ОтчетИмя].ПолучитьФормуПоУмолчанию();
		Иначе
			ИмяФормы = "";
			Для Каждого Стр Из ТаблицаФорм Цикл 
				Если (ЗначениеЗаполнено(Стр.ДатаНачала) И Стр.ДатаНачала > ДатаСведений)
					Или (ЗначениеЗаполнено(Стр.ДатаКонца) И Стр.ДатаКонца < ДатаСведений) Тогда 

					Продолжить;
				КонецЕсли;
				ИмяФормы = Стр.ИмяФормы;
			КонецЦикла;

			Возврат "Отчет." + ОтчетИмя + ".Форма." + ИмяФормы;
		КонецЕсли;
	Исключение
		Возврат "";
	КонецПопытки;
КонецФункции

// Получает процедуры таможенного декларирования товаров с сайта ФТС.
//
// Параметры:
//   ПараметрыОтправки - Структура - параметр структуры "ПараметрыОтправки", возвращаемый процедурой
//                                   ИнтерфейсыВзаимодействияБРОКлиент.ПолучитьПроцедурыДекларированияФТС
//                                   при РежимыРаботы.ТолькоПолучитьНастройки = Истина;
//   ПараметрыСоединения - Структура - параметр структуры "ПараметрыСоединения", возвращаемый процедурой
//                                   ИнтерфейсыВзаимодействияБРОКлиент.ПолучитьПроцедурыДекларированияФТС
//                                   при РежимыРаботы.ТолькоПолучитьНастройки = Истина.
//
// Возвращаемое значение:
//   Массив из структур с процедурами декларирования для передачи в процедуру
//   ИнтерфейсыВзаимодействияБРОКлиент.ОбработатьРезультатыПолученияПроцедурДекларированияФТС.
//
Функция ПолучитьПроцедурыДекларированияФТСССервера(Знач ПараметрыОтправки, ПараметрыСоединения) Экспорт
	
	Результат = Неопределено;
	ТекстСообщенияПолучитьОбработкуЭДО = "";
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
	Если КонтекстЭДО <> Неопределено Тогда
		Результат = КонтекстЭДО.ПолучитьПроцедурыДекларированияФТСССервера(ПараметрыОтправки, ПараметрыСоединения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Предназначена для получения квитанции о присвоении регистрационного номера партии товара.
// Параметры:
//   СсылкаНаОтчетИлиДанныеКвитанции - Ссылка из определяемого типа ПредметЦиклаОбмена - например, ссылка, возвращенная
//                                     ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//                                   - ДвоичныеДанные - данные квитанции о присвоении РНПТ с КНД 1169012
//   СтатусОтправки                  - Перечисления.СтатусыОтправки - например, статус, возвращаемый
//                                     ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента
//                                   - Неопределено - не используется при предаче двоичных данных квитанции.
//
// Возвращаемое значение:
//   Структура:
//     * ЭтоКвитанцияОПрисвоенииРНПТ - Булево          - при значении Истина заполняются остальные поля,
//     * НомерУведомления            - Строка          - номер уведомления об остатках прослеживаемого товара,
//     * ДатаУведомления             - Дата            - дата уведомления об остатках прослеживаемого товара,
//     * ДанныеКвитанции             - ДволичныеДанные - данные квитанции о присвоении РНПТ с КНД 1169012,
//     * Квитанция                   - Структура       - содержимое квитанции о присвоении РНПТ с КНД 1169012:
//       ** ДатаДокумента                - Дата   - дата формирования документа,
//       ** РНПТ                         - Строка - регистрационный номер партии товара,
//       ** ВидДокумента                 - Строка - "Уведомление об имеющихся остатках товаров, подлежащих прослеживаемости"
//                                                  или "Уведомление о ввозе товаров, подлежащих прослеживаемости, с
//                                                  территории другого государства-члена Евразийского экономического
//                                                  союза на территорию Российской Федерации и иные территории,
//                                                  находящиеся под ее юрисдикцией",
//       ** НомерУведомления             - Строка,
//       ** ДатаУведомления              - Дата,
//       ** НаименованиеСобственника     - Строка - наименование собственника товара, если это организация,
//       ** ИННСобственника              - Строка - ИНН собственника товара, если это организация,
//       ** КППСобственника              - Строка - КПП собственника товара, если это организация,
//       ** ИННФЛСобственника            - Строка - ИНН собственника товара, если это физическое лицо,
//       ** ФамилияСобственника          - Строка - фамилия собственника товара, если это физическое лицо,
//       ** ИмяСобственника              - Строка - имя собственника товара, если это физическое лицо,
//       ** ОтчествоСобственника         - Строка - отчество собственника товара, если это физическое лицо,
//       ** КодыОшибок                   - Массив - строки кодов ошибок,
//     * ОписаниеОшибки              - Строка          - описание ошибки извлечения данных квитанции, например, из-за
//                                                       недостаточности прав на документооборот с гос.органами.
//
Функция СведенияОПрисвоенииРНПТ(СсылкаНаОтчетИлиДанныеКвитанции, СтатусОтправки = Неопределено) Экспорт
	
	Квитанция = Новый Структура;
	Квитанция.Вставить("ДатаДокумента", 				Неопределено);
	Квитанция.Вставить("РНПТ", 							"");
	Квитанция.Вставить("ВидУведомления", 				"");
	Квитанция.Вставить("НомерУведомления", 				"");
	Квитанция.Вставить("ДатаУведомления", 				Неопределено);
	Квитанция.Вставить("НаименованиеСобственника", 		"");
	Квитанция.Вставить("ИННСобственника", 				"");
	Квитанция.Вставить("КППСобственника", 				"");
	Квитанция.Вставить("ИННФЛСобственника", 			"");
	Квитанция.Вставить("ФамилияСобственника", 			"");
	Квитанция.Вставить("ИмяСобственника", 				"");
	Квитанция.Вставить("ОтчествоСобственника", 			"");
	Квитанция.Вставить("КодыОшибок", 					Новый Массив);
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоКвитанцияОПрисвоенииРНПТ", 	Ложь);
	Результат.Вставить("НомерУведомления", 				"");
	Результат.Вставить("ДатаУведомления", 				Неопределено);
	Результат.Вставить("ДанныеКвитанции", 				Неопределено);
	Результат.Вставить("Квитанция", 					Квитанция);
	Результат.Вставить("ОписаниеОшибки", 				"");
	
	Если ТипЗнч(СсылкаНаОтчетИлиДанныеКвитанции) = Тип("СправочникСсылка.ОписиВходящихДокументовИзНалоговыхОрганов")
		И СтатусОтправки = Перечисления.СтатусыОтправки.Доставлен Тогда
		
		Для каждого ВходящийДокумент Из СсылкаНаОтчетИлиДанныеКвитанции.ВходящиеДокументы Цикл
			ДокументРеализацииПолномочийНО = ВходящийДокумент.СсылкаНаОбъект;
			Если ТипЗнч(ДокументРеализацииПолномочийНО) =
				Тип("СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов") Тогда
				
				Если ДокументРеализацииПолномочийНО.ВидДокумента =
					Перечисления.ВидыНалоговыхДокументов.КвитанцияОПрисвоенииРНПТ Тогда
					
					Результат.ЭтоКвитанцияОПрисвоенииРНПТ = Истина;
					Результат.НомерУведомления = ДокументРеализацииПолномочийНО.НомерДокумента;
					Результат.ДатаУведомления = ДокументРеализацииПолномочийНО.ДатаДокумента;
					
					УстановитьПривилегированныйРежим(Истина);
					
					СведенияКвитанций = СведенияКвитанцийОтчета(
						СсылкаНаОтчетИлиДанныеКвитанции,
						Перечисления.ТипыТранспортныхСообщений.ДокументНО,
						Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
					
					УстановитьПривилегированныйРежим(Ложь);
					
					Если СведенияКвитанций.Выполнено И СведенияКвитанций.Сведения <> Неопределено Тогда
						Для каждого СведенияКвитанции Из СведенияКвитанций.Сведения Цикл
							Если СведенияКвитанции.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.Xml Тогда
								Результат.ДанныеКвитанции = СведенияКвитанции.Данные.Получить();
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						Результат.ОписаниеОшибки = СведенияКвитанций.ОписаниеОшибки;
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СсылкаНаОтчетИлиДанныеКвитанции) = Тип("ДвоичныеДанные") Тогда
		Результат.ЭтоКвитанцияОПрисвоенииРНПТ = Истина;
		Результат.ДанныеКвитанции = СсылкаНаОтчетИлиДанныеКвитанции;
	КонецЕсли;
	
	Если Результат.ДанныеКвитанции <> Неопределено Тогда
		КорневойУзелОбъекта = Неопределено;
		ИмяФайлаXML = ПолучитьИмяВременногоФайла("xml");
		Попытка
			Результат.ДанныеКвитанции.Записать(ИмяФайлаXML);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаXML);
			ЧтениеXML.ПерейтиКСодержимому();
			
			КорневойУзелОбъекта = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Сведения о присвоении РНПТ';
								|en = 'Электронный документооборот с контролирующими органами. Сведения о присвоении РНПТ'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия ,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставление);
		КонецПопытки;
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайлаXML);
		
		Если КорневойУзелОбъекта <> Неопределено И КорневойУзелОбъекта.Свойства().Получить("Документ") <> Неопределено Тогда
			УзелДокумент = КорневойУзелОбъекта.Документ;
			
			Если УзелДокумент.Свойства().Получить("ДатаДок") <> Неопределено И ЗначениеЗаполнено(УзелДокумент.ДатаДок) Тогда
				ДатаСтрокой = XMLЗначение(Тип("Строка"), УзелДокумент.ДатаДок);
				Результат.Квитанция.ДатаДокумента = ДатаВремяИзСтрокиXML(ДатаСтрокой);
			КонецЕсли;
			
			Если УзелДокумент.Свойства().Получить("КвРегНом") <> Неопределено Тогда
				УзелКвРегНом = УзелДокумент.КвРегНом;
				
				Если УзелКвРегНом.Свойства().Получить("РегНом") <> Неопределено Тогда
					Результат.Квитанция.РНПТ = XMLЗначение(Тип("Строка"), УзелКвРегНом.РегНом);
					Результат.Квитанция.РНПТ = СокрЛП(Результат.Квитанция.РНПТ);
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("ВидДок") <> Неопределено Тогда
					Результат.Квитанция.ВидУведомления = XMLЗначение(Тип("Строка"), УзелКвРегНом.ВидДок);
					Результат.Квитанция.ВидУведомления = СокрЛП(Результат.Квитанция.ВидУведомления);
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("НомУвед") <> Неопределено Тогда
					Результат.Квитанция.НомерУведомления = XMLЗначение(Тип("Строка"), УзелКвРегНом.НомУвед);
					Результат.Квитанция.НомерУведомления = СокрЛП(Результат.Квитанция.НомерУведомления);
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("ДатаУвед") <> Неопределено
					И ЗначениеЗаполнено(УзелКвРегНом.ДатаУвед) Тогда
					ДатаСтрокой = XMLЗначение(Тип("Строка"), УзелКвРегНом.ДатаУвед);
					Результат.Квитанция.ДатаУведомления = ДатаВремяИзСтрокиXML(ДатаСтрокой);
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("СобЮЛ") <> Неопределено Тогда
					УзелСобЮЛ = УзелКвРегНом.СобЮЛ;
					
					Если УзелСобЮЛ.Свойства().Получить("НаимСоб") <> Неопределено Тогда
						Результат.Квитанция.НаименованиеСобственника = XMLЗначение(Тип("Строка"), УзелСобЮЛ.НаимСоб);
						Результат.Квитанция.НаименованиеСобственника = СокрЛП(Результат.Квитанция.НаименованиеСобственника);
					КонецЕсли;
					
					Если УзелСобЮЛ.Свойства().Получить("ИННЮЛ") <> Неопределено Тогда
						Результат.Квитанция.ИННСобственника = XMLЗначение(Тип("Строка"), УзелСобЮЛ.ИННЮЛ);
						Результат.Квитанция.ИННСобственника = СокрЛП(Результат.Квитанция.ИННСобственника);
					КонецЕсли;
					
					Если УзелСобЮЛ.Свойства().Получить("КПП") <> Неопределено Тогда
						Результат.Квитанция.КППСобственника = XMLЗначение(Тип("Строка"), УзелСобЮЛ.КПП);
						Результат.Квитанция.КППСобственника = СокрЛП(Результат.Квитанция.КППСобственника);
					КонецЕсли;
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("СобИП") <> Неопределено Тогда
					УзелСобИП = УзелКвРегНом.СобИП;
					
					Если УзелСобИП.Свойства().Получить("ИННФЛ") <> Неопределено Тогда
						Результат.Квитанция.ИННФЛСобственника = XMLЗначение(Тип("Строка"), УзелСобИП.ИННФЛ);
						Результат.Квитанция.ИННФЛСобственника = СокрЛП(Результат.Квитанция.ИННФЛСобственника);
					КонецЕсли;
					
					Если УзелСобИП.Свойства().Получить("ФИО") <> Неопределено Тогда
						УзелФИО = УзелСобИП.ФИО;
						
						Если УзелФИО.Свойства().Получить("Фамилия") <> Неопределено Тогда
							Результат.Квитанция.ФамилияСобственника = XMLЗначение(Тип("Строка"), УзелФИО.Фамилия);
							Результат.Квитанция.ФамилияСобственника = СокрЛП(Результат.Квитанция.ФамилияСобственника);
						КонецЕсли;
						
						Если УзелФИО.Свойства().Получить("Имя") <> Неопределено Тогда
							Результат.Квитанция.ИмяСобственника = XMLЗначение(Тип("Строка"), УзелФИО.Имя);
							Результат.Квитанция.ИмяСобственника = СокрЛП(Результат.Квитанция.ИмяСобственника);
						КонецЕсли;
						
						Если УзелФИО.Свойства().Получить("Отчество") <> Неопределено Тогда
							Результат.Квитанция.ОтчествоСобственника = XMLЗначение(Тип("Строка"), УзелФИО.Отчество);
							Результат.Квитанция.ОтчествоСобственника = СокрЛП(Результат.Квитанция.ОтчествоСобственника);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если УзелКвРегНом.Свойства().Получить("Ошибка") <> Неопределено Тогда
					ОшибкиНСП = УзелКвРегНом.Ошибка;
					Если ТипЗнч(ОшибкиНСП) <> Тип("СписокXDTO") Тогда
						ОшибкиНСП = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОшибкиНСП);
					КонецЕсли;
					Для каждого ОшибкаНСП Из ОшибкиНСП Цикл
						КодОшибкиНСП = XMLЗначение(Тип("Строка"), ОшибкаНСП);
						Результат.Квитанция.КодыОшибок.Добавить(КодОшибкиНСП);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// По организации, номеру, дате, виду уведомления ищет документы реализации полномочий налоговых органов,
// сейчас возвращает квитанции о присвоении РНПТ.
// Параметры:
//   СсылкаНаУведомление - Ссылка из определяемого типа ПредметЦиклаОбмена,
//   ВозвращатьСостояние - Булево - возвращать ключ "СостояниеСдачиОтчетности".
//
// Возвращаемое значение:
//   Массив из Структур - квитанции о присвоении РНПТ, КНД 1169012, по убыванию даты:
//     * Ссылка                   - СправочникСсылка.ДокументыРеализацииПолномочийНалоговыхОрганов,
//     * РНПТ                     - Строка,
//     * ВидДокумента             - Строка - "Уведомление об имеющихся остатках товаров, подлежащих прослеживаемости"
//                                           или "Уведомление о ввозе товаров, подлежащих прослеживаемости, с
//                                           территории другого государства-члена Евразийского экономического
//                                           союза на территорию Российской Федерации и иные территории,
//                                           находящиеся под ее юрисдикцией",
//     * НомерУведомления         - Строка,
//     * ДатаУведомления          - Дата,
//     * НаименованиеСобственника - Строка - наименование собственника товара, если это организация,
//     * ФИОСобственника          - Строка - фамилия собственника товара, если это физическое лицо,
//     * ИННСобственника          - Строка - ИНН собственника товара - организации или физического лица,
//     * КППСобственника          - Строка - КПП собственника товара - организации,
//     * ОшибкиНСП                - Массив:
//        ** КодОшибки            - Строка,
//        ** ТекстОшибки          - Строка,
//     * СостояниеСдачиОтчетности - ПеречислениеСсылка.СостояниеСдачиОтчетности - возвращается, если
//                                           ВозвращатьСостояние = Истина.
//     * ОписаниеОшибки           - Строка - текст ошибки получения СостояниеСдачиОтчетности или пустая строка
//                                           при успехе, возвращается, если ВозвращатьСостояние = Истина.
//
Функция ДокументыРеализацииПолномочийНО(СсылкаНаУведомление, ВозвращатьСостояние = Ложь) Экспорт
	
	ИмяТипаДокументаУведомлениеОбОстаткахПрослеживаемыхТоваров = "УведомлениеОбОстаткахПрослеживаемыхТоваров";
	ЭтоУведомлениеОбОстаткахПрослеживаемыхТоваров =
		Метаданные.Документы.Найти(ИмяТипаДокументаУведомлениеОбОстаткахПрослеживаемыхТоваров) <> Неопределено
		И ТипЗнч(СсылкаНаУведомление) = Тип("ДокументСсылка." + ИмяТипаДокументаУведомлениеОбОстаткахПрослеживаемыхТоваров);
	ИмяТипаДокументаУведомлениеОВвозеПрослеживаемыхТоваров = "УведомлениеОВвозеПрослеживаемыхТоваров";
	ЭтоУведомлениеОВвозеПрослеживаемыхТоваров =
		Метаданные.Документы.Найти(ИмяТипаДокументаУведомлениеОВвозеПрослеживаемыхТоваров) <> Неопределено
		И ТипЗнч(СсылкаНаУведомление) = Тип("ДокументСсылка." + ИмяТипаДокументаУведомлениеОВвозеПрослеживаемыхТоваров);
	
	Если НЕ ЭтоУведомлениеОбОстаткахПрослеживаемыхТоваров И НЕ ЭтоУведомлениеОВвозеПрослеживаемыхТоваров Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РеквизитыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СсылкаНаУведомление,
		"Организация, Номер, Дата",
		Истина);
	РеквизитыУведомленияНомерПолный = РеквизитыУведомления.Номер;
	ПозицияРазделителя = СтрНайти(РеквизитыУведомления.Номер, "-");
	Если ПозицияРазделителя > 0 Тогда
		РеквизитыУведомления.Номер = Сред(РеквизитыУведомления.Номер, ПозицияРазделителя + 1);
	КонецЕсли;
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(РеквизитыУведомления.Номер) Тогда
		РеквизитыУведомления.Номер = Число(РеквизитыУведомления.Номер);
		РеквизитыУведомления.Номер = Формат(РеквизитыУведомления.Номер, "ЧДЦ=; ЧН=; ЧГ=");
	КонецЕсли;
	Если РеквизитыУведомленияНомерПолный = РеквизитыУведомления.Номер Тогда
		РеквизитыУведомленияНомерПолный = "";
	КонецЕсли;
	Если ТипЗнч(РеквизитыУведомления.Дата) = Тип("Дата") Тогда
		РеквизитыУведомления.Дата = НачалоДня(РеквизитыУведомления.Дата);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.Ссылка КАК Ссылка,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ КАК РНПТ,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления КАК ВидУведомления,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления КАК НомерУведомления,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.ДатаУведомления КАК ДатаУведомления,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.НаименованиеСобственника КАК НаименованиеСобственника,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.ФИОСобственника КАК ФИОСобственника,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.ИННСобственника КАК ИННСобственника,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.КППСобственника КАК КППСобственника,
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.ОшибкиНСП КАК ОшибкиНСП
		|ИЗ
		|	Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов КАК ДокументыРеализацииПолномочийНалоговыхОрганов
		|ГДЕ
		|	ДокументыРеализацииПолномочийНалоговыхОрганов.Организация = &Организация
		|	И (ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления = &НомерУведомления"
		+ ?(ЗначениеЗаполнено(РеквизитыУведомленияНомерПолный), "
		|		ИЛИ ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления = &НомерУведомленияПолный", "") + ")
		|	И ДокументыРеализацииПолномочийНалоговыхОрганов.ДатаУведомления = &ДатаУведомления
		|	И (ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления = &ВидУведомления
		|		ИЛИ ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления ЕСТЬ NULL
		|		ИЛИ ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления = """"
		|		ИЛИ ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления НЕ В (&ВсеВидыУведомлений))
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДокумента УБЫВ";
	
	ВсеВидыУведомлений = Новый Массив;
	ВсеВидыУведомлений.Добавить("Уведомление об имеющихся остатках товаров, подлежащих прослеживаемости");
	ВсеВидыУведомлений.Добавить("Уведомление о ввозе товаров, подлежащих прослеживаемости, с территории другого "
		+ "государства-члена Евразийского экономического союза на территорию Российской Федерации и иные территории, "
		+ "находящиеся под ее юрисдикцией");
	ВидУведомления = ВсеВидыУведомлений[?(ЭтоУведомлениеОВвозеПрослеживаемыхТоваров, 1, 0)];
	
	Запрос.УстановитьПараметр("Организация", РеквизитыУведомления.Организация);
	Запрос.УстановитьПараметр("НомерУведомления", РеквизитыУведомления.Номер);
	Если ЗначениеЗаполнено(РеквизитыУведомленияНомерПолный) Тогда
		Запрос.УстановитьПараметр("НомерУведомленияПолный", РеквизитыУведомленияНомерПолный);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаУведомления", РеквизитыУведомления.Дата);
	Запрос.УстановитьПараметр("ВидУведомления", ВидУведомления);
	Запрос.УстановитьПараметр("ВсеВидыУведомлений", ВсеВидыУведомлений);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса);
	Для каждого СтрокаРезультата Из Результат Цикл
		СтрокаРезультата.ОшибкиНСП = ОбщегоНазначения.ТаблицаЗначенийВМассив(СтрокаРезультата.ОшибкиНСП);
	КонецЦикла;
	
	Если ВозвращатьСостояние Тогда
		ИндексСтроки = 0;
		КонтекстЭДО = Неопределено;
		ТекстСообщенияПолучитьОбработкуЭДО = "";
		Для каждого СтрокаРезультата Из Результат Цикл
			СтрокаРезультата.Вставить("СостояниеСдачиОтчетности", 	Неопределено);
			СтрокаРезультата.Вставить("ОписаниеОшибки", 			"");
			
			Если ИндексСтроки = 0 Тогда
				КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО(ТекстСообщенияПолучитьОбработкуЭДО);
			КонецЕсли;
			Если КонтекстЭДО = Неопределено Тогда
				СтрокаРезультата.ОписаниеОшибки = ТекстСообщенияПолучитьОбработкуЭДО;
			Иначе
				СостояниеОтправки = КонтекстЭДО.ТекущееСостояниеОтправки(СтрокаРезультата.Ссылка);
				Если СостояниеОтправки <> Неопределено И СостояниеОтправки.Свойство("ТекущийЭтапОтправки")
					И СостояниеОтправки.ТекущийЭтапОтправки <> Неопределено
					И СостояниеОтправки.ТекущийЭтапОтправки.Свойство("СостояниеСдачиОтчетности") Тогда
					
					СтрокаРезультата.СостояниеСдачиОтчетности = СостояниеОтправки.ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
				КонецЕсли;
			КонецЕсли;
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Тексты колонок и левого соединения с запросом документов УведомлениеОбОстаткахПрослеживаемыхТоваров,
// УведомлениеОВвозеПрослеживаемыхТоваров для получения реквизитов квитанций о присвоении РНПТ.
// Параметры:
//   ИмяДокументаВЗапросе - Строка.
//   ТолькоПризнакЗаполненияРНПТ - Булево - В запрос включить только поле ДокументыРеализацииПолномочийНО_РНПТЗаполнен.
//
// Возвращаемое значение:
//   Структура:
//     * ПеречислениеКолонок   - Строка - колонки "ДокументыРеализацииПолномочийНО_РНПТЗаполнен",
//                                        "ДокументыРеализацииПолномочийНО_Ссылка",
//                                        "ДокументыРеализацииПолномочийНО_РНПТ",
//                                        "ДокументыРеализацииПолномочийНО_ВидУведомления",
//                                        "ДокументыРеализацииПолномочийНО_НомерУведомления",
//                                        "ДокументыРеализацииПолномочийНО_ДатаУведомления",
//                                        "ДокументыРеализацииПолномочийНО_НаименованиеСобственника",
//                                        "ДокументыРеализацииПолномочийНО_ФИОСобственника",
//                                        "ДокументыРеализацииПолномочийНО_ИННСобственника",
//                                        "ДокументыРеализацииПолномочийНО_КППСобственника",
//     * СоединениеСДокументом - Строка - строка левого соединения.
//
Функция ТекстыДляЗапросаДокументовРеализацииПолномочийНО(ИмяДокументаВЗапросе = "Уведомление", ТолькоПризнакЗаполненияРНПТ = Ложь) Экспорт
	
	Если ТолькоПризнакЗаполненияРНПТ Тогда
		ПеречислениеКолонок =
			"	(ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ <> """"
			|		И ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ ЕСТЬ НЕ NULL) КАК ДокументыРеализацииПолномочийНО_РНПТЗаполнен";
	Иначе	
	
		ПеречислениеКолонок =
			"	(ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ <> """"
			|		И ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ ЕСТЬ НЕ NULL) КАК ДокументыРеализацииПолномочийНО_РНПТЗаполнен,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.Ссылка КАК ДокументыРеализацииПолномочийНО_Ссылка,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.РНПТ КАК ДокументыРеализацииПолномочийНО_РНПТ,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления КАК ДокументыРеализацииПолномочийНО_ВидУведомления,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления КАК ДокументыРеализацииПолномочийНО_НомерУведомления,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.ДатаУведомления КАК ДокументыРеализацииПолномочийНО_ДатаУведомления,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.НаименованиеСобственника КАК ДокументыРеализацииПолномочийНО_НаименованиеСобственника,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.ФИОСобственника КАК ДокументыРеализацииПолномочийНО_ФИОСобственника,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.ИННСобственника КАК ДокументыРеализацииПолномочийНО_ИННСобственника,
			|	ДокументыРеализацииПолномочийНалоговыхОрганов.КППСобственника КАК ДокументыРеализацииПолномочийНО_КППСобственника";
		
	КонецЕсли;
	
	СоединениеСДокументом = СтрШаблон(
		"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыРеализацииПолномочийНалоговыхОрганов КАК ДокументыРеализацииПолномочийНалоговыхОрганов
		|		ПО ДокументыРеализацииПолномочийНалоговыхОрганов.Организация = %1.Организация
		|			И ДокументыРеализацииПолномочийНалоговыхОрганов.ДатаУведомления = НАЧАЛОПЕРИОДА(%1.Дата, ДЕНЬ)
		|			И (%1.Номер ПОДОБНО ""_____00000"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____0000"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____000"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____00"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____0"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""___0"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""___"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления
		|				ИЛИ %1.Номер ПОДОБНО ""_____0000"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" ""
		|				ИЛИ %1.Номер ПОДОБНО ""_____000"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер ПОДОБНО ""_____00"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер ПОДОБНО ""_____0"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер ПОДОБНО ""_____"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер ПОДОБНО ""___0"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер ПОДОБНО ""___"" + ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления + "" %%""
		|				ИЛИ %1.Номер = ДокументыРеализацииПолномочийНалоговыхОрганов.НомерУведомления)
		|			И ДокументыРеализацииПолномочийНалоговыхОрганов.ВидУведомления =
		|				ВЫБОР
		|					КОГДА ТипЗначения(%1.Ссылка) = Тип(Документ.УведомлениеОВвозеПрослеживаемыхТоваров) 
		|						ТОГДА ""Уведомление о ввозе товаров, подлежащих прослеживаемости, с территории другого государства-члена Евразийского экономического союза на территорию Российской Федерации и иные территории, находящиеся под ее юрисдикцией""
		|					ИНАЧЕ
		|						""Уведомление об имеющихся остатках товаров, подлежащих прослеживаемости""
		|				КОНЕЦ",
		ИмяДокументаВЗапросе);
	
	Возврат Новый Структура("ПеречислениеКолонок, СоединениеСДокументом", ПеречислениеКолонок, СоединениеСДокументом);
	
КонецФункции

// Предназначена для получения основных реквизитов действующих МЧД ФНС и МЧД ФНС распределенного реестра,
// по убыванию даты выдачи. Включаются МЧД, которые могли быть зарегистрированы из других баз и загружены в эту
// или регистрация еще не завершилась, так как их пользователь тоже может захотеть выбрать.
// При СначалаЗарегистрированные равном Истина сначала выводятся МЧД со статусом зарегистрированных в этой базе.
// Параметры:
//	 Организация               - СправочникСсылка.Организации - отбор выполняется при заданном значении.
//	 СНИЛС                     - Строка - СНИЛС представителя, отбор выполняется при заданном значении.
//	 СначалаЗарегистрированные - Булево.
//	 ПараметрыОтбора           - Структура - отбор по реквизитам, присутствующим в справочниках
//                               "МашиночитаемыеДоверенностиРаспределенныйРеестр" и "МашиночитаемыеДоверенностиФНС",
//                               например, для отбора по ИНН и КПП организации доверителя задать:
//                               Новый Структура("ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП", <ИНН организаци>, <КПП>)
//                               для отбора по ИНН физического лица доверителя задать:
//                               Новый Структура("ДоверительФЛ_ИНН", <ИНН физического лица доверителя>)
//                               для отбора по ИНН физического лица представителя задать:
//                               Новый Структура("ПредставительФЛ_ИНН", <ИНН физического лица представителя>)
//                               для отбора по ИНН и КПП организации представителя, например, филиала, задать:
//                               Новый Структура("ПредставительЮЛ_ИНН, ПредставительЮЛ_КПП", <ИНН>, <КПП филиала>)
//
// Возвращаемое значение: 
//   Массив - содержит структуры с полями: 
//	   * Ссылка            - Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр
//                           или Справочник.МашиночитаемыеДоверенностиФНС;
//	   * НомерДоверенности - Строка;
//	   * ДатаВыдачи        - Дата;
//	   * ДатаОкончания     - Дата;
//	   * ТипДоверенности   - Строка - "МашиночитаемыеДоверенностиРаспределенныйРеестр"
//                           или "МашиночитаемыеДоверенностиФНС";
//	   * Статус            - Перечисление.СтатусыМашиночитаемойДоверенностиКО.
//
Функция ОсновныеРеквизитыМашиночитаемыхДоверенностейФНС(
		Организация = Неопределено,
		СНИЛС = Неопределено,
		СначалаЗарегистрированные = Истина,
		ПараметрыОтбора = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания КАК ДатаОкончания,
		|	""МашиночитаемыеДоверенностиРаспределенныйРеестр"" КАК ТипДоверенности,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус КАК Статус,
		|	ЗНАЧЕНИЕ(Справочник.ЦиклыОбмена.ПустаяСсылка) КАК ЦиклОбменаСсылка,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОтправки КАК ДатаСозданияЦиклаОбмена,
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОбновленияСтатуса КАК ДатаТранспортногоСообщения
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр КАК МашиночитаемыеДоверенностиРаспределенныйРеестр
		|ГДЕ
		|	МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаВыдачи <= &ДатаЗапроса
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.ДатаОкончания >= &ДатаЗапроса
		|	И (МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования = """"
		|		ИЛИ МашиночитаемыеДоверенностиРаспределенныйРеестр.РежимыИспользования ЕСТЬ NULL)
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.ПометкаУдаления = ЛОЖЬ
		|	И МашиночитаемыеДоверенностиРаспределенныйРеестр.Статус НЕ В (&ИсключаемыеСтатусыОтправки)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиФНС.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиФНС.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиФНС.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиФНС.ДатаОкончания КАК ДатаОкончания,
		|	""МашиночитаемыеДоверенностиФНС"" КАК ТипДоверенности,
		|	ВЫБОР
		|		КОГДА ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО)
		|				И ТранспортноеСообщение.ПротоколСОшибкой = ЛОЖЬ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано)
		|		КОГДА ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО)
		|				И ТранспортноеСообщение.ПротоколСОшибкой = ИСТИНА
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации)
		|		КОГДА ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПредставлениеНП)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.Отправлено)
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиКО.ВРаботе)
		|	КОНЕЦ КАК Статус,
		|	ЦиклыОбмена.Ссылка КАК ЦиклОбменаСсылка,
		|	ЦиклыОбмена.ДатаСоздания КАК ДатаСозданияЦиклаОбмена,
		|	ТранспортноеСообщение.Дата КАК ДатаТранспортногоСообщения
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиФНС КАК МашиночитаемыеДоверенностиФНС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналОтправокВКонтролирующиеОрганы КАК ЖурналОтправокВКонтролирующиеОрганы
		|		ПО ЖурналОтправокВКонтролирующиеОрганы.Ссылка = МашиночитаемыеДоверенностиФНС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		|		ПО ЦиклыОбмена.Предмет = МашиночитаемыеДоверенностиФНС.Ссылка
		|		И ЦиклыОбмена.ПометкаУдаления = ЛОЖЬ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		|		ПО ТранспортноеСообщение.ЦиклОбмена = ЦиклыОбмена.Ссылка
		|		И ТранспортноеСообщение.ЦиклОбмена ЕСТЬ НЕ NULL
		|		И ТранспортноеСообщение.ПометкаУдаления = ЛОЖЬ
		|		И (ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.ПредставлениеНП)
		|			ИЛИ ТранспортноеСообщение.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыТранспортныхСообщений.РезультатПриемаПредставлениеНО))
		|ГДЕ
		|	МашиночитаемыеДоверенностиФНС.ДатаВыдачи <= &ДатаЗапроса
		|	И МашиночитаемыеДоверенностиФНС.ДатаОкончания >= &ДатаЗапроса
		|	И МашиночитаемыеДоверенностиФНС.ПометкаУдаления = ЛОЖЬ
		|	И ЖурналОтправокВКонтролирующиеОрганы.СтатусОтправки <> &ИсключаемыйСтатусОтправки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаВыдачи УБЫВ,
		|	Ссылка,
		|	ДатаСозданияЦиклаОбмена УБЫВ,
		|	ДатаТранспортногоСообщения УБЫВ");
	
	ИсключаемыеСтатусыОтправки = Новый Массив;
	ИсключаемыеСтатусыОтправки.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отозвано);
	ИсключаемыеСтатусыОтправки.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации);
	ИсключаемыеСтатусыОтправки.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиКО.ИстекСрокДействия);
	
	Запрос.УстановитьПараметр("ДатаЗапроса", 				ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ИсключаемыйСтатусОтправки", 	"Отозвано");
	Запрос.УстановитьПараметр("ИсключаемыеСтатусыОтправки", ИсключаемыеСтатусыОтправки);
	
	ПараметрыОтбораДополненные = ПараметрыОтбора;
	Если ЗначениеЗаполнено(Организация) ИЛИ ЗначениеЗаполнено(СНИЛС) Тогда
		Если ПараметрыОтбораДополненные = Неопределено Тогда
			ПараметрыОтбораДополненные = Новый Структура;
		КонецЕсли;
		Если ЗначениеЗаполнено(Организация) Тогда
			ПараметрыОтбораДополненные.Вставить("Организация", Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(СНИЛС) Тогда
			ПараметрыОтбораДополненные.Вставить("ПредставительФЛ_СНИЛС", СНИЛС);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтбораДополненные <> Неопределено И ПараметрыОтбораДополненные.Количество() <> 0 Тогда
		ТекстОтбораМЧДФНСРР = "";
		ТекстОтбораМЧДФНС 	= "";
		Для каждого ПараметрОтбора Из ПараметрыОтбораДополненные Цикл
			ТекстОтбораМЧДФНСРР = ТекстОтбораМЧДФНСРР + "
				|	И МашиночитаемыеДоверенностиРаспределенныйРеестр." + ПараметрОтбора.Ключ + " = &" + ПараметрОтбора.Ключ;
			
			ТекстОтбораМЧДФНС = ТекстОтбораМЧДФНС + "
				|	И МашиночитаемыеДоверенностиФНС." + ПараметрОтбора.Ключ + " = &" + ПараметрОтбора.Ключ;
		КонецЦикла;
		
		ТекстЗавершенияЗапросаМЧДФНСРР 	= "
										   |
										   |ОБЪЕДИНИТЬ ВСЕ";
		ТекстЗавершенияЗапросаМЧДФНС 	= "
										   |
										   |УПОРЯДОЧИТЬ ПО";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗавершенияЗапросаМЧДФНСРР,
			ТекстОтбораМЧДФНСРР + ТекстЗавершенияЗапросаМЧДФНСРР);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗавершенияЗапросаМЧДФНС,
			ТекстОтбораМЧДФНС + ТекстЗавершенияЗапросаМЧДФНС);
		
		Для каждого ПараметрОтбора Из ПараметрыОтбораДополненные Цикл
			Запрос.УстановитьПараметр(ПараметрОтбора.Ключ, ПараметрОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПоследнийЦиклОбмена = Неопределено;
	Пока Выборка.Следующий() Цикл
		СтрокаРезультата = Новый Структура;
		СтрокаРезультата.Вставить("Ссылка", 			Выборка.Ссылка);
		СтрокаРезультата.Вставить("НомерДоверенности", 	Выборка.НомерДоверенности);
		СтрокаРезультата.Вставить("ДатаВыдачи", 		Выборка.ДатаВыдачи);
		СтрокаРезультата.Вставить("ДатаОкончания", 		Выборка.ДатаОкончания);
		СтрокаРезультата.Вставить("ТипДоверенности", 	Выборка.ТипДоверенности);
		СтрокаРезультата.Вставить("Статус", 			Выборка.Статус);
		
		ЦиклОбмена = Выборка.ЦиклОбменаСсылка;
		КоличествоСтрок = Результат.Количество();
		Если КоличествоСтрок > 0 И Результат[КоличествоСтрок - 1].Ссылка = СтрокаРезультата.Ссылка Тогда
			Если ЗначениеЗаполнено(ЦиклОбмена) И ЦиклОбмена = ПоследнийЦиклОбмена
				И (СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации
					И Результат[КоличествоСтрок - 1].Статус <> Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Отправлено
					И Результат[КоличествоСтрок - 1].Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ВРаботе) Тогда
				
				Результат[КоличествоСтрок - 1].Статус = СтрокаРезультата.Статус;
			КонецЕсли;
			
		Иначе
			Если КоличествоСтрок > 0 И Результат[КоличествоСтрок - 1].Статус =
				Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации Тогда
				
				Результат.Удалить(КоличествоСтрок - 1);
			КонецЕсли;
			
			Результат.Добавить(СтрокаРезультата);
			ПоследнийЦиклОбмена = ЦиклОбмена;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = Результат.Количество();
	Если КоличествоСтрок > 0 И Результат[КоличествоСтрок - 1].Статус =
		Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрации Тогда
		
		Результат.Удалить(КоличествоСтрок - 1);
	КонецЕсли;
	
	Если СначалаЗарегистрированные Тогда
		Зарегистрированные = Новый Массив;
		Остальные = Новый Массив;
		
		Для каждого СтрокаРезультата Из Результат Цикл
			Если СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Зарегистрировано
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтправленоЗаявлениеНаОтзыв
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОшибкаОтзыва
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ДатаНачалаДействияНеНаступила
				ИЛИ СтрокаРезультата.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.ОтказВРегистрацииОтзыва Тогда
				
				Зарегистрированные.Добавить(СтрокаРезультата);
				
			Иначе
				Остальные.Добавить(СтрокаРезультата);
			КонецЕсли;
		КонецЦикла;
		
		Результат = Зарегистрированные;
		Для каждого СтрокаРезультата Из Остальные Цикл
			Результат.Добавить(СтрокаРезультата);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сведения доверенности, указанной в справочнике "РегистрацииВНалоговомОргане".
// Параметры:
//  РегистрацииВНалоговомОргане - Неопределено или СправочникСсылка.РегистрацииВНалоговомОргане;
//  Организация                 - Неопределено или СправочникСсылка.Организация для поиска регистрации в налоговом
//                                 органе, если параметр "РегистрацииВНалоговомОргане" не задан;
//  КодНО                       - код налогового органа для поиска регистрации в налоговом органе, если параметр
//                                 "РегистрацииВНалоговомОргане" не задан;
//  КПП                         - КПП для поиска регистрации в налоговом органе, если параметр
//                                 "РегистрацииВНалоговомОргане" не задан.
//
// Возвращаемое значение:
//   Неопределено - если доверенность не указана или недостаточно прав.
//   Структура с полями справочника "ДоверенностиНалогоплательщика", "МашиночитаемыеДоверенностиФНС"
//     или "МашиночитаемыеДоверенностиРаспределенныйРеестр", а также обязательно присутствуют поля:
//    * ЕдиныйРегистрационныйНомер                          - Строка - GUID машиночитаемой доверенности
//                                                                      распределенного реестра;
//     * ЭтоМашиночитаемаяДоверенность                       - Булево;
//     * ЭтоМашиночитаемаяДоверенностьРаспределенногоРеестра - Булево;
//     * Ссылка                                              - Справочник.ДоверенностиНалогоплательщика,
//                                                             Справочник.МашиночитаемыеДоверенностиФНС или
//                                                             Справочник.МашиночитаемыеДоверенностиРаспределенныйРеестр;
//     * НомерДоверенности                                   - Строка;
//     * ДатаВыдачи                                          - Дата - может быть незаполненной только в заготовке;
//     * ДатаОкончания                                       - Дата - может быть незаполненной.
//
Функция СведенияДоверенностиФНС(
		РегистрацииВНалоговомОргане = Неопределено,
		Организация = Неопределено,
		КодНО = "",
		КПП = "") Экспорт
	
	СсылкаНаРегистрациюВНалоговомОргане = РегистрацииВНалоговомОргане;
	Если НЕ ЗначениеЗаполнено(СсылкаНаРегистрациюВНалоговомОргане) Тогда
		КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Если КонтекстЭДО = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СсылкаНаРегистрациюВНалоговомОргане = КонтекстЭДО.РегистрацияВИФНСПоОрганизацииИКодуНО(
			Организация,
			КодНО,
			КПП);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРегистрациюВНалоговомОргане) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СсылкаНаДоверенность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаРегистрациюВНалоговомОргане, "Доверенность",
		Истина);
	Если НЕ ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданныхДоверенности = СсылкаНаДоверенность.Метаданные().ПолноеИмя();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	" + ПолноеИмяОбъектаМетаданныхДоверенности + " КАК ДоверенностиФНС
		|ГДЕ
		|	ДоверенностиФНС.Ссылка = &СсылкаНаДоверенность");
	
	Запрос.УстановитьПараметр("СсылкаНаДоверенность", СсылкаНаДоверенность);
	
	ТаблицаДоверенностей = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДоверенностей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаДоверенностей[0]);
	Для каждого РеквизитДоверенности Из Результат Цикл
		Если ТипЗнч(РеквизитДоверенности.Значение) = Тип("ХранилищеЗначения")
			ИЛИ ТипЗнч(РеквизитДоверенности.Значение) = Тип("ТаблицаЗначений") Тогда
			Результат.Удалить(РеквизитДоверенности.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(СсылкаНаДоверенность) = Тип("СправочникСсылка.ДоверенностиНалогоплательщика") Тогда
		Результат.Вставить("НомерДоверенности", Результат.НомерДовер);
	КонецЕсли;
	ЭтоМашиночитаемаяДоверенность =
		(ТипЗнч(СсылкаНаДоверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
		ИЛИ ТипЗнч(СсылкаНаДоверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр"));
	Результат.Вставить("ЭтоМашиночитаемаяДоверенность", ЭтоМашиночитаемаяДоверенность);
	ЭтоМашиночитаемаяДоверенностьРаспределенногоРеестра =
		(ТипЗнч(СсылкаНаДоверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр"));
	Результат.Вставить("ЭтоМашиночитаемаяДоверенностьРаспределенногоРеестра",
		ЭтоМашиночитаемаяДоверенностьРаспределенногоРеестра);
	ЕдиныйРегистрационныйНомер = ?(ЭтоМашиночитаемаяДоверенностьРаспределенногоРеестра, Результат.НомерДоверенности, "");
	Результат.Вставить("ЕдиныйРегистрационныйНомер", ЕдиныйРегистрационныйНомер);
	
	Возврат Результат;
	
КонецФункции

// При изменении статуса доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриИзмененииСтатусаДоверенности
//
Функция ПриИзмененииСтатусаДоверенности(СтатусыДоверенностей, ОпределитьОрганизации = Ложь) Экспорт
	
	Результат = ?(ОпределитьОрганизации, Новый Соответствие, Неопределено);
	
	Для каждого СтатусыДоверенности Из СтатусыДоверенностей Цикл
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьМашиночитаемыеДоверенностиВРегистрЖурналОтправокВКонтролирующиеОрганы(
			СтатусыДоверенности.Ключ);
		
		Если ОпределитьОрганизации И Результат[СтатусыДоверенности.Ключ] = Неопределено Тогда
			ОрганизацияСсылка = ДокументооборотСКОВызовСервера.ОрганизацияМЧДЕдиногоФормата(СтатусыДоверенности.Ключ);
			Результат[СтатусыДоверенности.Ключ] = ?(ОрганизацияСсылка = Неопределено,
				Справочники.Организации.ПустаяСсылка(), ОрганизацияСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// При заполнении налоговых органов действия доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриЗаполненииНалоговыхОргановДействия
//
Процедура ПриЗаполненииНалоговыхОргановДействия(Организации, НалоговыеОрганыДействия) Экспорт
	
	Организация = Неопределено;
	Если ТипЗнч(Организации) = Тип("Массив") ИЛИ ТипЗнч(Организации) = Тип("ФиксированныйМассив") Тогда
		Для каждого ОрганизацияДоверенности Из Организации Цикл
			Если ТипЗнч(ОрганизацияДоверенности) = Тип("СправочникСсылка.Организации") Тогда
				Организация = ОрганизацияДоверенности;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.Код КАК Код,
		|	РегистрацииВНалоговомОргане.НаименованиеИФНС КАК НаименованиеИФНС
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	(РегистрацииВНалоговомОргане.Владелец = &Организация
		|	ИЛИ РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация)
		|	И РегистрацииВНалоговомОргане.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	РегистрацииВНалоговомОргане.Код");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",
		РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НалоговыйОрганДействия = НалоговыеОрганыДействия.Добавить();
		НалоговыйОрганДействия.Пометка = Истина;
		НалоговыйОрганДействия.Код = Выборка.Код;
		НалоговыйОрганДействия.Наименование = Выборка.НаименованиеИФНС;
	КонецЦикла;
	
КонецПроцедуры

// При инициализации и обновлении статуса доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриИзмененииСтатусаДоверенности
//
Процедура ПриПолученииСтатусаРегистрации(Доверенность, РегистрацияВРеестре) Экспорт
	
	Если РегистрацияВРеестре.ЗарегистрированаВРеестре <> Неопределено И ЗначениеЗаполнено(Доверенность) Тогда
		МЧДЕдиногоФорматаРегистрироватьВФТС(Доверенность, РегистрацияВРеестре.ЗарегистрированаВРеестре = Истина);
	КонецЕсли;
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СвойстваОтправки = ?(КонтекстЭДО = Неопределено, Неопределено,
		КонтекстЭДО.ПолучитьОсновныеСвойстваПоследнейОтправкиОтчетаВФТС(Доверенность));
	СтатусОтправки = ?(СвойстваОтправки = Неопределено, Неопределено, СвойстваОтправки.Статус);
	
	ДоверенностьОтправлена = (СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен
		ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.Доставлен
		ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.Сдан
		ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят
		ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки);
	ДоверенностьИспользуется = (СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте
		ИЛИ ДоверенностьОтправлена
		ИЛИ (РегистрацияВРеестре.ЗарегистрированаВРеестре = Истина И НЕ ЗначениеЗаполнено(Доверенность)));
	
	РегистрацияВРеестре.ПоказыватьРегистрироватьВРеестре = Истина;
	РегистрацияВРеестре.ЗаголовокФлажкаРегистрации = ?(СтатусОтправки = Перечисления.СтатусыОтправки.Сдан,
		НСтр("ru = 'Зарегистрирована в реестре ФТС';
			|en = 'Зарегистрирована в реестре ФТС'"), НСтр("ru = 'Регистрировать в реестре ФТС';
															|en = 'Регистрировать в реестре ФТС'"));
	Если РегистрацияВРеестре.КодыПолномочийДляДобавления = Неопределено Тогда
		РегистрацияВРеестре.КодыПолномочийДляДобавления = Новый Массив;
	КонецЕсли;
	РегистрацияВРеестре.КодыПолномочийДляДобавления.Добавить("FTS_10001");
	РегистрацияВРеестре.КодыПолномочийДляДобавления.Добавить("FTS_10002");
	РегистрацияВРеестре.ТекстВопросаДляДобавленияПолномочий =
		НСтр("ru = 'Для регистрации в реестре ФТС требуется наличие полномочий FTS_10001 и/или FTS_10002 (рекомендуется указывать оба).
				   |
				   |Добавить полномочия?';
				   |en = 'Для регистрации в реестре ФТС требуется наличие полномочий FTS_10001 и/или FTS_10002 (рекомендуется указывать оба).
				   |
				   |Добавить полномочия?'");
	РегистрацияВРеестре.ЗарегистрированаВРеестре = ДоверенностьИспользуется;
	РегистрацияВРеестре.Вставить("ПодсказкаРегистрации",
		НСтр("ru = 'Для сдачи отчетности в ФТС от имени представителя (сотрудника) требуется регистрация
				   |доверителем (директором) доверенности в реестре ФТС.
				   |Доверенность должна содержать полномочия FTS_10001 и/или FTS_10002 (рекомендуется указывать оба).
				   |Регистрация доверенности в распределенном реестре ФНС не обязательна.';
				   |en = 'Для сдачи отчетности в ФТС от имени представителя (сотрудника) требуется регистрация
				   |доверителем (директором) доверенности в реестре ФТС.
				   |Доверенность должна содержать полномочия FTS_10001 и/или FTS_10002 (рекомендуется указывать оба).
				   |Регистрация доверенности в распределенном реестре ФНС не обязательна.'"));
	
	Если ДоверенностьОтправлена Тогда
		ДатаПолученияРезультата = ?(ЗначениеЗаполнено(СвойстваОтправки.ДатаПолученияРезультата),
			СвойстваОтправки.ДатаПолученияРезультата, СвойстваОтправки.ДатаОтправки);
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Запрос отправлен в ФТС %1
					   |Состояние на %2';
					   |en = 'Запрос отправлен в ФТС %1
					   |Состояние на %2'") + ": ",
			ДокументооборотСКОВызовСервера.ОтформатироватьДату(СвойстваОтправки.ДатаОтправки),
			ДокументооборотСКОВызовСервера.ОтформатироватьДату(ДатаПолученияРезультата));
		ТекстСообщения = Новый ФорматированнаяСтрока(ТекстСообщения,, ЦветаСтиля.ПоясняющийТекст);
		
		Если СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
			ТекстСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Успешно зарегистрирована в ФТС';
															|en = 'Успешно зарегистрирована в ФТС'"),,
				ЦветаСтиля.ПоясняющийТекст,, "#Протокол");
			КартинкаСтатуса = "МЧДВРеестре";
		ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
			ТекстСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Ошибка регистрации в ФТС';
															|en = 'Ошибка регистрации в ФТС'"),,
				ЦветаСтиля.ПоясняющийТекст,, "#Протокол");
			КартинкаСтатуса = "МЧДОтменена";
		ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
			ТекстСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Отменена в ФТС';
															|en = 'Отменена в ФТС'"),,
				ЦветаСтиля.ПоясняющийТекст,, "#Протокол");
			КартинкаСтатуса = "МЧДОтменена";
		Иначе // СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен
			ТекстСтатуса = Новый ФорматированнаяСтрока(НСтр("ru = 'Ожидает регистрации в ФТС';
															|en = 'Ожидает регистрации в ФТС'"),, ЦветаСтиля.ПоясняющийТекст);
			КартинкаСтатуса = "ОжидаетРегистрацииБРО";
		КонецЕсли;
		
		ТекстРазделителя = Новый ФорматированнаяСтрока("
													   |",, ЦветаСтиля.ПоясняющийТекст);
		
		ТекстСсылкиОбновить = Новый ФорматированнаяСтрока("Обновить",,,, "#Обновить");
		
		РегистрацияВРеестре.СостояниеРегистрации = Новый ФорматированнаяСтрока(
			ТекстСообщения,
			ТекстСтатуса,
			ТекстРазделителя,
			ТекстСсылкиОбновить);
		Если ЗначениеЗаполнено(КартинкаСтатуса) Тогда
			РегистрацияВРеестре.Вставить("Картинка", КартинкаСтатуса);
		КонецЕсли;
		
	Иначе
		РегистрацияВРеестре.СостояниеРегистрации = "";
	КонецЕсли;
	
КонецПроцедуры

// При регистрации доверенности справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриРегистрацииДоверенности
//
Процедура ПриРегистрацииДоверенности(Доверенность) Экспорт
	
КонецПроцедуры

// Настройки формы списка для реестра ФТС справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриОпределенииНастроек
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.ПоказыватьСтатусВФормеСписка = Истина;
	Настройки.ЗаголовокКолонкиСтатуса = НСтр("ru = 'Статус в реестре ФТС';
											|en = 'Статус в реестре ФТС'");
	Настройки.КартинкаКолонкиСтатуса = БиблиотекаКартинок.ФТС;
	КартинкаСостоянияСертификатов = "СостоянияСертификатов";
	Настройки.КоллекцияКартинокДляСтроки = БиблиотекаКартинок[КартинкаСостоянияСертификатов];
	
КонецПроцедуры

// Получение статусов для реестра ФТС справочника "МашиночитаемыеДоверенности",
// описание см. МашиночитаемыеДоверенностиФНСПереопределяемый.ПриПолученииСтатусов
//
Процедура ПриПолученииСтатусов(Доверенности, Статусы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтправкиФТС.ОтчетСсылка КАК ОтчетСсылка,
		|	ОтправкиФТС.СтатусОтправки КАК СтатусОтправки
		|ИЗ
		|	Справочник.ОтправкиФТС КАК ОтправкиФТС
		|ГДЕ
		|	ОтправкиФТС.ОтчетСсылка В (&Отчеты)
		|	И ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФТС.ДатаОтправки УБЫВ");
	Запрос.Параметры.Вставить("Отчеты", Доверенности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Статусы[Выборка.ОтчетСсылка] = Неопределено Тогда
			Если Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен
				ИЛИ Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.Доставлен Тогда
				
				Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", 5, НСтр("ru = 'Отправлено';
																								|en = 'Отправлено'"));
				
			ИначеЕсли Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан Тогда
				Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", 2, НСтр("ru = 'Зарегистрировано';
																								|en = 'Зарегистрировано'"));
				
			ИначеЕсли Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
				Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", 4, НСтр("ru = 'Не зарегистрировано';
																								|en = 'Не зарегистрировано'"));
				
			ИначеЕсли Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.ПринятЕстьОшибки Тогда
				Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", 4, НСтр("ru = 'Отменено';
																								|en = 'Отменено'"));
				
			Иначе
				Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", -1, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Доверенность Из Доверенности Цикл
		Если Статусы[Выборка.ОтчетСсылка] = Неопределено Тогда
			Статусы[Выборка.ОтчетСсылка] = Новый Структура("ИндексКартинки, Статус", -1, "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение флага обмена по СЭДО через оператора. Флаг возвращается установленным, если есть учетная запись
// Калуга Астрал, в ней подключен обмен с СФР в части отчетности бывшего ФСС, лицензия не истекла, а также событие,
// опубликованное через интернет, разрешает обмен через оператора, в настройках обмена с СФР (бывш. ФСС)
// скрытый флажок обмена напрямую не установлен.
// Параметры:
//   Организация - СправочникСсылка.Организация.
//
// Возвращаемое значение:
//   Булево.
//
Функция ИспользуетсяОбменаПоСЭДОЧерезОператора(Организация) Экспорт
	
	Возврат НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СвойстваОбменаПоСЭДОЧерезОператора(
		Организация).ОбменПоСЭДОНапрямую;
	
КонецФункции

// Получение учетной записи.
// Параметры:
//   Организация 			- СправочникСсылка.Организация.
//   ДопустимыеОператоры 	- Массив.
//
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиДокументооборота.
//
Функция УчетнаяЗаписьОрганизации(Организация, ДопустимыеОператоры = Неопределено) Экспорт
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДО = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДО = Неопределено Тогда
		Возврат УчетнаяЗапись;
	КонецЕсли;
	
	УчетнаяЗапись = КонтекстЭДО.УчетнаяЗаписьОрганизации(Организация);
	
	Если ЗначениеЗаполнено(ДопустимыеОператоры) Тогда
		СпецоператорСвязи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "СпецоператорСвязи");
		Если ДопустимыеОператоры.Найти(СпецоператорСвязи) = Неопределено Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

// Задание флажка регистрации в ФТС для машиночитаемой доверенности (единый формат).
// Параметры:
//   Доверенность       - СправочникСсылка.МашиночитаемыеДоверенности
//   РегистрироватьВФТС - Булево
//
// Возвращаемое значение:
//   Булево - успех операции, Ложь при РегистрироватьВФТС равном Ложь, если доверенность уже отправлена.
//
функция МЧДЕдиногоФорматаРегистрироватьВФТС(Доверенность, РегистрироватьВФТС = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОтправкиФТС.Ссылка КАК Ссылка,
		|	ОтправкиФТС.СтатусОтправки КАК СтатусОтправки
		|ИЗ
		|	Справочник.ОтправкиФТС КАК ОтправкиФТС
		|ГДЕ
		|	ОтправкиФТС.ОтчетСсылка = &ОтчетСсылка
		|	И ОтправкиФТС.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОтправкиФТС.ДатаОтправки УБЫВ";
	Запрос.Параметры.Вставить("ОтчетСсылка", Доверенность);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если НЕ РегистрироватьВФТС И ЗначениеЗаполнено(Выборка.СтатусОтправки)
			И Выборка.СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте Тогда
			
			Возврат Ложь;
			
		ИначеЕсли НЕ РегистрироватьВФТС И Выборка.СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте
			ИЛИ РегистрироватьВФТС И НЕ ЗначениеЗаполнено(Выборка.СтатусОтправки) Тогда
			
			ОбъектОтправкиФТС = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектОтправкиФТС.СтатусОтправки = ?(РегистрироватьВФТС,
				Перечисления.СтатусыОтправки.ВКонверте, Перечисления.СтатусыОтправки.ПустаяСсылка());
			ОбъектОтправкиФТС.Записать();
		КонецЕсли;
		
	ИначеЕсли РегистрироватьВФТС Тогда
		НоваяЗапись = Справочники.ОтправкиФТС.СоздатьЭлемент();
		НоваяЗапись.ОтчетСсылка = Доверенность;
		НоваяЗапись.СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте;
		НоваяЗапись.Организация = ДокументооборотСКОВызовСервера.ОрганизацияМЧДЕдиногоФормата(Доверенность);
		НоваяЗапись.ВидОтчета = Справочники.ВидыОтправляемыхДокументов.МашиночитаемыеДоверенностиРаспределенныйРеестр;
		НоваяЗапись.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Дополнительная инициализация формы выбора доверенности, например, в справочнике "РегистрацииВНалоговомОргане".
//
// Параметры:
//  Элемент 	- ПолеФормы - изменяемый элемент доверенности.
//  Форма 	 	- ФормаКлиентскогоПриложения.
//  Настройки 	- структура:
//      * ИмяЭлементаДоверенность - Строка или Неопределено - по умолчанию "Доверенность",
//
Функция ИнициализацияВыбораДоверенности(Форма, Настройки = Неопределено) Экспорт
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ИмяЭлементаДоверенность", "Доверенность");
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиВызова.ИмяЭлементаДоверенность)
		И ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И НЕ ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Исп.МЧД един.фор.для ФНС") Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ДоверенностиНалогоплательщика"));
		МассивТипов.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС"));
		МассивТипов.Добавить(Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр"));
		Форма.Элементы[НастройкиВызова.ИмяЭлементаДоверенность].ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Функция СформироватьФайлЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров) Экспорт
	
	ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров);
	
	Если НЕ СтруктураПараметров.Свойство("СведенияОРаботниках") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ДатаПодписи") Тогда
		СтруктураПараметров.Вставить("ДатаПодписи", ТекущаяДатаСеанса());
	КонецЕсли;
	
	МассивТекстов = ТекстФайлаЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров);
	
	Если МассивТекстов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ПолучаемыеФайлы", Новый Массив);
	
	Для каждого СведенияДляФайла Из МассивТекстов Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(СведенияДляФайла.СтрокаXML);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Результат.ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(
		СведенияДляФайла.ИмяФайлаЗапроса + ".xml", АдресФайла));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("РасчетПоСтраховымВзносам") Тогда
		
		СохраненныйДокумент = СтруктураПараметров.РасчетПоСтраховымВзносам.ПолучитьОбъект();
		СохраненныеДанные = СохраненныйДокумент.ДанныеОтчета.Получить();
		
		ДанныеТитульного = СохраненныеДанные.ПоказателиОтчета.ПолеТабличногоДокументаТитульный;
		
		Если СохраненныеДанные.Свойство("ОкружениеСохранения") Тогда
			
			// Случай данных отчета, сохраненного в 2.0.
			
		Иначе
			
			СтруктураПараметров.Вставить("СведенияОРаботниках", СохраненныеДанные.ДанныеМногоуровневыхРазделов.Раздел3);
			СтруктураПараметров.Вставить("КодНалоговогоОргана", СокрЛП(ДанныеТитульного.НалоговыйОрган));
			СтруктураПараметров.Вставить("ИНН", СокрЛП(ДанныеТитульного.ИНН));
			СтруктураПараметров.Вставить("КПП", СокрЛП(ДанныеТитульного.КПП));
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметров.Свойство("Организация") Тогда
		
		РегламентированнаяОтчетностьПереопределяемый.ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(
		СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстФайлаЗапросаВФНСНаПроверкуСведенийРаботников(СтруктураПараметров)
	
	МассивТекстов = Новый Массив;
	
	// Общая часть.
	СведенияОРаботниках = СтруктураПараметров.СведенияОРаботниках;
	
	Если ТипЗнч(СведенияОРаботниках) = Тип("ДеревоЗначений") Тогда
		СведенияОРаботниках = СведенияОРаботниках.Строки;
		Если СтруктураПараметров.Свойство("РасчетПоСтраховымВзносам") Тогда
			ИмяФормы = СтруктураПараметров.РасчетПоСтраховымВзносам.ВыбраннаяФорма;
			Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2025Кв1") Тогда
				ВерсияСоставаПоказателей = "5.07";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2023Кв3") Тогда
				ВерсияСоставаПоказателей = "5.06";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2023Кв1") Тогда
				ВерсияСоставаПоказателей = "5.05";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2022Кв1") Тогда
				ВерсияСоставаПоказателей = "5.04";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв4") Тогда
				ВерсияСоставаПоказателей = "5.03";
			ИначеЕсли ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2020Кв1") Тогда
				ВерсияСоставаПоказателей = "5.02";
			Иначе
				ВерсияСоставаПоказателей = "5.01";
			КонецЕсли;
		Иначе
			ДанныеПервойСтраницы = СведенияОРаботниках[0].Данные;
			Если ДанныеПервойСтраницы.Свойство("П000310002001") Тогда
				ВерсияСоставаПоказателей = "5.07";
			Иначе
				ВерсияСоставаПоказателей = "5.01";
			КонецЕсли;
		КонецЕсли;
		Если ВерсияСоставаПоказателей = "5.07"
			ИЛИ ВерсияСоставаПоказателей = "5.06"
			ИЛИ ВерсияСоставаПоказателей = "5.05"
			ИЛИ ВерсияСоставаПоказателей = "5.04"
			ИЛИ ВерсияСоставаПоказателей = "5.03"
			ИЛИ ВерсияСоставаПоказателей = "5.02" Тогда
			ИмяПок_ИННФЛ          = "П000310002001";
			ИмяПок_СНИЛС          = "П000310003001";
			ИмяПок_Фамилия        = "П000310004001";
			ИмяПок_Имя            = "П000310005001";
			ИмяПок_Отчество       = "П000310006001";
			ИмяПок_ДатаРожд       = "П000310007001";
			ИмяПок_КодВидДок      = "П000310010001";
			ИмяПок_СерияДокумента = "П000310011001";
			ИмяПок_НомерДокумента = "П000310011002";
		Иначе// ВерсияСоставаПоказателей = "5.01"
			ИмяПок_ИННФЛ          = "П000310006001";
			ИмяПок_СНИЛС          = "П000310007001";
			ИмяПок_Фамилия        = "П000310008001";
			ИмяПок_Имя            = "П000310009001";
			ИмяПок_Отчество       = "П000310010001";
			ИмяПок_ДатаРожд       = "П000310011001";
			ИмяПок_КодВидДок      = "П000310014001";
			ИмяПок_СерияДокумента = "П000310015001";
			ИмяПок_НомерДокумента = "П000310015002";
		КонецЕсли;
	Иначе
		ИмяПок_Фамилия        = "Фамилия";
		ИмяПок_Имя            = "Имя";
		ИмяПок_Отчество       = "Отчество";
		ИмяПок_ИННФЛ          = "ИНН";
		ИмяПок_СНИЛС          = "СтраховойНомерПФР";
		ИмяПок_ДатаРожд       = "ДатаРождения";
		ИмяПок_КодВидДок      = "ВидДокумента";
		ИмяПок_СерияДокумента = "СерияДокумента";
		ИмяПок_НомерДокумента = "НомерДокумента";
	КонецЕсли;
	
	КодНалоговогоОргана = СокрЛП(СтруктураПараметров.КодНалоговогоОргана);
	ДатаПодписи = СтруктураПараметров.ДатаПодписи;
	ИНН = СокрЛП(СтруктураПараметров.ИНН);
	КПП = СокрЛП(СтруктураПараметров.КПП);
	
	ЛеваяЧасть_ИмяФайлаЗапроса = "VO_ZAPRRAB"
	+ "_" + КодНалоговогоОргана
	+ "_" + (ИНН + КПП)
	+ "_" + Формат(ДатаПодписи, "ДФ=ггггММдд");
	
	ПредельноеКоличествоСведенийВОдномФайле = 200;
	Если СтруктураПараметров.Свойство("РазмерПачки") Тогда
		ПредельноеКоличествоСведенийВОдномФайле = СтруктураПараметров.РазмерПачки;
	КонецЕсли;
	
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматЗапросаВФНСНаПроверкуСведенийРаботников");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	// Начало формирования первой строки XML.
	//
	ИмяФайлаЗапроса = ЛеваяЧасть_ИмяФайлаЗапроса + "_" + Новый УникальныйИдентификатор();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстФорматаXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДеревоФормата = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ДеревоВыгрузки = Новый ДеревоЗначений;
	ДеревоВыгрузки.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
	ДеревоВыгрузки.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("ИдФайл", ИмяФайлаЗапроса);
	Атрибуты.Вставить("ВерсФорм", "4.02");
	Атрибуты.Вставить("ТипИнф", "ЗАПР_ПРОВ_РАБ");
	Атрибуты.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	УзелСправки = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
	
	ФорматНабораЗаписейФизЛицо = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ПолучДох");
	
	Для каждого СтрокаСведений Из СведенияОРаботниках Цикл
		
		СведенияОРаботнике
		= ?(ТипЗнч(СтрокаСведений) = Тип("СтрокаДереваЗначений"), СтрокаСведений.Данные, СтрокаСведений);
		
		НаборЗаписейФизЛицо = ОбщегоНазначения.СкопироватьРекурсивно(ФорматНабораЗаписейФизЛицо);
		
		НаборЗаписейФизЛицо.ФИО.Значение.Фамилия = СведенияОРаботнике[ИмяПок_Фамилия];
		НаборЗаписейФизЛицо.ФИО.Значение.Имя = СведенияОРаботнике[ИмяПок_Имя];
		НаборЗаписейФизЛицо.ФИО.Значение.Отчество = СведенияОРаботнике[ИмяПок_Отчество];
		
		Если НЕ ЗначениеЗаполнено(СведенияОРаботнике[ИмяПок_ИННФЛ]) Тогда
			НаборЗаписейФизЛицо.Удалить("ИННФЛ");
		Иначе
			НаборЗаписейФизЛицо.ИННФЛ.Значение = СведенияОРаботнике[ИмяПок_ИННФЛ];
		КонецЕсли;
		
		НаборЗаписейФизЛицо.СНИЛС.Значение = СведенияОРаботнике[ИмяПок_СНИЛС];
		
		НаборЗаписейФизЛицо.ДатаРожд.Значение = СведенияОРаботнике[ИмяПок_ДатаРожд];
		
		Если ТипЗнч(СведенияОРаботниках) = Тип("КоллекцияСтрокДереваЗначений")
			И НЕ СведенияОРаботнике.Свойство(ИмяПок_НомерДокумента) Тогда
			// Особая обработка: номер документа, удостоверяющего личность.
			СведенияОРаботнике.Вставить(ИмяПок_НомерДокумента, "");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СокрЛП(СведенияОРаботнике[ИмяПок_КодВидДок]
			+ СведенияОРаботнике[ИмяПок_СерияДокумента]
			+ СведенияОРаботнике[ИмяПок_НомерДокумента])) Тогда
			НаборЗаписейФизЛицо.Удалить("УдЛичнФЛ");
		Иначе
			НаборЗаписейДокУдЛичности = НаборЗаписейФизЛицо.УдЛичнФЛ.Значение;
			НаборЗаписейДокУдЛичности.КодВидДок = СведенияОРаботнике[ИмяПок_КодВидДок];
			НаборЗаписейДокУдЛичности.СерНомДок
			= СокрЛП(СведенияОРаботнике[ИмяПок_СерияДокумента]) + " "
			+ СокрЛП(СведенияОРаботнике[ИмяПок_НомерДокумента]);
		КонецЕсли;
		
		Атрибуты = ДанныеВыгружаемыеКакАтрибуты(НаборЗаписейФизЛицо);
		УзелФЛ = ДобавитьУзелВДеревоXML(УзелСправки, "СвРаб", "", Атрибуты);
		ДобавитьИнформациюВДерево(УзелФЛ, НаборЗаписейФизЛицо);
		
		НомерСтрокиСведений = СведенияОРаботниках.Индекс(СтрокаСведений) + 1;
		
		Если (НомерСтрокиСведений % ПредельноеКоличествоСведенийВОдномФайле = 0)
			ИЛИ (НомерСтрокиСведений = СведенияОРаботниках.Количество()) Тогда
			
			СтруктураПараметров.Удалить("СведенияОРаботниках");
			
			ПотокВыгрузкиXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML();
			ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance");
			СтрокаXML = ПотокВыгрузкиXML.Закрыть();
			
			// Строка XML сформирована.
			//
			МассивТекстов.Добавить(Новый Структура("СтрокаXML, ИмяФайлаЗапроса", СтрокаXML, ИмяФайлаЗапроса));
			
		КонецЕсли;
		
		Если (НомерСтрокиСведений % ПредельноеКоличествоСведенийВОдномФайле = 0)
			И (НомерСтрокиСведений <> СведенияОРаботниках.Количество()) Тогда
			
			// Начало формирования дополнительной строки XML (количество записей в
			// "СведенияОРаботниках" превысило "ПредельноеКоличествоСведенийВОдномФайле").
			//
			ИмяФайлаЗапроса = ЛеваяЧасть_ИмяФайлаЗапроса + "_" + Новый УникальныйИдентификатор();
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстФорматаXML);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДеревоФормата = ПостроительDOM.Прочитать(ЧтениеXML);
			
			ДеревоВыгрузки = Новый ДеревоЗначений;
			ДеревоВыгрузки.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
			ДеревоВыгрузки.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
			
			Атрибуты = Новый Соответствие;
			Атрибуты.Вставить("ИдФайл", ИмяФайлаЗапроса);
			Атрибуты.Вставить("ВерсФорм", "4.02");
			Атрибуты.Вставить("ТипИнф", "ЗАПР_ПРОВ_РАБ");
			Атрибуты.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
			
			УзелСправки = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "Файл", "", Атрибуты);
			
			ФорматНабораЗаписейФизЛицо = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ПолучДох");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивТекстов;
	
КонецФункции

Функция ДобавитьУзелВДеревоXML(Ветка, Имя, Значение, СписокАтрибутов = Неопределено, ТипДанных = "", ЗначениеЗаписи = Неопределено)
	
	ПустаяДата = Дата(1,1,1);
	
	НовыйУзел = Ветка.Строки.Добавить();
	НовыйУзел.Имя = Имя;
	НовыйУзел.Значение = Значение;
	
	Если СписокАтрибутов <> Неопределено Тогда
		ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
		ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
		ВеткаАтрибутов.Значение = Неопределено;
		
		Для Каждого ЭлементСпискаАтрибутов Из СписокАтрибутов Цикл
			ЛистАтрибутов = ВеткаАтрибутов.Строки.Добавить();
			ЛистАтрибутов.Имя = ЭлементСпискаАтрибутов.Ключ;
			
			ЛистАтрибутов.Значение = Строка(ЭлементСпискаАтрибутов.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипДанных = "СТРОКА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = "";
	ИначеЕсли ТипДанных = "ЧИСЛО" И ЗначениеЗаписи <> Неопределено Тогда
		Если ТипЗнч(ЗначениеЗаписи) = Тип("Число") Тогда
			ЗначениеЗаписи = 0;
		Иначе
			ЗначениеЗаписи = "";
		КонецЕсли;
	ИначеЕсли ТипДанных = "ДАТА" И ЗначениеЗаписи <> Неопределено Тогда
		ЗначениеЗаписи = ПустаяДата;
	КонецЕсли;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция ЗагрузитьФорматНабораЗаписей(Знач ДеревоФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1)
	ФорматНабора = Новый Структура();
	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяНабораЗаписей)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		Если ТипЗнч(УзелФормата) <> Тип("ЭлементDOM") Тогда
			Продолжить;
		КонецЕсли;
		
		ФорматЗаписи = Новый Структура("ТипДанных, Размер, РазрядностьДробнойЧасти, Поля, Значение, ЭлементНеОбязателен, ТипЭлемента, НеВыводитьВФайл");
		
		// Имя записи хранится в 4 колонке.
		ИмяЗаписи =  УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		
		// Тип данных хранится во 2 колонке.
		ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
		
		// Признак обязательности элемента хранится в 5-й колонке.
		ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
		
		Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
			ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
		Иначе
			ТипЭлемента = "С";
		КонецЕсли;
		
		Если ТипДанных = "" Тогда// если тип данных не задан, то встретили строку - группировку
			Продолжить;
		КонецЕсли; 
		
		ПозицияРазделителя = СтрНайти(ТипДанных,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ТипДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
		Если ПозицияРазделителя <> 0 Тогда
			ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1];
		КонецЕсли;
		
		ФорматЗаписи.ТипДанных =  ТипДанных;
		ФорматЗаписи.ЭлементНеОбязателен = ЭлементНеОбязателен;
		ФорматЗаписи.ТипЭлемента = ТипЭлемента;
		ФорматЗаписи.НеВыводитьВФайл = Ложь;
		// Размер хранится в 3 колонке.
		СтрРазмерПоля =  УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
		
		Если ФорматЗаписи.ТипДанных = "КОНСТАНТА" Тогда
			
			// В колонке "размер" должно указываться значение константы.
			ФорматЗаписи.Значение = СтрРазмерПоля;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ЧИСЛО" Тогда
			
			ПозицияТочки = СтрНайти(СтрРазмерПоля,".");
			Если ПозицияТочки<>0 Тогда
				ФорматЗаписи.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
				ФорматЗаписи.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
			Иначе	
				ФорматЗаписи.Размер = Число(СтрРазмерПоля);
				ФорматЗаписи.РазрядностьДробнойЧасти = 0;
			КонецЕсли;
			
			ФорматЗаписи.Значение = 0;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРОКА" Тогда
			
			ФорматЗаписи.Размер = Число(СтрРазмерПоля);
			
			ФорматЗаписи.Значение = "";
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ДАТА" Тогда
			
			ФорматЗаписи.Значение = Дата('00010101');
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "ТАБЛИЦА" Тогда
			
			// Имя области-описания формата полей таблицы или структуры хранится в колонке размер.
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый ТаблицаЗначений;
			
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				Если Поле.ТипДанных = "ТАБЛИЦА" Тогда
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля);
				Иначе	
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Поле.Размер, Поле.РазрядностьДробнойЧасти));
					ИначеЕсли Поле.ТипДанных = "СТРОКА" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(Поле.Размер));
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						ОписаниеТиповПоля = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
					КонецЕсли; 
					ФорматЗаписи.Значение.Колонки.Добавить(Поле.ИмяПоля, ОписаниеТиповПоля);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "СТРУКТУРА" Тогда
			
			ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = СтрНайти(СтрРазмерПоля,"/");
			Если ПозицияРазделителя <> 0 Тогда
				СтрРазмерПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрРазмерПоля, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			
			// Имя области-описания формата полей таблицы или структуры хранится в колонке размер.
			ФорматЗаписи.Поля = ПолучитьФорматЗаписиИзДереваФормата(ДеревоФормата, СтрРазмерПоля);
			ФорматЗаписи.Значение = Новый Структура;
			Для каждого Поле Из ФорматЗаписи.Поля Цикл
				
				ПустоеЗначениеПоля = Неопределено;
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					ПустоеЗначениеПоля = 0;
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					ПустоеЗначениеПоля = Дата('00010101');
				Иначе
					ПустоеЗначениеПоля = "";
				КонецЕсли; 
				
				ФорматЗаписи.Значение.Вставить(Поле.ИмяПоля, ПустоеЗначениеПоля);
				
			КонецЦикла; 
			
		ИначеЕсли ФорматЗаписи.ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			// Имя набора записей хранится в третьей колонке.
			ИмяНабора = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			ПозицияРазделителя = СтрНайти(ИмяНабора,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяНабора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяНабора, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ПозицияРазделителя = СтрНайти(ИмяЗаписи,"/");
			Если ПозицияРазделителя <> 0 Тогда
				ИмяЗаписи = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЗаписи, "/")[НомерВыбираемогоЭлемента-1]
			КонецЕсли;
			ФорматЗаписи.Значение = ЗагрузитьФорматНабораЗаписей(ДеревоФормата, ИмяНабора, НомерВыбираемогоЭлемента);
			
		КонецЕсли;
		
		ФорматНабора.Вставить(ИмяЗаписи, ФорматЗаписи);
		
	КонецЦикла;
	
	Возврат ФорматНабора;
	
КонецФункции

Функция ПолучитьФорматЗаписиИзДереваФормата(Знач ДеревоФормата, Знач ИмяЗаписи)
	
	ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
	ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",					Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ТипЭлемента",				Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10)));
	ТаблицаФормаЗаписи.Колонки.Добавить("Размер",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен", Новый ОписаниеТипов("Булево"));
	ТаблицаФормаЗаписи.Колонки.Добавить("НеВыводитьВФайл", Новый ОписаниеТипов("Булево"));
	
	УзлыФормата = ДеревоФормата.ДочерниеУзлы[0].ПолучитьЭлементыПоИмени(ИмяЗаписи)[0].ДочерниеУзлы;
	
	Для Каждого УзелФормата Из УзлыФормата Цикл
		
		Если ТипЗнч(УзелФормата) <> Тип("ЭлементDOM") Тогда
			Продолжить;
		КонецЕсли;
		
		// Имя поля хранится в 4-ой колонке.
		ИмяПоля = УзелФормата.ДочерниеУзлы[3].ТекстовоеСодержимое;
		Если ИмяПоля <> "" Тогда
			
			НовоеПоле = ТаблицаФормаЗаписи.Добавить();
			НовоеПоле.ИмяПоля = СокрЛП(ИмяПоля);
			// Тип данных хранится во 2-ой колонке.
			НовоеПоле.ТипДанных = ВРег(УзелФормата.ДочерниеУзлы[1].ТекстовоеСодержимое);
			
			НовоеПоле.НеВыводитьВФайл = Ложь;
			
			Если УзелФормата.ДочерниеУзлы.Количество() = 7 И УзелФормата.ДочерниеУзлы[6].ИмяУзла = "ТипЭлемента" Тогда
				НовоеПоле.ТипЭлемента = ВРег(УзелФормата.ДочерниеУзлы[6].ТекстовоеСодержимое);
			Иначе
				НовоеПоле.ТипЭлемента = "С";
			КонецЕсли;
			
			// Размер поля хранится в 3-ей колонке.
			СтрРазмерПоля = УзелФормата.ДочерниеУзлы[2].ТекстовоеСодержимое;
			// Если указан размер поля, сохраним его.
			Если (НовоеПоле.ТипДанных = "ЧИСЛО" Или НовоеПоле.ТипДанных = "СТРОКА") И СтрРазмерПоля <> "" Тогда
				ПозицияТочки = СтрНайти(СтрРазмерПоля,".");
				Если ПозицияТочки<>0 Тогда
					НовоеПоле.Размер = Число(Лев(СтрРазмерПоля,ПозицияТочки-1));
					НовоеПоле.РазрядностьДробнойЧасти = Число(Сред(СтрРазмерПоля,ПозицияТочки+1));
				Иначе
					НовоеПоле.Размер = Число(СтрРазмерПоля);
					НовоеПоле.РазрядностьДробнойЧасти = 0;
				КонецЕсли;
			КонецЕсли;
			// Признак обязательности элемента хранится в 5-й колонке.
			НовоеПоле.ЭлементНеОбязателен = (ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "НЕ ОБЯЗАТЕЛЬНО" Или ВРег(УзелФормата.ДочерниеУзлы[4].ТекстовоеСодержимое) = "Н");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаФормаЗаписи;
КонецФункции

Функция ДанныеВыгружаемыеКакАтрибуты(СтруктураДанных)
	
	Атрибуты = Новый Структура;
	Для каждого Поле Из СтруктураДанных Цикл
		Если Поле.Значение.ТипЭлемента = "А" Тогда
			Данные = Поле.Значение.Значение;
			Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
				Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
			ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
				Если Не ЗначениеЗаполнено(Данные) Тогда
					Данные = ""
				Иначе
					Данные = Формат(Данные,"ДЛФ=D");
				КонецЕсли;
			КонецЕсли;
			Атрибуты.Вставить(Поле.Ключ, Данные);
			СтруктураДанных.Удалить(Поле.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Атрибуты
	
КонецФункции

Процедура ДобавитьИнформациюВДерево(ДеревоВыгрузки, НаборЗаписей)
	
	ПустаяДата = Дата(1,1,1);
	
	Для каждого ЭлементНабора Из НаборЗаписей Цикл
		ИмяЗаписи = ЭлементНабора.Ключ;
		
		Запись = ЭлементНабора.Значение;
		
		Если Запись.НеВыводитьВФайл Тогда 
			Запись.НеВыводитьВФайл = Ложь;
			Продолжить;
		КонецЕсли;
		
		ТипДанных = Запись.ТипДанных;
		Если ТипДанных = "КОНСТАНТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, , ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ЧИСЛО" Тогда
			
			// для проверок
			// Запись.Размер 
			// Запись.РазрядностьДробнойЧасти
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Формат(Запись.Значение,"ЧЦ=" + Запись.Размер + "; ЧДЦ=" + Запись.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0"), , ТипДанных, Запись.Значение);
			Запись.НеВыводитьВФайл = Ложь;
		ИначеЕсли ТипДанных = "СТРОКА" Тогда
			
			// для проверок
			// Запись.Размер 
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, Запись.Значение, ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ДАТА" Тогда
			
			ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, ?(Запись.Значение = ПустаяДата,"00.00.0000", Формат(Запись.Значение,"ДФ=dd.MM.yyyy")), ,ТипДанных, Запись.Значение);
			
		ИначеЕсли ТипДанных = "ТАБЛИЦА" Тогда	
			
			ПроверятьНеобязательныеПоля = Ложь;
			Для каждого Поле Из Запись.Поля Цикл
				ПроверятьНеобязательныеПоля = Поле.ЭлементНеОбязателен;
				Если ПроверятьНеобязательныеПоля Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
			
			Для каждого СтрокаТЗ Из Запись.Значение Цикл
				
				ВыводитьНеобязательныеПоля = Ложь;
				Если ПроверятьНеобязательныеПоля Тогда
					Для каждого Поле Из Запись.Поля Цикл
						Если Поле.ЭлементНеОбязателен Тогда
							ВыводитьНеобязательныеПоля = ЗначениеЗаполнено(СтрокаТЗ[Поле.ИмяПоля]);
							Если ВыводитьНеобязательныеПоля Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Атрибуты = Новый Структура;
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					Данные = СтрокаТЗ[Поле.ИмяПоля];
					
					Если Поле.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					
					Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл Тогда
						Атрибуты.Вставить(Поле.ИмяПоля, Данные);
					КонецЕсли;
					
				КонецЦикла;
				
				ВеткаСтрокиТЗ = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
				
				Для каждого Поле Из Запись.Поля Цикл
					
					Если Поле.ТипЭлемента = "А" Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Поле.НеВыводитьВФайл Тогда
						Поле.НеВыводитьВФайл = Ложь;
						Продолжить;
					КонецЕсли;
					
					Если Поле.ЭлементНеОбязателен И Не ВыводитьНеобязательныеПоля Тогда
						Продолжить;
					КонецЕсли;
					
					ДобавитьИнформациюВДерево(ВеткаСтрокиТЗ, СтрокаТЗ[Поле.ИмяПоля])
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ТипДанных = "СТРУКТУРА" Тогда
			МассивДанных = Новый Массив;
			Атрибуты = Новый Структура;
			Для каждого Поле Из Запись.Поля Цикл
				
				Данные = Запись.Значение[Поле.ИмяПоля];
				
				Если Поле.ЭлементНеОбязателен И Не ЗначениеЗаполнено(Данные) Тогда
					Продолжить;
				КонецЕсли;
				
				ПустоеЗначение = "";
				Если Поле.ТипДанных = "ЧИСЛО" Тогда
					Если ТипЗнч(Данные) = Тип("Число") Тогда
						ПустоеЗначение = 0;	
					КонецЕсли;
					Данные = Формат(Данные,"ЧЦ=" + Поле.Размер + "; ЧДЦ=" + Поле.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0");
				ИначеЕсли Поле.ТипДанных = "ДАТА" Тогда
					Если Не ЗначениеЗаполнено(Данные) Тогда
						Данные = ""
					Иначе
						Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						ПустоеЗначение = '00010101';
					КонецЕсли;
				КонецЕсли;
				
				Если Поле.ТипЭлемента = "А" И НЕ Поле.НеВыводитьВФайл  Тогда
					Атрибуты.Вставить(Поле.ИмяПоля, Данные);
				ИначеЕсли НЕ Поле.НеВыводитьВФайл Тогда 
					СтруктураДанных = Новый Структура;
					СтруктураДанных.Вставить("ИмяПоля", Поле.ИмяПоля);
					СтруктураДанных.Вставить("Значение", Запись.Значение[Поле.ИмяПоля]);
					СтруктураДанных.Вставить("Данные", Данные);
					СтруктураДанных.Вставить("ТипДанных", Поле.ТипДанных);
					МассивДанных.Добавить(СтруктураДанных);
				КонецЕсли;
				Поле.НеВыводитьВФайл = Ложь;
				Запись.Значение[Поле.ИмяПоля] = ПустоеЗначение;
			КонецЦикла; 
				
			ВеткаСтруктуры = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты);
			
			Для Каждого Поле Из МассивДанных Цикл
				ДобавитьУзелВДеревоXML(ВеткаСтруктуры, Поле.ИмяПоля, Поле.Данные, ,Поле.ТипДанных, Поле.Данные);
			КонецЦикла;
			
		ИначеЕсли ТипДанных = "НАБОРЗАПИСЕЙ" Тогда
			
			Значение = Запись.Значение;
			
			Атрибуты = Новый Структура;
			Для каждого Поле Из Значение Цикл
				Если Поле.Значение.ТипЭлемента = "А" И НЕ Поле.Значение.НеВыводитьВФайл  Тогда
					Данные = Поле.Значение.Значение;
					Если Поле.Значение.ТипДанных = "ЧИСЛО" Тогда
						Данные = Формат(Данные,"ЧЦ=" + Поле.Значение.Размер + "; ЧДЦ=" + Поле.Значение.РазрядностьДробнойЧасти + "; ЧРД=.; ЧН=; ЧГ=0")
					ИначеЕсли Поле.Значение.ТипДанных = "ДАТА" Тогда
						Если Не ЗначениеЗаполнено(Данные) Тогда
							Данные = ""
						Иначе
							Данные = Формат(Данные,"ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Атрибуты.Вставить(Поле.Ключ, Данные);
					Значение.Удалить(Поле.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(ДеревоВыгрузки, ИмяЗаписи, "", Атрибуты), Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено)
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);	
			Если ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено Тогда
				ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
			КонецЕсли;
			СписокАтрибутов = СтрокаДерева.Строки.Найти("АтрибутыXMLУзла", "Имя", Ложь);
			
			Если СписокАтрибутов <> Неопределено Тогда
				Для каждого СтрокаСАтрибутом Из СписокАтрибутов.Строки Цикл
					ПотокXML.ЗаписатьАтрибут(СтрокаСАтрибутом.Имя, СтрокаСАтрибутом.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Лист Из СтрокаДерева.Строки Цикл
		Если Лист.Имя = "АтрибутыXMLУзла" Тогда
			Продолжить;
		КонецЕсли;
		ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПрефиксПространстваИмен, URIПространстваИмен);
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений") Тогда
		Если НЕ ПустаяСтрока(СтрокаДерева.Имя) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УведомлениеОбИзмененииОКТМО

Функция ТребуетсяВыводУведомлениеОбИзмененииОКТМО46(Организация) Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

Функция ВсеОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОрганизаций = РезультатЗапроса.Выгрузить();
	
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

Функция ДатаВремяИзСтрокиXML(ЗначениеСтр)
	
	ДатаСтрокой = ЗначениеСтр + ?(СтрДлина(ЗначениеСтр) = 10, " 00:00:00", "");
	Попытка
		Возврат Дата(ДатаСтрокой);
	Исключение
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Разбор даты XML';
							|en = 'Электронный документооборот с контролирующими органами. Разбор даты XML'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставление);
	КонецПопытки;
	
	Попытка
		Возврат XMLЗначение(Тип("Дата"), ЗначениеСтр);
	Исключение
		ПодробноеПредставление = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Разбор даты XML';
							|en = 'Электронный документооборот с контролирующими органами. Разбор даты XML'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия ,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставление);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти