
#Область СлужебныеПроцедурыИФункции

// Обработчик подписки на событие "ПолучитьПрежнийИсправленный".
// Получение прежней ссылки на исправленный документ.
//
Процедура ПолучитьПрежнийИсправленный(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПрежнийИсправленныйДокумент", НеОпределено);
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Документы.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ИЗ
		|	#ТаблицаДокумента КАК Документы
		|ГДЕ
		|	Документы.Ссылка = &ДокументИсправление
		|	И Документы.Проведен");
		
		Запрос.УстановитьПараметр("ДокументИсправление", Источник.Ссылка);
		
		ИмяДокумента = Источник.Метаданные().Имя;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", "Документ." + ИмяДокумента);
		Если Источник.ДополнительныеСвойства.Свойство("Сторнирование") И Источник.ДополнительныеСвойства.Сторнирование Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документы.ИсправленныйДокумент", "Документы.СторнируемыйДокумент");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент = Выборка.ИсправленныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Исправление при проведении
Процедура ИсправлениеПериодическихСведений(Источник, Отказ, РежимПроведения, СсылкаДокументаИсправления = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт
	
	Если СсылкаДокументаИсправления = Неопределено Тогда
		СсылкаДокументаИсправления = Источник.Ссылка;
	КонецЕсли;
	
	Если ИсправленныйДокумент = Неопределено Тогда
		ИсправленныйДокумент = Источник.ИсправленныйДокумент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент) Тогда
		Если Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент <> ИсправленныйДокумент Тогда
			// Если прежде исправляли другой документ - нужно отменить исправление по прежнему документу.
			ОтменитьИсправления(СсылкаДокументаИсправления,
				Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент);
		Иначе
			// Если прежде исправляли тот же документ - ничего не делаем, т.к. исправление уже выполнено.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Сведения = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(Источник.Ссылка);
		Если Сведения.Исправлен Или Сведения.Сторнирован Тогда
			ВызватьИсключение
				НСтр("ru = 'Проведение запрещено.';
					|en = 'Posting is prohibited.'") + Символы.ПС + Сведения.ПредставлениеСостояния;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		
		Сведения = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(ИсправленныйДокумент);
		Если Сведения.Исправлен И Сведения.ДокументИсправление <> СсылкаДокументаИсправления Тогда
			ВызватьИсключение
				НСтр("ru = 'Проведение еще одного исправления запрещено.';
					|en = 'Unable to modify.'") + Символы.ПС + Сведения.ПредставлениеСостояния;
		КонецЕсли;
		
		ЗафиксироватьИсправления(СсылкаДокументаИсправления, ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "ОтменитьИсправлениеПериодическихСведений".
// Отмена исправления при отмене проведения.
//
Процедура ОтменитьИсправлениеПериодическихСведений(Источник, Отказ) Экспорт
	
	ДокументИсправление = Источник.Ссылка;
	
	Сведения = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(ДокументИсправление);
	Если Сведения.Исправлен Или Сведения.Сторнирован Тогда
		ВызватьИсключение
			НСтр("ru = 'Отмена проведения запрещена.';
				|en = 'Cannot cancel posting.'") + Символы.ПС + Сведения.ПредставлениеСостояния;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("Сторнирование") И Источник.ДополнительныеСвойства.Сторнирование Тогда
		ИсправленныйДокумент = Источник.СторнируемыйДокумент;
	Иначе
		ИсправленныйДокумент = Сведения.ИсправленныйДокумент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Регистры = ИсправляемыеДвижения(ДокументИсправление);
		Для Каждого Регистр Из Регистры Цикл
			НаборЗаписей = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументИсправление);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоИсправлениеРегистра", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
		ОтменитьИсправления(Источник.Ссылка, ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИсправления(ДокументИсправление, ИсправляемыйДокумент, ИменаИсправляемыхРегистров = "") Экспорт
	
	Регистры = ИсправляемыеДвижения(ИсправляемыйДокумент, ИменаИсправляемыхРегистров);
	Для Каждого Регистр Из Регистры Цикл
		МетаданныеРегистра = Метаданные.РегистрыСведений[Регистр];
		ЗафиксироватьИсправленияПоРегистру(МетаданныеРегистра, ДокументИсправление, ИсправляемыйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьИсправленияПоРегистру(МетаданныеРегистра, ДокументИсправление, ИсправляемыйДокумент, РежимЗагрузки = Ложь) Экспорт
	
	ЭтоПериодическийРегистр = МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеРегистра.ПолноеИмя() + ".НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", ИсправляемыйДокумент);
	Блокировка.Заблокировать();
	
	НаборЗаписейИсходный = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	НаборЗаписейИсходный.Отбор.Регистратор.Установить(ИсправляемыйДокумент);
	НаборЗаписейИсходный.Прочитать();
	
	НаборЗаписейЦелевой = РегистрыСведений[МетаданныеРегистра.Имя + "Испр"].СоздатьНаборЗаписей();
	НаборЗаписейЦелевой.Отбор.РегистраторИзмерение.Установить(ДокументИсправление);
	Для Каждого Строка Из НаборЗаписейИсходный Цикл
		НоваяСтрока = НаборЗаписейЦелевой.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.РегистраторИзмерение = ДокументИсправление;
		Если ЭтоПериодическийРегистр Тогда 
			НоваяСтрока.ПериодИзмерение = Строка.Период;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗагрузки Тогда
		НаборЗаписейЦелевой.ОбменДанными.Загрузка = Истина;
		НаборЗаписейИсходный.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НаборЗаписейЦелевой.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	НаборЗаписейЦелевой.Записать();
	
	НаборЗаписейИсходный.Очистить();
	НаборЗаписейИсходный.ДополнительныеСвойства.Вставить("ЭтоИсправлениеРегистра", Истина);
	НаборЗаписейИсходный.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
	НаборЗаписейИсходный.Записать();
	
КонецПроцедуры

Процедура ОтменитьИсправления(ДокументИсправление, ИсправляемыйДокумент, ИменаИсправляемыхРегистров = "") Экспорт
	
	Регистры = ИсправляемыеДвижения(ИсправляемыйДокумент, ИменаИсправляемыхРегистров);
	Для Каждого ИмяРегистра Из Регистры Цикл
		ЭтоПериодическийРегистр = Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		
		ИмяРегистраИспр = ИмяРегистра + "Испр";
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистраИспр);
		ЭлементБлокировки.УстановитьЗначение("РегистраторИзмерение", ДокументИсправление);
		Блокировка.Заблокировать();
		
		НаборЗаписейИсходный = РегистрыСведений[ИмяРегистраИспр].СоздатьНаборЗаписей();
		НаборЗаписейИсходный.Отбор.РегистраторИзмерение.Установить(ДокументИсправление);
		НаборЗаписейИсходный.Прочитать();
		Если НаборЗаписейИсходный.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписейЦелевой = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписейЦелевой.Отбор.Регистратор.Установить(ИсправляемыйДокумент);
		Для Каждого Строка Из НаборЗаписейИсходный Цикл
			НоваяСтрока = НаборЗаписейЦелевой.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Регистратор = ИсправляемыйДокумент;
			Если ЭтоПериодическийРегистр Тогда
				НоваяСтрока.Период = Строка.ПериодИзмерение;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписейИсходный.Очистить();
		НаборЗаписейИсходный.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписейИсходный.Записать();
		
		НаборЗаписейЦелевой.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		НаборЗаписейЦелевой.ДополнительныеСвойства.Вставить("ЭтоИсправлениеРегистра", Истина);
		НаборЗаписейЦелевой.ДополнительныеСвойства.Вставить("НеСдвигатьПериодЗаписей", Истина);
		НаборЗаписейЦелевой.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ИсправляемыеДвижения(ДокументСсылка, ИменаИсправляемыхРегистров = "")
	
	Движения = Новый Массив;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Для Каждого Регистр Из МетаданныеДокумента.Движения Цикл
		
		Если Метаданные.РегистрыСведений.Найти(Регистр.Имя + "Испр") <> НеОпределено Тогда
			
			Если Не ПустаяСтрока(ИменаИсправляемыхРегистров) Тогда
				Если СтрНайти(ИменаИсправляемыхРегистров, Регистр.Имя) = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Движения.Добавить(Регистр.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Движения;
	
КонецФункции

#КонецОбласти
