
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеДокументы);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Если Не (Свойства.ЭтоНовый 
				И ТипЗнч(Документ) = Тип("ДокументОбъект.ПоступлениеДенежныхДокументов"))
			 Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ДенежныеДокументы);
		КонецЕсли;
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеДокументы);
		
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеДокументы);
	КонецЕсли;
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеДокументы;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
			
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ДвиженияДенежныеДокументыИзменение", 
		РегистрыНакопления.ДенежныеДокументы.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам денежных документов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеДокументы");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияДенежныеДокументыИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОстатков.Организация				КАК Организация,
			|	ТаблицаОстатков.Подразделение			КАК Подразделение,
			|	ТаблицаОстатков.МОЛ						КАК МОЛ,
			|	ТаблицаОстатков.ДенежныйДокумент		КАК ДенежныйДокумент,
			|	ТаблицаОстатков.ДенежныйДокумент.Валюта	КАК Валюта,
			|	ТаблицаОстатков.СуммаОстаток			КАК Сумма,
			|	ТаблицаОстатков.КоличествоОстаток		КАК Количество
			|ИЗ
			|	РегистрНакопления.ДенежныеДокументы.Остатки(,
			|			(Организация, Подразделение, МОЛ, ДенежныйДокумент) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.МОЛ,
			|					Таблица.ДенежныйДокумент
			|				ИЗ
			|					ДвиженияДенежныеДокументыИзменение КАК Таблица)
			|	) КАК ТаблицаОстатков
			|
			|ГДЕ
			|	ТаблицаОстатков.КоличествоОстаток < 0
			|	ИЛИ ТаблицаОстатков.СуммаОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиДенежныеДокументы");
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияДенежныеДокументыИзменение") Тогда
		
		ШаблонКоличество = НСтр("ru = 'Денежный документ %1
			|Превышен остаток в наличии по организации %2 в подразделении %3 у МОЛ %4 на %5 шт.';
			|en = 'Financial document %1
			|Balance on hand of company %2 in business unit %3 of custodian %4 is exceeded by %5 pcs'");
		ШаблонСумма = НСтр("ru = 'Денежный документ %1
			|Превышен остаток в наличии по организации %2 в подразделении %3 у МОЛ %4 на %6 %7';
			|en = 'Financial document %1
			|Balance on hand of company %2 in business unit %3 of custodian %4 is exceeded by %6 %7'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиДенежныеДокументы Цикл
			
			Если СтрокаОшибки.Количество < 0 Тогда
				ТекстСообщения = СтрШаблон(ШаблонКоличество,
					СтрокаОшибки.ДенежныйДокумент, // %1
					СтрокаОшибки.Организация,      // %2
					СтрокаОшибки.Подразделение,    // %3
					СтрокаОшибки.МОЛ,              // %4
					-СтрокаОшибки.Количество);     // %5
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСумма,
					СтрокаОшибки.ДенежныйДокумент, // %1
					СтрокаОшибки.Организация,      // %2
					СтрокаОшибки.Подразделение,    // %3
					СтрокаОшибки.МОЛ,              // %4
					-СтрокаОшибки.Количество,      // %5
					-СтрокаОшибки.Сумма,           // %6
					СтрокаОшибки.Валюта);          // %7
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет таблицу остатками денежных документов
//
// Параметры:
//	Отбор - Структура - Параметры отбора остатков ДД:
//		* Организация		- СправочникСсылка.Организации 				- Организация, в которой хранятся ДД
//		* Подразделение		- СправочникСсылка.СтруктураПредприятия 	- Подразделение, в котором хранятся ДД
//		* МОЛ 				- СправочникСсылка.ФизическиеЛица 			- МОЛ, у которого хранятся ДД
//		* Ссылка			- ДокументСсылка.ВыбытиеДенежныхДокументов 	- Документ, движения которого должны быть исключены из расчета остатков
//		* ДенежныеДокументы	- Массив 									- отбор по денежным документам
//	Таблица - ТаблицаЗначений - таблица, в которую будет помещен результат получения остатков ДД.
//
Процедура ЗаполнитьПоОстаткамДД(Отбор, Таблица) Экспорт
	
	ПараметрыОтбора = Новый Структура("ДенежныеДокументы, Организация, Подразделение, МОЛ, Ссылка, Валюта");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Отбор);
	
	МассивДД = ?(ПараметрыОтбора.ДенежныеДокументы = Неопределено, Новый Массив, ПараметрыОтбора.ДенежныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтборПоДД",			МассивДД.Количество() > 0);
	Запрос.УстановитьПараметр("ДенежныеДокументы",	МассивДД);
	Запрос.УстановитьПараметр("Организация",		ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Подразделение",		ПараметрыОтбора.Подразделение);
	Запрос.УстановитьПараметр("МОЛОтправитель",		ПараметрыОтбора.МОЛ);
	Запрос.УстановитьПараметр("Ссылка",				ПараметрыОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтборПоВалюте",		ПараметрыОтбора.Валюта <> Неопределено);
	Запрос.УстановитьПараметр("Валюта",				ПараметрыОтбора.Валюта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	СУММА(Остатки.Количество)	КАК Количество,
	|	СУММА(Остатки.Сумма)		КАК Сумма
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|		Остатки.КоличествоОстаток	КАК Количество,
	|		Остатки.СуммаОстаток		КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы.Остатки(
	|				,
	|				МОЛ = &МОЛОтправитель
	|					И Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И (НЕ &ОтборПоВалюте ИЛИ ДенежныйДокумент.Валюта = &Валюта)
	|					И (НЕ &ОтборПоДД ИЛИ ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Движения.ДенежныйДокумент КАК ДенежныйДокумент,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Количество
	|		ИНАЧЕ
	|			-Движения.Количество
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Сумма
	|		ИНАЧЕ
	|			-Движения.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И Движения.МОЛ = &МОЛОтправитель
	|		И Движения.Организация = &Организация
	|		И Движения.Подразделение = &Подразделение
	|		И (НЕ &ОтборПоВалюте ИЛИ Движения.ДенежныйДокумент.Валюта = &Валюта)
	|		И (НЕ &ОтборПоДД ИЛИ Движения.ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДенежныйДокумент
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДенежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	Остатки.Количество			КАК Количество,
	|	Остатки.Сумма				КАК Сумма,
	|	Остатки.Сумма				КАК СуммаВозврата,
	|	СправочникДД.Цена			КАК Цена,
	|	СправочникДД.Цена			КАК ЦенаВозврата,
	|	СправочникДД.Валюта			КАК Валюта,
	|	СправочникДД.Наименование	КАК НаименованиеДенежногоДокумента,
	|	СправочникДД.Родитель		КАК ГруппаДокумента
	|ИЗ
	|	ВтОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДенежныеДокументы КАК СправочникДД
	|		ПО Остатки.ДенежныйДокумент = СправочникДД.Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
