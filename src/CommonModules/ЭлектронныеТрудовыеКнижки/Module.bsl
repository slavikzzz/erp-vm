#Область ПрограммныйИнтерфейс

// Проверяет предавались ли мероприятия документа в ПФР и если передавались - переводит форму
// в режим ТолькоПросмотр = Истина
//
// Параметры:
//		УправляемаяФорма	- ФормаКлиентскогоПриложения
//		ТекущийОбъект		- ДокументОбъект
//
Процедура ПриЧтенииНаСервере(УправляемаяФорма, ТекущийОбъект) Экспорт
	
	ЭлектронныеТрудовыеКнижкиКлиентСервер.УстановитьОтображениеНомеровДокумента(УправляемаяФорма);
	
КонецПроцедуры

// Заполняет наименование документа по его виду
//
// Параметры:
//		ОбъектДокумента		- ДокументОбъект
//		ВидДокумента		- Строка, имя документа метаданных
//
Процедура ЗаполнитьНаименованиеДокумента(ОбъектДокумента, ВидДокумента, НаименованиеПоУмолчанию = "") Экспорт
	
	ОбъектДокумента.НаименованиеДокумента = НаименованиеДокументаПоВидуДокументаСобытия(
		ОбъектДокумента.Организация, ВидДокумента, НаименованиеПоУмолчанию);
	
КонецПроцедуры

// Возвращает массив ссылок на документы, передавшие мероприятия трудовой
// деятельности этого документа в ПФР.
//
// Параметры:
//		Регистратор	- ДокументСсылка
// Возвращаемое значение:
//		Массив
//
Функция ДокументыПередачиМероприятийТрудовойДеятельности(Регистратор) Экспорт
	
	ДокументыПередачи = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено
		|ПОМЕСТИТЬ ВТИдМероприятий
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИдМероприятий.ИдМероприятия КАК ИдМероприятия
		|ИЗ
		|	ВТИдМероприятий КАК ИдМероприятий";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Организация, Дата");
		Организация = УчетСтраховыхВзносов.ОтчитывающаясяПоВзносамОрганизация(ДанныеРегистратора.Организация, ДанныеРегистратора.Дата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	МероприятияПереданные.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИдМероприятий КАК ИдМероприятий
			|		ПО МероприятияПереданные.Организация = &Организация
			|			И МероприятияПереданные.ИдМероприятия = ИдМероприятий.ИдМероприятия
			|			И МероприятияПереданные.Отменено = ИдМероприятий.Отменено
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ДокументыПередачи = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Регистратор");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументыПередачи;
	
КонецФункции

// Возвращает признак того, что в базе данных есть сведения о подававшемся заявлении
// о ведении трудовой книжки.
//
// Параметры:
//  ФизическиеЛицо          - СправочникСсылка.ФизическиеЛица
//  ИсключаемыеРегистраторы - ДокументСсылка, ссылка на регистратор данные которого необходимо исключить
//                          - Массив, массив ссылок на регистраторы, данные которых необходимо исключить
//
// Возвращаемое значение:
//  Булево
//
Функция ЗаявлениеОВеденииТрудовойКнижкиОформлялось(ФизическоеЛицо, ИсключаемыеРегистраторы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
		|ГДЕ
		|	ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо = &ФизическоеЛицо
		|	И НЕ ЗаявленияОВеденииТрудовыхКнижек.Регистратор В (&ИсключаемыеРегистраторы)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает данные последнего зарегистрированного способа ведения трудовой деятельности.
//
// Параметры:
//  ФизическиеЛицо          - СправочникСсылка.ФизическиеЛица
//  ДатаСведений            - Дата, дата на которую необходимо получить сведения
//  ИсключаемыеРегистраторы - ДокументСсылка, ссылка на регистратор данные которого необходимо исключить
//                          - Массив, массив ссылок на регистраторы, данные которых необходимо исключить
//
// Возвращаемое значение:
//  Структура	- содержит ключи:
//                 * Дата         - дата оформления заявления
//                 * ВидЗаявления - ПеречислениеСсылка.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности
//
Функция ПоследнееЗаявлениеОВеденииТрудовойКнижки(ФизическоеЛицо, ДатаСведений, ИсключаемыеРегистраторы) Экспорт
	
	ДанныеЗаявления = Новый Структура("Дата,ВидЗаявления");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаСведений КАК Период,
		|	&ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТОтборФизическогоЛица";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗаявленияСотрудников();
	ПараметрыПостроения.ИмяВТСотрудникиПериоды = "ВТОтборФизическогоЛица";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = СоздатьВТЗаявленияСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПостроения, "ВТЗаявленияОВеденииТрудовойКнижки", ИсключаемыеРегистраторы);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявленияОВеденииТрудовойКнижки.ПериодЗаписи КАК Дата,
		|	ЗаявленияОВеденииТрудовойКнижки.ВидЗаявления КАК ВидЗаявления
		|ИЗ
		|	ВТЗаявленияОВеденииТрудовойКнижки КАК ЗаявленияОВеденииТрудовойКнижки
		|ГДЕ
		|	ЗаявленияОВеденииТрудовойКнижки.ТекущееЗаявление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаявления, Выборка);
	КонецЕсли;
	
	Возврат ДанныеЗаявления;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности);
	СписокОбъектов.Добавить(Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности);
	СписокОбъектов.Добавить(Документы.РегистрацияТрудовойДеятельности);
	СписокОбъектов.Добавить(Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "b080f311-2352-47c8-8abf-a4affae1a6de", Метаданные.Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "4e929634-8155-4b2a-a71b-ac3e643872fc", Метаданные.Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "ec98596f-96dc-495d-aff2-800fd4d225be", Метаданные.Документы.РегистрацияТрудовойДеятельности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "3ac677dd-eb15-47eb-bfd5-8a1d7522f5e4", Метаданные.Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.Документы.РегистрацияТрудовойДеятельности, Истина);
	Списки.Вставить(Метаданные.Справочники.РегистрацияТрудовойДеятельностиПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОТрудовойДеятельностиРаботникаСТД_РПрисоединенныеФайлы, Истина);
	
	Списки.Вставить(Метаданные.РегистрыСведений.МероприятияТрудовойДеятельности, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МероприятияТрудовойДеятельностиПрочие, Истина);
	
	Списки.Вставить(Метаданные.РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижек, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные, Истина);
	
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЭлектронныеТрудовыеКнижки, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
		|Справочник.ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Чтение.Организации
		|Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Изменение.Организации
		
		|Справочник.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Чтение.ГруппыФизическихЛиц
		|Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Чтение.Организации
		|Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Изменение.ГруппыФизическихЛиц
		|Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Изменение.Организации
		
		|Справочник.РегистрацияТрудовойДеятельностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РегистрацияТрудовойДеятельностиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РегистрацияТрудовойДеятельностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РегистрацияТрудовойДеятельностиПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.РегистрацияТрудовойДеятельности.Чтение.ГруппыФизическихЛиц
		|Документ.РегистрацияТрудовойДеятельности.Чтение.Организации
		|Документ.РегистрацияТрудовойДеятельности.Изменение.ГруппыФизическихЛиц
		|Документ.РегистрацияТрудовойДеятельности.Изменение.Организации
		
		|Справочник.СведенияОТрудовойДеятельностиРаботникаСТД_РПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СведенияОТрудовойДеятельностиРаботникаСТД_РПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияОТрудовойДеятельностиРаботникаСТД_РПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СведенияОТрудовойДеятельностиРаботникаСТД_РПрисоединенныеФайлы.Изменение.Организации
		
		|Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Чтение.ГруппыФизическихЛиц
		|Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Чтение.Организации
		|Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Изменение.ГруппыФизическихЛиц
		|Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Изменение.Организации
		
		|ЖурналДокументов.ЭлектронныеТрудовыеКнижки.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.ЭлектронныеТрудовыеКнижки.Чтение.Организации
		
		|РегистрСведений.МероприятияТрудовойДеятельности.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.МероприятияТрудовойДеятельности.Чтение.Организации
		
		|РегистрСведений.МероприятияТрудовойДеятельностиПрочие.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.МероприятияТрудовойДеятельностиПрочие.Чтение.Организации
		|РегистрСведений.МероприятияТрудовойДеятельностиПрочие.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.МероприятияТрудовойДеятельностиПрочие.Изменение.Организации
	
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек.Чтение.Организации
		
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные.Чтение.Организации
		
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(ЭлектронныеТрудовыеКнижки);
	
КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь)
		Или Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.МероприятияТрудовойДеятельности) Тогда
		
		Возврат;
	КонецЕсли;
	
	Раздел = НСтр("ru = 'Отчетность в ПФР';
					|en = 'PF reporting'");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сегодня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТИдМероприятия
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|ГДЕ
		|	Мероприятия.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение))
		|	И НАЧАЛОПЕРИОДА(Мероприятия.ДатаДокументаОснования, ДЕНЬ) < &Сегодня
		|	И Мероприятия.ДатаМероприятия >= &ДатаНачалаУчета
		|	И НЕ Мероприятия.Отменено
		|	И НЕ Мероприятия.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					МероприятияОтмененные.ИдМероприятия
		|				ИЗ
		|					РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
		|				ГДЕ
		|					МероприятияОтмененные.Отменено
		|					И Мероприятия.Организация = МероприятияОтмененные.Организация
		|					И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТИдМероприятия.Регистратор КАК Регистратор
		|ИЗ
		|	ВТИдМероприятия КАК ВТИдМероприятия";
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.ВременнаяТаблицаОтчитывающихсяПоВзносамОрганизаций(Запрос.МенеджерВременныхТаблиц, Регистраторы);
	УстановитьПривилегированныйРежим(Ложь);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.Организация.Наименование КАК ОрганизацияНаименование,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мероприятия.ИдМероприятия) КАК КоличествоМероприятий
		|ИЗ
		|	ВТИдМероприятия КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтчитывающиесяОрганизации КАК ОтчитывающиесяОрганизации
		|		ПО Мероприятия.Организация = ОтчитывающиесяОрганизации.Организация
		|			И Мероприятия.Регистратор = ОтчитывающиесяОрганизации.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО (МероприятияПереданные.Организация В (ОтчитывающиесяОрганизации.ОтчитывающаясяПоВзносамОрганизация, Мероприятия.Организация))
		|			И Мероприятия.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|ГДЕ
		|	МероприятияПереданные.ИдМероприятия ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Мероприятия.Организация,
		|	Мероприятия.Организация.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Мероприятия.Организация.Наименование";
	
	ВыборкаПоГотовымКПередаче = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоГотовымКПередаче.Следующий() Цикл
		
		Дело = ТекущиеДела.Добавить();
		
		Дело.Идентификатор  = "ПодневнаяПередачаМероприятий"
			+ СтрЗаменить(ВыборкаПоГотовымКПередаче.Организация.УникальныйИдентификатор(), "-", "");
		
		Дело.ЕстьДела       = (ВыборкаПоГотовымКПередаче.КоличествоМероприятий > 0);
		Дело.Важное         = Истина;
		Дело.Владелец       = Раздел;
		Дело.Представление  = НСтр("ru = 'Передать в ПФР мероприятия Прием/Увольнение';
									|en = 'Transfer Hiring/Dismissal events to PF'")
			+ ", " + ВыборкаПоГотовымКПередаче.ОрганизацияНаименование;
		
		Дело.Количество     = ВыборкаПоГотовымКПередаче.КоличествоМероприятий;
		Дело.Подсказка      =
			НСтр("ru = 'В случаях приема на работу или увольнения сотрудника сведения о мероприятиях подаются не позднее рабочего дня, следующего за днем издания соответствующего приказа.';
				|en = 'In cases of hiring or dismissing an employee, information about the events is submitted no later than on the working day following the day of the corresponding order issuance.'");
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Организация", ВыборкаПоГотовымКПередаче.Организация);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ЗаполнитьПриемамиИУвольнениями", Истина);
		
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Форма          = "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Форма.ФормаДокумента";
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру с описание трудовой деятельности сотрудника в заданном периоде.
// Данные отбираются кратно месяцу т.е. с начала месяца начала периода и по конец месяца окончания периода.
//
// Параметры:
//		Сотрудник				- Массив, СправочникСсылка.Сотрудники
//		НачалоПериода			- Дата, если не задана то возвращает данные, начиная с даты приема
//		ОкончаниеПериода		- Дата, если не задана то возвращает все учтенные данные
//		ИсключаемыйРегистратор	- ДокументСсылка
//		ПараметрыЗаполнения		- Структура:
//									* ДляПоДневногоОтчета	- Булево
//									* ДатаЗаполнения		- Дата
//
// Возвращаемое значение;
//		Структура		- по строке таблицы значений см. ПустаяТаблицаДанныхТрудовойДеятельности
//		Неопределено	- Если данных о трудовой деятельности нет
//
Функция ДанныеТрудовойДеятельностиСотрудника(ТолькоРазрешенные, ФизическоеЛицо, Организация, НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено, ИсключаемыйРегистратор = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	ДанныеСотрудников = ДанныеТрудовойДеятельностиСотрудников(
		ТолькоРазрешенные, Организация, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), НачалоПериода, ОкончаниеПериода, , ИсключаемыйРегистратор, ПараметрыЗаполнения);
	
	Если ДанныеСотрудников.Количество() > 0 Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеСотрудников)[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает массив структур с описание трудовой деятельности сотрудников в заданном периоде.
// Данные отбираются кратно месяцу т.е. с начала месяца начала периода и по конец месяца окончания периода.
//
// Параметры:
//		Сотрудники			- Массив, состоящий из СправочникСсылка.Сотрудники
//		НачалоПериода		- Дата, если не задана то возвращает данные, начиная с даты приема
//		ОкончаниеПериода	- Дата, если не задана то возвращает все учтенные данные
//
// Возвращаемое значение;
//		ТаблицаЗначений		- см.ПустаяТаблицаДанныхТрудовойДеятельности
//
Функция ДанныеТрудовойДеятельностиСотрудников(ТолькоРазрешенные, Организация, ФизическоеЛицо = Неопределено, НачалоПериода = Неопределено, ОкончаниеПериода = Неопределено, МероприятияВсехСотрудников = Ложь, ИсключаемыйРегистратор = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		
		Если ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ДобавляемыеФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
		Иначе
			
			Если ФизическоеЛицо = Неопределено Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ФизическиеЛица.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ФизическиеЛица КАК ФизическиеЛица
					|ГДЕ
					|	НЕ ФизическиеЛица.ЭтоГруппа";
				
				ДобавляемыеФизическиеЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
			Иначе
				ДобавляемыеФизическиеЛица = ФизическоеЛицо;
			КонецЕсли;
			
		КонецЕсли;
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ДобавляемыеФизическиеЛица, "Фамилия, Имя, Отчество, СтраховойНомерПФР, ДатаРождения, Страна, ИНН, ВидЗастрахованногоЛица");
		
		ТаблицаДанных = ПустаяТаблицаДанныхТрудовойДеятельности();
		Для Каждого КадровыеДанныеФизическогоЛица Из КадровыеДанные Цикл
			ДанныеСотрудника = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСотрудника, КадровыеДанныеФизическогоЛица);
			ДанныеСотрудника.Гражданство = КадровыеДанныеФизическогоЛица.Страна;
			ДанныеСотрудника.КодКатегории = ПерсонифицированныйУчет.КодКатегорииЗарегистрированногоЛицаЕФС1(КадровыеДанныеФизическогоЛица.ВидЗастрахованногоЛица);
		КонецЦикла;
		
		Возврат ТаблицаДанных;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОрганизацииСбораДанных = УчетСтраховыхВзносов.ОрганизацииДляКонсолидацииОтчетовПоВзносам(Организация, ОкончаниеПериода);
	Запрос.УстановитьПараметр("Организация", ОрганизацииСбораДанных);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета());
	
	Если ФизическоеЛицо <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачалоПериода)
		Или ЗначениеЗаполнено(ОкончаниеПериода) Тогда
		
		Запрос.УстановитьПараметр("НачалоПериода", ?(ЗначениеЗаполнено(НачалоПериода), НачалоМесяца(НачалоПериода), ДатаНачалаУчета()));
		Запрос.УстановитьПараметр("ОкончаниеПериода", ?(ЗначениеЗаполнено(ОкончаниеПериода), ОкончаниеПериода, '39991231'));
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Организация,
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	&НачалоПериода КАК НачалоПериода,
			|	&ОкончаниеПериода КАК ОкончаниеПериода,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > &ОкончаниеПериода
			|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
			|		ИНАЧЕ &ОкончаниеПериода
			|	КОНЕЦ КАК ПериодКадровыхДанных
			|ПОМЕСТИТЬ ВТСотрудникиПериодыДанных
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
			|		ПО (Организации.Ссылка В (&Организация))
			|ГДЕ
			|	Сотрудники.ФизическоеЛицо В(&ФизическоеЛицо)
			|	И Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник
			|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		Если ФизическоеЛицо = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ФизическоеЛицо В(&ФизическоеЛицо)", "(ИСТИНА)");
		КонецЕсли;
		
		Запрос.Выполнить();
		
	Иначе
		
		Отборы = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		
		Если ФизическоеЛицо <> Неопределено Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ФизическоеЛицо", "В", ФизическоеЛицо);
		КонецЕсли;
		
		КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Отборы, "ДатаПриема,ДатаУвольнения");
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Организация,
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема < ДАТАВРЕМЯ(2020, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(2020, 1, 1)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, МЕСЯЦ)
			|	КОНЕЦ КАК НачалоПериода,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
			|		ИНАЧЕ КОНЕЦПЕРИОДА(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ)
			|	КОНЕЦ КАК ОкончаниеПериода,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|	КОНЕЦ КАК ПериодКадровыхДанных
			|ПОМЕСТИТЬ ВТСотрудникиПериодыДанных
			|ИЗ
			|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
			|		ПО (Организации.Ссылка В (&Организация))
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник.ГоловнойСотрудник";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат ДанныеТрудовойДеятельностиСотрудниковПоТаблицеОтборов(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ОрганизацииСбораДанных, МероприятияВсехСотрудников, ИсключаемыйРегистратор, ПараметрыЗаполнения);
	
КонецФункции

// Возвращает массив структур с описание трудовой деятельности сотрудников заданной организации
// в заданном периоде. Данные отбираются кратно месяцу т.е. с начала месяца начала периода и по
// конец месяца окончания периода.
//
// Параметры:
//		Организация			- СправочникСсылка.Организации
//		НачалоПериода		- Дата, если не задана то возвращает данные, начиная с даты приема
//		ОкончаниеПериода	- Дата, если не задана то возвращает все учтенные данные
//
// Возвращаемое значение;
//		ТаблицаЗначений		- см. ПустаяТаблицаДанныхТрудовойДеятельности
//
Функция ДанныеТрудовойДеятельностиСотрудниковОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, МероприятияВсехСотрудников = Ложь, ИсключаемыйРегистратор = Неопределено, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Возврат ДанныеТрудовойДеятельностиСотрудников(
		ТолькоРазрешенные, Организация, , НачалоПериода, ОкончаниеПериода, МероприятияВсехСотрудников, ИсключаемыйРегистратор, ПараметрыЗаполнения);
	
КонецФункции

Функция ВывестиМакетыДокументов(ДокументРезультат, ВыборкаДанныхДляПечати, ПутьКМакету, ОбъектыПечати) Экспорт
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ЧастиПутиКМакету = СтрРазделить(ПутьКМакету, ".");
	ДокументРезультат.КлючПараметровПечати = ЧастиПутиКМакету[ЧастиПутиКМакету.Количество() - 1];
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	
	Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("НомерСтрокиСотрудника") Цикл
			
			Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("Организация") Цикл
				
				Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				Шапка = Макет.ПолучитьОбласть("Шапка");
				Шапка.Параметры.Заполнить(ВыборкаДанныхДляПечати);
				Шапка.Параметры.ДатаРождения = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Шапка.Параметры.ДатаРождения, Ложь);
				
				ОтформатироватьИНН(Шапка.Параметры, "ИНН");
				ОтформатироватьИНН(Шапка.Параметры, "ПрежнийСтраховательИНН");
				
				Подвал = Макет.ПолучитьОбласть("Подвал");
				Подвал.Параметры.Заполнить(ВыборкаДанныхДляПечати);
				
				ДополнительныеПараметры = Новый Структура("ДатаСведений",
					ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ВыборкаДанныхДляПечати.Дата, Истина));
				
				Подвал.Параметры.Заполнить(ДополнительныеПараметры);
				
				ДокументРезультат.Вывести(Шапка);
				
				ОбластиСтрок = Новый Массив;
				НомерСтрокиФормы = 1;
				Пока ВыборкаДанныхДляПечати.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ВидМероприятия) Тогда
						Продолжить;
					КонецЕсли;
					
					Строка = Макет.ПолучитьОбласть("Строка");
					
					Строка.Параметры.Заполнить(ВыборкаДанныхДляПечати);
					Строка.Параметры.НомерСтрокиФормы = НомерСтрокиФормы;
					
					Строка.Параметры.ТрудоваяФункция = ПредставлениеВыполняемойФункции(ВыборкаДанныхДляПечати);
					
					Строка.Параметры.ВидМероприятия = ПредставлениеВидаМероприятия(ВыборкаДанныхДляПечати, Истина);
					
					Если ВыборкаДанныхДляПечати.Дата >= '20210701' Тогда
						Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ) Тогда
							СтруктураЗаполнения = Новый Структура;
							СтруктураЗаполнения.Вставить("КодПоОКЗ",
								ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанныхДляПечати.КодПоОКЗ));
							Строка.Параметры.Заполнить(СтруктураЗаполнения);
						КонецЕсли;
					КонецЕсли;
					
					Если ВыборкаДанныхДляПечати.Дата >= '20230101' Тогда
						Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ)
							Или ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод) Тогда
							
							ПредставленияКодов = Новый Массив;
							Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ) Тогда
								ПредставленияКодов.Добавить(
									ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанныхДляПечати.КодПоОКЗ));
							КонецЕсли;
							Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод) Тогда
								ПредставленияКодов.Добавить(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод);
							КонецЕсли;
							СтруктураЗаполнения = Новый Структура;
							СтруктураЗаполнения.Вставить("КодПоОКЗТрудоваяФункцияКод",
								СтрСоединить(ПредставленияКодов, ", "));
							Строка.Параметры.Заполнить(СтруктураЗаполнения);
						КонецЕсли;
					Иначе
						СтруктураЗаполнения = Новый Структура;
						СтруктураЗаполнения.Вставить("КодПоОКЗТрудоваяФункцияКод",
							ВыборкаДанныхДляПечати.ТрудоваяФункцияКод);
						Строка.Параметры.Заполнить(СтруктураЗаполнения);
					КонецЕсли;
					
					УстановитьПараметрыДокументовОснований(Строка, ВыборкаДанныхДляПечати);
					
					Если ЗначениеЗаполнено(Строка.Параметры.ОснованиеУвольнения) Тогда
						Строка.Параметры.ОснованиеУвольнения = ПредставлениеПричиныУвольнения(ВыборкаДанныхДляПечати);
					КонецЕсли;
					
					ОбластиСтрок.Добавить(Строка);
					НомерСтрокиФормы = НомерСтрокиФормы + 1;
					
				КонецЦикла;
				
				Для Каждого Строка Из ОбластиСтрок Цикл
					
					МассивОбластей = Новый Массив;
					МассивОбластей.Добавить(Строка);
					Если Строка = ОбластиСтрок[ОбластиСтрок.Количество() - 1] Тогда
						МассивОбластей.Добавить(Подвал);
					КонецЕсли;
					
					Если Не ДокументРезультат.ПроверитьВывод(МассивОбластей) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
					КонецЕсли;
					
					ДокументРезультат.Вывести(Строка);
					
				КонецЦикла;
				
				ДокументРезультат.Вывести(Подвал);
				
			КонецЦикла;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДанныхДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ВывестиМакетыДокументовСТДР(ДокументРезультат, ВыборкаДанныхДляПечати, ПутьКМакету, ОбъектыПечати) Экспорт
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ЧастиПутиКМакету = СтрРазделить(ПутьКМакету, ".");
	ДокументРезультат.КлючПараметровПечати = ЧастиПутиКМакету[ЧастиПутиКМакету.Количество() - 1];
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПутьКМакету);
	
	Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("НомерСтрокиСотрудника") Цикл
			
			Пока ВыборкаДанныхДляПечати.СледующийПоЗначениюПоля("Организация") Цикл
				
				Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				Шапка = Макет.ПолучитьОбласть("Шапка");
				Шапка.Параметры.Заполнить(ВыборкаДанныхДляПечати);
				Шапка.Параметры.ДатаРождения = ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(Шапка.Параметры.ДатаРождения, Ложь);
				Если ЗарплатаКадры.ИспользованиеРегистрационногоНомераСФР(ВыборкаДанныхДляПечати.Дата, ВыборкаДанныхДляПечати.Организация)
					И ЗначениеЗаполнено(ВыборкаДанныхДляПечати.РегистрационныйНомерСФР) Тогда
					
					ПараметрыНомераСФР = Новый Структура("РегистрационныйНомерПФР", ВыборкаДанныхДляПечати.РегистрационныйНомерСФР);
					Шапка.Параметры.Заполнить(ПараметрыНомераСФР);
				КонецЕсли;
				
				ОтформатироватьИНН(Шапка.Параметры, "ИНН");
				ОтформатироватьИНН(Шапка.Параметры, "ПрежнийСтраховательИНН");
				
				Подвал = Макет.ПолучитьОбласть("Подвал");
				Подвал.Параметры.Заполнить(ВыборкаДанныхДляПечати);
				
				ДополнительныеПараметры = Новый Структура("ДатаСведений",
					ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ВыборкаДанныхДляПечати.Дата, Истина));
				
				Подвал.Параметры.Заполнить(ДополнительныеПараметры);
				
				ДокументРезультат.Вывести(Шапка);
				
				ОбластиСтрок = Новый Массив;
				НомерСтрокиФормы = 1;
				Пока ВыборкаДанныхДляПечати.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ВидМероприятия) Тогда
						Продолжить;
					КонецЕсли;
					
					Строка = Макет.ПолучитьОбласть("Строка");
					
					Строка.Параметры.Заполнить(ВыборкаДанныхДляПечати);
					Строка.Параметры.НомерСтрокиФормы = НомерСтрокиФормы;
					
					Строка.Параметры.ТрудоваяФункция = ПредставлениеВыполняемойФункции(ВыборкаДанныхДляПечати, Истина);
					
					Строка.Параметры.ВидМероприятия = ПредставлениеВидаМероприятия(ВыборкаДанныхДляПечати, Ложь);
					
					Если ВыборкаДанныхДляПечати.Дата >= '20210701' Тогда
						Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ) Тогда
							СтруктураЗаполнения = Новый Структура;
							СтруктураЗаполнения.Вставить("КодПоОКЗ",
								ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанныхДляПечати.КодПоОКЗ));
							Строка.Параметры.Заполнить(СтруктураЗаполнения);
						КонецЕсли;
					КонецЕсли;
					
					Если ВыборкаДанныхДляПечати.Дата >= '20230101' Тогда
						Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ)
							Или ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод) Тогда
							
							ПредставленияКодов = Новый Массив;
							Если ЗначениеЗаполнено(ВыборкаДанныхДляПечати.КодПоОКЗ) Тогда
								ПредставленияКодов.Добавить(
									ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанныхДляПечати.КодПоОКЗ));
							КонецЕсли;
							Если ВыборкаДанныхДляПечати.Дата < ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023()
								И ЗначениеЗаполнено(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод) Тогда
								
								ПредставленияКодов.Добавить(ВыборкаДанныхДляПечати.ТрудоваяФункцияКод);
							КонецЕсли;
							СтруктураЗаполнения = Новый Структура;
							СтруктураЗаполнения.Вставить("КодПоОКЗТрудоваяФункцияКод",
								СтрСоединить(ПредставленияКодов, ", "));
							Строка.Параметры.Заполнить(СтруктураЗаполнения);
						КонецЕсли;
					Иначе
						СтруктураЗаполнения = Новый Структура;
						СтруктураЗаполнения.Вставить("КодПоОКЗТрудоваяФункцияКод",
							ВыборкаДанныхДляПечати.ТрудоваяФункцияКод);
						Строка.Параметры.Заполнить(СтруктураЗаполнения);
					КонецЕсли;
					
					УстановитьПараметрыДокументовОснований(Строка, ВыборкаДанныхДляПечати);
					
					Если ЗначениеЗаполнено(Строка.Параметры.ОснованиеУвольнения) Тогда
						Строка.Параметры.ОснованиеУвольнения = ПредставлениеПричиныУвольнения(ВыборкаДанныхДляПечати);
					КонецЕсли;
					
					ОбластиСтрок.Добавить(Строка);
					НомерСтрокиФормы = НомерСтрокиФормы + 1;
					
				КонецЦикла;
				
				Для Каждого Строка Из ОбластиСтрок Цикл
					
					МассивОбластей = Новый Массив;
					МассивОбластей.Добавить(Строка);
					Если Строка = ОбластиСтрок[ОбластиСтрок.Количество() - 1] Тогда
						МассивОбластей.Добавить(Подвал);
					КонецЕсли;
					
					Если Не ДокументРезультат.ПроверитьВывод(МассивОбластей) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицы"));
					КонецЕсли;
					
					ДокументРезультат.Вывести(Строка);
					
				КонецЦикла;
				
				ДокументРезультат.Вывести(Подвал);
				
			КонецЦикла;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДанныхДляПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура НаименованиеДокументаПриИзмененииНаСервере(Организация, ВидДокумента, НаименованиеДокумента) Экспорт
	
	НаименованияДокументов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭлектронныеТрудовыеКнижки", "НаименованияДокументов");
	Если НаименованияДокументов = Неопределено Тогда
		НаименованияДокументов = Новый Соответствие;
	КонецЕсли;
	
	НаименованияДокументовОрганизации = НаименованияДокументов.Получить(Организация);
	Если НаименованияДокументовОрганизации = Неопределено Тогда
		НаименованияДокументовОрганизации = Новый Структура;
	КонецЕсли;
	
	НаименованияДокументовОрганизации.Вставить(ВидДокумента, НаименованиеДокумента);
	НаименованияДокументов.Вставить(Организация, НаименованияДокументовОрганизации);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЭлектронныеТрудовыеКнижки", "НаименованияДокументов", НаименованияДокументов);
	
КонецПроцедуры

Функция НаименованиеДокументаПоВидуДокументаСобытия(Организация, ВидДокумента, НаименованиеПоУмолчанию = "") Экспорт
	
	НаименованиеДокумента = "";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		НаименованияДокументов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭлектронныеТрудовыеКнижки", "НаименованияДокументов");
		Если НаименованияДокументов <> Неопределено Тогда
			
			НаименованияДокументовОрганизации = НаименованияДокументов.Получить(Организация);
			Если НаименованияДокументовОрганизации <> Неопределено Тогда
				
				Если НаименованияДокументовОрганизации.Свойство(ВидДокумента) Тогда
					
					Если ЗначениеЗаполнено(НаименованияДокументовОрганизации[ВидДокумента]) Тогда
						НаименованиеДокумента = НаименованияДокументовОрганизации[ВидДокумента];
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеДокумента) Тогда
		Если ЗначениеЗаполнено(НаименованиеПоУмолчанию) Тогда
			НаименованиеДокумента = НаименованиеПоУмолчанию;
		Иначе
			НаименованиеДокумента = НаименованиеДокументаОснования();
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаименованиеДокумента
	
КонецФункции

Процедура СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижек(ЗаявленияОВеденииТрудовыхКнижек, ДанныеДляПроведения) Экспорт
	
	СформироватьДвижения(ЗаявленияОВеденииТрудовыхКнижек, ДанныеДляПроведения, Ложь);
	
КонецПроцедуры

Процедура СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижекПереданных(ЗаявленияОВеденииТрудовыхКнижекПереданные, ДанныеДляПроведения) Экспорт
	
	СформироватьДвижения(ЗаявленияОВеденииТрудовыхКнижекПереданные, ДанныеДляПроведения, Ложь);
	
КонецПроцедуры

Процедура СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижекОтозванные(ЗаявленияОВеденииТрудовыхКнижекОтозванные, ДанныеДляПроведения) Экспорт
	
	СформироватьДвижения(ЗаявленияОВеденииТрудовыхКнижекОтозванные, ДанныеДляПроведения, Ложь);
	
КонецПроцедуры

Функция ПараметрыФормированияДвиженийМероприятийТрудовойДеятельности() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ДополнитьСведениямиОЗанятости", Ложь);
	ПараметрыФормирования.Вставить("ДополнитьСведениямиОДолжности", Ложь);
	ПараметрыФормирования.Вставить("ПолучатьИсточникДанныхОТерриториальныхУсловиях", Ложь);
	ПараметрыФормирования.Вставить("ДополнитьСведениямиОТерриториальныхУсловиях", Истина);
	ПараметрыФормирования.Вставить("ДополнитьСведениямиОКодахПоОКЗ", Истина);
	ПараметрыФормирования.Вставить("Записать", Ложь);
	ПараметрыФормирования.Вставить("ДополнитьСведениямиОбУсловияхТрудовогоДоговора", Истина);
	
	Возврат ПараметрыФормирования;
	
КонецФункции

Процедура СформироватьДвиженияМероприятийТрудовойДеятельности(МероприятияТрудовойДеятельности, ДанныеДляПроведения, Знач ПараметрыФормирования = Неопределено) Экспорт
	
	Если ПараметрыФормирования = Неопределено Тогда
		ПараметрыФормирования = ПараметрыФормированияДвиженийМероприятийТрудовойДеятельности();
	КонецЕсли;
	
	СвойстваДоговоров = Новый Соответствие;
	Если ДанныеДляПроведения <> Неопределено Тогда
		
		ПолученыКадровыеДанные = Ложь;
		Если ПараметрыФормирования.ДополнитьСведениямиОЗанятости
			Или ПараметрыФормирования.ДополнитьСведениямиОДолжности
			Или ПараметрыФормирования.ПолучатьИсточникДанныхОТерриториальныхУсловиях
			Или ПараметрыФормирования.ДополнитьСведениямиОбУсловияхТрудовогоДоговора Тогда
			
			ИменаДоступныхПолей = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий();
			
			ТаблицаСотрудников = Новый ТаблицаЗначений;
			ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			Для Каждого ДанныеСотрудника Из ДанныеДляПроведения Цикл
				СтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
				СтрокаТаблицыСотрудников.Период = ДанныеСотрудника.ДатаМероприятия;
				СтрокаТаблицыСотрудников.Сотрудник = ДанныеСотрудника.Сотрудник;
			КонецЦикла;
			
			ПараметрыСведенийОПоследнихМероприятиях = Новый Структура("ИсключаемыеРегистраторы",
				МероприятияТрудовойДеятельности.Отбор.Регистратор.Значение);
			
			ПоляОтбораПериодическихДанных = Новый Структура("СведенияОПоследнихМероприятияхТрудовойДеятельности", ПараметрыСведенийОПоследнихМероприятиях);
			
			ИсключаемыеВидыМероприятий = Новый Массив;
			ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование);
			ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ);
			ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ);
			ПараметрыМероприятияТрудовойДеятельностиПереданные = Новый Массив;
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПараметрыМероприятияТрудовойДеятельностиПереданные, "ВидМероприятия", "НЕ В", ИсключаемыеВидыМероприятий);
			ПоляОтбораПериодическихДанных.Вставить("МероприятияТрудовойДеятельностиПереданные", ПараметрыМероприятияТрудовойДеятельностиПереданные);
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудниковПоТаблицеЗначений(
				Ложь, ТаблицаСотрудников, ИменаКадровыхДанныхДляФормированияМероприятий(), ПоляОтбораПериодическихДанных);
			
			СвойстваДоговоров = СвойстваДоговоровСотрудников(КадровыеДанныеСотрудников, ДанныеДляПроведения);
			
			ПолученыКадровыеДанные = Истина;
			
		КонецЕсли;
		
		Для Каждого ДанныеСотрудника Из ДанныеДляПроведения Цикл
			
			КадровыеДанныеСотрудника = Неопределено;
			Если ПолученыКадровыеДанные Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Сотрудник", ДанныеСотрудника.Сотрудник);
				СтруктураПоиска.Вставить("Период", ДанныеСотрудника.ДатаМероприятия);
				НайденныеКадровыеДанные = КадровыеДанныеСотрудников.НайтиСтроки(СтруктураПоиска);
				Если НайденныеКадровыеДанные.Количество() > 0 Тогда
					КадровыеДанныеСотрудника = НайденныеКадровыеДанные[0];
					Для Каждого КолонкаТаблицы Из КадровыеДанныеСотрудников.Колонки Цикл
						Если ДанныеСотрудника.Свойство(КолонкаТаблицы.Имя)
							И ЗначениеЗаполнено(ДанныеСотрудника[КолонкаТаблицы.Имя]) Тогда
							
							КадровыеДанныеСотрудника[КолонкаТаблицы.Имя] = ДанныеСотрудника[КолонкаТаблицы.Имя];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыФормирования.ДополнитьСведениямиОТерриториальныхУсловиях Тогда
				ДополнитьСведениямиОТерриториальныхУсловиях(ДанныеСотрудника, ПараметрыФормирования, КадровыеДанныеСотрудников);
			КонецЕсли;
			
			Если ПараметрыФормирования.ДополнитьСведениямиОКодахПоОКЗ
				И Не ЗначениеЗаполнено(ДанныеСотрудника.КодПоОКЗ) Тогда
				
				Если Не ЗначениеЗаполнено(ДанныеСотрудника.ТрудоваяФункция)
					И КадровыеДанныеСотрудника <> Неопределено Тогда
					
					ДанныеСотрудника.ТрудоваяФункция = ТрудоваяФункцияПоКадровымДаннымДляФормированияМероприятий(КадровыеДанныеСотрудника);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСотрудника.ТрудоваяФункция) Тогда
					ДанныеСотрудника.КодПоОКЗ = ЭлектронныеТрудовыеКнижкиПовтИсп.КодПоОКЗТрудовойФункции(
						ДанныеСотрудника.ТрудоваяФункция);
				ИначеЕсли КадровыеДанныеСотрудника <> Неопределено
					И КадровыеДанныеСотрудника.Владелец().Колонки.Найти("КодПоОКЗ") <> Неопределено
					И ЗначениеЗаполнено(КадровыеДанныеСотрудника["КодПоОКЗ"]) Тогда
					
					ДанныеСотрудника.КодПоОКЗ = КадровыеДанныеСотрудника["КодПоОКЗ"];
				КонецЕсли;
			КонецЕсли;
			
			Если (ПараметрыФормирования.ДополнитьСведениямиОЗанятости
				Или ПараметрыФормирования.ДополнитьСведениямиОДолжности) Тогда
				
				Если КадровыеДанныеСотрудника <> Неопределено Тогда
					
					Если КадровыеДанныеСотрудника.ВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
						ДанныеСотрудника.ЯвляетсяСовместителем = Истина;
					КонецЕсли;
					
					ДоступныеПоля = ИменаДоступныхПолей.Получить(ДанныеСотрудника.ВидМероприятия);
					Если ДоступныеПоля <> Неопределено Тогда
						Если СтрНайти(ДоступныеПоля, "Должность") > 0 Тогда
							Если ПараметрыФормирования.ДополнитьСведениямиОДолжности Тогда
								Если Не ЗначениеЗаполнено(ДанныеСотрудника.Должность) Тогда
									ДанныеСотрудника.Должность = КадровыеДанныеСотрудника.Должность;
									СвойстваДолжности = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваДолжности(ДанныеСотрудника.Должность);
									ДанныеСотрудника.ПредставлениеДолжности = СвойстваДолжности.Представление;
									ДанныеСотрудника.КодПоРееструДолжностей = СвойстваДолжности.КодПоРееструДолжностей;
								КонецЕсли;
								Если Не ЗначениеЗаполнено(ДанныеСотрудника.Подразделение) Тогда
									ДанныеСотрудника.Подразделение = КадровыеДанныеСотрудника.Подразделение;
									ДанныеСотрудника.ПредставлениеПодразделения =
										ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеПодразделения(
											ДанныеСотрудника.Подразделение);
								КонецЕсли;
								Если Не ЗначениеЗаполнено(ДанныеСотрудника.РазрядКатегория) Тогда
									Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КадровыеДанныеСотрудника, "РазрядКатегория") Тогда
										ДанныеСотрудника.РазрядКатегория = КадровыеДанныеСотрудника.РазрядКатегория;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(ДанныеСотрудника.ТрудоваяФункция)
							И СтрНайти(ДоступныеПоля, "ТрудоваяФункция") > 0 Тогда
							
							ДанныеСотрудника.ТрудоваяФункция = КадровыеДанныеСотрудника.ТрудоваяФункция;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыФормирования.ДополнитьСведениямиОбУсловияхТрудовогоДоговора Тогда
				ДанныеПериодовСотрудника = СвойстваДоговоров.Получить(КадровыеДанныеСотрудника.Сотрудник);
				Если ДанныеПериодовСотрудника <> Неопределено Тогда
					СвойстваДоговора = ДанныеПериодовСотрудника.Получить(ДанныеСотрудника.ДатаМероприятия);
					Если СвойстваДоговора <> Неопределено Тогда
						ЗаполнитьДанныеДоговора(ДанныеСотрудника, СвойстваДоговора);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеСотрудника.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение
				И Не ЗначениеЗаполнено(ДанныеСотрудника.ПричинаУвольненияПФР) Тогда
				
				ДанныеСотрудника.ПричинаУвольненияПФР = ЭлектронныеТрудовыеКнижкиПовтИсп.ПричинаУвольненияПФР(ДанныеСотрудника.ОснованиеУвольнения);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаОтмены) Тогда
				Если ЭлектронныеТрудовыеКнижкиПовтИсп.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности(ДанныеСотрудника.Организация) Тогда
					ДанныеСотрудника.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ДанныеСотрудника.ПредставлениеПодразделения = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СформироватьДвижения(МероприятияТрудовойДеятельности, ДанныеДляПроведения, ПараметрыФормирования.Записать);
	
КонецПроцедуры

Функция СвойстваДоговоровСотрудников(КадровыеДанныеСотрудников, ДанныеДляПроведения = Неопределено) Экспорт
	
	СвойстваДоговоров = Новый Соответствие;
	
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеДляПроведенияСотрудника = Новый Структура;
		Если ДанныеДляПроведения <> Неопределено Тогда
			Для Каждого ДанныеСотрудника Из ДанныеДляПроведения Цикл
				Если ДанныеСотрудника.Сотрудник = КадровыеДанныеСотрудника.Сотрудник
					И ДанныеСотрудника.ДатаМероприятия = КадровыеДанныеСотрудника.Период Тогда
					
					ДанныеДляПроведенияСотрудника = ДанныеСотрудника;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДанныеСотрудника = Новый Структура("СрочностьТрудовогоДоговора,УдаленностьРаботы,СокращенностьГрафика");
		
		ТрудовойДоговорДатаНачала = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КадровыеДанныеСотрудника, "ТрудовойДоговорДатаНачала") Тогда
			ТрудовойДоговорДатаНачала = КадровыеДанныеСотрудника.ТрудовойДоговорДатаНачала;
		КонецЕсли;
		ТрудовойДоговорДатаОкончания = Неопределено;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДляПроведенияСотрудника, "ТрудовойДоговорДатаОкончания")
			И ДанныеДляПроведенияСотрудника.ТрудовойДоговорДатаОкончания <> Неопределено Тогда
			
			ТрудовойДоговорДатаОкончания = ДанныеДляПроведенияСотрудника.ТрудовойДоговорДатаОкончания;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КадровыеДанныеСотрудника, "ТрудовойДоговорДатаОкончания") Тогда
			ТрудовойДоговорДатаОкончания = КадровыеДанныеСотрудника.ТрудовойДоговорДатаОкончания;
		КонецЕсли;
		ДанныеСотрудника.СрочностьТрудовогоДоговора = СрочностьТрудовогоДоговора(КадровыеДанныеСотрудника.ВидЗанятости,
			ТрудовойДоговорДатаНачала, ТрудовойДоговорДатаОкончания);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДляПроведенияСотрудника, "ГрафикРаботы")
			И ЗначениеЗаполнено(ДанныеДляПроведенияСотрудника.ГрафикРаботы) Тогда
			
			ГрафикРаботы = ДанныеДляПроведенияСотрудника.ГрафикРаботы;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КадровыеДанныеСотрудника, "ГрафикРаботы") Тогда
			ГрафикРаботы = КадровыеДанныеСотрудника.ГрафикРаботы;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			
			СвойстваГрафика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрафикРаботы, "СокращеннаяРабочаяНеделя,НеполныйРабочийДень");
			Если СвойстваГрафика.НеполныйРабочийДень = Истина Тогда
				ДанныеСотрудника.СокращенностьГрафика = Перечисления.СокращенностиГрафиков.НеполныйРабочийДень;
			ИначеЕсли СвойстваГрафика.СокращеннаяРабочаяНеделя = Истина Тогда
				ДанныеСотрудника.СокращенностьГрафика = Перечисления.СокращенностиГрафиков.НеполнаяРабочаяНеделя;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДляПроведенияСотрудника, "РаботаетДистанционно")
			И ДанныеДляПроведенияСотрудника.РаботаетДистанционно <> Неопределено Тогда
			
			РаботаетДистанционно = ДанныеДляПроведенияСотрудника.РаботаетДистанционно;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КадровыеДанныеСотрудника, "РаботаетДистанционно") Тогда
			РаботаетДистанционно = КадровыеДанныеСотрудника.РаботаетДистанционно;
		КонецЕсли;
		Если РаботаетДистанционно = Истина Тогда
			ДанныеСотрудника.УдаленностьРаботы = Перечисления.УдаленностиРаботы.Удаленная;
		КонецЕсли;
		
		ДанныеПериодовСотрудника = СвойстваДоговоров.Получить(КадровыеДанныеСотрудника.Сотрудник);
		Если ДанныеПериодовСотрудника = Неопределено Тогда
			ДанныеПериодовСотрудника = Новый Соответствие;
			СвойстваДоговоров.Вставить(КадровыеДанныеСотрудника.Сотрудник, ДанныеПериодовСотрудника);
		КонецЕсли;
		
		ДанныеПериодовСотрудника.Вставить(КадровыеДанныеСотрудника.Период, ДанныеСотрудника);
		
	КонецЦикла;
	
	Возврат СвойстваДоговоров;
	
КонецФункции

Функция СрочностьТрудовогоДоговора(ВидЗанятости, ТрудовойДоговорДатаНачала, ТрудовойДоговорДатаОкончания)
	
	Если Не ЗначениеЗаполнено(ВидЗанятости) Тогда
		Возврат Перечисления.СрочностиТрудовогоДоговора.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(ТрудовойДоговорДатаНачала) Тогда
		Если ВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
			Возврат Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству;
		Иначе
			Возврат Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор;
		КонецЕсли;
	КонецЕсли;
	
	Совместительство = Ложь;
	Если ВидЗанятости <> Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		Совместительство = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТрудовойДоговорДатаОкончания) Тогда
		Если Совместительство Тогда
			Возврат Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству;
		Иначе
			Возврат Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор;
		КонецЕсли;
	Иначе
		Если ДобавитьМесяц(ТрудовойДоговорДатаНачала, 6) > ТрудовойДоговорДатаОкончания Тогда
			Если Совместительство Тогда
				Возврат Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуДо6Месяцев;
			Иначе
				Возврат Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорДо6Месяцев;
			КонецЕсли;
		Иначе
			Если Совместительство Тогда
				Возврат Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуБолее6Месяцев;
			Иначе
				Возврат Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорБолее6Месяцев;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ИменаКадровыхДанныхДляФормированияМероприятий() Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.ИменаКадровыхДанныхДляФормированияМероприятий();
	
КонецФункции

Функция ТрудоваяФункцияПоКадровымДаннымДляФормированияМероприятий(КадровыеДанные)
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.ТрудоваяФункцияПоКадровымДаннымДляФормированияМероприятий(КадровыеДанные);
	
КонецФункции

Процедура ДополнитьСведениямиОТерриториальныхУсловиях(ДанныеМероприятия, ПараметрыФормирования, КадровыеДанныеСотрудников)
	
	ЭлектронныеТрудовыеКнижкиВнутренний.ДополнитьСведениямиОТерриториальныхУсловиях(ДанныеМероприятия, ПараметрыФормирования, КадровыеДанныеСотрудников)
	
КонецПроцедуры

Процедура СформироватьДвиженияМероприятийТрудовойДеятельностиПереданных(МероприятияТрудовойДеятельностиПереданные, ДанныеДляПроведения, Записать = Ложь) Экспорт
	
	СформироватьДвижения(МероприятияТрудовойДеятельностиПереданные, ДанныеДляПроведения, Записать);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.107";
	Обработчик.Процедура = "ЭлектронныеТрудовыеКнижки.ЗаполнитьСотрудниковЗаявленийОПредоставленииСведенийОТрудовойДеятельности";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d698366a-3da0-4f01-b101-3bb7976c09f6");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сотрудников заявлений о способе ведения трудовых книжек.';
									|en = 'Populating applications for employees employment record books maintaining method.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.107";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьЯвляетсяСовместителемВМероприятиях";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d7f331d3-da7e-4550-be93-41c93879ac9a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признаков совместителя в таблице мероприятий.';
									|en = 'Populating secondary job employee flags in the event table.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.114";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьИдМероприятий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dfc7e172-e0f0-4afe-b658-e371ea43d6c1");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификаторов мероприятий трудовой деятельности.';
									|en = 'Populating labor activity event IDs.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.115";
	Обработчик.Процедура = "РегистрыСведений.МероприятияТрудовойДеятельности.СформироватьНаборыЗаписейМероприятияТрудовойДеятельности";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("45142c16-05e8-4a57-8bcb-689b9486800a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение движений в регистре сведений ""Мероприятия трудовой деятельности"".';
									|en = 'Populating records in the ""Labor activity events"" information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.116";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.ЗаполнитьИдМероприятий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a6f2293c-ac91-4936-a02b-98fd98e325de");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение идентификаторов мероприятий трудовой деятельности.';
									|en = 'Populating labor activity event IDs.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.143";
	Обработчик.Процедура = "ЭлектронныеТрудовыеКнижки.ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельности";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c7a103b8-8f50-4969-8a79-5ac349d7d744");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение представлений мероприятий трудовой деятельности.';
									|en = 'Populating labor activity event presentations.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.143";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьСотрудниковМероприятий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5fe97e2a-87cb-4823-9851-d4a32bfc8c25");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сотрудников мероприятий сведений о трудовой деятельности.';
									|en = 'Populating employees of the labor activity events'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.179";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьВДвиженияхПризнакПринятоВПФР";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4f3b2aa5-e393-4281-ba78-958ad711ed1d");
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения мероприятий трудовой деятельности с признаком переданности в ПФР.';
									|en = 'Generates labor activity records with a transfer to PF flag.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.180";
	Обработчик.Процедура = "Документы.РегистрацияТрудовойДеятельности.ОтменитьЗадвоенныеМероприятияКадровыхПриказов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2516d9d9-9b9a-4788-857e-4c6e99203b29");
	Обработчик.Комментарий = НСтр("ru = 'Отменяет задвоенные мероприятия трудовой деятельности кадровых приказов.';
									|en = 'Cancels duplicate labor activities of personnel orders.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.182";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.УдалениеСтрокБезСотрудников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("989a1bd2-6f95-43b4-a53f-ad64b9a909e7");
	Обработчик.Комментарий = НСтр("ru = 'Удаление строк мероприятия трудовой деятельности без сотрудников.';
									|en = 'Deleting labor activity rows without employees.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.216";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнениеПризнакаПринятоВПФРВСтрокахСотрудников";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6f8f40fc-dc0d-4c9d-bd1d-cdbf445ec01a");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение признака ""Принято в ПФР"" в строках сотрудников.';
									|en = 'Populating ""Received in PF"" flag in the employee lines.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.79";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОбновитьДвиженияПереданныхМероприятийНеПринятыхВПФР";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6b9f6b82-3a2c-44ec-9ad0-7cdc35dfa64a");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов, принятых в ПФР.';
									|en = 'Updates the document register records received by PF.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.16.76";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.УдалитьДанныеОбОтправкеПустыхЗаявленийОВыбореСпособаВеденияТрудовойКнижки";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("79c98adb-2e59-11eb-80d8-4cedfb43b140");
	Обработчик.Комментарий = НСтр("ru = 'Удаляет данные об отправке пустых заявлений о выборе способа ведения трудовой книжки.';
									|en = 'Deletes data on sending empty applications for selecting a method of maintaining the employment record book.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.КлассификаторЗанятий) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.17.87";
		Обработчик.Процедура = "Справочники.КлассификаторЗанятий.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.88";
	Обработчик.Процедура = "ЭлектронныеТрудовыеКнижки.ЗаполнитьКодыТрудовыхФункцийПоДолжностям";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c3f98ef-6228-11eb-80dc-4cedfb43b140");
	Обработчик.Комментарий = НСтр("ru = 'Переносит коды ОКПДТР из справочника ""Должности"".';
									|en = 'Transfers RNCPWEPTC codes from the ""Job titles"" catalog.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.96";
	Обработчик.Процедура = "РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.ИсправитьДвиженияНеПринятыхДокументов";
	Обработчик.Комментарий = НСтр("ru = 'Исправляет движения Не принятых документов.';
									|en = 'Corrects the Not accepted documents register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.97";
	Обработчик.Процедура = "РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.ЗаполнитьОрганизации";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет организацию в регистре сведений ""Мероприятия трудовой деятельности переданные"".';
									|en = 'Populates the company in the ""Labor activities transferred"" information register.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.137";
	Обработчик.Процедура = "РегистрыСведений.МероприятияТрудовойДеятельности.ВосстановлениеПереданныхИдентификаторов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c810cde-03e2-4642-a1fb-073319e04463");
	Обработчик.Комментарий = НСтр("ru = 'Восстановление идентификаторов мероприятия трудовой деятельности кадровых приказов.';
									|en = 'Restoring labor activity IDs of personnel orders.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.18.72";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.ЗаполнитьОрганизацииМероприятий";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("292381cd-3b5e-455b-8c1c-8465d3f6b764");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет организацию в табличной части Мероприятия.';
									|en = 'Fills in a company in the Events table.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.106";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьКодПоОКЗ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e66a9bd5-ceeb-4906-82c0-0a1afd1ec3ab");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет Код ОКЗ в движениях документов.';
									|en = 'Fills ACO code in document register records.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.28.80";
	Обработчик.Процедура = "Справочники.ТрудовыеФункции.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСотрудниковЗаявленийОПредоставленииСведенийОТрудовойДеятельности(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|ГДЕ
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.УдалитьСотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		СформироватьДвиженияЗаявленийОСпособеВеденияТрудовыхКнижек(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект.Сотрудники, "УдалитьСотрудник");
		ФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		
		Для Каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл 
			СтрокаСотрудника.Сотрудник = ФизическиеЛица[СтрокаСотрудника.УдалитьСотрудник];
		КонецЦикла;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		СформироватьДвиженияЗаявленийОСпособеВеденияТрудовыхКнижек(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельности(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	Мероприятия.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|ГДЕ
		|	НЕ Мероприятия.Регистратор В (&МассивОбновленных)
		|	И (Мероприятия.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И Мероприятия.ПредставлениеДолжности = """"
		|			ИЛИ Мероприятия.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				И Мероприятия.ПредставлениеПодразделения = """"
		|			ИЛИ НЕ Мероприятия.ОснованиеУвольнения В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка))
		|				И Мероприятия.ОснованиеУвольненияСтатья = """")";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПрочие(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Регистратор);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельности.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		ЗаполнитьПредставленияКоллекцииМероприятий(НаборЗаписей);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПрочие(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЗаявленияСотрудниковОВеденииТрудовыхКнижек(ТолькоРазрешенные, Организация, ДатаСведений, ФизическиеЛица = Неопределено, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСведений", НачалоДня(ДатаСведений));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ДатаСведений КАК Период,
		|	&Организация КАК Организация,
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	&УсловияОтборов";
	
	УсловияОтборов = Новый Массив;
	Если ФизическиеЛица <> Неопределено Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		УсловияОтборов.Добавить("ФизическиеЛица.Ссылка В (&ФизическиеЛица)");
	КонецЕсли;
	
	Если УсловияОтборов.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтборов", "(ИСТИНА)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтборов", СтрСоединить(УсловияОтборов, Символы.ПС + "И "));
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗаявленияСотрудников();
	Результат = СоздатьВТЗаявленияСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, "", ИсключаемыйРегистратор);
	
	Возврат Результат.Выгрузить();
	
КонецФункции

#Область КадровыеДанныеСотрудников

Функция ДобавитьПолеСведенийЗаявленийОВеденииТрудовойКнижки(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияЗаявленийОВеденииТрудовойКнижки(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияЗаявленийОВеденииТрудовойКнижки", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийЗаявленийОВеденииТрудовойКнижки(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийЗаявленийОВеденииТрудовойКнижки(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияЗаявленийОВеденииТрудовойКнижки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиЗапроса = Новый Массив;
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗаявленияСотрудников();
	ПараметрыПостроения.ИмяВТСотрудникиПериоды = ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников;
	ПараметрыПостроения.ИмяПоляФизическоеЛицо = ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо";
	ПараметрыПостроения.ИмяПоляПериод = ОписательВременнойТаблицыОтборов.ИмяПоляПериод;
	
	ЗапросВТ = ЗапросВТЗаявленияСотрудников(ТолькоРазрешенные, ПараметрыПостроения, , , ПоляОтбораПериодическихДанных);
	ЧастиЗапроса.Добавить(ЗапросВТ.Текст);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ТекстЗапросаСведений = СтрСоединить(ЧастиЗапроса, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ТаблицыЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запрос.Текст, ";", , Истина);
	ТаблицыЗапроса.Вставить(ТаблицыЗапроса.Количество() - 1, ТекстЗапросаСведений);
	Запрос.Текст = СтрСоединить(ТаблицыЗапроса, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	ЧастиЗапроса.Добавить(
		"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияСотрудников КАК СведенияЗаявленийОВеденииТрудовойКнижки
		|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияЗаявленийОВеденииТрудовойКнижки.Период
		|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо = СведенияЗаявленийОВеденииТрудовойКнижки.ФизическоеЛицо
		|			И (СведенияЗаявленийОВеденииТрудовойКнижки.ТекущееЗаявление)}");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТЗаявленияСотрудников");
	
КонецПроцедуры

Функция ДобавитьПолеСведенийОМероприятияхТрудовойДеятельности(ИмяПоля, ТекстыОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМероприятияхТрудовойДеятельности(ИмяПоля) Тогда
		
		Если НеобходимыСведенияОПоследнихМероприятийТрудовойДеятельности(ИмяПоля) Тогда
			
			ИсточникиДанных.Вставить("СведенияОПоследнихМероприятияхТрудовойДеятельности", Истина);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
				КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "КадроваяИсторияСотрудников", "Организация");
			КонецЕсли;
			
		ИначеЕсли НеобходимыОбщиеСведенияОМероприятияхТрудовойДеятельности(ИмяПоля) Тогда
			ИсточникиДанных.Вставить("ОбщиеСведенияОМероприятияхТрудовойДеятельности", Истина);
		КонецЕсли;
		
		ДобавленоПолеСведений = Истина;
		
		ПутьКДанным = ПутьКДаннымСведенийОМероприятияхТрудовойДеятельности(ИмяПоля);
		ТекстыОписанияПолей.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенийОМероприятияхТрудовойДеятельности(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных) Экспорт
	
	Если ИсточникиДанных.Получить("СведенияОПоследнихМероприятияхТрудовойДеятельности") = Неопределено
		И ИсточникиДанных.Получить("ОбщиеСведенияОМероприятияхТрудовойДеятельности") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("ОбщиеСведенияОМероприятияхТрудовойДеятельности") <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ДатаНачалаУчетаЭТК", ДатаНачалаУчета());
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТаблицаОтбора.Период КАК Период,
			|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА Мероприятия.ДатаМероприятия < &ДатаНачалаУчетаЭТК
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПередавалисьДоНачалаУчета,
			|	ИСТИНА КАК Передавались
			|ПОМЕСТИТЬ ВТСведенияОМероприятияхТрудовойДеятельностиПредварительно
			|ИЗ
			|	ВТТаблицаОтбора КАК ТаблицаОтбора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
			|			ПО &УсловияСоединения
			|				И Мероприятия.ИдМероприятия = МероприятияПереданные.ИдМероприятия
			|		ПО ТаблицаОтбора.Сотрудник = Мероприятия.Сотрудник
			|ГДЕ
			|	&УсловияОтбора
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаОтбора.Период,
			|	ТаблицаОтбора.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СведенияОМероприятияхТрудовойДеятельностиПредварительно.Период КАК Период,
			|	СведенияОМероприятияхТрудовойДеятельностиПредварительно.Сотрудник КАК Сотрудник,
			|	СведенияОМероприятияхТрудовойДеятельностиПредварительно.ПередавалисьДоНачалаУчета КАК ПередавалисьДоНачалаУчета,
			|	СведенияОМероприятияхТрудовойДеятельностиПредварительно.Передавались КАК Передавались
			|ПОМЕСТИТЬ ВТСведенияОМероприятияхТрудовойДеятельности
			|ИЗ
			|	ВТСведенияОМероприятияхТрудовойДеятельностиПредварительно КАК СведенияОМероприятияхТрудовойДеятельностиПредварительно";
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСоединения", "Мероприятия.Организация.ГоловнаяОрганизация = МероприятияПереданные.Организация.ГоловнаяОрганизация");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСоединения", "Мероприятия.Организация = МероприятияПереданные.Организация");
		КонецЕсли;
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОМероприятияхТрудовойДеятельностиПредварительно");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОМероприятияхТрудовойДеятельности");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("СведенияОПоследнихМероприятияхТрудовойДеятельности") <> Неопределено Тогда
		
		ИсключаемыеРегистраторы = Неопределено;
		Если ПоляОтбораПериодическихДанных <> Неопределено И ПоляОтбораПериодическихДанных.Свойство("СведенияОПоследнихМероприятияхТрудовойДеятельности") Тогда
			ПоляОтбораПериодическихДанных.СведенияОПоследнихМероприятияхТрудовойДеятельности.Свойство("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СведенияОПоследнихМероприятияхТрудовойДеятельности_ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			ТекстЗапросаПоследнихМероприятий =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтбора.Период КАК Период,
				|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
				|	Мероприятия.Организация КАК Организация,
				|	МАКСИМУМ(Мероприятия.ДатаМероприятия) КАК ДатаМероприятия
				|ПОМЕСТИТЬ ВТДатыПоследнихМероприятийТрудовойДеятельности
				|ИЗ
				|	ВТТаблицаОтбора КАК ТаблицаОтбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияКадровойИсторииСотрудников КАК КадроваяИсторияСотрудников
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
				|				ПО Мероприятия.Организация = МероприятияОтмененные.Организация
				|					И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия
				|					И (МероприятияОтмененные.Отменено)
				|			ПО КадроваяИсторияСотрудников.Сотрудник = Мероприятия.Сотрудник
				|				И КадроваяИсторияСотрудников.Организация = Мероприятия.Организация
				|				И КадроваяИсторияСотрудников.Период >= Мероприятия.ДатаМероприятия
				|				И (НЕ Мероприятия.Регистратор В (&СведенияОПоследнихМероприятияхТрудовойДеятельности_ИсключаемыеРегистраторы))
				|		ПО ТаблицаОтбора.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
				|			И ТаблицаОтбора.Период = КадроваяИсторияСотрудников.Период
				|ГДЕ
				|	НЕ Мероприятия.Отменено
				|	И &УсловияОтбора
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтбора.Период,
				|	ТаблицаОтбора.Сотрудник,
				|	Мероприятия.Организация";
				
		Иначе
			
			ТекстЗапросаПоследнихМероприятий =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТаблицаОтбора.Период КАК Период,
				|	ТаблицаОтбора.Сотрудник КАК Сотрудник,
				|	Мероприятия.Организация КАК Организация,
				|	МАКСИМУМ(Мероприятия.ДатаМероприятия) КАК ДатаМероприятия
				|ПОМЕСТИТЬ ВТДатыПоследнихМероприятийТрудовойДеятельности
				|ИЗ
				|	ВТТаблицаОтбора КАК ТаблицаОтбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
				|				ПО Мероприятия.Организация = МероприятияОтмененные.Организация
				|					И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия
				|					И (МероприятияОтмененные.Отменено)
				|			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Мероприятия.Сотрудник
				|				И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = Мероприятия.Организация
				|				И (НЕ Мероприятия.Регистратор В (&СведенияОПоследнихМероприятияхТрудовойДеятельности_ИсключаемыеРегистраторы))
				|		ПО ТаблицаОтбора.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
				|ГДЕ
				|	НЕ Мероприятия.Отменено
				|	И &УсловияОтбора
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаОтбора.Период,
				|	ТаблицаОтбора.Сотрудник,
				|	Мероприятия.Организация";
				
		КонецЕсли;
		
		ТекстЗапросаПоследнихМероприятий =
			ТекстЗапросаПоследнихМероприятий
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Период КАК Период,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Сотрудник КАК Сотрудник,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Организация КАК Организация,
			 	|	МАКСИМУМ(Мероприятия.ИдМероприятия) КАК ИдМероприятия
			 	|ПОМЕСТИТЬ ВТИдентификаторыПоследнихМероприятийТрудовойДеятельности
			 	|ИЗ
			 	|	ВТДатыПоследнихМероприятийТрудовойДеятельности КАК ДатыПоследнихМероприятийТрудовойДеятельности
			 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
			 	|		ПО ДатыПоследнихМероприятийТрудовойДеятельности.Сотрудник = Мероприятия.Сотрудник
			 	|			И ДатыПоследнихМероприятийТрудовойДеятельности.Организация = Мероприятия.Организация
			 	|			И ДатыПоследнихМероприятийТрудовойДеятельности.ДатаМероприятия = Мероприятия.ДатаМероприятия
			 	|
			 	|СГРУППИРОВАТЬ ПО
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Период,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Сотрудник,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.ДатаМероприятия,
			 	|	ДатыПоследнихМероприятийТрудовойДеятельности.Организация
			 	|;
			 	|
			 	|////////////////////////////////////////////////////////////////////////////////
			 	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			 	|	ИдентификаторыПоследнихМероприятийТрудовойДеятельности.Период КАК Период,
			 	|	ИдентификаторыПоследнихМероприятийТрудовойДеятельности.Сотрудник КАК Сотрудник,
			 	|	ИдентификаторыПоследнихМероприятийТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
			 	|	ИдентификаторыПоследнихМероприятийТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
			 	|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
			 	|	Мероприятия.Сведения КАК Сведения,
			 	|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
			 	|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
			 	|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
			 	|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
			 	|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
			 	|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
			 	|	Мероприятия.ДатаС КАК ДатаС,
			 	|	Мероприятия.ДатаПо КАК ДатаПо,
			 	|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
			 	|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
			 	|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
			 	|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
			 	|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
			 	|	Мероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
			 	|	Мероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
			 	|	Мероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
			 	|	Мероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
			 	|	Мероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
			 	|	Мероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
			 	|	Мероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
			 	|	Мероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
			 	|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
			 	|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
			 	|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
			 	|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
			 	|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
			 	|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
			 	|	Мероприятия.ОписаниеДолжности КАК ОписаниеДолжности
			 	|ПОМЕСТИТЬ ВТСведенияОПоследнихМероприятияхТрудовойДеятельности
			 	|ИЗ
			 	|	ВТИдентификаторыПоследнихМероприятийТрудовойДеятельности КАК ИдентификаторыПоследнихМероприятийТрудовойДеятельности
			 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
			 	|		ПО ИдентификаторыПоследнихМероприятийТрудовойДеятельности.Организация = Мероприятия.Организация
			 	|			И ИдентификаторыПоследнихМероприятийТрудовойДеятельности.ИдМероприятия = Мероприятия.ИдМероприятия";
		
		ИмяВТСведенияКадровойИсторииСотрудников = ИсточникиДанных.Получить("ИмяВТСведенияКадровойИсторииСотрудников");
		Если Не ЗначениеЗаполнено(ИмяВТСведенияКадровойИсторииСотрудников) Тогда
			ИмяВТСведенияКадровойИсторииСотрудников = "ВТСведенияКадровойИсторииСотрудников";
			ИсточникиДанных.Вставить("ИмяВТСведенияКадровойИсторииСотрудников", ИмяВТСведенияКадровойИсторииСотрудников);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСведенияКадровойИсторииСотрудников", ИмяВТСведенияКадровойИсторииСотрудников);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТДатыПоследнихМероприятийТрудовойДеятельности");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТИдентификаторыПоследнихМероприятийТрудовойДеятельности");
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "ВТКУничтожению", "ВТСведенияОПоследнихМероприятияхТрудовойДеятельности");
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапросаПоследнихМероприятий;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса
				+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
				+ ТекстЗапросаПоследнихМероприятий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПоляОтбораПериодическихДанных) = Тип("Структура")
		И ПоляОтбораПериодическихДанных.Свойство("МероприятияТрудовойДеятельностиПереданные") Тогда
		
		УсловияОтбора = Новый Массив;
		
		СчетчикПараметров = 0;
		Для Каждого ОписаниеУсловия Из ПоляОтбораПериодическихДанных.МероприятияТрудовойДеятельностиПереданные Цикл
			
			ПараметрУсловия = "ПараметрМероприятияТрудовойДеятельностиПереданные" + СчетчикПараметров;
			Запрос.УстановитьПараметр(ПараметрУсловия, ОписаниеУсловия.ПравоеЗначение);
			ТекстУсловия = "Мероприятия." + ОписаниеУсловия.ЛевоеЗначение + " " + ОписаниеУсловия.ВидСравнения + " (&" + ПараметрУсловия + ")";
			
			УсловияОтбора.Добавить(ТекстУсловия);
			
			СчетчикПараметров = СчетчикПараметров + 1;
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", СтрСоединить(УсловияОтбора, Символы.ПС + " И "));
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", "ИСТИНА");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтбора.Период", "ТаблицаОтбора." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтбора.Сотрудник", "ТаблицаОтбора." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтбора", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	
	ТекстыЗапросов = СтрРазделить(Запрос.Текст, ";");
	ТекстПоследнегоЗапроса = ТекстыЗапросов[ТекстыЗапросов.Количество() - 1];
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	ТекстыЗапроса.Добавить(ТекстПоследнегоЗапроса);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстПоследнегоЗапроса,
		СтрСоединить(ТекстыЗапроса, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()));
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(Запрос.Текст);
	
	Если ИсточникиДанных.Получить("ОбщиеСведенияОМероприятияхТрудовойДеятельности") <> Неопределено Тогда
		
		ЧастиЗапроса.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОМероприятияхТрудовойДеятельности КАК СведенияОМероприятияхТрудовойДеятельности
				|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОМероприятияхТрудовойДеятельности.Период
				|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОМероприятияхТрудовойДеятельности.Сотрудник}");
		
	КонецЕсли;
	
	Если ИсточникиДанных.Получить("СведенияОПоследнихМероприятияхТрудовойДеятельности") <> Неопределено Тогда
		
		ЧастиЗапроса.Добавить(
			"		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОПоследнихМероприятияхТрудовойДеятельности КАК СведенияОПоследнихМероприятияхТрудовойДеятельности
				|		ПО ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = СведенияОПоследнихМероприятияхТрудовойДеятельности.Период
				|			И ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = СведенияОПоследнихМероприятияхТрудовойДеятельности.Сотрудник}");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных, ИсключаемыеПоля) Экспорт
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ЗаявленияОПредоставленииСведенийОТрудовойДеятельности";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ЗаявлениеОВеденииТрудовойКнижки.Заявление";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиВид";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Перечисление.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ПустаяСсылка)";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ЗаявлениеОВеденииТрудовойКнижки.Вид";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПередано";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "Истина";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ЗаявлениеОВеденииТрудовойКнижки.Передано";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
	ОписаниеПоля = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеДополнительногоПоляПредставлений();
	ОписаниеПоля.ИмяПоля = "ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиОтозвано";
	ОписаниеПоля.ПустоеЗначениеНаЯзыкеЗапросов = "Истина";
	ОписаниеПоля.ПутьПоляСКД = ПутьКПолямСотрудника + ".ЗаявлениеОВеденииТрудовойКнижки.Отозвано";
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПолеПредставления(ДополнительныеПоляПредставлений, ОписаниеПоля, ИсключаемыеПоля);
	
КонецПроцедуры

#КонецОбласти

Функция СотрудникиНеВыбравшиеСпособВеденияТрудовойКнижки(Организация, ДатаСведений) Экспорт
	
	СотрудникиБезЗаявления = Новый Массив;
	
	ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолучения.Организация = Организация;
	ПараметрыПолучения.НачалоПериода = НачалоДня(ДатаСведений);
	ПараметрыПолучения.ОкончаниеПериода = КонецДня(ПараметрыПолучения.НачалоПериода);
	ПараметрыПолучения.КадровыеДанные = "ЗаявленияОПредоставленииСведенийОТрудовойДеятельности";
	
	ВидыЗанятости = Новый Массив;
	ВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПолучения.Отборы, "ВидЗанятости", "В", ВидыЗанятости);
	
	УстановитьОтборПараметровПолученияСотрудниковОрганизации(ПараметрыПолучения);
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
	СотрудникиОрганизации.Сортировать("ФизическоеЛицо");
	
	Для Каждого ДанныеСотрудника Из СотрудникиОрганизации Цикл
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности) Тогда
			СотрудникиБезЗаявления.Добавить(ДанныеСотрудника.ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиБезЗаявления);
	
КонецФункции

Функция МероприятияПоСпискуИдентификаторов(Организация, ИдМероприятий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИдМероприятий", ИдМероприятий);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Мероприятия.Сотрудник КАК СотрудникЗаписи,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.Сотрудник КАК Сотрудник,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	ЕСТЬNULL(МероприятияПереданные.Сведения, Мероприятия.Сведения) КАК Сведения,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеДолжности, Мероприятия.ПредставлениеДолжности) КАК ПредставлениеДолжности,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеПодразделения, Мероприятия.ПредставлениеПодразделения) КАК ПредставлениеПодразделения,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияТекстОснования, Мероприятия.ОснованиеУвольненияТекстОснования) КАК ОснованиеУвольненияТекстОснования,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияСтатья, Мероприятия.ОснованиеУвольненияСтатья) КАК ОснованиеУвольненияСтатья,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияЧасть, Мероприятия.ОснованиеУвольненияЧасть) КАК ОснованиеУвольненияЧасть,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПункт, Мероприятия.ОснованиеУвольненияПункт) КАК ОснованиеУвольненияПункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПодпункт, Мероприятия.ОснованиеУвольненияПодпункт) КАК ОснованиеУвольненияПодпункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияАбзац, Мероприятия.ОснованиеУвольненияАбзац) КАК ОснованиеУвольненияАбзац,
		|	ЕСТЬNULL(МероприятияПереданные.КодПоОКЗ, Мероприятия.КодПоОКЗ) КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЕСТЬNULL(МероприятияПереданные.ПричинаУвольненияПФР, Мероприятия.ПричинаУвольненияПФР) КАК ПричинаУвольненияПФР,
		|	ЕСТЬNULL(МероприятияПереданные.СрочностьТрудовогоДоговора, Мероприятия.СрочностьТрудовогоДоговора) КАК СрочностьТрудовогоДоговора,
		|	ЕСТЬNULL(МероприятияПереданные.УдаленностьРаботы, Мероприятия.УдаленностьРаботы) КАК УдаленностьРаботы,
		|	ЕСТЬNULL(МероприятияПереданные.СокращенностьГрафика, Мероприятия.СокращенностьГрафика) КАК СокращенностьГрафика,
		|	ЕСТЬNULL(МероприятияПереданные.ОписаниеДолжности, Мероприятия.ОписаниеДолжности) КАК ОписаниеДолжности
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО (&УсловияСоединения)
		|			И Мероприятия.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|			И (НЕ МероприятияПереданные.Отменено)
		|ГДЕ
		|	Мероприятия.Организация = &Организация
		|	И Мероприятия.ИдМероприятия В(&ИдМероприятий)";
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетОтчитывающихсяПоВзносамОрганизаций") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСоединения", "Мероприятия.Организация.ГоловнаяОрганизация = МероприятияПереданные.Организация.ГоловнаяОрганизация");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияСоединения", "Мероприятия.Организация = МероприятияПереданные.Организация");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МероприятияТрудовойДеятельностиСТД_Р(МенеджерВременныхТаблиц, ТолькоРазрешенные, ТолькоПереданные) Экспорт
	
	Запрос = ЗапросВТМероприятияТрудовойДеятельностиСотрудников(ТолькоРазрешенные, ТолькоПереданные, , "");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПорядка,
		|	ДатаОтмены,
		|	ВидМероприятияПорядок,
		|	ЯвляетсяСовместителем";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НаименованиеДокументаОснования() Экспорт
	
	Возврат НСтр("ru = 'Приказ';
				|en = 'Order'");
	
КонецФункции

Функция ЗаписьДвиженияМероприятияТрудовойДеятельности(ДанныеМероприятия, СформироватьНомерНаПечать = Истина) Экспорт
	
	СтруктураЗаписи = ПустаяСтруктураЗаписиОТрудовойДеятельности();
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ДанныеМероприятия);
	СтруктураЗаписи.ДатаМероприятия = НачалоДня(СтруктураЗаписи.ДатаМероприятия);
	
	Если СформироватьНомерНаПечать Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеМероприятия, "НомерПриказа") Тогда
			СтруктураЗаписи.НомерДокументаОснования = ЗарплатаКадрыОтчеты.НомерНаПечать(
				ДанныеМероприятия.Номер, ДанныеМероприятия.НомерПриказа);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеМероприятия, "НомерПервичногоДокумента") Тогда
			СтруктураЗаписи.НомерДокументаОснования = ЗарплатаКадрыОтчеты.НомерНаПечать(
				ДанныеМероприятия.Номер, ДанныеМероприятия.НомерПервичногоДокумента);
		Иначе
			СтруктураЗаписи.НомерДокументаОснования = ЗарплатаКадрыОтчеты.НомерНаПечать(
				ДанныеМероприятия.Номер, "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.ДатаОтмены) Тогда
		ЗаполнитьПредставленияЗаписиМероприятия(СтруктураЗаписи);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.НаименованиеДокументаОснования) Тогда
		СтруктураЗаписи.НаименованиеДокументаОснования = НаименованиеДокументаОснования();
	КонецЕсли;
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Функция ЗаписьДвиженияМероприятияТрудовойДеятельностиПереданные(ДанныеМероприятия) Экспорт
	
	СтруктураЗаписи = Новый Структура("Регистратор");
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.Измерения Цикл
		СтруктураЗаписи.Вставить(Измерение.Имя);
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.МероприятияТрудовойДеятельностиПереданные.Ресурсы Цикл
		СтруктураЗаписи.Вставить(Ресурс.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(СтруктураЗаписи, ДанныеМероприятия);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Функция ДатаНачалаУчета() Экспорт
	
	Возврат '20200101';
	
КонецФункции

Процедура УстановитьУсловноеОформлениеТаблицыМероприятий(УправляемаяФорма, Организация, ДатаОтменыРедактируется, ФормаОбъекта = Истина, ДатаДокумента = Неопределено) Экспорт
	
	УсловноеОформление = УправляемаяФорма.УсловноеОформление;
	Элементы = УправляемаяФорма.Элементы;
	
	Если ФормаОбъекта Тогда
		ПутьКТаблицеМероприятия = "Объект.Мероприятия";
	Иначе
		ПутьКТаблицеМероприятия = "Мероприятия";
	КонецЕсли;
	
	// Строки мероприятия которых не меняются, можно изменить только дату отмены
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ДатаОтмены");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КоллекцииЭлементов = КоллекцияПодчиненныхЭлементов(Элементы.Мероприятия);
	Для Каждого КоллекцияЭлементов Из КоллекцииЭлементов Цикл
		
		Для Каждого ЭлементФормы Из КоллекцияЭлементов Цикл
			
			Если ДатаОтменыРедактируется И ЭлементФормы.Имя = "МероприятияДатаОтмены" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементФормы) <> Тип("ПолеФормы") Тогда
				Продолжить;
			КонецЕсли;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
			ОформляемоеПоле.Использование = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод значения ИдМероприятия в поле редактирования идентификатора
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ИдМероприятия");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ИдМероприятия"));
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияИдентификатор");
	ОформляемоеПоле.Использование = Истина;
	
	// Видимость полей в зависимости от видов мероприятий документа
	ДоступныеПоляВидов = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий(ДатаДокумента);
	ВсеНастраиваемыеПоля = Новый Массив;
	
	Для Каждого ОписаниеПолейВидов Из ДоступныеПоляВидов Цикл
		
		ИменаПолей = СтрРазделить(ОписаниеПолейВидов.Значение, ",");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеНастраиваемыеПоля, ИменаПолей, Истина);
		
	КонецЦикла;
	
	НеЗаполнятьПодразделения = ЭлектронныеТрудовыеКнижкиВызовСервера.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности(Организация);
	Для Каждого ИмяПоля Из ВсеНастраиваемыеПоля Цикл
		
		СписокПоля = Новый СписокЗначений;
		Для Каждого ОписаниеПолейВидов Из ДоступныеПоляВидов Цикл
			
			ИменаПолей = СтрРазделить(ОписаниеПолейВидов.Значение, ",");
			Если ИменаПолей.Найти(ИмяПоля) <> Неопределено Тогда
				СписокПоля.Добавить(ОписаниеПолейВидов.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Использование = Истина;
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Мероприятия" + ИмяПоля);
		ОформляемоеПоле.Использование = Истина;
		
		ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + "." + ИмяПоля);
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + "." + ИмяПоля);
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение	= Ложь;
		
		Если ИмяПоля <> "Подразделение" И ИмяПоля <> "ПредставлениеПодразделения"
			Или Не НеЗаполнятьПодразделения Тогда
			
			ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ВидМероприятия");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ПравоеЗначение	= СписокПоля;
			
		КонецЕсли;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "---");
		
		Если ИмяПоля = "СрочностьТрудовогоДоговора"
			Или ИмяПоля = "УдаленностьРаботы"
			Или ИмяПоля = "СокращенностьГрафика" Тогда
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.Использование = Истина;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Мероприятия" + ИмяПоля);
			ОформляемоеПоле.Использование = Истина;
			
			ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ДатаМероприятия");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
		КонецЕсли;
		
		Если ИмяПоля = "ЯвляетсяСовместителем" Тогда
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.Использование = Истина;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Мероприятия" + ИмяПоля);
			ОформляемоеПоле.Использование = Истина;
			
			ГруппаИли = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ДатаМероприятия");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ДатаМероприятия");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение	= ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023();
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если вид мероприятия не заполнен, то и все поля недоступны для заполнения
	ЭлементОформленияВидимость = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияВидимость.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформленияВидимость.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ВидМероприятия");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОформленияВидимость.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ИменаПолей = СтрРазделить(ОписаниеПолейВидов.Значение, ",");
	Для Каждого ИмяПоля Из ВсеНастраиваемыеПоля Цикл
		
		ОформляемоеПоле = ЭлементОформленияВидимость.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Мероприятия" + ИмяПоля);
		ОформляемоеПоле.Использование = Истина;
		
	КонецЦикла;
	
	// Поля второго документа основания
	ЭлементОформленияВидимость = УсловноеОформление.Элементы.Добавить();
	ЭлементОформленияВидимость.Использование = Истина;
	
	ГруппаНе = ЭлементОформленияВидимость.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ГруппаИли = ГруппаНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("РегистрироватьВторойДокументОснования");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".НаименованиеВторогоДокументаОснования");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ДатаВторогоДокументаОснования");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".СерияВторогоДокументаОснования");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОтбора = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".НомерВторогоДокументаОснования");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформленияВидимость.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформленияВидимость.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияНаименованиеВторогоДокументаОснования");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементОформленияВидимость.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияДатаВторогоДокументаОснования");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементОформленияВидимость.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияСерияВторогоДокументаОснования");
	ОформляемоеПоле.Использование = Истина;
	
	ОформляемоеПоле = ЭлементОформленияВидимость.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияНомерВторогоДокументаОснования");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПредставленияДолжностиТаблицыМероприятий(УправляемаяФорма, ФормаОбъекта = Истина) Экспорт
	
	УсловноеОформление = УправляемаяФорма.УсловноеОформление;
	Элементы = УправляемаяФорма.Элементы;
	
	Если ФормаОбъекта Тогда
		ПутьКТаблицеМероприятия = "Объект.Мероприятия";
	Иначе
		ПутьКТаблицеМероприятия = "Мероприятия";
	КонецЕсли;
	
	// Если заполнено ОписаниеДолжности выводится поле ОписаниеДолжности и скрывается поле ПредставлениеДолжности
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ОписаниеДолжности");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияОписаниеДолжности");
	ОформляемоеПоле.Использование = Истина;

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ОписаниеДолжности");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияПредставлениеДолжности");
	ОформляемоеПоле.Использование = Истина;
	
	// И наоборот, скрывается поле ОписаниеДолжности и выводится поле ПредставлениеДолжности
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ОписаниеДолжности");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияОписаниеДолжности");
	ОформляемоеПоле.Использование = Истина;

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ПутьКТаблицеМероприятия + ".ОписаниеДолжности");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МероприятияПредставлениеДолжности");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

Функция РазрядКатегорияВидимость() Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.РазрядКатегорияВидимость();
	
КонецФункции

Функция КодПоРееструДолжностейВидимость() Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.КодПоРееструДолжностейВидимость();
	
КонецФункции

Процедура УстановитьОтборПараметровПолученияСотрудниковОрганизации(ПараметрыПолучения) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.УстановитьОтборПараметровПолученияСотрудниковОрганизации(ПараметрыПолучения);
	
КонецПроцедуры

Функция ИменаКадровыхДанныхСотрудниковДляНачалаУчета() Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.ИменаКадровыхДанныхСотрудниковДляНачалаУчета();
	
КонецФункции

Процедура ДополнитьМероприятияЭТКДаннымиРеестраКадровыхПриказов(ДанныеСотрудниковБезМероприятий) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.ДополнитьМероприятияЭТКДаннымиРеестраКадровыхПриказов(ДанныеСотрудниковБезМероприятий);
	
КонецПроцедуры

Процедура УточнитьЗапросПолученияДанныхНаНачалоУчета(Запрос) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.УточнитьЗапросПолученияДанныхНаНачалоУчета(Запрос);
	
КонецПроцедуры

Функция МероприятияСотрудникаДо2020Года(Сотрудник, Организация) Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.МероприятияСотрудникаДо2020Года(Сотрудник, Организация);
	
КонецФункции

#Область РаботаСXMLФайлами

Функция ДанныеXMLФайла(АдресДанныхФайла, ИмяФайла) Экспорт
	
	ФайлСведений = ПолучитьИзВременногоХранилища(АдресДанныхФайла);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлСведений.Записать(ИмяВременногоФайла);
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось прочитать файл (%1).';
										|en = 'Cannot read the file (%1).'"), ИмяФайла);
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Чтение файлов СЗВ-ТД и файлов протоколов приема к ним';
				|en = 'Reading SZV-TD files and protocol files of their reception'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;

	Возврат ДеревоXML;
	
КонецФункции

Функция ПолучитьСвойствоXDTO(ДеревоXML, Путь, РекурсивныйПоиск = Истина) Экспорт
	
	СписокСвойств = СтрРазделить(Путь, "/");
	
	ОбъектДерева = ОбъектСвойстваXDTO(ДеревоXML, СписокСвойств[0], РекурсивныйПоиск);
	Если ОбъектДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокСвойств.Удалить(0);
	Для Каждого ИмяСвойства Из СписокСвойств Цикл
		
		Свойство = ОбъектДерева.Свойства().Получить(ИмяСвойства);
		Если Свойство = Неопределено Тогда
			ОбъектДерева = Неопределено;
			Прервать;
		КонецЕсли;
		
		ОбъектДерева = ОбъектДерева[Свойство.Имя];
		
	КонецЦикла;
	
	Если ТипЗнч(ОбъектДерева) = Тип("ЗначениеXDTO") Тогда
		Возврат ОбъектДерева.Значение;
	КонецЕсли;
	
	Возврат ОбъектДерева;
	
КонецФункции

Функция ОбъектСвойстваXDTO(ДеревоXML, ИмяСвойства, РекурсивныйПоиск = Истина) Экспорт
	
	Если ДеревоXML <> Неопределено Тогда
		Для Каждого Свойство Из ДеревоXML.Свойства() Цикл
			
			ОбъектДерева = ДеревоXML[Свойство.Имя];
			Если Свойство.Имя = ИмяСвойства Тогда
				Возврат ОбъектДерева;
			КонецЕсли;
			
			Если РекурсивныйПоиск И ТипЗнч(ОбъектДерева) = Тип("ОбъектXDTO") Тогда
				ПодчиненноеСвойство = ОбъектСвойстваXDTO(ОбъектДерева, ИмяСвойства);
				Если ПодчиненноеСвойство <> Неопределено Тогда
					Возврат ПодчиненноеСвойство
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КоллекцияОбъектовXDTO(ДеревоXDTO, ИмяКоллекции) Экспорт
	
	Если ДеревоXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДеревоXDTO.Свойства().Получить(ИмяКоллекции) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоXDTO[ИмяКоллекции]) = Тип("СписокXDTO") Тогда
		
		КоллекцияОбъектов = Новый Массив;
		Для Каждого ЭлементСписка Из ДеревоXDTO[ИмяКоллекции] Цикл
			
			Если ЭлементСписка.Свойства().Получить(ИмяКоллекции) <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КоллекцияОбъектов, КоллекцияОбъектовXDTO(ЭлементСписка, ИмяКоллекции));
			Иначе
				КоллекцияОбъектов.Добавить(ЭлементСписка);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ДеревоXDTO[ИмяКоллекции].Свойства().Получить(ИмяКоллекции) <> Неопределено Тогда
			КоллекцияОбъектов = КоллекцияОбъектовXDTO(ДеревоXDTO[ИмяКоллекции], ИмяКоллекции);
		Иначе
			КоллекцияОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоXDTO[ИмяКоллекции]);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоллекцияОбъектов;
	
КонецФункции

// Проверяет, что данные XML соответствуют формату файлов СТД-Р
//
Функция ЭтоДанныеСТДР(ДеревоXML)
	
	Попытка
		
		КодФормы = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_Р");
		РегистрационныйНомерПФР = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_Р/Работодатель/РегНомер");
		
		Если КодФормы = Неопределено
			Или РегистрационныйНомерПФР = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что данные XML соответствуют формату файлов СТД-ПФР
//
Функция ЭтоДанныеСТДПФР(ДеревоXML)
	
	Попытка
		
		КодФормы = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_ПФР");
		СНИЛС = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_ПФР/ЗЛ/СНИЛС");
		
		Если КодФормы = Неопределено
			Или СНИЛС = Неопределено Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает вид мероприятия по его номеру
//
Функция ВидМероприятияПоНомеру(НомерВидаМероприятия) Экспорт
	
	ВидПоНомеруМероприятия = Новый Соответствие;
	
	ВидПоНомеруМероприятия.Вставить("1", Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
	ВидПоНомеруМероприятия.Вставить("2", Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);
	ВидПоНомеруМероприятия.Вставить("3", Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование);
	ВидПоНомеруМероприятия.Вставить("4", Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии);
	ВидПоНомеруМероприятия.Вставить("5", Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	ВидПоНомеруМероприятия.Вставить("6", Перечисления.ВидыМероприятийТрудовойДеятельности.ЗапретЗаниматьДолжность);
	
	Возврат ВидПоНомеруМероприятия.Получить(НомерВидаМероприятия);
	
КонецФункции

Функция ДатаИзСтроки(ДатаСтрокой) Экспорт
	
	СоставДаты = СтрРазделить(ДатаСтрокой, "-");
	
	Если СоставДаты.Количество() = 3 Тогда
		Возврат Дата(СоставДаты[0], СоставДаты[1], СоставДаты[2]);
	КонецЕсли;
	
	Возврат '00010101';
	
КонецФункции

Функция ТрудоваяДеятельностьПоДаннымФайла(ФизическоеЛицо, СведенияОФайле) Экспорт
	
	ДеревоXML = ДанныеXMLФайла(СведенияОФайле.Хранение, СведенияОФайле.Имя);
	
	ФайлДанных = Новый Файл(СведенияОФайле.Имя);
	
	ЭтоФайлСТДР = ЭтоДанныеСТДР(ДеревоXML);
	ЭтоФайлСТДПФР = ЭтоДанныеСТДПФР(ДеревоXML);
	
	Если Не ЭтоФайлСТДР И Не ЭтоФайлСТДПФР Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Формат выбранного файла (%1) отличается от форматов файлов СТД-Р, СТД ПФР.';
										|en = 'The format of the selected file (%1) differs from the STD-R, STD PF file formats.'"), ФайлДанных.Имя);
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическоеЛицо, "СтраховойНомерПФР");
	Если КадровыеДанные.Количество() = 0 Или Не ЗначениеЗаполнено(КадровыеДанные[0].СтраховойНомерПФР) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'У физического лица %1 не указан СНИЛС.';
										|en = 'SNILS is not specified for the individual %1.'"), ФизическоеЛицо);
	КонецЕсли;
	
	СНИЛС = КадровыеДанные[0].СтраховойНомерПФР;
	Если ЭтоФайлСТДР Тогда
		СНИЛСФайла = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_Р/ЗЛ/СНИЛС");
	Иначе
		СНИЛСФайла = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_ПФР/ЗЛ/СНИЛС");
	КонецЕсли;
	
	Если ТолькоЦифрыСНИЛС(СНИЛС) <> ТолькоЦифрыСНИЛС(СНИЛСФайла) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Файл (%1) содержит данные другого физического лица.';
										|en = 'File (%1) contains data of another individual.'"), ФайлДанных.Имя);
	КонецЕсли;
	
	ДанныеМероприятий = Новый ТаблицаЗначений;
	ДанныеМероприятий.Колонки.Добавить("Организация", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ДанныеМероприятий.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеМероприятий.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеМероприятий.Колонки.Добавить("Должность", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ДанныеМероприятий.Колонки.Добавить("Обязанности", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1024)));
	ДанныеМероприятий.Колонки.Добавить("Увольнение", Новый ОписаниеТипов("Булево"));
	ДанныеМероприятий.Колонки.Добавить("Перевод", Новый ОписаниеТипов("Булево"));
	ДанныеМероприятий.Колонки.Добавить("Совместитель", Новый ОписаниеТипов("Булево"));
	
	Если ЭтоФайлСТДР Тогда
		ДанныеФайла = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_Р");
		ЗаполнитьМероприятия(ДанныеМероприятий, КоллекцияОбъектовXDTO(ДанныеФайла, "Мероприятие"),
			ПредставлениеОрганизации(ДанныеФайла));
	Иначе
		ДанныеФайла = ПолучитьСвойствоXDTO(ДеревоXML, "СТД_ПФР");
		ЗаполнитьМероприятия(ДанныеМероприятий, КоллекцияОбъектовXDTO(ДанныеФайла, "Мероприятие"));
		ЗаполнитьПериодыРаботы(ДанныеМероприятий, КоллекцияОбъектовXDTO(ПолучитьСвойствоXDTO(ДанныеФайла, "ТрудоваяДеятельность"), "ПериодРаботы"));
	КонецЕсли;
	
	Если ДанныеМероприятий.Количество() > 0 Тогда
		
		ДанныеМероприятий.Сортировать("ДатаНачала,Организация,Совместитель");
		
		ПредыдущаяСтрока = Неопределено;
		Организация = Неопределено;
		Совместитель = Неопределено;
		СтрокиУвольнений = Новый Массив;
		
		Для Каждого СтрокаДанных Из ДанныеМероприятий Цикл
			
			Если СтрокаДанных.Увольнение Тогда
				
				СтрокиУвольнений.Добавить(СтрокаДанных);
				
				Если ПредыдущаяСтрока <> Неопределено Тогда
					ПредыдущаяСтрока.ДатаОкончания = СтрокаДанных.ДатаНачала;
				КонецЕсли;
				
				ПредыдущаяСтрока = Неопределено;
				Организация = Неопределено;
				Совместитель = Неопределено;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Организация <> СтрокаДанных.Организация
				Или Совместитель <> СтрокаДанных.Совместитель Тогда
				
				Организация = СтрокаДанных.Организация;
				Совместитель = СтрокаДанных.Совместитель;
				
			ИначеЕсли ПредыдущаяСтрока <> Неопределено
				И Не ЗначениеЗаполнено(ПредыдущаяСтрока.ДатаОкончания) Тогда
				
				ПредыдущаяСтрока.ДатаОкончания = НачалоДня(СтрокаДанных.ДатаНачала - 1);
				Если СтрокаДанных.Перевод И ПустаяСтрока(СтрокаДанных.Должность) Тогда
					СтрокиУвольнений.Добавить(СтрокаДанных);
					ПредыдущаяСтрока = Неопределено;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ПредыдущаяСтрока = СтрокаДанных;
			
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из СтрокиУвольнений Цикл
			ДанныеМероприятий.Удалить(СтрокаДанных);
		КонецЦикла;
		
		Возврат ДанныеМероприятий;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьМероприятия(ТрудоваяДеятельность, КоллекцияМероприятий, Организация = Неопределено)
	
	Если Не ЗначениеЗаполнено(КоллекцияМероприятий) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектМероприятия Из КоллекцияМероприятий Цикл
		
		Если ЗначениеЗаполнено(ДатаИзСтроки(ПолучитьСвойствоXDTO(ОбъектМероприятия, "ДатаОтмены"))) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидМероприятия = ВидМероприятияПоНомеру(
			ПолучитьСвойствоXDTO(ОбъектМероприятия, "Вид"));
		
		Если ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.ЗапретЗаниматьДолжность
				Или ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование
				Или ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии Тогда
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТрудоваяДеятельность.Добавить();
		НоваяСтрока.ДатаНачала = ДатаИзСтроки(ПолучитьСвойствоXDTO(ОбъектМероприятия, "Дата"));
		
		Если ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение Тогда
			НоваяСтрока.Увольнение = Истина;
		ИначеЕсли ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод Тогда
			НоваяСтрока.Перевод = Истина;
		КонецЕсли;
		
		ПредставленияОбязанностей = Новый Массив;
		
		Если ПолучитьСвойствоXDTO(ОбъектМероприятия, "Совместитель") = 1 Тогда
			НоваяСтрока.Совместитель = Истина;
			ПредставленияОбязанностей.Добавить(НСтр("ru = 'По совместительству';
													|en = 'As a second job'"));
		КонецЕсли;
		
		Если Организация = Неопределено Тогда
			НоваяСтрока.Организация = ПредставлениеОрганизации(ОбъектМероприятия);
		Иначе
			НоваяСтрока.Организация = Организация;
		КонецЕсли;
		
		НоваяСтрока.Должность = ПолучитьСвойствоXDTO(ОбъектМероприятия, "Должность");
		
		ПредставленияОбязанностей.Добавить(ПолучитьСвойствоXDTO(ОбъектМероприятия, "КодВФ"));
		ПредставленияОбязанностей.Добавить(ПолучитьСвойствоXDTO(ОбъектМероприятия, "ВидПР"));
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияОбязанностей, Неопределено);
		НоваяСтрока.Обязанности = СтрСоединить(ПредставленияОбязанностей, ", ");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодыРаботы(ТрудоваяДеятельность, КоллекцияПериодовРаботы)
	
	Если Не ЗначениеЗаполнено(КоллекцияПериодовРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПериодРаботы Из КоллекцияПериодовРаботы Цикл
		
		СуществующееМероприятие = Ложь;
		ДатаНачала = ДатаИзСтроки(ПолучитьСвойствоXDTO(ПериодРаботы, "ПериодРаботыС"));
		ДатаОкончания = ДатаИзСтроки(ПолучитьСвойствоXDTO(ПериодРаботы, "ПериодРаботыПо"));
		Для Каждого СтрокаТрудовойДеятельности Из ТрудоваяДеятельность Цикл
			
			Если ДатаНачала >= СтрокаТрудовойДеятельности.ДатаНачала
				И (Не ЗначениеЗаполнено(СтрокаТрудовойДеятельности.ДатаОкончания)
					Или ДатаНачала <= СтрокаТрудовойДеятельности.ДатаОкончания) Тогда
				
				Если СтрНайти(СтрокаТрудовойДеятельности.Организация, ПолучитьСвойствоXDTO(ПериодРаботы, "РегНомер")) > 0 Тогда
					СуществующееМероприятие = Истина;
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ДатаНачала < СтрокаТрудовойДеятельности.ДатаНачала
				И ДатаОкончания > СтрокаТрудовойДеятельности.ДатаНачала
				И (ДатаОкончания < СтрокаТрудовойДеятельности.ДатаОкончания
					Или Не ЗначениеЗаполнено(СтрокаТрудовойДеятельности.ДатаОкончания)) Тогда
				
				Если СтрНайти(СтрокаТрудовойДеятельности.Организация, ПолучитьСвойствоXDTO(ПериодРаботы, "РегНомер")) > 0 Тогда
					ДатаОкончания = НачалоДня(СтрокаТрудовойДеятельности.ДатаНачала - 1);
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СуществующееМероприятие Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТрудоваяДеятельность.Добавить();
		НоваяСтрока.Организация = ПредставлениеРаботодателя(ПериодРаботы);
		НоваяСтрока.ДатаНачала = ДатаНачала;
		НоваяСтрока.ДатаОкончания = ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОрганизации(ДеревоXML)
	
	Представление = СокрЛП(ПолучитьСвойствоXDTO(ДеревоXML, "Работодатель/НаименованиеОрганизации"));
	РегНомер = ПолучитьСвойствоXDTO(ДеревоXML, "Работодатель/РегНомер");
	ИНН = ПолучитьСвойствоXDTO(ДеревоXML, "Работодатель/ИНН");
	
	Если ЗначениеЗаполнено(РегНомер) И ЗначениеЗаполнено(ИНН) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (ИНН: %2; Рег. номер: %3)';
										|en = '%1(TIN: %2; Reg. number: %3)'"), Представление, ИНН, РегНомер);
	ИначеЕсли ЗначениеЗаполнено(РегНомер) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (Рег. номер: %2)';
										|en = '%1(Reg. number: %2)'"), Представление, РегНомер);
	ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (ИНН: %2)';
										|en = '%1 (TIN: %2)'"), Представление, ИНН);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПредставлениеРаботодателя(ПериодРаботы)
	
	Представление = СокрЛП(ПолучитьСвойствоXDTO(ПериодРаботы, "НаименованиеРаботодателя"));
	РегНомер = ПолучитьСвойствоXDTO(ПериодРаботы, "РегНомер");
	
	Если ЗначениеЗаполнено(РегНомер) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (Рег. номер: %2)';
										|en = '%1(Reg. number: %2)'"), Представление, РегНомер);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ТолькоЦифрыСНИЛС(Знач СНИЛС)
	
	СНИЛС = СтрЗаменить(СНИЛС, " ", "");
	СНИЛС = СтрЗаменить(СНИЛС, Символы.НПП, "");
	СНИЛС = СтрЗаменить(СНИЛС, Символы.Таб, "");
	СНИЛС = СтрЗаменить(СНИЛС, "-", "");
	
	Возврат СНИЛС;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя        = "СохранитьСТДРНаДиск";
	Вид.ИмяПодменю = "ПодменюСохранитьСТДРНаДиск";
	Вид.Картинка = БиблиотекаКартинок.СохранитьФайл;
	Вид.Отображение = ОтображениеКнопки.Картинка;
	
КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если Источники.Строки.Найти(Метаданные.Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р, "Метаданные") <> Неопределено Тогда
		
		Команда = Команды.Добавить();
		Команда.Вид = "СохранитьСТДРНаДиск";
		Команда.Представление = НСтр("ru = 'Сохранить на диск';
									|en = 'Save to disk'");
		Команда.МножественныйВыбор = Ложь;
		Команда.РежимЗаписи = "Проводить";
		Команда.ВидимостьВФормах = "ФормаДокумента,ФормаСписка";
		Команда.Обработчик = "ЭлектронныеТрудовыеКнижкиКлиент.СохранитьСТДРНаДиск";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиЗаполнения

Процедура ПроверкаЗаполненияВторогоДокументаОснования(Объект, КлючДанных, Отказ, ПутьКДанным = "", РасшифровкаПути = "") Экспорт
	
	Если ЗначениеЗаполнено(Объект.НаименованиеВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.ДатаВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.СерияВторогоДокументаОснования)
		Или ЗначениеЗаполнено(Объект.НомерВторогоДокументаОснования) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.НаименованиеВторогоДокументаОснования) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнено наименование второго документа основания';
									|en = 'The name of the second base document is not filled in'");
			
			ПутьКДаннымОтчета = "";
			Если Не ПустаяСтрока(ПутьКДанным) Тогда
				ПутьКДаннымОтчета = ПутьКДанным + ".";
				Если Не ПустаяСтрока(РасшифровкаПути) Тогда
					ТекстСообщения = РасшифровкаПути + ", " + НРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
				КонецЕсли;
			КонецЕсли;
			
			ПутьКДаннымОтчета = ПутьКДаннымОтчета + "НаименованиеВторогоДокументаОснования";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, ПутьКДаннымОтчета, "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВторогоДокументаОснования) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена дата второго документа основания';
									|en = 'The date of the second base document is not filled in'");
			
			ПутьКДаннымОтчета = "";
			Если Не ПустаяСтрока(ПутьКДанным) Тогда
				ПутьКДаннымОтчета = ПутьКДанным + ".";
				Если Не ПустаяСтрока(РасшифровкаПути) Тогда
					ТекстСообщения = РасшифровкаПути + ", " + НРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
				КонецЕсли;
			КонецЕсли;
			
			ПутьКДаннымОтчета = ПутьКДаннымОтчета + "ДатаВторогоДокументаОснования";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, ПутьКДаннымОтчета, "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.НомерВторогоДокументаОснования) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнен номер второго документа основания';
									|en = 'The number of the second base document is not filled in'");
			
			ПутьКДаннымОтчета = "";
			Если Не ПустаяСтрока(ПутьКДанным) Тогда
				ПутьКДаннымОтчета = ПутьКДанным + ".";
				Если Не ПустаяСтрока(РасшифровкаПути) Тогда
					ТекстСообщения = РасшифровкаПути + ", " + НРег(Лев(ТекстСообщения, 1)) + Сред(ТекстСообщения, 2);
				КонецЕсли;
			КонецЕсли;
			
			ПутьКДаннымОтчета = ПутьКДаннымОтчета + "НомерВторогоДокументаОснования";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, ПутьКДаннымОтчета, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКодаОКЗТрудовойФункции(ПроверяемыйОбъект, ИмяРеквизитаДатаМероприятия, Отказ, ПроверитьОтражениеВТрудовойКнижке = Истина, Знач СсылкаНаОбъект = Неопределено, Знач ПутьКПолю = "") Экспорт
	
	Если ПроверитьОтражениеВТрудовойКнижке И Не ПроверяемыйОбъект.ОтразитьВТрудовойКнижке Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверяемыйОбъект[ИмяРеквизитаДатаМероприятия] >= '20210701' Тогда
		
		Если СсылкаНаОбъект = Неопределено Тогда
			СсылкаНаОбъект = ПроверяемыйОбъект.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроверяемыйОбъект.ТрудоваяФункция) Тогда
			
			КодПоОКЗ = ЭлектронныеТрудовыеКнижкиПовтИсп.КодПоОКЗТрудовойФункции(ПроверяемыйОбъект.ТрудоваяФункция);
			Если Не ЗначениеЗаполнено(КодПоОКЗ) Тогда
			
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'У выбранной трудовой функции (%1) не заполнено поле ""Код по ОКЗ""';
						|en = 'The ""ACO code"" field of the selected labor function (%1) is not filled in'"),
					ПроверяемыйОбъект.ТрудоваяФункция);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект, ПутьКПолю + "ТрудоваяФункция", "Объект", Отказ);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Поле ""Трудовая функция"" не заполнено';
									|en = 'The ""Labor function"" field is not filled in'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект, ПутьКПолю + "ТрудоваяФункция", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВТабличнойЧастиЗаполнениеКодаОКЗТрудовойФункции(Объект, ИмяТабличнойЧасти, ИмяРеквизитаДатаМероприятия, Отказ, ПроверитьОтражениеВТрудовойКнижке = Истина) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
		ПутьКПолю = ИмяТабличнойЧасти + "[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧРГ=; ЧН=") + "].";
		ПроверитьЗаполнениеКодаОКЗТрудовойФункции(СтрокаТабличнойЧасти, ИмяРеквизитаДатаМероприятия, Отказ,
			ПроверитьОтражениеВТрудовойКнижке, Объект.Ссылка, ПутьКПолю);
	КонецЦикла;
	
КонецПроцедуры

Функция ПустаяТаблицаСотрудникиДатыДляПроверкиПоследовательностиМероприятий() Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("Возвратное", Новый ОписаниеТипов("Булево"));
	СотрудникиДаты.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат СотрудникиДаты;
	
КонецФункции

Процедура ДобавитьСотрудникаВТаблицуСотрудникиДаты(СотрудникиДаты, Сотрудник, ДатаСобытия, НомерСтроки = 0, Возвратное = Ложь) Экспорт
	
	СтрокаСотрудниковДат = СотрудникиДаты.Добавить();
	СтрокаСотрудниковДат.Сотрудник = Сотрудник;
	СтрокаСотрудниковДат.ДатаСобытия = ДатаСобытия;
	СтрокаСотрудниковДат.НомерСтроки = НомерСтроки;
	СтрокаСотрудниковДат.Возвратное = Возвратное;
	
КонецПроцедуры

// Документы, регистрирующие переводы

Функция ДокументыВозвратныхМероприятий(СотрудникиДаты, ИсключаемыеРегистраторы) Экспорт
	
	ДокументыМероприятий = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	СотрудникиДаты.ДатаСобытия КАК ДатаСобытия,
		|	СотрудникиДаты.Возвратное КАК Возвратное,
		|	СотрудникиДаты.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	СотрудникиДаты.ДатаСобытия КАК ДатаСобытия,
		|	СотрудникиДаты.Возвратное КАК Возвратное,
		|	СотрудникиДаты.НомерСтроки КАК НомерСтроки,
		|	Мероприятия.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО СотрудникиДаты.Сотрудник = Мероприятия.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
		|		ПО (Мероприятия.Организация = МероприятияОтмененные.Организация)
		|			И (Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия)
		|			И (МероприятияОтмененные.Отменено)
		|ГДЕ
		|	МероприятияОтмененные.ИдМероприятия ЕСТЬ NULL
		|	И НЕ Мероприятия.Регистратор В (&ИсключаемыеРегистраторы)
		|	И НЕ Мероприятия.Отменено
		|	И Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДаты.Сотрудник,
		|	СотрудникиДаты.ДатаСобытия,
		|	СотрудникиДаты.Возвратное,
		|	СотрудникиДаты.НомерСтроки,
		|	Мероприятия.Регистратор
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мероприятия.Регистратор) > 0 И
		|	СотрудникиДаты.ДатаСобытия МЕЖДУ МИНИМУМ(Мероприятия.ДатаМероприятия) И МАКСИМУМ(Мероприятия.ДатаМероприятия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистраторы.Сотрудник КАК Сотрудник,
		|	Регистраторы.ДатаСобытия КАК ДатаСобытия,
		|	Регистраторы.Возвратное КАК Возвратное,
		|	Регистраторы.НомерСтроки КАК НомерСтроки,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО Регистраторы.Регистратор = Мероприятия.Регистратор
		|			И Регистраторы.Сотрудник = Мероприятия.Сотрудник
		|			И (Мероприятия.ДатаМероприятия > Регистраторы.ДатаСобытия)
		|			И (НЕ Мероприятия.Отменено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Сотрудник,
		|	ДатаСобытия,
		|	Регистратор,
		|	ДатаМероприятия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			МероприятияСотрудника = Новый Массив;
			ДокументыМероприятий.Вставить(Выборка.Сотрудник, МероприятияСотрудника);
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеМероприятия = Новый Структура(
					"ДатаСобытия,
					|Регистратор,
					|ДатаМероприятия,
					|ИдМероприятия,
					|Возвратное,
					|НомерСтроки");
				
				ЗаполнитьЗначенияСвойств(ОписаниеМероприятия, Выборка);
				
				МероприятияСотрудника.Добавить(ОписаниеМероприятия);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыМероприятий;
	
КонецФункции

Процедура ПроверкаВозможностиРегистрацииМероприятияКадровогоПеревода(СотрудникиДаты, Регистратор, ИсключаемыеРегистраторы, Отказ) Экспорт
	
	ДокументыСотрудников = ДокументыВозвратныхМероприятий(СотрудникиДаты, ИсключаемыеРегистраторы);
	Если ДокументыСотрудников.Количество() > 0 Тогда
		
		Для Каждого ДокументыСотрудника Из ДокументыСотрудников Цикл
			
			Для Каждого ДанныеРегистратора Из ДокументыСотрудника.Значение Цикл
				
				Если ДанныеРегистратора.НомерСтроки = 0 Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Дата события %1 попадет на период действия срочного кадрового перевода (%2), оканчивающегося %3.';
							|en = 'Event %1 date falls within the period of urgent employee transfer (%2) ending on %3.'"),
						Формат(ДанныеРегистратора.ДатаСобытия, "ДЛФ=D"),
						ДанныеРегистратора.Регистратор,
						Формат(ДанныеРегистратора.ДатаМероприятия, "ДЛФ=D"));
					
					Если ДанныеРегистратора.Возвратное Тогда
						Поле = "ДатаОкончания";
					Иначе
						Поле = "ДатаНачала";
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'По сотруднику %1 событие %2 попадет на период действия срочного кадрового перевода (%3), оканчивающегося %4.';
							|en = 'The event %2 for employee %1 falls within the period of urgent employee transfer (%3) ending on %4.'"),
						ДокументыСотрудника.Ключ,
						Формат(ДанныеРегистратора.ДатаСобытия, "ДЛФ=D"),
						ДанныеРегистратора.Регистратор,
						Формат(ДанныеРегистратора.ДатаМероприятия, "ДЛФ=D"));
					
						Поле = "Сотрудники[" + Формат(ДанныеРегистратора.НомерСтроки - 1, "ЧРГ=") + "].Сотрудник";
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, Поле, "Объект", Отказ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Документы, регистрирующие увольнения

Функция ДокументыБудущихМероприятий(СотрудникиДаты, ИсключаемыеРегистраторы) Экспорт
	
	ИсключаемыеВидыМероприятий = Новый Массив;
	ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ);
	ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ);
	
	ДокументыМероприятий = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	Запрос.УстановитьПараметр("ИсключаемыеВидыМероприятий", ИсключаемыеВидыМероприятий);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	СотрудникиДаты.ДатаСобытия КАК ДатаСобытия,
		|	СотрудникиДаты.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиДаты.Сотрудник КАК Сотрудник,
		|	СотрудникиДаты.ДатаСобытия КАК ДатаСобытия,
		|	СотрудникиДаты.НомерСтроки КАК НомерСтроки,
		|	Мероприятия.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО СотрудникиДаты.Сотрудник = Мероприятия.Сотрудник
		|			И (НЕ Мероприятия.ВидМероприятия В (&ИсключаемыеВидыМероприятий))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
		|		ПО (Мероприятия.Организация = МероприятияОтмененные.Организация)
		|			И (Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия)
		|			И (МероприятияОтмененные.Отменено)
		|ГДЕ
		|	МероприятияОтмененные.ИдМероприятия ЕСТЬ NULL
		|	И НЕ Мероприятия.Регистратор В (&ИсключаемыеРегистраторы)
		|	И НЕ Мероприятия.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДаты.Сотрудник,
		|	СотрудникиДаты.ДатаСобытия,
		|	СотрудникиДаты.НомерСтроки,
		|	Мероприятия.Регистратор
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мероприятия.Регистратор) > 0 И
		|	СотрудникиДаты.ДатаСобытия < МАКСИМУМ(Мероприятия.ДатаМероприятия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистраторы.Сотрудник КАК Сотрудник,
		|	Регистраторы.ДатаСобытия КАК ДатаСобытия,
		|	Регистраторы.НомерСтроки КАК НомерСтроки,
		|	Регистраторы.Регистратор КАК Регистратор,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО Регистраторы.Регистратор = Мероприятия.Регистратор
		|			И Регистраторы.Сотрудник = Мероприятия.Сотрудник
		|			И (Мероприятия.ДатаМероприятия > Регистраторы.ДатаСобытия)
		|			И (НЕ Мероприятия.ВидМероприятия В (&ИсключаемыеВидыМероприятий))
		|			И (НЕ Мероприятия.Отменено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Сотрудник,
		|	ДатаСобытия,
		|	Регистратор,
		|	ДатаМероприятия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			МероприятияСотрудника = Новый Массив;
			ДокументыМероприятий.Вставить(Выборка.Сотрудник, МероприятияСотрудника);
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеМероприятия = Новый Структура(
					"ДатаСобытия,
					|Регистратор,
					|ДатаМероприятия,
					|ИдМероприятия,
					|НомерСтроки");
				
				ЗаполнитьЗначенияСвойств(ОписаниеМероприятия, Выборка);
				
				МероприятияСотрудника.Добавить(ОписаниеМероприятия);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыМероприятий;
	
КонецФункции

Процедура ПроверкаВозможностиРегистрацииМероприятияУвольнения(СотрудникиДаты, Регистратор, ИсключаемыеРегистраторы, Отказ) Экспорт
	
	Если СотрудникиДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыСотрудников = ДокументыБудущихМероприятий(СотрудникиДаты, ИсключаемыеРегистраторы);
	Если ДокументыСотрудников.Количество() > 0 Тогда
		
		Для Каждого ДокументыСотрудника Из ДокументыСотрудников Цикл
			
			Для Каждого ДанныеРегистратора Из ДокументыСотрудника.Значение Цикл
				
				Если ДанныеРегистратора.НомерСтроки = 0 Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В базе данных зарегистрированы мероприятия с датой (%1, %2) более поздней чем дата увольнения %3.';
							|en = 'Events with a date (%1, %2) later than the dismissal date %3 are registered in the database.'"),
						Формат(ДанныеРегистратора.ДатаМероприятия, "ДЛФ=D"),
						ДанныеРегистратора.Регистратор,
						Формат(ДанныеРегистратора.ДатаСобытия, "ДЛФ=D"));
					
					Поле = "ДатаУвольнения";
					
				Иначе
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'По сотруднику %1 в базе данных зарегистрированы мероприятия с датой (%2, %3) более поздней чем дата увольнения %4.';
							|en = 'Events with a date (%2, %3) later than the dismissal date %4 are registered in the database for employee %1.'"),
						ДокументыСотрудника.Ключ,
						Формат(ДанныеРегистратора.ДатаМероприятия, "ДЛФ=D"),
						ДанныеРегистратора.Регистратор,
						Формат(ДанныеРегистратора.ДатаСобытия, "ДЛФ=D"));
					
					Поле = "Сотрудники[" + Формат(ДанныеРегистратора.НомерСтроки - 1, "ЧРГ=") + "].Сотрудник";
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Регистратор, Поле, "Объект", Отказ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьГруппуИнформацииОБудущихМероприятиях(УправляемаяФорма, ДатаУвольнения) Экспорт
	
	Объект = УправляемаяФорма.Объект;
	Элементы = УправляемаяФорма.Элементы;
	
	ОтображатьИнформацию = Ложь;
	УправляемаяФорма.ДанныеРегистраторовБудущихМероприятий = Неопределено;
	Если Объект.ОтразитьВТрудовойКнижке И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		СотрудникиДаты = ПустаяТаблицаСотрудникиДатыДляПроверкиПоследовательностиМероприятий();
		Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
			
			ДобавитьСотрудникаВТаблицуСотрудникиДаты(
				СотрудникиДаты, Объект.Сотрудник, ДатаУвольнения);
			
		КонецЕсли;
		
		Если СотрудникиДаты.Количество() > 0 Тогда
			
			ИсключаемыеРегистраторы = Новый Массив;
			ИсключаемыеРегистраторы.Добавить(Объект.Ссылка);
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ИсправленныйДокумент", Объект.Ссылка.Метаданные()) Тогда
				
				Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
					ИсключаемыеРегистраторы.Добавить(Объект.ИсправленныйДокумент);
				КонецЕсли;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументыСотрудника = ДокументыБудущихМероприятий(
				СотрудникиДаты, ИсключаемыеРегистраторы);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ДокументыСотрудника.Количество() > 0 Тогда
				
				ОтображатьИнформацию = Истина;
				
				УправляемаяФорма.ДанныеРегистраторовБудущихМероприятий = Новый ФиксированныйМассив(ДокументыСотрудника[Объект.Сотрудник]);
				ДанныеРегистратора = УправляемаяФорма.ДанныеРегистраторовБудущихМероприятий[0];
				
				ТекстЗаголовка = СтрШаблон(
					НСтр("ru = 'В базе данных зарегистрированы мероприятия трудовой книжки, дата которых больше даты увольнения (%1).
						|Для регистрации увольнения необходимо:';
						|en = 'The database contains events in the employment record book, the date of which is greater than the date of dismissal (%1).
						|To register dismissal, you should:'"),
					Формат(ДанныеРегистратора.ДатаСобытия, "ДЛФ=D"));
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ПредупреждениеОБудущихМероприятияхЗаголовокДекорация",
					"Заголовок",
					ТекстЗаголовка);
				
				ТекстПервогоВарианта = Новый ФорматированнаяСтрока(
					"• ",
					НСтр("ru = 'Отредактировать документ-регистратор мероприятия';
						|en = 'Edit event recorder document'"),
					" ",
					Новый ФорматированнаяСтрока(Строка(ДанныеРегистратора.Регистратор), , , , "ОткрытьРегистраторВозвратногоМероприятия"));
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ПредупреждениеОБудущихМероприятияхТекстПервогоВариантаДекорация",
					"Заголовок",
					ТекстПервогоВарианта);
				
				ТекстВторогоВарианта = Новый ФорматированнаяСтрока(
					"• ",
					НСтр("ru = 'Отменить будущее мероприятие с помощью документа';
						|en = 'Cancel a future event with a document'"),
					" ",
					Новый ФорматированнаяСтрока(
						ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.РегистрацияТрудовойДеятельности), , , , "ОтменитьБудущиеМероприятия"));
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы,
					"ПредупреждениеОБудущихМероприятияхТекстВторогоВариантаДекорация",
					"Заголовок",
					ТекстВторогоВарианта);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПредупреждениеОБудущихМероприятияхГруппа",
		"Видимость",
		ОтображатьИнформацию);
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеФилиалов(МенеджерВременныхТаблиц) Экспорт
	
	ДанныеСтрахователей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОбОрганизациях.Период КАК Период,
		|	СведенияОбОрганизациях.Организация КАК Организация,
		|	ВЫРАЗИТЬ(СведенияОбОрганизациях.НаименованиеСокращенное КАК СТРОКА(1024)) КАК НаименованиеСокращенное,
		|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
		|	СведенияОбОрганизациях.РегистрационныйНомерСФР КАК РегистрационныйНомерСФР
		|ИЗ
		|	ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеСтрахователя = ДанныеСтрахователей.Получить(Выборка.Организация);
		Если ДанныеСтрахователя = Неопределено Тогда
			ДанныеСтрахователя = Новый Соответствие;
			ДанныеСтрахователей.Вставить(Выборка.Организация, ДанныеСтрахователя);
		КонецЕсли;
		
		ДанныеПериода = Новый Структура("НаименованиеСокращенное,РегистрационныйНомерПФР,РегистрационныйНомерСФР");
		ЗаполнитьЗначенияСвойств(ДанныеПериода, Выборка);
		
		ДанныеСтрахователя.Вставить(Выборка.Период, ДанныеПериода);
		
	КонецЦикла;
	
	Возврат ДанныеСтрахователей;
	
КонецФункции

Процедура ДобавитьЗаписьДляПрежнегоФилиала(ДвиженияДокумента, Запись, ДанныеФилиалов, Период, ОрганизацияДокумента, ОрганизацияПеревода, ВозвратноеМероприятие = Ложь) Экспорт
	
	ДанныеПериодаОрганизации = Неопределено;
	ДанныеОрганизации = ДанныеФилиалов.Получить(Запись.Организация);
	Если ДанныеОрганизации <> Неопределено Тогда
		ДанныеПериодаОрганизации = ДанныеОрганизации.Получить(Период);
	КонецЕсли;
	
	Если ВозвратноеМероприятие Тогда
		ПрежняяОрганизация = ОрганизацияПеревода;
	Иначе
		ПрежняяОрганизация = ОрганизацияДокумента;
	КонецЕсли;
	
	ДанныеПериодаПрежнейОрганизации = Неопределено;
	ДанныеПрежнейОрганизации = ДанныеФилиалов.Получить(ПрежняяОрганизация);
	Если ДанныеПрежнейОрганизации <> Неопределено Тогда
		ДанныеПериодаПрежнейОрганизации = ДанныеПрежнейОрганизации.Получить(Период);
	КонецЕсли;
	
	// Если регистрационные номера ПФР филиалов совпадают запись прежнего филиала не добавляется
	Если ДанныеПериодаОрганизации <> Неопределено
		И ДанныеПериодаПрежнейОрганизации <> Неопределено
		И ДанныеПериодаОрганизации.РегистрационныйНомерПФР = ДанныеПериодаПрежнейОрганизации.РегистрационныйНомерПФР Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.КодПоОКЗ)
		И ЗначениеЗаполнено(Запись.ТрудоваяФункция) Тогда
		
		Запись.КодПоОКЗ = ЭлектронныеТрудовыеКнижкиПовтИсп.КодПоОКЗТрудовойФункции(Запись.ТрудоваяФункция);
	КонецЕсли;
	
	ЗаписьПрежнего = ОбщегоНазначения.СкопироватьРекурсивно(Запись);
	
	ЗаписьПрежнего.Организация = ПрежняяОрганизация;
	ЗаписьПрежнего.Подразделение = Неопределено;
	ЗаписьПрежнего.Должность = Неопределено;
	ЗаписьПрежнего.РазрядКатегория = Неопределено;
	ЗаписьПрежнего.КодПоРееструДолжностей = Неопределено;
	ЗаписьПрежнего.ТрудоваяФункция = Неопределено;
	ЗаписьПрежнего.ПредставлениеДолжности = "";
	ЗаписьПрежнего.ОписаниеДолжности = "";
	ЗаписьПрежнего.ПредставлениеПодразделения = "";
	
	ЗаполнитьСведенияПереводаМеждуСтрахователями(
		ЗаписьПрежнего, ДанныеФилиалов, Запись.Организация, Период, Ложь);
	
	ЗаполнитьСведенияПереводаМеждуСтрахователями(
		Запись, ДанныеФилиалов, ЗаписьПрежнего.Организация, Период, Истина);
	
	ДвиженияДокумента.Добавить(ЗаписьПрежнего);
	
КонецПроцедуры

Процедура ЗаполнитьТипыОснованийУвольненияДляРегистрацииМероприятийТрудовойДеятельности(СписокОснований) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.ЗаполнитьТипыОснованийУвольненияДляРегистрацииМероприятийТрудовойДеятельности(СписокОснований);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТрудовойФункцииВДолжности(ДолжностьОбъект, Отказ) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.ПроверитьЗаполнениеТрудовойФункцииВДолжности(ДолжностьОбъект, Отказ);
	
КонецПроцедуры

#Область БлокировкаИзмененияОбъектов

Функция ДобавитьБлокировкуИзмененияОбъекта(КоллекцияБлокировок, СсылкаНаОбъект) Экспорт
	
	ДокументыПередачи = ДокументыПередачиМероприятийТрудовойДеятельности(СсылкаНаОбъект);
	Если ДокументыПередачи.Количество() > 0 Тогда
		
		ПредставлениеРегистраторов = Новый ФорматированнаяСтрока(
			Строка(ДокументыПередачи[0]), , , , ПолучитьНавигационнуюСсылку(ДокументыПередачи[0]));
			
		Если ДокументыПередачи.Количество() = 2 Тогда
			
			ПредставлениеРегистраторов = Новый ФорматированнаяСтрока(
				ПредставлениеРегистраторов,
				", ",
				Новый ФорматированнаяСтрока(
					Строка(ДокументыПередачи[1]), , , , ПолучитьНавигационнуюСсылку(ДокументыПередачи[1])));
			
		ИначеЕсли ДокументыПередачи.Количество() > 2 Тогда
			
			ПредставлениеРегистраторов = Новый ФорматированнаяСтрока(
				ПредставлениеРегистраторов,
				" ",
				СтрШаблон(НСтр("ru = 'и еще %1 док';
								|en = 'and %1 doc(s) more'"),
					ДокументыПередачи.Количество() - 1),
				".");
			
		КонецЕсли;
		
		Описание = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Записи трудовой книжки переданы в ПФР (';
				|en = 'The employment record book entries were transferred to PF ('"),
			ПредставлениеРегистраторов,
			НСтр("ru = ').
				|Редактирование документа может привести к отмене одних записей и добавлению новых (необходимости повторной отправки мероприятий с отменой ранее переданных).';
				|en = ').
				|If you edit the document, some records might be canceled and some records might be added. It might require resending events and cancelling the previously sent ones.'"));
		
		БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта("ЭлектронныеТрудовыеКнижки", Описание, Истина);
		Если Не ПравоДоступа("Изменение", Метаданные.Документы.РегистрацияТрудовойДеятельности) Тогда
			БлокировкаИзмененияОбъекта.УстановитьБлокировку = Ложь;
		КонецЕсли;
		КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
		
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботникаСТД_Р") Тогда
		
		Если ЗначениеЗаполнено(Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.ПрисоединенныеФайлыСТДР(СсылкаНаОбъект)) Тогда
			
			Описание = НСтр("ru = 'К документу приложены подписанные файл СТД-Р.
				|Редактирование документа приведет к отмене и удалению подписанных файлов СТД-Р.';
				|en = 'The signed STD-R file is attached to the document.
				|If you edit the document, the signed STD-R files will be canceled and deleted.'");
			
			БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта("ЭлектронныеТрудовыеКнижкиСТДР", Описание, Истина);
			КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция РаботаКСПоДаннымОтменяемогоМероприятия(ДанныеМероприятия) Экспорт
	
	Если ДанныеМероприятия.ДатаМероприятия >= '20210601'
		И ДанныеМероприятия.ДатаМероприятия < '20210722'
		И ЗначениеЗаполнено(ДанныеМероприятия.ТерриториальныеУсловия) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", ДанныеМероприятия.Организация);
		Запрос.УстановитьПараметр("ИдМероприятия", ДанныеМероприятия.ИдМероприятия);
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	МероприятияТрудовойДеятельностиПереданные.Регистратор.Дата КАК РегистраторДата,
			|	МероприятияТрудовойДеятельностиПереданные.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияТрудовойДеятельностиПереданные
			|ГДЕ
			|	МероприятияТрудовойДеятельностиПереданные.ИдМероприятия = &ИдМероприятия
			|	И МероприятияТрудовойДеятельностиПереданные.Организация = &Организация
			|	И НЕ МероприятияТрудовойДеятельностиПереданные.Отменено";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.РегистраторДата >= '20210701'
				И Выборка.РегистраторДата < '20210722' Тогда
				
				ДанныеФайлаСЗВТД = ПолучитьИзВременногоХранилища(
					ЗарплатаКадры.ПолучитьДанныеФайла(Выборка.Регистратор).СсылкаНаДвоичныеДанныеФайла);
				
				ИмяФайла = ПолучитьИмяВременногоФайла("txt");
				ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(ИмяВременногоКаталога);
				ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоКаталога) + ИмяФайла;
				ДанныеФайлаСЗВТД.Записать(ПолноеИмяФайла);
				
				ДанныеФайла = Новый ТекстовыйДокумент();
				ДанныеФайла.Прочитать(ПолноеИмяФайла, КодировкаТекста.UTF8);
				ТекстФайла = ДанныеФайла.ПолучитьТекст();
				
				ФайлВФормате01072021 = СтрНайти(ТекстФайла, "http://пф.рф/СЗВ-ТД/2020-09-26") > 0;
				Если ФайлВФормате01072021 Тогда
					ПозицияИдентификатора = СтрНайти(ТекстФайла, ДанныеМероприятия.ИдМероприятия);
					ПозицияСледующегоМероприятия = СтрНайти(ТекстФайла, "<Мероприятие>", , ПозицияИдентификатора);
					Если ПозицияСледующегоМероприятия = 0 Тогда
						ПозицияСледующегоМероприятия = СтрДлина(ТекстФайла);
					КонецЕсли;
					ПозицияРаботаКС = СтрНайти(ТекстФайла, "<РаботаКС>", , ПозицияИдентификатора);
					Если ПозицияРаботаКС < ПозицияСледующегоМероприятия Тогда
						ПозицияЗакрытияРаботаКС = СтрНайти(ТекстФайла, "</РаботаКС>", , ПозицияРаботаКС);
						Возврат Сред(ТекстФайла, ПозицияРаботаКС + 10, ПозицияЗакрытияРаботаКС - (ПозицияРаботаКС + 10));
					КонецЕсли;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
				УдалитьФайлы(ИмяВременногоКаталога);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеМероприятия.ТерриториальныеУсловия;
	
КонецФункции

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Макеты.ПФ_MXL_ЗаявленияОПредоставленииСведенийОТрудовойДеятельности,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Макеты.ПФ_MXL_СТД_Р,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты);
	
КонецПроцедуры

#КонецОбласти

Функция СтрокаСведенийПриПрисвоенииРазрядаКатегории(РазрядКатегория, Должность) Экспорт
	Возврат СтрШаблон(НСтр("ru = 'Присвоен %1 по специальности ""%2""';
							|en = 'Received %1 in specialty ""%2""'"), РазрядКатегория, Должность);
КонецФункции

Процедура ЗаполнитьДанныеДоговора(ДанныеСотрудника, СвойстваДоговора) Экспорт
	Если СвойстваДоговора <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.СрочностьТрудовогоДоговора) Тогда
			ДанныеСотрудника.СрочностьТрудовогоДоговора = СвойстваДоговора.СрочностьТрудовогоДоговора;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.УдаленностьРаботы) Тогда
			ДанныеСотрудника.УдаленностьРаботы = СвойстваДоговора.УдаленностьРаботы;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.СокращенностьГрафика) Тогда
			ДанныеСотрудника.СокращенностьГрафика = СвойстваДоговора.СокращенностьГрафика;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоллекцияПодчиненныхЭлементов(ЭлементФормыСКоллекциейПодчиненных)
	
	КоллекцииЭлементов = Новый Массив;
	КоллекцииЭлементов.Добавить(ЭлементФормыСКоллекциейПодчиненных.ПодчиненныеЭлементы);
	Для Каждого ЭлементФормы Из ЭлементФормыСКоллекциейПодчиненных.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КоллекцииЭлементов,
				КоллекцияПодчиненныхЭлементов(ЭлементФормы));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоллекцииЭлементов;
	
КонецФункции

Функция ДатаНачалаУчетаМероприятийДо2020Года()
	
	Возврат '20210101';
	
КонецФункции

Функция ПустаяТаблицаДанныхТрудовойДеятельности()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДанных.Колонки.Добавить("Фамилия", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("Отчество", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("СтраховойНомерПФР", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ДатаРождения", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КодКатегории", Новый ОписаниеТипов("ПеречислениеСсылка.КодКатегорииЗарегистрированногоЛицаЕФС1"));
	ТаблицаДанных.Колонки.Добавить("Гражданство", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	ТаблицаДанных.Колонки.Добавить("ЯвляетсяСовместителем", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПродолжении", Метаданные.ОпределяемыеТипы.ЗаявлениеОВеденииТрудовойКнижки.Тип);
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПродолженииДата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПродолженииОтмена", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПредоставлении", Метаданные.ОпределяемыеТипы.ЗаявлениеОВеденииТрудовойКнижки.Тип);
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПредоставленииДата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ЗаявлениеОПредоставленииОтмена", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТрудоваяДеятельность", Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПустаяСтруктураЗаписиОТрудовойДеятельности() Экспорт
	
	СтруктураЗаписи = Новый Структура("Регистратор,СотрудникЗаписи");
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.МероприятияТрудовойДеятельности.Измерения Цикл
		СтруктураЗаписи.Вставить(Измерение.Имя);
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные.РегистрыСведений.МероприятияТрудовойДеятельности.Ресурсы Цикл
		СтруктураЗаписи.Вставить(Ресурс.Имя);
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные.РегистрыСведений.МероприятияТрудовойДеятельности.Реквизиты Цикл
		СтруктураЗаписи.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	СтруктураЗаписи.Вставить("ОтразитьТерриториальныеУсловияПоТерриторииВыполненияРабот", Ложь);
	СтруктураЗаписи.Вставить("Территория");
	СтруктураЗаписи.Вставить("ГрафикРаботы");
	СтруктураЗаписи.Вставить("РаботаетДистанционно");
	СтруктураЗаписи.Вставить("ТрудовойДоговорДатаНачала");
	СтруктураЗаписи.Вставить("ТрудовойДоговорДатаОкончания");
	
	Возврат СтруктураЗаписи;
	
КонецФункции

Функция ДанныеТрудовойДеятельностиСотрудниковПоТаблицеОтборов(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организации, МероприятияВсехСотрудников = Ложь, ИсключаемыйРегистратор = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	ДанныеСотрудников = ПустаяТаблицаДанныхТрудовойДеятельности();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КадровыеДанные = "ГоловнаяОрганизация,Организация,ДатаУвольнения,Фамилия,Имя,Отчество,СтраховойНомерПФР,ДатаРождения,ДатаПриема,ВидЗанятости,МероприятияТрудовойДеятельностиПередавались,МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались,ТабельныйНомер,Страна,ИНН,ВидЗастрахованногоЛица";
	
	ПоляОтбораПериодическихДанных = Новый Структура;
	
	Если ЗначениеЗаполнено(ИсключаемыйРегистратор) Тогда
		
		ОтборМероприятияТрудовойДеятельностиПереданные = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ОтборМероприятияТрудовойДеятельностиПереданные, "Регистратор", "<>", ИсключаемыйРегистратор);
		
		ПоляОтбораПериодическихДанных.Вставить("МероприятияТрудовойДеятельностиПереданные", ОтборМероприятияТрудовойДеятельностиПереданные);
		
		ОтборЗаявленияОВеденииТрудовыхКнижекПереданные = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ОтборЗаявленияОВеденииТрудовыхКнижекПереданные, "Регистратор", "<>", ИсключаемыйРегистратор);
		
		ПоляОтбораПериодическихДанных.Вставить("ЗаявленияОВеденииТрудовыхКнижекПереданные", ОтборЗаявленияОВеденииТрудовыхКнижекПереданные);
		
	КонецЕсли;
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыДанных", "Сотрудник,ПериодКадровыхДанных");
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организации[0]));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.Период КАК Период,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Фамилия КАК Фамилия,
		|	КадровыеДанные.Имя КАК Имя,
		|	КадровыеДанные.Отчество КАК Отчество,
		|	КадровыеДанные.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанные.ИНН КАК ИНН,
		|	КадровыеДанные.Страна КАК Страна,
		|	КадровыеДанные.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанные.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	КадровыеДанные.ВидЗанятости КАК ВидЗанятости,
		|	КадровыеДанные.МероприятияТрудовойДеятельностиПередавались КАК МероприятияТрудовойДеятельностиПередавались,
		|	ВЫБОР
		|		КОГДА КадровыеДанные.ВидЗанятости ЕСТЬ NULL
		|			ТОГДА 99999999999999999
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА КадровыеДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(2100, 1, 1)
		|					ИНАЧЕ КадровыеДанные.ДатаУвольнения
		|				КОНЕЦ, ДАТАВРЕМЯ(2100, 1, 1), ДЕНЬ) * 1000000000 + КадровыеДанные.ВидЗанятости.Порядок * 1000000 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1900, 1, 1), ВЫБОР
		|					КОГДА КадровыеДанные.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(1900, 1, 1)
		|					ИНАЧЕ КадровыеДанные.ДатаПриема
		|				КОНЕЦ, ДЕНЬ)
		|	КОНЕЦ КАК ПриоритетРабочегоМеста,
		|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТПриоритетыСотрудников
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|ГДЕ
		|	ЕСТЬNULL(КадровыеДанные.ГоловнаяОрганизация, НЕОПРЕДЕЛЕНО) = &ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(КадровыеДанные.Период) КАК Период,
		|	МАКСИМУМ(КадровыеДанные.МероприятияТрудовойДеятельностиПередавались) КАК МероприятияТрудовойДеятельностиПередавались,
		|	МИНИМУМ(КадровыеДанные.ПриоритетРабочегоМеста) КАК ПриоритетРабочегоМеста
		|ПОМЕСТИТЬ ВТПриоритетыФизическихЛицПредварительно
		|ИЗ
		|	ВТПриоритетыСотрудников КАК КадровыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	КадровыеДанные.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Период КАК Период,
		|	КадровыеДанные.МероприятияТрудовойДеятельностиПередавались КАК МероприятияТрудовойДеятельностиПередавались,
		|	КадровыеДанные.ПриоритетРабочегоМеста КАК ПриоритетРабочегоМеста,
		|	МИНИМУМ(ПриоритетыСотрудников.НомерЗаписи) КАК НомерЗаписи
		|ПОМЕСТИТЬ ВТПриоритетыФизическихЛиц
		|ИЗ
		|	ВТПриоритетыФизическихЛицПредварительно КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|		ПО КадровыеДанные.ФизическоеЛицо = ПриоритетыСотрудников.ФизическоеЛицо
		|			И КадровыеДанные.ПриоритетРабочегоМеста = ПриоритетыСотрудников.ПриоритетРабочегоМеста
		|
		|СГРУППИРОВАТЬ ПО
		|	КадровыеДанные.ФизическоеЛицо,
		|	КадровыеДанные.Период,
		|	КадровыеДанные.МероприятияТрудовойДеятельностиПередавались,
		|	КадровыеДанные.ПриоритетРабочегоМеста
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриоритетыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПриоритетыФизическихЛиц.Период КАК Период,
		|	ПриоритетыСотрудников.Организация КАК Организация,
		|	ПриоритетыСотрудников.МероприятияТрудовойДеятельностиПередавались КАК МероприятияТрудовойДеятельностиПередавались,
		|	ПриоритетыСотрудников.Фамилия КАК Фамилия,
		|	ПриоритетыСотрудников.Имя КАК Имя,
		|	ПриоритетыСотрудников.Отчество КАК Отчество,
		|	ПриоритетыСотрудников.ДатаРождения КАК ДатаРождения,
		|	ПриоритетыСотрудников.ИНН КАК ИНН,
		|	ПриоритетыСотрудников.Страна КАК Страна,
		|	ПриоритетыСотрудников.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
		|	ПриоритетыСотрудников.ДатаПриема КАК ДатаПриема,
		|	ПриоритетыСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	ПриоритетыСотрудников.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ПриоритетыСотрудников.ВидЗанятости КАК ВидЗанятости
		|ПОМЕСТИТЬ ВТДанныеФизическихЛиц
		|ИЗ
		|	ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыФизическихЛиц КАК ПриоритетыФизическихЛиц
		|		ПО ПриоритетыСотрудников.ФизическоеЛицо = ПриоритетыФизическихЛиц.ФизическоеЛицо
		|			И ПриоритетыСотрудников.ПриоритетРабочегоМеста = ПриоритетыФизическихЛиц.ПриоритетРабочегоМеста
		|			И ПриоритетыСотрудников.НомерЗаписи = ПриоритетыФизическихЛиц.НомерЗаписи";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗаявленияСотрудников();
	ПараметрыПостроения.ИмяВТСотрудникиПериоды = "ВТСотрудникиПериодыДанных";
	ПараметрыПостроения.ИмяПоляПериод = "ОкончаниеПериода";
	
	СоздатьВТЗаявленияСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения,
		"ВТВсеЗаявленияСотрудников", ИсключаемыйРегистратор, ПоляОтбораПериодическихДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиПериодыДанных.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ЗаявленияНаВедениеБумажнойТрудовойКнижки.Организация, ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Организация) КАК Организация,
		|	ЗаявленияНаВедениеБумажнойТрудовойКнижки.Заявление КАК ЗаявлениеОПродолжении,
		|	ЗаявленияНаВедениеБумажнойТрудовойКнижки.Дата КАК ЗаявлениеОПродолженииДата,
		|	ЗаявленияНаВедениеБумажнойТрудовойКнижки.Передано КАК ЗаявлениеОПродолженииПередано,
		|	ЗаявленияНаВедениеБумажнойТрудовойКнижки.Отозвано КАК ЗаявлениеОПродолженииОтозвано,
		|	ЗаявленияНаВедениеБумажнойТрудовойКнижки.ДатаПередачиОтзыва КАК ЗаявлениеОПродолженииДатаПередачиОтзыва,
		|	ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Заявление КАК ЗаявлениеОПредоставлении,
		|	ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Дата КАК ЗаявлениеОПредоставленииДата,
		|	ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Передано КАК ЗаявлениеОПредоставленииПередано,
		|	ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Отозвано КАК ЗаявлениеОПредоставленииОтозвано,
		|	ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.ДатаПередачиОтзыва КАК ЗаявлениеОПредоставленииДатаПередачиОтзыва
		|ПОМЕСТИТЬ ВТЗаявленияСотрудников
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеЗаявленияСотрудников КАК ЗаявленияНаВедениеБумажнойТрудовойКнижки
		|		ПО СотрудникиПериодыДанных.ОкончаниеПериода = ЗаявленияНаВедениеБумажнойТрудовойКнижки.Период
		|			И СотрудникиПериодыДанных.Организация = ЗаявленияНаВедениеБумажнойТрудовойКнижки.Организация
		|			И СотрудникиПериодыДанных.ФизическоеЛицо = ЗаявленияНаВедениеБумажнойТрудовойКнижки.ФизическоеЛицо
		|			И (ЗаявленияНаВедениеБумажнойТрудовойКнижки.ВидЗаявления = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ВедениеБумажнойТрудовойКнижки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеЗаявленияСотрудников КАК ЗаявленияНаВедениеЭлектроннойТрудовойКнижки
		|		ПО СотрудникиПериодыДанных.ОкончаниеПериода = ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Период
		|			И СотрудникиПериодыДанных.Организация = ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Организация
		|			И СотрудникиПериодыДанных.ФизическоеЛицо = ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.ФизическоеЛицо
		|			И (ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.ВидЗаявления = ЗНАЧЕНИЕ(Перечисление.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СведенияОТрудовойДеятельностиВЭлектроннойФорме))
		|ГДЕ
		|	НЕ ЕСТЬNULL(ЗаявленияНаВедениеЭлектроннойТрудовойКнижки.Заявление, ЗаявленияНаВедениеБумажнойТрудовойКнижки.Заявление) ЕСТЬ NULL";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	Запрос.Выполнить();
	
	СоздатьВТКПередачеМероприятияТрудовойДеятельности(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения);
	
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета());
	Запрос.УстановитьПараметр("Организации", Организации);
	
	ВидыМероприятийСотрудниковВнеШтата = Новый Массив;
	ВидыМероприятийСотрудниковВнеШтата.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ);
	ВидыМероприятийСотрудниковВнеШтата.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ);
	Запрос.УстановитьПараметр("ВидыМероприятийСотрудниковВнеШтата", ВидыМероприятийСотрудниковВнеШтата);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Период КАК ПериодКадровыхДанных,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(КПередачеМероприятияТрудовойДеятельности.СотрудникЗаписи, КадровыеДанныеСотрудников.Сотрудник) КАК СотрудникЗаписи,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КПередачеМероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
		|	КадровыеДанные.Фамилия КАК Фамилия,
		|	КадровыеДанные.Имя КАК Имя,
		|	КадровыеДанные.Отчество КАК Отчество,
		|	КадровыеДанные.ДатаРождения КАК ДатаРождения,
		|	КадровыеДанные.ИНН КАК ИНН,
		|	КадровыеДанные.Страна КАК Гражданство,
		|	КадровыеДанные.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанные.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ВЫБОР
		|		КОГДА КПередачеМероприятияТрудовойДеятельности.ЯвляетсяСовместителем ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА КадровыеДанныеСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ КПередачеМероприятияТрудовойДеятельности.ЯвляетсяСовместителем
		|	КОНЕЦ КАК ЯвляетсяСовместителем,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.МероприятияТрудовойДеятельностиПередавались, ЕСТЬNULL(КадровыеДанные.МероприятияТрудовойДеятельностиПередавались, ЛОЖЬ)) КАК МероприятияТрудовойДеятельностиПередавались,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались, ЛОЖЬ) КАК МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриемаСотрудника,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольненияСотрудника,
		|	КПередачеМероприятияТрудовойДеятельности.Регистратор КАК Регистратор,
		|	ЗаявленияСотрудников.ЗаявлениеОПродолжении КАК ЗаявлениеОПродолжении,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПродолженииДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаявлениеОПродолженииДата,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПродолженииПередано, ИСТИНА) КАК ЗаявлениеОПродолженииПередано,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПродолженииОтозвано, ЛОЖЬ) КАК ЗаявлениеОПродолженииОтмена,
		|	ЗаявленияСотрудников.ЗаявлениеОПродолженииДатаПередачиОтзыва КАК ЗаявлениеОПродолженииДатаПередачиОтзыва,
		|	ЗаявленияСотрудников.ЗаявлениеОПредоставлении КАК ЗаявлениеОПредоставлении,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПредоставленииДата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаявлениеОПредоставленииДата,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПредоставленииПередано, ИСТИНА) КАК ЗаявлениеОПредоставленииПередано,
		|	ЕСТЬNULL(ЗаявленияСотрудников.ЗаявлениеОПредоставленииОтозвано, ЛОЖЬ) КАК ЗаявлениеОПредоставленииОтмена,
		|	ЗаявленияСотрудников.ЗаявлениеОПредоставленииДатаПередачиОтзыва КАК ЗаявлениеОПредоставленииДатаПередачиОтзыва,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
		|	КПередачеМероприятияТрудовойДеятельности.ВидМероприятия КАК ВидМероприятия,
		|	КПередачеМероприятияТрудовойДеятельности.Сведения КАК Сведения,
		|	КПередачеМероприятияТрудовойДеятельности.Подразделение КАК Подразделение,
		|	КПередачеМероприятияТрудовойДеятельности.Должность КАК Должность,
		|	КПередачеМероприятияТрудовойДеятельности.РазрядКатегория КАК РазрядКатегория,
		|	КПередачеМероприятияТрудовойДеятельности.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	КПередачеМероприятияТрудовойДеятельности.ТрудоваяФункция КАК ТрудоваяФункция,
		|	КПередачеМероприятияТрудовойДеятельности.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.СерияДокументаОснования КАК СерияДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.НомерДокументаОснования КАК НомерДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаС КАК ДатаС,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаПо КАК ДатаПо,
		|	КПередачеМероприятияТрудовойДеятельности.ДатаОтмены КАК ДатаОтмены,
		|	КПередачеМероприятияТрудовойДеятельности.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	КПередачеМероприятияТрудовойДеятельности.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	КПередачеМероприятияТрудовойДеятельности.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	КПередачеМероприятияТрудовойДеятельности.КодПоОКЗ КАК КодПоОКЗ,
		|	КПередачеМероприятияТрудовойДеятельности.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	КПередачеМероприятияТрудовойДеятельности.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	КПередачеМероприятияТрудовойДеятельности.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	КПередачеМероприятияТрудовойДеятельности.УдаленностьРаботы КАК УдаленностьРаботы,
		|	КПередачеМероприятияТрудовойДеятельности.СокращенностьГрафика КАК СокращенностьГрафика,
		|	КПередачеМероприятияТрудовойДеятельности.ОписаниеДолжности КАК ОписаниеДолжности
		|ИЗ
		|	ВТДанныеФизическихЛиц КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКПередачеМероприятияТрудовойДеятельности КАК КПередачеМероприятияТрудовойДеятельности
		|			ПО КадровыеДанныеСотрудников.Сотрудник = КПередачеМероприятияТрудовойДеятельности.СотрудникЗаписи
		|				И (КПередачеМероприятияТрудовойДеятельности.Организация В (&Организации))
		|		ПО КадровыеДанные.ФизическоеЛицо = КадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияСотрудников КАК ЗаявленияСотрудников
		|		ПО КадровыеДанные.ФизическоеЛицо = ЗаявленияСотрудников.ФизическоеЛицо
		|			И (ЗаявленияСотрудников.Организация В (&Организации))
		|ГДЕ
		|	ЕСТЬNULL(ЕСТЬNULL(КПередачеМероприятияТрудовойДеятельности.Организация, ЗаявленияСотрудников.Организация), КадровыеДанные.Организация) В (&Организации)
		|	И (КадровыеДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ КадровыеДанные.ДатаУвольнения >= &ДатаНачалаУчета
		|			ИЛИ КПередачеМероприятияТрудовойДеятельности.ВидМероприятия В (&ВидыМероприятийСотрудниковВнеШтата))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	ФизическоеЛицо,
		|	ЯвляетсяСовместителем,
		|	ДатаМероприятия,
		|	ДатаОтмены УБЫВ";
	
	ИменаОбщедоступныхПолей = ЭлектронныеТрудовыеКнижкиКлиентСервер.ДоступныеПоляВсехВидовМероприятий();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
		ИменаДоступныхПолей = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий(Выборка.ПериодКадровыхДанных);
		ДанныеСотрудника = ДанныеСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, Выборка, ,
			"ЗаявлениеОПродолжении,ЗаявлениеОПродолженииДата,ЗаявлениеОПродолженииОтмена,ЗаявлениеОПредоставлении,ЗаявлениеОПредоставленииДата,ЗаявлениеОПредоставленииОтмена");
		ДанныеСотрудника.КодКатегории = ПерсонифицированныйУчет.КодКатегорииЗарегистрированногоЛицаЕФС1(Выборка.ВидЗастрахованногоЛица);
		
		Если Выборка.ЗаявлениеОПродолженииДата > Выборка.ЗаявлениеОПредоставленииДата Тогда
			
			ДанныеСотрудника.ЗаявлениеОПродолженииДата = Выборка.ЗаявлениеОПродолженииДата;
			Если Не Выборка.ЗаявлениеОПродолженииПередано
					И Не Выборка.ЗаявлениеОПродолженииОтмена
				Или Выборка.ЗаявлениеОПродолженииПередано
					И Выборка.ЗаявлениеОПродолженииОтмена
					И Не ЗначениеЗаполнено(Выборка.ЗаявлениеОПродолженииДатаПередачиОтзыва) Тогда
				
				ДанныеСотрудника.ЗаявлениеОПродолжении = Выборка.ЗаявлениеОПродолжении;
				ДанныеСотрудника.ЗаявлениеОПродолженииОтмена = Выборка.ЗаявлениеОПродолженииОтмена;
				Если Выборка.ЗаявлениеОПредоставленииОтмена Тогда
					ДанныеСотрудника.ЗаявлениеОПредоставлении = Выборка.ЗаявлениеОПредоставлении;
					ДанныеСотрудника.ЗаявлениеОПредоставленииОтмена = Выборка.ЗаявлениеОПредоставленииОтмена;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ДанныеСотрудника.ЗаявлениеОПредоставленииДата = Выборка.ЗаявлениеОПредоставленииДата;
			Если Не Выборка.ЗаявлениеОПредоставленииПередано
					И Не Выборка.ЗаявлениеОПредоставленииОтмена
				Или Выборка.ЗаявлениеОПредоставленииПередано
					И Выборка.ЗаявлениеОПредоставленииОтмена
					И Не ЗначениеЗаполнено(Выборка.ЗаявлениеОПредоставленииДатаПередачиОтзыва)Тогда
					
				ДанныеСотрудника.ЗаявлениеОПредоставлении = Выборка.ЗаявлениеОПредоставлении;
				ДанныеСотрудника.ЗаявлениеОПредоставленииОтмена = Выборка.ЗаявлениеОПредоставленииОтмена;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдалитьДанныеПредыдущихПериодов = Не Выборка.МероприятияТрудовойДеятельностиПередавались;
		ЕстьДанныеДоНачалаУчета = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ВидМероприятия) Тогда
				
				ЗаписьОДеятельности = ПустаяСтруктураЗаписиОТрудовойДеятельности();
				ЗаполнитьЗначенияСвойств(ЗаписьОДеятельности, Выборка, ИменаОбщедоступныхПолей + "," + ИменаДоступныхПолей.Получить(Выборка.ВидМероприятия));
				
				Если Не ЗначениеЗаполнено(ЗаписьОДеятельности.НаименованиеДокументаОснования) Тогда
					ЗаписьОДеятельности.НаименованиеДокументаОснования = НаименованиеДокументаОснования();
				КонецЕсли;
				
				Если ЗаписьОДеятельности.ДатаМероприятия >= ДатаНачалаУчета()
					Или ЗаписьОДеятельности.ДатаОтмены >= ДатаНачалаУчета() Тогда
					
					УдалитьДанныеПредыдущихПериодов = Ложь;
				Иначе
					ЕстьДанныеДоНачалаУчета = Истина;
				КонецЕсли;
				
				Если Выборка.ПериодКадровыхДанных >= ДатаНачалаУчетаМероприятийДо2020Года() Тогда
					УдалитьДанныеПредыдущихПериодов = Ложь;
				КонецЕсли;
				
				ДанныеСотрудника.ТрудоваяДеятельность.Добавить(ЗаписьОДеятельности);
				
			Иначе
				
				Если Выборка.ПериодКадровыхДанных >= ДатаНачалаУчетаМероприятийДо2020Года()
					И Выборка.ПериодКадровыхДанных < ДобавитьМесяц(ДатаНачалаУчетаМероприятийДо2020Года(), 12)
					И Не Выборка.МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались
					И ЗначениеЗаполнено(Выборка.ДатаПриемаСотрудника)
					И Выборка.ДатаПриемаСотрудника < ДатаНачалаУчета() Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'По сотруднику %1 (%2) отсутствуют мероприятия до 2020 года (требуется последнее мероприятие ""ПРИЕМ"" или ""ПЕРЕВОД"")';
								|en = 'There are no events before 2020 for employee %1 (%2) (the last event ""HIRING"" or ""TRANSFER"" is required)'"),
							Выборка.ФизическоеЛицо,
							Выборка.ТабельныйНомер));
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если Не МероприятияВсехСотрудников Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеСотрудника.ЗаявлениеОПредоставлении)
				И Не ЗначениеЗаполнено(ДанныеСотрудника.ЗаявлениеОПродолжении) Тогда
				
				Если УдалитьДанныеПредыдущихПериодов
					Или ДанныеСотрудника.ТрудоваяДеятельность.Количество() = 0 Тогда
					
					ДанныеСотрудников.Удалить(ДанныеСотрудника);
					ДанныеСотрудника = Неопределено;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеСотрудника <> Неопределено Тогда
			
			Если Не Выборка.МероприятияТрудовойДеятельностиПередавались
				И Выборка.ПериодКадровыхДанных < ДобавитьМесяц(ДатаНачалаУчетаМероприятийДо2020Года(), 12)
				И Не ЕстьДанныеДоНачалаУчета
				И ЗначениеЗаполнено(Выборка.ДатаПриемаСотрудника)
				И Выборка.ДатаПриемаСотрудника < ДатаНачалаУчета() Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru = 'По сотруднику %1 (%2) отсутствуют мероприятия до 2020 года (требуется последнее мероприятие ""ПРИЕМ"" или ""ПЕРЕВОД"")';
							|en = 'There are no events before 2020 for employee %1 (%2) (the last event ""HIRING"" or ""TRANSFER"" is required)'"),
						Выборка.ФизическоеЛицо,
						Выборка.ТабельныйНомер));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

Функция ПредставлениеВыполняемойФункции(ВыборкаДанных, Знач ПредставлениеДляСТДР = Ложь) Экспорт 
	
	ПредставлениеФункции = "";
	
	СоставПредставления = Новый Массив;
	Если ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Прием
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Приостановление
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Возобновление
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение
			И ВыборкаДанных.Дата >= ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.ОписаниеДолжности) Тогда
			СоставПредставления.Добавить(ВыборкаДанных.ОписаниеДолжности);
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДанных.ПредставлениеДолжности) Тогда
			
			ПредставлениеДолжности = СокрЛП(ВыборкаДанных.ПредставлениеДолжности);
			
			Если ЗначениеЗаполнено(ВыборкаДанных.КодПоРееструДолжностей) Тогда
				ПредставлениеДолжности = ПредставлениеДолжности + ", " + СокрЛП(ВыборкаДанных.КодПоРееструДолжностей);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаДанных.РазрядКатегория) Тогда
				ПредставлениеДолжности = ПредставлениеДолжности + ", " + ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеРазрядаКатегории(ВыборкаДанных.РазрядКатегория);
			КонецЕсли;
			
			СоставПредставления.Добавить(ПредставлениеДолжности);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаДанных.ТрудоваяФункцияОписание) Тогда
			ТрудоваяФункцияОписание = ОписаниеТрудовойФункции(ВыборкаДанных.ТрудоваяФункцияОписание, ВыборкаДанных.ТрудоваяФункция);
			СоставПредставления.Добавить(ТрудоваяФункцияОписание);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Прием
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Приостановление
		Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Возобновление Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.ПредставлениеПодразделения) Тогда
			СоставПредставления.Добавить(ВыборкаДанных.ПредставлениеПодразделения);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ВыборкаДанных.Сведения) Тогда
		СоставПредставления.Добавить(ВыборкаДанных.Сведения);
	КонецЕсли;
	
	Если ВыборкаДанных.ЯвляетсяСовместителем Тогда
		Если ВыборкаДанных.Дата < ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
		
			СоставПредставления.Добавить(НСтр("ru = 'По совместительству';
												|en = 'As a second job'"));
		ИначеЕсли ПредставлениеДляСТДР Тогда
			СоставПредставления.Добавить("1");
		КонецЕсли;
	КонецЕсли;
		
	Если ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.ЗапретЗаниматьДолжность Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.ДатаС) Тогда
			
			СоставПредставления.Добавить(
				СтрШаблон(НСтр("ru = 'С %1 по %2';
								|en = 'From %1 to %2'"),
				ВыборкаДанных.ДатаС,
				ВыборкаДанных.ДатаПо));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПредставлениеДляСТДР И ВыборкаДанных.Дата >= ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
		Если ЗначениеЗаполнено(ВыборкаДанных.СрочностьТрудовогоДоговора) Тогда
			СрочностьТрудовогоДоговора = КодВидаДоговора(ВыборкаДанных);
			Если СрочностьТрудовогоДоговора <> Неопределено Тогда
				СоставПредставления.Добавить(СрочностьТрудовогоДоговора);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеФункции = СтрСоединить(СоставПредставления, ". ");
	
	Если Не ПустаяСтрока(ПредставлениеФункции) Тогда
		ПредставлениеФункции = ПредставлениеФункции + ".";
	КонецЕсли;
	
	Возврат ПредставлениеФункции;
	
КонецФункции

Функция КодВидаДоговора(ВыборкаДанных) Экспорт
	Если ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговор Тогда
		Возврат "0";
	ИначеЕсли ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорДо6Месяцев Тогда
		Возврат "0.1";
	ИначеЕсли ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорБолее6Месяцев Тогда
		Возврат "0.2";
	ИначеЕсли ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.БессрочныйТрудовойДоговорПоСовместительству Тогда
		Возврат "1";
	ИначеЕсли ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуДо6Месяцев Тогда
		Возврат "1.1";
	ИначеЕсли ВыборкаДанных.СрочностьТрудовогоДоговора = Перечисления.СрочностиТрудовогоДоговора.СрочныйТрудовойДоговорПоСовместительствуБолее6Месяцев Тогда
		Возврат "1.2";
	КонецЕсли;
	Возврат Неопределено
КонецФункции

Процедура ЗаполнитьПредставлениеКодаВыполняемойФункции(СтрокаПодраздела11, ВыборкаДанных) Экспорт
	
	СоставПредставления = Новый Массив;
	Если ЗначениеЗаполнено(ВыборкаДанных.КодПоОКЗ) Тогда
		Если ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ
			Или ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ Тогда
			
			СоставПредставления.Добавить(ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанных.КодПоОКЗ) + " " + КодТрудовойФункцииДоговораГПХ(ВыборкаДанных));
		Иначе
			СоставПредставления.Добавить(ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеКодаОКЗ(ВыборкаДанных.КодПоОКЗ));
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДанных.Дата >= ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
		УсловияРаботы = ПредставлениеУсловийРаботы(ВыборкаДанных);
		Если УсловияРаботы <> Неопределено Тогда
			СоставПредставления.Добавить(УсловияРаботы);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СоставПредставления) 
		И ВыборкаДанных.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование
		И ВыборкаДанных.Дата >= ПерсонифицированныйУчетКлиентСервер.ДатаПостановленияЕФС1_2023() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаДанных.ТрудоваяФункция)
			И (ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ДАВТ
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ДАВТФЛНС
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ДГПХ
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ДГПХФЛНС
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ДОИП
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ИЗЛД
				Или ВыборкаДанных.ТрудоваяФункция = Справочники.ТрудовыеФункции.ЛДПИ) Тогда
			
			СоставПредставления.Добавить(КодТрудовойФункцииДоговораГПХ(ВыборкаДанных));
		КонецЕсли;
	КонецЕсли;
	СтруктураЗаполнения = Новый Структура("КодПоОКЗ", СтрСоединить(СоставПредставления, ", "));
	СтрокаПодраздела11.Параметры.Заполнить(СтруктураЗаполнения);
	
КонецПроцедуры

Функция КодТрудовойФункцииДоговораГПХ(ВыборкаДанных) Экспорт
	Возврат ЭлектронныеТрудовыеКнижкиПовтИсп.КодТрудовойФункцииДоговораГПХ(ВыборкаДанных.Дата, ВыборкаДанных.ТрудоваяФункция);
КонецФункции

Функция ПредставлениеУсловийРаботы(ВыборкаДанных) Экспорт
	Если Не ВыборкаДанных.ЯвляетсяСовместителем Тогда
		Если ВыборкаДанных.ВидМероприятия <> Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение Тогда
			Если ВыборкаДанных.СокращенностьГрафика = Перечисления.СокращенностиГрафиков.НеполныйРабочийДень Тогда
				Возврат НСтр("ru = 'НЕПД';
							|en = 'Part-time'");
			ИначеЕсли ВыборкаДанных.СокращенностьГрафика = Перечисления.СокращенностиГрафиков.НеполнаяРабочаяНеделя Тогда
				Возврат НСтр("ru = 'НЕПН';
							|en = 'Part-time working week'");
			ИначеЕсли ВыборкаДанных.УдаленностьРаботы = Перечисления.УдаленностиРаботы.Надомная Тогда
				Возврат НСтр("ru = 'НДОМ';
							|en = 'Domestic work'");
			ИначеЕсли ВыборкаДанных.УдаленностьРаботы = Перечисления.УдаленностиРаботы.Удаленная Тогда
				Возврат НСтр("ru = 'ДИСТ';
							|en = 'Remote work'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ОписаниеТрудовойФункции(Знач ТрудоваяФункцияОписание, Знач ТрудоваяФункция) Экспорт
	ТрудоваяФункцияОписание = СокрЛП(ТрудоваяФункцияОписание);
	ДлинаОписания = СтрДлина(ТрудоваяФункцияОписание);
	Если ДлинаОписания > 255 Тогда
		ТрудоваяФункцияОписание = СокрЛП(Лев(ТрудоваяФункцияОписание, 255));
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Описание трудовой функции (%1) превышает 255 символов (%2) и было сокращено';
					|en = 'Labor function description (%1) exceeds 255 characters (%2) and has been truncated'"),
				ТрудоваяФункция, ДлинаОписания),
			ТрудоваяФункция, "Описание", "Объект");
	КонецЕсли;
	Возврат ТрудоваяФункцияОписание;
КонецФункции

Функция ПредставлениеПричиныУвольнения(СвойстваОснованияУвольнения, ДляКадровогоПриказа = Ложь, ЭтоЕФС1 = Ложь) Экспорт
	
	НормативныйДокумент = КадровыйУчет.НормативныйДокументОснованияУвольненияВРодительномПадеже(СвойстваОснованияУвольнения.ОснованиеУвольнения);
	
	ЧастиПредставленияПунктаСтатьи = Новый Массив;
	
	Если ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияАбзац) Тогда
		ЧастиПредставленияПунктаСтатьи.Добавить(ПредставлениеЧастиПунктаСтатьи(
			СвойстваОснованияУвольнения.ОснованиеУвольненияАбзац, Нстр("ru = 'Абзац';
																		|en = 'Paragraph'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияПодпункт) Тогда
		ЧастиПредставленияПунктаСтатьи.Добавить(ПредставлениеЧастиПунктаСтатьи(
			СвойстваОснованияУвольнения.ОснованиеУвольненияПодпункт, Нстр("ru = 'Подпункт';
																			|en = 'Subclause'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияПункт) Тогда
		ЧастиПредставленияПунктаСтатьи.Добавить(ПредставлениеЧастиПунктаСтатьи(
			СвойстваОснованияУвольнения.ОснованиеУвольненияПункт, Нстр("ru = 'Пункт';
																		|en = 'Clause'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияЧасть) Тогда
		ЧастиПредставленияПунктаСтатьи.Добавить(ПредставлениеЧастиПунктаСтатьи(
			СвойстваОснованияУвольнения.ОснованиеУвольненияЧасть, Нстр("ru = 'Часть';
																		|en = 'Part'")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияСтатья) Тогда
		ЧастиПредставленияПунктаСтатьи.Добавить(ПредставлениеЧастиПунктаСтатьи(
			СвойстваОснованияУвольнения.ОснованиеУвольненияСтатья, Нстр("ru = 'Статья';
																		|en = 'Article'")));
	КонецЕсли;
	
	ПредставлениеПунктаСтатьи = СтрСоединить(ЧастиПредставленияПунктаСтатьи, " ");
	
	ПредставлениеПричины = СокрЛП(СвойстваОснованияУвольнения.ОснованиеУвольненияТекстОснования);
	Если Не ПустаяСтрока(ПредставлениеПричины) И Не ПустаяСтрока(ПредставлениеПунктаСтатьи) Тогда
		ПредставлениеПричины = ПредставлениеПричины + ", ";
	КонецЕсли;
	
	ПредставлениеПричины = ПредставлениеПричины + ПредставлениеПунктаСтатьи;
	
	Если Не ПустаяСтрока(ПредставлениеПричины) И Не ПустаяСтрока(НормативныйДокумент) Тогда
		
		Если ДляКадровогоПриказа Тогда
			ПредставлениеПричины = ПредставлениеПричины + " ";
		Иначе
			ПредставлениеПричины = ПредставлениеПричины + ", ";
		КонецЕсли;
		
	КонецЕсли;
	
	ПредставлениеПричины = ПредставлениеПричины + НормативныйДокумент;
	
	Если ЭтоЕФС1 Тогда 
		КодПричиныУвольнения = Строка(СвойстваОснованияУвольнения.ПричинаУвольненияПФР);
		ПредставлениеПричины = ?(ПустаяСтрока(ПредставлениеПричины), КодПричиныУвольнения, КодПричиныУвольнения + ", " + ПредставлениеПричины);
	КонецЕсли;
	
	Возврат ПредставлениеПричины;
	
КонецФункции

Функция ПредставлениеЧастиПунктаСтатьи(ЧастьПунктаСтатьи, ПредставлениеПункта)
	
	Если СтрНайти(ВРег(ЧастьПунктаСтатьи), ВРег(НСтр("ru = 'Абзац';
													|en = 'Paragraph'"))) = 0 Тогда
		Возврат ПредставлениеПункта + " " + ЧастьПунктаСтатьи;
	КонецЕсли;
	
	Возврат ЧастьПунктаСтатьи;
	
КонецФункции

Процедура УстановитьПараметрыДокументовОснований(Область, ВыборкаДанных) Экспорт 
	
	ПараметрыЗаполнения = Новый Структура("НаименованиеДокументаОснования,ДатаДокументаОснования,НомерДокументаОснования");
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыборкаДанных);
	
	Если ЗначениеЗаполнено(ВыборкаДанных.НаименованиеВторогоДокументаОснования) Тогда
		
		ПараметрыЗаполнения.НаименованиеДокументаОснования = Строка(ВыборкаДанных.НаименованиеДокументаОснования) + Символы.ПС
			+ ВыборкаДанных.НаименованиеВторогоДокументаОснования;
		
		ПараметрыЗаполнения.ДатаДокументаОснования = Формат(ВыборкаДанных.ДатаДокументаОснования, "ДФ=dd.MM.yyyy") + Символы.ПС
			+ Формат(ВыборкаДанных.ДатаВторогоДокументаОснования, "ДФ=dd.MM.yyyy");
		
	КонецЕсли;
	
	ПараметрыЗаполнения.НомерДокументаОснования = ПредставлениеНомераДокументаОснования(ВыборкаДанных);
	
	Область.Параметры.Заполнить(ПараметрыЗаполнения);
	
КонецПроцедуры

Функция ПредставлениеНомераДокументаОснования(ВыборкаДанных)
	
	ПредставлениеНомера = Строка(ВыборкаДанных.НомерДокументаОснования) + ?(ЗначениеЗаполнено(ВыборкаДанных.СерияДокументаОснования), " ", "")
		+ ВыборкаДанных.СерияДокументаОснования;
	
	Если ЗначениеЗаполнено(ВыборкаДанных.НомерВторогоДокументаОснования) Тогда
		
		ПредставлениеНомера = ПредставлениеНомера + Символы.ПС
			+ ВыборкаДанных.НомерВторогоДокументаОснования + ?(ЗначениеЗаполнено(ВыборкаДанных.СерияВторогоДокументаОснования), " ", "")
			+ ВыборкаДанных.СерияВторогоДокументаОснования;
		
	КонецЕсли;
	
	Возврат ПредставлениеНомера;
	
КонецФункции

Функция ПредставлениеВидаМероприятия(Выборка, ВыводитьРегистрационныеНомера) Экспорт 
	
	ПредставлениеВида = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВРег(Выборка.ВидМероприятия));
	Если ВыводитьРегистрационныеНомера
		И Выборка.ВидМероприятия = Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "ПрежнийСтраховательРегистрационныйНомерПФР")
			И ЗначениеЗаполнено(Выборка.ПрежнийСтраховательРегистрационныйНомерПФР) Тогда
			
			ПредставлениеВида.Добавить(Выборка.ПрежнийСтраховательРегистрационныйНомерПФР);
		Иначе
			ПредставлениеВида.Добавить(Выборка.РегистрационныйНомерПФР);
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Выборка, "РегистрационныйНомерСФР")
			И ЗначениеЗаполнено(Выборка.РегистрационныйНомерСФР) Тогда
			
			ПредставлениеВида.Добавить(Выборка.РегистрационныйНомерСФР);
		Иначе
			ПредставлениеВида.Добавить(Выборка.РегистрационныйНомерПФР);
		КонецЕсли;
	КонеЦесли;
	Возврат СтрСоединить(ПредставлениеВида, Символы.ПС);
	
КонецФункции

Функция ПараметрыПостроенияВТЗаявленияСотрудников()
	
	ПараметрыПостроения = Новый Структура;
	ПараметрыПостроения.Вставить("ИмяВТСотрудникиПериоды", "ВТСотрудникиПериоды");
	ПараметрыПостроения.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");
	ПараметрыПостроения.Вставить("ИмяПоляПериод", "Период");
	
	Возврат ПараметрыПостроения;
	
КонецФункции

Функция СоздатьВТЗаявленияСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ИмяВТЗаявленияСотрудников = "ВТЗаявленияСотрудников", ИсключаемыйРегистратор = Неопределено, ПоляОтбораПериодическихДанных = Неопределено)
	
	Запрос = ЗапросВТЗаявленияСотрудников(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТЗаявленияСотрудников, ИсключаемыйРегистратор, ПоляОтбораПериодическихДанных);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросВТЗаявленияСотрудников(ТолькоРазрешенные, ПараметрыПостроения, ИмяВТЗаявленияСотрудников = "ВТЗаявленияСотрудников", ИсключаемыйРегистратор = Неопределено, ПоляОтбораПериодическихДанных = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	СотрудникиПериоды.Период КАК ДатаОкончания,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиДляПолученияЗаявлений
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТСотрудникиДляПолученияЗаявлений", "ФизическоеЛицо");
	
	ПараметрыПостроенияТаблицы = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	Если ЗначениеЗаполнено(ИсключаемыйРегистратор) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроенияТаблицы.Отборы, "Регистратор", "НЕ В", ИсключаемыйРегистратор);
	КонецЕсли;
	
	ПараметрыПостроенияТаблицы.СоответствиеПсевдонимовПолейСКД.Вставить("Организация", "ОрганизацияЗаявления");
	
	ЗапросЗаявлений =
		ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
			"ЗаявленияОВеденииТрудовыхКнижек",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроенияТаблицы);
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	ТекстЗапросаВТЗаявленияСотрудников =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период КАК Период,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗаявленияОВеденииТрудовыхКнижек.ВидЗаявления КАК ВидЗаявления,
		|	ВЫБОР
		|		КОГДА ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Отозвано,
		|	МАКСИМУМ(ЗаявленияОВеденииТрудовыхКнижек.ПериодЗаписи) КАК ПериодЗаписи
		|ПОМЕСТИТЬ ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижекПредварительно
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
		|		ПО (ВЫБОР
		|				КОГДА СотрудникиПериоды.Период = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА &МаксимальнаяДата
		|				ИНАЧЕ СотрудникиПериоды.Период
		|			КОНЕЦ >= ЗаявленияОВеденииТрудовыхКнижек.Период)
		|			И СотрудникиПериоды.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные КАК ЗаявленияОВеденииТрудовыхКнижекОтозванные
		|		ПО (ВЫБОР
		|				КОГДА СотрудникиПериоды.Период = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА &МаксимальнаяДата
		|				ИНАЧЕ СотрудникиПериоды.Период
		|			КОНЕЦ >= ЗаявленияОВеденииТрудовыхКнижекОтозванные.ДатаОтзыва)
		|			И (ЗаявленияОВеденииТрудовыхКнижек.Заявление = ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление)
		|			И (ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекОтозванные.ФизическоеЛицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.ФизическоеЛицо,
		|	ЗаявленияОВеденииТрудовыхКнижек.ВидЗаявления,
		|	ВЫБОР
		|		КОГДА ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период КАК Период,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления КАК ВидЗаявления,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ПериодЗаписи КАК ПериодЗаписи,
		|	ЗаявленияОВеденииТрудовыхКнижек.Организация КАК Организация,
		|	ЗаявленияОВеденииТрудовыхКнижек.Заявление КАК Заявление,
		|	ЗаявленияОВеденииТрудовыхКнижек.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТЗаявленияОВеденииТрудовыхКнижекСрезПоследних
		|ИЗ
		|	ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижекПредварительно КАК ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
		|		ПО ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ПериодЗаписи = ЗаявленияОВеденииТрудовыхКнижек.ПериодЗаписи
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления = ЗаявленияОВеденииТрудовыхКнижек.ВидЗаявления
		|ГДЕ
		|	НЕ ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Отозвано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления,
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ПериодЗаписи,
		|	ЗаявленияОВеденииТрудовыхКнижек.Организация,
		|	ЗаявленияОВеденииТрудовыхКнижек.Заявление,
		|	ЗаявленияОВеденииТрудовыхКнижек.Регистратор
		|ИЗ
		|	ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижекПредварительно КАК ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
		|		ПО ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ПериодЗаписи = ЗаявленияОВеденииТрудовыхКнижек.ПериодЗаписи
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижек.ФизическоеЛицо
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления = ЗаявленияОВеденииТрудовыхКнижек.ВидЗаявления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижекПредварительно КАК НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек
		|		ПО ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период = НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо = НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо
		|			И ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления = НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ВидЗаявления
		|			И (НЕ НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Отозвано)
		|ГДЕ
		|	ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Отозвано
		|	И НеОтозванныеПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПериоды.Период КАК Период,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ПериодЗаписи) КАК ТекущийПериодЗаписи
		|ПОМЕСТИТЬ ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияОВеденииТрудовыхКнижекСрезПоследних КАК ЗаявленияОВеденииТрудовыхКнижекСрезПоследних
		|		ПО СотрудникиПериоды.Период = ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Период
		|			И СотрудникиПериоды.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Период,
		|	СотрудникиПериоды.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Период КАК Период,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ПериодЗаписи КАК ПериодЗаписи,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Регистратор КАК Регистратор,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ПериодЗаписи КАК Дата,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Организация КАК Организация,
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ВидЗаявления КАК ВидЗаявления,
		|	ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Заявление КАК Заявление,
		|	ВЫБОР
		|		КОГДА ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Заявление ЕСТЬ NULL
		|			ТОГДА NULL
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних.Заявление ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК Передано,
		|	ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних.ДатаПередачи КАК ДатаПередачи,
		|	ВЫБОР
		|		КОГДА ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Заявление ЕСТЬ NULL
		|			ТОГДА NULL
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление ЕСТЬ NULL
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|	КОНЕЦ КАК Отозвано,
		|	ЗаявленияОВеденииТрудовыхКнижекОтозванные.ДатаОтзыва КАК ДатаОтзыва,
		|	ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные.ДатаПередачи КАК ДатаПередачиОтзыва,
		|	ВЫБОР
		|		КОГДА ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ТекущийПериодЗаписи ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ТекущееЗаявление
		|ПОМЕСТИТЬ ВТЗаявленияСотрудников
		|{ВЫБРАТЬ
		|	Организация КАК ОрганизацияЗаявления}
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияОВеденииТрудовыхКнижекСрезПоследних КАК ЗаявленияОВеденииТрудовыхКнижекСрезПоследних
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних
		|			ПО ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних.ФизическоеЛицо
		|				И ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Заявление = ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних.Заявление
		|				И (НЕ ЕСТЬNULL(ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних.Отозвано, ИСТИНА))
		|				И (&УсловияОтбораПереданные)}
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные КАК ЗаявленияОВеденииТрудовыхКнижекОтозванные
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные
		|				ПО ЗаявленияОВеденииТрудовыхКнижекОтозванные.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные.ФизическоеЛицо
		|					И ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление = ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные.Заявление
		|					И (ЕСТЬNULL(ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные.Отозвано, ЛОЖЬ))
		|					И (&УсловияОтбораПереданныхОтозванных)
		|			ПО ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекОтозванные.ФизическоеЛицо
		|				И ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Заявление = ЗаявленияОВеденииТрудовыхКнижекОтозванные.Заявление
		|				И ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Период >= ЗаявленияОВеденииТрудовыхКнижекОтозванные.ДатаОтзыва
		|				И (&УсловияОтбораОтозванные)}
		|			{ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек КАК ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек
		|			ПО ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Период = ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.Период
		|				И ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ФизическоеЛицо = ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ФизическоеЛицо
		|				И ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ПериодЗаписи = ПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек.ТекущийПериодЗаписи}
		|		ПО СотрудникиПериоды.Период = ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.Период
		|			И СотрудникиПериоды.ФизическоеЛицо = ЗаявленияОВеденииТрудовыхКнижекСрезПоследних.ФизическоеЛицо";
	
	Если ТипЗнч(ПоляОтбораПериодическихДанных) = Тип("Структура")
		И ПоляОтбораПериодическихДанных.Свойство("ЗаявленияОВеденииТрудовыхКнижекПереданные") Тогда
		
		УсловияОтбораПереданные = Новый Массив;
		УсловияОтбораПереданныхОтозванных = Новый Массив;
		УсловияОтбораОтозванные = Новый Массив;
		
		СчетчикПараметров = 0;
		Для Каждого ОписаниеУсловия Из ПоляОтбораПериодическихДанных.ЗаявленияОВеденииТрудовыхКнижекПереданные Цикл
			
			ПараметрУсловия = "ПараметрЗаявленияОВеденииТрудовыхКнижекПереданные" + СчетчикПараметров;
			Запрос.УстановитьПараметр(ПараметрУсловия, ОписаниеУсловия.ПравоеЗначение);
			
			ТекстУсловия = "ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних." + ОписаниеУсловия.ЛевоеЗначение + " " + ОписаниеУсловия.ВидСравнения + " (&" + ПараметрУсловия + ")";
			УсловияОтбораПереданные.Добавить(ТекстУсловия);
			
			ТекстУсловияПереданныхОтозванных = СтрЗаменить(ТекстУсловия, "ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних", "ЗаявленияОВеденииТрудовыхКнижекПереданныеОтозванные");
			УсловияОтбораПереданныхОтозванных.Добавить(ТекстУсловияПереданныхОтозванных);
			
			ТекстУсловияОтозванные = СтрЗаменить(ТекстУсловия, "ЗаявленияОВеденииТрудовыхКнижекПереданныеСрезПоследних", "ЗаявленияОВеденииТрудовыхКнижекОтозванные");
			УсловияОтбораОтозванные.Добавить(ТекстУсловияОтозванные);
			
			СчетчикПараметров = СчетчикПараметров + 1;
			
		КонецЦикла;
		
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораПереданные", СтрСоединить(УсловияОтбораПереданные, Символы.ПС + " И "));
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораПереданныхОтозванных", СтрСоединить(УсловияОтбораПереданныхОтозванных, Символы.ПС + " И "));
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораОтозванные", СтрСоединить(УсловияОтбораОтозванные, Символы.ПС + " И "));
		
	Иначе
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораПереданные", "ИСТИНА");
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораПереданныхОтозванных", "ИСТИНА");
		ТекстЗапросаВТЗаявленияСотрудников = СтрЗаменить(ТекстЗапросаВТЗаявленияСотрудников, "&УсловияОтбораОтозванные", "ИСТИНА");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросЗаявлений.Текст, ТекстЗапросаВТЗаявленияСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросЗаявлений);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды",
		ПараметрыПостроения.ИмяВТСотрудникиПериоды);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ФизическоеЛицо",
		"СотрудникиПериоды." + ПараметрыПостроения.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Период",
		"СотрудникиПериоды." + ПараметрыПостроения.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТЗаявленияСотрудников", ИмяВТЗаявленияСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если Не ПустаяСтрока(ИмяВТЗаявленияСотрудников) Тогда
		
		ИменаВременныхТаблицКУничтожению = Новый Массив;
		ИменаВременныхТаблицКУничтожению.Добавить("ВТСотрудникиДляПолученияЗаявлений");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТЗаявленияОВеденииТрудовыхКнижек");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТЗаявленияОВеденииТрудовыхКнижекСрезПоследних");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТПериодыЗаписиЗаявленийОВеденииТрудовыхКнижек");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#Область КадровыеДанныеСотрудников

Функция НеобходимыСведенияЗаявленийОВеденииТрудовойКнижки(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельности")
		Или ИмяПоля = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиДата")
		Или ИмяПоля = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиВид")
		Или ИмяПоля = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПередано")
		Или ИмяПоля = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиОтозвано")
	
КонецФункции

Функция ПутьКДаннымСведенийЗаявленийОВеденииТрудовойКнижки(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельности") Тогда
		ПутьКДанным = "	СведенияЗаявленийОВеденииТрудовойКнижки.Заявление";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиДата") Тогда
		ПутьКДанным = "	СведенияЗаявленийОВеденииТрудовойКнижки.Дата";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиВид") Тогда
		ПутьКДанным = "	СведенияЗаявленийОВеденииТрудовойКнижки.ВидЗаявления";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПередано") Тогда
		ПутьКДанным = "	СведенияЗаявленийОВеденииТрудовойКнижки.Передано";
	ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиОтозвано") Тогда
		ПутьКДанным = "	СведенияЗаявленийОВеденииТрудовойКнижки.Отозвано";
	КонецЕсли;

	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияОМероприятияхТрудовойДеятельности(Знач ИмяПоля)
	
	Возврат НеобходимыСведенияОПоследнихМероприятийТрудовойДеятельности(ИмяПоля)
		Или НеобходимыОбщиеСведенияОМероприятияхТрудовойДеятельности(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияОПоследнихМероприятийТрудовойДеятельности(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТрудоваяФункция")
		Или ИмяПоля = ВРег("КодПоОКЗ");
	
КонецФункции

Функция НеобходимыОбщиеСведенияОМероприятияхТрудовойДеятельности(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("МероприятияТрудовойДеятельностиПередавались")
		Или ИмяПоля = ВРег("МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались");
	
КонецФункции

Функция ПутьКДаннымСведенийОМероприятияхТрудовойДеятельности(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если НеобходимыОбщиеСведенияОМероприятияхТрудовойДеятельности(ИмяПоляВВерхнемРегистре) Тогда
		
		Если ИмяПоляВВерхнемРегистре = ВРег("МероприятияТрудовойДеятельностиПередавались") Тогда
			ПутьКДанным = "	ЕСТЬNULL(СведенияОМероприятияхТрудовойДеятельности.Передавались, ЛОЖЬ)";
		ИначеЕсли ИмяПоляВВерхнемРегистре = ВРег("МероприятияТрудовойДеятельностиДоНачалаУчетаПередавались") Тогда
			ПутьКДанным = "	ЕСТЬNULL(СведенияОМероприятияхТрудовойДеятельности.ПередавалисьДоНачалаУчета, ЛОЖЬ)";
		КонецЕсли;
		
	ИначеЕсли НеобходимыСведенияОПоследнихМероприятийТрудовойДеятельности(ИмяПоляВВерхнемРегистре) Тогда
		ПутьКДанным = "	 СведенияОПоследнихМероприятияхТрудовойДеятельности." + ИмяПоля;
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

#КонецОбласти

Процедура СформироватьДвижения(НаборЗаписей, ДанныеДляПроведения, Записать)
	
	Если ДанныеДляПроведения <> Неопределено
		И ДанныеДляПроведения.Количество() > 0 Тогда
		
		Для Каждого СтрокаДанных Из ДанныеДляПроведения Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаДанных);
		КонецЦикла;
		
		НаборЗаписей.Записывать =
			НаборЗаписей.Количество() > 0;
		
	КонецЕсли;
	
	Если Записать И НаборЗаписей.Записывать Тогда
		НаборЗаписей.Записать();
		НаборЗаписей.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТКПередачеМероприятияТрудовойДеятельности(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения, ИмяВТКПередачеМероприятияТрудовойДеятельности = "ВТКПередачеМероприятияТрудовойДеятельности")
	
	Запрос = ЗапросВТКПередачеМероприятияТрудовойДеятельности(ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения, ИмяВТКПередачеМероприятияТрудовойДеятельности);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТМероприятияТрудовойДеятельности(ТолькоРазрешенные, ИсключаемыйРегистратор, ИмяВТМероприятияТрудовойДеятельности)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета());
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МероприятияПрочие.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияПрочие.Организация КАК Организация,
		|	МероприятияПрочие.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияПрочие.Отменено КАК Отменено,
		|	МероприятияПрочие.Сотрудник КАК Сотрудник,
		|	МероприятияПрочие.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияПрочие.ВидМероприятия КАК ВидМероприятия,
		|	МероприятияПрочие.Сведения КАК Сведения,
		|	МероприятияПрочие.Подразделение КАК Подразделение,
		|	МероприятияПрочие.Должность КАК Должность,
		|	МероприятияПрочие.РазрядКатегория КАК РазрядКатегория,
		|	МероприятияПрочие.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	МероприятияПрочие.ТрудоваяФункция КАК ТрудоваяФункция,
		|	МероприятияПрочие.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	МероприятияПрочие.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияПрочие.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияПрочие.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияПрочие.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияПрочие.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияПрочие.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияПрочие.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	МероприятияПрочие.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	МероприятияПрочие.ДатаС КАК ДатаС,
		|	МероприятияПрочие.ДатаПо КАК ДатаПо,
		|	МероприятияПрочие.ДатаОтмены КАК ДатаОтмены,
		|	МероприятияПрочие.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеДолжности, МероприятияПрочие.ПредставлениеДолжности) КАК ПредставлениеДолжности,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеПодразделения, МероприятияПрочие.ПредставлениеПодразделения) КАК ПредставлениеПодразделения,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияТекстОснования, МероприятияПрочие.ОснованиеУвольненияТекстОснования) КАК ОснованиеУвольненияТекстОснования,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияСтатья, МероприятияПрочие.ОснованиеУвольненияСтатья) КАК ОснованиеУвольненияСтатья,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияЧасть, МероприятияПрочие.ОснованиеУвольненияЧасть) КАК ОснованиеУвольненияЧасть,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПункт, МероприятияПрочие.ОснованиеУвольненияПункт) КАК ОснованиеУвольненияПункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПодпункт, МероприятияПрочие.ОснованиеУвольненияПодпункт) КАК ОснованиеУвольненияПодпункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияАбзац, МероприятияПрочие.ОснованиеУвольненияАбзац) КАК ОснованиеУвольненияАбзац,
		|	МероприятияПрочие.КодПоОКЗ КАК КодПоОКЗ,
		|	МероприятияПрочие.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	МероприятияПрочие.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	МероприятияПрочие.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	МероприятияПрочие.УдаленностьРаботы КАК УдаленностьРаботы,
		|	МероприятияПрочие.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ЕСТЬNULL(МероприятияПереданные.ОписаниеДолжности, МероприятияПрочие.ОписаниеДолжности) КАК ОписаниеДолжности,
		|	ВЫБОР
		|		КОГДА МероприятияПереданныеОтмененные.ИдМероприятия ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПереданоОтменено
		|ПОМЕСТИТЬ ВТПрочиеМероприятияТрудовойДеятельности
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПрочие КАК МероприятияПрочие
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтчитывающиесяОрганизации КАК ОтчитывающиесяОрганизации
		|			ПО МероприятияПрочие.Организация = ОтчитывающиесяОрганизации.Организация
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|			ПО (МероприятияПереданные.Организация В (МероприятияПрочие.Организация, ОтчитывающиесяОрганизации.ОтчитывающаясяЗаНееОрганизация))
		|				И МероприятияПрочие.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|				И (НЕ МероприятияПереданные.Отменено)
		|				И (&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданныеОтмененные
		|			ПО (МероприятияПереданныеОтмененные.Организация В (МероприятияПрочие.Организация, ОтчитывающиесяОрганизации.ОтчитывающаясяЗаНееОрганизация))
		|				И МероприятияПрочие.ИдМероприятия = МероприятияПереданныеОтмененные.ИдМероприятия
		|				И МероприятияПрочие.Отменено = МероприятияПереданныеОтмененные.Отменено
		|				И (&ИсключаемыйРегистраторПереданныхОтмененныхМероприятийТрудовойДеятельности)
		|		ПО СотрудникиПериодыДанных.ФизическоеЛицо = МероприятияПрочие.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Организация = МероприятияПрочие.Организация
		|			И СотрудникиПериодыДанных.Сотрудник = МероприятияПрочие.Сотрудник
		|ГДЕ
		|	НЕ МероприятияПереданные.ИдМероприятия ЕСТЬ NULL
		|	И МероприятияПрочие.ДатаМероприятия >= &ДатаНачалаУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Регистратор КАК Регистратор,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.Сотрудник КАК Сотрудник,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.Сведения КАК Сведения,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	ВЫБОР
		|		КОГДА Мероприятия.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Мероприятия.ДатаМероприятия
		|		ИНАЧЕ Мероприятия.ДатаОтмены
		|	КОНЕЦ КАК ДатаПорядка,
		|	ВЫБОР
		|		КОГДА МероприятияПереданные.ИдМероприятия ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Передано,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеДолжности, Мероприятия.ПредставлениеДолжности) КАК ПредставлениеДолжности,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеПодразделения, Мероприятия.ПредставлениеПодразделения) КАК ПредставлениеПодразделения,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияТекстОснования, Мероприятия.ОснованиеУвольненияТекстОснования) КАК ОснованиеУвольненияТекстОснования,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияСтатья, Мероприятия.ОснованиеУвольненияСтатья) КАК ОснованиеУвольненияСтатья,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияЧасть, Мероприятия.ОснованиеУвольненияЧасть) КАК ОснованиеУвольненияЧасть,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПункт, Мероприятия.ОснованиеУвольненияПункт) КАК ОснованиеУвольненияПункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПодпункт, Мероприятия.ОснованиеУвольненияПодпункт) КАК ОснованиеУвольненияПодпункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияАбзац, Мероприятия.ОснованиеУвольненияАбзац) КАК ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ЕСТЬNULL(МероприятияПереданные.ОписаниеДолжности, Мероприятия.ОписаниеДолжности) КАК ОписаниеДолжности
		|ПОМЕСТИТЬ ВТПредварительноМероприятияТрудовойДеятельности
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтчитывающиесяОрганизации КАК ОтчитывающиесяОрганизации
		|			ПО Мероприятия.Организация = ОтчитывающиесяОрганизации.Организация
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|			ПО (МероприятияПереданные.Организация В (Мероприятия.Организация, ОтчитывающиесяОрганизации.ОтчитывающаясяЗаНееОрганизация))
		|				И Мероприятия.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|				И Мероприятия.Отменено = МероприятияПереданные.Отменено
		|				И (&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности)
		|		ПО СотрудникиПериодыДанных.ФизическоеЛицо = Мероприятия.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Организация = Мероприятия.Организация
		|			И СотрудникиПериодыДанных.Сотрудник = Мероприятия.Сотрудник
		|			И (Мероприятия.ДатаМероприятия >= &ДатаНачалаУчета)
		|ГДЕ
		|	&ИсключаемыйРегистраторМероприятийТрудовойДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Регистратор КАК Регистратор,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.Сотрудник КАК Сотрудник,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.Сведения КАК Сведения,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	Мероприятия.ДатаПорядка КАК ДатаПорядка,
		|	Мероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности КАК ОписаниеДолжности,
		|	Мероприятия.Передано КАК Передано
		|ПОМЕСТИТЬ ВТМероприятияТрудовойДеятельности
		|ИЗ
		|	ВТПредварительноМероприятияТрудовойДеятельности КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Передано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Регистратор,
		|	Мероприятия.ФизическоеЛицо,
		|	Мероприятия.Организация,
		|	Мероприятия.ИдМероприятия,
		|	Мероприятия.Отменено,
		|	Мероприятия.Сотрудник,
		|	Мероприятия.ДатаМероприятия,
		|	Мероприятия.ВидМероприятия,
		|	Мероприятия.Сведения,
		|	Мероприятия.Подразделение,
		|	Мероприятия.Должность,
		|	Мероприятия.РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения,
		|	Мероприятия.ДатаС,
		|	Мероприятия.ДатаПо,
		|	Мероприятия.ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем,
		|	Мероприятия.ДатаПорядка,
		|	Мероприятия.ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности,
		|	Мероприятия.Передано
		|ИЗ
		|	ВТПредварительноМероприятияТрудовойДеятельности КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредварительноМероприятияТрудовойДеятельности КАК МероприятияПереданныеОтмененные
		|		ПО Мероприятия.Организация = МероприятияПереданныеОтмененные.Организация
		|			И Мероприятия.ИдМероприятия = МероприятияПереданныеОтмененные.ИдМероприятия
		|			И (МероприятияПереданныеОтмененные.Отменено)
		|			И (НЕ МероприятияПереданныеОтмененные.Передано)
		|ГДЕ
		|	НЕ Мероприятия.Передано
		|	И НЕ Мероприятия.Отменено
		|	И МероприятияПереданныеОтмененные.ИдМероприятия ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Регистратор,
		|	Мероприятия.ФизическоеЛицо,
		|	Мероприятия.Организация,
		|	Мероприятия.ИдМероприятия,
		|	Мероприятия.Отменено,
		|	Мероприятия.Сотрудник,
		|	Мероприятия.ДатаМероприятия,
		|	Мероприятия.ВидМероприятия,
		|	Мероприятия.Сведения,
		|	Мероприятия.Подразделение,
		|	Мероприятия.Должность,
		|	Мероприятия.РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения,
		|	Мероприятия.ДатаС,
		|	Мероприятия.ДатаПо,
		|	Мероприятия.ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем,
		|	Мероприятия.ДатаПорядка,
		|	Мероприятия.ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности,
		|	Мероприятия.Передано
		|ИЗ
		|	ВТПредварительноМероприятияТрудовойДеятельности КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредварительноМероприятияТрудовойДеятельности КАК МероприятияПереданныеОтмененные
		|		ПО Мероприятия.Организация = МероприятияПереданныеОтмененные.Организация
		|			И Мероприятия.ИдМероприятия = МероприятияПереданныеОтмененные.ИдМероприятия
		|			И (НЕ МероприятияПереданныеОтмененные.Отменено)
		|			И (МероприятияПереданныеОтмененные.Передано)
		|ГДЕ
		|	НЕ Мероприятия.Передано
		|	И Мероприятия.Отменено
		|	И НЕ МероприятияПереданныеОтмененные.ИдМероприятия ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	МероприятияПрочие.ФизическоеЛицо,
		|	МероприятияПрочие.Организация,
		|	МероприятияПрочие.ИдМероприятия,
		|	ЛОЖЬ,
		|	МероприятияПрочие.Сотрудник,
		|	МероприятияПрочие.ДатаМероприятия,
		|	МероприятияПрочие.ВидМероприятия,
		|	МероприятияПрочие.Сведения,
		|	МероприятияПрочие.Подразделение,
		|	МероприятияПрочие.Должность,
		|	МероприятияПрочие.РазрядКатегория,
		|	МероприятияПрочие.КодПоРееструДолжностей,
		|	МероприятияПрочие.ТрудоваяФункция,
		|	МероприятияПрочие.НаименованиеДокументаОснования,
		|	МероприятияПрочие.ДатаДокументаОснования,
		|	МероприятияПрочие.СерияДокументаОснования,
		|	МероприятияПрочие.НомерДокументаОснования,
		|	МероприятияПрочие.НаименованиеВторогоДокументаОснования,
		|	МероприятияПрочие.ДатаВторогоДокументаОснования,
		|	МероприятияПрочие.СерияВторогоДокументаОснования,
		|	МероприятияПрочие.НомерВторогоДокументаОснования,
		|	МероприятияПрочие.ОснованиеУвольнения,
		|	МероприятияПрочие.ДатаС,
		|	МероприятияПрочие.ДатаПо,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	МероприятияПрочие.ЯвляетсяСовместителем,
		|	МероприятияПрочие.ДатаМероприятия,
		|	МероприятияПрочие.ПредставлениеДолжности,
		|	МероприятияПрочие.ПредставлениеПодразделения,
		|	МероприятияПрочие.ОснованиеУвольненияТекстОснования,
		|	МероприятияПрочие.ОснованиеУвольненияСтатья,
		|	МероприятияПрочие.ОснованиеУвольненияЧасть,
		|	МероприятияПрочие.ОснованиеУвольненияПункт,
		|	МероприятияПрочие.ОснованиеУвольненияПодпункт,
		|	МероприятияПрочие.ОснованиеУвольненияАбзац,
		|	МероприятияПрочие.КодПоОКЗ,
		|	МероприятияПрочие.ТерриториальныеУсловия,
		|	МероприятияПрочие.ПричинаУвольненияПФР,
		|	МероприятияПрочие.СрочностьТрудовогоДоговора,
		|	МероприятияПрочие.УдаленностьРаботы,
		|	МероприятияПрочие.СокращенностьГрафика,
		|	МероприятияПрочие.ОписаниеДолжности,
		|	ИСТИНА
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрочиеМероприятияТрудовойДеятельности КАК МероприятияПрочие
		|		ПО СотрудникиПериодыДанных.Организация = МероприятияПрочие.Организация
		|			И СотрудникиПериодыДанных.ФизическоеЛицо = МероприятияПрочие.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Сотрудник = МероприятияПрочие.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	МероприятияПрочие.ФизическоеЛицо,
		|	МероприятияПрочие.Организация,
		|	МероприятияПрочие.ИдМероприятия,
		|	МероприятияПрочие.Отменено,
		|	МероприятияПрочие.Сотрудник,
		|	МероприятияПрочие.ДатаМероприятия,
		|	МероприятияПрочие.ВидМероприятия,
		|	МероприятияПрочие.Сведения,
		|	МероприятияПрочие.Подразделение,
		|	МероприятияПрочие.Должность,
		|	МероприятияПрочие.РазрядКатегория,
		|	МероприятияПрочие.КодПоРееструДолжностей,
		|	МероприятияПрочие.ТрудоваяФункция,
		|	МероприятияПрочие.НаименованиеДокументаОснования,
		|	МероприятияПрочие.ДатаДокументаОснования,
		|	МероприятияПрочие.СерияДокументаОснования,
		|	МероприятияПрочие.НомерДокументаОснования,
		|	МероприятияПрочие.НаименованиеВторогоДокументаОснования,
		|	МероприятияПрочие.ДатаВторогоДокументаОснования,
		|	МероприятияПрочие.СерияВторогоДокументаОснования,
		|	МероприятияПрочие.НомерВторогоДокументаОснования,
		|	МероприятияПрочие.ОснованиеУвольнения,
		|	МероприятияПрочие.ДатаС,
		|	МероприятияПрочие.ДатаПо,
		|	МероприятияПрочие.ДатаОтмены,
		|	МероприятияПрочие.ЯвляетсяСовместителем,
		|	МероприятияПрочие.ДатаОтмены,
		|	МероприятияПрочие.ПредставлениеДолжности,
		|	МероприятияПрочие.ПредставлениеПодразделения,
		|	МероприятияПрочие.ОснованиеУвольненияТекстОснования,
		|	МероприятияПрочие.ОснованиеУвольненияСтатья,
		|	МероприятияПрочие.ОснованиеУвольненияЧасть,
		|	МероприятияПрочие.ОснованиеУвольненияПункт,
		|	МероприятияПрочие.ОснованиеУвольненияПодпункт,
		|	МероприятияПрочие.ОснованиеУвольненияАбзац,
		|	МероприятияПрочие.КодПоОКЗ,
		|	МероприятияПрочие.ТерриториальныеУсловия,
		|	МероприятияПрочие.ПричинаУвольненияПФР,
		|	МероприятияПрочие.СрочностьТрудовогоДоговора,
		|	МероприятияПрочие.УдаленностьРаботы,
		|	МероприятияПрочие.СокращенностьГрафика,
		|	МероприятияПрочие.ОписаниеДолжности,
		|	МероприятияПрочие.ПереданоОтменено
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрочиеМероприятияТрудовойДеятельности КАК МероприятияПрочие
		|		ПО СотрудникиПериодыДанных.Организация = МероприятияПрочие.Организация
		|			И СотрудникиПериодыДанных.ФизическоеЛицо = МероприятияПрочие.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Сотрудник = МероприятияПрочие.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтчитывающиесяОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрочиеМероприятияТрудовойДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПредварительноМероприятияТрудовойДеятельности";
	
	Если ИсключаемыйРегистратор = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности", "(ИСТИНА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности", "(ИСТИНА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторПереданныхОтмененныхМероприятийТрудовойДеятельности", "(ИСТИНА)");
	Иначе
		
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности",
			"НЕ МероприятияПереданные.Регистратор В (&ИсключаемыйРегистратор)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности",
			"НЕ Мероприятия.Регистратор В (&ИсключаемыйРегистратор)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсключаемыйРегистраторПереданныхОтмененныхМероприятийТрудовойДеятельности",
			"НЕ МероприятияПереданныеОтмененные.Регистратор В (&ИсключаемыйРегистратор)");
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса,
		"ВТМероприятияТрудовойДеятельности", ИмяВТМероприятияТрудовойДеятельности);
	
	Запрос.Текст =
		УчетСтраховыхВзносов.ТекстЗапросаВсехОтчитывающихсяПоВзносамОрганизаций()
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;

	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТМероприятияТрудовойДеятельностиС01012021(ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения, ИмяВТМероприятияТрудовойДеятельности)
	
	Запрос = ЗапросВТМероприятияТрудовойДеятельности(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТКОбработкеМероприятияТрудовойДеятельности");
	
	ВидыМероприятий = Новый Массив;
	ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Прием);
	ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Увольнение);
	
	Если ПараметрыЗаполнения <> Неопределено И Не ПараметрыЗаполнения.ДляПоДневногоОтчета Тогда
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Перевод);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Переименование);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ЗапретЗаниматьДолжность);
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено И ПараметрыЗаполнения.ДатаЗаполнения >= ЗарплатаКадрыПовтИсп.ДатаВступленияВСилуНА("ДатаНачалаПриемаСведенийОМобилизованных") Тогда
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Приостановление);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.Возобновление);
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено И ПараметрыЗаполнения.ДатаЗаполнения >= ЗарплатаКадрыПовтИсп.ДатаВступленияВСилуНА("ДатаНачалаПриемаЕФС1") Тогда
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ);
		ВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыМероприятий", ВидыМероприятий);
	
	ТекстЗапросаС01012021 =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Мероприятия.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСМероприятиямиУвольнение
		|ИЗ
		|	ВТКОбработкеМероприятияТрудовойДеятельности КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ПО Мероприятия.Сотрудник = СотрудникиПериодыДанных.Сотрудник
		|			И Мероприятия.ДатаДокументаОснования <= СотрудникиПериодыДанных.ОкончаниеПериода
		|ГДЕ
		|	Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Увольнение)
		|
		|СГРУППИРОВАТЬ ПО
		|	Мероприятия.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Мероприятия.ДатаОтмены) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Мероприятия.Регистратор КАК Регистратор,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	Мероприятия.Отменено КАК Отменено,
		|	Мероприятия.Сотрудник КАК Сотрудник,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.Сведения КАК Сведения,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	Мероприятия.ДатаОтмены КАК ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	Мероприятия.ДатаПорядка КАК ДатаПорядка,
		|	Мероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности КАК ОписаниеДолжности,
		|	Мероприятия.Передано КАК Передано
		|ПОМЕСТИТЬ ВТМероприятияТрудовойДеятельности
		|ИЗ
		|	ВТКОбработкеМероприятияТрудовойДеятельности КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ПО Мероприятия.Сотрудник = СотрудникиПериодыДанных.Сотрудник
		|			И Мероприятия.ДатаДокументаОснования <= СотрудникиПериодыДанных.ОкончаниеПериода
		|			И (Мероприятия.ВидМероприятия <> ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ)
		|				ИЛИ Мероприятия.ДатаМероприятия <= СотрудникиПериодыДанных.ОкончаниеПериода)
		|ГДЕ
		|	Мероприятия.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|	И ВЫБОР
		|			КОГДА Мероприятия.ВидМероприятия В (&ВидыМероприятий)
		|				ТОГДА ИСТИНА
		|			КОГДА Мероприятия.Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТСотрудникиСМероприятиямиУвольнение.Сотрудник
		|					ИЗ
		|						ВТСотрудникиСМероприятиямиУвольнение)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Мероприятия.Регистратор,
		|	Мероприятия.ФизическоеЛицо,
		|	Мероприятия.Организация,
		|	Мероприятия.ИдМероприятия,
		|	Мероприятия.Отменено,
		|	Мероприятия.Сотрудник,
		|	Мероприятия.ДатаМероприятия,
		|	Мероприятия.ВидМероприятия,
		|	Мероприятия.Сведения,
		|	Мероприятия.Подразделение,
		|	Мероприятия.Должность,
		|	Мероприятия.РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения,
		|	Мероприятия.ДатаС,
		|	Мероприятия.ДатаПо,
		|	Мероприятия.ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем,
		|	Мероприятия.ДатаПорядка,
		|	Мероприятия.ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности,
		|	Мероприятия.Передано
		|ИЗ
		|	ВТКОбработкеМероприятияТрудовойДеятельности КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ПО Мероприятия.Сотрудник = СотрудникиПериодыДанных.Сотрудник
		|			И Мероприятия.ДатаДокументаОснования <= СотрудникиПериодыДанных.ОкончаниеПериода
		|			И (Мероприятия.ДатаОтмены МЕЖДУ &ДатаНачалаУчета И СотрудникиПериодыДанных.ОкончаниеПериода)
		|ГДЕ
		|	Мероприятия.ДатаОтмены >= Мероприятия.ДатаДокументаОснования
		|	И ВЫБОР
		|			КОГДА Мероприятия.ВидМероприятия В (&ВидыМероприятий)
		|				ТОГДА ИСТИНА
		|			КОГДА Мероприятия.Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТСотрудникиСМероприятиямиУвольнение.Сотрудник
		|					ИЗ
		|						ВТСотрудникиСМероприятиямиУвольнение)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиСМероприятиямиУвольнение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТКОбработкеМероприятияТрудовойДеятельности";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаС01012021,
		"ВТМероприятияТрудовойДеятельности", ИмяВТМероприятияТрудовойДеятельности);
	
	Запрос.Текст =
		Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросаС01012021;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТКПередачеМероприятияТрудовойДеятельности(ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения, ИмяВТКПередачеМероприятияТрудовойДеятельности)
	
	Запрос = ЗапросВТМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТМероприятияДоНачалаУчета");
	ЗапросВТМероприятияТрудовойДеятельности = ЗапросВТМероприятияТрудовойДеятельностиС01012021(ТолькоРазрешенные, ИсключаемыйРегистратор, ПараметрыЗаполнения, "ВТМероприятияТрудовойДеятельности");
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТМероприятияТрудовойДеятельности);
	
	Запрос.УстановитьПараметр("НаименованиеДокументаОснования", НаименованиеДокументаОснования());
	
	ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МероприятияДоНачалаУчета.Регистратор КАК Регистратор,
		|	МероприятияДоНачалаУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияДоНачалаУчета.Организация КАК Организация,
		|	МероприятияДоНачалаУчета.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияДоНачалаУчета.Сотрудник КАК СотрудникЗаписи,
		|	МероприятияДоНачалаУчета.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияДоНачалаУчета.ВидМероприятия КАК ВидМероприятия,
		|	МероприятияДоНачалаУчета.Сведения КАК Сведения,
		|	МероприятияДоНачалаУчета.Подразделение КАК Подразделение,
		|	МероприятияДоНачалаУчета.Должность КАК Должность,
		|	МероприятияДоНачалаУчета.РазрядКатегория КАК РазрядКатегория,
		|	МероприятияДоНачалаУчета.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	МероприятияДоНачалаУчета.ТрудоваяФункция КАК ТрудоваяФункция,
		|	ВЫБОР
		|		КОГДА МероприятияДоНачалаУчета.НаименованиеДокументаОснования = """"
		|			ТОГДА &НаименованиеДокументаОснования
		|		ИНАЧЕ МероприятияДоНачалаУчета.НаименованиеДокументаОснования
		|	КОНЕЦ КАК НаименованиеДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияДоНачалаУчета.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	МероприятияДоНачалаУчета.ДатаС КАК ДатаС,
		|	МероприятияДоНачалаУчета.ДатаПо КАК ДатаПо,
		|	МероприятияДоНачалаУчета.ДатаОтмены КАК ДатаОтмены,
		|	МероприятияДоНачалаУчета.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	МероприятияДоНачалаУчета.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	МероприятияДоНачалаУчета.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	МероприятияДоНачалаУчета.КодПоОКЗ КАК КодПоОКЗ,
		|	МероприятияДоНачалаУчета.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	МероприятияДоНачалаУчета.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	МероприятияДоНачалаУчета.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	МероприятияДоНачалаУчета.УдаленностьРаботы КАК УдаленностьРаботы,
		|	МероприятияДоНачалаУчета.СокращенностьГрафика КАК СокращенностьГрафика,
		|	МероприятияДоНачалаУчета.ОписаниеДолжности КАК ОписаниеДолжности
		|ПОМЕСТИТЬ ВТКПередачеМероприятияТрудовойДеятельности
		|ИЗ
		|	ВТМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|ГДЕ
		|	НЕ МероприятияДоНачалаУчета.Передано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МероприятияОтчетногоПериода.Регистратор,
		|	МероприятияОтчетногоПериода.ФизическоеЛицо,
		|	МероприятияОтчетногоПериода.Организация,
		|	МероприятияОтчетногоПериода.ИдМероприятия,
		|	МероприятияОтчетногоПериода.Сотрудник,
		|	МероприятияОтчетногоПериода.ДатаМероприятия,
		|	МероприятияОтчетногоПериода.ВидМероприятия,
		|	МероприятияОтчетногоПериода.Сведения,
		|	МероприятияОтчетногоПериода.Подразделение,
		|	МероприятияОтчетногоПериода.Должность,
		|	МероприятияОтчетногоПериода.РазрядКатегория,
		|	МероприятияОтчетногоПериода.КодПоРееструДолжностей,
		|	МероприятияОтчетногоПериода.ТрудоваяФункция,
		|	ВЫБОР
		|		КОГДА МероприятияОтчетногоПериода.НаименованиеДокументаОснования = """"
		|			ТОГДА &НаименованиеДокументаОснования
		|		ИНАЧЕ МероприятияОтчетногоПериода.НаименованиеДокументаОснования
		|	КОНЕЦ,
		|	МероприятияОтчетногоПериода.ДатаДокументаОснования,
		|	МероприятияОтчетногоПериода.СерияДокументаОснования,
		|	МероприятияОтчетногоПериода.НомерДокументаОснования,
		|	МероприятияОтчетногоПериода.НаименованиеВторогоДокументаОснования,
		|	МероприятияОтчетногоПериода.ДатаВторогоДокументаОснования,
		|	МероприятияОтчетногоПериода.СерияВторогоДокументаОснования,
		|	МероприятияОтчетногоПериода.НомерВторогоДокументаОснования,
		|	МероприятияОтчетногоПериода.ОснованиеУвольнения,
		|	МероприятияОтчетногоПериода.ДатаС,
		|	МероприятияОтчетногоПериода.ДатаПо,
		|	МероприятияОтчетногоПериода.ДатаОтмены,
		|	МероприятияОтчетногоПериода.ЯвляетсяСовместителем,
		|	МероприятияОтчетногоПериода.ПредставлениеДолжности,
		|	МероприятияОтчетногоПериода.ПредставлениеПодразделения,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияТекстОснования,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияСтатья,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияЧасть,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияПункт,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияПодпункт,
		|	МероприятияОтчетногоПериода.ОснованиеУвольненияАбзац,
		|	МероприятияОтчетногоПериода.КодПоОКЗ,
		|	МероприятияОтчетногоПериода.ТерриториальныеУсловия,
		|	МероприятияОтчетногоПериода.ПричинаУвольненияПФР,
		|	МероприятияОтчетногоПериода.СрочностьТрудовогоДоговора,
		|	МероприятияОтчетногоПериода.УдаленностьРаботы,
		|	МероприятияОтчетногоПериода.СокращенностьГрафика,
		|	МероприятияОтчетногоПериода.ОписаниеДолжности
		|ИЗ
		|	ВТМероприятияТрудовойДеятельности КАК МероприятияОтчетногоПериода
		|ГДЕ
		|	НЕ МероприятияОтчетногоПериода.Передано";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности, "ВТКПередачеМероприятияТрудовойДеятельности", ИмяВТКПередачеМероприятияТрудовойДеятельности);
	
	Если ЗначениеЗаполнено(ИмяВТКПередачеМероприятияТрудовойДеятельности) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности, "ВТМероприятияДоНачалаУчета");
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности, "ВТМероприятияТрудовойДеятельности");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТКПередачеМероприятияТрудовойДеятельности);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТМероприятияТрудовойДеятельностиСотрудников(ТолькоРазрешенные, ТолькоПереданные, ИсключаемыйРегистратор = Неопределено, ИмяВТМероприятияТрудовойДеятельностиСотрудников = "ВТМероприятияТрудовойДеятельностиСотрудников")
	
	Если ЭлектронныеТрудовыеКнижкиПовтИсп.НастройкиЭлектронныхТрудовыхКнижек().ЗаполнятьСТДРВсемиМероприятиямиДо2020Года Тогда
		Запрос = ЗапросВТВсеМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТМероприятияДоНачалаУчета");
	Иначе
		Запрос = ЗапросВТМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТМероприятияДоНачалаУчета");
	КонецЕсли;
	
	ЗапросВТМероприятияТрудовойДеятельности = ЗапросВТМероприятияТрудовойДеятельности(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТМероприятияТрудовойДеятельности");
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТМероприятияТрудовойДеятельности);
	
	Запрос.УстановитьПараметр("НаименованиеДокументаОснования", НаименованиеДокументаОснования());
	
	ИсключаемыеВидыМероприятий = Новый Массив;
	ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.НачалоДоговораГПХ);
	ИсключаемыеВидыМероприятий.Добавить(Перечисления.ВидыМероприятийТрудовойДеятельности.ОкончаниеДоговораГПХ);
	Запрос.УстановитьПараметр("ИсключаемыеВидыМероприятий", ИсключаемыеВидыМероприятий);
	
	ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Регистратор КАК Регистратор,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	ЕСТЬNULL(МероприятияОтмененные.Отменено, ЛОЖЬ) КАК Отменено,
		|	Мероприятия.Сотрудник КАК СотрудникЗаписи,
		|	Мероприятия.ДатаМероприятия КАК ДатаМероприятия,
		|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
		|	Мероприятия.ВидМероприятия.Порядок КАК ВидМероприятияПорядок,
		|	Мероприятия.Сведения КАК Сведения,
		|	Мероприятия.Подразделение КАК Подразделение,
		|	Мероприятия.Должность КАК Должность,
		|	Мероприятия.РазрядКатегория КАК РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция КАК ТрудоваяФункция,
		|	ВЫБОР
		|		КОГДА Мероприятия.НаименованиеДокументаОснования = """"
		|			ТОГДА &НаименованиеДокументаОснования
		|		ИНАЧЕ Мероприятия.НаименованиеДокументаОснования
		|	КОНЕЦ КАК НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования КАК СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования КАК НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Мероприятия.ДатаС КАК ДатаС,
		|	Мероприятия.ДатаПо КАК ДатаПо,
		|	ЕСТЬNULL(МероприятияОтмененные.ДатаОтмены, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтмены,
		|	Мероприятия.ДатаМероприятия КАК ДатаПорядка,
		|	Мероприятия.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	Мероприятия.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ КАК КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы КАК УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика КАК СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности КАК ОписаниеДолжности,
		|	Мероприятия.Передано КАК Передано
		|ПОМЕСТИТЬ ВТМероприятияТрудовойДеятельностиСотрудников
		|ИЗ
		|	ВТМероприятияДоНачалаУчета КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМероприятияДоНачалаУчета КАК МероприятияОтмененные
		|		ПО Мероприятия.Организация = МероприятияОтмененные.Организация
		|			И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия
		|			И (МероприятияОтмененные.Отменено)
		|ГДЕ
		|	НЕ Мероприятия.Отменено
		|	И &МероприятияТрудовойДеятельностиДоНачалаУчетаПередано
		|	И НЕ Мероприятия.ВидМероприятия В (&ИсключаемыеВидыМероприятий)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Регистратор,
		|	Мероприятия.ФизическоеЛицо,
		|	Мероприятия.Организация,
		|	Мероприятия.ИдМероприятия,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(МероприятияОтмененные.ДатаОтмены, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ Мероприятия.Отменено
		|	КОНЕЦ,
		|	Мероприятия.Сотрудник,
		|	Мероприятия.ДатаМероприятия,
		|	Мероприятия.ВидМероприятия,
		|	Мероприятия.ВидМероприятия.Порядок,
		|	Мероприятия.Сведения,
		|	Мероприятия.Подразделение,
		|	Мероприятия.Должность,
		|	Мероприятия.РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция,
		|	ВЫБОР
		|		КОГДА Мероприятия.НаименованиеДокументаОснования = """"
		|			ТОГДА &НаименованиеДокументаОснования
		|		ИНАЧЕ Мероприятия.НаименованиеДокументаОснования
		|	КОНЕЦ,
		|	Мероприятия.ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения,
		|	Мероприятия.ДатаС,
		|	Мероприятия.ДатаПо,
		|	ЕСТЬNULL(МероприятияОтмененные.ДатаОтмены, ДАТАВРЕМЯ(1, 1, 1)),
		|	ВЫБОР
		|		КОГДА Мероприятия.ДатаОтмены = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Мероприятия.ДатаМероприятия
		|		ИНАЧЕ Мероприятия.ДатаОтмены
		|	КОНЕЦ,
		|	Мероприятия.ЯвляетсяСовместителем,
		|	Мероприятия.ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности,
		|	Мероприятия.Передано
		|ИЗ
		|	ВТМероприятияТрудовойДеятельности КАК Мероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМероприятияТрудовойДеятельности КАК МероприятияОтмененные
		|		ПО Мероприятия.Организация = МероприятияОтмененные.Организация
		|			И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия
		|			И (МероприятияОтмененные.Отменено)
		|ГДЕ
		|	НЕ Мероприятия.Отменено
		|	И &МероприятияТрудовойДеятельностиПередано
		|	И НЕ Мероприятия.ВидМероприятия В (&ИсключаемыеВидыМероприятий)";
	
	Если ЭлектронныеТрудовыеКнижкиПовтИсп.НастройкиЭлектронныхТрудовыхКнижек().ЗаполнятьСТДРВсемиМероприятиямиДо2020Года Тогда
		
		ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников = СтрЗаменить(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников,
			"&МероприятияТрудовойДеятельностиДоНачалаУчетаПередано", "ИСТИНА");
		
	Иначе
		
		ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников = СтрЗаменить(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников,
			"&МероприятияТрудовойДеятельностиДоНачалаУчетаПередано", "Мероприятия.Передано");
		
	КонецЕсли;
	
	Если Не ТолькоПереданные Тогда
		
		ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников = СтрЗаменить(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников,
			"&МероприятияТрудовойДеятельностиПередано", "ИСТИНА");
		
	Иначе
		
		ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников = СтрЗаменить(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников,
			"&МероприятияТрудовойДеятельностиПередано", "Мероприятия.Передано");
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников,
		"ВТМероприятияТрудовойДеятельностиСотрудников", ИмяВТМероприятияТрудовойДеятельностиСотрудников);
	
	Если ЗначениеЗаполнено(ИмяВТМероприятияТрудовойДеятельностиСотрудников) Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников, "ВТМероприятияДоНачалаУчета");
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников, "ВТМероприятияТрудовойДеятельности");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТМероприятияТрудовойДеятельностиСотрудников);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТВсеМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, ИмяВТВсеМероприятияДоНачалаУчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МероприятияПрочие.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияПрочие.Организация КАК Организация,
		|	МероприятияПрочие.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияПрочие.Отменено КАК Отменено,
		|	МероприятияПрочие.Сотрудник КАК Сотрудник,
		|	МероприятияПрочие.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияПрочие.ВидМероприятия КАК ВидМероприятия,
		|	МероприятияПрочие.Сведения КАК Сведения,
		|	МероприятияПрочие.Подразделение КАК Подразделение,
		|	МероприятияПрочие.Должность КАК Должность,
		|	МероприятияПрочие.РазрядКатегория КАК РазрядКатегория,
		|	МероприятияПрочие.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	МероприятияПрочие.ТрудоваяФункция КАК ТрудоваяФункция,
		|	МероприятияПрочие.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	МероприятияПрочие.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияПрочие.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияПрочие.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияПрочие.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияПрочие.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияПрочие.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияПрочие.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	МероприятияПрочие.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	МероприятияПрочие.ДатаС КАК ДатаС,
		|	МероприятияПрочие.ДатаПо КАК ДатаПо,
		|	МероприятияПрочие.ДатаОтмены КАК ДатаОтмены,
		|	МероприятияПрочие.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	МероприятияПрочие.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	МероприятияПрочие.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	МероприятияПрочие.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	МероприятияПрочие.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	МероприятияПрочие.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	МероприятияПрочие.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	МероприятияПрочие.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	МероприятияПрочие.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	МероприятияПрочие.КодПоОКЗ КАК КодПоОКЗ,
		|	МероприятияПрочие.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	МероприятияПрочие.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	МероприятияПрочие.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	МероприятияПрочие.УдаленностьРаботы КАК УдаленностьРаботы,
		|	МероприятияПрочие.СокращенностьГрафика КАК СокращенностьГрафика,
		|	МероприятияПрочие.ОписаниеДолжности КАК ОписаниеДолжности
		|ПОМЕСТИТЬ ВТВсеМероприятияПрочиеДоНачалаУчета
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПрочие КАК МероприятияПрочие
		|		ПО СотрудникиПериодыДанных.ФизическоеЛицо = МероприятияПрочие.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Организация = МероприятияПрочие.Организация
		|			И СотрудникиПериодыДанных.Сотрудник = МероприятияПрочие.Сотрудник
		|ГДЕ
		|	МероприятияПрочие.ДатаМероприятия < &ДатаНачалаУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Регистратор,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Организация КАК Организация,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ИдМероприятия КАК ИдМероприятия,
		|	ЛОЖЬ КАК Отменено,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Сотрудник КАК Сотрудник,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаМероприятия КАК ДатаМероприятия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ВидМероприятия КАК ВидМероприятия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Сведения КАК Сведения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Подразделение КАК Подразделение,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Должность КАК Должность,
		|	ВсеМероприятияПрочиеДоНачалаУчета.РазрядКатегория КАК РазрядКатегория,
		|	ВсеМероприятияПрочиеДоНачалаУчета.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ТрудоваяФункция КАК ТрудоваяФункция,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СерияДокументаОснования КАК СерияДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НомерДокументаОснования КАК НомерДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаС КАК ДатаС,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаПо КАК ДатаПо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтмены,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	ВсеМероприятияПрочиеДоНачалаУчета.КодПоОКЗ КАК КодПоОКЗ,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	ВсеМероприятияПрочиеДоНачалаУчета.УдаленностьРаботы КАК УдаленностьРаботы,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОписаниеДолжности КАК ОписаниеДолжности
		|ПОМЕСТИТЬ ВТПредварительноВсеМероприятияДоНачалаУчета
		|ИЗ
		|	ВТВсеМероприятияПрочиеДоНачалаУчета КАК ВсеМероприятияПрочиеДоНачалаУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ФизическоеЛицо,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Организация,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ИдМероприятия,
		|	ИСТИНА,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Сотрудник,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаМероприятия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ВидМероприятия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Сведения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Подразделение,
		|	ВсеМероприятияПрочиеДоНачалаУчета.Должность,
		|	ВсеМероприятияПрочиеДоНачалаУчета.РазрядКатегория,
		|	ВсеМероприятияПрочиеДоНачалаУчета.КодПоРееструДолжностей,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ТрудоваяФункция,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НаименованиеДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СерияДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НомерДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НаименованиеВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СерияВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.НомерВторогоДокументаОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольнения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаС,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаПо,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ДатаОтмены,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ЯвляетсяСовместителем,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПредставлениеДолжности,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПредставлениеПодразделения,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияТекстОснования,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияСтатья,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияЧасть,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияПункт,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияПодпункт,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОснованиеУвольненияАбзац,
		|	ВсеМероприятияПрочиеДоНачалаУчета.КодПоОКЗ,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ТерриториальныеУсловия,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ПричинаУвольненияПФР,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СрочностьТрудовогоДоговора,
		|	ВсеМероприятияПрочиеДоНачалаУчета.УдаленностьРаботы,
		|	ВсеМероприятияПрочиеДоНачалаУчета.СокращенностьГрафика,
		|	ВсеМероприятияПрочиеДоНачалаУчета.ОписаниеДолжности
		|ИЗ
		|	ВТВсеМероприятияПрочиеДоНачалаУчета КАК ВсеМероприятияПрочиеДоНачалаУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Мероприятия.Регистратор,
		|	Мероприятия.ФизическоеЛицо,
		|	Мероприятия.Организация,
		|	Мероприятия.ИдМероприятия,
		|	Мероприятия.Отменено,
		|	Мероприятия.Сотрудник,
		|	Мероприятия.ДатаМероприятия,
		|	Мероприятия.ВидМероприятия,
		|	Мероприятия.Сведения,
		|	Мероприятия.Подразделение,
		|	Мероприятия.Должность,
		|	Мероприятия.РазрядКатегория,
		|	Мероприятия.КодПоРееструДолжностей,
		|	Мероприятия.ТрудоваяФункция,
		|	Мероприятия.НаименованиеДокументаОснования,
		|	Мероприятия.ДатаДокументаОснования,
		|	Мероприятия.СерияДокументаОснования,
		|	Мероприятия.НомерДокументаОснования,
		|	Мероприятия.НаименованиеВторогоДокументаОснования,
		|	Мероприятия.ДатаВторогоДокументаОснования,
		|	Мероприятия.СерияВторогоДокументаОснования,
		|	Мероприятия.НомерВторогоДокументаОснования,
		|	Мероприятия.ОснованиеУвольнения,
		|	Мероприятия.ДатаС,
		|	Мероприятия.ДатаПо,
		|	Мероприятия.ДатаОтмены,
		|	Мероприятия.ЯвляетсяСовместителем,
		|	Мероприятия.ПредставлениеДолжности,
		|	Мероприятия.ПредставлениеПодразделения,
		|	Мероприятия.ОснованиеУвольненияТекстОснования,
		|	Мероприятия.ОснованиеУвольненияСтатья,
		|	Мероприятия.ОснованиеУвольненияЧасть,
		|	Мероприятия.ОснованиеУвольненияПункт,
		|	Мероприятия.ОснованиеУвольненияПодпункт,
		|	Мероприятия.ОснованиеУвольненияАбзац,
		|	Мероприятия.КодПоОКЗ,
		|	Мероприятия.ТерриториальныеУсловия,
		|	Мероприятия.ПричинаУвольненияПФР,
		|	Мероприятия.СрочностьТрудовогоДоговора,
		|	Мероприятия.УдаленностьРаботы,
		|	Мероприятия.СокращенностьГрафика,
		|	Мероприятия.ОписаниеДолжности
		|ИЗ
		|	ВТСотрудникиПериодыДанных КАК СотрудникиПериодыДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ПО СотрудникиПериодыДанных.ФизическоеЛицо = Мероприятия.ФизическоеЛицо
		|			И СотрудникиПериодыДанных.Организация = Мероприятия.Организация
		|			И СотрудникиПериодыДанных.Сотрудник = Мероприятия.Сотрудник
		|ГДЕ
		|	Мероприятия.ДатаМероприятия < &ДатаНачалаУчета
		|	И &ИсключаемыйРегистраторМероприятийТрудовойДеятельности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МероприятияТрудовойДеятельности.Регистратор КАК Регистратор,
		|	МероприятияТрудовойДеятельности.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияТрудовойДеятельности.Организация КАК Организация,
		|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияТрудовойДеятельности.Отменено КАК Отменено,
		|	МероприятияТрудовойДеятельности.Сотрудник КАК Сотрудник,
		|	МероприятияТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияТрудовойДеятельности.ВидМероприятия КАК ВидМероприятия,
		|	МероприятияТрудовойДеятельности.Сведения КАК Сведения,
		|	МероприятияТрудовойДеятельности.Подразделение КАК Подразделение,
		|	МероприятияТрудовойДеятельности.Должность КАК Должность,
		|	МероприятияТрудовойДеятельности.РазрядКатегория КАК РазрядКатегория,
		|	МероприятияТрудовойДеятельности.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	МероприятияТрудовойДеятельности.ТрудоваяФункция КАК ТрудоваяФункция,
		|	МероприятияТрудовойДеятельности.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	МероприятияТрудовойДеятельности.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияТрудовойДеятельности.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияТрудовойДеятельности.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияТрудовойДеятельности.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	МероприятияТрудовойДеятельности.ДатаС КАК ДатаС,
		|	МероприятияТрудовойДеятельности.ДатаПо КАК ДатаПо,
		|	МероприятияТрудовойДеятельности.ДатаОтмены КАК ДатаОтмены,
		|	МероприятияТрудовойДеятельности.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеДолжности, МероприятияТрудовойДеятельности.ПредставлениеДолжности) КАК ПредставлениеДолжности,
		|	ЕСТЬNULL(МероприятияПереданные.ПредставлениеПодразделения, МероприятияТрудовойДеятельности.ПредставлениеПодразделения) КАК ПредставлениеПодразделения,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияТекстОснования, МероприятияТрудовойДеятельности.ОснованиеУвольненияТекстОснования) КАК ОснованиеУвольненияТекстОснования,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияСтатья, МероприятияТрудовойДеятельности.ОснованиеУвольненияСтатья) КАК ОснованиеУвольненияСтатья,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияЧасть, МероприятияТрудовойДеятельности.ОснованиеУвольненияЧасть) КАК ОснованиеУвольненияЧасть,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПункт, МероприятияТрудовойДеятельности.ОснованиеУвольненияПункт) КАК ОснованиеУвольненияПункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияПодпункт, МероприятияТрудовойДеятельности.ОснованиеУвольненияПодпункт) КАК ОснованиеУвольненияПодпункт,
		|	ЕСТЬNULL(МероприятияПереданные.ОснованиеУвольненияАбзац, МероприятияТрудовойДеятельности.ОснованиеУвольненияАбзац) КАК ОснованиеУвольненияАбзац,
		|	МероприятияТрудовойДеятельности.КодПоОКЗ КАК КодПоОКЗ,
		|	МероприятияТрудовойДеятельности.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	МероприятияТрудовойДеятельности.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	МероприятияТрудовойДеятельности.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	МероприятияТрудовойДеятельности.УдаленностьРаботы КАК УдаленностьРаботы,
		|	МероприятияТрудовойДеятельности.СокращенностьГрафика КАК СокращенностьГрафика,
		|	ЕСТЬNULL(МероприятияПереданные.ОписаниеДолжности, МероприятияТрудовойДеятельности.ОписаниеДолжности) КАК ОписаниеДолжности,
		|	ВЫБОР
		|		КОГДА МероприятияПереданные.ИдМероприятия ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Передано
		|ПОМЕСТИТЬ ВТВсеСОтмененнымиМероприятияДоНачалаУчета
		|ИЗ
		|	ВТПредварительноВсеМероприятияДоНачалаУчета КАК МероприятияТрудовойДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельностиПереданные КАК МероприятияПереданные
		|		ПО МероприятияТрудовойДеятельности.Организация = МероприятияПереданные.Организация
		|			И МероприятияТрудовойДеятельности.ИдМероприятия = МероприятияПереданные.ИдМероприятия
		|			И МероприятияТрудовойДеятельности.Отменено = МероприятияПереданные.Отменено
		|			И (&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеМероприятияДоНачалаУчета.Организация КАК Организация,
		|	ВсеМероприятияДоНачалаУчета.ИдМероприятия КАК ИдМероприятия
		|ПОМЕСТИТЬ ВТИдентификаторыОтмененныхМероприятий
		|ИЗ
		|	ВТВсеСОтмененнымиМероприятияДоНачалаУчета КАК ВсеМероприятияДоНачалаУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеСОтмененнымиМероприятияДоНачалаУчета КАК ВсеМероприятияДоНачалаУчетаОтмененные
		|		ПО ВсеМероприятияДоНачалаУчета.ИдМероприятия = ВсеМероприятияДоНачалаУчетаОтмененные.ИдМероприятия
		|			И (ВсеМероприятияДоНачалаУчетаОтмененные.Отменено)
		|ГДЕ
		|	НЕ ВсеМероприятияДоНачалаУчета.Отменено
		|	И НЕ ВсеМероприятияДоНачалаУчета.Передано
		|	И НЕ ВсеМероприятияДоНачалаУчетаОтмененные.ИдМероприятия ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МероприятияДоНачалаУчета.Регистратор КАК Регистратор,
		|	МероприятияДоНачалаУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МероприятияДоНачалаУчета.Организация КАК Организация,
		|	МероприятияДоНачалаУчета.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияДоНачалаУчета.Отменено КАК Отменено,
		|	МероприятияДоНачалаУчета.Сотрудник КАК Сотрудник,
		|	МероприятияДоНачалаУчета.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияДоНачалаУчета.ВидМероприятия КАК ВидМероприятия,
		|	МероприятияДоНачалаУчета.Сведения КАК Сведения,
		|	МероприятияДоНачалаУчета.Подразделение КАК Подразделение,
		|	МероприятияДоНачалаУчета.Должность КАК Должность,
		|	МероприятияДоНачалаУчета.РазрядКатегория КАК РазрядКатегория,
		|	МероприятияДоНачалаУчета.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	МероприятияДоНачалаУчета.ТрудоваяФункция КАК ТрудоваяФункция,
		|	МероприятияДоНачалаУчета.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияДоНачалаУчета.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	МероприятияДоНачалаУчета.ДатаС КАК ДатаС,
		|	МероприятияДоНачалаУчета.ДатаПо КАК ДатаПо,
		|	МероприятияДоНачалаУчета.ДатаОтмены КАК ДатаОтмены,
		|	МероприятияДоНачалаУчета.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	МероприятияДоНачалаУчета.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	МероприятияДоНачалаУчета.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	МероприятияДоНачалаУчета.КодПоОКЗ КАК КодПоОКЗ,
		|	МероприятияДоНачалаУчета.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	МероприятияДоНачалаУчета.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	МероприятияДоНачалаУчета.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	МероприятияДоНачалаУчета.УдаленностьРаботы КАК УдаленностьРаботы,
		|	МероприятияДоНачалаУчета.СокращенностьГрафика КАК СокращенностьГрафика,
		|	МероприятияДоНачалаУчета.ОписаниеДолжности КАК ОписаниеДолжности,
		|	МероприятияДоНачалаУчета.Передано КАК Передано
		|ПОМЕСТИТЬ ВТВсеМероприятияДоНачалаУчета
		|ИЗ
		|	ВТВсеСОтмененнымиМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|ГДЕ
		|	НЕ МероприятияДоНачалаУчета.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТИдентификаторыОтмененныхМероприятий.ИдМероприятия
		|				ИЗ
		|					ВТИдентификаторыОтмененныхМероприятий
		|				ГДЕ
		|					МероприятияДоНачалаУчета.Организация = ВТИдентификаторыОтмененныхМероприятий.Организация)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТВсеМероприятияДоНачалаУчета", ИмяВТВсеМероприятияДоНачалаУчета);
	
	Если ИсключаемыйРегистратор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности", "(ИСТИНА)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности", "(ИСТИНА)");
	Иначе
		
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности",
			"НЕ МероприятияПереданные.Регистратор В (&ИсключаемыйРегистратор)");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности",
			"НЕ Мероприятия.Регистратор В (&ИсключаемыйРегистратор)");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВТВсеМероприятияДоНачалаУчета) Тогда
		
		ИменаВременныхТаблицКУничтожению = Новый Массив;
		ИменаВременныхТаблицКУничтожению.Добавить("ВТВсеМероприятияПрочиеДоНачалаУчета");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТПредварительноВсеМероприятияДоНачалаУчета");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТВсеСОтмененнымиМероприятияДоНачалаУчета");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТИдентификаторыОтмененныхМероприятий");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, ИмяВТМероприятияДоНачалаУчета)
	
	Запрос = ЗапросВТВсеМероприятияДоНачалаУчета(ТолькоРазрешенные, ИсключаемыйРегистратор, "ВТВсеМероприятияДоНачалаУчета");
	
	ТекстЗапросаМероприятияКПередаче =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеМероприятияДоНачалаУчета.Организация КАК Организация,
		|	ВсеМероприятияДоНачалаУчета.ИдМероприятия КАК ИдМероприятия
		|ПОМЕСТИТЬ ВТИдентификаторыРанееПереданныхОтмененных
		|ИЗ
		|	ВТВсеМероприятияДоНачалаУчета КАК ВсеМероприятияДоНачалаУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК ВсеМероприятияДоНачалаУчетаОтмененные
		|		ПО ВсеМероприятияДоНачалаУчета.ФизическоеЛицо = ВсеМероприятияДоНачалаУчетаОтмененные.ФизическоеЛицо
		|			И ВсеМероприятияДоНачалаУчета.Организация = ВсеМероприятияДоНачалаУчетаОтмененные.Организация
		|			И ВсеМероприятияДоНачалаУчета.ИдМероприятия = ВсеМероприятияДоНачалаУчетаОтмененные.ИдМероприятия
		|			И (ВсеМероприятияДоНачалаУчетаОтмененные.Отменено)
		|ГДЕ
		|	ВсеМероприятияДоНачалаУчета.Передано
		|	И НЕ ВсеМероприятияДоНачалаУчетаОтмененные.ИдМероприятия ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МероприятияДоНачалаУчета.Сотрудник КАК Сотрудник,
		|	МероприятияДоНачалаУчета.Организация КАК Организация,
		|	МАКСИМУМ(МероприятияДоНачалаУчета.ДатаМероприятия) КАК ДатаМероприятия
		|ПОМЕСТИТЬ ВТДатыПоследнихМероприятийДоНачалаУчета
		|ИЗ
		|	ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|ГДЕ
		|	МероприятияДоНачалаУчета.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод))
		|	И НЕ МероприятияДоНачалаУчета.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТИдентификаторыРанееПереданныхОтмененных.ИдМероприятия
		|				ИЗ
		|					ВТИдентификаторыРанееПереданныхОтмененных
		|				ГДЕ
		|					МероприятияДоНачалаУчета.Организация = ВТИдентификаторыРанееПереданныхОтмененных.Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	МероприятияДоНачалаУчета.Сотрудник,
		|	МероприятияДоНачалаУчета.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МероприятияДоНачалаУчета.Сотрудник КАК Сотрудник,
		|	МероприятияДоНачалаУчета.Организация КАК Организация,
		|	МероприятияДоНачалаУчета.ДатаМероприятия КАК ДатаМероприятия,
		|	МАКСИМУМ(МероприятияДоНачалаУчета.ИдМероприятия) КАК ИдМероприятия
		|ПОМЕСТИТЬ ВТИдМероприятияПоследнихМероприятийДоНачалаУчета
		|ИЗ
		|	ВТДатыПоследнихМероприятийДоНачалаУчета КАК ДатыПоследнихМероприятийДоНачалаУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|		ПО ДатыПоследнихМероприятийДоНачалаУчета.Организация = МероприятияДоНачалаУчета.Организация
		|			И ДатыПоследнихМероприятийДоНачалаУчета.Сотрудник = МероприятияДоНачалаУчета.Сотрудник
		|			И ДатыПоследнихМероприятийДоНачалаУчета.ДатаМероприятия = МероприятияДоНачалаУчета.ДатаМероприятия
		|ГДЕ
		|	МероприятияДоНачалаУчета.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод))
		|	И НЕ МероприятияДоНачалаУчета.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТИдентификаторыРанееПереданныхОтмененных.ИдМероприятия
		|				ИЗ
		|					ВТИдентификаторыРанееПереданныхОтмененных
		|				ГДЕ
		|					МероприятияДоНачалаУчета.Организация = ВТИдентификаторыРанееПереданныхОтмененных.Организация)
		|
		|СГРУППИРОВАТЬ ПО
		|	МероприятияДоНачалаУчета.Сотрудник,
		|	МероприятияДоНачалаУчета.Организация,
		|	МероприятияДоНачалаУчета.ДатаМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РанееПереданныеОтмененные.Регистратор КАК Регистратор,
		|	РанееПереданныеОтмененные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РанееПереданныеОтмененные.Организация КАК Организация,
		|	РанееПереданныеОтмененные.ИдМероприятия КАК ИдМероприятия,
		|	РанееПереданныеОтмененные.Отменено КАК Отменено,
		|	РанееПереданныеОтмененные.Сотрудник КАК Сотрудник,
		|	РанееПереданныеОтмененные.ДатаМероприятия КАК ДатаМероприятия,
		|	РанееПереданныеОтмененные.ВидМероприятия КАК ВидМероприятия,
		|	РанееПереданныеОтмененные.Сведения КАК Сведения,
		|	РанееПереданныеОтмененные.Подразделение КАК Подразделение,
		|	РанееПереданныеОтмененные.Должность КАК Должность,
		|	РанееПереданныеОтмененные.РазрядКатегория КАК РазрядКатегория,
		|	РанееПереданныеОтмененные.КодПоРееструДолжностей КАК КодПоРееструДолжностей,
		|	РанееПереданныеОтмененные.ТрудоваяФункция КАК ТрудоваяФункция,
		|	РанееПереданныеОтмененные.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	РанееПереданныеОтмененные.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	РанееПереданныеОтмененные.СерияДокументаОснования КАК СерияДокументаОснования,
		|	РанееПереданныеОтмененные.НомерДокументаОснования КАК НомерДокументаОснования,
		|	РанееПереданныеОтмененные.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	РанееПереданныеОтмененные.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	РанееПереданныеОтмененные.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	РанееПереданныеОтмененные.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования,
		|	РанееПереданныеОтмененные.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	РанееПереданныеОтмененные.ДатаС КАК ДатаС,
		|	РанееПереданныеОтмененные.ДатаПо КАК ДатаПо,
		|	РанееПереданныеОтмененные.ДатаОтмены КАК ДатаОтмены,
		|	РанееПереданныеОтмененные.ЯвляетсяСовместителем КАК ЯвляетсяСовместителем,
		|	РанееПереданныеОтмененные.ПредставлениеДолжности КАК ПредставлениеДолжности,
		|	РанееПереданныеОтмененные.ПредставлениеПодразделения КАК ПредставлениеПодразделения,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияТекстОснования КАК ОснованиеУвольненияТекстОснования,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияСтатья КАК ОснованиеУвольненияСтатья,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияЧасть КАК ОснованиеУвольненияЧасть,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияПункт КАК ОснованиеУвольненияПункт,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияПодпункт КАК ОснованиеУвольненияПодпункт,
		|	РанееПереданныеОтмененные.ОснованиеУвольненияАбзац КАК ОснованиеУвольненияАбзац,
		|	РанееПереданныеОтмененные.КодПоОКЗ КАК КодПоОКЗ,
		|	РанееПереданныеОтмененные.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	РанееПереданныеОтмененные.ПричинаУвольненияПФР КАК ПричинаУвольненияПФР,
		|	РанееПереданныеОтмененные.СрочностьТрудовогоДоговора КАК СрочностьТрудовогоДоговора,
		|	РанееПереданныеОтмененные.УдаленностьРаботы КАК УдаленностьРаботы,
		|	РанееПереданныеОтмененные.СокращенностьГрафика КАК СокращенностьГрафика,
		|	РанееПереданныеОтмененные.ОписаниеДолжности КАК ОписаниеДолжности,
		|	РанееПереданныеОтмененные.Передано КАК Передано
		|ПОМЕСТИТЬ ВТМероприятияДоНачалаУчета
		|ИЗ
		|	ВТВсеМероприятияДоНачалаУчета КАК РанееПереданныеОтмененные
		|ГДЕ
		|	РанееПереданныеОтмененные.ИдМероприятия В
		|			(ВЫБРАТЬ
		|				ВТИдентификаторыРанееПереданныхОтмененных.ИдМероприятия
		|			ИЗ
		|				ВТИдентификаторыРанееПереданныхОтмененных
		|			ГДЕ
		|				РанееПереданныеОтмененные.Организация = ВТИдентификаторыРанееПереданныхОтмененных.Организация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МероприятияДоНачалаУчета.Регистратор,
		|	МероприятияДоНачалаУчета.ФизическоеЛицо,
		|	МероприятияДоНачалаУчета.Организация,
		|	МероприятияДоНачалаУчета.ИдМероприятия,
		|	МероприятияДоНачалаУчета.Отменено,
		|	МероприятияДоНачалаУчета.Сотрудник,
		|	МероприятияДоНачалаУчета.ДатаМероприятия,
		|	МероприятияДоНачалаУчета.ВидМероприятия,
		|	МероприятияДоНачалаУчета.Сведения,
		|	МероприятияДоНачалаУчета.Подразделение,
		|	МероприятияДоНачалаУчета.Должность,
		|	МероприятияДоНачалаУчета.РазрядКатегория,
		|	МероприятияДоНачалаУчета.КодПоРееструДолжностей,
		|	МероприятияДоНачалаУчета.ТрудоваяФункция,
		|	МероприятияДоНачалаУчета.НаименованиеДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерДокументаОснования,
		|	МероприятияДоНачалаУчета.НаименованиеВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольнения,
		|	МероприятияДоНачалаУчета.ДатаС,
		|	МероприятияДоНачалаУчета.ДатаПо,
		|	МероприятияДоНачалаУчета.ДатаОтмены,
		|	МероприятияДоНачалаУчета.ЯвляетсяСовместителем,
		|	МероприятияДоНачалаУчета.ПредставлениеДолжности,
		|	МероприятияДоНачалаУчета.ПредставлениеПодразделения,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияТекстОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияСтатья,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияЧасть,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПодпункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияАбзац,
		|	МероприятияДоНачалаУчета.КодПоОКЗ,
		|	МероприятияДоНачалаУчета.ТерриториальныеУсловия,
		|	МероприятияДоНачалаУчета.ПричинаУвольненияПФР,
		|	МероприятияДоНачалаУчета.СрочностьТрудовогоДоговора,
		|	МероприятияДоНачалаУчета.УдаленностьРаботы,
		|	МероприятияДоНачалаУчета.СокращенностьГрафика,
		|	МероприятияДоНачалаУчета.ОписаниеДолжности,
		|	МероприятияДоНачалаУчета.Передано
		|ИЗ
		|	ВТИдМероприятияПоследнихМероприятийДоНачалаУчета КАК ИдМероприятияПоследнихМероприятийДоНачалаУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|		ПО ИдМероприятияПоследнихМероприятийДоНачалаУчета.Сотрудник = МероприятияДоНачалаУчета.Сотрудник
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.Организация = МероприятияДоНачалаУчета.Организация
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.ИдМероприятия = МероприятияДоНачалаУчета.ИдМероприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МероприятияДоНачалаУчета.Регистратор,
		|	МероприятияДоНачалаУчета.ФизическоеЛицо,
		|	МероприятияДоНачалаУчета.Организация,
		|	МероприятияДоНачалаУчета.ИдМероприятия,
		|	МероприятияДоНачалаУчета.Отменено,
		|	МероприятияДоНачалаУчета.Сотрудник,
		|	МероприятияДоНачалаУчета.ДатаМероприятия,
		|	МероприятияДоНачалаУчета.ВидМероприятия,
		|	МероприятияДоНачалаУчета.Сведения,
		|	МероприятияДоНачалаУчета.Подразделение,
		|	МероприятияДоНачалаУчета.Должность,
		|	МероприятияДоНачалаУчета.РазрядКатегория,
		|	МероприятияДоНачалаУчета.КодПоРееструДолжностей,
		|	МероприятияДоНачалаУчета.ТрудоваяФункция,
		|	МероприятияДоНачалаУчета.НаименованиеДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерДокументаОснования,
		|	МероприятияДоНачалаУчета.НаименованиеВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ДатаВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.СерияВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.НомерВторогоДокументаОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольнения,
		|	МероприятияДоНачалаУчета.ДатаС,
		|	МероприятияДоНачалаУчета.ДатаПо,
		|	МероприятияДоНачалаУчета.ДатаОтмены,
		|	МероприятияДоНачалаУчета.ЯвляетсяСовместителем,
		|	МероприятияДоНачалаУчета.ПредставлениеДолжности,
		|	МероприятияДоНачалаУчета.ПредставлениеПодразделения,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияТекстОснования,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияСтатья,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияЧасть,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияПодпункт,
		|	МероприятияДоНачалаУчета.ОснованиеУвольненияАбзац,
		|	МероприятияДоНачалаУчета.КодПоОКЗ,
		|	МероприятияДоНачалаУчета.ТерриториальныеУсловия,
		|	МероприятияДоНачалаУчета.ПричинаУвольненияПФР,
		|	МероприятияДоНачалаУчета.СрочностьТрудовогоДоговора,
		|	МероприятияДоНачалаУчета.УдаленностьРаботы,
		|	МероприятияДоНачалаУчета.СокращенностьГрафика,
		|	МероприятияДоНачалаУчета.ОписаниеДолжности,
		|	МероприятияДоНачалаУчета.Передано
		|ИЗ
		|	ВТИдМероприятияПоследнихМероприятийДоНачалаУчета КАК ИдМероприятияПоследнихМероприятийДоНачалаУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчетаПередававшиеся
		|			ПО МероприятияДоНачалаУчета.Сотрудник = МероприятияДоНачалаУчетаПередававшиеся.Сотрудник
		|				И МероприятияДоНачалаУчета.Организация = МероприятияДоНачалаУчетаПередававшиеся.Организация
		|				И (МероприятияДоНачалаУчетаПередававшиеся.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Переименование), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии)))
		|				И (МероприятияДоНачалаУчетаПередававшиеся.ИдМероприятия В
		|					(ВЫБРАТЬ
		|						ВТИдентификаторыРанееПереданныхОтмененных.ИдМероприятия
		|					ИЗ
		|						ВТИдентификаторыРанееПереданныхОтмененных
		|					ГДЕ
		|						МероприятияДоНачалаУчетаПередававшиеся.Организация = ВТИдентификаторыРанееПереданныхОтмененных.Организация))
		|		ПО ИдМероприятияПоследнихМероприятийДоНачалаУчета.Сотрудник = МероприятияДоНачалаУчета.Сотрудник
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.Организация = МероприятияДоНачалаУчета.Организация
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.ДатаМероприятия < МероприятияДоНачалаУчета.ДатаМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеМероприятияДоНачалаУчета КАК МероприятияДоНачалаУчетаПоследнее
		|		ПО ИдМероприятияПоследнихМероприятийДоНачалаУчета.Сотрудник = МероприятияДоНачалаУчетаПоследнее.Сотрудник
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.Организация = МероприятияДоНачалаУчетаПоследнее.Организация
		|			И ИдМероприятияПоследнихМероприятийДоНачалаУчета.ИдМероприятия = МероприятияДоНачалаУчетаПоследнее.ИдМероприятия
		|ГДЕ
		|	МероприятияДоНачалаУчета.ВидМероприятия В (ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Переименование), ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.УстановлениеВторойПрофессии))
		|	И ВЫБОР
		|			КОГДА МероприятияДоНачалаУчета.Передано
		|				ТОГДА ИСТИНА
		|			КОГДА МероприятияДоНачалаУчета.Передано = ЕСТЬNULL(МероприятияДоНачалаУчетаПоследнее.Передано, ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			КОГДА НЕ МероприятияДоНачалаУчета.Передано
		|					И ЕСТЬNULL(МероприятияДоНачалаУчетаПередававшиеся.Передано, ЛОЖЬ)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ МероприятияДоНачалаУчета.ИдМероприятия В
		|				(ВЫБРАТЬ
		|					ВТИдентификаторыРанееПереданныхОтмененных.ИдМероприятия
		|				ИЗ
		|					ВТИдентификаторыРанееПереданныхОтмененных
		|				ГДЕ
		|					МероприятияДоНачалаУчета.Организация = ВТИдентификаторыРанееПереданныхОтмененных.Организация)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаМероприятияКПередаче, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаМероприятияКПередаче, "ВТМероприятияДоНачалаУчета", ИмяВТМероприятияДоНачалаУчета);
	
	Если ИсключаемыйРегистратор = Неопределено Тогда
		ТекстЗапросаМероприятияКПередаче = СтрЗаменить(ТекстЗапросаМероприятияКПередаче, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности", "(ИСТИНА)");
		ТекстЗапросаМероприятияКПередаче = СтрЗаменить(ТекстЗапросаМероприятияКПередаче, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности", "(ИСТИНА)");
	Иначе
		
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
		
		ТекстЗапросаМероприятияКПередаче = СтрЗаменить(ТекстЗапросаМероприятияКПередаче, "&ИсключаемыйРегистраторПереданныхМероприятийТрудовойДеятельности",
			"НЕ МероприятияПереданные.Регистратор В (&ИсключаемыйРегистратор)");
		
		ТекстЗапросаМероприятияКПередаче = СтрЗаменить(ТекстЗапросаМероприятияКПередаче, "&ИсключаемыйРегистраторМероприятийТрудовойДеятельности",
			"НЕ МероприятияТрудовойДеятельности.Регистратор В (&ИсключаемыйРегистратор)");
		
	КонецЕсли;
	
	Запрос.Текст = ЗарплатаКадрыОбщиеНаборыДанных.ТекстОбъединенногоЗапроса(Запрос.Текст, ТекстЗапросаМероприятияКПередаче);
	
	Если ЗначениеЗаполнено(ИмяВТМероприятияДоНачалаУчета) Тогда
		
		ИменаВременныхТаблицКУничтожению = Новый Массив;
		ИменаВременныхТаблицКУничтожению.Добавить("ВТВсеМероприятияДоНачалаУчета");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТИдентификаторыРанееПереданныхОтмененных");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТДатыПоследнихМероприятийДоНачалаУчета");
		ИменаВременныхТаблицКУничтожению.Добавить("ВТИдМероприятияПоследнихМероприятийДоНачалаУчета");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура СформироватьДвиженияЗаявленийОСпособеВеденияТрудовыхКнижек(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТЗаявленияСОтзывами
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|		ПО ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник
		|			И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Заявление
		|			И (ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен)
		|ГДЕ
		|	НЕ ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка В (&МассивОбновленных)
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.УдалитьЗаявлениеОтозвано
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен
		|	И ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявленияСОтзывами.Ссылка КАК Ссылка
		|ИЗ
		|	ВТЗаявленияСОтзывами КАК ЗаявленияСОтзывами";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижек(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка КАК Ссылка,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Дата КАК Дата,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Организация КАК Организация,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Ответственный КАК Ответственный,
		|	МАКСИМУМ(ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.НомерСтроки) КАК НомерСтроки,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТОтозванные
		|ИЗ
		|	ВТЗаявленияСОтзывами КАК ЗаявленияСОтзывами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|			ПО ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник
		|				И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Заявление
		|				И (ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен)
		|		ПО ЗаявленияСОтзывами.Ссылка = ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка
		|ГДЕ
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.УдалитьЗаявлениеОтозвано
		|	И ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Дата,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Организация,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Ответственный,
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отозванные.Ссылка КАК Ссылка,
		|	Отозванные.Дата КАК Дата,
		|	Отозванные.Организация КАК Организация,
		|	Отозванные.Ответственный КАК Ответственный,
		|	Отозванные.НомерСтроки КАК НомерСтроки,
		|	Отозванные.Сотрудник КАК Сотрудник,
		|	&ТекущаяДата КАК ДатаПрименения
		|ПОМЕСТИТЬ ВТДатыПримененияЗаявлений
		|ИЗ
		|	ВТОтозванные КАК Отозванные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|			ПО ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник
		|				И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Заявление
		|				И (ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен)
		|		ПО Отозванные.Сотрудник = ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Сотрудник
		|			И Отозванные.Дата < ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Дата
		|			И (ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен)
		|ГДЕ
		|	ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отозванные.Ссылка,
		|	Отозванные.Дата,
		|	Отозванные.Организация,
		|	Отозванные.Ответственный,
		|	Отозванные.НомерСтроки,
		|	Отозванные.Сотрудник,
		|	МИНИМУМ(СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Дата)
		|ИЗ
		|	ВТОтозванные КАК Отозванные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ПО Отозванные.Сотрудник = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник
		|			И Отозванные.Ссылка = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении
		|			И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолженииОтмена)
		|			И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отозванные.Дата,
		|	Отозванные.Ссылка,
		|	Отозванные.Сотрудник,
		|	Отозванные.НомерСтроки,
		|	Отозванные.Организация,
		|	Отозванные.Ответственный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отозванные.Ссылка,
		|	Отозванные.Дата,
		|	Отозванные.Организация,
		|	Отозванные.Ответственный,
		|	Отозванные.НомерСтроки,
		|	Отозванные.Сотрудник,
		|	МИНИМУМ(СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Дата)
		|ИЗ
		|	ВТОтозванные КАК Отозванные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ПО Отозванные.Сотрудник = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудник
		|			И Отозванные.Ссылка = СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставлении
		|			И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПредоставленииОтмена)
		|			И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Проведен)
		|
		|СГРУППИРОВАТЬ ПО
		|	Отозванные.Дата,
		|	Отозванные.Ссылка,
		|	Отозванные.Сотрудник,
		|	Отозванные.НомерСтроки,
		|	Отозванные.Организация,
		|	Отозванные.Ответственный
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыПримененияЗаявлений.Ссылка КАК Ссылка,
		|	ДатыПримененияЗаявлений.Организация КАК Организация,
		|	ДатыПримененияЗаявлений.Ответственный КАК Ответственный,
		|	ДатыПримененияЗаявлений.НомерСтроки КАК НомерСтроки,
		|	ДатыПримененияЗаявлений.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(МИНИМУМ(ДатыПримененияЗаявлений.ДатаПрименения), ДатыПримененияЗаявлений.Дата) КАК Дата
		|ИЗ
		|	ВТДатыПримененияЗаявлений КАК ДатыПримененияЗаявлений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыПримененияЗаявлений.Ссылка,
		|	ДатыПримененияЗаявлений.Дата,
		|	ДатыПримененияЗаявлений.Организация,
		|	ДатыПримененияЗаявлений.НомерСтроки,
		|	ДатыПримененияЗаявлений.Ответственный,
		|	ДатыПримененияЗаявлений.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДокументОтзывОбъект = Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОтзывОбъект, Выборка, "Дата,Организация,Ответственный");
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрокаДокументаОтзыва = ДокументОтзывОбъект.Сотрудники.Добавить();
			НоваяСтрокаДокументаОтзыва.Сотрудник = Выборка.Сотрудник;
			НоваяСтрокаДокументаОтзыва.Заявление = Выборка.Ссылка;
			
		КонецЦикла;
		
		ДокументОтзывОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОтзывОбъект, Истина, Истина, РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижек(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижек(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек КАК ЗаявленияОВеденииТрудовыхКнижек
		|		ПО ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка = ЗаявленияОВеденииТрудовыхКнижек.Регистратор
		|ГДЕ
		|	НЕ ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка В (&МассивОбновленных)
		|	И ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиСотрудники.Ссылка.Проведен
		|	И ЗаявленияОВеденииТрудовыхКнижек.Регистратор ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекОтозванные(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗаявленияОВеденииТрудовыхКнижек.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПроведения = Документы.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности.ДанныеДляПроведенияДокумента(Выборка.Ссылка);
		НаборЗаписей = РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижек.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижек(НаборЗаписей, ДанныеДляПроведения.ЗаявленияОВеденииТрудовыхКнижек);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекОтозванные(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекОтозванные(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Сотрудники КАК ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные КАК ЗаявленияОВеденииТрудовыхКнижекОтозванные
		|		ПО ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Ссылка = ЗаявленияОВеденииТрудовыхКнижекОтозванные.Регистратор
		|ГДЕ
		|	НЕ ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Ссылка В (&МассивОбновленных)
		|	И ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.Ссылка.Проведен
		|	И ЗаявленияОВеденииТрудовыхКнижекОтозванные.Регистратор ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекПереданные(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПроведения = Документы.ОтзывЗаявленийОПредоставленииСведенийОТрудовойДеятельности.ДанныеДляПроведенияДокумента(Выборка.Ссылка);
		НаборЗаписей = РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижекОтозванные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижекОтозванные(НаборЗаписей, ДанныеДляПроведения.ЗаявленияОВеденииТрудовыхКнижекОтозванные);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекПереданные(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНаборыЗаписейЗаявленияОВеденииТрудовыхКнижекПереданные(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Сотрудники КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные КАК ЗаявленияОВеденииТрудовыхКнижекПереданные
		|		ПО СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка = ЗаявленияОВеденииТрудовыхКнижекПереданные.Регистратор
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка В (&МассивОбновленных)
		|	И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка.Проведен
		|	И ЗаявленияОВеденииТрудовыхКнижекПереданные.Регистратор ЕСТЬ NULL
		|	И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении <> НЕОПРЕДЕЛЕНО
		|			ИЛИ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаявлениеОПродолжении <> НЕОПРЕДЕЛЕНО)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.НаборЗаписей", "Регистратор", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПроведения = Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ДанныеДляПроведенияДокумента(Выборка.Ссылка);
		НаборЗаписей = РегистрыСведений.ЗаявленияОВеденииТрудовыхКнижекПереданные.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		
		СформироватьДвиженияЗаявленийОВеденииТрудовыхКнижекПереданных(НаборЗаписей, ДанныеДляПроведения.ЗаявленияОВеденииТрудовыхКнижекПереданные);
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПрочие(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	МероприятияПрочие.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельностиПрочие КАК МероприятияПрочие
		|ГДЕ
		|	НЕ МероприятияПрочие.ФизическоеЛицо В (&МассивОбновленных)
		|	И (МероприятияПрочие.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И МероприятияПрочие.ПредставлениеДолжности = """"
		|			ИЛИ МероприятияПрочие.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				И МероприятияПрочие.ПредставлениеПодразделения = """"
		|			ИЛИ НЕ МероприятияПрочие.ОснованиеУвольнения В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка))
		|				И МероприятияПрочие.ОснованиеУвольненияСтатья = """")";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПереданные(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.ФизическоеЛицо);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "РегистрСведений.МероприятияТрудовойДеятельностиПрочие", "ФизическоеЛицо", Выборка.ФизическоеЛицо) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.МероприятияТрудовойДеятельностиПрочие.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		НаборЗаписей.Прочитать();
		
		ЗаполнитьПредставленияКоллекцииМероприятий(НаборЗаписей);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПереданные(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияОбъектовМероприятияТрудовойДеятельностиПереданные(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка КАК Ссылка,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка.ДокументПринятВПФР КАК ДокументПринятВПФР
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Мероприятия КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Ссылка В (&МассивОбновленных)
		|	И (СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ПредставлениеДолжности = """"
		|			ИЛИ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ПредставлениеПодразделения = """"
		|			ИЛИ НЕ СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольнения В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка))
		|				И СведенияОТрудовойДеятельностиРаботниковСЗВ_ТДМероприятия.ОснованиеУвольненияСтатья = """")";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ЗаполнитьПризнакиОтмененоСТД_Р(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД", "Ссылка", Выборка.Ссылка) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьПредставленияКоллекцииМероприятий(ДокументОбъект.Мероприятия, ДокументОбъект.Организация);
		
		Если Выборка.ДокументПринятВПФР Тогда
			
			ДокументОбъект.Движения.МероприятияТрудовойДеятельностиПереданные.Прочитать();
			ТаблицаНабора = ДокументОбъект.Движения.МероприятияТрудовойДеятельностиПереданные.Выгрузить();
			Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл
				
				Если ЗначениеЗаполнено(СтрокаМероприятия.ДатаОтмены) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокиДвижений = ТаблицаНабора.НайтиСтроки(Новый Структура("ИдМероприятия,Отменено", СтрокаМероприятия.ИдМероприятия, Ложь));
				Если СтрокиДвижений.Количество() > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокиДвижений[0], СтрокаМероприятия,
						"ПредставлениеДолжности,ПредставлениеПодразделения,ОснованиеУвольненияСтатья,ОснованиеУвольненияЧасть,ОснованиеУвольненияПункт,ОснованиеУвольненияПодпункт,ОснованиеУвольненияАбзац");
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументОбъект.Движения.МероприятияТрудовойДеятельностиПереданные.Загрузить(ТаблицаНабора);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(ДокументОбъект.Движения.МероприятияТрудовойДеятельностиПереданные);
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления = Неопределено Тогда
		ЗаполнитьПризнакиОтмененоСТД_Р(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакиОтмененоСТД_Р(ПараметрыОбновления)
	
	Запрос = Новый Запрос;
	
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
		|	СведенияОТрудовойДеятельностиРаботникаСТД_РМероприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р.Мероприятия КАК СведенияОТрудовойДеятельностиРаботникаСТД_РМероприятия
		|ГДЕ
		|	НЕ СведенияОТрудовойДеятельностиРаботникаСТД_РМероприятия.Ссылка В (&МассивОбновленных)
		|	И НЕ СведенияОТрудовойДеятельностиРаботникаСТД_РМероприятия.Отменено
		|	И СведенияОТрудовойДеятельностиРаботникаСТД_РМероприятия.УдалитьДатаОтмены <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
			ПараметрыОбновления, "Документ.СведенияОТрудовойДеятельностиРаботникаСТД_Р", "Ссылка", Выборка.Ссылка) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаМероприятия Из ДокументОбъект.Мероприятия Цикл
			
			Если ЗначениеЗаполнено(СтрокаМероприятия.УдалитьДатаОтмены) Тогда
				СтрокаМероприятия.Отменено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияКоллекцииМероприятий(НаборЗаписей, Организация = Неопределено)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		ЗаполнитьПредставленияЗаписиМероприятия(Запись, Организация);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставленияЗаписиМероприятия(Запись, Организация = Неопределено)
	
	ИменаДоступныхПолей = ЭлектронныеТрудовыеКнижкиКлиентСервер.ИменаДоступныхПолейВидовМероприятий();
	
	ДоступныеПоля = ИменаДоступныхПолей.Получить(Запись.ВидМероприятия);
	Если ДоступныеПоля <> Неопределено Тогда
		
		Если СтрНайти(ДоступныеПоля, "Должность") > 0 Тогда
			
			Если ЗначениеЗаполнено(Запись.Должность) И ПустаяСтрока(Запись.ПредставлениеДолжности) Тогда
				
				СвойстваДолжности = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваДолжности(Запись.Должность);
				Запись.ПредставлениеДолжности = СвойстваДолжности.Представление;
				Запись.КодПоРееструДолжностей = СвойстваДолжности.КодПоРееструДолжностей;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(ДоступныеПоля, "Подразделение") > 0 И ЗначениеЗаполнено(Запись.Подразделение) Тогда
			
			Если Организация <> Неопределено Тогда
				НеЗаполнятьПодразделенияВМероприятиях = ЭлектронныеТрудовыеКнижкиПовтИсп.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности(Организация);
			Иначе
				НеЗаполнятьПодразделенияВМероприятиях = ЭлектронныеТрудовыеКнижкиПовтИсп.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности(Запись.Организация);
			КонецЕсли;
			
			Если Не НеЗаполнятьПодразделенияВМероприятиях Тогда
				
				Если ЗначениеЗаполнено(Запись.Подразделение) И ПустаяСтрока(Запись.ПредставлениеПодразделения) Тогда
					
					Запись.ПредставлениеПодразделения =
						ЭлектронныеТрудовыеКнижкиПовтИсп.ПредставлениеПодразделения(Запись.Подразделение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрНайти(ДоступныеПоля, "ОснованиеУвольнения") > 0 Тогда
			
			Если ЗначениеЗаполнено(Запись.ОснованиеУвольнения) И ПустаяСтрока(Запись.ОснованиеУвольненияСтатья) Тогда
				
				ЗаполнитьЗначенияСвойств(Запись,
					ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваОснованияУвольнения(Запись.ОснованиеУвольнения));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодыТрудовыхФункцийПоДолжностям(ПараметрыОбновления = Неопределено) Экспорт
	
	ЭлектронныеТрудовыеКнижкиВнутренний.ЗаполнитьКодыТрудовыхФункцийПоДолжностям(ПараметрыОбновления);
	
КонецПроцедуры

#КонецОбласти

Функция КодДолжностиПоРееструГосударственнойСлужбы(Должность) Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.КодДолжностиПоРееструГосударственнойСлужбы(Должность);
	
КонецФункции

Функция ПредставлениеРазрядаКатегории(РазрядКатегория) Экспорт
	
	Возврат ЭлектронныеТрудовыеКнижкиВнутренний.ПредставлениеРазрядаКатегории(РазрядКатегория);
	
КонецФункции

Процедура ЗаполнитьСведенияПереводаМеждуСтрахователями(Запись, ДанныеФилиалов, Филиал, Период, ОсновнаяЗапись)
	
	Если ДанныеФилиалов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФилиала = ДанныеФилиалов.Получить(Филиал);
	Если ДанныеФилиала <> Неопределено Тогда
		
		ДанныеПериода = ДанныеФилиала.Получить(Период);
		Если ДанныеПериода <> Неопределено Тогда
			
			Если ОсновнаяЗапись Тогда
				СтрокаШаблона = НСтр("ru = 'Переведен из %1 (%2)';
									|en = 'Transferred from %1 (%2)'");
			Иначе
				СтрокаШаблона = НСтр("ru = 'Переведен в %1 (%2)';
									|en = 'Transferred to %1 (%2)'");
			КонецЕсли;
			
			Запись.Сведения = СтрШаблон(
				СтрокаШаблона,
				ДанныеПериода.НаименованиеСокращенное,
				?(ЗначениеЗаполнено(ДанныеПериода.РегистрационныйНомерСФР), ДанныеПериода.РегистрационныйНомерСФР, ДанныеПериода.РегистрационныйНомерПФР));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыИсправляемыхПереводов(МероприятияПереводов, Организация) Экспорт
	
	ИдентификаторыМероприятий = ОбщегоНазначения.ВыгрузитьКолонку(МероприятияПереводов, "Ключ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ИдентификаторыМероприятий", ИдентификаторыМероприятий);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Мероприятия.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияОтмененные.Регистратор КАК РегистраторОтмены,
		|	Мероприятия.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Мероприятия.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТРегистраторыОтменыМероприятий
		|ИЗ
		|	РегистрСведений.МероприятияТрудовойДеятельности КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияОтмененные
		|		ПО Мероприятия.Организация = МероприятияОтмененные.Организация
		|			И Мероприятия.ИдМероприятия = МероприятияОтмененные.ИдМероприятия
		|			И (МероприятияОтмененные.Отменено)
		|ГДЕ
		|	Мероприятия.Организация <> &Организация
		|	И Мероприятия.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Мероприятия.ИдМероприятия В(&ИдентификаторыМероприятий)
		|	И НЕ Мероприятия.Отменено
		|	И Мероприятия.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистраторыОтменыМероприятий.ИдМероприятия КАК ИдИсправляемогоМероприятия,
		|	МероприятияТрудовойДеятельности.ИдМероприятия КАК ИдМероприятия,
		|	МероприятияТрудовойДеятельности.ДатаМероприятия КАК ДатаМероприятия,
		|	МероприятияТрудовойДеятельности.НаименованиеДокументаОснования КАК НаименованиеДокументаОснования,
		|	МероприятияТрудовойДеятельности.ДатаДокументаОснования КАК ДатаДокументаОснования,
		|	МероприятияТрудовойДеятельности.СерияДокументаОснования КАК СерияДокументаОснования,
		|	МероприятияТрудовойДеятельности.НомерДокументаОснования КАК НомерДокументаОснования,
		|	МероприятияТрудовойДеятельности.НаименованиеВторогоДокументаОснования КАК НаименованиеВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.ДатаВторогоДокументаОснования КАК ДатаВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.СерияВторогоДокументаОснования КАК СерияВторогоДокументаОснования,
		|	МероприятияТрудовойДеятельности.НомерВторогоДокументаОснования КАК НомерВторогоДокументаОснования
		|ИЗ
		|	ВТРегистраторыОтменыМероприятий КАК РегистраторыОтменыМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.МероприятияТрудовойДеятельности КАК МероприятияТрудовойДеятельности
		|		ПО РегистраторыОтменыМероприятий.РегистраторОтмены = МероприятияТрудовойДеятельности.Регистратор
		|			И РегистраторыОтменыМероприятий.ФизическоеЛицо = МероприятияТрудовойДеятельности.ФизическоеЛицо
		|			И РегистраторыОтменыМероприятий.Сотрудник = МероприятияТрудовойДеятельности.Сотрудник
		|			И (НЕ МероприятияТрудовойДеятельности.Отменено)
		|			И (МероприятияТрудовойДеятельности.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятийТрудовойДеятельности.Перевод))";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаИсправления = МероприятияПереводов.Получить(Выборка.ИдИсправляемогоМероприятия);
		Если СтрокаИсправления <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаИсправления, Выборка)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтформатироватьИНН(Параметры, ИмяРеквизитаИНН)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, ИмяРеквизитаИНН) Тогда
		Если ЗначениеЗаполнено(Параметры[ИмяРеквизитаИНН]) Тогда
			Параметры[ИмяРеквизитаИНН] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
				Параметры[ИмяРеквизитаИНН], 12, "-", "Справа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
