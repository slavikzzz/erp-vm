
#Область ПрограммныйИнтерфейс

Функция СертификатПользователя(УчетнаяЗапись, ПереченьСвойств = Неопределено, Знач Пользователь = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПереченьСвойств) Тогда
		Результат = Новый Структура(ПереченьСвойств);
	Иначе
		Результат = Новый Структура();
		Результат.Вставить("МодельХраненияЗакрытогоКлюча", Перечисления.МодельХраненияЗакрытогоКлюча.ПустаяСсылка());
		Результат.Вставить("ЭлектроннаяПодписьВМоделиСервиса", Ложь);
		Результат.Вставить("МестоХраненияКлюча", Неопределено);
		Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь);
		Результат.Вставить("ТелефонМобильныйДляАвторизации", "");
		Результат.Вставить("ЭлектроннаяПочтаДляПаролей", "");
		Результат.Вставить("УчетнаяЗаписьОблачнойПодписи", Неопределено);
	КонецЕсли;
	
	Результат.Вставить("Найден", Ложь);
	Результат.Вставить("Отпечаток", "");
	Результат.Вставить("СертификатРуководителя", "");
	Результат.Вставить("СертификатГлавногоБухгалтера", "");
	Результат.Вставить("СертификатДляШифрования", "");
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Отпечаток = ОтпечатокСертификатаПользователя(УчетнаяЗапись, Пользователь);
	Результат.Вставить("Отпечаток", Отпечаток);
	Результат.Вставить("СертификатРуководителя", Отпечаток);
	Результат.Вставить("СертификатГлавногоБухгалтера", Отпечаток);
	Результат.Вставить("СертификатДляШифрования", Отпечаток);
	
	Если НЕ ЗначениеЗаполнено(Отпечаток) Тогда
		
		ТекстОшибки = НСтр("ru = 'В учетной записи %1 не найден сертификат пользователя %2';
							|en = 'В учетной записи %1 не найден сертификат пользователя %2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(УчетнаяЗапись), Строка(Пользователь));
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
		Возврат Результат;
		
	КонецЕсли;
	
	Если Результат.Свойство("МодельХраненияЗакрытогоКлюча")
		ИЛИ Результат.Свойство("ЭлектроннаяПодписьВМоделиСервиса")
		ИЛИ Результат.Свойство("ЭтоЭлектроннаяПодписьВМоделиСервиса")
		ИЛИ Результат.Свойство("ТелефонМобильныйДляАвторизации")
		ИЛИ Результат.Свойство("ЭлектроннаяПочтаДляПаролей")
		ИЛИ Результат.Свойство("МестоХраненияКлюча") Тогда
		
		МодельХранения = МодельХраненияСертификатаПользователя(УчетнаяЗапись, Пользователь);
		Результат.Вставить("МодельХраненияЗакрытогоКлюча", МодельХранения);
	
		МестоХранения = КриптографияЭДКОКлиентСервер.СвойстваМестаХраненияКлюча(МодельХранения);
		Результат.Вставить("МестоХраненияКлюча", МестоХранения);
		
		ЭтоЭПВМоделиСервиса = 
			МодельХранения = Перечисления.МодельХраненияЗакрытогоКлюча.ВМоделиСервиса;
			
		Результат.Вставить("ЭлектроннаяПодписьВМоделиСервиса", ЭтоЭПВМоделиСервиса);
		Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", ЭтоЭПВМоделиСервиса);
		
		Если ЭтоЭПВМоделиСервиса 
			И (Результат.Свойство("ТелефонМобильныйДляАвторизации")
			ИЛИ Результат.Свойство("ЭлектроннаяПочтаДляПаролей")) Тогда
		
			Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.НайтиСертификатВХранилищеПоОтпечатку(Отпечаток);
			Если Сертификат.Свойство("Идентификатор") Тогда
				
				Контакты = ОбработкаЗаявленийАбонента.ИнициализироватьСпособыДоставкиПаролей(Сертификат.Идентификатор);
				
				Результат.Вставить("ТелефонМобильныйДляАвторизации", Контакты.Телефон);
				Результат.Вставить("ЭлектроннаяПочтаДляПаролей", Контакты.ЭлектроннаяПочта);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ЭтоDSS = МодельХранения = Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись;
		Если ЭтоDSS 
			И Результат.Свойство("УчетнаяЗаписьОблачнойПодписи")
			И КриптографияЭДКО.ИспользованиеОблачнойПодписиВозможно() Тогда
			
			УчетнаяЗаписьОблачнойПодписи = ДокументооборотСКОПовтИсп.УчетнаяЗаписьОблачнойПодписьПоОтпечатку(Отпечаток);
			Результат.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи)
			
		КонецЕсли;
		
	КонецЕсли;
		
	Результат.Вставить("Найден", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьПравоНаОтправкуОбъекта(СсылкаНаОбъект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СведенияОбОбъекте = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(СсылкаНаОбъект);
	
	Направление   = СведенияОбОбъекте.ВидКонтролирующегоОргана;
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(СведенияОбОбъекте.Организация);
	
	Если НЕ ЗначениеЗаполнено(Направление) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = ЕстьПравоНаОрган(УчетнаяЗапись, Направление);

	Возврат Результат;

КонецФункции

//  Здесь параметр Направление - это Перечисления.ТипыКонтролирующихОрганов
Функция ЕстьПравоНаОрган(УчетнаяЗапись, Направление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПрерватьПроверкуПравМультирежима(УчетнаяЗапись, Направление) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись);

	Если НЕ Права.ЕстьДанные ИЛИ Права.ЭтоПотенциальныйПользователь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяРеквизита = МультирежимКлиентСервер.РеквизитПоОргану(Направление);
	
	ЕстьДоступ = Права[ИмяРеквизита];
	
	Возврат ЕстьДоступ;

КонецФункции

Функция ПрерватьПроверкуПравМультирежима(УчетнаяЗапись, Направление) Экспорт
	
	Если НЕ ЭтоМультиРежим(УчетнаяЗапись) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВОрганМожноОтправлятьБезУчетки(Направление) Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Организации = КонтекстЭДОСервер.ОрганизацииУчетнойЗаписи(УчетнаяЗапись);
		
		Если Организации.Количество() = 0 Тогда
			Возврат Истина;
		Иначе
			
			Организация = Организации[0];
			
			ОрганСтрокой = МультирежимКлиентСервер.ОрганСтрокойПоПеречислению(Направление);
			
			Если НЕ ЭтоМультирежимВНастройкахОргана(Организация, ОрганСтрокой) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

//  Здесь параметр Орган - это Перечисления.ТипыКонтролирующихОрганов
Функция ВОрганМожноОтправлятьБезУчетки(Орган) Экспорт
	
	Может = 
		Орган = Перечисления.ТипыКонтролирующихОрганов.ФСС
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.ФТС
		ИЛИ Орган = Перечисления.ТипыКонтролирующихОрганов.РПН;
		
	Возврат Может;

КонецФункции

//  Здесь параметр Орган - это Перечисления.ТипыКонтролирующихОрганов
Функция ЕстьПравоНаОрганПоОрганизации(Организация, Орган, ПроверятьДляТекущегоПользователя = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ПроверятьДоступ = 
		ПроверятьДляТекущегоПользователя
		И ЗначениеЗаполнено(Организация.УчетнаяЗаписьОбмена)
		И ЭтоМультиРежим(Организация.УчетнаяЗаписьОбмена);
		
	Если ПроверятьДоступ Тогда
		
		ЕстьДоступ = ЕстьПравоНаОрган(
			Организация.УчетнаяЗаписьОбмена, 
			Орган);
			
		Возврат ЕстьДоступ;
			
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоПодключениеМультирежимаВторымПользователем(Форма) Экспорт
	
	ЭтоВторой = НЕ ЭтоПервыйПодключенныйПоСНИЛС(Форма, Форма.ВладелецЭЦПСНИЛС);
	 
	Возврат ЭтоВторой
		И МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
	
КонецФункции

Процедура ИнициализироватьПользователяМультиРежима(Форма, Сотрудник) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат;
	КонецЕсли;
	
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Сотрудник);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма) Тогда
		
		// Если это подключение, то этих настроек еще нет
		УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
		
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда 
			
			// Восстанавливаем имеющиеся права
			Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Сотрудник);
			
			Если Права.ЕстьДанные И Права.ЭтоМультиРежим Тогда
				Строка.Пометка = Истина;
				ЗаполнитьЗначенияСвойств(Строка, Права);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// Создаем новый набор прав
	ЗаполнитьПользователяИФизЛицоСтроки(Строка, Сотрудник);
	ИнициализироватьПользователяМультиРежимаПоСтроке(Форма, Строка);
		
КонецПроцедуры

Процедура СброситьПометкуВладельцаЭЦПВТаблицеПользователей(Форма) Экспорт
	
	Если НЕ Форма.ЭтоМультиРежим Тогда
		Возврат;
	КонецЕсли;
	
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Форма.ВладелецЭЦП);
		
		Если НЕ Права.ЕстьДанные Тогда
			Строка.Пометка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПользователяИФизЛицоСтроки(Строка, Сотрудник) Экспорт
	
	ЭтоФизЛицо = ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица");
	Если ЭтоФизЛицо Тогда
		Строка.Пользователь = ПользовательПоФизЛицуИзСправочникаПользователи(Сотрудник);
		Строка.ФизическоеЛицо = Сотрудник;
	Иначе
		Строка.Пользователь = Сотрудник;
		Строка.ФизическоеЛицо = ФизЛицоПоПользователюИзСправочникаПользователи(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПользователяМультиРежимаПоСтроке(Форма, Строка) Экспорт
		
	ВсеГосОрганыУчетнойЗаписи = ВсеГосОрганыУчетнойЗаписи(Форма);
	
	ЗаполнитьЗначенияСвойств(Строка, Форма);
	ЗаполнитьЗначенияСвойств(Строка, ВсеГосОрганыУчетнойЗаписи);
	Строка.ЕстьДоступКоВсемГосОрганам = Истина;
	
	Если Строка.СдаватьВФНС И Строка.Пометка Тогда
		Строка.ЭтоШифровальщик = Истина;
	КонецЕсли;
	
	ЗаполнитьДанныеПользователяИзБазы(Форма, Строка);
	
	СкорректироватьПраваПользователяМультиРежимаПоСтроке(Форма, Строка);
	
КонецПроцедуры

Процедура СкорректироватьПраваПользователейМультиРежима(Форма) Экспорт
	
	НужнаКорректировка = 
		Форма.ЭтоМультиРежим
		И Форма.ЗаявлениеСозданоКопированием
		И МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
	
	Если НЕ НужнаКорректировка Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого Строка Из Форма.ТаблицаПользователей Цикл
		Если Строка.Пометка Тогда
			СкорректироватьПраваПользователяМультиРежимаПоСтроке(Форма, Строка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура СкорректироватьПраваПользователяМультиРежимаПоСтроке(Форма, Строка) Экспорт
		
	Если ЭтоОбязательныйАдмин(Форма, Строка) Тогда
		
		Строка.ЭтоАдмин = Истина;
		Строка.ЭтоПотенциальныйПользователь = Ложь;
		
	Иначе
		Строка.ЭтоПотенциальныйПользователь = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВладельцаДляМультирежима(Форма) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ЭтоМультиРежим Тогда
		
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
		Если Строка = Неопределено ИЛИ НЕ Строка.Пометка Тогда
			
			ДобавитьВладельцаЭЦПБезПравВТаблицу(Форма);
			
		Иначе
			
			Форма.ВладелецЭЦПЭтоАдмин = 
				ЭтоПодтвержденныйАдмин(Форма, Форма.ВладелецЭЦП) 
				ИЛИ МультирежимКлиентСервер.ВладелецЭЦПЭтоАдмин(Форма) 
				ИЛИ МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма) И ЭтоОбязательныйАдмин(Форма, Строка);
				
			Строка.ЭтоАдмин = Форма.ВладелецЭЦПЭтоАдмин;
			Форма.ЕстьДоступКоВсемГосОрганам = ЗначениеПраваНаУчетнуюЗапись(Форма, Форма.ВладелецЭЦП, "ЕстьДоступКоВсемГосОрганам");
			
		КонецЕсли;
	Иначе
		Форма.ВладелецЭЦПЭтоАдмин = Ложь;
		Форма.ЕстьДоступКоВсемГосОрганам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВладельцаЭЦПБезПравВТаблицу(Форма) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
	
	// На случай, если учетка была восстановлена без потенциальных пользователей
	ЕстьВРегФайле = РегФайлКА.СНИЛСЕстьВРегФайле(Форма.ВладелецЭЦПСНИЛС, УчетнаяЗапись);
	
	ЭтоПодключениеМультирежима = МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
	Форма.ВладелецЭЦПРасширилСебеПрава = 
		НЕ ЭтоПодключениеМультирежима
		И НЕ МультирежимКлиентСервер.ЭтоРуководительМеняетСебеПрава(Форма)
		// На случай, если учетка была восстановлена без потенциальных пользователей
		И НЕ ЕстьВРегФайле;
	
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
	Если Строка = Неопределено Тогда
		Пользователь = ПользовательПоФизЛицуИзСправочникаПользователи(Форма.ВладелецЭЦП);
		
		Если Пользователь = Неопределено Тогда
			МультирежимКлиентСервер.ВызватьИсключениеЕслиНеНайденПользователь(Форма.ВладелецЭЦП, Истина);
		Иначе
			ИнициализироватьПользователяМультиРежима(Форма, Пользователь);
			Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
		КонецЕсли;
	Иначе
		ИнициализироватьПользователяМультиРежима(Форма, Форма.ВладелецЭЦП);
	КонецЕсли;
	
	Если Строка <> Неопределено Тогда
		
		Если ЕстьВРегФайле Тогда
			РегФайлКА.ЗаполнитьПраваВладельцаИзРегФайла(Форма, Строка, УчетнаяЗапись);
			ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, Строка);
		Иначе
			Форма.ЕстьДоступКоВсемГосОрганам = Истина;
		КонецЕсли;
		
		Форма.ВладелецЭЦПЭтоАдмин = Строка.ЭтоАдмин;
		Строка.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеГосОрганыУчетнойЗаписи(Форма, Заявление = Неопределено) Экспорт
	
	Есть = ЕстьРеквизит(Форма, "ВсеГосОрганыУчетнойЗаписи");
	Если Есть И ЗначениеЗаполнено(Форма.ВсеГосОрганыУчетнойЗаписи) Тогда
		// Мог поменяться и не обновиться? 
		// Использовать МультирежимКлиентСервер.ОбновитьВсеГосОрганыУчетнойЗаписи
		Возврат Форма.ВсеГосОрганыУчетнойЗаписи;
	КонецЕсли;
	
	ПараметрыФормы = СтруктураОбщихПараметровФормыНаправлений() + "," + РезультатВыбораНаправлений();
	
	ГосОрганы = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ГосОрганы, Форма);
	
	ДобавитьВПараметрыКодыПолучателей(Форма, ГосОрганы);
	
	ГосОрганы = Новый ФиксированнаяСтруктура(ГосОрганы);
	
	Если Заявление <> Неопределено Тогда
		
		ГосОрганы = ВсеГосОрганыУчетнойЗаписиПоЗаявлению(Форма, ГосОрганы, Заявление);
		
	ИначеЕсли ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Если СтрНайти(Форма.ИмяФормы, "_ФормаДокумента") Тогда
		
			ГосОрганы = ВсеГосОрганыУчетнойЗаписиПоЗаявлению(Форма, ГосОрганы, Форма.Объект);
			
		ИначеЕсли СтрНайти(Форма.ИмяФормы, "НастройкаПрограммыУпрощенный") Тогда
			
			ГосОрганы = ВсеГосОрганыУчетнойЗаписиПоЗаявлению(Форма, ГосОрганы, Форма.ДокументЗаявление.Ссылка);
			
		ИначеЕсли НЕ ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаЗаявления(Форма) Тогда
			
			УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
			
			Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
				ВсеГосОрганыУчетнойЗаписиИзРегистраДопСведений(Форма, ГосОрганы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ГосОрганы;
		
КонецФункции

Функция ШаблонПараметровФормыПользователи() Экспорт
	
	ПараметрыФормы = 
		"ВладелецЭЦПЭтоАдмин,
		|ВладелецЭЦП,
		|Организация,
		|Руководитель,
		|ЭтоМультиРежим,
		|ЭтоМультиРежимИсходный,
		|ЭтоЮридическоеЛицо,
		|ТекущийПользователь,
		|ПоддерживаетсяМультирежим,
		|УчетнаяЗапись,
		|ЗапретитьИзменение,
		|ВладелецЭЦПРасширилСебеПрава,
		|ВладелецЭЦПСНИЛС,
		|ВладелецЭЦПИмя,
		|ВладелецЭЦПОтчество,
		|ВладелецЭЦПФамилия,
		|ВладелецЭЦПИНН";
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПараметрыФормыПользователи(Форма) Экспорт
	
	ПараметрыФормы = ШаблонПараметровФормыПользователи();
	
	Результат = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(Результат, Форма, ПараметрыФормы); 
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Результат.Вставить("АдресТаблицы",  АдресТаблицы(Форма, "ТаблицаПользователей"));
	Результат.Вставить("ВсеГосОрганыУчетнойЗаписи", ВсеГосОрганыУчетнойЗаписи(Форма));
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонТаблицыПолучатели(ДобавитьНаименование = Ложь) Экспорт
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипПолучателя = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов");
	
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("ТипПолучателя", ТипПолучателя);
	Получатели.Колонки.Добавить("КодПолучателя", ТипСтрока);
	Получатели.Колонки.Добавить("КПП", ТипСтрока);
	
	Если ДобавитьНаименование Тогда
		Получатели.Колонки.Добавить("Наименование", ТипСтрока);
	КонецЕсли;
	
	Возврат Получатели;
	
КонецФункции

Функция ВсеГосОрганыУчетнойЗаписиИзРегистраДопСведений(Форма, ГосОрганы) Экспорт
	
	ПолучателиФНС  = ШаблонТаблицыПолучатели();
	ПолучателиФСГС = ШаблонТаблицыПолучатели(Истина);
	
	ГосОрганыУчетки = ОбработкаЗаявленийАбонента.ИнициализироватьИсходныеГосОрганыУчетнойЗаписи(Форма, ПолучателиФНС, ПолучателиФСГС);
	
	ГосОрганы = Новый Структура(ГосОрганы);
	ЗаполнитьЗначенияСвойств(ГосОрганы, ГосОрганыУчетки);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ПризнакиПоддержки = КонтекстЭДОСервер.ПоддерживаемыеНаправленияОрганизации(Форма.Организация);
	
	ЗаполнитьЗначенияСвойств(ГосОрганы, ПризнакиПоддержки);
	ГосОрганы.ПризнакПоддержкиРосстат = ПризнакиПоддержки.ПризнакПоддержкиФСГС; // по-разному называются
	
	// Еще есть такие - ДанныеОрганизации, КодРегиона, АдресЮридическийЗначение, Спецоператор
	ГосОрганы.Организация = Форма.Организация;
	ГосОрганы.КодРегиона  = ГосОрганыУчетки.КодРегионаФСРАР;
	ГосОрганы.ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Форма.Организация);
	ГосОрганы.ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Форма.Организация);
	ГосОрганы.ПризнакОбособленногоПодразделения = Ложь;
	ГосОрганы.ТарифОператораЭДО = Неопределено;
	ГосОрганы.ЭтоМультиРежим = Истина;
	ГосОрганы.ЭтоГосОрганыУчетнойЗаписи = Ложь;
	ГосОрганы.ГлБухгалтер  = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Форма.Организация);
	ГосОрганы.Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Форма.Организация);
	ГосОрганы.ВладелецЭЦП  = Форма.ТекущийПользователь;

	ГосОрганы.Вставить("АдресПолучателейФНС",  ПоместитьВоВременноеХранилище(ПолучателиФНС, Новый УникальныйИдентификатор));
	ГосОрганы.Вставить("АдресПолучателейФСГС", ПоместитьВоВременноеХранилище(ПолучателиФСГС, Новый УникальныйИдентификатор));

	ГосОрганы = Новый ФиксированнаяСтруктура(ГосОрганы);
	Возврат ГосОрганы;
		
КонецФункции

Функция ВсеГосОрганыУчетнойЗаписиПоЗаявлению(Форма, ГосОрганы, Ссылка) Экспорт
	
	ТЧ = Ссылка.Получатели;
	
	ГосОрганы = Новый Структура(ГосОрганы);
	
	СтрокиСФНС     = ТЧ.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФНС));
	СтрокиСРосстат = ТЧ.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСГС));

	ГосОрганы.Вставить("АдресПолучателейФНС", ПоместитьВоВременноеХранилище(СтрокиСФНС, Новый УникальныйИдентификатор));
	ГосОрганы.Вставить("АдресПолучателейФСГС", ПоместитьВоВременноеХранилище(СтрокиСРосстат, Новый УникальныйИдентификатор));

	СтрокиСПФР = ТЧ.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ПФР));
	ГосОрганы.СдаватьВПФР = СтрокиСПФР.Количество() > 0;
	
	Если ГосОрганы.СдаватьВПФР Тогда
		ГосОрганы.КодПФР      = СтрокиСПФР[0].КодПолучателя;
		ГосОрганы.РегНомерПФР = Ссылка.РегНомерПФР;
		ГосОрганы.РегНомерСФР = Ссылка.РегНомерСФР;
	КонецЕсли;
	
	ГосОрганы.КодРегионаФСРАР = Ссылка.КодРегионаФСРАР;
	
	ГосОрганы = Новый ФиксированнаяСтруктура(ГосОрганы);
		
	Возврат ГосОрганы;
		
КонецФункции

Функция ПараметрыФормыНаправленийУчетнойЗаписи(Форма) Экспорт
	
	Результат = Новый Структура(СтруктураПараметровФормыНаправлений());
	ЗаполнитьЗначенияСвойств(Результат, Форма);
	Результат.Вставить("ВсеГосОрганыУчетнойЗаписи", ВсеГосОрганыУчетнойЗаписи(Форма));
	ДобавитьВПараметрыКодыПолучателей(Форма, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВПараметрыКодыПолучателей(Форма, ПараметрыФормы) Экспорт
	
	// ФНС
	Если ЕстьРеквизит(Форма, "ПолучателиФНС") Тогда
		Адрес = АдресТаблицы(Форма, "ПолучателиФНС");
		ПараметрыФормы.Вставить("АдресПолучателейФНС", Адрес);
	ИначеЕсли ПараметрыФормы.Свойство("ВсеГосОрганыУчетнойЗаписи") Тогда
		ПараметрыФормы.Вставить("АдресПолучателейФНС", ПараметрыФормы.ВсеГосОрганыУчетнойЗаписи.АдресПолучателейФНС);
	КонецЕсли;
	
	// ФСГС
	Если ЕстьРеквизит(Форма, "ПолучателиФСГС") Тогда
		Адрес = АдресТаблицы(Форма, "ПолучателиФСГС");
		ПараметрыФормы.Вставить("АдресПолучателейФСГС", Адрес);
	ИначеЕсли ПараметрыФормы.Свойство("ВсеГосОрганыУчетнойЗаписи") Тогда
		ПараметрыФормы.Вставить("АдресПолучателейФСГС", ПараметрыФормы.ВсеГосОрганыУчетнойЗаписи.АдресПолучателейФСГС);
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьВыборКодовПолучателей(Форма, ПараметрыФормы) Экспорт
	
	ТаблицаПолучателейФНС = ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресПолучателейФНС);
	Форма.ЗначениеВРеквизитФормы(ТаблицаПолучателейФНС, "ПолучателиФНС");
		
	ТаблицаПолучателейФСГС = ПолучитьИзВременногоХранилища(ПараметрыФормы.АдресПолучателейФСГС);
	Форма.ЗначениеВРеквизитФормы(ТаблицаПолучателейФСГС, "ПолучателиФСГС");
	
КонецПроцедуры

Функция АдресТаблицы(Форма, Имя) Экспорт
	
	Таблица = Форма.РеквизитФормыВЗначение(Имя);
	Возврат ПоместитьВоВременноеХранилище(Таблица, Новый УникальныйИдентификатор);

КонецФункции

Процедура ТаблицаИзАдреса(Форма, АдресТаблицы, ИмяТаблицы) Экспорт
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);
	
	Если ИмяТаблицы = "ТаблицаПользователей" Тогда
		СкопироватьТаблицуПользователей(Форма, Таблица, Форма[ИмяТаблицы]);
	Иначе
		Форма.ЗначениеВРеквизитФормы(Таблица, ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоддерживаетсяМультирежим() Экспорт
	
	ЭтоИнтеграцияСБанком = ОбработкаЗаявленийАбонента.ЭтоИнтеграцияСБанком();
	Поддерживается = НЕ ЭтоИнтеграцияСБанком;
		
	Возврат Поддерживается;
	
КонецФункции

Функция ПользователиУчетнойЗаписи(УчетнаяЗапись = Неопределено, ЭтоНовый = Ложь) Экспорт
	
	СписокПользователей = Новый СписокЗначений;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫБОР
	                      |		КОГДА Настройки.УчетнаяЗапись ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Пометка,
	                      |	Пользователи.Ссылка КАК Пользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |			ПользователиУчетныхЗаписейДокументооборота.Пользователь КАК Пользователь
	                      |		ИЗ
	                      |			РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |		ГДЕ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись) КАК Настройки
	                      |		ПО Пользователи.Ссылка = Настройки.Пользователь
	                      |ГДЕ
	                      |	НЕ Пользователи.ПометкаУдаления
	                      |	И НЕ Пользователи.Недействителен
	                      |	И НЕ Пользователи.Служебный
	                      |	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Пользователи.Наименование");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.Пользователь = ТекущийПользователь Тогда 
			Картинка = БиблиотекаКартинок.Пользователь;
		Иначе 
			Картинка = Неопределено;
		КонецЕсли;
		СписокПользователей.Добавить(Выборка.Пользователь, Выборка.Пользователь.Наименование, Выборка.Пометка, Картинка);
	КонецЦикла;
	
	Если ЭтоНовый Тогда 
		СтрокаПользователь = СписокПользователей.НайтиПоЗначению(ТекущийПользователь);
		Если СтрокаПользователь <> Неопределено Тогда 
			СтрокаПользователь.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокПользователей;
	
КонецФункции

Процедура ИнициализироватьПользователей(
		Форма, 
		Таблица, 
		УчетнаяЗапись = Неопределено, 
		ЗаполнятьТолькоИзРегистра = Ложь, 
		ОткрытоИзЗаявления = Истина) Экспорт
	
	СозданоКопированием = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗаявлениеСозданоКопированием") 
		И Форма.ЗаявлениеСозданоКопированием;
		
	Если СозданоКопированием Тогда
		Возврат;
	КонецЕсли;
	
	Таблица.Очистить();
	
	СписокСвойств  = РезультатВыбораНаправлений();
	СвойстваУчетки = Новый Структура(СписокСвойств);
	ЗаполнитьЗначенияСвойств(СвойстваУчетки, Форма);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) И Форма.ЭтоМультиРежим И ЭтоМультиРежим(УчетнаяЗапись) Тогда
		
		ПользователиУчетки  = ПраваПользователейУчетнойЗаписи(УчетнаяЗапись);
		Для каждого Права Из ПользователиУчетки Цикл
			
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Права);
			
			// Заполняем из учетки, если есть доступ ко всем органам
			Если НоваяСтрока.ЕстьДоступКоВсемГосОрганам	И НЕ ЗаполнятьТолькоИзРегистра Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваУчетки);
			КонецЕсли;
			
			НоваяСтрока.Пометка = Истина;
			
			ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, НоваяСтрока);
			
		КонецЦикла;
		
		Если ОткрытоИзЗаявления Тогда
			ДобавитьНовыхПользователей(Форма);
			ЗаполнитьДанныеВладельцаДляМультирежима(Форма);
		КонецЕсли;
		
	Иначе
		
		ЭтоНовый = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма);
		Спиcок = ПользователиУчетнойЗаписи(УчетнаяЗапись, ЭтоНовый);
		Для каждого Строка Из Спиcок Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Пользователь = Строка.Значение;
			НоваяСтрока.Пометка = Строка.Пометка;
			
			Если МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма) И НоваяСтрока.Пометка Тогда
				ИнициализироватьПользователяМультиРежимаПоСтроке(Форма, НоваяСтрока);
			КонецЕсли;
			
			ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, НоваяСтрока);
		КонецЦикла;
		
		ПереопределитьПометкиПользователям(Форма, Таблица);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьМультирежим(Форма) Экспорт
	
	Если Форма.ЗаявлениеСозданоКопированием Тогда
		Форма.ЭтоМультиРежим = Форма.Реквизит.ЭтоМультиРежим;
		Форма.ЭтоМультиРежимИсходный = Форма.Реквизит.ЭтоМультиРежимИсходный;
	Иначе
		
		УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
		ЭтоМультиРежимИзУчетки = ЗначениеЗаполнено(УчетнаяЗапись) И ЭтоМультиРежим(УчетнаяЗапись);
	
		Форма.ЭтоМультиРежимИсходный = ЭтоМультиРежимИзУчетки;
		Форма.ЭтоМультиРежим = ЭтоМультиРежимИзУчетки;
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяЗаписьОрганизацииПоФорме(Форма) Экспорт
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаЗаявления(Форма) Тогда
		ЭтоПодключениеМультирежима = МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
		Если ЭтоПодключениеМультирежима Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
			Возврат УчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Форма.Организация);
	
	ЭтоПервичноеЗаявление = 
		ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Форма)
		ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТипЗаявления") 
		И Форма.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;

	Если ЭтоПервичноеЗаявление Тогда
	
		Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Форма.ТекущийПользователь);
		УжеПодключен = Права.ЕстьДанные И НЕ Права.ЭтоПотенциальныйПользователь;
		
		Если ЭтоМультиРежим(УчетнаяЗапись) И УжеПодключен ИЛИ НЕ ЭтоМультиРежим(УчетнаяЗапись) Тогда
			УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

Процедура ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, Строка) Экспорт
	
	ОткрытоИзЗаявления = МультирежимКлиентСервер.ОткрытоИзЗаявления(Форма);
	
	Если ОткрытоИзЗаявления Тогда
		
		Строка.ГосОрганыИсходные = МультирежимКлиентСервер.ГосОрганыДляСравнения(Строка);
		
	КонецЕсли;
	
	Строка.ПометкаИсходная = Строка.Пометка;
	Строка.ЭтоШифровальщикИсходный = Строка.ЭтоШифровальщик;
	
	Строка.ПолучатьУведомленияОбИзмененииПравИсходный = Строка.ПолучатьУведомленияОбИзмененииПрав;
	Строка.ЭлектроннаяПочтаИсходная = Строка.ЭлектроннаяПочта;
	
	Строка.РольПредставлениеИсходный = МультирежимКлиентСервер.РольПользователя(Строка);

КонецПроцедуры

Функция ОформлениеНаправленийПользователя(Форма, Строка) Экспорт
	
	ПараметрыФормы = ПараметрыОформленияНаправлений(Форма, Строка);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Форма.ВсеГосОрганыУчетнойЗаписи, СтруктураОбщихПараметровФормыНаправлений());
		
	ПараметрыФормы.ЭтоГосОрганыУчетнойЗаписи = Ложь;
	ПараметрыФормы.ТипЗаявления = ОбработкаЗаявленийАбонентаКлиентСервер.ТипЗаявления(Форма);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.ОформлениеНаправлений(ПараметрыФормы);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОформленияНаправлений(Форма, Строка) Экспорт
	
	ПараметрыФормы = Новый Структура(СтруктураПараметровФормыНаправлений());
	
	Если Строка = Неопределено Тогда
		Возврат ПараметрыФормы;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Форма);
	// Заполнение по строке должно идти после заполения из формы,
	// т.е. у учетки может быть подключен орган, а у пользователя нет
	// Поэтому в конечном итоге должны остаться настройки пользователя
	// Проверять под пользователем, у которого не все органы учетки
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Строка);
	
	Булево = Новый ОписаниеТипов("Булево");
	ПараметрыФормы.ЭтоМультиРежим = Булево.ПривестиЗначение(Форма.ЭтоМультиРежим);
	ПараметрыФормы.ТипЗаявления   = ОбработкаЗаявленийАбонентаКлиентСервер.ТипЗаявления(Форма);
		
	Если ЕстьРеквизит(Форма, "ПолучателиФНС") Тогда
		ПараметрыФормы.Вставить("ПолучателиФНС", Форма.ПолучателиФНС);
	ИначеЕсли ЕстьРеквизит(Форма, "ВсеГосОрганыУчетнойЗаписи") Тогда
		Таблица = ПолучитьИзВременногоХранилища(Форма.ВсеГосОрганыУчетнойЗаписи.АдресПолучателейФНС);
		ПараметрыФормы.Вставить("ПолучателиФНС", Таблица);
	КонецЕсли;
	
	Если ЕстьРеквизит(Форма, "ПолучателиФСГС") Тогда
		ПараметрыФормы.Вставить("ПолучателиФСГС", Форма.ПолучателиФСГС);
	ИначеЕсли ЕстьРеквизит(Форма, "ВсеГосОрганыУчетнойЗаписи") Тогда
		Таблица = ПолучитьИзВременногоХранилища(Форма.ВсеГосОрганыУчетнойЗаписи.АдресПолучателейФСГС);
		ПараметрыФормы.Вставить("ПолучателиФСГС", Таблица);
	КонецЕсли;
		
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ЕстьРеквизит(Объект, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита);
	
КонецФункции

Функция ПраваПользователейУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
		|ГДЕ
		|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция ПраваНаУчетнуюЗапись(УчетнаяЗапись, Знач Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	*
		|ИЗ
		|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
		|ГДЕ
		|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись";
	
	Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Условие = " И ПользователиУчетныхЗаписейДокументооборота.ФизическоеЛицо = &Ссылка";
	Иначе
		Условие = " И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Ссылка";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + Условие;
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() > 0 Тогда
		Права = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
		Права.Вставить("ЕстьДанные", Истина);
	Иначе
		Права = ШаблонПравПользователя();
	КонецЕсли;
	Права.Вставить("ЭтоМультиРежим", ЭтоМультиРежим(УчетнаяЗапись));
	
	Возврат Права;
	
КонецФункции

Функция ДатьПраваВыполняющемуАвтонастройку(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		Если УчетнаяЗапись.Модифицированность() Тогда
			УчетнаяЗапись.Записать();
		КонецЕсли;
		УчетнаяЗаписьСсылка = УчетнаяЗапись.Ссылка;
	Иначе
		УчетнаяЗаписьСсылка = УчетнаяЗапись;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЕстьПрава = ПраваНаУчетнуюЗапись(УчетнаяЗаписьСсылка, ТекущийПользователь).ЕстьДанные;
	
	Если НЕ ЕстьПрава Тогда
		
		МенеджерЗаписи = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗаписьСсылка;
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
			
КонецФункции

Процедура ПереопределитьПометкиПользователям(Форма, Таблица)
	
	СписокПользователей = Новый СписокЗначений;
	Для каждого Строка Из Таблица Цикл
		СписокПользователей.Добавить(Строка.Пользователь,,Строка.Пометка);
	КонецЦикла;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьПользователей1СОтчетности(
		СписокПользователей, 
		Форма.Организация);
		
	Для каждого Строка Из СписокПользователей Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", Строка.Значение);
		
		НайденныеПользователи = Таблица.НайтиСтроки(Отбор);
			
		Для каждого НайденныйПользователь Из НайденныеПользователи Цикл
			НайденныйПользователь.Пометка = Строка.Пометка;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаголовокГосОрганов(Форма) Экспорт
	
	Если МультирежимКлиентСервер.ЭтоГосОрганыУчетнойЗаписи(Форма, Ложь) Тогда
		Заголовок = НСтр("ru = 'Гос. органы учетной записи:';
						|en = 'Гос. органы учетной записи:'");
	Иначе
		Заголовок = НСтр("ru = 'Гос. органы:';
						|en = 'Гос. органы:'");
	КонецЕсли;
	
	Возврат Заголовок;

КонецФункции

Функция ЗаголовокПользователей(Форма) Экспорт
	
	Если МультирежимКлиентСервер.ПоказыватьЛичныеНастройки(Форма) Тогда
		Заголовок = НСтр("ru = 'Права доступа:';
						|en = 'Права доступа:'");
	Иначе
		Заголовок = НСтр("ru = 'Пользователи:';
						|en = 'Пользователи:'");
	КонецЕсли;
	
	Возврат Заголовок;

КонецФункции

Функция ОформлениеПользователей(Форма) Экспорт
	
	ЭтоЛичныеНастройки = МультирежимКлиентСервер.ПоказыватьЛичныеНастройки(Форма);
	
	Если ЭтоЛичныеНастройки Тогда
		Возврат ОформлениеПравПользователя(Форма);
	Иначе
		Возврат ОформлениеПравПользователей(Форма);
	КонецЕсли;
		
КонецФункции

Функция ШаблонНастроекОформленияПрав() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Видимость",  Истина);
	Результат.Вставить("ЦветТекста", Новый Цвет());
	Результат.Вставить("Заголовок",  "");
	Результат.Вставить("ТекстОшибки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОформлениеПравПользователя(Форма, ЭтоВызовИзГлавногоОкна = Ложь) Экспорт
	
	Роль = МультирежимКлиентСервер.РольПользователяПоФорме(Форма);
	
	Результат = ШаблонНастроекОформленияПрав();
	Результат.Вставить("Заголовок",  Роль);
	
	Если Форма.ЭтоМультиРежим Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
			Результат.Видимость = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		ЭтоПолныйИнтерфейс = МультирежимКлиентСервер.ПоказыватьПолныйИнтерфейсПравПользователя(Форма, ЭтоВызовИзГлавногоОкна);
		
		Если ЭтоПолныйИнтерфейс Тогда
			
			НастройкиКорректны = Истина;
			ПроверятьШифровальщиков = НЕ Форма.ВладелецЭЦПРасширилСебеПрава;
			РезультатПроверки  = ПроверитьПользователя(Форма, Форма.ВладелецЭЦП, ПроверятьШифровальщиков, НастройкиКорректны, Ложь);
			Если НЕ НастройкиКорректны Тогда
				КрасныйЦвет = Новый Цвет(178,34, 34);
				Результат.ЦветТекста = КрасныйЦвет;
				Результат.ТекстОшибки = ОбработкаЗаявленийАбонентаКлиентСервер.ТекстОшибкиРезультатаПроверки(РезультатПроверки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОформлениеПравПользователей(Форма) Экспорт
	
	Результат = ШаблонНастроекОформленияПрав();
	Результат.Вставить("Заголовок",  НСтр("ru = 'Выбрать';
											|en = 'Выбрать'"));
	
	КрасныйЦвет = Новый Цвет(178,34, 34);
	
	Если Форма.ТаблицаПользователей.Количество() = 0 Тогда
		Результат.Видимость = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	ОбщееКоличество = Форма.ТаблицаПользователей.Количество();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пометка", Истина);
	
	ПомеченныеПользователи = Форма.ТаблицаПользователей.Выгрузить(Отбор, "Пользователь").ВыгрузитьКолонку("Пользователь");
	КоличествоВыбранных = ПомеченныеПользователи.Количество();
	
	Представление = СтрСоединить(ПомеченныеПользователи, ", ");
	
	ВыбранТекущий = ПомеченныеПользователи.Найти(Форма.ТекущийПользователь) <> Неопределено;
	
	Если Форма.ЭтоМультиРежим Тогда
		
		Шаблон = ";%1 пользователь;;%1 пользователя;%1 пользователей;%1 пользователей";
		ПредставлениеКоличества = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, КоличествоВыбранных);
		Представление = СтрШаблон(НСтр("ru = 'Многопользовательский режим. %1';
										|en = 'Многопользовательский режим. %1'"), ПредставлениеКоличества);
		
		ОткрытоИзЗаявления = МультирежимКлиентСервер.ОткрытоИзЗаявления(Форма);
		
		Если ОткрытоИзЗаявления Тогда
			НастройкиКорректны = Истина;
			РезультатПроверки  = ПроверитьПользователей(Форма, НастройкиКорректны, Ложь);
			Если НЕ НастройкиКорректны Тогда
				Результат.ЦветТекста = КрасныйЦвет; // красный
				Результат.ТекстОшибки = ОбработкаЗаявленийАбонентаКлиентСервер.ТекстОшибкиРезультатаПроверки(РезультатПроверки);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Если КоличествоВыбранных = ОбщееКоличество Тогда
			Представление  = НСтр("ru = 'Все пользователи';
									|en = 'Все пользователи'");
		ИначеЕсли ВыбранТекущий Тогда
			
			Если КоличествоВыбранных = 1 Тогда
				// если выбран только 1 из многих, то писать Только Вы
				Представление  = НСтр("ru = 'Только Вы';
										|en = 'Только Вы'");
			ИначеЕсли КоличествоВыбранных = 2 Тогда
				// если 2 - Вы и Иванов
				Представление  = НСтр("ru = 'Вы и ';
										|en = 'Вы и '") + Строка(ПомеченныеПользователи[1]);
			ИначеЕсли КоличествоВыбранных > 2 Тогда
				// если 3 и больше - Вы и еще N
				Представление  = НСтр("ru = 'Вы и еще ';
										|en = 'Вы и еще '") + Строка(КоличествоВыбранных - 1);
			КонецЕсли;
		
		ИначеЕсли КоличествоВыбранных = 0 Тогда
			// Никто не выбран
			Представление  = "Выбрать";
		ИначеЕсли КоличествоВыбранных = 1 ИЛИ КоличествоВыбранных = 2 Тогда 
			// Иванов, 
			// Иванов, Петров
			// Ничего не делаем, оставляем как есть
		Иначе
			// если 3 и больше - Петров и еще N
			Представление  = Строка(ПомеченныеПользователи[1]) + НСтр("ru = ' и еще ';
																		|en = ' и еще '") + Строка(КоличествоВыбранных - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоВыбранных = 0 Тогда
		Результат.ЦветТекста = КрасныйЦвет; // красный
	КонецЕсли;
	
	Результат.Заголовок = Представление;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьТаблицуПользователей(Форма, Источник, Приемник, ЗаполнятьИсходные = Ложь) Экспорт
	
	Приемник.Очистить();
	Для каждого СтрокаИсточник Из Источник Цикл
		
		Если ЗначениеЗаполнено(СтрокаИсточник.Пользователь) Тогда
			
			НоваяСтрока = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
				
			Если ЗаполнятьИсходные Тогда
				ЗаполнитьИсходныеЗначенияТаблицыПользователей(Форма, НоваяСтрока);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ВсеПользователи() Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Пользователи.Ссылка КАК Пользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	НЕ Пользователи.ПометкаУдаления
	                      |	И НЕ Пользователи.Недействителен
	                      |	И НЕ Пользователи.Служебный
	                      |	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Пользователи.Наименование");
	
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Все = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат Все;
	
КонецФункции

Процедура ДобавитьНовыхПользователей(Форма) Экспорт
	
	ВсеПользователи = ВсеПользователи();
	Для каждого Пользователь Из ВсеПользователи Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", Пользователь);

		НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
			
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ДобавитьНовогоПользователя(Форма, Пользователь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовогоПользователя(Форма, Пользователь)
	
	НоваяСтрока = Форма.ТаблицаПользователей.Добавить();
	НоваяСтрока.Пользователь = Пользователь;
	
	Если Форма.ЭтоМультиРежим Тогда
		ЗаполнитьПользователяИФизЛицоСтроки(НоваяСтрока, Пользователь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПользователяИзБазы(Форма, Строка) Экспорт
	
	// Из справочника пользователей
	Строка.ЭлектроннаяПочта =  ЭлектроннаяПочтаПользователя(Строка);
	Строка.ПолучатьУведомленияОбИзмененииПрав = ЗначениеЗаполнено(Строка.ЭлектроннаяПочта);
	
	// Из физ лица
	Строка.СНИЛС = МультирежимВызовСервера.СНИЛСФизЛица(Строка.ФизическоеЛицо, Форма.Организация);
	
КонецПроцедуры

Функция ЭлектроннаяПочтаПользователя(Строка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектроннаяПочта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Строка.Пользователь,
		Справочники.ВидыКонтактнойИнформации.EmailПользователя,
		ТекущаяДатаСеанса());
				
	Если НЕ ЗначениеЗаполнено(ЭлектроннаяПочта) 
		И ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
		
		ЭлектроннаяПочта = ОбработкаЗаявленийАбонента.EMailФизическиеЛица(
			Строка.ФизическоеЛицо);
		
	КонецЕсли;
	
	Возврат ЭлектроннаяПочта;
	
КонецФункции

Функция ФизЛицоПоПользователюИзСправочникаПользователи(Пользователь = Неопределено, ВызыватьИсключение = Ложь, ЭтоВладелецЭЦП = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка
	|	И НЕ Пользователи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФизЛицо = Выборка.ФизическоеЛицо;
	Иначе
		ФизЛицо = Неопределено;
		
		Если ВызыватьИсключение Тогда
			
			МультирежимКлиентСервер.ВызватьИсключениеЕслиНеУстановленоСоответствиеПользователяИФизЛица(
				Пользователь, 
				ЭтоВладелецЭЦП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ПользовательПоФизЛицуИзСправочникаПользователи(ФизическоеЛицо, ВызыватьИсключение = Ложь, ЭтоВладелецЭЦП = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
	|	И НЕ Пользователи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Пользователь = Выборка.Пользователь;
	Иначе
		Пользователь = Неопределено;
		
		Если ВызыватьИсключение Тогда
			
			МультирежимКлиентСервер.ВызватьИсключениеЕслиНеУстановленоСоответствиеПользователяИФизЛица(
				ФизическоеЛицо, 
				ЭтоВладелецЭЦП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция СНИЛСПервогоВладельцаЭП(УчетнаяЗапись) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ДопРеквизиты = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	Если ДопРеквизиты.Свойство("ВладелецЭЦПСНИЛС") Тогда
		СНИЛС = ДопРеквизиты.ВладелецЭЦПСНИЛС;
	Иначе
		СНИЛС = "";
	КонецЕсли;
	
	Возврат СНИЛС;

КонецФункции 

Функция ПараметрыФормыНаправленийПользователя(Форма, ТекущаяСтрока) Экспорт
	
	ПараметрыФормы = СтруктураПараметровФормыНаправлений();
	ВсеГосОрганы   = ВсеГосОрганыУчетнойЗаписи(Форма);
	
	Результат = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(Результат, Форма);
	ЗаполнитьЗначенияСвойств(Результат, ВсеГосОрганы);
	ЗаполнитьЗначенияСвойств(Результат, ТекущаяСтрока);

	Результат.ЭтоМультиРежим = Форма.ЭтоМультиРежим;
	Результат.ВладелецЭЦПЭтоАдмин = Форма.ВладелецЭЦПЭтоАдмин;
	Результат.Вставить("ВсеГосОрганыУчетнойЗаписи", ВсеГосОрганы);
	ДобавитьВПараметрыКодыПолучателей(Форма, Результат);
	
	Результат.Вставить("ЭтоГосОрганыУчетнойЗаписи", Ложь);
	Результат.Вставить("ТипЗаявления", ОбработкаЗаявленийАбонентаКлиентСервер.ТипЗаявления(Форма));
	Результат.Вставить("АдресТаблицы", АдресТаблицы(Форма, "ТаблицаПользователей"));
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОткрытияФормыНаправленийИзГлавногоОкна(Форма) Экспорт
	
	ЭтоГосОрганыУчетнойЗаписи = МультирежимКлиентСервер.ЭтоГосОрганыУчетнойЗаписи(Форма);
	Если ЭтоГосОрганыУчетнойЗаписи Тогда
		
		Результат = ПараметрыФормыНаправленийУчетнойЗаписи(Форма);
				
	Иначе
	
		ТекущаяСтрока = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ТекущийПользователь);
		Результат = ПараметрыФормыНаправленийПользователя(Форма, ТекущаяСтрока);
		
	КонецЕсли;
	
	Результат.Вставить("ЭтоГосОрганыУчетнойЗаписи", ЭтоГосОрганыУчетнойЗаписи);
	Результат.Вставить("АдресТаблицы", АдресТаблицы(Форма, "ТаблицаПользователей"));
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьВыбранныеНаправленияИзГлавногоОкна(Форма, Результат) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ Результат.Модифицированность Тогда
		Возврат;
	КонецЕсли;	
	
	СписокСвойств1 = РезультатВыбораНаправлений();
	
	ЗаполнитьЗначенияСвойств(Форма, Результат.ВсеГосОрганыУчетнойЗаписи, СписокСвойств1);
	ОбработатьВыборКодовПолучателей(Форма, Результат.ВсеГосОрганыУчетнойЗаписи);
	
	СписокСвойств2 = 
		"ТарифОператораЭДО,
		|ЕстьДоступКоВсемГосОрганам,
		|ВладелецЭЦПЭтоАдмин,
		|ВладелецЭЦПРасширилСебеПрава";
	
	ЗаполнитьЗначенияСвойств(Форма, Результат, СписокСвойств2);
	
	Форма.Модифицированность = Форма.Модифицированность ИЛИ Результат.Модифицированность;
	
	ТаблицаИзАдреса(Форма, Результат.АдресТаблицы, "ТаблицаПользователей");

	Форма.УправлениеФормой();
	
КонецПроцедуры

Функция ПроверитьНаправленияПользователя(Форма, Строка, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	// Направления
	ПараметрыПроверки = ПараметрыОформленияНаправлений(Форма, Строка);
	
	ВсеГосОрганыУчетнойЗаписи = ВсеГосОрганыУчетнойЗаписи(Форма);
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыПроверки, 
		ВсеГосОрганыУчетнойЗаписи, 
		СтруктураОбщихПараметровФормыНаправлений());
	
	ПараметрыПроверки.ЭтоГосОрганыУчетнойЗаписи = Ложь;
	ПараметрыПроверки.ТипЗаявления = ОбработкаЗаявленийАбонентаКлиентСервер.ТипЗаявления(Форма);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	МассивРезультов = КонтекстЭДОСервер.НаправленияУказаныКорректно(ПараметрыПроверки, МастерДалее, ВыводитьСообщения);
	
	Возврат МассивРезультов;
	
КонецФункции

Функция ПроверитьПользователя(
		Форма, 
		ФизическоеЛицо, 
		ПроверятьШифровальщиков = Истина, 
		МастерДалее = Истина, 
		ВыводитьСообщения = Истина, 
		ДописатьПользователяВОшибку = Ложь) Экспорт
		
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, ФизическоеЛицо);
	Представление = МультирежимКлиентСервер.ПредставлениеПользователя(Строка);
	
	// Направления
	МассивРезультов = ПроверитьНаправленияПользователя(Форма, Строка, МастерДалее, Ложь);
	
	// Почта
	Если Строка.ПолучатьУведомленияОбИзмененииПрав Тогда 
		
		РезультатПроверки = ПроверитьЭлектроннуюПочту(Строка.ЭлектроннаяПочта, Неопределено, МастерДалее, Ложь);
		МассивРезультов.Добавить(РезультатПроверки);
		
	КонецЕсли;
	
	// ФизическоеЛицо
	РезультатПроверки = ОбработкаЗаявленийАбонентаКлиентСервер.ПроверитьФизЛицо(Форма, Строка, МастерДалее, Ложь);
	МассивРезультов.Добавить(РезультатПроверки);
	
	// Шифровальщики
	Если ПроверятьШифровальщиков Тогда
		
		РезультатПроверки = МультирежимКлиентСервер.ПроверитьШифровальщиковФНС(
			Форма,
			МастерДалее,
			Ложь);
			
		Если РезультатПроверки.ЕстьОшибка Тогда
			МассивРезультов.Добавить(РезультатПроверки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПодключениеМультирежимаВторымПользователем(Форма)
		И ЭтоПервыйПодключенный(Форма, Строка)
		И НЕ Строка.ЭтоАдмин Тогда
	
		ТекстОшибки = НСтр("ru = 'Пользователь %1 должен иметь права администратора, потому что он является единственным подключенным к 1С-Отчетности пользователем. Вы можете сменить ему права только после подключения второго администратор.';
							|en = 'Пользователь %1 должен иметь права администратора, потому что он является единственным подключенным к 1С-Отчетности пользователем. Вы можете сменить ему права только после подключения второго администратор.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка.Пользователь);
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки 	= ТекстОшибки;
		
		МассивРезультов.Добавить(РезультатПроверки);
			
	КонецЕсли;
	
	// Дубли
	Отбор = Новый Структура();
	Отбор.Вставить("Пометка", Истина);
	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	
	НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
		
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Строки = Форма.ТаблицаПользователей.Выгрузить().Скопировать(Отбор);
		НайденныеПользователи = Строки.ВыгрузитьКолонку("Пользователь");
		НайденныеПользователи = СтрСоединить(НайденныеПользователи, ", ");
		
		ТекстОшибки = НСтр("ru = 'Физ. лицо %1 указано более чем у одного пользователя (%2). Заполните для данного пользователя (%3) другое физ. лицо.';
							|en = 'Физ. лицо %1 указано более чем у одного пользователя (%2). Заполните для данного пользователя (%3) другое физ. лицо.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ФизическоеЛицо, НайденныеПользователи, Строка.Пользователь);
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки 	= ТекстОшибки;
		
		МассивРезультов.Добавить(РезультатПроверки);
		
	КонецЕсли;	
	
	Для каждого РезультатПроверки Из МассивРезультов Цикл
		
		Если ДописатьПользователяВОшибку И ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
			
			Шаблон = НСтр("ru = '%1 у пользователя %2';
							|en = '%1 у пользователя %2'");
			РезультатПроверки.ТекстОшибки = СтрШаблон(Шаблон, РезультатПроверки.ТекстОшибки, Представление);
			
		КонецЕсли;
		
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат МассивРезультов;

КонецФункции

Функция ПроверитьЭлектроннуюПочту(ЭлектроннаяПочта, ТипЗаявления, МастерДалее = Истина, ВыводитьСообщения = Истина, Поле = "ЭлектроннаяПочта") Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = Поле;
	
	// Для избежания ошибки "Ошибка формата. Электронный адрес содержит недопустимое значение"
	ЭлектроннаяПочта = СокрЛП(ЭлектроннаяПочта);
	ПочтовыйАдрес = СокрЛП(ЭлектроннаяПочта);
	Если СтрДлина(ПочтовыйАдрес) = 0 Тогда
		
		Если ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное") Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните поле ""Электронная почта""';
												|en = 'Заполните поле ""Электронная почта""'");
		Иначе
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните электронную почту';
												|en = 'Заполните электронную почту'");
		КонецЕсли;
			
	ИначеЕсли СтрДлина(ПочтовыйАдрес) > 0 Тогда
		
		Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ПочтовыйАдрес) Тогда
			
			Если НЕ СтрНайти(ПочтовыйАдрес, "@") Тогда
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указана электронная почта. Отсутствует символ @';
													|en = 'Некорректно указана электронная почта. Отсутствует символ @'");
			Иначе 
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'Электронная почта содержит некорректные сочетания символов';
													|en = 'Электронная почта содержит некорректные сочетания символов'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки; 
	
КонецФункции

Функция ПроверитьПользователей(
		Форма, 
		МастерДалее = Истина, 
		ВыводитьСообщения = Истина, 
		ПроверятьШифровальщиков = Истина, 
		ПроверятьАдминов = Истина) Экспорт
	
	МассивРезультов = Новый Массив;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пометка", Истина);
	
	ВыбранХотяБыОдинПользователь = Форма.ТаблицаПользователей.НайтиСтроки(Отбор).Количество() > 0;
	
	Если Форма.ТаблицаПользователей.Количество() > 0 И НЕ ВыбранХотяБыОдинПользователь Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки 	= НСтр("ru = 'Выберите хотя бы одного пользователя';
												|en = 'Выберите хотя бы одного пользователя'");
		РезультатПроверки.Реквизит 		= "УказательПользователи";
		
		МассивРезультов.Добавить(РезультатПроверки);
		
	КонецЕсли;
		
	Если Форма.ЭтоМультиРежим Тогда
		
		РезультатПроверки = МультирежимКлиентСервер.ВладелецЭЦПУказанКорректно(Форма, МастерДалее, Ложь);
		Если РезультатПроверки.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивРезультов, 
				РезультатПроверки);
		КонецЕсли;
		
		Для каждого Строка Из Форма.ТаблицаПользователей Цикл
			
			Если Строка.Пометка Тогда
				
				РезультатПроверки = ПроверитьПользователя(
					Форма,
					Строка.Пользователь, 
					Ложь,
					МастерДалее,
					Ложь,
					Истина);
					
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					МассивРезультов, 
					РезультатПроверки);
					
			КонецЕсли;
		
		КонецЦикла;
		
		Если ПроверятьШифровальщиков Тогда
			РезультатПроверки = МультирежимКлиентСервер.ПроверитьШифровальщиковФНС(
				Форма,
				МастерДалее,
				Ложь,
				,
				"ТаблицаПользователейПолучательФНС");
				
			Если РезультатПроверки.ЕстьОшибка Тогда
				МассивРезультов.Добавить(РезультатПроверки);
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверятьАдминов Тогда
			
			РезультатПроверки = ПроверитьАдминовУчетки(Форма, МастерДалее, Ложь);
			Если РезультатПроверки.ЕстьОшибка Тогда
				МассивРезультов.Добавить(РезультатПроверки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого РезультатПроверки Из МассивРезультов Цикл
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЦикла;
	
	Возврат МассивРезультов;
	
КонецФункции

Функция ПользовательПодключенК1СОтчетности(Организация, Пользователь = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоМультиРежимПоОрганизации(Организация) Тогда
		
		Если Пользователь = Неопределено Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Пользователь);
		Подключен = Права.ЕстьДанные И НЕ Права.ЭтоПотенциальныйПользователь;
			
	Иначе
		Подключен = Истина;
	КонецЕсли;
	
	Возврат Подключен;
		
КонецФункции

Функция ЭтоПодтвержденныйАдмин(Форма, Сотрудник) Экспорт
	
	Возврат ЗначениеПраваНаУчетнуюЗапись(Форма, Сотрудник, "ЭтоАдмин");
	
КонецФункции

Функция ЗначениеПраваНаУчетнуюЗапись(Форма, Сотрудник, ИмяСвойства) Экспорт
	
	ЭтоМультиРежим = 
		ЗначениеЗаполнено(Форма.УчетнаяЗапись) 
		И (Форма.ЭтоМультиРежим ИЛИ ЭтоМультиРежим(Форма.УчетнаяЗапись));
	
	Если ЭтоМультиРежим Тогда
		Права = ПраваНаУчетнуюЗапись(Форма.УчетнаяЗапись, Сотрудник);
	Иначе
		Права = ШаблонПравПользователя();
	КонецЕсли;
	
	Результат = Права[ИмяСвойства];
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонПравПользователя() Экспорт
	
	Регистр = Метаданные.РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота;
	Шаблон = ДокументооборотСКО.ШаблонЗаписиРегистра(Регистр);
	
	Шаблон.Вставить("ЕстьДанные", Ложь);
	
	Возврат Шаблон;
	
КонецФункции

Процедура ИзменитьОформлениеНаправленийВГлавномОкне(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);
	
	ЭтоГосОрганыУчетнойЗаписи = 
		МультирежимКлиентСервер.ЭтоГосОрганыУчетнойЗаписи(Форма)
		ИЛИ Форма.ТаблицаПользователей.Количество() = 0
		ИЛИ Строка = Неопределено;
	
	Если ЭтоГосОрганыУчетнойЗаписи Тогда
		ПараметрыФормы = ПараметрыОформленияНаправлений(Форма, Форма);
	Иначе
		ПараметрыФормы = ПараметрыОформленияНаправлений(Форма, Строка);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭтоГосОрганыУчетнойЗаписи", ЭтоГосОрганыУчетнойЗаписи);
	ПараметрыФормы.Вставить("ТаблицаПользователей", Форма.ТаблицаПользователей);
	ПараметрыФормы.Вставить("ЭтоВызовИзГлавногоОкна", Истина);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Оформление = КонтекстЭДОСервер.ОформлениеНаправлений(ПараметрыФормы);
	
	Элементы.УказатьНаправления.Заголовок  = Оформление.Заголовок;
	Элементы.УказатьНаправления.ЦветТекста = Оформление.ЦветТекста;
	
КонецПроцедуры

Процедура СкопироватьШифровальщиков(Форма, АдресТаблицы) Экспорт
	
	ТаблицаШифровальщиков = ПолучитьИзВременногоХранилища(АдресТаблицы);
	Для каждого СтрокаИсточник Из ТаблицаШифровальщиков Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", СтрокаИсточник.Пользователь);
		
		НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
			
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЭтоШифровальщик = СтрокаИсточник.ЭтоШифровальщик;
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыФормыШифровальщики(Форма) Экспорт
	
	ПараметрыФормы = 
		"ТекущийПользователь, 
		|ЗапретитьИзменение,
		|ВладелецЭЦПЭтоАдмин,
		|ВладелецЭЦПРасширилСебеПрава";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Форма, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("АдресТаблицы",  АдресТаблицы(Форма, "ТаблицаПользователей"));
	
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СтруктураПараметровФормыНаправлений(ДопПараметры = "") Экспорт
	
	Параметры = СтруктураИндивидуальныхПараметровФормыНаправлений() + "," + СтруктураОбщихПараметровФормыНаправлений();
	Если ДопПараметры <> "" Тогда
		Параметры = Параметры + "," + ДопПараметры;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция СтруктураИндивидуальныхПараметровФормыНаправлений() Экспорт
	
	ПараметрыФормы = 
		"СдаватьВФНС,
		|СдаватьВРосстат,
		|СдаватьВПФР,
		|СдаватьВФСС,
		|СдаватьВЦБ,
		|ПодатьЗаявкуНаСертификатДляФСРАР,
		|ПодатьЗаявкуНаПодключениеРПН,
		|ПодатьЗаявкуНаПодключениеФТС,
		|ВладелецЭЦПТип,
		|ВладелецЭЦПЭтоАдмин,
		|ВладелецЭЦПРасширилСебеПрава,
		|ЕстьДоступКоВсемГосОрганам,
		|ЭтоШифровальщик,
		|Пользователь";
		
	Возврат ПараметрыФормы;
		
КонецФункции
	
Функция СтруктураОбщихПараметровФормыНаправлений() Экспорт
	
	ПараметрыФормы = 
		"РегНомерПФР, 
		|РегНомерСФР,
		|КодПФР,
		|КодРегионаФСРАР,
		|КодПФР_БИП,
		|РегНомерПФР_БИП,
		|ИФНС_БИП,
		|Организация,
		|Спецоператор,
		|ДанныеОрганизации,
		|КодРегиона,
		|ЭтоЮридическоеЛицо,
		|АдресЮридическийЗначение,
		|ИПИспользуетТрудНаемныхРаботников,
		|ПризнакОбособленногоПодразделения,
		|ЗапретитьИзменение,
		|ПризнакПоддержкиПФР,
		|ПризнакПоддержкиРосстат,
		|ПризнакПоддержкиРПН,
		|ПризнакПоддержкиФНС,
		|ПризнакПоддержкиФСРАР,
		|ПризнакПоддержкиФСС,
		|ПризнакПоддержкиЦБ,
		|ПризнакПоддержкиФТС,
		|ЭтоМультиРежим,
		|ЭтоМультиРежимИсходный,
		|ЭтоГосОрганыУчетнойЗаписи,
		|ГлБухгалтер,
		|Руководитель,
		|ВладелецЭЦП,
		|ТарифОператораЭДО,
		|ТипЗаявления";
	
	Возврат ПараметрыФормы;
		
КонецФункции

Функция РезультатВыбораНаправлений() Экспорт
	
	Свойства = 
	"СдаватьВФНС,
	|СдаватьВРосстат,
	|СдаватьВЦБ,
	|СдаватьВПФР,
	|РегНомерПФР,
	|РегНомерСФР,
	|КодПФР,
	|СдаватьВФСС,
	|КодРегионаФСРАР,
	|ПодатьЗаявкуНаСертификатДляФСРАР,
	|ПодатьЗаявкуНаПодключениеРПН,
	|ПодатьЗаявкуНаПодключениеФТС";
	
	Возврат Свойства;
	
КонецФункции

Функция ШаблонПараметровФормыПравПользователя() Экспорт
	
	ПараметрыФормы = 
		"ВладелецЭЦПЭтоАдмин,
		|Организация,
		|ТекущийПользователь,
		|ЗапретитьИзменение,
		|ВладелецЭЦПРасширилСебеПрава,
		|ЭтоМультиРежим,
		|ЭтоМультиРежимИсходный,
		|ВладелецЭЦПСНИЛС,
		|УчетнаяЗапись,
		|ВладелецЭЦП";
	
	Возврат ПараметрыФормы;
	
КонецФункции

Функция ПараметрыФормыПравПользователя(Форма) Экспорт
	
	ПараметрыФормы = ШаблонПараметровФормыПравПользователя();
	
	Результат = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(Результат, Форма, ПараметрыФормы); 
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Результат.Вставить("АдресТаблицы",  АдресТаблицы(Форма, "ТаблицаПользователей"));
	Результат.Вставить("ВсеГосОрганыУчетнойЗаписи", ВсеГосОрганыУчетнойЗаписи(Форма));
	
	Возврат Результат;
	
КонецФункции

Функция ВладелецЭЦПТипПоФорме(Форма) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Строка  = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, ТекущийПользователь);
	
	Если Строка = Неопределено Тогда
		ВладелецЭЦП = ФизЛицоПоПользователюИзСправочникаПользователи(ТекущийПользователь,,Истина);
	Иначе
		ВладелецЭЦП = Строка.ФизическоеЛицо;
	КонецЕсли;
	
	Если ВладелецЭЦП = Неопределено Тогда
		ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
	Иначе
		ВладелецЭЦПТип = МультирежимКлиентСервер.ВладелецЭЦПТипПоФизЛицу(Форма, ВладелецЭЦП);
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ВладелецЭЦПТип", ВладелецЭЦПТип);
	Результат.Вставить("ВладелецЭЦП", ВладелецЭЦП);
	
	Возврат Результат;
		
КонецФункции

Функция ЭтоПодключениеПотенциальногоПользователя(Форма, Знач Сотрудник, Таблица = Неопределено) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) ИЛИ НЕ ЭтоМультиРежим(УчетнаяЗапись) ИЛИ НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Таблица = Неопределено ИЛИ Таблица.Количество() = 0 Тогда
		
		Права = ПраваНаУчетнуюЗапись(
			УчетнаяЗапись, 
			Сотрудник);
			
	Иначе
		
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Таблица, Сотрудник);
		
		Права = ШаблонПравПользователя();
		
		Если Строка <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Права, Строка);
			Права.Вставить("ЕстьДанные", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = 
		Права.ЕстьДанные 
		И Права.ЭтоПотенциальныйПользователь
		ИЛИ НЕ Права.ЕстьДанные;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПотенциальныйПользователь(Организация, Знач Сотрудник = Неопределено) Экспорт
	
	Если НЕ ЭтоМультиРежимПоОрганизации(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Сотрудник = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Сотрудник);
	
	Возврат 
		Права.ЕстьДанные 
		И Права.ЭтоПотенциальныйПользователь;
	
КонецФункции

Функция ПредставлениеИзменившихсяНастроекПользователей(Форма, ТаблицаПользователей, Изменений = Неопределено) Экспорт
	
	Если Изменений = Неопределено Тогда
		Изменений = ИзменившиесяНастройкиПользователей(Форма, ТаблицаПользователей);
	КонецЕсли;
	
	Если Изменений = 0 Тогда
		Возврат НСтр("ru = 'Не менялись';
					|en = 'Не менялись'");
	Иначе
		ШаблонВсего = ";Изменились настройки %1 пользователя;;Изменились настройки %1 пользователей;Изменились настройки %1 пользователей;Изменились настройки %1 пользователей";
		Возврат СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ШаблонВсего, Изменений);
	КонецЕсли;
	
КонецФункции

Функция ИзменившиесяНастройкиПользователей(Форма, ТаблицаПользователей) Экспорт
	
	Изменений = 0;
	Для каждого Строка Из ТаблицаПользователей Цикл
		ЕстьИзменение = ИзменилисьНастройкиПользователя(Форма, Строка);
			
		Если ЕстьИзменение Тогда
			Изменений = Изменений + 1;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Изменений;
	
КонецФункции

Функция ИзменилисьНастройкиПользователей(Форма, ТаблицаПользователей) Экспорт
	
	Изменений = ИзменившиесяНастройкиПользователей(Форма, ТаблицаПользователей);
	Возврат Изменений > 0;
	
КонецФункции

Функция ИзменилисьНастройкиПользователя(Форма, Строка, Заявление = Неопределено) Экспорт
	
	ЕстьИзменение =
		Строка.Пометка <> Строка.ПометкаИсходная
		ИЛИ МультирежимКлиентСервер.ИзмениласьРоль(Строка)
		ИЛИ ИзменилсяСоставГосОрганов(Форма, Строка, Заявление)
		ИЛИ Строка.ЭтоШифровальщик <> Строка.ЭтоШифровальщикИсходный
		ИЛИ Строка.ПолучатьУведомленияОбИзмененииПравИсходный <> Строка.ПолучатьУведомленияОбИзмененииПрав
		ИЛИ Строка.ЭлектроннаяПочтаИсходная <> Строка.ЭлектроннаяПочта;
	
	Возврат ЕстьИзменение;
	
КонецФункции

Функция ИзменилсяСоставГосОрганов(Форма, Строка, Заявление = Неопределено) Экспорт
	
	Изменился = МультирежимКлиентСервер.ГосОрганыДляСравнения(Строка) <> Строка.ГосОрганыИсходные;
	
	Возврат Изменился;
	
КонецФункции

Функция АдминыУчетки(УчетнаяЗапись, ТолькоПодключенные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПользователиУчетныхЗаписейДокументооборота.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
		|ГДЕ
		|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись
		|	И ПользователиУчетныхЗаписейДокументооборота.ЭтоАдмин
		|	И (&ТолькоПодключенные И НЕ ПользователиУчетныхЗаписейДокументооборота.ЭтоПотенциальныйПользователь ИЛИ НЕ &ТолькоПодключенные)";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТолькоПодключенные", ТолькоПодключенные);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьАдминовУчетки(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	ЭтоПодключениеМультирежима = МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
	
	ПропуститьПроверку = НЕ Форма.ВладелецЭЦПЭтоАдмин И НЕ ЭтоПодключениеМультирежима ИЛИ НЕ Форма.ЭтоМультиРежим;
	
	Если ПропуститьПроверку Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТаблицаПользователей = Форма.ТаблицаПользователей;
	
	Если ЭтоПодключениеМультирежима И НЕ Форма.ВладелецЭЦПЭтоАдмин И ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
		
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Форма.ВладелецЭЦП);

		Текст = НСтр("ru = 'Владелец эл. подписи %1 не является администратором учетной записи и не может отправить заявление на подключение многопользовательского режима.
                      |
                      |Назначьте пользователю %2 права администратора в списке пользователей, либо войдите в программу под администратором учетной записи и отправьте заявление.';
                      |en = 'Владелец эл. подписи %1 не является администратором учетной записи и не может отправить заявление на подключение многопользовательского режима.
                      |
                      |Назначьте пользователю %2 права администратора в списке пользователей, либо войдите в программу под администратором учетной записи и отправьте заявление.'");
		Имя = ИмяПользователяИБ(Строка.Пользователь);
		Текст = СтрШаблон(Текст, Форма.ВладелецЭЦП, Имя);
		РезультатПроверки.ТекстОшибки = Текст;
		
	Иначе
	
		Отбор = Новый Структура();
		Отбор.Вставить("ЭтоАдмин", Истина);
		Отбор.Вставить("Пометка", Истина);
		
		Если НЕ ЭтоПодключениеМультирежима Тогда
			Отбор.Вставить("ЭтоПотенциальныйПользователь", Ложь);
		КонецЕсли;
		
		Админы = ТаблицаПользователей.НайтиСтроки(Отбор);
				
		Если Админы.Количество() = 0 Тогда
			Если ЭтоПодключениеМультирежима Тогда
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'У учетной записи не добавлено ни одного администратора в списке пользователей. ';
													|en = 'У учетной записи не добавлено ни одного администратора в списке пользователей. '");
			Иначе
				РезультатПроверки.ТекстОшибки = НСтр("ru = 'У учетной записи не осталось ни одного подключенного к 1С-Отчетности администратора учетной записи. 
	                                                  |Для смены администратора необходимо предварительно добавить и подключить к 1С-Отчетности нового администратора.';
	                                                  |en = 'У учетной записи не осталось ни одного подключенного к 1С-Отчетности администратора учетной записи. 
	                                                  |Для смены администратора необходимо предварительно добавить и подключить к 1С-Отчетности нового администратора.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;

КонецФункции

Функция ШифровальщикиУчетки(УчетнаяЗапись, ВидКонтролирующегоОргана = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС
		ИЛИ ВидКонтролирующегоОргана = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПользователиУчетныхЗаписейДокументооборота.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
			|ГДЕ
			|	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись
			|	И ПользователиУчетныхЗаписейДокументооборота.ЭтоШифровальщик
			|	И НЕ ПользователиУчетныхЗаписейДокументооборота.ЭтоПотенциальныйПользователь");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаявлениеАбонентаСпецоператораСвязи.Ответственный КАК Ответственный
			|ИЗ
			|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
			|		ПО ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = ЗаявлениеАбонентаСпецоператораСвязи.УчетнаяЗапись
			|			И ПользователиУчетныхЗаписейДокументооборота.Пользователь = ЗаявлениеАбонентаСпецоператораСвязи.Ответственный
			|			И ПользователиУчетныхЗаписейДокументооборота.СдаватьВПФР = ИСТИНА
			|ГДЕ
			|	ЗаявлениеАбонентаСпецоператораСвязи.УчетнаяЗапись = &УчетнаяЗапись
			|	И ЗаявлениеАбонентаСпецоператораСвязи.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено)
			|	И ЗаявлениеАбонентаСпецоператораСвязи.ПоддерживаетсяМультиРежим = ИСТИНА
			|	И ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ответственный");
		
	ИначеЕсли ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВладельцыОбъектов1СОтчетности.Владелец КАК Владелец
			|ИЗ
			|	РегистрСведений.ВладельцыОбъектов1СОтчетности КАК ВладельцыОбъектов1СОтчетности
			|ГДЕ
			|	ВладельцыОбъектов1СОтчетности.УчетнаяЗапись = &УчетнаяЗапись
			|	И ВладельцыОбъектов1СОтчетности.ВидКонтролирующегоОргана = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФСГС)
			|УПОРЯДОЧИТЬ ПО
			|	ВладельцыОбъектов1СОтчетности.ДатаСоздания УБЫВ");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
		
	Иначе
		Результат = Новый Массив;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьВладельцевОбъекта1СОтчетности(
		Объект,
		УчетнаяЗапись,
		ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения = Неопределено,
		ДатаСоздания = Неопределено,
		ЭтоСообщениеИнициированноеКонтролирующимОрганом = Ложь,
		ОбрабатыватьИсключения = Истина,
		НастройкиЗаписи = Неопределено) Экспорт
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("СодержимоеПроанализировано", 	Ложь);
	НастройкиВызова.Вставить("Владельцы",					Неопределено);
	НастройкиВызова.Вставить("РежимИспользования", 			"");
	НастройкиВызова.Вставить("ЗаписатьПринудительно", 		Ложь);
	Если НастройкиЗаписи <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, НастройкиЗаписи);
	КонецЕсли;
	
	Если НЕ НастройкиВызова.ЗаписатьПринудительно Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЭтоМультиРежим = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ЭтоМультиРежим");
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ ЭтоМультиРежим Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения) =
		Тип("ПеречислениеСсылка.ТипыКонтролирующихОрганов") Тогда
		
		ВидКонтролирующегоОргана = ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения;
		
	ИначеЕсли ТипЗнч(ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения) =
		Тип("ПеречислениеСсылка.ТипыТранспортныхСообщений") Тогда
		
		ВидКонтролирующегоОргана =
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидКонтролирующегоОрганаПоТипуТранспортногоСообщения(
			ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения,
			Перечисления.ТипыКонтролирующихОрганов.ФНС);
		
	Иначе
		ВидКонтролирующегоОргана =
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ВидКонтролирующегоОрганаПоВидуЦиклаОбмена(
			ВидКонтролирующегоОрганаЦиклаОбменаИлиСообщения,
			Перечисления.ТипыКонтролирующихОрганов.ФНС);
	КонецЕсли;
	
	ДатаСозданияЗаписи = ?(ДатаСоздания = Неопределено, ТекущаяДатаСеанса(), ДатаСоздания);
	
	Если НастройкиВызова.Владельцы = Неопределено Тогда
		Если ЭтоСообщениеИнициированноеКонтролирующимОрганом
			ИЛИ ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			
			НастройкиВызова.Владельцы = ШифровальщикиУчетки(УчетнаяЗапись, ВидКонтролирующегоОргана);
			
			Если НЕ ЭтоСообщениеИнициированноеКонтролирующимОрганом Тогда
				ТекущийПользователь = Пользователи.ТекущийПользователь();
				Если НастройкиВызова.Владельцы.Найти(ТекущийПользователь) = Неопределено Тогда
					НастройкиВызова.Владельцы.Добавить(ТекущийПользователь);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			НастройкиВызова.Владельцы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийПользователь);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НастройкиВызова.Владельцы) <> Тип("Массив")
		И ТипЗнч(НастройкиВызова.Владельцы) <> Тип("ФиксированныйМассив") Тогда
		
		Владелец = НастройкиВызова.Владельцы;
		НастройкиВызова.Владельцы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Владелец);
	КонецЕсли;
	
	Попытка
		НаборЗаписей = РегистрыСведений.ВладельцыОбъектов1СОтчетности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Очистить();
		
		Для каждого Владелец Из НастройкиВызова.Владельцы Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Объект 						= Объект;
			НоваяЗапись.Владелец 					= Владелец;
			НоваяЗапись.СодержимоеПроанализировано 	= НастройкиВызова.СодержимоеПроанализировано;
			НоваяЗапись.УчетнаяЗапись 				= УчетнаяЗапись;
			НоваяЗапись.ВидКонтролирующегоОргана 	= ВидКонтролирующегоОргана;
			НоваяЗапись.ДатаСоздания 				= ДатаСозданияЗаписи;
			НоваяЗапись.РежимИспользования 			= НастройкиВызова.РежимИспользования;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	Исключение
		Если ОбрабатыватьИсключения Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами';
					|en = 'Электронный документооборот с контролирующими органами'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			Возврат Ложь;
			
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция МаксимальнаяДатаПросмотраНерасшифрованных(ТаблицаПользователейУчетныхЗаписей) Экспорт
	
	Результат = '00010101';
	
	Если ТаблицаПользователейУчетныхЗаписей.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаПользователейУчетныхЗаписей.УчетнаяЗапись КАК УчетнаяЗапись,
		|	ТаблицаПользователейУчетныхЗаписей.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаПользователейУчетныхЗаписей
		|ИЗ
		|	&ТаблицаПользователейУчетныхЗаписей КАК ТаблицаПользователейУчетныхЗаписей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ПользователиУчетныхЗаписейДокументооборота.ДатаПросмотраНерасшифрованных) КАК МаксимальнаяДатаПросмотраНерасшифрованных
		|ИЗ
		|	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПользователейУчетныхЗаписей КАК ТаблицаПользователейУчетныхЗаписей
		|		ПО ТаблицаПользователейУчетныхЗаписей.УчетнаяЗапись = ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись
		|			И ТаблицаПользователейУчетныхЗаписей.Пользователь = ПользователиУчетныхЗаписейДокументооборота.Пользователь");
	
	Запрос.УстановитьПараметр("ТаблицаПользователейУчетныхЗаписей", ТаблицаПользователейУчетныхЗаписей);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.МаксимальнаяДатаПросмотраНерасшифрованных;
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьДатуПросмотраНерасшифрованных(УчетныеЗаписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ДатаСеанса 			= ТекущаяДатаСеанса();
	
	НаборПрав = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(УчетныеЗаписи) И ТипЗнч(УчетныеЗаписи) <> Тип("Массив")
		И ТипЗнч(УчетныеЗаписи) <> Тип("ФиксированныйМассив") Тогда
		
		УчетнаяЗапись = УчетныеЗаписи;
		НаборПрав.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	КонецЕсли;
	НаборПрав.Отбор.Пользователь.Установить(ТекущийПользователь);
	
	НаборПрав.Прочитать();
	
	Для каждого ПользовательУчетнойЗаписи Из НаборПрав Цикл
		Если ПользовательУчетнойЗаписи.ЭтоПотенциальныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТипЗнч(УчетныеЗаписи) = Тип("Массив") ИЛИ ТипЗнч(УчетныеЗаписи) = Тип("ФиксированныйМассив"))
			И УчетныеЗаписи.Найти(ПользовательУчетнойЗаписи.УчетнаяЗапись) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ПользовательУчетнойЗаписи.ДатаПросмотраНерасшифрованных = ДатаСеанса;
	КонецЦикла;
	
	НаборПрав.Записать();
	
КонецПроцедуры

Функция ВладельцыТранспортногоСообщения(ТранспортноеСообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		|ПОМЕСТИТЬ ЦиклыОбменаТС
		|ИЗ
		|	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		|ГДЕ
		|	ТранспортноеСообщение.Ссылка = &ТранспортноеСообщение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВладельцыОбъектов1СОтчетности.Владелец КАК Владелец
		|ИЗ
		|	РегистрСведений.ВладельцыОбъектов1СОтчетности КАК ВладельцыОбъектов1СОтчетности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦиклыОбменаТС
		|			ПО ВладельцыОбъектов1СОтчетности.Объект = ЦиклыОбменаТС.ЦиклОбмена
		|ГДЕ
		|	ВладельцыОбъектов1СОтчетности.Объект = ЦиклыОбменаТС.ЦиклОбмена
		|	ИЛИ ВладельцыОбъектов1СОтчетности.Объект = &ТранспортноеСообщение");
	
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
	
КонецФункции

Процедура БольшеНеНапоминатьПроПриглашение(Организация, УчетнаяЗапись, Пользователь) Экспорт
	
	НаборЗаписейРегистра = РегистрыСведений.ПриглашенияПользователей1СОтчетности.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписейРегистра.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписейРегистра.Отбор.Организация.Установить(Организация);
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Функция ИмяПользователяИБ(Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Пользователи.СвойстваПользователяИБ(Пользователь.ИдентификаторПользователяИБ);
	
	Если Свойства = Неопределено Тогда
		Возврат НСтр("ru = '<Не удалось определить>';
					|en = '<Не удалось определить>'");
	Иначе
		Возврат Свойства.Имя;
	КонецЕсли;
	
КонецФункции

Функция ИмяТекущегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Свойства = Пользователи.СвойстваПользователяИБ(Пользователи.ТекущийПользователь().ИдентификаторПользователяИБ);
	Если Свойства = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Свойства.Имя;
	КонецЕсли;
	
КонецФункции

Функция ФизЛицоСоответствуетТекущемуПользователю(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецВыбранКорректно = Истина;
	
	Результат = Новый Структура();
	Результат.Вставить("Корректно", ВладелецВыбранКорректно);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПравильныйВладелецЭЦП", Неопределено);
	Результат.Вставить("ПравильныйВладелецЭЦПТип", Неопределено);
	Результат.Вставить("НовоеФизЛицо", Неопределено);
	Результат.Вставить("НовыйПользователь",  Неопределено);
	Результат.Вставить("ИмяНовогоПользователя", "");
	
	Если Источник.ЭтоМультиРежим
		И ЗначениеЗаполнено(Источник.ВладелецЭЦПТип) 
		И ЗначениеЗаполнено(Источник.ВладелецЭЦП) Тогда
		
		Данные = ВладелецЭЦПТипПоФорме(Источник);
		ПравильныйВладелецЭЦПТип = Данные.ВладелецЭЦПТип;
		ПравильныйВладелецЭЦП    = Данные.ВладелецЭЦП;
		
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Источник, Источник.ВладелецЭЦП);
		
		Если НЕ ЗначениеЗаполнено(ПравильныйВладелецЭЦПТип) 
			ИЛИ НЕ ЗначениеЗаполнено(ПравильныйВладелецЭЦП)
			ИЛИ Строка = Неопределено Тогда

			Возврат Результат;
			
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
			ЭтоПервичное = Источник.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
		Иначе
			ЭтоПервичное = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоФормаПервичногоЗаявления(Источник);
		КонецЕсли;
		
		Пользователь = Строка.Пользователь;
		
		ВладелецВыбранКорректно = 
			Источник.ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель
			И ПравильныйВладелецЭЦП = Источник.Руководитель 
			ИЛИ Источник.ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер
			И ПравильныйВладелецЭЦП = Источник.ГлБухгалтер 
			ИЛИ Источник.ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник
			И (ЭтоПервичное И ПравильныйВладелецЭЦП = Источник.ДругойСотрудник
			ИЛИ НЕ ЭтоПервичное И ПравильныйВладелецЭЦП = Источник.ВладелецЭЦП);
			
		Если НЕ ВладелецВыбранКорректно Тогда
			
			Результат.Вставить("ПравильныйВладелецЭЦП", ПравильныйВладелецЭЦП);
			Результат.Вставить("НовоеФизЛицо",      Источник.ВладелецЭЦП);
			Результат.Вставить("НовыйПользователь", Пользователь);
			Результат.Вставить("ПравильныйВладелецЭЦПТип", ПравильныйВладелецЭЦПТип);
			
			ИмяНовогоПользователя = ИмяПользователяИБ(Пользователь);
			Результат.Вставить("ИмяНовогоПользователя", ИмяНовогоПользователя);
			
		КонецЕсли;
			
		Результат.Вставить("Корректно", ВладелецВыбранКорректно);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаПользователейСДопПолями(Источник) Экспорт
	
	Если НЕ Источник.ЭтоМультиРежим Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоЗаявлениеНаПодключение = Источник.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	
	ЭтоСсылка = 
		ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи")
		ИЛИ ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура");
		
	Если ЭтоСсылка Тогда
		ТаблицаПользователей = Источник.Ссылка.ПользователиУчетнойЗаписи.Выгрузить();
	Иначе
		ТаблицаПользователей = Источник.РеквизитФормыВЗначение("ТаблицаПользователей");
	КонецЕсли;
	
	ТаблицаПользователей.Колонки.Добавить("ЭтоОтправитель", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("ЭтоРазрегистрация", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_Шифровальщик", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_СоставГосОрганов", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_Роль", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_Пометка", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_ПолучатьУведомления", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("Изменился_ЭлектроннаяПочта", Новый ОписаниеТипов("Булево"));
	
	Для каждого Строка Из ТаблицаПользователей Цикл
		
		ИгнорироватьОтключенного = ИгнорироватьИзменениеОтключенногоПользователя(Источник, Строка);
		Если ИгнорироватьОтключенного Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ВладелецЭЦП) Тогда
			ЭтоОтправитель = Строка.ФизическоеЛицо = Источник.ВладелецЭЦП;
		Иначе
			ЭтоОтправитель = Строка.Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;

		Строка.ЭтоРазрегистрация = МультирежимКлиентСервер.ЭтоРазрегистрация(Источник, Строка);
		
		Если ЭтоОтправитель Тогда
			Строка.ЭтоОтправитель = Истина;
			Строка.ЭтоПотенциальныйПользователь = Ложь;
		ИначеЕсли ЭтоЗаявлениеНаПодключение Тогда
			Строка.ЭтоПотенциальныйПользователь = Истина;
		ИначеЕсли Строка.ЭтоРазрегистрация Тогда
			БылПотенциальным = ЭтоПотенциальныйПользователь(Источник.Организация, Строка.Пользователь);
			Если БылПотенциальным Тогда
				Строка.ЭтоПотенциальныйПользователь = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоСсылка Тогда
			Строка.Изменился_СоставГосОрганов = ИзменилсяСоставГосОрганов(Источник, Строка, Источник);
			ИзменилисьНастройки = ИзменилисьНастройкиПользователя(Источник, Строка, Источник);
		Иначе
			Строка.Изменился_СоставГосОрганов = ИзменилсяСоставГосОрганов(Источник, Строка);
			ИзменилисьНастройки = ИзменилисьНастройкиПользователя(Источник, Строка);
		КонецЕсли;
		
		Строка.Изменился_Шифровальщик = Строка.ЭтоШифровальщик <> Строка.ЭтоШифровальщикИсходный;
		
		Строка.Изменился_Роль = МультирежимКлиентСервер.ИзмениласьРоль(Строка);
		
		Строка.Изменился_ПолучатьУведомления = Строка.ПолучатьУведомленияОбИзмененииПравИсходный <> Строка.ПолучатьУведомленияОбИзмененииПрав;
			
		Строка.Изменился_ЭлектроннаяПочта = Строка.ЭлектроннаяПочтаИсходная <> Строка.ЭлектроннаяПочта;
			
		Строка.Изменился_Пометка = Строка.Пометка <> Строка.ПометкаИсходная;
		
		Если ИзменилисьНастройки 
			ИЛИ Строка.ЭтоРазрегистрация
			ИЛИ Строка.Изменился_СоставГосОрганов
			ИЛИ Строка.Изменился_Шифровальщик 
			ИЛИ Строка.Изменился_Роль 
			ИЛИ Строка.Изменился_Пометка
			ИЛИ Строка.Изменился_ПолучатьУведомления
			ИЛИ Строка.Изменился_ЭлектроннаяПочта Тогда
			Строка.Изменился = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПользователей;
	
КонецФункции

Функция ИгнорироватьИзменениеОтключенногоПользователя(Источник, Строка) Экспорт
	
	Результат = НЕ Строка.Пометка И 
		(МультирежимКлиентСервер.ЭтоОтключениеМультирежима(Источник)
		ИЛИ МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Источник));
		
	Возврат Результат;
			
КонецФункции

Функция ИзменилисьПотенциальныеПользователи(ДокументЗаявление, ТаблицаПользователей) Экспорт
	
	Если НЕ ДокументЗаявление.ЭтоМультиРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Изменился", Истина);
	Отбор.Вставить("ЭтоПотенциальныйПользователь", Истина);
	
	НайденныеСтроки = ТаблицаПользователей.НайтиСтроки(Отбор);
		
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Процедура ПроверитьНаправленияПередОтправкой(Форма, МастерДалее) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПроверитьНаправления(Форма, МастерДалее, Истина); 
	
	МультирежимКлиентСервер.НаправленияУчеткиИПользователейСовпадают(
		Форма,
		МастерДалее,
		Истина);
			
КонецПроцедуры

Функция ПараметрыФормыПользователиНеИзЗаявления(Форма, УчетнаяЗапись) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организация = КонтекстЭДОСервер.ОрганизацияУчетнойЗаписи(УчетнаяЗапись);
	
	Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	
	ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
	ПоддерживаетсяМультирежим = ПоддерживаетсяМультирежим();
	
	// Свойства взяты из метода ПараметрыФормыПользователи
	ПараметрыФормы = ШаблонПараметровФормыПользователи();
	Результат = Новый Структура(ПараметрыФормы);
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("Руководитель", Руководитель);
	Результат.Вставить("ЭтоМультиРежим", ЭтоМультиРежим(УчетнаяЗапись));
	Результат.Вставить("ЭтоМультиРежимИсходный", ЭтоМультиРежим(УчетнаяЗапись));
	Результат.Вставить("ЭтоЮридическоеЛицо", ЭтоЮридическоеЛицо);
	Результат.Вставить("ТекущийПользователь", ТекущийПользователь);
	Результат.Вставить("ПоддерживаетсяМультирежим", ПоддерживаетсяМультирежим);
	Результат.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	Результат.Вставить("ВладелецЭЦПРасширилСебеПрава", Ложь);
	Результат.Вставить("ТаблицаПользователей", Форма.ТаблицаПользователей);
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("АдресТаблицы",  АдресТаблицы(Форма, "ТаблицаПользователей"));
	Результат.Вставить("ВсеГосОрганыУчетнойЗаписи", Неопределено);
	Результат.Вставить("ТипЗаявления", Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение);
	
	Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, ТекущийПользователь);
	Если Права.ЕстьДанные Тогда
		
		Результат.Вставить("ВладелецЭЦП", Права.ФизическоеЛицо);
		Результат.Вставить("ВладелецЭЦПСНИЛС", Права.СНИЛС);
		Результат.Вставить("ВладелецЭЦПЭтоАдмин", Права.ЭтоАдмин);
		
	Иначе
		
		ФизЛицо = ФизЛицоПоПользователюИзСправочникаПользователи(ТекущийПользователь, Истина, Истина);
		СНИЛС   = МультирежимВызовСервера.СНИЛСФизЛица(ФизЛицо, Организация);
		
		Результат.Вставить("ВладелецЭЦП", ФизЛицо);
		Результат.Вставить("ВладелецЭЦПСНИЛС", СНИЛС);
		Результат.Вставить("ВладелецЭЦПЭтоАдмин", Ложь);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьМультирежимНеИзЗаявления(Форма, УчетнаяЗапись) Экспорт
	
	Если НЕ ЭтоМультиРежим(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЭтоМультиРежим = ЭтоМультиРежим(УчетнаяЗапись);
	Форма.ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ИнициализироватьПользователей(Форма, Форма.ТаблицаПользователей, УчетнаяЗапись, Истина, Ложь);
	ДобавитьНовыхПользователей(Форма);
	
КонецПроцедуры

Функция ЭтоОбязательныйАдмин(Форма, Строка) Экспорт
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
	Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись, Строка.ФизическоеЛицо);
	Если Права.ЕстьДанные Тогда
		Возврат Права.ЭтоАдмин;
	КонецЕсли;
	
	ЭтоПодключениеМультирежима = МультирежимКлиентСервер.ЭтоПодключениеМультирежима(Форма);
	
	Если Строка <> Неопределено 
		И ЗначениеЗаполнено(Строка.СНИЛС) 
		И ЭтоПодключениеМультирежима Тогда
		
		ЭтоПервый = ЭтоПервыйПодключенныйПоСНИЛС(Форма, Строка.СНИЛС);
		
	Иначе
		ЭтоПервый = Ложь;
	КонецЕсли;
	
	ЭтоТекущий = 
		Строка.ФизическоеЛицо = Форма.ВладелецЭЦП 
		И ЗначениеЗаполнено(Строка.ФизическоеЛицо) 
		И ЗначениеЗаполнено(Форма.ВладелецЭЦП);
	
	Возврат (ЭтоТекущий ИЛИ ЭтоПервый) И ЭтоПодключениеМультирежима;
	
КонецФункции

Функция ЭтоПервыйПодключенный(Форма, Строка) Экспорт
	
	Возврат ЭтоПервыйПодключенныйПоСНИЛС(Форма, Строка.СНИЛС);
	
КонецФункции

Функция ЭтоПервыйПодключенныйПоСНИЛС(Форма, СНИЛС) Экспорт
	
	СНИЛСПервого = СНИЛСПервогоВладельцаЭП(Форма.УчетнаяЗапись);
	ЭтоПервый = СНИЛС = СНИЛСПервого И ЗначениеЗаполнено(СНИЛСПервого);
	
	Возврат ЭтоПервый;
	
КонецФункции

Процедура ОчиститьПраваПользователя(Форма, Ссылка) Экспорт
	
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Форма, Ссылка);
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка.Пометка = Ложь;
	Строка.ЭтоШифровальщик = Ложь;
	Строка.ЭтоАдмин  = Ложь;
	Строка.ЭлектроннаяПочта  = Неопределено;
	Строка.СдаватьВФНС = Ложь;
	Строка.СдаватьВРосстат = Ложь;
	Строка.СдаватьВЦБ = Ложь;
	Строка.СдаватьВПФР = Ложь;
	Строка.СдаватьВФСС = Ложь;
	Строка.ПодатьЗаявкуНаСертификатДляФСРАР = Ложь;
	Строка.ПодатьЗаявкуНаПодключениеРПН = Ложь;
	Строка.ПодатьЗаявкуНаПодключениеФТС = Ложь;
	Строка.ЭтоПотенциальныйПользователь = Ложь;
	
КонецПроцедуры

Функция ПараметрыПредупрежденияОбратитесьКАдминистратору(Форма) Экспорт
	
	ПараметрыФормы = 
		"ВладелецЭЦПРасширилСебеПрава,
		|ВладелецЭЦПЭтоАдмин";
	
	Результат = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(Результат, Форма, ПараметрыФормы); 
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("АдресТаблицы", АдресТаблицы(Форма, "ТаблицаПользователей"));
	
	Возврат Результат;
	
КонецФункции

Процедура ВосстановитьЛичныеНаправленияИзБазы(Форма) Экспорт
	
	ПропуститьДействие = 
		НЕ Форма.ЭтоМультиРежим 
		ИЛИ Форма.ВладелецЭЦПРасширилСебеПрава;
	
	Если ПропуститьДействие Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = МультирежимКлиентСервер.ФлагиНаправлений();
	Свойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Свойства, ",", Истина, Истина);
	
	Права = ПраваНаУчетнуюЗапись(Форма.УчетнаяЗапись, Форма.ВладелецЭЦП);

	Для каждого Свойство Из Свойства Цикл
		Форма[Свойство] = Права[Свойство];
	КонецЦикла;
	
	Если НЕ Форма.СдаватьВФНС Тогда
		Форма.ПолучателиФНС.Очистить();
	КонецЕсли;
	Если НЕ Форма.СдаватьВРосстат Тогда
		Форма.ПолучателиФСГС.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Функция НаправленияУчетнойЗаписиИзРегистра(Форма) Экспорт
	
	Результат = ОбработкаЗаявленийАбонента.ОбщиеПараметрыНаправленийПоУмолчанию();
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизацииПоФорме(Форма);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Права = ПраваПользователейУчетнойЗаписи(УчетнаяЗапись);
		
	Флаги = МультирежимКлиентСервер.ФлагиНаправлений();
	Флаги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Флаги, ",", Истина, Истина);

	Для каждого Флаг Из Флаги Цикл
		Для каждого ПраваПользователя Из Права Цикл
			
			Заполнить = 
				ЗначениеЗаполнено(ПраваПользователя[Флаг]) 
				И (НЕ ЗначениеЗаполнено(Результат[Флаг]) ИЛИ Результат[Флаг] = Ложь);
				
			Если Заполнить Тогда
				Результат[Флаг] = ПраваПользователя[Флаг];
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВсеЗаписи = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись,,Истина);
	Для каждого Запись Из ВсеЗаписи Цикл
		
		Если ЗначениеЗаполнено(Запись.РегНомерПФР) Тогда
			Результат.РегНомерПФР = Запись.РегНомерПФР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.РегНомерСФР) Тогда
			Результат.РегНомерСФР = Запись.РегНомерСФР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.КодРегионаФСРАР) Тогда
			Результат.КодРегионаФСРАР = Запись.КодРегионаФСРАР;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПриглашенийПользователей(ДокументЗаявление) Экспорт
	
	Таблица = ТаблицаПользователейСДопПолями(ДокументЗаявление);
	
	Приглашения = Новый Массив;
	
	Если Таблица = Неопределено Тогда
		Возврат Приглашения;
	КонецЕсли;
	
	Для каждого Строка Из Таблица Цикл
		
		Приглашение = ДанныеПриглашенияПользователя(ДокументЗаявление, Строка);
		Если Приглашение.ЕстьИзменение И ЗначениеЗаполнено(Приглашение.ТекстПриглашения) Тогда
			Приглашения.Добавить(Приглашение);
		КонецЕсли;

	КонецЦикла;
	
	Возврат Приглашения;
	
КонецФункции

// Администратор учетной записи Кобах Артемий Тестович организации Ромашка ...
Функция НачалоПриглашения(
		ФизЛицо, 
		Организация,
		ЭтоДобавлениеПользователя,
		ЭтоРазрегистрация) Экспорт
	
	Подстроки = Новый Массив;
	Подстроки.Добавить(НСтр("ru = 'Администратор учетной записи';
							|en = 'Администратор учетной записи'"));
	
	ФИО = ДокументооборотСКОКлиентСервер.ФамилияИнициалыПоСсылке(ФизЛицо);
	Подстроки.Добавить(Жирным(ФИО));
	
	НужноДобавить = 
		НЕ ЭтоДобавлениеПользователя 
		И НЕ ЭтоРазрегистрация;
		
	Если НужноДобавить Тогда
		ДобавитьОрганизацияВПриглашении(Подстроки, Организация);
	КонецЕсли;
	
	Возврат Подстроки;

КонецФункции

Функция ДобавитьОрганизацияВПриглашении(Подстроки, Организация, Префикс = "", Постфикс = "") Экспорт
	
	Если НужноДобавитьОрганизациюВПриглашение() Тогда
		
		ЭтоЮридическоеЛицо = РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация);
		
		Если ЗначениеЗаполнено(Префикс) Тогда
			Подстроки.Добавить(Префикс);
		КонецЕсли;
		
		Если ЭтоЮридическоеЛицо Тогда
			Подстроки.Добавить(НСтр("ru = 'организации';
									|en = 'организации'"));
		КонецЕсли;
		
		Подстроки.Добавить(Жирным(Строка(Организация)));
		
		Если ЗначениеЗаполнено(Постфикс) Тогда
			Подстроки.Добавить(Постфикс);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подстроки;

КонецФункции

Функция НужноДобавитьОрганизациюВПриглашение() Экспорт
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Возврат НЕ ИспользуетсяОднаОрганизация;

КонецФункции

Процедура ДобавитьПриглашениеПриДобавлении(Подстроки, Организация) Экспорт
	
	Подстроки.Добавить(НСтр("ru = 'предлагает Вам подключиться к 1С-Отчетности';
							|en = 'предлагает Вам подключиться к 1С-Отчетности'"));
	
	ДобавитьОрганизацияВПриглашении(Подстроки, Организация, НСтр("ru = 'по';
																|en = 'по'"), ".");
	
	Подстроки.Добавить(Символы.ПС + Символы.ПС + НСтр("ru = 'Для этого подготовьте и отправьте заявление на подключение.';
														|en = 'Для этого подготовьте и отправьте заявление на подключение.'"));
	
КонецПроцедуры

Функция ДанныеПриглашенияПользователя(ДокументЗаявление, Строка) Экспорт
	
	ВладелецЭЦП = ДокументЗаявление.ВладелецЭЦП;
	Организация = ДокументЗаявление.Организация;
	
	Если Строка.ФизическоеЛицо = ВладелецЭЦП
		ИЛИ НЕ Строка.Пометка И НЕ Строка.ПометкаИсходная
		ИЛИ НЕ Строка.Изменился Тогда
		Возврат ШаблонПриглашения();
	КонецЕсли;
			
	ЕстьИзменение = Ложь;
	
	ЭтоДобавлениеПользователя = МультирежимКлиентСервер.ЭтоДобавлениеПользователяПоСтроке(
		ДокументЗаявление, 
		Строка);
		
	ЭтоРазрегистрация = 
		МультирежимКлиентСервер.ЭтоРазрегистрация(ДокументЗаявление, Строка) 
		ИЛИ МультирежимКлиентСервер.ЭтоОтключениеМультирежима(ДокументЗаявление);
		
	Подстроки = НачалоПриглашения(
		ВладелецЭЦП, 
		Организация, 
		ЭтоДобавлениеПользователя,
		ЭтоРазрегистрация);
	
	Если ЭтоДобавлениеПользователя Тогда
		ДобавитьПриглашениеПриДобавлении(Подстроки, Организация);
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Если ЭтоРазрегистрация Тогда
		Подстроки.Добавить(НСтр("ru = 'отключил Вам возможность отправки отчетов и прочих документов в гос. органы';
								|en = 'отключил Вам возможность отправки отчетов и прочих документов в гос. органы'"));
		ДобавитьОрганизацияВПриглашении(Подстроки, Организация, НСтр("ru = 'по';
																	|en = 'по'"), ".");
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	СообщитьОбИзменениях = 
		НЕ ЭтоРазрегистрация 
		И НЕ ЭтоДобавлениеПользователя
		// Если пользователь еще не подключился, то ему ни о чем не надо сообщать
		И НЕ Строка.ЭтоПотенциальныйПользователь;
	
	Если СообщитьОбИзменениях Тогда
		
		Изменения = Новый Массив;
		
		ИзмениласьРоль = МультирежимКлиентСервер.ИзмениласьРоль(Строка);
		
		СталАдмином = 
			Строка.ЭтоАдмин 
			И ИзмениласьРоль;
			
		СталПользователем = 
			НЕ Строка.ЭтоАдмин 
			И ИзмениласьРоль;
			
		ИзменилисьГосОрганы = ИзменилсяСоставГосОрганов(ДокументЗаявление.Ссылка, Строка);
		
		Если СталАдмином ИЛИ СталПользователем ИЛИ ИзменилисьГосОрганы Тогда
			Подстроки.Добавить(НСтр("ru = 'изменил Вам';
									|en = 'изменил Вам'"));
			ЕстьИзменение = Истина;
		КонецЕсли;
		
		Если СталАдмином Тогда
			Изменения.Добавить(НСтр("ru = 'роль с пользователя на администратора учетной записи 1С-Отчетности';
									|en = 'роль с пользователя на администратора учетной записи 1С-Отчетности'"));
			ЕстьИзменение = Истина;
		КонецЕсли;
			
		Если СталПользователем Тогда
			Изменения.Добавить(НСтр("ru = 'роль с администратора на пользователя учетной записи 1С-Отчетности';
									|en = 'роль с администратора на пользователя учетной записи 1С-Отчетности'"));
			ЕстьИзменение = Истина;
		КонецЕсли;
		
		Если ИзменилисьГосОрганы Тогда
			
			Представление = МультирежимКлиентСервер.ГосОрганыДляСравнения(Строка);
			
			Текст = НСтр("ru = 'доступ к гос. органам (новый состав: %1)';
						|en = 'доступ к гос. органам (новый состав: %1)'");
			Текст = СтрШаблон(Текст, Представление);
			
			Изменения.Добавить(Текст);
			
		КонецЕсли;
		
		Если Изменения.Количество() > 0 Тогда
			ИзмененияТекст = СтрСоединить(Изменения, ", ");
			Подстроки.Добавить(ИзмененияТекст);
			ЕстьИзменение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Приглашение = ШаблонПриглашения();
	Если ЕстьИзменение ИЛИ ЭтоРазрегистрация ИЛИ ЭтоДобавлениеПользователя Тогда
		
		ПодстрокиТекст = ДокументооборотСКОКлиентСервер.СтрСоединитьUPD(Подстроки);
		
		Приглашение.ЕстьИзменение    = Истина;
		Приглашение.ТекстПриглашения = ПодстрокиТекст;
		Приглашение.ЭтоПодключение   = ЭтоДобавлениеПользователя;
		Приглашение.Пользователь     = Строка.Пользователь;
		Приглашение.Заявление        = ДокументЗаявление.Ссылка;
		Приглашение.Организация      = ДокументЗаявление.Организация;
		Приглашение.УчетнаяЗапись    = ДокументЗаявление.УчетнаяЗапись;
		Приглашение.Дата             = ТекущаяДатаСеанса();
		
	КонецЕсли;

	Возврат Приглашение;
	
КонецФункции

Процедура ЗаписатьВРегистрПриглашенияПользователей1СОтчетности(Приглашения) Экспорт
	
	Для каждого Приглашение Из Приглашения Цикл
		
		НаборЗаписейРегистра = РегистрыСведений.ПриглашенияПользователей1СОтчетности.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Организация.Установить(Приглашение.Организация);
		НаборЗаписейРегистра.Отбор.Пользователь.Установить(Приглашение.Пользователь);
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Очистить();
		
		НоваяЗапись = НаборЗаписейРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Приглашение);
		
		НаборЗаписейРегистра.Записать();

	КонецЦикла;
	
КонецПроцедуры

Функция Жирным(Текст) Экспорт
	
	Возврат ДокументооборотСКОКлиентСервер.Жирным(Текст);
	
КонецФункции

Функция ШаблонПриглашения() Экспорт
	
	Регистр = Метаданные.РегистрыСведений.ПриглашенияПользователей1СОтчетности;
	Шаблон = ДокументооборотСКО.ШаблонЗаписиРегистра(Регистр);
	
	Шаблон.Вставить("ЕстьИзменение", Ложь);
	
	Возврат Шаблон;

КонецФункции

Функция ПредставлениеПользователей(Форма, НоваяСтрока) Экспорт
	
	ФизЛицо = НоваяСтрока.ФизическоеЛицо;
	
	Если НоваяСтрока.Пользователь = Форма.ТекущийПользователь Тогда
		
		Результат = НСтр("ru = '%1 (Вы)';
						|en = '%1 (Вы)'");
		Результат = СтрШаблон(Результат, НоваяСтрока.Пользователь);
		Возврат Результат;
		
	ИначеЕсли ФизЛицо = Форма.Руководитель Тогда
		
		Если Форма.ЭтоЮридическоеЛицо Тогда
			Результат = НСтр("ru = '%1 (Руководитель)';
							|en = '%1 (Руководитель)'");
		Иначе
			Результат = НСтр("ru = '%1 (Предприниматель)';
							|en = '%1 (Предприниматель)'");
		КонецЕсли;
		
		Результат = СтрШаблон(Результат, НоваяСтрока.Пользователь);
		Возврат Результат;
		
	ИначеЕсли НЕ Форма.ЭтоМультиРежим Тогда
		
		Возврат Строка(НоваяСтрока.Пользователь);
		
	ИначеЕсли ЗначениеЗаполнено(ФизЛицо) Тогда
		
		ФИО = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ФизЛицо);
		Фамилия = ФИО.Фамилия;
		ВЛогинВходитФамилия = СтрНайти(Строка(НоваяСтрока.Пользователь), Фамилия);
		
		Если НЕ ЗначениеЗаполнено(Фамилия) ИЛИ НЕ ВЛогинВходитФамилия Тогда
			Результат = НСтр("ru = '%1 (%2)';
							|en = '%1 (%2)'");
			Результат = СтрШаблон(Результат, НоваяСтрока.Пользователь, ФизЛицо);
			Возврат Результат;
		КонецЕсли;
			
	КонецЕсли;
		
	Возврат Строка(НоваяСтрока.Пользователь);
	
КонецФункции

Процедура СкорректироватьПризнакЕстьДоступКоВсемГосОрганам(Форма, ВсеГосОрганы) Экспорт

	Таблица = Форма.РеквизитФормыВЗначение("ТаблицаПользователей");
	Таблица.ЗаполнитьЗначения(Ложь, "ЕстьДоступКоВсемГосОрганам");
	Форма.ЗначениеВРеквизитФормы(Таблица, "ТаблицаПользователей");
	
	СписокСвойств = МультирежимКлиентСервер.ФлагиНаправлений();
	ИменаСвойств  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СписокСвойств);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пометка", Истина);
	
	Для каждого Свойство Из ИменаСвойств Цикл
		Отбор.Вставить(Свойство, ВсеГосОрганы[Свойство]);
	КонецЦикла;
	
	НайденныеСтроки = Форма.ТаблицаПользователей.НайтиСтроки(Отбор);
		
	Для каждого Строка Из НайденныеСтроки Цикл
		Строка.ЕстьДоступКоВсемГосОрганам = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Определяет, что учетка имеет мультирежим по идентификатору
// абонента вида 56766889-1963-4CF3-8F2C-28789C97D2FE без префикса оператора 1AE
// 
Функция ЭтоМультиРежимПоИдентификаторуАбонента(ИдентификаторАбонента) Экспорт
	
	СпецоператорСвязи = Перечисления.СпецоператорыСвязи.КалугаАстрал;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Результат = КонтекстЭДОСервер.ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента);
	Если НЕ Результат.Выполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоМультиРежим = ЭтоМультиРежимПоАдресуРегФайла(Результат.Настройки);
		
	Возврат ЭтоМультиРежим;

КонецФункции

Функция ЭтоМультиРежимИзРегФайла(ДокументDOM) Экспорт
	
	Возврат РегФайлКА.ЭтоМультиРежимИзРегФайла(ДокументDOM);

КонецФункции

Функция ЭтоМультиРежимПоАдресуРегФайла(Адрес) Экспорт
	
	Возврат РегФайлКА.ЭтоМультиРежимПоАдресуРегФайла(Адрес);

КонецФункции

Функция ЭтоМультиРежимПоОрганизации(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат ЭтоМультиРежим(УчетнаяЗапись);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ЭтоМультиРежим(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетнаяЗаписьЗаполнена(УчетнаяЗапись) Тогда
		Возврат УчетнаяЗапись.ЭтоМультиРежим;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ХотяБыОдинПодключенныйПользовательИмеетДоступКОргануПоОрганизации(Организация, ОрганСтрокой) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат ХотяБыОдинПодключенныйПользовательИмеетДоступКОргану(УчетнаяЗапись, ОрганСтрокой);
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ХотяБыОдинПодключенныйПользовательИмеетДоступКОргану(УчетнаяЗапись, ОрганСтрокой) Экспорт
	
	Права = ПраваПользователейУчетнойЗаписи(УчетнаяЗапись);
	
	Список = МультирежимКлиентСервер.РеквизитыИОрганыСтрокой();
	Реквизит = Список.НайтиПоЗначению(ОрганСтрокой);
	
	Отбор = Новый Структура();
	Отбор.Вставить(Реквизит, Истина);
	
	НайденныеСтроки = Права.НайтиСтроки(Отбор);
	Возврат НайденныеСтроки.Количество() > 0;

КонецФункции

Функция ТипКриптопровайдераПользователяМультирежима(УчетнаяЗапись, Знач Пользователь = Неопределено) Экспорт
	
	Результат = СвойствоСертификатаПользователя(
		УчетнаяЗапись,
		Пользователь,
		"Криптопровайдер");
		
	Возврат Результат;
	
КонецФункции

Функция ОтпечатокСертификатаПользователя(УчетнаяЗапись, Знач Пользователь = Неопределено) Экспорт
	
	Результат = СвойствоСертификатаПользователя(
		УчетнаяЗапись,
		Пользователь,
		"Отпечаток", 
		"СертификатРуководителя",
		"");
		
	Возврат Результат;
	
КонецФункции

Функция МодельХраненияСертификатаПользователя(УчетнаяЗапись, Знач Пользователь = Неопределено) Экспорт
	
	Результат = СвойствоСертификатаПользователя(
		УчетнаяЗапись,
		Пользователь,
		"МодельХраненияЗакрытогоКлюча", 
		"МодельХраненияЗакрытогоКлюча");
		
	Возврат Результат;
	
КонецФункции

Функция СвойствоСертификатаПользователя(
		УчетнаяЗапись,
		Знач Пользователь = Неопределено,
		ИмяСвойстваМультиРежима, 
		ИмяСвойства1ПРежима = "",
		ЗначениеПоУмолчанию = Неопределено) Экспорт
		
	Результат = ЗначениеПоУмолчанию;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ УчетнаяЗаписьЗаполнена(УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтоМультиРежим(УчетнаяЗапись)
		И ЗначениеЗаполнено(ИмяСвойстваМультиРежима) Тогда
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Сертификаты = УчетнаяЗапись.СертификатыЛичные;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Пользователь", Пользователь);
		Отбор.Вставить("Текущий", Истина);
		
		НайденныеСтроки = Сертификаты.НайтиСтроки(Отбор);
			
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0][ИмяСвойстваМультиРежима];
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ИмяСвойства1ПРежима) Тогда
		РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, ИмяСвойства1ПРежима);
		Результат = РеквизитыУчетнойЗаписи[ИмяСвойства1ПРежима];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция - Получает СНИЛС владельца ЭЦП (из заявления или по текущему пользователю) и ищет его в рег. файле.
// Результат Истина, если СНИЛС найден в рег. файле.
//
Функция ПользователюРазрешеноВыполнятьАвтонастройку(ДокументDOM, ПараметрыФункции) Экспорт
	
	ЭтоМультиРежим = ЭтоМультиРежимИзРегФайла(ДокументDOM);
		
	Если ЭтоМультиРежим <> Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыФункции.Свойство("СсылкаНаЗаявление") Тогда
		СсылкаНаЗаявление = ПараметрыФункции.СсылкаНаЗаявление;
	Иначе
		СсылкаНаЗаявление = Неопределено;
	КонецЕсли;
	
	Если ЭтоСамоРазрегистрацияВладельцаПоЗаявлению(СсылкаНаЗаявление) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВладелецЭЦПСНИЛС = РегФайлКА.ВладелецЭЦПСНИЛСДляАвтонастройки(ДокументDOM, СсылкаНаЗаявление, ПараметрыФункции.ВыводитьСообщения);
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
		
		Имя   = ИмяТекущегоПользователя();
		Текст = НСтр("ru = 'Не удалось определить СНИЛС пользователя %1. Проверьте, что в карточке пользователя %1 заполнено поле Физическое лицо, а у него заполнено СНИЛС.';
					|en = 'Не удалось определить СНИЛС пользователя %1. Проверьте, что в карточке пользователя %1 заполнено поле Физическое лицо, а у него заполнено СНИЛС.'");
		Текст = СтрШаблон(Текст, Имя);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
			Текст, 
			ПараметрыФункции.ВызовИзМастераПодключенияК1СОтчетности, 
			ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности, 
			ПараметрыФункции.ВыводитьСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ЕстьСредиВладельцев = Ложь;
	ВладелецыЭЦП = ДокументDOM.ПолучитьЭлементыПоИмени("ВладелецЭЦП");
	Для каждого ДанныеВладельцаЭЦП Из ВладелецыЭЦП Цикл
		
		СНИЛС = КонтекстЭДОСервер.ПолучитьЗначениеУзлаXML(ДанныеВладельцаЭЦП, "СНИЛС");
		Если СНИЛС = ВладелецЭЦПСНИЛС Тогда
			ЕстьСредиВладельцев = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьСредиВладельцев И ПараметрыФункции.ВыводитьСообщения Тогда
		
		Имя   = ИмяТекущегоПользователя();
		Текст = НСтр("ru = 'Пользователь %1 не может выполнять автонастройку учетной записи, потому что еще не подключен к 1С-Отчетности. Для подключения обратитесь к администратору';
					|en = 'Пользователь %1 не может выполнять автонастройку учетной записи, потому что еще не подключен к 1С-Отчетности. Для подключения обратитесь к администратору'");
		Текст = СтрШаблон(Текст, Имя);
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СообщитьИлиПередатьВМастерОшибку(
			Текст, 
			ПараметрыФункции.ВызовИзМастераПодключенияК1СОтчетности, 
			ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности, 
			ПараметрыФункции.ВыводитьСообщения);
		
	Конецесли;
	
	Возврат ЕстьСредиВладельцев;
	
КонецФункции

Функция ЭтоСамоРазрегистрацияВладельцаПоЗаявлению(СсылкаНаЗаявление) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЗаявление) ИЛИ НЕ СсылкаНаЗаявление.ЭтоМультиРежим Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Таблица = МультирежимКлиентСервер.ТаблицаПользователей(СсылкаНаЗаявление);
	Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Таблица, СсылкаНаЗаявление.ВладелецЭЦП);
	
	Если Строка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ЭтоСамоРазрегистрация = МультирежимКлиентСервер.ЭтоРазрегистрация(СсылкаНаЗаявление, Строка);
		Возврат ЭтоСамоРазрегистрация;
	КонецЕсли;
	
КонецФункции

Функция ЗаменитьНаСертификатТекущегоПользователя(
	Приемник, 
	УчетнаяЗапись,
	ИмяОтпечатка = "",
	ИмяМодельХранения = "",
	ИмяЭтоЭПВМоделиСервиса = "") Экспорт
	
	Если ЭтоМультиРежим(УчетнаяЗапись) Тогда
		
		Источник = СертификатПользователя(УчетнаяЗапись);
		
		УспешноЗаменилиОтпечаток = ЗаменитьСвойствоСертификата(
			Приемник, 
			Источник,
			ИмяОтпечатка,
			"Отпечаток");
			
		УспешноЗаменилиМодельХранения = ЗаменитьСвойствоСертификата(
			Приемник, 
			Источник,
			ИмяМодельХранения,
			"МодельХраненияЗакрытогоКлюча");
			
		УспешноЗаменилиЭтоЭПВМоделиСервиса = ЗаменитьСвойствоСертификата(
			Приемник, 
			Источник,
			ИмяЭтоЭПВМоделиСервиса,
			"ЭлектроннаяПодписьВМоделиСервиса");
			
		Результат = 
			УспешноЗаменилиОтпечаток
			И УспешноЗаменилиМодельХранения
			И УспешноЗаменилиЭтоЭПВМоделиСервиса;
			
	Иначе
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ЗаменитьСвойствоСертификата(
	Приемник, 
	Источник,
	ИмяПоляПриемника,
	ИмяПоляИсточника) Экспорт
	
	НадоЗаменить = 
		ЗначениеЗаполнено(ИмяПоляПриемника)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Приемник, ИмяПоляПриемника); 
		
	ЕстьЧемЗаменить = ЗначениеЗаполнено(Источник[ИмяПоляИсточника]);
		
	Если НадоЗаменить И ЕстьЧемЗаменить Тогда
		Приемник[ИмяПоляПриемника] = Источник[ИмяПоляИсточника];
	КонецЕсли;
		
	Возврат НадоЗаменить И ЕстьЧемЗаменить ИЛИ НЕ НадоЗаменить;

КонецФункции

Функция УчетныеЗаписиПоСертификатам(Сертификаты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиДокументооборота.Ссылка КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
	|ГДЕ
	|	УчетныеЗаписиДокументооборота.СпецоператорСвязи В (ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.КалугаАстрал), ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.Форус))
	|	И УчетныеЗаписиДокументооборота.СертификатРуководителя В(&Сертификаты)
	|	И НЕ УчетныеЗаписиДокументооборота.ПометкаУдаления
	|	И НЕ УчетныеЗаписиДокументооборота.ЭтоМультиРежим
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиДокументооборота.СертификатыЛичные КАК УчетныеЗаписиДокументооборотаСертификатыЛичные
	|ГДЕ
	|	УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка.СпецоператорСвязи В (ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.КалугаАстрал), ЗНАЧЕНИЕ(Перечисление.СпецоператорыСвязи.Форус))
	|	И УчетныеЗаписиДокументооборотаСертификатыЛичные.Отпечаток В(&Сертификаты)
	|	И НЕ УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка.ПометкаУдаления
	|	И УчетныеЗаписиДокументооборотаСертификатыЛичные.Текущий = ИСТИНА
	|	И УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка.ЭтоМультиРежим";
	                          
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");
	
КонецФункции

Функция ОтпечаткиСертификатовУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиДокументооборота.СертификатРуководителя КАК Отпечаток
		|ИЗ
		|	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		|ГДЕ
		|	УчетныеЗаписиДокументооборота.Ссылка = &УчетнаяЗапись
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчетныеЗаписиДокументооборотаСертификатыЛичные.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.УчетныеЗаписиДокументооборота.СертификатыЛичные КАК УчетныеЗаписиДокументооборотаСертификатыЛичные
		|ГДЕ
		|	УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка = &УчетнаяЗапись
		|	И УчетныеЗаписиДокументооборотаСертификатыЛичные.Текущий = ИСТИНА
		|	И УчетныеЗаписиДокументооборотаСертификатыЛичные.Ссылка.ЭтоМультиРежим");
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
КонецФункции

Функция ФизЛицоПоСНИЛС(Знач СНИЛС, ВыводитьОшибку = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СНИЛС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛССРазделителями(СНИЛС);
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПолучитьФизЛицоПоСНИЛС(СНИЛС, ФизЛицо);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) И ВыводитьОшибку Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось найти физ. лицо по СНИЛС %1. Способы исправления: 1. Создайте физ.лицо со СНИЛС %1. 2. Исправьте СНИЛС у существующего физ. лица. 3. Удалите из учетной записи физ. лицо со СНИЛС %1, отправив заявление на изменение по 1С-Отчетности';
							|en = 'Не удалось найти физ. лицо по СНИЛС %1. Способы исправления: 1. Создайте физ.лицо со СНИЛС %1. 2. Исправьте СНИЛС у существующего физ. лица. 3. Удалите из учетной записи физ. лицо со СНИЛС %1, отправив заявление на изменение по 1С-Отчетности'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, СНИЛС);
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ФизЛицоПоФИО(Фамилия, Имя, Отчество) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Фамилия) ИЛИ НЕ ЗначениеЗаполнено(Имя) Тогда
		Возврат ФизЛицо;
	КонецЕсли;
	
	ФИО = Новый Массив;
	ФИО.Добавить(СокрЛП(Фамилия));
	ФИО.Добавить(СокрЛП(Имя));
	ФИО.Добавить(СокрЛП(Отчество));
	
	ФИО = СтрСоединить(ФИО, " ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование = &Наименование
		|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", ФИО);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ФизЛицо = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ФизЛицоПоИНН(ИНН) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ФизЛицоПоФИОиСНИЛС(Фамилия, Имя, Отчество, СНИЛС) Экспорт
	
	ФизЛицо = ФизЛицоПоСНИЛС(СНИЛС);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		ФизЛицо = ФизЛицоПоФИО(Фамилия, Имя, Отчество);
	КонецЕсли;
	
	Возврат ФизЛицо;
	
КонецФункции

Функция ЭтоСНИЛСРуководителя(СНИЛС, ИНН, КПП) Экспорт
	
	ФизЛицо = ФизЛицоПоСНИЛС(СНИЛС);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организация = КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;

	Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	
	Возврат ФизЛицо = Руководитель;
	
КонецФункции

Функция ЭтоСНИЛСГлБухгалтер(СНИЛС, ИНН, КПП) Экспорт
	
	ФизЛицо = ФизЛицоПоСНИЛС(СНИЛС);
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Организация = КонтекстЭДОСервер.ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;

	ГлБухгалтер = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация); 
	
	Возврат ФизЛицо = ГлБухгалтер;
	
КонецФункции

Функция СНИЛСВладельцаЭЦППоИННиКПП(ДокументDOM, ВыводитьСообщение = Ложь) Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ФизЛицо = ФизЛицоПоПользователюИзСправочникаПользователи(Пользователь);
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Если ВыводитьСообщение Тогда
			Текст = НСтр("ru = 'Не удалось определить физ. лицо по пользователю %1. Заполните физ. лицо в справочнике Пользователи для %1';
						|en = 'Не удалось определить физ. лицо по пользователю %1. Заполните физ. лицо в справочнике Пользователи для %1'");
			Текст = СтрШаблон(Текст, ИмяПользователяИБ(Пользователь));
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(Текст);
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
	Организация = РегФайлКА.ОрганизацияИзРегФайла(ДокументDOM, ВыводитьСообщение);
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеИсполнителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДанныеИсполнителя(ФизЛицо, Организация);
	ВладелецЭЦПСНИЛС  = ДанныеИсполнителя.СНИЛС;
		
	Возврат ВладелецЭЦПСНИЛС;
	
КонецФункции

Функция СНИЛСВладельцаЭЦПИзЗаявления(СсылкаНаЗаявление, ВыводитьСообщение = Ложь) Экспорт
	
	Таблица = СсылкаНаЗаявление.ПользователиУчетнойЗаписи.Выгрузить();
	
	ВладелецЭЦПСНИЛС = СсылкаНаЗаявление.ВладелецЭЦПСНИЛС;
	Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Таблица, СсылкаНаЗаявление.ВладелецЭЦП);
		Если Строка <> Неопределено Тогда
			ВладелецЭЦПСНИЛС = Строка.СНИЛС;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Таблица, СсылкаНаЗаявление.Ответственный);
		Если Строка <> Неопределено Тогда
			ВладелецЭЦПСНИЛС = Строка.СНИЛС;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
		Строка = МультирежимКлиентСервер.СтрокаТаблицыПользователей(Таблица, Пользователи.ТекущийПользователь());
		Если Строка <> Неопределено Тогда
			ВладелецЭЦПСНИЛС = Строка.СНИЛС;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПСНИЛС) Тогда
		Если ВыводитьСообщение Тогда
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(НСтр("ru = 'Не удалось определить СНИЛС владельца ЭЦП из заявления';
																|en = 'Не удалось определить СНИЛС владельца ЭЦП из заявления'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВладелецЭЦПСНИЛС;
	
КонецФункции

Функция ПользовательПоСНИЛС(СНИЛС, ВызыватьИсключение = Ложь) Экспорт

	ФизическоеЛицо = ФизЛицоПоСНИЛС(СНИЛС, ВызыватьИсключение);

	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Пользователь = ПользовательПоФизЛицуИзСправочникаПользователи(ФизическоеЛицо, ВызыватьИсключение);
	Иначе
		Если ВызыватьИсключение Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось найти пользователя по СНИЛС ';
								|en = 'Не удалось найти пользователя по СНИЛС '") + СНИЛС;
			ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		КонецЕсли;
		Пользователь = Неопределено;
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция СоответствиеПользователейОтпечаткам(
		ДокументDOM, 
		ВладелецыЭЦП, 
		ЭтоАтрибут, 
		ВызыватьИсключение = Ложь, 
		ОрганДляОтбора = Неопределено) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ОтпечаткиПользователей = Новый Соответствие;
	
	Для каждого ДанныеВладельцаЭЦП Из ВладелецыЭЦП Цикл
		
		Если ЭтоАтрибут Тогда
			СНИЛС = КонтекстЭДОСервер.ПолучитьАтрибутУзлаXML(ДанныеВладельцаЭЦП, "СНИЛС");
			Отпечаток = КонтекстЭДОСервер.ПолучитьАтрибутУзлаXML(ДанныеВладельцаЭЦП, "Отпечаток");
		Иначе
			СНИЛС = КонтекстЭДОСервер.ПолучитьЗначениеУзлаXML(ДанныеВладельцаЭЦП, "СНИЛС");
			Отпечаток = КонтекстЭДОСервер.ПолучитьЗначениеУзлаXML(ДанныеВладельцаЭЦП, "Отпечаток");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СНИЛС) Тогда
			Продолжить;
		КонецЕсли;
		
		Пользователь = ПользовательПоСНИЛС(СНИЛС, ВызыватьИсключение);
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ОрганСоответствует = 
			ОрганДляОтбора = Неопределено
			ИЛИ РегФайлКА.ДоступенОрганВладельцуВРегФайле(ДанныеВладельцаЭЦП, ОрганДляОтбора);
		
		Если ОрганСоответствует Тогда
			ОтпечаткиПользователей.Вставить(НРег(Отпечаток), Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтпечаткиПользователей;
				
КонецФункции

Функция ГосОрганыУчетнойЗаписиИзРегистра(УчетнаяЗапись) Экспорт
	
	Результат = МультирежимКлиентСервер.СтруктураНаправлений();
	
	Органы = Новый Массив;
	Соответствие = МультирежимКлиентСервер.РеквизитыИОрганы();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНаправлений Из Выгрузка Цикл
		
		РезультатПоиска = Соответствие.НайтиПоЗначению(СтрокаНаправлений.ТипПолучателя);
		Если РезультатПоиска <> Неопределено Тогда
			Ключ = РезультатПоиска.Представление;
			Результат[Ключ] = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоМультирежимВНастройкахОргана(Организация, ОрганСтрокой) Экспорт

	Возврат РеквизитНастроекОбмена(Организация, ОрганСтрокой, "ЭтоМультирежим");

КонецФункции

Функция РеквизитНастроекОбмена(Организация, ОрганСтрокой, Имя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	*
		|ИЗ
		|	РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
		|ГДЕ
		|	НастройкиОбменаФСС.Организация = &Организация
		|	И (НастройкиОбменаФСС.Пользователь ЕСТЬ NULL
		|			ИЛИ НастройкиОбменаФСС.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФСС", ОрганСтрокой);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка[Имя];
	Иначе
		ИмяРегистра = "НастройкиОбмена" + ОрганСтрокой;
		Регистр     = Метаданные.РегистрыСведений[ИмяРегистра];
		ТипРесурса  = Регистр.Ресурсы[Имя].Тип;
		ЗначениеПоУмолчанию = ТипРесурса.ПривестиЗначение(Неопределено);
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;

КонецФункции

Процедура УдалитьСертификатыПользователейИзНастроекОбменаПриОтключенииМультирежима(Организация, ИмяРегистра) Экспорт
		
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Значение = Организация;
	НаборЗаписей.Прочитать();
	
	Для Индекс = 1 - НаборЗаписей.Количество() По 0 Цикл
		Запись = НаборЗаписей[- Индекс];
		Если ЗначениеЗаполнено(Запись.Пользователь) Тогда
			НаборЗаписей.Удалить(- Индекс);
		КонецЕсли;
	КонецЦикла;
	НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура СкорректироватьСертификатыПользователейНастроекОбмена(
		Организация, 
		ОтпечатокСертификата,
		ИмяРегистра,
		ИмяРесурсаОтпечатка) Экспорт
	
	Список = Новый ТаблицаЗначений;
	Список.Колонки.Добавить("Пользователь");
	Список.Колонки.Добавить(ИмяРесурсаОтпечатка);
	
	Для каждого Запись Из ОтпечатокСертификата Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Пользователь = Запись.Значение;
		НоваяСтрока[ИмяРесурсаОтпечатка] = Запись.Ключ;
	КонецЦикла;
	
	РеквизитыНастроек = Новый Структура("ОтключитьЗаписьРеквизитовНастроек", Истина);
	СохранитьСписокПользователейВНастройкиОбмена(
		Организация,
		Список,
		Истина,,
		РеквизитыНастроек,
		ИмяРегистра,
		ИмяРесурсаОтпечатка);
	
КонецПроцедуры

Функция МенеджерЗаписиНастроекОбмена(
		Организация,
		ОтпечатокСертификата,
		Орган,
		ИмяРегистра,
		ИмяРесурсаОтпечатка) Экспорт
	
	ЭтоМультирежимИсходный  = ЭтоМультирежимВНастройкахОргана(Организация, Орган);
	ЭтоМультирежим = 
		ЭтоМультиРежимПоОрганизации(Организация)
		И ТипЗнч(ОтпечатокСертификата) <> Тип("Строка");
	
	МультирежимОтключили = НЕ ЭтоМультирежим И ЭтоМультирежимИсходный;
	
	Если ЭтоМультирежим Тогда
		
		СкорректироватьСертификатыПользователейНастроекОбмена(
			Организация, 
			ОтпечатокСертификата,
			ИмяРегистра,
			ИмяРесурсаОтпечатка);
			
	ИначеЕсли МультирежимОтключили Тогда
		
		УдалитьСертификатыПользователейИзНастроекОбменаПриОтключенииМультирежима(
			Организация, 
			ИмяРегистра);
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация  = Организация;
	МенеджерЗаписи.Пользователь = Справочники.Пользователи.ПустаяСсылка();
	МенеджерЗаписи.Прочитать();
	
	Если ЭтоМультирежим Тогда
		
		МенеджерЗаписи.ИспользоватьНесколько = Истина;
		МенеджерЗаписи.ЭтоМультирежим = Истина;
		МенеджерЗаписи[ИмяРесурсаОтпечатка] = "";
		
	ИначеЕсли МультирежимОтключили Тогда
		
		МенеджерЗаписи.ИспользоватьНесколько = Ложь;
		МенеджерЗаписи.ЭтоМультирежим = Ложь;
		МенеджерЗаписи[ИмяРесурсаОтпечатка] = ОтпечатокСертификата;
		
	Иначе
		// ИспользоватьНесколько не меняем, остается как установил пользователь
		МенеджерЗаписи[ИмяРесурсаОтпечатка] = ОтпечатокСертификата;
	КонецЕсли;
	
	МенеджерЗаписи.Организация  = Организация;
	МенеджерЗаписи.Пользователь = Справочники.Пользователи.ПустаяСсылка();
	МенеджерЗаписи.ИспользоватьОбмен = Истина;
	
	Возврат МенеджерЗаписи;

КонецФункции

Процедура СохранитьСписокПользователейВНастройкиОбмена(
		ОрганизацияСсылка,
		Список,
		ИспользоватьНесколько,
		Отпечаток = "",
		РеквизитыНастроек = Неопределено,
		ИмяРегистра = "",
		ИмяРесурсаОтпечатка = "") Экспорт
	
	РеквизитыНастроекВызова = Новый Структура;
	РеквизитыНастроекВызова.Вставить("Доверенность", 						Неопределено);
	РеквизитыНастроекВызова.Вставить("Логин", 								"");
	РеквизитыНастроекВызова.Вставить("Пароль", 								"");
	РеквизитыНастроекВызова.Вставить("ОтключитьЗаписьРеквизитовНастроек", 	Ложь);
	Если РеквизитыНастроек <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыНастроекВызова, РеквизитыНастроек);
	КонецЕсли;
	Доверенность 						= РеквизитыНастроекВызова.Доверенность;
	Логин 								= РеквизитыНастроекВызова.Логин;
	Пароль 								= РеквизитыНастроекВызова.Пароль;
	ОтключитьЗаписьРеквизитовНастроек 	= РеквизитыНастроекВызова.ОтключитьЗаписьРеквизитовНастроек;
	
	НачатьТранзакцию();
	
	ЕстьРесурсДоверенность = НЕ ОтключитьЗаписьРеквизитовНастроек
		И Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("Доверенность") <> Неопределено;
	ЕстьРесурсЛогин = НЕ ОтключитьЗаписьРеквизитовНастроек
		И Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("Логин") <> Неопределено;
	ЕстьРесурсПароль = НЕ ОтключитьЗаписьРеквизитовНастроек И ВРег(ИмяРегистра) <> ВРег("НастройкиОбменаРПН")
		И Метаданные.РегистрыСведений[ИмяРегистра].Ресурсы.Найти("Пароль") <> Неопределено;
	
	НаборЗаписейНастроек = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписейНастроек.Отбор.Организация.Установить(ОрганизацияСсылка);
	НаборЗаписейНастроек.Прочитать();
	
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	ЗаписиДляУдаления = Новый Массив;
	ПользователиНабораЗаписей = Новый Массив;
	Для каждого ЗаписьНастроек Из НаборЗаписейНастроек Цикл
		Если НЕ ЗначениеЗаполнено(ЗаписьНастроек.Пользователь) Тогда
			ЗаписьНастроек[ИмяРесурсаОтпечатка] 	= Отпечаток;
			ЗаписьНастроек.ИспользоватьНесколько 	= (ИспользоватьНесколько = 1);
			
			Если ЕстьРесурсДоверенность Тогда
				ЗаписьНастроек.Доверенность = Доверенность;
			КонецЕсли;
			Если ЕстьРесурсЛогин Тогда
				ЗаписьНастроек.Логин = Логин;
			КонецЕсли;
			Если ЕстьРесурсПароль Тогда
				ЗаписьНастроек.Пароль = Пароль;
			КонецЕсли;
			
			ПользователиНабораЗаписей.Добавить(ПустойПользователь);
			
		Иначе
			ПараметрыОтбора = Новый Структура("Пользователь", ЗаписьНастроек.Пользователь);
			СтрокиСписка = Список.НайтиСтроки(ПараметрыОтбора);
			ОтпечатокСертификата = ?(СтрокиСписка.Количество() > 0, СтрокиСписка[0][ИмяРесурсаОтпечатка], "");
			
			ДоверенностьПользователя = ?(
				ЕстьРесурсДоверенность И СтрокиСписка.Количество() > 0,
				СтрокиСписка[0].Доверенность,
				Справочники.МашиночитаемыеДоверенностиФСС.ПустаяСсылка());
			ЛогинПользователя = ?(ЕстьРесурсЛогин И СтрокиСписка.Количество() > 0, СтрокиСписка[0].Логин, "");
			ПарольПользователя = ?(ЕстьРесурсПароль И СтрокиСписка.Количество() > 0, СтрокиСписка[0].Пароль, "");
			
			Если ЗначениеЗаполнено(ОтпечатокСертификата) И ОтпечатокСертификата <> Отпечаток
				ИЛИ ЗначениеЗаполнено(ДоверенностьПользователя)
				ИЛИ ЗначениеЗаполнено(ЛогинПользователя) ИЛИ ЗначениеЗаполнено(ПарольПользователя) Тогда
				
				ЗаписьНастроек[ИмяРесурсаОтпечатка] = ОтпечатокСертификата;
				
				Если ЕстьРесурсДоверенность Тогда
					ЗаписьНастроек.Доверенность = ДоверенностьПользователя;
				КонецЕсли;
				Если ЕстьРесурсЛогин Тогда
					ЗаписьНастроек.Логин = ЛогинПользователя;
				КонецЕсли;
				Если ЕстьРесурсПароль Тогда
					ЗаписьНастроек.Пароль = ПарольПользователя;
				КонецЕсли;
				ПользователиНабораЗаписей.Добавить(ЗаписьНастроек.Пользователь);
				
			Иначе
				ЗаписиДляУдаления.Добавить(ЗаписьНастроек);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаписьДляУдаления Из ЗаписиДляУдаления Цикл
		НаборЗаписейНастроек.Удалить(ЗаписьДляУдаления);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Отпечаток)
		И ПользователиНабораЗаписей.Найти(ПустойПользователь) = Неопределено Тогда
		
		НоваяЗаписьНастроек = НаборЗаписейНастроек.Добавить();
		НоваяЗаписьНастроек.Организация 			= ОрганизацияСсылка;
		НоваяЗаписьНастроек.Пользователь 			= ПустойПользователь;
		НоваяЗаписьНастроек.ИспользоватьОбмен 		= Истина;
		НоваяЗаписьНастроек[ИмяРесурсаОтпечатка]	= Отпечаток;
		
		Если ЕстьРесурсДоверенность Тогда
			НоваяЗаписьНастроек.Доверенность = Доверенность;
		КонецЕсли;
		Если ЕстьРесурсЛогин Тогда
			НоваяЗаписьНастроек.Логин = Логин;
		КонецЕсли;
		Если ЕстьРесурсПароль Тогда
			НоваяЗаписьНастроек.Пароль = Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаСписка Из Список Цикл
		Если (ЗначениеЗаполнено(СтрокаСписка[ИмяРесурсаОтпечатка])
			ИЛИ ЕстьРесурсДоверенность И ЗначениеЗаполнено(СтрокаСписка.Доверенность)
			ИЛИ ЕстьРесурсЛогин И ЗначениеЗаполнено(СтрокаСписка.Логин)
			ИЛИ ЕстьРесурсПароль И ЗначениеЗаполнено(СтрокаСписка.Пароль))
			И ПользователиНабораЗаписей.Найти(СтрокаСписка.Пользователь) = Неопределено Тогда
			
			НоваяЗаписьНастроек = НаборЗаписейНастроек.Добавить();
			НоваяЗаписьНастроек.Организация 			= ОрганизацияСсылка;
			НоваяЗаписьНастроек.Пользователь 			= СтрокаСписка.Пользователь;
			НоваяЗаписьНастроек[ИмяРесурсаОтпечатка] 	= СтрокаСписка[ИмяРесурсаОтпечатка];
			
			Если ЕстьРесурсДоверенность Тогда
				НоваяЗаписьНастроек.Доверенность = СтрокаСписка.Доверенность;
			КонецЕсли;
			Если ЕстьРесурсЛогин Тогда
				НоваяЗаписьНастроек.Логин = СтрокаСписка.Логин;
			КонецЕсли;
			Если ЕстьРесурсПароль Тогда
				НоваяЗаписьНастроек.Пароль = СтрокаСписка.Пароль;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписейНастроек.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ЕстьПравоНаТранспортноеСообщение(Сообщение, ВыводитьСообщения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сообщение.УчетнаяЗапись) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЭтоМультиРежим(Сообщение.УчетнаяЗапись) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаПроверкиПрав = СообщенияДляРасшифровки(Сообщение);
	Если ТаблицаПроверкиПрав.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СообщенияДляРасшифровки_ПроверитьПраваНаУчетнуюЗапись(
		ТаблицаПроверкиПрав,
		Сообщение.УчетнаяЗапись,
		Ложь);
	
	ТекстОшибки = ТаблицаПроверкиПрав[0].ТекстОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) И ВыводитьСообщения Тогда
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
	Возврат НЕ ЗначениеЗаполнено(ТекстОшибки);
	
КонецФункции

// На базе метода ДО.СообщенияДляРасшифровки
Функция СообщенияДляРасшифровки(Сообщение) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Текст = КонтекстЭДОСервер.ЗапросВыбораСообщенийДляРасшифровки();
	
	Позиция   = СтрНайти(Текст, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваТранспортныхСообщений");
	Подстрока = Сред(Текст, Позиция);
	
	Текст = СтрЗаменить(Текст, Подстрока, " ГДЕ ТранспортныеСообщения.Ссылка  = &Сообщение");
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	Запрос.УстановитьПараметр("ТипыТранспортныхСообщенийЦБ", КонтекстЭДОСервер.ТипыТранспортныхСообщенийЦБ());
	Запрос.УстановитьПараметр("ТипыСообщенийИнициированныхФНС", КонтекстЭДОСервер.ТипыСообщенийИнициированныхФНС());
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции

Функция СообщенияДляРасшифровки_ПроверитьПраваНаУчетнуюЗапись(
		Таблица,
		УчетнаяЗапись,
		ПроверкаПравНаправлений = Истина) Экспорт
	
	Если Таблица.Колонки.Найти("ТекстОшибки") = Неопределено Тогда
		Таблица.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ЭтоМультиРежим", Истина);
	
	Права = ПраваНаУчетнуюЗапись(УчетнаяЗапись);
	
	Сертификат = СертификатПользователя(
		УчетнаяЗапись,
		"ЭлектроннаяПодписьВМоделиСервиса, МодельХраненияЗакрытогоКлюча");
	
	// Добавляем учетную запись в отбор
	Отбор.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	
	НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если Сертификат.Найден И Права.ЕстьДанные Тогда
			
			// Переопределяем ЭлектроннаяПодписьВМоделиСервиса и МодельХраненияЗакрытогоКлюча
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Сертификат);
			
			Если НЕ ПроверкаПравНаправлений Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем права на орган
			ИмяРеквизита = МультирежимКлиентСервер.РеквизитПоОргану(НайденнаяСтрока.Направление);
			Если ИмяРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НайденнаяСтрока, "ТранспортноеСообщение") Тогда
				Представление = "(" + Строка(НайденнаяСтрока.ТранспортноеСообщение) + ") ";
			Иначе
				Представление = "";
			КонецЕсли;
			
			ЕстьПравоНаОрган = Права[ИмяРеквизита];
			Если НЕ ЕстьПравоНаОрган Тогда
				
				НайденнаяСтрока.Удалить = Истина;
				
				ДоступныеОрганы = МультирежимКлиентСервер.ГосОрганыДляСравнения(Права);
				ДоступныеОрганы = МультирежимКлиентСервер.ПредставлениеОргановПоМассивуНаправление(ДоступныеОрганы);
				
				Шаблон = НСтр("ru = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку гос. орган %2 отсутствует среди органов, доступных Вам (Вам доступны - %3).
									|Для получения доступа к %2 обратитесь к администратору учетной записи.';
									|en = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку гос. орган %2 отсутствует среди органов, доступных Вам (Вам доступны - %3).
									|Для получения доступа к %2 обратитесь к администратору учетной записи.'");
				
				НайденнаяСтрока.ТекстОшибки = СтрШаблон(
					Шаблон,
					Представление,
					НайденнаяСтрока.Направление,
					ДоступныеОрганы);
				
			КонецЕсли;
			
			// Проверяем шифровальщика
			Если НЕ Права.ЭтоШифровальщик И НайденнаяСтрока.ТолькоДляШифровальщика Тогда
				НайденнаяСтрока.Удалить = Истина;
				
				Шаблон = НСтр("ru = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку вы не являетесь получателем входящих сообщений %2.
									|Для того, чтобы стать получателем входящих сообщений ФНС, обратитесь к администратору учетной записи.';
									|en = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку вы не являетесь получателем входящих сообщений %2.
									|Для того, чтобы стать получателем входящих сообщений ФНС, обратитесь к администратору учетной записи.'");
				
				НайденнаяСтрока.ТекстОшибки = СтрШаблон(
					Шаблон,
					Представление,
					НайденнаяСтрока.Направление);
				
			КонецЕсли;
			
		Иначе
			
			НайденнаяСтрока.Удалить = Истина;
			
			Шаблон = НСтр("ru = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку Вас нет в списке пользователей учетной записи %3.
								|Для того, чтобы стать пользователем учетной записи %3, обратитесь к администратору учетной записи.';
								|en = 'Сообщение от %2 (%1) не может быть расшифровано, поскольку Вас нет в списке пользователей учетной записи %3.
								|Для того, чтобы стать пользователем учетной записи %3, обратитесь к администратору учетной записи.'");
			
			НайденнаяСтрока.ТекстОшибки = СтрШаблон(
				Шаблон,
				Представление,
				НайденнаяСтрока.Направление,
				Строка(УчетнаяЗапись));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция УчетнаяЗаписьЗаполнена(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетнаяЗапись = Неопределено
		ИЛИ УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка()
		ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись.ИдентификаторАбонента)
		ИЛИ ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УдалитьУчетныеЗаписиДокументооборота")
		ИЛИ ТипЗнч(УчетнаяЗапись) = Тип("СправочникОбъект.УдалитьУчетныеЗаписиДокументооборота") Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

 КонецФункции
 
Функция ВладелецЭЦПЭтоРуководитель(Организация) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	УчетнаяЗапись = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопРеквизиты = КонтекстЭДОСервер.ДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	Если ЗначениеЗаполнено(ДопРеквизиты) Тогда
		
		СНИЛС   = ДопРеквизиты.ВладелецЭЦПСНИЛС;
		ФизЛицо = Мультирежим.ФизЛицоПоСНИЛС(СНИЛС);
		
		Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
		
		ЭтоРуководитель = ФизЛицо = Руководитель И ЗначениеЗаполнено(ФизЛицо);
		Возврат ЭтоРуководитель
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТипСубъектаСертификатаПользователя(
		Знач УчетнаяЗапись,
		Знач Организация = Неопределено,
		Знач Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ УчетнаяЗаписьЗаполнена(УчетнаяЗапись) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Если ЭтоМультиРежим(УчетнаяЗапись) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
		Иначе
			Пользователь = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Сертификаты = УчетнаяЗапись.СертификатыЛичные;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", Пользователь);
	Отбор.Вставить("Текущий", Истина);
	
	НайденныеСтроки = Сертификаты.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденныеСтроки[0].ВладелецОГРН) И СтрДлина(НайденныеСтроки[0].ВладелецОГРН) = 15 Тогда
			Возврат "ИП";
			
		ИначеЕсли ЗначениеЗаполнено(НайденныеСтроки[0].ВладелецОГРН)
			ИЛИ ЗначениеЗаполнено(НайденныеСтроки[0].ВладелецИННЮЛ) Тогда
			
			Возврат "ЮЛ";
			
		Иначе
			// Например, портал ФСРАР принимает сертификаты физических лиц без ОГРНИП в качестве сертификатов ИП по ИНН
			Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(НайденныеСтроки[0].ВладелецИНН)
				И НайденныеСтроки[0].ВладелецИНН = ДокументооборотСКОВызовСервера.ИННОрганизации(Организация) Тогда
				
				Возврат "ИП";
			КонецЕсли;
			
			Возврат "ФЛ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти