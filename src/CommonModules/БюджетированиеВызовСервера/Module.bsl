
#Область ПрограммныйИнтерфейс

// Возвращает типы значений аналитики.
//
// Параметры:
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Аналитика статьи. 
//  
// Возвращаемое значение:
//  Соответствие - доступные типы аналитик статей бюджетов:
//   *Ключ - Тип -  Тип значения аналитики.
//   *Значение - Строка - Полное имя объекта метаданных.
//
Функция ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	Возврат ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов);
	
КонецФункции

// Возвращает параметры расшифровки и основное действие для "особой" расшифровки отчета.
//
// Параметры:
// 	Расшифровка - Число - Идентификатор расшифровки
// 	АдресДанныхРасшифровки - Строка - Адрес временного хранилища с данными расшифровки.
//
// Возвращаемое значение:
// 	Структура - содержит параметры расшифровки и основное действие.
//
Функция ДанныеРасшифровкиОтчета(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
	ОсновноеДействие = ЭлементРасшифровки.ОсновноеДействие;
	
	ПоляРасшифровки = Новый Структура;
	Для каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
		ПоляРасшифровки.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
	КонецЦикла;
	
	ПоляРасшифровкиРодителей = Новый Структура;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
	ПараметрыДанных = Новый Структура;
	ДанныеРасшифровкиНастройки = ДанныеРасшифровки.Настройки; // НастройкиКомпоновкиДанных - 
	Для каждого Параметр Из ДанныеРасшифровкиНастройки.ПараметрыДанных.Элементы Цикл
		Если Не Параметр.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыДанных.Вставить(Параметр.Параметр, Параметр.Значение);
	КонецЦикла; 
	
	Отбор = Новый Структура;
	Для каждого ЭлементОтбора Из ДанныеРасшифровкиНастройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Или ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		КонецЕсли;
		Поле = Строка(ЭлементОтбора.ЛевоеЗначение);
		Отбор.Вставить(Поле, ЭлементОтбора.ПравоеЗначение);
	КонецЦикла;
	
	ДанныеРасшифровкиОтчета = Новый Структура;
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровкиРодители", ПоляРасшифровкиРодителей);
	ДанныеРасшифровкиОтчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ДанныеРасшифровкиОтчета.Вставить("Отбор", Отбор);
	ДанныеРасшифровкиОтчета.Вставить("ОсновноеДействие", ОсновноеДействие);
	
	Возврат ДанныеРасшифровкиОтчета;
	
КонецФункции

#Область ПреобразованиеТиповАналитики

// Возвращает массив пустых ссылок плана видов характеристик АналитикиСтатейБюджетов.
//
// Возвращаемое значение:
// 	Массив - массив пустых ссылок.
//
Функция ЗаменяемыеПустыеЗначенияАналитики() Экспорт
	Массив = Новый Массив;
	
	Типы = БюджетированиеСервер.ВсеТипыАналитик().Типы();
	
	Для каждого Тип Из Типы Цикл
		ПустаяСсылка = Новый (Тип);
		Массив.Добавить(ПустаяСсылка);
	КонецЦикла; 
	
	Возврат Массив;
КонецФункции

// Обходит объект / запись регистра по реквизитам поиска, и в случае нахождения Заменяемых значений меняет значение на ЗначениеЗамены.
//
// Параметры:
// 	Объект - СправочникОбъект - объект любого справочника
// 				- ДокументОбъект   - объект любого документа
// 				- РегистрБухгалтерииЗаписьИмяРегистраБухгалтерии - запись любого регистра.
// 				- РегистрНакопленияЗаписьИмяРегистраНакопления - запись любого регистра.
// 				- РегистрСведенийЗаписьИмяРегистраСведений - запись любого регистра.
// 	РеквизитыПоиска - Строка - Строки-пути к полям замены, разделенные запятой, например "ИмяРеквизита1, ИмяТабличнойЧасти.ИмяРеквизита" или "ИмяТабличнойЧасти.ИмяРеквизита, ИмяТабличнойЧасти2.ИмяРеквизита"
// 				- Массив из Строка - Массив строк-путей к полям замены, например "ИмяРеквизита" или "ИмяТабличнойЧасти.ИмяРеквизита"
// 	ЗаменяемыеЗначения - Массив  - Массив значений, на которые будет проверяться значение в поле перед заменой.
// 	ЗначениеЗамены - Произвольный - Неопределено, ЛюбаяСсылка.
// 	ОбъектИзменен - Булево - Признак изменения объекта.
//
Процедура ВыполнитьЗаменыЗначенийВОбъекте(Объект, РеквизитыПоиска, ЗаменяемыеЗначения, ЗначениеЗамены, ОбъектИзменен = Ложь) Экспорт
	
	Если ТипЗнч(РеквизитыПоиска) = Тип("Строка") Тогда
		РеквизитыПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыПоиска, ",",, Истина);
	КонецЕсли;
	
	РазмещенияПолей = ПолучитьРазмещениеПолейАналитикиВТаблицах(РеквизитыПоиска);
	
	Для каждого КлючИЗначение Из РазмещенияПолей Цикл
		
		ИмяТабличнойЧасти = КлючИЗначение.Ключ;
		РеквизитыРазмещения = КлючИЗначение.Значение;
		
		Если ИмяТабличнойЧасти = "" Тогда
			
			Для каждого ИмяПоля Из РеквизитыРазмещения Цикл
				
				Для каждого ЗаменяемоеЗначение Из ЗаменяемыеЗначения Цикл
					
					Если Объект[ИмяПоля] = ЗаменяемоеЗначение Тогда
						Объект[ИмяПоля] = ЗначениеЗамены;
						ОбъектИзменен = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
				
				Для каждого ИмяПоля Из РеквизитыРазмещения Цикл
					
					Для каждого ЗаменяемоеЗначение Из ЗаменяемыеЗначения Цикл
						
						Если СтрокаТЧ[ИмяПоля] = ЗаменяемоеЗначение Тогда
							СтрокаТЧ[ИмяПоля] = ЗначениеЗамены;
							ОбъектИзменен = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоляРодительскихЭлементовРасшифровки(ЭлементРасшифровки, ПоляРасшифровкиРодителей)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ПоляРасшифровкиРодителей.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(Знач СхемаКомпоновкиДанных, 
					Знач АдресСхемыКомпоновкиДанныхВХранилище, Знач АдресНастроекКомпоновкиДанных, 
					ВХранилище = Ложь, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СхемаКомпоновкиДанных) Тогда
		
		Схема = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных.
		Если ПолучитьXML(Схема) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			СхемаКомпоновкиДанных   = "";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(Схема);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(Схема);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных));
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВХранилище Тогда
		ХранилищеСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(ХранилищеСхемыКомпоновкиДанных, УникальныйИдентификатор);
		ХранилищеНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновкиДанных, УникальныйИдентификатор);
	Иначе
		ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
	КонецЕсли;
	
	Возврат Новый Структура("СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных", 
							СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных);
	
КонецФункции


// Возвращает адреса схемы компоновки данных во временном хранилище.
// 
// Параметры:
//  НаименованиеСхемыКомпоновкиДанных - Строка - Наименование схемы компоновки данных
//  ХранилищеСхемыКомпоновкиДанных - Неопределено, ХранилищеЗначения - параметр для хранения значения типа СхемаКомпоновкиДанных
//  ХранилищеНастроекКомпоновкиДанных - Неопределено, ХранилищеЗначения - параметр для хранения значения адреса настроек
//                                      во временном хранилище.
//  УникальныйИдентификатор - УникальныйИдентификатор - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура:
//   * СхемаКомпоновкиДанных - Строка - адрес значения во временном хранилище.
//   * НастройкиКомпоновкиДанных - Строка - адрес значения во временном хранилище.
//
Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Знач НаименованиеСхемыКомпоновкиДанных, Знач ХранилищеСхемыКомпоновкиДанных,
																Знач ХранилищеНастроекКомпоновкиДанных, Знач УникальныйИдентификатор) Экспорт
																
	Если ТипЗнч(ХранилищеСхемыКомпоновкиДанных) = Тип("Строка") Тогда
		Если ПустаяСтрока(ХранилищеСхемыКомпоновкиДанных) Тогда
			ХранилищеСхемыКомпоновкиДанных = Неопределено;
		Иначе
			ХранилищеСхемыКомпоновкиДанных = ПолучитьИзВременногоХранилища(ХранилищеСхемыКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ХранилищеНастроекКомпоновкиДанных) = Тип("Строка") Тогда
		Если ПустаяСтрока(ХранилищеНастроекКомпоновкиДанных) Тогда
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		Иначе
			ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(ХранилищеНастроекКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	СхемаКомпоновкиДанных = Неопределено;
	Если ЗначениеЗаполнено(НаименованиеСхемыКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(НаименованиеСхемыКомпоновкиДанных);
	ИначеЕсли ТипЗнч(ХранилищеСхемыКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных;
	ИначеЕсли ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = Неопределено;
	Если ТипЗнч(ХранилищеНастроекКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ХранилищеНастроекКомпоновкиДанных;
	ИначеЕсли ХранилищеНастроекКомпоновкиДанных <> Неопределено Тогда
		Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый НастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	Возврат Адреса;
	
КонецФункции

Функция ПолучитьРазмещениеПолейАналитикиВТаблицах(РеквизитыПоиска)
	РазмещенияПолей = Новый Соответствие;
	
	// Подготавливаем поочередный обход реквизитов и реквизитов табличных частей
	
	Для каждого ПолноеИмяРеквизита Из РеквизитыПоиска Цикл
		
		НомерЭлемента = СтрНайти(ПолноеИмяРеквизита, ".");
		Если НомерЭлемента = 0 Тогда
			ТабличнаяЧасть = ""; // реквизит объекта или поле записи
			ИмяПоля = ПолноеИмяРеквизита;
		Иначе
			ТабличнаяЧасть = Сред(ПолноеИмяРеквизита, 1, НомерЭлемента - 1);
			ИмяПоля = Сред(ПолноеИмяРеквизита, НомерЭлемента + 1);
		КонецЕсли;
		
		РеквизитыРазмещения = РазмещенияПолей.Получить(ТабличнаяЧасть);
		Если РеквизитыРазмещения = Неопределено Тогда
			РеквизитыРазмещения = Новый Массив;
		КонецЕсли;
		
		РеквизитыРазмещения.Добавить(ИмяПоля);
		
		РазмещенияПолей.Вставить(ТабличнаяЧасть, РеквизитыРазмещения);
		
	КонецЦикла;
	
	Возврат РазмещенияПолей
КонецФункции

#КонецОбласти