
#Область ПрограммныйИнтерфейс

#Область РаботаСоСчетамиИСубконто

// Снимает/устанавливает активность проводок документа (бух. учет).
//
// Параметры:
//	Документ - ДокументСсылка.* - Ссылка на документ, для которого меняется активность проводок.
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ОбщегоНазначенияБП.ПропуститьБизнесЛогикуПриЗаписи(ПроводкиДокумента);
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//	Счет         - ПланСчетовСсылка.Хозрасчетный - Счет, к которому относится субконто.
//  Субконто     - РегистрБухгалтерииСубконто.Хозрасчетный - Набор субконто.
//	ИмяСубконто  - Строка, Число - Номер, имя или вид устанавливаемого субконто.
//  ЗначениеСубконто - Произвольный - Значение устанавливаемого субконто.
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда // номер субконто

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе // имя или вид субконто

		ВидСубконто = ?(ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"),
						ИмяСубконто,
						ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто]);
		
		// Проверка, что указанный вид субконто есть на счете.
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто2 <> ВидСубконто
		   И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда

			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям.
//
// Параметры:
//	Проводка - РегистрБухгалтерииЗапись.Хозрасчетный - Проводка, в которой нужно установить подразделение.
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение.
//	ДтКт - Строка - Если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту.
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям.
//
// Параметры:
//	Проводка - РегистрБухгалтерииЗапись.Хозрасчетный - Проводка, в которой нужно установить подразделения.
// 	ПодразделениеДт - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение по дебету.
// 	ПодразделениеКт - СправочникСсылка.ПодразделенияОрганизаций - Устанавливаемое подразделение по кредиту.
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

// Дополняет переданные счета их субсчетами. После первого вызова запоминает субсчета
// и при последующих вызовах не обращается к СУБД.
//
// Параметры:
//  МассивСчетов - Массив - список счетов, которые нужно дополнить субсчетами.
//
// Возвращаемое значение:
//   Массив      - список исходных счетов плюс их субсчета.
//
Функция СформироватьМассивСубсчетов(МассивСчетов) Экспорт

	МассивСубсчетов = Новый Массив;
	Для каждого СчетВерхнегоУровня Из МассивСчетов Цикл
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетВерхнегоУровня);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСубсчетов, Субсчета);
	
	КонецЦикла; 
	
	Возврат МассивСубсчетов;

КонецФункции // СформироватьМассивСубсчетов()

// Возвращает максимальное количество субконто на счете.
//
// Возвращаемое значение:
//	Число - Максимальное количество субконто.
//
Функция МаксимальноеКоличествоСубконто() Экспорт

	Возврат Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

КонецФункции

#КонецОбласти

#Область ИсчислениеПериодов

// Определяет дату начала отчетного года для составления финансовой отчетности в соответствии с Законом "О БУХГАЛТЕРСКОМ
// УЧЕТЕ" N 402-ФЗ (6 декабря 2011 года).
//
// Статья 15
// 3. В случае, если государственная регистрация экономического субъекта, за исключением кредитной организации,
// произведена после 30 сентября, первым отчетным годом является, если иное не установлено экономическим субъектом,
// период с даты государственной регистрации по 31 декабря календарного года, следующего за годом его государственной
// регистрации, включительно.
// 
// Параметры:
//  Период		 - Дата - любая дата из отчетного года
//  Организация	 - СправочникСсылка.Организации - Организация, начало отчетного года которой нужно получить.
// 
// Возвращаемое значение:
//  Дата         - дата начала периода; как правило начало года, но может быть и датой регистрации организации
//  Неопределено - запрошен период ранее даты регистрации организации.
//
Функция НачалоОтчетногоГода(Период, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.НачалоНалоговогоПериода(
		Организация,
		Период,
		ВариантРасширенногоПервогоНалоговогоПериода(),
		Перечисления.Периодичность.Год);
		
КонецФункции

#КонецОбласти

#Область ПервичныеДокументы

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы НУ в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// Она единообразно работает и с ПР/ВР, и с НУ.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
//
Функция ВариантРасширенногоПервогоНалоговогоПериода() Экспорт
	Возврат Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследнемКвартале;
КонецФункции

// Определяет в целом для сеанса работы, может ли потребоваться рассчитывать,
// заполнять и отображать пользователю суммы НУ в проводках.
// 
// Обращение к функции следует выполнять через кеш повтоно используемых значений -
// см. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// Она единообразно работает и с ПР/ВР, и с НУ.
// 
// Возвращаемое значение:
//  Булево - Истина, если может потребоваться использовать суммы НУ в проводках.
//
Функция ПользователюДоступныСуммыНУ() Экспорт
	
	// Функциональные опции, привязанные к ресурсу периодического регистра сведений,
	// фактически могут быть использованы только при использовании Периода в качестве параметров функциональной опции.
	
	// Потому что значение функциональной опции вычисляется по срезу последних регистра и если период не передан,
	// то значение функциональной опции будет Истина только в том случае, когда на самый поздний момент значение ресурса Истина,
	// а не в том случае, когда в одной из записей значение ресурса Истина.
	
	// Поэтому здесь не обращаемся к функциональной опции, а обращаемся к данным регистра непосредственно.
	
	Возврат БухгалтерскийУчетПереопределяемый.ПользователюДоступныСуммыНУ();

КонецФункции

// Определяет в контексте отдельных операций, отчетов и т.п., нужно ли рассчитывать,
// заполнять и отображать пользователю суммы разниц в проводках.
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период      - Дата - дата, на которую проверяется значение настройки;
//                если не заполнена, то проверяется наиболее поздняя
//  ДоступныйВидИспользованияСумм - Строка - максимально возможный.
//                                  См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
// 
// Возвращаемое значение:
//   Строка - варианты использования разниц. См. БухгалтерскийУчетВызовСервераПовтИсп.ПользователюДоступныСуммыНалогНаПрибыль()
//
Функция ИспользоватьСуммыНалогНаПрибыль(Организация, Период, ДоступныйВидИспользованияСумм = "") Экспорт

	Возврат БухгалтерскийУчетПереопределяемый.ИспользоватьСуммыНалогНаПрибыль(
		Организация, Период, ДоступныйВидИспользованияСумм);
	
КонецФункции

// Настраивает поля учета разниц в форме, отображающей набор записей регистра Хозрасчетный.
//
// Параметры:
//  ПоляНалогНаПрибыль - Соответствие - ключ = поле формы, в том числе - заголовки строк; значение = вид учета НУ/ПР/ВР
//  ПоляЗаголовков - Структура - поля формы, отображающие заголовки колонок, содержащих показатели НУ, ПР, ВР:
//                    * Дт - ПолеФормы, ГруппаФормы -
//                    * Кт - ПолеФормы, ГруппаФормы -
//  Период         - Дата - основной период набора записей
//  Организация    - СправочникСсылка.Организации - организация набора записей
//                 - Неопределено - организация набора записей не может быть определена
//  ВалютаРУ       - СправочникСсылка.Валюты - Валюта регл. учета
//
Процедура НастроитьПоляУчетаРазниц(ПоляНалогНаПрибыль, ПоляЗаголовков, Период, Организация = Неопределено, ВалютаРУ = Неопределено) Экспорт
	
	БухгалтерскийУчетПереопределяемый.НастроитьПоляУчетаРазниц(ПоляНалогНаПрибыль, ПоляЗаголовков,
		Период, Организация, ВалютаРУ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
