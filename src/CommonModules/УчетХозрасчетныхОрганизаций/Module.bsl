
#Область СлужебныйПрограммныйИнтерфейс

#Область НачальнаяНастройкаПрограммы

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыПрограммы.ИспользоватьСтатьиФинансирования Тогда
		ПервоначальноеЗаполнениеОбъектовАналитики();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкаРасчетаЗарплаты

Процедура ЗаписатьНастройкиНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПараметрыНастроек.ИспользоватьСтатьиФинансирования Тогда
		Константы.ИспользоватьСтатьиФинансированияЗарплата.Установить(Параметры.ИспользоватьСтатьиФинансирования);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПриДобавленииОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.7";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ЗарплатаКадры.СтатьиРасходовЗарплатаНачальноеЗаполнениеПоСпособамРасчетов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0a2a867f-0d6c-4fd3-8cb8-ea9fa4c0ee69");
	Обработчик.Комментарий = НСтр("ru = 'Начальное заполнение справочника Статьи расходов.';
									|en = 'Initial fill in the directory Expense items.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("aadeba90-94d6-4380-8c0a-4c4c219d18d0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Начисления удержания по сотрудникам.""';
									|en = 'Fill in the expense item in the register ""Accruals of withheld amounts by employees"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникамАвансом";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e3172e25-b2c4-4961-90b5-3a5e6f9b0402");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Начисления удержания по сотрудникам авансом.""';
									|en = 'Fill in the expense item in the register ""Accruals of the withheld amount by employees with the advance payment.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВВзаиморасчетыССотрудниками";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c324203-078d-451b-97dd-7401fbd23a86");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Взаиморасчеты с сотрудниками.""';
									|en = 'Fill in the expense item in the register ""Mutual payments with employees.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВЗарплатаКВыплате";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("38eed547-adac-4360-addb-d2d4fb0e78e9");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Зарплата к выплате.""';
									|en = 'Fill in the expense item in register ""Salary to be paid.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВЗарплатаКВыплатеАвансом";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fd14faa0-d961-4a10-b1f2-5cb61b6a9447");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Зарплата к выплате авансом.""';
									|en = 'Fill in the expense item in the register ""Salary to be paid as advance.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВБухгалтерскиеВзаиморасчетыССотрудниками";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e668848-7611-4580-8c48-d7a6b393cabe");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Бухгалтерские взаиморасчеты с сотрудниками.""';
									|en = 'Fill in the expense item in the register ""Accountants'' mutual payments with employees.""'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.8";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВСведенияОДоходахНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5968449a-9c0b-4bbf-a021-31acfe522ca4");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Учет доходов для исчисления НДФЛ.""';
									|en = 'Fill in the expense item in the register ""Accounting of income for calculation of the income tax.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.56";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ЗаполнитьСтатьюРасходовВБухучетНачисленияУдержанияПоСотрудникам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e789a9f1-f9a3-4d39-8834-2f57a693d6b1");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Бухучет начисления удержания по сотрудникам.""';
									|en = 'Fill in the expense item in the register ""Accounting of accrual of the withheld amount by employees.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.56";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ЗаполнитьСтатьюРасходовВСтраховыеВзносыПоФизическимЛицам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cb50ea48-e683-47ad-9145-04768b281fc1");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Страховые взносы по физическим лицам.""';
									|en = 'Fill in the expense item in the register ""Insurance fees by individuals.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.56";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоКонтрагентамАкционерам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("350ff9e9-afba-42d1-9bc2-85296c812c6b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Начисления удержания по контрагентам, акционерам.""';
									|en = 'Fill in the expense item in the register ""Accruals of the withheld amount by counterparties, members.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.56";
	Обработчик.Процедура = "ОтражениеЗарплатыВБухучетеРасширенный.ЗаполнитьСтатьюРасходовВБухучетНачисленияУдержанияПоКонтрагентамАкционерам";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0152a72a-3530-4da9-9ae1-4e9103f87369");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в регистре ""Бухучет начисления удержания по контрагентам, акционерам.""';
									|en = 'Fill in the expense item in the register ""Accounting of accrual of the withheld amount by counterparties, members.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.7";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВБанк";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e7c22f8e-5b98-4d62-b91e-3c38474af142");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости в банк.""';
									|en = 'Fill in the expense item in documents ""Registers for a bank.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.7";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВКассу";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a1f15491-1541-418b-8166-8f0296e3fa54");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости в кассу.""';
									|en = 'Fill in the expense item in documents ""Registers for a cash office.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.7";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыПеречислением";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2c585b3e-71cc-465b-a314-050e2ce2c768");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости на счета.""';
									|en = 'Fill in the expense item in documents ""Registers for bills.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.7";
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыРаздатчиком";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();   
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2727d7a0-2dde-4bca-ac58-2d7b6f546304");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение статьи расходов в документах ""Ведомости через раздатчика.""';
									|en = 'Fill in the expense item in documents ""Registers through a distributor.""'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.18.76";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e1e4090e-cc33-42cb-a262-db4b4baf854b");
	Обработчик.Процедура = "УчетХозрасчетныхОрганизаций.ОбновитьИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата";
	Обработчик.Комментарий = НСтр("ru = 'Обновление функциональной опции Использовать расчет зарплаты и статьи финансирования зарплата';
									|en = 'Update functional option Use payroll and financing items of payroll'");
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникам(ПараметрыОбновления = Неопределено) Экспорт

	ГруппыОпераций = Новый Массив();
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыОпераций", ГруппыОпераций);
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В(&ГруппыОпераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В (&ГруппыОпераций)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.*
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.НачисленияУдержанияПоСотрудникам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокВыплаты = Неопределено;
		МД = Регистратор.Метаданные();
		Если МД.Реквизиты.Найти("ПорядокВыплаты") <> Неопределено Тогда
			ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПорядокВыплаты");
		КонецЕсли;
		ДанныеМежрасчетногоПериода = УчетНачисленнойЗарплаты.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ДанныеМежрасчетногоПериода = ДанныеМежрасчетногоПериода;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоСотрудникамАвансом(ПараметрыОбновления = Неопределено) Экспорт

	ГруппыОпераций = Новый Массив();
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано);
	ГруппыОпераций.Добавить(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы);
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппыОпераций", ГруппыОпераций);
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В(&ГруппыОпераций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	НачисленияУдержанияПоСотрудникам.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты В (&ГруппыОпераций)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.*
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержанияПоСотрудникам.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоСотрудникамАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВВзаиморасчетыССотрудниками(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Регистратор,
	|	Взаиморасчеты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ Взаиморасчеты.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Взаиморасчеты.*
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО Взаиморасчеты.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ВзаиморасчетыССотрудниками.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВЗарплатаКВыплате(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор,
	|	ЗарплатаКВыплате.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ ЗарплатаКВыплате.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.*
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ЗарплатаКВыплате.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ЗарплатаКВыплате.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплате.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплате.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ЗарплатаКВыплате.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВЗарплатаКВыплатеАвансом(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Регистратор,
	|	ЗарплатаКВыплате.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗарплатаКВыплате.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ ЗарплатаКВыплате.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.*
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО ЗарплатаКВыплате.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ЗарплатаКВыплатеАвансом.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ЗарплатаКВыплатеАвансом.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ЗарплатаКВыплатеАвансом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.ЗарплатаКВыплатеАвансом.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВБухгалтерскиеВзаиморасчетыССотрудниками(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Взаиморасчеты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Регистратор КАК Регистратор,
	|	Взаиморасчеты.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ Взаиморасчеты.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	Взаиморасчеты.*
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО Взаиморасчеты.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

	РегистрыНакопления.БухгалтерскиеВзаиморасчетыССотрудниками.УстановитьИспользованиеИтогов(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВСведенияОДоходахНДФЛ(ПараметрыОбновления = Неопределено) Экспорт

	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	Начисления = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.СтоимостьПодарковПризов);
	Начисления.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику);
	
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|ГДЕ
	|	СведенияОДоходахНДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|	И СведенияОДоходахНДФЛ.Начисление В(&Начисления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходахНДФЛ.Регистратор КАК Регистратор,
	|	СведенияОДоходахНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА СведенияОДоходахНДФЛ.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|				И СведенияОДоходахНДФЛ.Начисление В (&Начисления)
	|			ТОГДА &СтатьяРасчетыПоОплатеТруда
	|		ИНАЧЕ СведенияОДоходахНДФЛ.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	СведенияОДоходахНДФЛ.*
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходахНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО СведенияОДоходахНДФЛ.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.СведенияОДоходахНДФЛ.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.СведенияОДоходахНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВНачисленияУдержанияПоКонтрагентамАкционерам(ПараметрыОбновления = Неопределено) Экспорт
	
	СтатьиРасходовПоСпособамРасчетов 	= ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда 			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	СтатьяРасчетыСКонтрагентами			= СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяРасчетыПоОплатеТруда", СтатьяРасчетыПоОплатеТруда);
	Запрос.УстановитьПараметр("СтатьяРасчетыСКонтрагентами", СтатьяРасчетыСКонтрагентами);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияУдержания.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|ГДЕ
	|	НачисленияУдержания.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияУдержания.Регистратор КАК Регистратор,
	|	НачисленияУдержания.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НачисленияУдержания.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА НачисленияУдержания.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НФДЛДивидендыСотрудникам))
	|						ТОГДА &СтатьяРасчетыПоОплатеТруда
	|					ИНАЧЕ &СтатьяРасчетыСКонтрагентами
	|				КОНЕЦ
	|		ИНАЧЕ НачисленияУдержания.СтатьяРасходов
	|	КОНЕЦ КАК СтатьяРасходов,
	|	НачисленияУдержания.*
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК Регистраторы
	|		ПО НачисленияУдержания.Регистратор = Регистраторы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		Регистратор = Выборка.Регистратор;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.НаборЗаписей", "Регистратор", Регистратор) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВБанк(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВБанк, ПараметрыОбновления)
КонецПроцедуры	

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыВКассу(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыВКассу, ПараметрыОбновления)
КонецПроцедуры	

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыПеречислением(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыПеречислением, ПараметрыОбновления)
КонецПроцедуры	

Процедура ЗаполнитьСтатьюРасходовВВедомостьНаВыплатуЗарплатыРаздатчиком(ПараметрыОбновления = Неопределено) Экспорт 
	ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(Метаданные.Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком, ПараметрыОбновления)
КонецПроцедуры	

Процедура ОбновитьИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата(ПараметрыОбновления = Неопределено) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") И 
		ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И Не Константы.ИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата.Получить() Тогда
		КонстантаМенеджер = Константы.ИспользоватьРасчетЗарплатыИСтатьиФинансированияЗарплата.СоздатьМенеджерЗначения();
		КонстантаМенеджер.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонстантаМенеджер);
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеСтатьиБюджетноеФинансирование()
	
	Возврат Новый Структура("Код, Наименование",  НСтр("ru = 'БФ';
														|en = 'BF'"),  НСтр("ru = 'Бюджетное финансирование';
																			|en = 'Budget financing'"));
	
КонецФункции

Функция СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи)

	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСтатьиФинансирования = Справочники.СтатьиФинансированияЗарплата;
	СтатьяФинансирования = СправочникСтатьиФинансирования.НайтиПоНаименованию(ОписаниеСтатьи.Наименование, Истина);
	Если СтатьяФинансирования.Пустая() Тогда
		
		НовыйЭлемент = СправочникСтатьиФинансирования.СоздатьЭлемент();
		НовыйЭлемент.Наименование = ОписаниеСтатьи.Наименование;
		НовыйЭлемент.Код = ОписаниеСтатьи.Код;
		НовыйЭлемент.Записать();
		СтатьяФинансирования = НовыйЭлемент.Ссылка;
		
	Иначе
		
		СтатьяФинансированияОбъект = СтатьяФинансирования.ПолучитьОбъект();
		Если Не ЗначениеЗаполнено(СтатьяФинансированияОбъект.Код) Тогда
			СтатьяФинансированияОбъект.Код = ОписаниеСтатьи.Код;
			СтатьяФинансированияОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтатьяФинансирования;

КонецФункции

Функция ОписаниеСтатьиПредпринимательскаяДеятельность()

	Возврат Новый Структура("Код, Наименование",  НСтр("ru = 'ПД';
														|en = 'IP'"),  НСтр("ru = 'Предпринимательская деятельность';
																			|en = 'Entrepreneurial activity'"));

КонецФункции

Функция НаименованиеОсновногоСпособаОтражения()

	Возврат НСтр("ru = '26. Общехозяйственные расходы';
				|en = '26. Business expenses '");

КонецФункции

Функция СоздатьСпособОтраженияПоНаименованию(НаименованиеСпособаОтражения)

	УстановитьПривилегированныйРежим(Истина);
	
	СправочникиСпособыОтраженияЗарплатыВБухУчете = Справочники.СпособыОтраженияЗарплатыВБухУчете;
	СпособОтражения = СправочникиСпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию(НаименованиеСпособаОтражения, Истина);
	Если СпособОтражения.Пустая() Тогда
		
		НовыйЭлемент = СправочникиСпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
		НовыйЭлемент.Наименование = НаименованиеСпособаОтражения;
		НовыйЭлемент.Записать();
		СпособОтражения = НовыйЭлемент.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СпособОтражения;

КонецФункции

Процедура ПервоначальноеЗаполнениеОбъектовАналитики() Экспорт
	
	СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьиБюджетноеФинансирование());
	СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьиПредпринимательскаяДеятельность());
	СоздатьСпособОтраженияПоНаименованию(НаименованиеОсновногоСпособаОтражения());

КонецПроцедуры

Функция БухучетОрганизацииПоУмолчанию() Экспорт

	Настройки = РегистрыСведений.БухучетЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		ОписаниеСтатьи = ОписаниеСтатьиПредпринимательскаяДеятельность();
		СтатьяФинансирования = Справочники.СтатьиФинансированияЗарплата.НайтиПоНаименованию(ОписаниеСтатьи.Наименование, Истина);
		Если СтатьяФинансирования.Пустая() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	БухучетЗарплатыОрганизаций.СтатьяФинансирования
			|ИЗ
			|	РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
			|ГДЕ
			|	БухучетЗарплатыОрганизаций.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)";
			
			УстановитьПривилегированныйРежим(Истина);
			Результат = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			Если Результат.Пустой() Тогда
				СтатьяФинансирования = СоздатьСтатьюФинансированияПоОписанию(ОписаниеСтатьи);
			Иначе
				Выборка = Результат.Выбрать();
				СтатьяФинансирования = Выборка.СтатьяФинансирования;
			КонецЕсли;	
			
		КонецЕсли;
		
		Настройки.СтатьяФинансирования = СтатьяФинансирования;
		
	КонецЕсли;	
	
	НаименованиеСпособаОтражения = НаименованиеОсновногоСпособаОтражения();
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию(НаименованиеСпособаОтражения, Истина);
	Если СпособОтражения.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете
		|ИЗ
		|	РегистрСведений.БухучетЗарплатыОрганизаций КАК БухучетЗарплатыОрганизаций
		|ГДЕ
		|	БухучетЗарплатыОрганизаций.СпособОтраженияЗарплатыВБухучете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка)";
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			СпособОтражения = СоздатьСпособОтраженияПоНаименованию(НаименованиеСпособаОтражения);
		Иначе
			Выборка = Результат.Выбрать();
			СпособОтражения = Выборка.СпособОтраженияЗарплатыВБухучете;
		КонецЕсли;	
		
	КонецЕсли;
	
	Настройки.СпособОтраженияЗарплатыВБухучете = СпособОтражения;
	Настройки.ОтношениеКЕНВД = Перечисления.ОтношениеКЕНВДЗатратНаЗарплату.НеЕНВД;
	Настройки.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц();
	
	Возврат Настройки;

КонецФункции

Процедура ЗаполнитьСтатьюРасходовВедомостейНаВыплатуЗарплаты(МетаданныеВедомости, ПараметрыОбновления) 
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	МетаданныеВедомости.ПолноеИмя() + ".Зарплата"); 
	
	ОписаниеБлокировки = ОбновлениеИБ.ОписаниеБлокируемыхДанных(МетаданныеВедомости);
	
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления);
	
	Если ОбновляемыеДанные.Пустой() Тогда
		ОбновлениеИБ.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	Иначе
		ОбновлениеИБ.ПродолжитьОбработчик(ПараметрыОбновления);
	КонецЕсли;	

	СтатьиРасходовПоСпособамРасчетов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	СтатьяРасчетыПоОплатеТруда       = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
	
	ВыборкаОбновляемыхДанных = ОбновляемыеДанные.Выбрать();
	Пока ВыборкаОбновляемыхДанных.Следующий() Цикл
		
		ОписаниеБлокировки.ПоляБлокировки.Ссылка = ВыборкаОбновляемыхДанных.Ссылка;
		Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
			Продолжить	
		КонецЕсли;
		
		Ведомость = ВыборкаОбновляемыхДанных.Ссылка.ПолучитьОбъект();
		Для Каждого СтрокаТЧ Из Ведомость.Зарплата Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
				СтрокаТЧ.СтатьяРасходов = СтатьяРасчетыПоОплатеТруда;
			КонецЕсли;	
		КонецЦикла;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Ведомость,,, РежимЗаписиДокумента.Запись);
		ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);			
		
	КонецЦикла;

КонецПроцедуры	

#КонецОбласти
