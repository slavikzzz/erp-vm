#Область ПрограммныйИнтерфейс

// Функция возвращает наименование вида аналитики бюджетирования.
//
// Параметры:
//  ВидАналитики  - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//
// Возвращаемое значение:
//   Строка - наименование вида аналитики.
//
Функция ПредставлениеВидаАналитики(ВидАналитики) Экспорт
	Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
		Возврат "";
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "Наименование");
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура дополняет дерево операторов для конструктора формул
// финансовой и бюджетной отчетности.
//
// Параметры:
//  Дерево  - ДеревоЗначений - дерево операторов конструктора формул.
//
Процедура ДополнитьДеревоОператоров(Дерево) Экспорт
	
	ПредставлениеГруппы = НСтр("ru = 'Функции';
								|en = 'Functions'");
	ИдентификаторГруппы = "Функции";
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Новый Структура("ЭтоГруппа, Идентификатор", Истина, ИдентификаторГруппы));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Группа = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, ИдентификаторГруппы, ПредставлениеГруппы);
	Иначе
		Группа = НайденныеСтроки[0];
	КонецЕсли;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыФормулБюджетирования.ЗначенияПеречисления Цикл
		
		РаботаСФормулами.ДобавитьОператор(Группа,
			Перечисления.ВидыФормулБюджетирования.ТекстФункции(ЗначениеПеречисления.Имя),
			Перечисления.ВидыФормулБюджетирования.ТекстФункции(ЗначениеПеречисления.Имя),
			ЗначениеПеречисления.Синоним);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает значение цвета стиля
// вызывается из БюджетнаяОтчетностьКлиентСервер.
//
// Параметры:
//  Имя  - Строка - Имя цвета стиля.
//
// Возвращаемое значение:
//   Цвет - Цвет стиля, полученный по имени.
//
Функция ПолучитьЦвет(Имя) Экспорт
	
	Возврат ЦветаСтиля[Имя];
	
КонецФункции


// Возвращает дерево элементов формы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, для элементов которых производится заполнение.
// 	ИмяЭлементаДерева - Строка - Имя элемента дерева на форме.
// Возвращаемое значение:
// 	ДеревоЗначений - дерево с колонками:
// 	 *ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента отчета.
// 	 *НестандартнаяКартинка - Число - Индекс картинки.
// 	 *Наименование - Строка - Представление элемента.
// 	 *ЭтоГруппа - Булево - Флаг группы.
// 	 *ЭлементВидаОтчетности - СправочникСсылка.СтатьиБюджетов -
// 	 						- СправочникСсылка.ПоказателиБюджетов -
// 	 						- СправочникСсылка.НефинансовыеПоказателиБюджетов -
// 	 						- Строка -
// 	 						- ПеречислениеСсылка.Периодичность -
// 	 						- ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	 						- СправочникСсылка.Сценарии -
// 	 						- СправочникСсылка.Организации - 
// 	 						- СправочникСсылка.СтруктураПредприятия - Элемент вида отчетности.
// 	
Функция ДеревоЭлементовФормы(Форма, ИмяЭлементаДерева)
	ДеревоЭлементов = Форма.РеквизитФормыВЗначение(ИмяЭлементаДерева);
	Возврат ДеревоЭлементов;
КонецФункции

// Процедура заполняет палитру новых элементов, доступных
// для выбора в экземпляре бюджета, форме конструктора формул.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для элементов которых производится заполнение.
//  Параметры - Структура - дополнительные параметры дерева.
//
Процедура ОбновитьДеревоНовыхЭлементов(Форма, Параметры) Экспорт
	
	БыстрыйПоиск = Неопределено;
	ИмяЭлементаДерева = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	БыстрыйПоиск = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"БыстрыйПоиск");
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ВременнаяТаблицаИндексовКартинок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаНовыеЭлементыОтчета();
	
	ДоступныеВидыЭлементов = ПолучитьИспользуемыеВидыЭлементовФинансовыхОтчетов(
									Параметры.РежимДерева,
									ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИспользоватьДляВводаПлана", Ложь));
	Запрос.УстановитьПараметр("ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	Запрос.УстановитьПараметр("РежимДерева", Параметры.РежимДерева);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДеревоЭлементов = ДеревоЭлементовФормы(Форма, ИмяЭлементаДерева);
	ДеревоЭлементов.Строки.Очистить();
	
	// Создадим базовую структуру
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[0], ДеревоЭлементов);
	
	// Добавим статьи
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru = 'Статьи бюджетов';
												|en = 'Budget flow items'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.СтатьиБюджетов.ПустаяСсылка();
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[1], СтрокаПоказателей);
		Если ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры, "ИспользоватьДляВводаПлана", Ложь)
			ИЛИ Параметры.РежимДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы Тогда
			СтрокаПоказателей.ВидЭлемента = Неопределено;
		Иначе
			СтрокаПоказателей.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru = 'Показатели бюджетов';
												|en = 'Budget balance items'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.ПоказателиБюджетов.ПустаяСсылка();
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[2], СтрокаПоказателей);
		Если ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры, "ИспользоватьДляВводаПлана", Ложь)
			ИЛИ Параметры.РежимДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы Тогда
			СтрокаПоказателей.ВидЭлемента = Неопределено;
		Иначе
			// Добавим показатели
			СтрокаПоказателей.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru = 'Нефинансовые показатели';
												|en = 'Non-financial items'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.НефинансовыеПоказателиБюджетов.ПустаяСсылка();
		СтрокаПоказателей.ВидЭлемента = Неопределено;
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[3], СтрокаПоказателей);
	КонецЕсли;
	
	// Добавим группировки
	Если Параметры.РежимДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета Тогда
		СтрокаГруппировки = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Если Параметры.Свойство("АналитикиШапки") Тогда
			АналитикиШапки = Параметры.АналитикиШапки;
		Иначе
			АналитикиШапки = Новый Массив;
		КонецЕсли;
		ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, СтрокаГруппировки, 
						Параметры.МодельБюджетирования, Параметры.ИспользоватьДляВводаПлана, АналитикиШапки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БыстрыйПоиск) Тогда
		КопияДерева = ДеревоЭлементов.Скопировать();
		КопияДерева.Строки.Очистить();
		// Отсортируем элементы отчета внутри видов
		// порядок видов элементов сохраним.
		Для Каждого СтрокаДерева Из ДеревоЭлементов.Строки Цикл
			СтрокаДерева.Строки.Сортировать("Наименование", Истина);
		КонецЦикла;
		ОтобратьЭлементыПоБыстромуПоиску(ДеревоЭлементов, КопияДерева, БыстрыйПоиск);
		ДеревоЭлементов = КопияДерева;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

Функция ТекстЗапросаНовыеЭлементыОтчета()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// 1. БАЗОВАЯ СТРУКТУРА
	|"
	+
	"ВЫБРАТЬ
	|	ВидыЭлементовОтчетов.Ссылка КАК ВидЭлемента,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК Наименование,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка
	|ИЗ
	|	Перечисление.ВидыЭлементовФинансовогоОтчета КАК ВидыЭлементовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО ВидыЭлементовОтчетов.Ссылка = ТаблицаИндексовКартинок.ВидЭлемента
	|			И (ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """")
	|ГДЕ
	|	ВидыЭлементовОтчетов.Ссылка В(&ДоступныеВидыЭлементов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЭлементовОтчетов.Порядок"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.1 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО СТАТЬЯМ БЮДЖЕТОВ
	|"
	+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.2 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО ПОКАЗАТЕЛЯМ БЮДЖЕТИРОВАНИЯ
	|"
	+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭлементыОтчетов.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Целевой)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.3 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО НЕФИНАНСОВЫМ ПОКАЗАТЕЛЯМ БЮДЖЕТИРОВАНИЯ
	|"
	+
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель)
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИспользуемыеВидыЭлементовФинансовыхОтчетов(РежимРаботы, ИспользоватьДляВводаПлана)
	
	Список = Новый СписокЗначений;
	
	Если РежимРаботы <> Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаАвторасчетаСложнойТаблицы Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);

		Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета
			ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы Тогда
			Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		КонецЕсли;
	КонецЕсли;
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ПроизводныйПоказательСложнойТаблицы
		ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаАвторасчетаСложнойТаблицы Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
	КонецЕсли;
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе);
	КонецЕсли;
	
	Если ИспользоватьДляВводаПлана
		И (РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета
		ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы) Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Процедура ОтобратьЭлементыПоБыстромуПоиску(ДеревоЭлементов, КопияДерева, БыстрыйПоиск)
	
	Для Каждого СтрокаДерева Из ДеревоЭлементов.Строки Цикл
		Если СтрНайти(НРег(СтрокаДерева.Наименование), НРег(БыстрыйПоиск))
			И ЗначениеЗаполнено(СтрокаДерева.ВидЭлемента)
			И СтрокаДерева.ЭтоГруппа = Ложь Тогда
			
			ЗаполнитьЗначенияСвойств(КопияДерева.Строки.Добавить(), СтрокаДерева);
			
		КонецЕсли;
		ОтобратьЭлементыПоБыстромуПоиску(СтрокаДерева, КопияДерева, БыстрыйПоиск);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуИзмерения(СтрокаКудаДобавлять, Наименование, ЭлементОтчета = Неопределено)
	
	НоваяСтрока = СтрокаКудаДобавлять.Строки.Добавить();
	Измерение = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение;
	НоваяСтрока.ВидЭлемента = Измерение;
	НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(Измерение);
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.ЭлементВидаОтчетности = ?(ЭлементОтчета = Неопределено, Наименование, ЭлементОтчета);
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, СтрокаГруппировки, МодельБюджетирования, ИспользоватьДляВводаПлана, АналитикиШапки)
	
	// Добавим элементы таблицы
	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	СтрокаЭлемент = СтрокаИзмерения.Строки.Добавить();
	ЭлементТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;
	СтрокаЭлемент.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ЭлементТаблицы);
	СтрокаЭлемент.Наименование = Строка(Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы);
	СтрокаЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;

	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
	СтрокаИзмерения.ВидЭлемента = Неопределено; //группировочная запись о измерениях 
	                                            // не может быть перенесена в элементы бюджета
	
	// добавление периода
	
	ПредставлениеИзмерения = НСтр("ru = 'Период';
									|en = 'Period'");
	СтрокаПериод = ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения);
	СтрокаПериод.ВидЭлемента = Неопределено; //группировочная запись о измерениях 
	СтрокаПериод.ЭтоГруппа = Истина;         //не может быть перенесена в элементы бюджета
	СтрокаПериод.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Год);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Год);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Полугодие);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Полугодие);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Квартал);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Квартал);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Месяц);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Месяц);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Декада);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Декада);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.Неделя);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.Неделя);
	ПредставлениеИзмерения = Строка(Перечисления.Периодичность.День);
	ДобавитьСтрокуИзмерения(СтрокаПериод, ПредставлениеИзмерения, Перечисления.Периодичность.День);
	
	// добавление аналитики
	
	ПредставлениеИзмерения = НСтр("ru = 'Аналитика';
									|en = 'Dimension'");
	СтрокаАналитика = ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения);
	СтрокаАналитика.ВидЭлемента = Неопределено; //группировочная запись о измерениях 
	СтрокаАналитика.ЭтоГруппа = Истина;         //не может быть перенесена в элементы бюджета
	СтрокаАналитика.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Если Не ИспользоватьДляВводаПлана Тогда
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Измерение = "Аналитика" + НомерАналитики;
			ПредставлениеИзмерения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеИзмеренияБюджетирования(
				Измерение);
			ДобавитьСтрокуИзмерения(СтрокаАналитика, ПредставлениеИзмерения, Измерение);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Аналитика.Ссылка,
	|	Аналитика.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК Аналитика
	|ГДЕ
	|	НЕ Аналитика.ПометкаУдаления
	|	И НЕ Аналитика.Ссылка В (&АналитикиШапки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИспользоватьДляВводаПлана", ИспользоватьДляВводаПлана);
	Запрос.УстановитьПараметр("АналитикиШапки", АналитикиШапки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Проекты
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСтрокуИзмерения(СтрокаАналитика, Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	
	// добавление организации
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", 
			Новый Структура("МодельБюджетирования", МодельБюджетирования))
			И НЕ ИспользоватьДляВводаПлана Тогда
		Измерение = "Организация";
		ПредставлениеИзмерения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеИзмеренияБюджетирования(
			Измерение);
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения, Измерение);
	КонецЕсли;
	
	// добавление подразделения
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", 
			Новый Структура("МодельБюджетирования", МодельБюджетирования))
			И НЕ ИспользоватьДляВводаПлана Тогда
		Измерение = "Подразделение";
		ПредставлениеИзмерения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеИзмеренияБюджетирования(
			Измерение);
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения, Измерение);
	КонецЕсли;
	
	// добавление сценария
	
	Если Не ИспользоватьДляВводаПлана Тогда
		Измерение = "Сценарий";
		ПредставлениеИзмерения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеИзмеренияБюджетирования(
			Измерение);
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения, Измерение);
	КонецЕсли;
	
	// добавление валюты
	
	Если Не ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоВалют") Тогда
		Измерение = "Валюта";
		ПредставлениеИзмерения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеИзмеренияБюджетирования(
			Измерение);
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, ПредставлениеИзмерения, Измерение);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора)
	
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОтбора.Родитель <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно)
		И НЕ (ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено) Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если НЕ (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений")
			   И ЭлементОтбора.ПравоеЗначение.Количество() = 1) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПреобразоватьПериодПоПравилуИсточника(Параметры, ПравилоИсточника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ &ВыражениеПериода";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеПериода", ПравилоИсточника);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", Параметры.ГраницаФактДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка[0];
	
КонецФункции

Функция ПериодГруппировкиСоСмещением(Период, ПериодичностьСмещения, ПериодСмещения)
	
	Если Не ЗначениеЗаполнено(ПериодичностьСмещения)
		ИЛИ Не ЗначениеЗаполнено(ПериодСмещения) Тогда
		
		Возврат Период;
		
	КонецЕсли;
	
	ВыражениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"ДобавитьКДате(&Период, %1, -%2)",
		ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(ПериодичностьСмещения),
		ПериодСмещения);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ &ВыражениеПериода";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеПериода", ВыражениеПериода);
	Запрос.УстановитьПараметр("Период", Период);
	
	Возврат Запрос.Выполнить().Выгрузить()[0][0];
	
КонецФункции

Функция ПолучитьПараметрыОтчета(ПараметрыОтчета, ДанныеЯчеек, СвязаннаяСтрокаДанных, ВидРасшифровки, ИмяПоказателя)
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыОтчета.ВидБюджета);
	
	ИсточникиДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьОписаниеИсточниковДанных(
		ПараметрыОтчета.ВидБюджета,
		СтруктураКолонок,
		Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета(
		ПараметрыОтчета.ВидБюджета,
		СтруктураКолонок,
		Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	СтрокаСтруктурыЯчеек = СтруктураЯчеек.Найти(СвязаннаяСтрокаДанных.ИндексСтроки, "ИндексСтроки");
	СтрокаПараметровЯчейки = ПараметрыЯчеек.Найти(СвязаннаяСтрокаДанных.ИндексСтроки, "ИндексСтроки");
	
	ПараметрыВидаЭлемента = Неопределено;
	ИменаРеквизитов = "";
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаРеквизитов = ИменаРеквизитов + ?(ИменаРеквизитов = "", "", ",")+ "ВидАналитики" + НомерАналитики;
	КонецЦикла;
	// Для статей и показателей должна указываться имеющаяся аналитика.
	Если ВидРасшифровки = "НефинансовыйПоказатель" Тогда
		ЭлементОтчета = СвязаннаяСтрокаДанных.НефинансовыйПоказатель;
		ИменаРеквизитов = ИменаРеквизитов + "," + "ПоОрганизациям" + "," + "ПоПодразделениям" + "," + "ПоСценариям";
		Если ЗначениеЗаполнено(ЭлементОтчета) Тогда
			ПараметрыВидаЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОтчета, ИменаРеквизитов);
		Иначе
			ПараметрыВидаЭлемента = Новый Структура(ИменаРеквизитов);
			ПараметрыВидаЭлемента.ПоОрганизациям = Ложь;
			ПараметрыВидаЭлемента.ПоПодразделениям = Ложь;
			ПараметрыВидаЭлемента.ПоСценариям = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Измерение Из СтруктураКолонок.Измерения Цикл
		
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "заполнить"
			ИЛИ СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "отобрать" Тогда
			
			Если НЕ ПараметрыВидаЭлемента = Неопределено Тогда
				Если Измерение = "Организация" Тогда
					Если НЕ ПараметрыВидаЭлемента.ПоОрганизациям Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли Измерение = "Подразделение" Тогда
					Если НЕ ПараметрыВидаЭлемента.ПоПодразделениям Тогда
						Продолжить;
					КонецЕсли;
				ИначеЕсли Измерение = "Сценарий" Тогда
					Если НЕ ПараметрыВидаЭлемента.ПоСценариям Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных[Измерение]) Тогда
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных[Измерение];
			Иначе
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			КонецЕсли;
			Отбор.Использование = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивАналитикСИерархией = Новый Массив;
	
	Для Каждого ВидАналитики Из СтруктураКолонок.ВидыАналитик Цикл
		Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если НЕ ПараметрыВидаЭлемента = Неопределено Тогда
			ЕстьАналитика = Ложь;
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				Если ПараметрыВидаЭлемента["ВидАналитики" + НомерАналитики] = ВидАналитики Тогда
					ЕстьАналитика = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьАналитика Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "заполнить"
			ИЛИ СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "отобрать" Тогда
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Если СвязаннаяСтрокаДанных[Измерение] = Неопределено Тогда
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Отбор.ПравоеЗначение = БюджетированиеПовтИсп.ПустыеЗначенияАналитики();
				СтрокаПредставление  = НСтр("ru = 'Аналитика ""%1"" не заполнена';
											|en = 'Dimension ""%1"" is required'");
				Отбор.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПредставление, ВидАналитики);
			Иначе
				// Если по данной строке выводится иерархическая группировка, то вид Сравнения должен быть В иерархии
				Если СвязаннаяСтрокаДанных.ВыводИерархии Тогда
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					МассивАналитикСИерархией.Добавить(ВидАналитики);
				Иначе
					Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных[Измерение];
			КонецЕсли;
			Отбор.Использование = Истина;
			
		ИначеЕсли СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "прочие"
			ИЛИ СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "документ" Тогда
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Родитель" + Измерение, СтрокаСтруктурыЯчеек["Родитель" + Измерение]);
			СтруктураПоиска.Вставить("Флаг" + Измерение, "отобрать");
			
			КопияТаблицыДляСписка = СтруктураЯчеек.Скопировать(СтруктураПоиска);
			КопияТаблицыДляСписка.Свернуть(Измерение);
			Массив = КопияТаблицыДляСписка.ВыгрузитьКолонку(Измерение);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Массив);
			
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			Отбор.ПравоеЗначение = СписокЗначений;
			Отбор.Использование = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыОтчета.ДополнительныеФильтрыПоАналитикам Цикл
		
		Измерение = КлючИЗначение.Ключ;
		Значение = Неопределено;
		Используется = ПараметрыОтчета.Свойство(КлючИЗначение.Ключ, Значение);
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = Значение;
		Отбор.Использование = Используется;
		
	КонецЦикла;
	
	Для Каждого Источник Из ИсточникиДанных Цикл
		Если Источник.Идентификатор = СтрокаСтруктурыЯчеек.ИД_Источника Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиАналитики = Неопределено;
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.ПоказательБюджетов) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательБюджетов");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.ПоказательБюджетов;
		Отбор.Использование = Истина;
		НастройкиАналитики = СвязаннаяСтрокаДанных.ПоказательБюджетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.СтатьяБюджетов) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджетов");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.СтатьяБюджетов;
		Отбор.Использование = Истина;
		Если НастройкиАналитики = Неопределено Тогда
			НастройкиАналитики = СвязаннаяСтрокаДанных.СтатьяБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.НефинансовыйПоказатель) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НефинансовыйПоказатель");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.НефинансовыйПоказатель;
		Отбор.Использование = Истина;
		Если НастройкиАналитики = Неопределено Тогда
			НастройкиАналитики = СвязаннаяСтрокаДанных.НефинансовыйПоказатель;
		КонецЕсли;
	КонецЕсли;
	
	НачалоПериода = ПреобразоватьПериодПоПравилуИсточника(ПараметрыОтчета, Источник.ВыражениеНачалоПериода);
	КонецПериода = ПреобразоватьПериодПоПравилуИсточника(ПараметрыОтчета, Источник.ВыражениеКонецПериода);
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ЗначениеПериода = СвязаннаяСтрокаДанных[ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период];
		Если ЗначениеЗаполнено(ЗначениеПериода) Тогда
			
			ИскомыйИсточник = Неопределено;
			Для Каждого ИсточникПериодовГруппировки Из СтруктураОписанияОтчета.ИсточникиПериодовГруппировок Цикл
				Если ИсточникПериодовГруппировки.Идентификатор = СтрокаСтруктурыЯчеек.ИД_ИсточникаПериодов Тогда
					ИскомыйИсточник = ИсточникПериодовГруппировки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			НачалоПериода = ЗначениеПериода;
			КонецПериода  = БюджетированиеКлиентСервер.ДатаКонцаПериода(НачалоПериода, МинимальнаяПериодичность);
			
			Если ЗначениеЗаполнено(Источник.ПериодичностьСмещения)
			   И ЗначениеЗаполнено(Источник.ПериодСмещения) Тогда
				
				НачалоПериода = ПериодГруппировкиСоСмещением(НачалоПериода, Источник.ПериодичностьСмещения, Источник.ПериодСмещения);
				КонецПериода  = ПериодГруппировкиСоСмещением(КонецПериода,  Источник.ПериодичностьСмещения, Источник.ПериодСмещения);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	
	Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Период");
	Параметр.Значение = Период;
	Параметр.Использование = Истина;
	
	Если Не ВидРасшифровки = "НефинансовыйПоказатель" Тогда
	
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаАктуальностиДанных");
		Параметр.Значение = КонецДня(ПараметрыОтчета.ДатаАктуальности);
		Параметр.Использование = Истина;
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Валюта");
	
		ЕстьВалюта = СтруктураКолонок.Измерения.Найти("Валюта") <> Неопределено И ЗначениеЗаполнено(СвязаннаяСтрокаДанных.Валюта);
		
		Если ЕстьВалюта Тогда
			Параметр.Значение = СвязаннаяСтрокаДанных.Валюта;
		Иначе
			Параметр.Значение = ПараметрыОтчета.ВалютаОтчета;
		КонецЕсли;
		Параметр.Использование = Истина;
		
		Если ПараметрыОтчета.Свойство("ФункциональнаяВалюта") И ЗначениеЗаполнено(ПараметрыОтчета.ФункциональнаяВалюта) Тогда
			Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
			Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ФункциональнаяВалюта");
			Параметр.Значение = ПараметрыОтчета.ФункциональнаяВалюта;
			Параметр.Использование = Истина;
		КонецЕсли;
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОборотыВСтатусах");
		Параметр.Значение = ПараметрыОтчета.Статус;
		Параметр.Использование = Истина;
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(Источник.ДополнительныйОтбор.Отбор, ФиксированныеНастройки.Отбор);
		БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводом(ФиксированныеНастройки, ПараметрыОтчета);
		
	Иначе
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Периодичность");
		Если МинимальнаяПериодичность <> Неопределено Тогда
			ЗначениеПериодичность = МинимальнаяПериодичность
		Иначе
			ЗначениеПериодичность = ПараметрыОтчета.ВидБюджета.Периодичность;
		КонецЕсли;
		Параметр.Значение = ЗначениеПериодичность;
		Параметр.Использование = Истина;
		
	КонецЕсли;
	
	ПризнакиИзмерений = Новый Структура;
	Параметры = Новый Структура("МодельБюджетирования", ПараметрыОтчета.ВидБюджета.Владелец);
	ПризнакиИзмерений.Вставить("ПоОрганизациям", ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", Параметры));
	ПризнакиИзмерений.Вставить("ПоПодразделениям", ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", Параметры));
	ПризнакиИзмерений.Вставить("ПоСценариям", Истина);
	
	Если ЗначениеЗаполнено(НастройкиАналитики) Тогда
		
		МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		СтруктураРеквизитов = Новый Структура();
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			СтруктураРеквизитов.Вставить("Аналитика" + НомерАналитики, "ВидАналитики" + НомерАналитики);
		КонецЦикла;
		
		Если ТипЗнч(НастройкиАналитики) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
			СтруктураРеквизитов.Вставить("ПоОрганизациям");
			СтруктураРеквизитов.Вставить("ПоПодразделениям");
			СтруктураРеквизитов.Вставить("ПоСценариям");
		КонецЕсли;
		
		НастройкиАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАналитики, СтруктураРеквизитов);
		
		Если НастройкиАналитики.Свойство("ПоОрганизациям") Тогда
			ЗаполнитьЗначенияСвойств(ПризнакиИзмерений, НастройкиАналитики, "ПоОрганизациям, ПоПодразделениям");
			ПризнакиИзмерений.Вставить("ПоСценариям", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивИзмеренийКДобавлению = Новый Массив;
	
	МассивИзмеренийКДобавлению.Добавить(ВидРасшифровки);
	Если ПризнакиИзмерений.ПоСценариям Тогда
		МассивИзмеренийКДобавлению.Добавить("Сценарий");
	КонецЕсли;
	Если ПризнакиИзмерений.ПоОрганизациям Тогда
		МассивИзмеренийКДобавлению.Добавить("Организация");
	КонецЕсли;
	Если ПризнакиИзмерений.ПоПодразделениям Тогда
		МассивИзмеренийКДобавлению.Добавить("Подразделение");
	КонецЕсли;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		МассивИзмеренийКДобавлению.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	Если МинимальнаяПериодичность <> Неопределено Тогда
		Если ВидРасшифровки = "НефинансовыйПоказатель" Тогда
			МассивИзмеренийКДобавлению.Добавить("Период");
		Иначе
			МассивИзмеренийКДобавлению.Добавить(ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период);
		КонецЕсли;
	КонецЕсли;
	
	МассивИзмеренийОтчета = Новый Массив;
	
	Если ВидРасшифровки <> "НефинансовыйПоказатель" Тогда
		
		Для Каждого Элемент Из МассивИзмеренийКДобавлению Цикл
			
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ФиксированныеНастройки.Отбор, Элемент);
			
			Если ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкиАналитики) Тогда
				
				Если СтрНайти(Элемент, "Аналитика") Тогда
					ВидАналитики = НастройкиАналитики[Элемент];
					Если ЗначениеЗаполнено(ВидАналитики) Тогда
						ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ФиксированныеНастройки.Отбор, ИмяПоля);
						Если ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора) Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивИзмеренийОтчета.Добавить(Элемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не МассивИзмеренийОтчета.Количество() Тогда
		Если ВидРасшифровки = "ПоказательБюджетов" Тогда
			МассивИзмеренийОтчета.Добавить("ПоказательБюджетов");
		ИначеЕсли ВидРасшифровки = "СтатьяБюджетов" Тогда
			МассивИзмеренийОтчета.Добавить("СтатьяБюджетов");
		ИначеЕсли ВидРасшифровки = "НефинансовыйПоказатель" Тогда
			МассивИзмеренийОтчета.Добавить("НефинансовыйПоказатель");
		КонецЕсли;
		
		МассивИзмеренийОтчета.Добавить("Регистратор");
	КонецЕсли;
	
	НоваяГруппировка = Неопределено;
	Для Каждого ЭлементМассива Из МассивИзмеренийОтчета Цикл
		ВидАналитики = Неопределено;
		Если НастройкиАналитики.Свойство(ЭлементМассива, ВидАналитики)
			И МассивАналитикСИерархией.Найти(ВидАналитики) <> Неопределено Тогда
			ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		Иначе
			ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли;
		Если НоваяГруппировка = Неопределено Тогда
			НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(ФиксированныеНастройки.Структура, ЭлементМассива, ТипГруппировки);
		Иначе
			НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(НоваяГруппировка, ЭлементМассива, ТипГруппировки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидРасшифровки = "ПоказательБюджетов" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "НачальныйОстатокСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Начальный остаток';
									|en = 'Opening balance'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "ПриходСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Приход';
									|en = 'Receipt'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "РасходСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Расход';
									|en = 'Expense'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "ОборотСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Оборот (Приход - Расход)';
									|en = 'Turnover (Inflow - Outflow)'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "КонечныйОстатокСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Конечный остаток';
									|en = 'Closing balance'");
		
	ИначеЕсли ВидРасшифровки = "СтатьяБюджетов" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "Сценария");
		ПолеВыбор.Использование = Истина;
		Если ИмяПоказателя = "Сумма" Тогда
			ПолеВыбор.Заголовок = НСтр("ru = 'Сумма сценария';
										|en = 'Scenario amount'");
		ИначеЕсли ИмяПоказателя = "Количество" Тогда
			ПолеВыбор.Заголовок = НСтр("ru = 'Количество сценария';
										|en = 'Number of scenario'");
		Иначе
			ПолеВыбор.Заголовок = НСтр("ru = 'Значение сценария';
										|en = 'Value of scenario'");
		КонецЕсли;
		
	ИначеЕсли ВидРасшифровки = "НефинансовыйПоказатель" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных("ЗначениеПоказателя");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru = 'Значение';
									|en = 'Value'");
		
	КонецЕсли;
	
	Возврат ФиксированныеНастройки;
	
КонецФункции

Функция ПараметрыОткрытияОтчетаРасшифровки(ПараметрыФормирования, Расшифровка, АдресДанныхЯчеек) Экспорт
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек); // ТаблицаЗначений -
	СвязаннаяСтрокаДанных = ДанныеЯчеек[Расшифровка.ИндексСтрокиДанных];
	ИмяПоказателя = Расшифровка.ИмяПоказателя;
	
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыФормирования.ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета(
		ПараметрыФормирования.ВидБюджета,
		СтруктураКолонок,
		ПараметрыФормирования.РежимФормирования);
	
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	Если СвязаннаяСтрокаДанных.ОсновнойЭлемент Тогда
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидЭлемента;
	Иначе
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидОперанда;
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	Если ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ОборотнаяВедомостьБюджетирования.Форма");
			ВидРасшифровки = "СтатьяБюджетов";
		ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ОборотноСальдоваяВедомостьБюджетирования.Форма");
			ВидРасшифровки = "ПоказательБюджетов";
		ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ЗначенияНефинансовыхПоказателей.Форма");
			ВидРасшифровки = "НефинансовыйПоказатель";
		КонецЕсли;
		
		ФиксированныеНастройки = ПолучитьПараметрыОтчета(ПараметрыФормирования, ДанныеЯчеек, СвязаннаяСтрокаДанных, ВидРасшифровки, ИмяПоказателя);
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
		ПараметрыОтчета.Вставить("КлючВарианта", "Расшифровка");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ХранимыеПараметрыОтчета = Новый Структура;
		ИндексСвязаннаяСтрокаДанных = ДанныеЯчеек.Индекс(СвязаннаяСтрокаДанных);
		ХранимыеПараметрыОтчета.Вставить("ИндексСтрокиДанных", ИндексСвязаннаяСтрокаДанных);
		ПараметрыОтчета.Вставить("ХранимыеПараметрыОтчета", ХранимыеПараметрыОтчета);
		
		ПараметрыРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		Если СвязаннаяСтрокаДанных.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			ЛогРасчета = Новый Массив;
			ПараметрыПериодов = БюджетнаяОтчетностьВыводСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонок, ПараметрыФормирования);
			
			ПараметрыРасчетаЗначения = БюджетнаяОтчетностьВыводСервер.ШаблонПараметровРасчетаЗначенийЯчейки();
			ПараметрыРасчетаЗначения.ДанныеЯчеек       = ДанныеЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыЯчеек    = ПараметрыЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
			ПараметрыРасчетаЗначения.СтрокаДанных      = СвязаннаяСтрокаДанных;
			ПараметрыРасчетаЗначения.Префикс           = ИмяПоказателя;
			ПараметрыРасчетаЗначения.РасчетИзменений   = Ложь;
			ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = Неопределено;
			БюджетнаяОтчетностьВыводСервер.РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения, ЛогРасчета);
			
			ИндексСвязаннаяСтрокаДанных = ЛогРасчета[0].СтрокаОснование;
		Иначе
			ИндексСвязаннаяСтрокаДанных = ДанныеЯчеек.Индекс(СвязаннаяСтрокаДанных);
		КонецЕсли;
		
		ХранимыеПараметрыОтчета = Новый Структура;
		Для Каждого КлючИЗначение Из ПараметрыФормирования Цикл
			// Пропускаем вспомогательные параметры для заполнения
			// экземпляра бюджета.
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений")
				ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			ХранимыеПараметрыОтчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		ХранимыеПараметрыОтчета.Вставить("ДополнительныеФильтрыПоАналитикам", 	ПараметрыФормирования.ДополнительныеФильтрыПоАналитикам);
		ХранимыеПараметрыОтчета.Вставить("АдресДанныхЯчеек", 	АдресДанныхЯчеек);
		ХранимыеПараметрыОтчета.Вставить("ИндексСтрокиДанных", 	ИндексСвязаннаяСтрокаДанных);
		ХранимыеПараметрыОтчета.Вставить("ИмяПоказателя", 		ИмяПоказателя);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("КлючВарианта", "РасшифровкаФормулыБюджетногоОтчета");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыОтчета.Вставить("ХранимыеПараметрыОтчета", ХранимыеПараметрыОтчета);
		
		ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.РасшифровкаФормулыБюджетногоОтчета.Форма");
		ПараметрыРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный элемент для расшифровки';
								|en = 'Unknown item for drill-down'") 
		
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции


// Возвращает структуру параметров расшифровки.
// 
// Параметры:
// 	АдресРасшифровки - Строка - Адрес временного хранилища.
// Возвращаемое значение:
// 	Структура - Структура параметров расшифровки:
// 	 *Элементы - Структура -
Функция ДанныеРасшифровкиПоАдресуВременногоХранилища(АдресРасшифровки)
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	Возврат ДанныеРасшифровки;
КонецФункции

Функция ПараметрыФормыРасшифровкиОтчетаРасшифровки(Расшифровка, АдресРасшифровки) Экспорт
	
	ДанныеРасшифровки = ДанныеРасшифровкиПоАдресуВременногоХранилища(АдресРасшифровки);
	Поля = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	АдресПараметровРасшифровки = Поля.Найти("АдресПараметровОтчета").Значение;
	Если АдресПараметровРасшифровки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыОтчета = ПолучитьИзВременногоХранилища(АдресПараметровРасшифровки);
	ИндексСтрокиДанных = Поля.Найти("ИндексСтрокиДанных").Значение;
	ИмяПоказателя = Поля.Найти("ИмяПоказателя").Значение;
	
	ПараметрыДанных = Новый Структура("ИндексСтрокиДанных, ИмяПоказателя", ИндексСтрокиДанных, ИмяПоказателя);
	
	Возврат ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, ПараметрыДанных, ПараметрыОтчета.АдресДанныхЯчеек);
	
КонецФункции

Функция ПараметрыНастройкиДополнительныхПолей(Знач Объект, Знач ВидАналитики, Знач ЭтоСтроки) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипЗначения", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения"));
	ПараметрыФормы.Вставить("ДополнительныеПоля", ПоместитьВоВременноеХранилище(Объект.ДополнительныеПоля.Выгрузить()));
	ПараметрыФормы.Вставить("ЭтоСтроки", ЭтоСтроки);
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ОтразитьДокументыФоновымЗаданиемПоФормеСМаксимальнымПериодом(Периоды) Экспорт
	
	НачалоПериода = Дата(3999, 12, 31);
	КонецПериода = Дата(1, 1, 1);
	
	Для Каждого Период Из Периоды Цикл
		
		НачалоПериода = Мин(НачалоПериода, Период);
		КонецПериода = Макс(КонецПериода, Период);
		
	КонецЦикла;
	
	ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыФоновымЗаданием(НачалоПериода, КонецПериода);
	
КонецПроцедуры

Функция НужноУвеличитьНомер(Идентификатор, ИндексОперанда, ТаблицаОперандов)
	
	Если ТипЗнч(ИндексОперанда) = Тип("Число") Тогда
		Операнд = ТаблицаОперандов.НайтиПоИдентификатору(ИндексОперанда);
	Иначе
		Операнд = ИндексОперанда;
	КонецЕсли;
		
	Для Каждого СтрокаОперанда Из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			
			Если Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы") Тогда
				
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.АдресСтруктурыЭлемента, "СтрокаЯчейки")
					<> ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаОперанда.АдресСтруктурыЭлемента, "СтрокаЯчейки")
					ИЛИ ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.АдресСтруктурыЭлемента, "КолонкаЯчейки")
					<> ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаОперанда.АдресСтруктурыЭлемента, "КолонкаЯчейки") Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					СтатьяБюджетов = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
															СтрокаОперанда.АдресСтруктурыЭлемента, "СтатьяБюджетов");
				Иначе
					СтатьяБюджетов = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> СтатьяБюджетов Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					ПоказательБюджетов = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														СтрокаОперанда.АдресСтруктурыЭлемента, "ПоказательБюджетов");
				Иначе
					ПоказательБюджетов = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> ПоказательБюджетов Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					НефинансовыйПоказатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														СтрокаОперанда.АдресСтруктурыЭлемента, "НефинансовыйПоказатель");
				Иначе
					НефинансовыйПоказатель = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> НефинансовыйПоказатель Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


// Возвращает идентификатор операнда с увеличенным нумератором идентификатора.
// 
// Параметры:
// 	Идентификатор - Строка - Идентификатор.
// 	ИдентификаторОперанда - Число - Идентификатор строки операнда в таблице операндов.
// 							- Структура - Структура со свойствами:
// 							  *ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид операнда.
// 							  *ЭлементВидаОтчетности - СправочникСсылка.СтатьиБюджетов -
// 	 						  							- СправочникСсылка.ПоказателиБюджетов -
// 	 						  							- СправочникСсылка.НефинансовыеПоказателиБюджетов -
// 	 						  							- Строка -
// 	 						  							- ПеречислениеСсылка.Периодичность -
// 	 						  							- ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	 						  							- СправочникСсылка.Сценарии -
// 	 						  							- СправочникСсылка.Организации - 
// 	 						  							- СправочникСсылка.СтруктураПредприятия - Элемент вида отчетности.
// 	ТаблицаОперандов - ТаблицаЗначений - Таблица операндов с колонками:
// 	 *Идентификатор - Строка - Идентификатор операнда.
// Возвращаемое значение:
// 	Строка - Новое значение идентификатора.
// 	
Функция УвеличитьНумераторИдентификатора(Знач Идентификатор, Знач ИдентификаторОперанда, Знач ТаблицаОперандов) Экспорт
	
	Результат = Идентификатор;
	Сч = 0;
	Пока НужноУвеличитьНомер(Идентификатор, ИдентификаторОперанда, ТаблицаОперандов) Цикл
		Сч = Сч + 1;
		Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Функция МоделиБюджетированияСОтборомПоДате(Дата) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Значение,
	|	МоделиБюджетирования.Представление КАК Представление
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &Дата
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|			ИЛИ МоделиБюджетирования.КонецДействия >= &Дата)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("Дата",   Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция МоделиБюджетированияСОтборомПоПериоду(НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Значение,
	|	МоделиБюджетирования.Представление КАК Представление
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|			ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура СценарииСФильтром(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	Если Параметры.Свойство("НеДанныйСценарий") Тогда
		Фильтр = Параметры.НеДанныйСценарий;
		ВыборГруппИЭлементов = (Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Сценарии.Ссылка КАК Значение,
		|	Сценарии.Представление КАК Представление,
		|	Сценарии.ПометкаУдаления КАК Пометка
		|ИЗ
		|	Справочник.Сценарии КАК Сценарии
		|ГДЕ
		|	НЕ Сценарии.Ссылка В (&Исключаемые)
		|	И (НЕ Сценарии.ЭтоГруппа ИЛИ &ВыборГруппИЭлементов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление");
		
		СсылкаНаДанныйСценарий = Новый СписокЗначений;
		Если ТипЗнч(Фильтр) = Тип("ФиксированныйМассив") Тогда
			СсылкаНаДанныйСценарий.ЗагрузитьЗначения(Новый Массив(Фильтр));
		Иначе
			СсылкаНаДанныйСценарий.Добавить(Фильтр);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВыборГруппИЭлементов", ВыборГруппИЭлементов);
		Запрос.УстановитьПараметр("Исключаемые", СсылкаНаДанныйСценарий);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ТипыВидовАналитик(МассивОбъектов) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "ТипЗначения");
	
КонецФункции

Функция СвойстваАналитикОтчета(АдресПараметрыВыводаВидаБюджета) Экспорт
	
	ПараметрыВывода = ПолучитьИзВременногоХранилища(АдресПараметрыВыводаВидаБюджета);
	
	СвойстваАналитик = Новый Структура;
	
	// Упорядоченный массив всех аналитик отчета для определения порядка аналитик по расшифровке и типы аналитик.
	СвойстваАналитик.Вставить("ВидыАналитикОтчета", ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик);
	СвойстваАналитик.Вставить("ЗначенияТипов", ТипыВидовАналитик(СвойстваАналитик.ВидыАналитикОтчета));
	
	Возврат СвойстваАналитик;
	
КонецФункции

#Область ЭкземплярБюджета

Функция БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования)
	
	Курс = СтрокиКурса[0].Курс;
	Для Каждого СтрокаКурса Из СтрокиКурса Цикл
		Если СтрокаКурса.Период > ПериодПланирования Тогда
			Возврат Курс;
		КонецЕсли;
		Курс = СтрокаКурса.Курс;
	КонецЦикла;
	
	Возврат Курс;
	
КонецФункции

Функция ТаблицаКурсов(ОбъектИПараметрыРасчета, СтруктураПараметров, Отказ, ТекстСообщения) Экспорт
	
	ТребоватьУказанияКурсовДляКаждогоПериода = ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода;
	Объект = ОбъектИПараметрыРасчета.Объект;
	
	СтруктураЯчеек = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек;
	
	КопияСтруктурыЯчеекВалюта = СтруктураЯчеек.Скопировать(,"Валюта");
	КопияСтруктурыЯчеекВалюта.Свернуть("Валюта");
	МассивВалют = КопияСтруктурыЯчеекВалюта.ВыгрузитьКолонку("Валюта");
	
	МассивВалютДокумента = ОбъектИПараметрыРасчета.Объект.АналитикаСтатейБюджетов.Выгрузить(,"Валюта").ВыгрузитьКолонку("Валюта");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, МассивВалютДокумента, Истина);
	
	МассивДополнительныхВалют = Новый Массив;
	МассивДополнительныхВалют.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сценарий, "Валюта"));
	МассивДополнительныхВалют.Добавить(Константы.ВалютаУправленческогоУчета.Получить());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, МассивДополнительныхВалют, Истина);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВГраница = МассивВалют.ВГраница();
	Удалено = 0;
	
	Для Сч = 0 По ВГраница Цикл
		
		ТекущийИндекс = Сч - Удалено;
		Если Не ЗначениеЗаполнено(МассивВалют[ТекущийИндекс])
			ИЛИ МассивВалют[ТекущийИндекс] = ВалютаРеглУчета Тогда
			
			Удалено = Удалено + 1;
			МассивВалют.Удалить(ТекущийИндекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(Объект.Сценарий, МассивВалют, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	Если Не ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		
		НоваяСтрока = ТаблицаКурсов.Добавить();
		НоваяСтрока.Период = Объект.НачалоПериода;
		НоваяСтрока.Валюта = ВалютаРеглУчета;
		НоваяСтрока.Курс = 1;
		
		ТаблицаКурсов.Сортировать("Валюта, Период");
		ТаблицаКурсов.Индексы.Добавить("Валюта");
		ТаблицаКурсов.Индексы.Добавить("Валюта, Период");
		
		НеНайденныеВалюты = Новый Массив;
		Для Каждого Валюта Из МассивВалют Цикл
			
			СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Объект.НачалоПериода);
			НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				НеНайденныеВалюты.Добавить(Валюта);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеНайденныеВалюты.Количество() Тогда
			
			ТекстСообщения = НСтр("ru = 'Не найдены прогнозные курсы на начало периода для валют: %1';
									|en = 'Forecasted exchange rates for currencies as of the period start are not found: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								СтрСоединить(НеНайденныеВалюты, ", "));
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Периодичности = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, СтруктураПараметров.СтруктураКолонокТаблицыДанных.Периодичности);
		Периодичности.Добавить(Объект.ВидБюджета.Периодичность);
		ПериодичностьПроверкиКурсов = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
		МассивПериодов = БюджетнаяОтчетностьВыводСервер.ПериодыБюджетногоОтчета(Объект.НачалоПериода, Объект.ОкончаниеПериода, ПериодичностьПроверкиКурсов);
		НеНайденныеКурсы = ТаблицаКурсов.СкопироватьКолонки("Период, Валюта");
		
		Для Каждого Период Из МассивПериодов Цикл
			Для Каждого Валюта Из МассивВалют Цикл
				СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Период);
				Если Не ТаблицаКурсов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					НоваяСтрока = НеНайденныеКурсы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НеНайденныеКурсы.Количество() Тогда
			
			НеНайденныеКурсы.Свернуть("Валюта");
			МассивВалют = НеНайденныеКурсы.ВыгрузитьКолонку("Валюта");
			ТекстСообщения = НСтр("ru = 'Не найдены прогнозные курсы для валют: %1; курсы должны быть указаны на %2';
									|en = 'Forecasted exchange rates are not found for currencies: %1; exchange rates should be specified for %2'");
			
			Если ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Декада Тогда
				СклонениеКаждый = НСтр("ru = 'каждую декаду';
										|en = 'every ten-day period'");
			ИначеЕсли ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Неделя Тогда
				СклонениеКаждый = НСтр("ru = 'каждую неделю';
										|en = 'every week'");
			Иначе
				СклонениеКаждый = НСтр("ru = 'каждый %1';
										|en = 'each %1'");
				СклонениеКаждый = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СклонениеКаждый, НРег(ПериодичностьПроверкиКурсов));
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
				СтрСоединить(МассивВалют, ", "),
				СклонениеКаждый);
			Отказ = Истина;
			
		Иначе
			
			Для Каждого Период Из МассивПериодов Цикл
				НоваяСтрока = ТаблицаКурсов.Добавить();
				НоваяСтрока.Период = Период;
				НоваяСтрока.Валюта = ВалютаРеглУчета;
				НоваяСтрока.Курс = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаКурсов;
	
КонецФункции

Функция ОбновитьТаблицуКурсов(ОбъектИПараметрыРасчета, ПредыдущаяТаблицаКурсов)
	Перем Отказ, ТекстСообщения;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат ПредыдущаяТаблицаКурсов;
	КонецЕсли;
	
	ТаблицаКурсов = ТаблицаКурсов(ОбъектИПараметрыРасчета, СтруктураПараметров, Отказ, ТекстСообщения);
	
	Возврат ТаблицаКурсов;
	
КонецФункции

Функция ПересчитатьПоТаблицеКурсов(ОбъектИПараметрыРасчета, Сумма, ПериодПланирования, ВалютаНач, ВалютаКон) Экспорт
	
	АдресТаблицыКурсов = ОбъектИПараметрыРасчета.АдресТаблицыКурсов;
	ТребоватьУказанияКурсовДляКаждогоПериода = ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	ТаблицаКурсов = ПолучитьИзВременногоХранилища(АдресТаблицыКурсов);
	
	Если ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		СтруктураПоиска = Новый Структура("Валюта, Период", ВалютаНач, ПериодПланирования);
	Иначе
		СтруктураПоиска = Новый Структура("Валюта", ВалютаНач);
	КонецЕсли;
	
	СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
	Если Не СтрокиКурса.Количество() Тогда
		ТаблицаКурсов = ОбновитьТаблицуКурсов(ОбъектИПараметрыРасчета, ТаблицаКурсов);
		ПоместитьВоВременноеХранилище(ТаблицаКурсов, АдресТаблицыКурсов);
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		КурсНач 		= СтрокиКурса[0].Курс;
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта, Период", ВалютаКон, ПериодПланирования));
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
		КурсКон 		= СтрокиКурса[0].Курс;
	Иначе

		КурсНач 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта", ВалютаКон));
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
		КурсКон 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
	КонецЕсли;
	
	Возврат Сумма * КурсНач / КурсКон;
	
КонецФункции


// Значение расшифровки
// 
// Параметры:
// 	НомерРасшифровки - Число, ИдентификаторРасшифровкиКомпоновкиДанных, Неопределено -
// 	АдресДанныхРасшифровки - Строка -
// Возвращаемое значение:
// 	 - Неопределено - 
// 	 - Соответствие - Описание:
// 		* Ключ - Число, ИдентификаторРасшифровкиКомпоновкиДанных -
// 		* Значение - ЭлементРасшифровкиКомпоновкиДанныхПоля, ЭлементРасшифровкиКомпоновкиДанныхГруппировка - 
// 	 - Структура - Структура со свойствами:
// 		* Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
//
Функция ЗначениеРасшифровки(НомерРасшифровки, АдресДанныхРасшифровки) Экспорт
	
	Если НомерРасшифровки = Неопределено // Курсор установлен не в ячейке с данными. Например, в шапке
		Или ТипЗнч(НомерРасшифровки) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда // Курсор установлен в ячейке, в которой не настроен вид
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	Если ДанныеРасшифровки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(НомерРасшифровки) = Тип("Число") Тогда
		Возврат ДанныеРасшифровки[НомерРасшифровки];
	КонецЕсли;
	
	Результат = Новый Соответствие;
	Для Каждого ИндексРасшифровки Из НомерРасшифровки Цикл
		Результат.Вставить(ИндексРасшифровки, ДанныеРасшифровки[ИндексРасшифровки]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

