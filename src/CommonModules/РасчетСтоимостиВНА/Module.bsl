////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма расчета стоимости внеоборотных активов.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗакрытиеМесяца

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
		
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РасчетСтоимостиВНА.ОпределитьСтатусОперацииЗакрытияМесяца");
		
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РасчетСтоимостиВНА.ВыполнитьОперациюЗакрытияМесяца");
		
КонецПроцедуры

// Опредяет статус операции закрытия месяца "ФормированиеДвиженийПоВнеоборотнымАктивам".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура ОпределитьСтатусОперацииЗакрытияМесяца(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of fixed assets 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет себестоимости отключен, расчет стоимости недоступен.';
				|en = 'Cost accounting is off, cost calculation is unavailable.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКРасчетуСтоимостиВНА") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ЕстьДокументыПоКоторымФормируютсяДвижения(ПараметрыОбработчика) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется расчет стоимости.';
				|en = 'No documents that require cost calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет операцию закрытия месяца "ФормированиеДвиженийПоВнеоборотнымАктивам".
// 
// Параметры:
//  ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
Процедура ВыполнитьОперациюЗакрытияМесяца(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;

	Если НЕ ВнеоборотныеАктивы.ЗавершенПереходНаВНА24(ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций)
		ИЛИ НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(КонецМесяца(ПараметрыРасчета.Период)) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.РасчетСтоимостиВнеоборотныхАктивов");
	
	НомерДоРасчета = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.УвеличитьНомерЗадания();
	
	ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(
		ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций);
	
	ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗаданияКРасчету(
			'000101010000', КонецМесяца(ПараметрыРасчета.Период), НомерДоРасчета, ДоступныеОрганизации);
	
	Результат = ВыполнитьОперацию(
		ЗаданияКРасчету.НачалоПериода, 
		КонецМесяца(ПараметрыРасчета.Период), 
		ЗаданияКРасчету.СписокОрганизаций, 
		НомерДоРасчета,
		ЗаданияКРасчету.МенеджерВременныхТаблиц,
		ПараметрыОбработчика.ИдентификаторРасчета);
		
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, Результат.КоличествоДанных);
		
КонецПроцедуры

// Формирует описание технологических параметров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание параметров операции закрытия месяца
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	
	#Область МаксимальноеКоличествоЗаданий
		
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Имя = "МаксимальноеКоличествоЗаданий";
	ОписаниеПараметра.Наименование = НСтр("ru = 'Количество одновременно выполняемых заданий расчета стоимости ОС и НМА';
											|en = 'Number of simultaneous jobs for cost calculation of FA and IA'");
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 4;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Расчет стоимости ОС и НМА может выполняться одновременно несколькими фоновыми заданиями.
              |Увеличение количества заданий может уменьшить время расчета.
              |Количество заданий рекомендуется настраивать в зависимости от конфигурации сервера СУБД и серверов 1С:Предприятие.';
              |en = 'Cost of fixed assets and intangible assets can be calculated simultaneously by several background jobs.
              |Increasing the number of jobs can reduce the calculation execution time.
              |Configure the number of jobs depending on the DBMS server configuration and 1C:Enterprise servers.'");
		
	#КонецОбласти
	
	#Область РазмерПорцииДанных
		
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Имя = "РазмерПорцииДанных";
	ОписаниеПараметра.Наименование = НСтр("ru = 'Количество документов обрабатываемых одновременно';
											|en = 'Number of documents processed simultaneously'");
	ОписаниеПараметра.ТипЗначения = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 100;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'В одном задании расчет стоимости может выполняться одновременно по нескольким документам.
              |Увеличение количества документов может уменьшить время выполнения операции, но увеличить потребление памяти.
              |Количество рекомендуется настраивать в зависимости от конфигурации сервера СУБД и серверов 1С:Предприятие.';
              |en = 'In one job, cost can be calculated simultaneously by several documents.
              |Increasing the number of documents can reduce the operation execution time but increase memory consumption.
              |Configure the number depending on the DBMS server configuration and 1C:Enterprise servers.'");
		
	#КонецОбласти

	Возврат ОписаниеПараметров;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеОперации

// Выполняет расчет стоимости в несколько потоков.
// 
// Параметры:
//  НачалоПериода - Дата - Период с которого требуется выполнить операцию
//  КонецПериода - Дата - Период по который требуется выполнить операцию
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - Список организаций
//  НомерДоРасчета - Число - Номер заданий
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит список объектов
//  ИдентификаторРасчета - УникальныйИдентификатор - идентификатор расчета
// 
// Возвращаемое значение:
//  Структура - результат формирования движений:
// 		* ЕстьОшибки - Булево - Истина, если были зарегистрированы ошибки во время выполнения
// 		* ТекстОшибки - Строка - Текст ошибки
// 		* КоличествоДанных - Число - Количество объектов, по которым сформированы движения
//
Функция ВыполнитьОперацию(НачалоПериода, КонецПериода, СписокОрганизаций, НомерДоРасчета, МенеджерВременныхТаблиц, ИдентификаторРасчета) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("КоличествоДанных", 0);

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(КонецПериода) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ОчередьЗаданийКРасчету = СоздатьОчередьЗаданий(
		НачалоПериода, КонецПериода, СписокОрганизаций, НомерДоРасчета, МенеджерВременныхТаблиц);

	Если ОчередьЗаданийКРасчету.Количество() = 0 Тогда
		
		РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗафиксироватьРасчет(
			КонецПериода,
			СписокОрганизаций, 
			НомерДоРасчета,
			МенеджерВременныхТаблиц,
			"ЗаданияКРасчету");
			
		Возврат Результат;
		
	КонецЕсли;
	
	РезультатВыполнения = ВнеоборотныеАктивы.ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету, МаксимальноеКоличествоЗаданий(), ИдентификаторРасчета);
	
	Результат.ЕстьОшибки = РезультатВыполнения.ЕстьОшибки;
	Результат.ТекстОшибки = РезультатВыполнения.ТекстОшибки;
	Результат.КоличествоДанных = РезультатВыполнения.КоличествоДанных;
	
	Если Результат.ЕстьОшибки 
		И ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		Для Каждого Организация Из СписокОрганизаций Цикл
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов, 
				КонецПериода,
				Организация,
				Результат.ТекстОшибки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет расчет стоимости по указанным объектам.
//
// Параметры:
//  ПараметрыВыполнения - см. ПараметрыВыполнения
// 
// Возвращаемое значение:
//  Число - Количество объектов, по которым сформированы движения
Функция ВыполнитьОперациюПоОбъектам(ПараметрыВыполнения) Экспорт

	Если ПараметрыВыполнения.СписокОбъектов.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ВыполнитьОперациюПоОбъектам");
	
	УстановитьПривилегированныйРежим(Истина);

	Если ПараметрыВыполнения.МенеджерВременныхТаблиц = Неопределено Тогда
		ПараметрыВыполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ПараметрыВыполнения.МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("СписокОбъектов");
	ИспользуемыеВТ.Добавить("ВтВсеДанныеКРасчету");
	ИспользуемыеВТ.Добавить("ОбработанныеДанные");

	НачалоПериода = СформироватьСписокОбъектовИПолучитьНачалоПериода(ПараметрыВыполнения);
	
	ВнеоборотныеАктивы.СформироватьТаблицуВтВсеДанныеКРасчету(
		НачалоПериода, 
		ПараметрыВыполнения.КонецПериода, 
		ПараметрыВыполнения.СписокОрганизаций, 
		ВнеоборотныеАктивыПовтИсп.ИдентификаторыДокументовПоКоторымРассчитываетсяСтоимость(), 
		ПараметрыВыполнения.МенеджерВременныхТаблиц);
	
	// @skip-check query-in-loop
	// Проверка отключена т.к. обработка выполняется порциями для оптимизации
	Пока НачалоПериода <= ПараметрыВыполнения.КонецПериода Цикл
		
		Пока ПолучитьПорциюДанныхКРасчету(НачалоПериода, ПараметрыВыполнения) Цикл
			
			СформироватьДвиженияПоДокументам(НачалоПериода, ПараметрыВыполнения);
			ЗарегистрироватьОшибки(ПараметрыВыполнения);
			ЗапомнитьОбработанныеДанные(ПараметрыВыполнения);
			УдалитьЗаданияПорцииДанных(НачалоПериода, ПараметрыВыполнения);
		
			ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
			
		КонецЦикла;

		УдалитьЗаданияПоДату(НачалоПериода, ПараметрыВыполнения);
		
		НачалоПериода = КонецМесяца(НачалоПериода) + 1;
		
	КонецЦикла;

	ИспользуемыеВТ.Удалить(ИспользуемыеВТ.Найти("СписокОбъектов"));
	ИспользуемыеВТ.Удалить(ИспользуемыеВТ.Найти("ВтВсеДанныеКРасчету"));
	ИспользуемыеВТ.Удалить(ИспользуемыеВТ.Найти("ОбработанныеДанные"));
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ПараметрыВыполнения.КоличествоДанных);
	
	Возврат ПараметрыВыполнения.КоличествоДанных;
	
КонецФункции

// Выполняет расчет стоимости ОС и НМА по документам.
//
// Параметры:
//  СписокДокументов - Массив из ДокументСсылка - Список документов, по которым требуется рассчитать стоимость.
//
Процедура ВыполнитьОперациюПоДокументам(СписокДокументов) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеДокументы.Ссылка КАК Ссылка,
	|	ВсеДокументы.Дата КАК Дата,
	|	ВсеДокументы.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВсеДокументы.Организация КАК Справочник.Организации).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ВсеДокументы.ОбъектУчета КАК ОбъектУчета,
	|	ВсеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ВсеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ВсеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.СписаниеОС2_4)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Ссылка) = ТИП(Документ.СписаниеНМА2_4)
	|			ТОГДА 999999
	|		ИНАЧЕ ЧАС(ВсеДокументы.Дата)*10000 + МИНУТА(ВсеДокументы.Дата)*100 + СЕКУНДА(ВсеДокументы.Дата)
	|	КОНЕЦ КАК Приоритет
	|
	|ПОМЕСТИТЬ ЗаданияКРасчету
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДокументы.ОсновноеСредство КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ТекущиеДокументы
	|
	|	ГДЕ
	|		ТекущиеДокументы.Ссылка В (&СписокДокументов)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|			ГДЕ
	|				Задания.Организация = ТекущиеДокументы.Организация
	|				И Задания.ОбъектУчета = ТекущиеДокументы.ОсновноеСредство
	|				И Задания.Месяц <= ТекущиеДокументы.Дата)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТекущиеДокументы.Ссылка КАК Ссылка,
	|		ТекущиеДокументы.Дата КАК Дата,
	|		ТекущиеДокументы.Организация КАК Организация,
	|		ТекущиеДокументы.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|		ТекущиеДокументы.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|		ТекущиеДокументы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ТекущиеДокументы.НематериальныйАктив КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоНМА КАК ТекущиеДокументы
	|
	|	ГДЕ
	|		ТекущиеДокументы.Ссылка В (&СписокДокументов)
	|		И ТекущиеДокументы.ТипСсылки В (&ИдентификаторыДокументов)
	|		И ТекущиеДокументы.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|		И ТекущиеДокументы.Проведен
	|
	|		И ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|			ГДЕ
	|				Задания.Организация = ТекущиеДокументы.Организация
	|				И Задания.ОбъектУчета = ТекущиеДокументы.НематериальныйАктив
	|				И Задания.Месяц <= ТекущиеДокументы.Дата)
	|
	|	) КАК ВсеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ЗаданияКРасчету.Ссылка КАК Ссылка,
	|	ЗаданияКРасчету.Дата КАК Дата,
	|	ЗаданияКРасчету.Организация КАК Организация,
	|	ЗаданияКРасчету.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЗаданияКРасчету.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ЗаданияКРасчету.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ЗаданияКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаданияКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ЗаданияКРасчету.Приоритет КАК Приоритет
	|
	|ПОМЕСТИТЬ ВтВсеДанныеКРасчету
	|
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ЗаданияКРасчету.Дата, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	ЗаданияКРасчету КАК ЗаданияКРасчету
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ИспользуемыеВТ = Новый Массив;
	ИспользуемыеВТ.Добавить("ЗаданияКРасчету");
	ИспользуемыеВТ.Добавить("ВтВсеДанныеКРасчету");
	ИспользуемыеВТ.Добавить("ОбработанныеДанные");

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ВнеоборотныеАктивыПовтИсп.ИдентификаторыДокументовПоКоторымРассчитываетсяСтоимость());
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	// Проверка отключена, т.к. операция может выполняться только за один месяц
	//@skip-check query-in-loop
	Пока Выборка.Следующий() Цикл
	
		ПараметрыВыполнения = ПараметрыВыполнения();
		ПараметрыВыполнения.КонецПериода = КонецМесяца(Выборка.Месяц);
		ПараметрыВыполнения.ВернутьДокументыКОтражению = Ложь;
		ПараметрыВыполнения.СформироватьЗадания = Ложь;
		ПараметрыВыполнения.УдалитьЗадания = Ложь;
		ПараметрыВыполнения.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
		// Проверка отключена
		//@skip-check query-in-loop
		Пока ПолучитьПорциюДанныхКРасчету(Выборка.Месяц, ПараметрыВыполнения) Цикл
			
			СформироватьДвиженияПоДокументам(Выборка.Месяц, ПараметрыВыполнения);
			ЗапомнитьОбработанныеДанные(ПараметрыВыполнения);
		
			ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
			
		КонецЦикла;

		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	КонецЦикла;
	
КонецПроцедуры

// Параметры выполнения операции.
// 
// Возвращаемое значение:
//  Структура - Параметры выполнения:
// 		* КонецПериода - Дата - Конец периода выполнения операции
// 		* СписокОрганизаций - Массив из СправочникСсылка.Организации - Организации, для которых выполняется операция
// 		* СписокОбъектов - ТаблицаЗначений - Объекты, для которых выполняется операция
// 		* ВернутьДокументыКОтражению - Булево - Истина, если нужно вернуть документы к отражению в регл. учете
// 		* СформироватьЗадания - Булево - Истина, если нужно сформировать задания
// 		* УдалитьЗадания - Булево - Истина, если нужно удалить задания
// 		* НомерДоРасчета - Число - Номер заданий
// 		* ВыполнитьПроверку - Булево - Истина, если нужно выполнить проверку и зарегистрировать ошибки закрытия месяца
// 		* МенеджерВременныхТаблиц - Неопределено - Менеджер временных таблиц
//		* КоличествоДанных -Число - Количество обработанных данных
Функция ПараметрыВыполнения() Экспорт

	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("КонецПериода", '000101010000');
	ПараметрыВыполнения.Вставить("СписокОрганизаций", Новый Массив);
	ПараметрыВыполнения.Вставить("ВернутьДокументыКОтражению", Истина);
	ПараметрыВыполнения.Вставить("СформироватьЗадания", Истина);
	ПараметрыВыполнения.Вставить("УдалитьЗадания", Истина);
	ПараметрыВыполнения.Вставить("НомерДоРасчета", 0);
	ПараметрыВыполнения.Вставить("ВыполнитьПроверку", Ложь);
	ПараметрыВыполнения.Вставить("МенеджерВременныхТаблиц", Неопределено);
	ПараметрыВыполнения.Вставить("КоличествоДанных", 0);

	СписокОбъектов = Новый ТаблицаЗначений();
	СписокОбъектов.Колонки.Добавить("ОбъектУчета", Метаданные.РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.Измерения.ОбъектУчета.Тип);
	СписокОбъектов.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыВыполнения.Вставить("СписокОбъектов", СписокОбъектов);

	Возврат ПараметрыВыполнения;
	
КонецФункции

#КонецОбласти

#Область АктуализацияДвиженийПоВнеоборотнымАктивам

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_АктуализацияДвиженийПоВнеоборотнымАктивам(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АктуализацияДвиженийПоВнеоборотнымАктивам,,,,
		Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
		
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);

	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Run'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РасчетСтоимостиВНА.Использование_АктуализацияДвиженийПоВнеоборотнымАктивам");
		
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РасчетСтоимостиВНА.Выполнить_АктуализацияДвиженийПоВнеоборотнымАктивам");
		
КонецПроцедуры

// Опредяет статус операции "АктуализацияДвиженийПоВнеоборотнымАктивам".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_АктуализацияДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of fixed assets 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина,, "ЗаданияКАктуализацииДвиженийПоВНА") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЕстьДокументыПоКоторымФормируютсяДвижения(ПараметрыОбработчика) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется расчет стоимости.';
				|en = 'No documents that require cost calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
		
КонецПроцедуры

// Выполняет операцию "Актуализация движений по ОС и НМА".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_АктуализацияДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;

	Если НЕ ВнеоборотныеАктивы.ЗавершенПереходНаВНА24(ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций)
		ИЛИ НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(КонецМесяца(ПараметрыРасчета.Период)) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.АктуализацияДвиженийПоВнеоборотнымАктивам");
	
	НомерДоРасчета = РегистрыСведений.ЗаданияКАктуализацииДвиженийПоВНА.УвеличитьНомерЗадания();
	
	ДоступныеОрганизации = ЗакрытиеМесяцаСервер.ДоступныеДляРасчетаОрганизации(
		ПараметрыРасчета.Период, ПараметрыРасчета.МассивОрганизаций);
	
	ЗаданияКРасчету = РегистрыСведений.ЗаданияКАктуализацииДвиженийПоВНА.ЗаданияКРасчету(
			'000101010000', ПараметрыРасчета.Период, НомерДоРасчета, ДоступныеОрганизации);
	
	КоличествоДанных = 0;
	ЕстьОшибки = Ложь;
	
	Результат = ОтложенноеФормированиеДвиженийВНА.ВыполнитьОперацию(
		ЗаданияКРасчету.НачалоПериода,
		КонецМесяца(ПараметрыРасчета.Период), 
		ЗаданияКРасчету.СписокОрганизаций,
		НомерДоРасчета, 
		ЗаданияКРасчету.МенеджерВременныхТаблиц,
		ПараметрыОбработчика.ИдентификаторРасчета,
		ИмяПризнакаВыполненияОперацииАктуализацияДвиженийПоВНА());
	
	КоличествоДанных = КоличествоДанных + Результат.КоличествоДанных;
	ЕстьОшибки = Результат.ЕстьОшибки ИЛИ ЕстьОшибки;
	
	Результат = ЗакрытиеРасходовОтВыбытияОС.ВыполнитьОперацию(
		ЗаданияКРасчету.НачалоПериода,
		КонецМесяца(ПараметрыРасчета.Период), 
		ЗаданияКРасчету.СписокОрганизаций,
		НомерДоРасчета,
		Ложь, 
		ЗаданияКРасчету.МенеджерВременныхТаблиц,
		"ЗаданияКАктуализацииДвиженийПоВНА",
		ПараметрыОбработчика.ИдентификаторРасчета,
		Ложь);
	
	КоличествоДанных = КоличествоДанных + Результат.КоличествоДанных;
	ЕстьОшибки = Результат.ЕстьОшибки ИЛИ ЕстьОшибки;

	Если ЕстьОшибки Тогда
	
		Для Каждого Организация Из ЗаданияКРасчету.СписокОрганизаций Цикл
		
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				Перечисления.ОперацииЗакрытияМесяца.АктуализацияДвиженийПоВнеоборотнымАктивам, 
				ПараметрыРасчета.Период,
				Организация,
				Результат.ТекстОшибки);
	
		КонецЦикла;
	
	Иначе
		
		РегистрыСведений.ЗаданияКАктуализацииДвиженийПоВНА.ЗафиксироватьРасчет(
			КонецМесяца(ПараметрыРасчета.Период),
			ЗаданияКРасчету.СписокОрганизаций, 
			НомерДоРасчета, 
			ЗаданияКРасчету.МенеджерВременныхТаблиц,
			"ЗаданияКРасчету");
			
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует задания к расчету стоимости ОС и НМА, если изменились исходные данные.
//
// Параметры:
// 	Документ - ДокументОбъект, Неопределено - Документ, который изменяется.
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗадания(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ОтложенноеФормированиеДвиженийВНА.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) 
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ)
		ИЛИ РасчетСтоимостиИнвестицииВАренду.ДвиженияЗаписываютсяПриВыполненииОперации(Документ)
		ИЛИ ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьОС_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("СтоимостьНМА_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНА");
	
	ОпределитьИзменениеПрочихРасходов(ДанныеТаблиц);
	
	ТекстОбъединенияДанных = ВнеоборотныеАктивы.СформироватьТекстОбъединенияДанныхДляФормированияЗадания(
		СписокТаблиц, ДанныеТаблиц, "ОбъектУчета");
	
	Если ТекстОбъединенияДанных = "" Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ИзмененныеДанные.ОбъектУчета,
	|
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ИзмененныеДанные.Период < &ДатаНачалаУчета
	|				ТОГДА &ДатаНачалаУчета
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВзаиморасчетовПоАренде)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковИнвестицииВАренду)
	|				ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ), ДЕНЬ, 1), МЕСЯЦ)
	|			ИНАЧЕ ИзмененныеДанные.Период
	|		КОНЕЦ) КАК Месяц
	|ИЗ
	|	ТекстОбъединенияДанных_Переопределямый КАК ИзмененныеДанные
	|
	|ГДЕ
	|   ИзмененныеДанные.ОбъектУчета <> НЕОПРЕДЕЛЕНО
	|	И ИзмененныеДанные.ОбъектУчета <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|	И ИзмененныеДанные.ОбъектУчета <> ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)
	|	И ИзмененныеДанные.ОбъектУчета <> ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|
	|	И ИзмененныеДанные.Период >= &ДатаНачалаУчетаСебестоимости
	|	И &ИспользоватьУчетСебестоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ИзмененныеДанные.ОбъектУчета
	|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекстОбъединенияДанных_Переопределямый", "(" + ТекстОбъединенияДанных + ")");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
	Запрос.УстановитьПараметр("ИспользоватьУчетСебестоимости", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
КонецПроцедуры

// Формирует таблицу, которая содержит накопленные расходы по объектам учета.
// 
// Параметры:
//  Период - Дата - Период
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит таблицу ВтПорцияДанныхКРасчету с полями:
//			* Ссылка - ДокументСсылка -
//			* Дата - Дата -
//			* Организация - СправочникСсылка.Организации -
//			* ОбъектУчета - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы -
//
Процедура СформироватьВтТекущиеРасходы(Период, МенеджерВременныхТаблиц) Экспорт
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтТекущиеРасходы");
	ИспользуемыеВТ.Добавить("ВтТаблицаОбъектов");
	
	ВнеоборотныеАктивы.СформироватьТаблицуВтДанныеКРасчету(МенеджерВременныхТаблиц);
	
	СписокЗапросов = Новый Массив;
		
	#Область ВтУчетнаяПолитика
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтУчетнаяПолитика") = Неопределено Тогда
		СформироватьВтУчетнаяПолитика(Период, МенеджерВременныхТаблиц);
	КонецЕсли;
	#КонецОбласти
		
	#Область ВтРасходыРаспределяютсяПоОбъектам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.ОбъектУчета КАК ОбъектУчета
	|
	|ПОМЕСТИТЬ ВтРасходыРаспределяютсяПоОбъектам
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОтражатьВУпрУчете
	|				ТОГДА ТаблицаОбъектов.Ссылка
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументУУ,
	|
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОтражатьВБУ
	|				ТОГДА ТаблицаОбъектов.Ссылка
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументБУ,
	|
	|		ТаблицаОбъектов.ОсновноеСредство КАК ОбъектУчета
	|
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОбъектов
	|			ПО ТаблицаОбъектов.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОтражатьВУпрУчете
	|				ТОГДА ТаблицаОбъектов.Ссылка
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументУУ,
	|
	|		ВЫБОР
	|			КОГДА ДанныеДокумента.ОтражатьВРеглУчете
	|				ТОГДА ТаблицаОбъектов.Ссылка
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ КАК ДокументБУ,
	|
	|		ТаблицаОбъектов.ОсновноеСредство КАК ОбъектУчета
	|
	|	ИЗ
	|		Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОбъектов
	|			ПО ТаблицаОбъектов.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
	|		И ТаблицаОбъектов.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
	|		И НЕ ТаблицаОбъектов.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства
	|
	|	) КАК ТаблицаОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОбъектов.ОбъектУчета
	|
	|ИМЕЮЩИЕ 
	|	(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОбъектов.ДокументУУ) > 1
	|		ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаОбъектов.ДокументБУ) > 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВтТаблицаОбъектов
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ВтТаблицаОбъектов") = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|
		|	ТаблицаОбъектов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОбъектов.ОсновноеСредство КАК ОбъектУчета,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
		|			ТОГДА ИСТИНА
		|		КОГДА ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВтРасходыРаспределяютсяПоОбъектам КАК ВтРасходыРаспределяютсяПоОбъектам
		|				ГДЕ
		|					ВтРасходыРаспределяютсяПоОбъектам.ОбъектУчета = ТаблицаОбъектов.ОсновноеСредство)
		|	
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасходыРаспределяютсяПоОбъектам,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
		|			ТОГДА ДанныеДокумента.ОбъектСтроительства
		|		ИНАЧЕ ТаблицаОбъектов.ОсновноеСредство
		|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
		|
		|	ТаблицаОбъектов.СтоимостьУУ КАК СтоимостьУУ,
		|	ТаблицаОбъектов.СтоимостьБУ КАК СтоимостьБУ,
		|	ТаблицаОбъектов.СтоимостьНУ КАК СтоимостьНУ,
		|
		|	ДанныеДокумента.ЧастичныйВводВЭксплуатацию 
		|		ИЛИ ДанныеДокумента.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|		ИЛИ ДанныеДокумента.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена)
		|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации) КАК ФактическаяСтоимость,
		|
		|	ДанныеДокумента.ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
		|	ТаблицаОбъектов.СуммаЦелевыхСредств КАК СуммаЦелевыхСредств,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
		|
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ДанныеДокумента.ОтражатьВБУ КАК ОтражатьВБУ,
		|	ДанныеДокумента.ОтражатьВНУ КАК ОтражатьВНУ,
		|	ДанныеДокумента.ОтражатьВБУ КАК УчестьПР,
		|
		|	ТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ПОМЕСТИТЬ ВтТаблицаОбъектов
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОбъектов
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОбъектов.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
		|		ПО ПервоначальныеСведенияОС.Регистратор = ТаблицаОбъектов.Ссылка
		|			И ПервоначальныеСведенияОС.ОсновноеСредство = ТаблицаОбъектов.ОсновноеСредство
		|			И ПервоначальныеСведенияОС.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|ГДЕ
		|	ТаблицаОбъектов.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|
		|	ТаблицаОбъектов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОбъектов.КомпонентАмортизации КАК ОбъектУчета,
		|
		|	ВЫБОР
		|		КОГДА ТаблицаОбъектов.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
		|				И НЕ ТаблицаОбъектов.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства
		|				И ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВтРасходыРаспределяютсяПоОбъектам КАК ВтРасходыРаспределяютсяПоОбъектам
		|					ГДЕ
		|						ВтРасходыРаспределяютсяПоОбъектам.ОбъектУчета = ТаблицаОбъектов.ОсновноеСредство)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасходыРаспределяютсяПоОбъектам,
		|
		|	ВЫБОР
		|		КОГДА ТаблицаОбъектов.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
		|				И НЕ ТаблицаОбъектов.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства
		|			ТОГДА ТаблицаОбъектов.ОсновноеСредство
		|		ИНАЧЕ ТаблицаОбъектов.КомпонентАмортизации
		|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
		|
		|	ТаблицаОбъектов.СтоимостьУУ КАК СтоимостьУУ,
		|	ТаблицаОбъектов.СтоимостьБУ КАК СтоимостьБУ,
		|	0 КАК СтоимостьНУ,
		|
		|	ЛОЖЬ КАК ФактическаяСтоимость,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВариантПримененияЦелевогоФинансирования,
		|	0 КАК СуммаЦелевыхСредств,
		|	0 КАК ПервоначальнаяСтоимостьНУ,
		|
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВБУ,
		|	ЛОЖЬ КАК ОтражатьВНУ,
		|	ВЫБОР
		|		КОГДА ТаблицаОбъектов.КомпонентАмортизации.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КомпонентАмортизации)
		|				И НЕ ТаблицаОбъектов.КомпонентАмортизации.УчитыватьСтоимостьЛиквидационногоОбязательства
		|				И ИСТИНА В (
		|					ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ВтРасходыРаспределяютсяПоОбъектам КАК ВтРасходыРаспределяютсяПоОбъектам
		|					ГДЕ
		|						ВтРасходыРаспределяютсяПоОбъектам.ОбъектУчета = ТаблицаОбъектов.ОсновноеСредство)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УчестьПР,
		|
		|	ТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки
		|	
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОбъектов
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОбъектов.Ссылка
		|
		|ГДЕ
		|	ТаблицаОбъектов.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС) КАК ХозяйственнаяОперация,
		|
		|	ТаблицаОбъектов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОбъектов.ОсновноеСредство КАК ОбъектУчета,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасходыРаспределяютсяПоОбъектам,
		|
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)
		|			ТОГДА ДанныеДокумента.ОбъектСтроительства
		|		ИНАЧЕ ТаблицаОбъектов.ОсновноеСредство
		|	КОНЕЦ КАК АналитикаКапитализацииРасходов,
		|
		|	ТаблицаОбъектов.СтоимостьУУ КАК СтоимостьУУ,
		|	ТаблицаОбъектов.СтоимостьБУ КАК СтоимостьБУ,
		|	ТаблицаОбъектов.СтоимостьНУ КАК СтоимостьНУ,
		|
		|	ДанныеДокумента.ЧастичнаяМодернизация КАК ФактическаяСтоимость,
		|
		|	ДанныеДокумента.ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
		|	ТаблицаОбъектов.СуммаЦелевыхСредств КАК СуммаЦелевыхСредств,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
		|
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВБУ,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВНУ,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК УчестьПР,
		|
		|	ТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ИЗ
		|	Документ.МодернизацияОС2_4.ОС КАК ТаблицаОбъектов
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МодернизацияОС2_4 КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОбъектов.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
		|		ПО ТаблицаОбъектов.Ссылка = ПервоначальныеСведенияОС.Регистратор
		|			И ТаблицаОбъектов.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|ГДЕ
		|	ТаблицаОбъектов.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОбъектов.Ссылка КАК Ссылка,
		|	ТаблицаОбъектов.Дата КАК Дата,
		|	ТаблицаОбъектов.Организация КАК Организация,
		|	ТаблицаОбъектов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|
		|	1 КАК НомерСтроки,
		|	ТаблицаОбъектов.НематериальныйАктив КАК ОбъектУчета,
		|
		|	ЛОЖЬ КАК РасходыРаспределяютсяПоОбъектам,
		|	ТаблицаОбъектов.НематериальныйАктив КАК АналитикаКапитализацииРасходов,
		|
		|	ТаблицаОбъектов.ПервоначальнаяСтоимостьУУ КАК СтоимостьУУ,
		|	ТаблицаОбъектов.ПервоначальнаяСтоимостьБУ КАК СтоимостьБУ,
		|	0 КАК СтоимостьНУ,
		|
		|	ЛОЖЬ КАК ФактическаяСтоимость,
		|
		|	ТаблицаОбъектов.ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
		|	ТаблицаОбъектов.СуммаЦелевыхСредств КАК СуммаЦелевыхСредств,
		|	0 КАК ПервоначальнаяСтоимостьНУ,
		|
		|	ТаблицаОбъектов.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ТаблицаОбъектов.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ТаблицаОбъектов.ОтражатьВБУ КАК ОтражатьВБУ,
		|	ТаблицаОбъектов.ОтражатьВНУ КАК ОтражатьВНУ,
		|	ТаблицаОбъектов.ОтражатьВБУ КАК УчестьПР,
		|
		|	ТаблицаОбъектов.ИдентификаторДокумента КАК ИдентификаторСтроки
		|
		|ИЗ
		|	Документ.ПринятиеКУчетуНМА2_4 КАК ТаблицаОбъектов
		|
		|ГДЕ
		|	ТаблицаОбъектов.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УлучшениеНМА) КАК ХозяйственнаяОперация,
		|
		|	ТаблицаОбъектов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаОбъектов.НематериальныйАктив КАК ОбъектУчета,
		|
		|	ЛОЖЬ КАК РасходыРаспределяютсяПоОбъектам,
		|	ТаблицаОбъектов.НематериальныйАктив КАК АналитикаКапитализацииРасходов,
		|
		|	ТаблицаОбъектов.СтоимостьУУ КАК СтоимостьУУ,
		|	ТаблицаОбъектов.СтоимостьБУ КАК СтоимостьБУ,
		|	0 КАК СтоимостьНУ,
		|
		|	ЛОЖЬ КАК ФактическаяСтоимость,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВариантПримененияЦелевогоФинансирования,
		|	0 КАК СуммаЦелевыхСредств,
		|	ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
		|
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК ОтражатьВБУ,
		|	ЛОЖЬ КАК ОтражатьВНУ,
		|	ДанныеДокумента.ОтражатьВРеглУчете КАК УчестьПР,
		|
		|	ТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки
		|
		|ИЗ
		|	Документ.УлучшениеНМА.НМА КАК ТаблицаОбъектов
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УлучшениеНМА КАК ДанныеДокумента
		|		ПО ДанныеДокумента.Ссылка = ТаблицаОбъектов.Ссылка
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА КАК ПервоначальныеСведенияНМА
		|		ПО ТаблицаОбъектов.Ссылка = ПервоначальныеСведенияНМА.Регистратор
		|			И ТаблицаОбъектов.НематериальныйАктив = ПервоначальныеСведенияНМА.НематериальныйАктив
		|ГДЕ
		|	ТаблицаОбъектов.Ссылка В (ВЫБРАТЬ ВтДанныеКРасчету.Ссылка ИЗ ВтДанныеКРасчету КАК ВтДанныеКРасчету)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаКапитализацииРасходов
		|";	
		СписокЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	#КонецОбласти

	#Область СтатьиВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ПОМЕСТИТЬ СтатьиВНА
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		ИЛИ СтатьиРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПрочиеРасходыОстатки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаУпрОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаБезНДСОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаРеглОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ВременнаяРазницаОстаток
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ВременнаяРазницаОстаток + ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток - ПрочиеРасходыОстатки.СуммаРеглОстаток
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаРеглОстаток - ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница,
	|
	|	ПрочиеРасходыОстатки.СуммаНДДОстаток КАК СуммаНДД
	|
	|ПОМЕСТИТЬ ПрочиеРасходыОстатки
	|
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&НачалоМесяца,
	|			СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					СтатьиВНА.Ссылка
	|				ИЗ
	|					СтатьиВНА)
	|			И (Организация, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ВтТаблицаОбъектов.Организация,
	|					ВтТаблицаОбъектов.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ВтТаблицаОбъектов)) КАК ПрочиеРасходыОстатки
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПрочиеРасходыДвижения
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПрочиеРасходыОбороты.Регистратор) В (&ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца)
	|			ТОГДА НАЧАЛОПЕРИОДА(ПрочиеРасходыОбороты.Период, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПрочиеРасходыОбороты.Период, ДЕНЬ) 
	|	КОНЕЦ КАК Период,
	|
	|	ПрочиеРасходыОбороты.Регистратор КАК Регистратор,
	|	ПрочиеРасходыОбороты.Организация КАК Организация,
	|	ПрочиеРасходыОбороты.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОбороты.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОбороты.АналитикаРасходов КАК АналитикаРасходов,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаУпрОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаРеглОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ПостояннаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ВременнаяРазницаОборот
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ВременнаяРазницаОборот + ПрочиеРасходыОбороты.ПостояннаяРазницаОборот - ПрочиеРасходыОбороты.СуммаРеглОборот
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовНУ <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаРеглОборот - ПрочиеРасходыОбороты.ПостояннаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница,
	|
	|	ПрочиеРасходыОбороты.СуммаНДДОборот КАК СуммаНДД
	|
	|ПОМЕСТИТЬ ПрочиеРасходыДвижения
	|
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					СтатьиВНА.Ссылка
	|				ИЗ
	|					СтатьиВНА)
	|			И (Организация, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ВтТаблицаОбъектов.Организация,
	|					ВтТаблицаОбъектов.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ВтТаблицаОбъектов)) КАК ПрочиеРасходыОбороты
	|
	|ГДЕ
	|	НЕ ПрочиеРасходыОбороты.Регистратор В 
	|			(ВЫБРАТЬ
	|				ВтДанныеКРасчету.Ссылка
	|			ИЗ
	|				ВтДанныеКРасчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаРасходов
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область ТаблицаРасходов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расходы.Период                     КАК Период,
	|	Расходы.Организация                КАК Организация,
	|	Расходы.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	Расходы.Подразделение              КАК Подразделение,
	|	Расходы.СтатьяРасходов             КАК СтатьяРасходов,
	|	Расходы.АналитикаРасходов          КАК АналитикаРасходов,
	
	// Должны присутствовать все ресурсы регистра Прочие расходы
	|	СУММА(Расходы.Сумма)               КАК Сумма,
	|	СУММА(Расходы.СуммаУпр)            КАК СуммаУпр,
	|	СУММА(Расходы.СуммаБезНДС)         КАК СуммаБезНДС,
	|	СУММА(Расходы.СуммаРегл)           КАК СуммаРегл,
	|	СУММА(Расходы.ПостояннаяРазница)   КАК ПостояннаяРазница,
	|	СУММА(Расходы.ВременнаяРазница)    КАК ВременнаяРазница,
	|	СУММА(Расходы.СуммаРегл - Расходы.ПостояннаяРазница - Расходы.ВременнаяРазница) КАК СуммаНУ,
	|	СУММА(Расходы.СуммаНДД)            КАК СуммаНДД
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		&НачалоМесяца КАК Период,
	|		ПрочиеРасходыОстатки.Организация КАК Организация,
	|		ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|		ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|
	|		ПрочиеРасходыОстатки.Сумма КАК Сумма,
	|		ПрочиеРасходыОстатки.СуммаУпр КАК СуммаУпр,
	|		ПрочиеРасходыОстатки.СуммаБезНДС КАК СуммаБезНДС,
	|		ПрочиеРасходыОстатки.СуммаРегл КАК СуммаРегл,
	|		ПрочиеРасходыОстатки.ПостояннаяРазница КАК ПостояннаяРазница,
	|		ПрочиеРасходыОстатки.ВременнаяРазница КАК ВременнаяРазница,
	|		ПрочиеРасходыОстатки.СуммаНДД КАК СуммаНДД
	|
	|	ИЗ
	|		ПрочиеРасходыОстатки КАК ПрочиеРасходыОстатки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеРасходыДвижения.Период КАК Период,
	|		ПрочиеРасходыДвижения.Организация КАК Организация,
	|		ПрочиеРасходыДвижения.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПрочиеРасходыДвижения.Подразделение КАК Подразделение,
	|		ПрочиеРасходыДвижения.СтатьяРасходов КАК СтатьяРасходов,
	|		ПрочиеРасходыДвижения.АналитикаРасходов КАК АналитикаРасходов,
	|
	|		ПрочиеРасходыДвижения.Сумма КАК Сумма,
	|		ПрочиеРасходыДвижения.СуммаУпр КАК СуммаУпр,
	|		ПрочиеРасходыДвижения.СуммаБезНДС КАК СуммаБезНДС,
	|		ПрочиеРасходыДвижения.СуммаРегл КАК СуммаРегл,
	|		ПрочиеРасходыДвижения.ПостояннаяРазница КАК ПостояннаяРазница,
	|		ПрочиеРасходыДвижения.ВременнаяРазница КАК ВременнаяРазница,
	|		ПрочиеРасходыДвижения.СуммаНДД
	|
	|	ИЗ
	|		ПрочиеРасходыДвижения КАК ПрочиеРасходыДвижения
	|
	|	) КАК Расходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Период,
	|	Расходы.Организация,
	|	Расходы.НаправлениеДеятельности,
	|	Расходы.Подразделение,
	|	Расходы.СтатьяРасходов,
	|	Расходы.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расходы.Сумма) <> 0
	|		ИЛИ СУММА(Расходы.СуммаУпр) <> 0
	|		ИЛИ СУММА(Расходы.СуммаБезНДС) <> 0
	|		ИЛИ СУММА(Расходы.СуммаРегл) <> 0
	|		ИЛИ СУММА(Расходы.ПостояннаяРазница) <> 0
	|		ИЛИ СУММА(Расходы.ВременнаяРазница) <> 0
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область ТаблицаАналитикКапитализацииРасходов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтТаблицаОбъектов.АналитикаКапитализацииРасходов КАК АналитикаКапитализацииРасходов,
	|	МАКСИМУМ(ВтТаблицаОбъектов.Дата) КАК Дата,
	|	МАКСИМУМ(ВтТаблицаОбъектов.РасходыРаспределяютсяПоОбъектам) КАК РасходыРаспределяютсяПоОбъектам,
	|	МАКСИМУМ(ВтТаблицаОбъектов.ФактическаяСтоимость) КАК ФактическаяСтоимость
	|
	|ИЗ
	|	ВтТаблицаОбъектов КАК ВтТаблицаОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТаблицаОбъектов.АналитикаКапитализацииРасходов
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область ТаблицаОбъектов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтТаблицаОбъектов.Ссылка КАК Ссылка,
	|	ВтТаблицаОбъектов.ОбъектУчета КАК ОбъектУчета,
	|	ВтТаблицаОбъектов.АналитикаКапитализацииРасходов КАК АналитикаКапитализацииРасходов,
	|
	|	ВтТаблицаОбъектов.СтоимостьУУ КАК СтоимостьУУ,
	|	ВтТаблицаОбъектов.СтоимостьБУ КАК СтоимостьБУ,
	|	ВтТаблицаОбъектов.СтоимостьНУ КАК СтоимостьНУ,
	|
	|	ВтТаблицаОбъектов.ВариантПримененияЦелевогоФинансирования КАК ВариантПримененияЦелевогоФинансирования,
	|	ВтТаблицаОбъектов.СуммаЦелевыхСредств КАК СуммаЦелевыхСредств,
	|
	|	ВтТаблицаОбъектов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВтТаблицаОбъектов.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ВтТаблицаОбъектов.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ВтТаблицаОбъектов.ОтражатьВБУ КАК ОтражатьВБУ,
	|	ВтТаблицаОбъектов.ОтражатьВНУ КАК ОтражатьВНУ,
	|	ВтТаблицаОбъектов.УчестьПР КАК УчестьПР,
	|
	|	ВтТаблицаОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(ВтУчетнаяПолитика.ВключатьВСоставНалоговыхРасходовАрендныеПлатежи , ЛОЖЬ) КАК ВключатьВСоставНалоговыхРасходовАрендныеПлатежи
	|	
	|ИЗ
	|	ВтТаблицаОбъектов КАК ВтТаблицаОбъектов
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтУчетнаяПолитика КАК ВтУчетнаяПолитика
	|		ПО ВтУчетнаяПолитика.Организация = ВтТаблицаОбъектов.Организация
	|";	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти

	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	
	Запрос.УстановитьПараметр(
		"ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца", 
		ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРасходов = Результат[Результат.ВГраница()-2].Выгрузить();
	ТаблицаАналитикКапитализацииРасходов = Результат[Результат.ВГраница()-1].Выгрузить();
	ТаблицаОбъектов = Результат[Результат.ВГраница()].Выгрузить();
	
	ТаблицаРасходов.Индексы.Добавить("АналитикаРасходов");
	
	ТекущиеРасходы = РассчитатьРасходы(ТаблицаАналитикКапитализацииРасходов, ТаблицаОбъектов, ТаблицаРасходов);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеРасходы.Ссылка                      КАК Ссылка,
	|	ТекущиеРасходы.Организация                 КАК Организация,
	|	ТекущиеРасходы.ОбъектУчета                 КАК ОбъектУчета,
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница,
	|
	|	ТекущиеРасходы.НеУчитываемаяСтоимостьНУ    КАК НеУчитываемаяСтоимостьНУ,
	|
	|	ТекущиеРасходы.СуммаЦФ                     КАК СуммаЦФ,
	|	ТекущиеРасходы.СуммаПРЦФ                   КАК СуммаПРЦФ,
	|	ТекущиеРасходы.СуммаВРЦФ                   КАК СуммаВРЦФ,
	|
	|	ТекущиеРасходы.СуммаНДД                    КАК СуммаНДД,
	|
	|	ТекущиеРасходы.ИдентификаторСтроки         КАК ИдентификаторСтроки,
	|	ТекущиеРасходы.ИдентификаторСтрокиБУ       КАК ИдентификаторСтрокиБУ,
	|	ТекущиеРасходы.ИдентификаторСтрокиНУ       КАК ИдентификаторСтрокиНУ
	|
	|ПОМЕСТИТЬ ВтТекущиеРасходы
	|
	|ИЗ
	|	&ТекущиеРасходы КАК ТекущиеРасходы
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущиеРасходы", ТекущиеРасходы);
	Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
КонецПроцедуры

// Определяет выполнен ли расчет стоимости внеоборотных активов на указанную дату.
// 
// Параметры:
//  Период - Дата - Период
//  СписокОрганизаций - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации - Список организаций
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнен расчет стоимости внеоборотных активов.
Функция ВыполненРасчетСтоимостиВнеоборотныхАктивов(Период, СписокОрганизаций) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|
	|ГДЕ
	|	Задания.Месяц <= &Период
	|	И Задания.Организация В (&СписокОрганизаций)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", ?(Период <> '000101010000', Период, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр(
		"СписокОрганизаций", 
		?(ТипЗнч(СписокОрганизаций) = Тип("Массив"), СписокОрганизаций, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокОрганизаций)));
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеОперации

Функция СоздатьОчередьЗаданий(НачалоПериода, КонецПериода, СписокОрганизаций, НомерДоРасчета, МенеджерВременныхТаблиц)

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.СоздатьОчередьЗаданий");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);

	МаксимальноеКоличествоЗаданий = МаксимальноеКоличествоЗаданий();

	ОчередьЗаданийКРасчету = ВнеоборотныеАктивы.ОчередьЗаданийКРасчету();

	СформироватьТаблицуВтСписокДокументов(НачалоПериода, КонецПериода, СписокОрганизаций, МенеджерВременныхТаблиц);
	
	ОчередьОбъектов = ВнеоборотныеАктивы.ОчередьОбъектовСЛУ(
		НачалоПериода, 
		КонецПериода, 
		СписокОрганизаций, 
		МаксимальноеКоличествоЗаданий, 
		МенеджерВременныхТаблиц);
	
	МаксимальныйНомерОчереди = 1;
	Для Каждого Выборка Из ОчередьОбъектов Цикл
		МаксимальныйНомерОчереди = Макс(Выборка.НомерОчереди, МаксимальныйНомерОчереди);
	КонецЦикла;
	
	КоличествоДанных = 0;
	
	Для Каждого Выборка Из ОчередьОбъектов Цикл
		
		Если ОчередьЗаданийКРасчету.Количество() < Выборка.НомерОчереди Тогда
			
			ДанныеЗадания = ОчередьЗаданийКРасчету.Добавить();
			ДанныеЗадания.ПроцедураРасчета = "РасчетСтоимостиВНА.ВыполнитьОперациюПоОбъектам";
			
			Если МаксимальноеКоличествоЗаданий > 1 Тогда
				ДанныеЗадания.НаименованиеФоновогоЗадания = 
					СтрШаблон(
					НСтр("ru = 'Расчет стоимости ОС и НМА (задание %1 из %2)';
						|en = 'Calculation of fixed asset and intangible asset value (job %1 out of %2)'"), 
					Формат(Выборка.НомерОчереди, "ЧЦ=2; ЧВН=; ЧГ=;"), 
					МаксимальныйНомерОчереди); 
			Иначе
				ДанныеЗадания.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет стоимости ОС и НМА';
																|en = 'Calculation of fixed assets and intangible assets value'"); 
			КонецЕсли;

			ПараметрыВыполнения = ПараметрыВыполнения();
			ПараметрыВыполнения.КонецПериода = КонецМесяца(КонецПериода);
			ПараметрыВыполнения.СписокОрганизаций = СписокОрганизаций;
			ПараметрыВыполнения.ВыполнитьПроверку = Истина;
			ПараметрыВыполнения.НомерДоРасчета = НомерДоРасчета;
			
			ДанныеЗадания.ПараметрыЗадания = ПараметрыВыполнения;
			
		Иначе
			ДанныеЗадания = ОчередьЗаданийКРасчету[Выборка.НомерОчереди - 1];
		КонецЕсли;
		
		ПараметрыОбъекта = ДанныеЗадания.ПараметрыЗадания.СписокОбъектов.Добавить();
		ПараметрыОбъекта.ОбъектУчета = Выборка.ОбъектУчета;
		ПараметрыОбъекта.НачалоПериода = НачалоМесяца(Выборка.Месяц);
		
		КоличествоДанных = КоличествоДанных + 1;
		
	КонецЦикла;

	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	Возврат ОчередьЗаданийКРасчету;
	
КонецФункции

Функция ПолучитьПорциюДанныхКРасчету(НачалоПериода, ПараметрыВыполнения)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ПолучитьПорциюДанныхКРасчету");

	КоличествоДанных = ВнеоборотныеАктивы.СформироватьТаблицуВтПорцияДанныхКРасчету(
		НачалоПериода, 
		ПараметрыВыполнения.МенеджерВременныхТаблиц,
		РазмерПорцииДанных(),
		ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
	
	ПараметрыВыполнения.КоличествоДанных = ПараметрыВыполнения.КоличествоДанных + КоличествоДанных;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
	Возврат (КоличествоДанных <> 0);
	
КонецФункции

Процедура СформироватьДвиженияПоДокументам(Период, ПараметрыВыполнения)
	
	МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтТаблицаОбъектов");
	ИспользуемыеВТ.Добавить("ВтРасчетСтоимости");
	
	ПодготовитьПараметры(Период, МенеджерВременныхТаблиц);
	ТаблицыДвижений = ПодготовитьТаблицыДвижений(МенеджерВременныхТаблиц);
	ЗаписатьТаблицыДвижений(ТаблицыДвижений, ПараметрыВыполнения);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
КонецПроцедуры

Процедура ПодготовитьПараметры(Период, МенеджерВременныхТаблиц)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ПодготовитьПараметры");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтУчетнаяПолитика");
	ИспользуемыеВТ.Добавить("ВтТаблицаОбъектов");
	ИспользуемыеВТ.Добавить("ВтРасчетРасходов");
	ИспользуемыеВТ.Добавить("ВтРасчетСтоимости");
	
	СформироватьВтУчетнаяПолитика(Период, МенеджерВременныхТаблиц);
	СформироватьВтТекущиеРасходы(Период, МенеджерВременныхТаблиц);
	СформироватьВтРасчетРасходов(МенеджерВременныхТаблиц);
	СформироватьВтРасчетСтоимости(МенеджерВременныхТаблиц);
	
	КоличествоДанных = ВнеоборотныеАктивы.КоличествоДанныхКРасчету(МенеджерВременныхТаблиц, "ВтТаблицаОбъектов");

	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
КонецПроцедуры

Функция ПодготовитьТаблицыДвижений(МенеджерВременныхТаблиц)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ПодготовитьТаблицыДвижений");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтСписокДокументов");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|	ВтПорцияДанныхКРасчету.Организация КАК Организация,
	|	ВтПорцияДанныхКРасчету.Дата КАК Период
	|
	|ПОМЕСТИТЬ ВтСписокДокументов
	|
	|ИЗ
	|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВтСписокДокументов.Ссылка), 0) КАК Количество
	|ИЗ
	|	ВтСписокДокументов КАК ВтСписокДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(ВтСписокДокументов.Ссылка) КАК ТипДокумента
	|ИЗ
	|	ВтСписокДокументов КАК ВтСписокДокументов
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[Результат.ВГраница()-1].Выбрать();
	Выборка.Следующий();
	КоличествоДанных = Выборка.Количество;
	
	ТаблицыДвижений = Новый Соответствие;
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл

		МенеджерДокумента = Документы[Метаданные.НайтиПоТипу(Выборка.ТипДокумента).Имя];
		
		ТаблицыДвиженийДокументов = МенеджерДокумента.ТаблицыДвиженийРасчетаСтоимости(МенеджерВременныхТаблиц); // Структура
		
		Для Каждого КлючИЗначение Из ТаблицыДвиженийДокументов Цикл

			ИмяРегистра = ВнеоборотныеАктивыСлужебный.ИмяРегистраПоИмениТаблицыДвижений(КлючИЗначение.Ключ);
			
			Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено 
				ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
			
				Таблица = КлючИЗначение.Значение; // ТаблицаЗначений
				Таблица.Индексы.Добавить("Регистратор");
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицыДвижений.Вставить(Выборка.ТипДокумента, ТаблицыДвиженийДокументов);
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
	КонецЦикла;
	
	ИспользуемыеВТ.Удалить(ИспользуемыеВТ.Найти("ВтСписокДокументов"));
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);

	Возврат ТаблицыДвижений;
	
КонецФункции

Процедура ЗаписатьТаблицыДвижений(ТаблицыДвижений, ПараметрыВыполнения)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ЗаписатьТаблицыДвижений");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ПараметрыВыполнения.МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
	|	ВтПорцияДанныхКРасчету.Дата КАК Дата
	|ИЗ
	|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоДанных = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ДокументОбъект = ПроведениеДокументов.ЭмуляцияДокумента(Выборка.Ссылка, Выборка.Дата);
			УстановитьПризнакВыполненияОперации(ДокументОбъект);
			
			ТаблицыДвиженийДокументов = ТаблицыДвижений.Получить(ТипЗнч(Выборка.Ссылка));
			
			ВнеоборотныеАктивыСлужебный.ЗаписатьТаблицыДвижений(
				ТаблицыДвиженийДокументов, 
				ДокументОбъект, 
				ПараметрыВыполнения.МенеджерВременныхТаблиц,
				ПараметрыВыполнения.ВернутьДокументыКОтражению, 
				ИмяПризнакаВыполненияОперации());
				
			КоличествоДанных = КоличествоДанных + 1;
			
			Если ПараметрыВыполнения.СформироватьЗадания Тогда
				ПроведениеДокументов.СформироватьЗаданияНаОтложенныеДвижения(ДокументОбъект, ПараметрыВыполнения.МенеджерВременныхТаблиц);
			КонецЕсли;
		
			ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ПараметрыВыполнения.СформироватьЗадания Тогда
		СформироватьЗаданияНаАктуализациюДвижений(ПараметрыВыполнения.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	ВнеоборотныеАктивыСлужебный.ОтразитьВУправленческомБалансе(ТаблицыДвижений, ПараметрыВыполнения.МенеджерВременныхТаблиц);
	
	РасчетСтоимостиВНАЛокализация.ЗаписатьТаблицыДвижений(ТаблицыДвижений, ПараметрыВыполнения);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибки(ПараметрыВыполнения)

	Если НЕ ПараметрыВыполнения.ВыполнитьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.ЗарегистрироватьОшибки");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ПараметрыВыполнения.МенеджерВременныхТаблиц);
	ИспользуемыеВТ.Добавить("ВтОшибки");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетСтоимости.Ссылка КАК Ссылка,
	|	РасчетСтоимости.ОбъектУчета КАК ОбъектУчета,
	|
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, 0)) + СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0)) КАК ФактическаяСтоимостьБУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0)) КАК ФактическаяСтоимостьНУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.Стоимость, 0)) КАК ФактическаяСтоимостьУУ
	|
	|ПОМЕСТИТЬ ВтРасчетСтоимостиСгруппированная
	|
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСтоимости.Ссылка,
	|	РасчетСтоимости.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОшибок.Ссылка КАК Ссылка,
	|	СписокОшибок.ОбъектУчета КАК ОбъектУчета,
	|	СписокОшибок.Организация КАК Организация,
	|	СписокОшибок.ОтражатьВБУ КАК ОтражатьВБУ,
	|	СписокОшибок.ОтражатьВНУ КАК ОтражатьВНУ,
	|	СписокОшибок.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|
	|	СписокОшибок.ПредварительнаяСтоимостьБУ КАК ПредварительнаяСтоимостьБУ,
	|	СписокОшибок.ПредварительнаяСтоимостьУУ КАК ПредварительнаяСтоимостьУУ,
	|	СписокОшибок.ФактическаяСтоимостьБУ КАК ФактическаяСтоимостьБУ,
	|	СписокОшибок.ФактическаяСтоимостьНУ КАК ФактическаяСтоимостьНУ,
	|	СписокОшибок.ФактическаяСтоимостьУУ КАК ФактическаяСтоимостьУУ
	|
	|ПОМЕСТИТЬ СписокОшибок
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтТаблицаОбъектов.Ссылка КАК Ссылка,
	|		ВтТаблицаОбъектов.ОбъектУчета КАК ОбъектУчета,
	|		ВтТаблицаОбъектов.Организация КАК Организация,
	|
	|		ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ВтТаблицаОбъектов.Ссылка) = Тип(Документ.МодернизацияОС2_4)
	|					И ВтТаблицаОбъектов.ОтражатьВБУ
	|					И ВтТаблицаОбъектов.ОтражатьВНУ
	|					И СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) = 0
	|					И СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьНУ, 0)) <> 0
	|			
	|			ТОГДА ЛОЖЬ
	|			ИНАЧЕ ВтТаблицаОбъектов.ОтражатьВБУ 
	|		КОНЕЦ КАК ОтражатьВБУ,
	|
	|		ВтТаблицаОбъектов.ОтражатьВНУ КАК ОтражатьВНУ,
	|		ВтТаблицаОбъектов.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|
	|		СУММА(ВтТаблицаОбъектов.СтоимостьБУ) КАК ПредварительнаяСтоимостьБУ,
	|		СУММА(ВтТаблицаОбъектов.СтоимостьУУ) КАК ПредварительнаяСтоимостьУУ,
	|		СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) КАК ФактическаяСтоимостьБУ,
	|		СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьНУ, 0)) КАК ФактическаяСтоимостьНУ,
	|		СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьУУ, 0)) КАК ФактическаяСтоимостьУУ
	|
	|	ИЗ
	|		ВтТаблицаОбъектов КАК ВтТаблицаОбъектов
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|			ПО (РасчетСтоимости.ОбъектУчета = ВтТаблицаОбъектов.ОбъектУчета)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ВтТаблицаОбъектов.Ссылка,
	|		ВтТаблицаОбъектов.ОбъектУчета,
	|		ВтТаблицаОбъектов.Организация,
	|		ВтТаблицаОбъектов.ОтражатьВУпрУчете,
	|		ВтТаблицаОбъектов.ОтражатьВБУ,
	|		ВтТаблицаОбъектов.ОтражатьВНУ
	|
	|	) КАК СписокОшибок
	|
	|ГДЕ
	|	(СписокОшибок.ФактическаяСтоимостьУУ < СписокОшибок.ПредварительнаяСтоимостьУУ
	|			И СписокОшибок.ОтражатьВУпрУчете
	|		ИЛИ СписокОшибок.ФактическаяСтоимостьБУ < СписокОшибок.ПредварительнаяСтоимостьБУ
	|			И СписокОшибок.ОтражатьВБУ
	|		ИЛИ СписокОшибок.ФактическаяСтоимостьНУ = 0
	|			И СписокОшибок.ОтражатьВНУ
	|			И НЕ СписокОшибок.ОтражатьВБУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОшибок.Ссылка КАК Ссылка,
	|	СписокОшибок.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыЭксплуатации.ТипОС КАК ТипОС,
	|	НематериальныеАктивы.ВидОбъектаУчета КАК ВидОбъектаУчета,
	|	СписокОшибок.Организация КАК Организация,
	|	ВЫРАЗИТЬ(СписокОшибок.Организация КАК Справочник.Организации).ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	СписокОшибок.ОтражатьВБУ КАК ОтражатьВБУ,
	|	СписокОшибок.ОтражатьВНУ КАК ОтражатьВНУ,
	|
	|	СписокОшибок.ПредварительнаяСтоимостьБУ КАК ПредварительнаяСтоимостьБУ,
	|	СписокОшибок.ПредварительнаяСтоимостьУУ КАК ПредварительнаяСтоимостьУУ,
	|	СписокОшибок.ФактическаяСтоимостьБУ КАК ФактическаяСтоимостьБУ,
	|	СписокОшибок.ФактическаяСтоимостьНУ КАК ФактическаяСтоимостьНУ,
	|	СписокОшибок.ФактическаяСтоимостьУУ КАК ФактическаяСтоимостьУУ
	|
	|ИЗ
	|	СписокОшибок КАК СписокОшибок
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ПО ОбъектыЭксплуатации.Ссылка = СписокОшибок.ОбъектУчета
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ПО НематериальныеАктивы.Ссылка = СписокОшибок.ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

	ШаблонСообщенияНМА_БУ = НСтр("ru = 'У нематериального актива ""%1"" предварительная стоимость (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.';
                              |en = 'Preliminary cost (local accounting) %2 (%3) of the ""%1"" intangible asset must not exceed actual cost %4 (%5).
                              |Change the preliminary cost in the %6 document.'");
	
	ШаблонСообщенияНМА_УУ = НСтр("ru = 'У нематериального актива ""%1"" предварительная стоимость (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.';
                              |en = 'Preliminary cost (management accounting) %2 (%3) of the ""%1"" intangible asset must not exceed actual cost %4 (%5).
                              |Change the preliminary cost in the %6 document.'");
	
	ШаблонСообщенияНМА_БУ_Нулевая = НСтр("ru = 'По нематериальному активу ""%1"" отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.';
                              |en = 'For the ""%1"" intangible asset, actual costs (local accounting) connected with its acquisition are missing.
                              |Check the documents in which the costs were recorded.'");
	
	ШаблонСообщенияНМА_УУ_Нулевая = НСтр("ru = 'По нематериальному активу ""%1"" отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.';
                              |en = 'For the ""%1"" intangible asset, actual costs (management accounting) connected with its acquisition are missing.
                              |Check the documents in which the costs were recorded.'");
		
	ШаблонСообщенияНИОКР_БУ = НСтр("ru = 'Сумма расходов на НИОКР (регл. учет) ""%1"" %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.';
                              |en = 'Amount of R&D expenses (local accounting) ""%1"" %2 (%3) must not exceed actual amount %4 (%5).
                              |Change preliminary amount of expenses %6.'");
	
	ШаблонСообщенияНИОКР_УУ = НСтр("ru = 'Сумма расходов на НИОКР (упр. учет) ""%1"" %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.';
                              |en = 'Amount of R&D expenses (management accounting) ""%1"" %2 (%3) must not exceed actual amount %4 (%5).
                              |Change preliminary amount of expenses %6.'");
	
	ШаблонСообщенияНИОКР_БУ_Нулевая = НСтр("ru = 'По расходам на НИОКР ""%1"" отсутствуют фактические суммы расходов (регл. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.';
                              |en = 'For the ""%1"" R&D expenses, actual expense amounts (local accounting) are missing.
                              |Check the documents in which the expenses were recorded.'");
	
	ШаблонСообщенияНИОКР_УУ_Нулевая = НСтр("ru = 'По расходам на НИОКР ""%1"" отсутствуют фактические суммы расходов (упр. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.';
                              |en = 'For the ""%1"" R&D expenses, actual expense amounts (management accounting) are missing.
                              |Check the documents in which the expenses were recorded.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
			
			ШаблонСообщенияОС_БУ = НСтр("ru = 'У основного средства ""%1"" предварительная сумма затрат (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
		                              |Необходимо изменить предварительную сумму затрат в документе %6.';
		                              |en = 'Preliminary cost amount (local accounting) %2 (%3) of the ""%1"" fixed asset must not exceed the actual cost %4 (%5).
		                              |Change the preliminary cost amount in the %6 document.'");
			
			ШаблонСообщенияОС_УУ = НСтр("ru = 'У основного средства ""%1"" предварительная сумма затрат (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
		                              |Необходимо изменить предварительную сумму затрат в документе %6.';
		                              |en = 'Preliminary cost amount (management accounting) %2 (%3) of the ""%1"" fixed asset must not exceed actual cost %4 (%5).
		                              |Change the preliminary cost amount in the %6 document.'");
			
			ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'У основного средства ""%1"" отсутствуют фактические затраты на модернизацию (регл. учет).
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'Actual modernization costs (local accounting) of the ""%1"" fixed asset are missing.
		                              |Check the documents in which the costs were recorded.'");
			
			ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'У основного средства ""%1"" отсутствуют фактические затраты на модернизацию (упр. учет).
		                              |Необходимо проверить заполнение в документах, которыми были отражены затраты.';
		                              |en = 'Actual modernization costs (management accounting) of the ""%1"" fixed asset are missing.
		                              |Check the documents in which the costs were recorded.'");
		
		ИначеЕсли ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации")
			И Выборка.ТипОС = Перечисления.ТипыОС.КомпонентАмортизации Тогда
			
			ШаблонСообщенияОС_БУ = НСтр("ru = 'В документе для компонента основного средства ""%1"" указана стоимость (регл. учет) %2 (%3), превышающая фактическую %4 (%5).
		                              |Необходимо изменить стоимость в документе %6.';
		                              |en = 'The document contains the %2 (%3) cost (local accounting) for the ""%1"" fixed asset component which exceeds the actual cost %4 (%5).
		                              |Change the cost in the %6 document.'");
			
			ШаблонСообщенияОС_УУ = НСтр("ru = 'В документе для компонента основного средства ""%1"" указана стоимость (упр. учет) %2 (%3), превышающая фактическую %4 (%5).
		                              |Необходимо изменить стоимость в документе %6.';
		                              |en = 'The document contains the %2 (%3) cost (local accounting) for the ""%1"" fixed asset component which exceeds the actual cost %4 (%5).
		                              |Change the cost in the %6 document.'");
			
			ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По компоненту основного средства ""%1"" отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'The ""%1"" fixed asset component has no actual expenses (local accounting) associated with its acquisition.
		                              |Check the documents that recorded the expenses.'");
			
			ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'По компоненту основного средства ""%1"" отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'The ""%1"" fixed asset component has no actual expenses (management accounting) associated with its acquisition.
		                              |Check the documents that recorded the expenses.'");
		Иначе
			
			ШаблонСообщенияОС_БУ = НСтр("ru = 'В документе для основного средства ""%1"" указана стоимость (регл. учет) %2 (%3), превышающая фактическую %4 (%5).
		                              |Необходимо изменить стоимость в документе %6.';
		                              |en = 'Document contains the %2 (%3) cost (local accounting) for the %1 fixed asset which exceeds the actual cost %4 (%5).
		                              |Change the cost in the %6 document.'");
			
			ШаблонСообщенияОС_УУ = НСтр("ru = 'В документе для основного средства ""%1"" указана стоимость (упр. учет) %2 (%3), превышающая фактическую %4 (%5).
		                              |Необходимо изменить стоимость в документе %6.';
		                              |en = 'The document contains the %2 (%3) cost (management accounting) for the ""%1"" fixed asset which exceeds the actual cost %4 (%5).
		                              |Change the cost in the %6 document.'");
			
			Если Выборка.ОтражатьВБУ И НЕ Выборка.ОтражатьВНУ Тогда
				
				ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству ""%1"" отсутствуют фактические затраты (бух. учет), связанные с его приобретением.
			                              |Необходимо проверить документы, которыми были отражены затраты.';
			                              |en = 'For the ""%1"" fixed asset, actual costs (local accounting) related to its acquisition are missing.
			                              |Check the documents in which the costs are recorded.'");
			                              
			ИначеЕсли Выборка.ОтражатьВНУ И НЕ Выборка.ОтражатьВБУ Тогда
				
				ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству ""%1"" отсутствуют фактические затраты (нал. учет), связанные с его приобретением.
			                              |Необходимо проверить документы, которыми были отражены затраты.';
			                              |en = 'For the ""%1"" fixed asset, actual costs (tax accounting) related to its acquisition are missing.
			                              |Check the documents in which the costs are recorded.'");
			                              
			Иначе
				
				ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству ""%1"" отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
			                              |Необходимо проверить документы, которыми были отражены затраты.';
			                              |en = 'For the ""%1"" fixed asset, actual costs (local accounting) related to its acquisition are missing.
			                              |Check the documents in which the costs are recorded.'");
			                              
			КонецЕсли;
				
			ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'По основному средству ""%1"" отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'For the ""%1"" fixed asset, actual costs (management accounting) related to its acquisition are missing.
		                              |Check the documents in which the costs are recorded.'");
										
		КонецЕсли;
	
		Если ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			
			ТекстОшибки_БУ = ШаблонСообщенияОС_БУ;
			ТекстОшибки_УУ = ШаблонСообщенияОС_УУ;
			ТекстОшибки_БУ_Нулевая = ШаблонСообщенияОС_БУ_Нулевая;
			ТекстОшибки_УУ_Нулевая = ШаблонСообщенияОС_УУ_Нулевая;
			
		ИначеЕсли ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
				ТекстОшибки_БУ = ШаблонСообщенияНМА_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНМА_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНМА_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНМА_УУ_Нулевая;
			Иначе
				ТекстОшибки_БУ = ШаблонСообщенияНИОКР_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНИОКР_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНИОКР_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНИОКР_УУ_Нулевая;
			КонецЕсли;
			 
		КонецЕсли; 
		
		Если Выборка.ПредварительнаяСтоимостьБУ > Выборка.ФактическаяСтоимостьБУ
			И Выборка.ОтражатьВБУ Тогда
			
			Если Выборка.ФактическаяСтоимостьБУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										Выборка.ВалютаРегламентированногоУчета,
										Формат(Выборка.ФактическаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										Выборка.ВалютаРегламентированногоУчета,
										Выборка.Ссылка);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов, 
				НачалоМесяца(ПараметрыВыполнения.КонецПериода),
				Выборка.Организация,
				ТекстОшибки,,
				Выборка.Ссылка);
				
		КонецЕсли; 
	
		Если Выборка.ФактическаяСтоимостьНУ = 0
			И Выборка.ОтражатьВНУ
			И НЕ Выборка.ОтражатьВБУ Тогда
			
			ТекстОшибки = СтрШаблон(ТекстОшибки_БУ_Нулевая, Выборка.ОбъектУчета);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов, 
				НачалоМесяца(ПараметрыВыполнения.КонецПериода),
				Выборка.Организация,
				ТекстОшибки,,
				Выборка.Ссылка);
				
		КонецЕсли; 
	
		Если Выборка.ПредварительнаяСтоимостьУУ > Выборка.ФактическаяСтоимостьУУ Тогда
			
			Если Выборка.ФактическаяСтоимостьУУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										Формат(Выборка.ФактическаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										Выборка.Ссылка);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов, 
				НачалоМесяца(ПараметрыВыполнения.КонецПериода),
				Выборка.Организация,
				ТекстОшибки,,
				Выборка.Ссылка);
				
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ПараметрыВыполнения.МенеджерВременныхТаблиц.Таблицы.Найти("СписокОшибокЛокализация") <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокОшибок.ОбъектУчета КАК ОбъектУчета
		|
		|ПОМЕСТИТЬ ВтОшибки
		|
		|ИЗ
		|	СписокОшибок КАК СписокОшибок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокОшибокЛокализация.ОбъектУчета КАК ОбъектУчета
		|
		|ИЗ
		|	СписокОшибокЛокализация КАК СписокОшибокЛокализация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокОшибок.ОбъектУчета КАК ОбъектУчета
		|
		|ПОМЕСТИТЬ ВтОшибки
		|
		|ИЗ
		|	СписокОшибок КАК СписокОшибок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

Процедура УдалитьЗаданияПорцииДанных(Период, ПараметрыВыполнения)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.УдалитьЗаданияПорцииДанных");

	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ПараметрыВыполнения.МенеджерВременныхТаблиц);

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтВсеДанныеКРасчету.ОбъектУчета КАК ОбъектУчета
	|
	|ПОМЕСТИТЬ ВтНеобработанныеДанные
	|
	|ИЗ
	|	ВтВсеДанныеКРасчету КАК ВтВсеДанныеКРасчету
	|
	|ГДЕ
	|	НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ОбработанныеДанные КАК ОбработанныеДанные
	|			ГДЕ
	|				ОбработанныеДанные.Ссылка = ВтВсеДанныеКРасчету.Ссылка
	|				И НЕ ОбработанныеДанные.ЕстьОшибки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтПорцияДанныхКРасчету.ОбъектУчета КАК ОбъектУчета
	|
	|ПОМЕСТИТЬ ВтЗаданияКУдалению
	|
	|ИЗ
	|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
	|
	|ГДЕ
	|	НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ВтНеобработанныеДанные КАК ВтНеобработанныеДанные
	|			ГДЕ
	|				ВтНеобработанныеДанные.ОбъектУчета = ВтПорцияДанныхКРасчету.ОбъектУчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗафиксироватьРасчет(
		Период,
		ПараметрыВыполнения.СписокОрганизаций, 
		ПараметрыВыполнения.НомерДоРасчета, 
		ПараметрыВыполнения.МенеджерВременныхТаблиц,
		"ВтЗаданияКУдалению");

	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

Процедура УдалитьЗаданияПоДату(Период, ПараметрыВыполнения)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("РасчетСтоимостиВНА.УдалитьЗаданияПоДату");
	
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗафиксироватьРасчет(
		Период,
		ПараметрыВыполнения.СписокОрганизаций, 
		ПараметрыВыполнения.НомерДоРасчета, 
		ПараметрыВыполнения.МенеджерВременныхТаблиц,
		"СписокОбъектов");

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

Процедура ЗапомнитьОбработанныеДанные(ПараметрыВыполнения)
	
	СписокЗапросов = Новый Массив;
	
	Если ПараметрыВыполнения.МенеджерВременныхТаблиц.Таблицы.Найти("ВтОшибки") <> Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
		|	ВтПорцияДанныхКРасчету.ОбъектУчета КАК ОбъектУчета,
		|	ВЫБОР
		|		КОГДА ИСТИНА В (
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ВтОшибки КАК ВтОшибки
		|				ГДЕ
		|					ВтОшибки.ОбъектУчета = ВтПорцияДанныхКРасчету.ОбъектУчета)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ ЕстьОшибки
		|
		|ПОМЕСТИТЬ ОбработанныеДанные_Временная
		|
		|ИЗ
		|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбработанныеДанные.Ссылка КАК Ссылка,
		|	ОбработанныеДанные.ОбъектУчета КАК ОбъектУчета,
		|	ОбработанныеДанные.ЕстьОшибки КАК ЕстьОшибки
		|ИЗ
		|	ОбработанныеДанные КАК ОбработанныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВтПорцияДанныхКРасчету.Ссылка КАК Ссылка,
		|	ВтПорцияДанныхКРасчету.ОбъектУчета КАК ОбъектУчета,
		|	ЛОЖЬ ЕстьОшибки
		|
		|ПОМЕСТИТЬ ОбработанныеДанные_Временная
		|
		|ИЗ
		|	ВтПорцияДанныхКРасчету КАК ВтПорцияДанныхКРасчету
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбработанныеДанные.Ссылка КАК Ссылка,
		|	ОбработанныеДанные.ОбъектУчета КАК ОбъектУчета,
		|	ОбработанныеДанные.ЕстьОшибки КАК ЕстьОшибки
		|ИЗ
		|	ОбработанныеДанные КАК ОбработанныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
	КонецЕсли;
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"УНИЧТОЖИТЬ ОбработанныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбработанныеДанные.Ссылка КАК Ссылка,
	|	ОбработанныеДанные.ОбъектУчета КАК ОбъектУчета,
	|	ОбработанныеДанные.ЕстьОшибки КАК ЕстьОшибки
	|
	|ПОМЕСТИТЬ ОбработанныеДанные
	|
	|ИЗ
	|	ОбработанныеДанные_Временная КАК ОбработанныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбработанныеДанные_Временная
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РассчитатьРасходы(ТаблицаАналитикКапитализацииРасходов, ТаблицаОбъектов, ТаблицаРасходов)

	РасчетРасходов = ТаблицаРасходов.СкопироватьКолонки();
	РасчетРасходов.Колонки.Добавить("Ссылка", ТаблицаОбъектов.Колонки.Ссылка.ТипЗначения);
	РасчетРасходов.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации,СправочникСсылка.НематериальныеАктивы"));
	РасчетРасходов.Колонки.Добавить("СуммаЦФ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РасчетРасходов.Колонки.Добавить("СуммаПРЦФ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РасчетРасходов.Колонки.Добавить("СуммаВРЦФ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РасчетРасходов.Колонки.Добавить("НеУчитываемаяСтоимостьНУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РасчетРасходов.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	РасчетРасходов.Колонки.Добавить("ИдентификаторСтрокиБУ", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	РасчетРасходов.Колонки.Добавить("ИдентификаторСтрокиНУ", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	Для Каждого ДанныеАналитики Из ТаблицаАналитикКапитализацииРасходов Цикл
		
		РасходыПоАналитикеКапитализации = ТаблицаРасходов.СкопироватьКолонки();
		СтруктураПоиска = Новый Структура("АналитикаРасходов", ДанныеАналитики.АналитикаКапитализацииРасходов);
		СписокСтрок = ТаблицаРасходов.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРасходы Из СписокСтрок Цикл
			Если СтрокаРасходы.Период <= ДанныеАналитики.Дата Тогда
				СтрокаРасходыПоАналитике = РасходыПоАналитикеКапитализации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасходыПоАналитике, СтрокаРасходы);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("АналитикаКапитализацииРасходов", ДанныеАналитики.АналитикаКапитализацииРасходов);
		ОбъектыПоАналитикеКапитализации = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
		
		Если ДанныеАналитики.ФактическаяСтоимость Тогда
			
			РассчитатьРасходыПоФактическойСтоимости(
				РасчетРасходов, ДанныеАналитики, ТаблицаОбъектов, РасходыПоАналитикеКапитализации);
			
		ИначеЕсли ДанныеАналитики.РасходыРаспределяютсяПоОбъектам Тогда
				
			РаспределитьРасходыПоОбъектам(
				РасчетРасходов, ОбъектыПоАналитикеКапитализации, РасходыПоАналитикеКапитализации);
				
		Иначе
				
			РассчитатьРасходыПоОбъектам(РасчетРасходов, ОбъектыПоАналитикеКапитализации, РасходыПоАналитикеКапитализации);
				
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетСтоимостиВНАЛокализация.ОбработатьРасчетРасходов(РасчетРасходов, ТаблицаОбъектов);
	
	Для Каждого ДанныеСтроки Из РасчетРасходов Цикл
		ДанныеСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор();
		ДанныеСтроки.ИдентификаторСтрокиБУ = Новый УникальныйИдентификатор();
		ДанныеСтроки.ИдентификаторСтрокиНУ = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат РасчетРасходов;

КонецФункции

Процедура СформироватьТаблицуВтСписокДокументов(НачалоПериода, КонецПериода, СписокОрганизаций, МенеджерВременныхТаблиц)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеДокументы.Регистратор КАК Ссылка
	|
	|ПОМЕСТИТЬ ВтСписокДокументов
	|
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ТекущиеДокументы
	|
	|ГДЕ
	|	ТекущиеДокументы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|	И ТИПЗНАЧЕНИЯ(ТекущиеДокументы.Регистратор) В (&ТипыДокументов)
	|	И ТекущиеДокументы.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|	И ТекущиеДокументы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТекущиеДокументы.Активность
	|
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ЗаданияКРасчету КАК ЗаданияКРасчету
	|		ГДЕ
	|			ЗаданияКРасчету.ОбъектУчета = ТекущиеДокументы.ОсновноеСредство
	|			ИЛИ ЗаданияКРасчету.ОбъектУчета = ТекущиеДокументы.АналитикаКапитализацииРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеДокументы.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ТекущиеДокументы
	|
	|ГДЕ
	|	ТекущиеДокументы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТекущиеДокументы.Организация В (&СписокОрганизаций)
	|	И ТИПЗНАЧЕНИЯ(ТекущиеДокументы.Регистратор) В (&ТипыДокументов)
	|	И ТекущиеДокументы.ХозяйственнаяОперация В (&ХозяйственныеОперации)
	|	И ТекущиеДокументы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТекущиеДокументы.Активность
	|
	|	И ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ЗаданияКРасчету КАК ЗаданияКРасчету
	|		ГДЕ
	|			ЗаданияКРасчету.ОбъектУчета = ТекущиеДокументы.НематериальныйАктив)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументовПоКоторымРассчитываетсяСтоимость());
	Запрос.УстановитьПараметр("ХозяйственныеОперации", ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЕстьДокументыПоКоторымФормируютсяДвижения(ПараметрыОбработчика)

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

#КонецОбласти

#Область АктуализацияДвиженийПоВнеоборотнымАктивам

Процедура СформироватьЗаданияНаАктуализациюДвижений(МенеджерВременныхТаблиц)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтТаблицаОбъектов.Ссылка КАК Документ,
	|	ВтТаблицаОбъектов.Организация КАК Организация,
	|	ВтТаблицаОбъектов.ОбъектУчета КАК ОбъектУчета,
	|	МИНИМУМ(ВтТаблицаОбъектов.Дата) КАК Месяц
	|
	|ИЗ
	|	ВтТаблицаОбъектов КАК ВтТаблицаОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТаблицаОбъектов.Ссылка,
	|	ВтТаблицаОбъектов.Организация,
	|	ВтТаблицаОбъектов.ОбъектУчета
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКАктуализацииДвиженийПоВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос -
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяТаблицы - Строка, Неопределено - Имя таблицы
Процедура ТекстЗапросаПустаяВтРасчетСтоимости(Запрос, ТекстыЗапроса, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВтРасчетСтоимости";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено
		И Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектУчета,
	|	NULL   КАК КорСтатьяРасходов,
	|	NULL   КАК КорАналитикаРасходов,
	|	NULL   КАК КорПодразделение,
	|	NULL   КАК КорНаправлениеДеятельности,
	|	0      КАК Стоимость,
	|	0      КАК Сумма,
	|	0      КАК СтоимостьРегл,
	|	0      КАК СтоимостьНУ,
	|	0      КАК СтоимостьПР,
	|	0      КАК СтоимостьВР,
	|	0      КАК СтоимостьЦФ,
	|	0      КАК СтоимостьНУЦФ,
	|	0      КАК СтоимостьПРЦФ,
	|	0      КАК СтоимостьВРЦФ,
	|	0      КАК АмортизационнаяПремия,
	|	0      КАК РезервПереоценкиСтоимости,
	|	0      КАК РезервПереоценкиСтоимостиРегл,
	|	0      КАК ЗалоговаяСтоимость,
	|	0      КАК ПредварительнаяСтоимость,
	|	0      КАК ПредварительнаяСтоимостьРегл,
	|	0      КАК КорСуммаНУ,
	|	0      КАК КорПостояннаяРазница,
	|	0      КАК НеУчитываемаяСтоимостьНУ,
	|	0      КАК СуммаНДД,
	|	0      КАК НомерСтроки,
	|	""""   КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втИмяТаблицы
	| 
	|ГДЕ
	|	ЛОЖЬ
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втИмяТаблицы", ИмяТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Функция СформироватьСписокОбъектовИПолучитьНачалоПериода(ПараметрыВыполнения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СписокОбъектов.ОбъектУчета КАК ОбъектУчета,
	|	СписокОбъектов.НачалоПериода КАК НачалоПериода
	|
	|ПОМЕСТИТЬ СписокОбъектов
	|
	|ИЗ
	|	&СписокОбъектов КАК СписокОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(СписокОбъектов.НачалоПериода), ДАТАВРЕМЯ(1,1,1)) КАК НачалоПериода
	|ИЗ
	|	СписокОбъектов КАК СписокОбъектов
	|
	|ГДЕ
	|	СписокОбъектов.НачалоПериода <> ДАТАВРЕМЯ(1,1,1)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокОбъектов", ПараметрыВыполнения.СписокОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Выборка.НачалоПериода <> '000101010000', Выборка.НачалоПериода, ПараметрыВыполнения.КонецПериода);
	
КонецФункции

Процедура СформироватьВтУчетнаяПолитика(Период, МенеджерВременныхТаблиц)
	
	ТекстЗапроса = РасчетСтоимостиВНАЛокализация.ТекстЗапросаВтУчетнаяПолитика();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Организация,
		|	ЛОЖЬ КАК ВключатьВСоставНалоговыхРасходовАрендныеПлатежи,
		|	ЛОЖЬ КАК ПлательщикНалогаНаПрибыль
		|ПОМЕСТИТЬ ВтУчетнаяПолитика
		|";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	
	Запрос.Выполнить();

КонецПроцедуры

// Используется для предварительного расчета стоимости.
//
// Параметры:
//  МассивСсылок			 - Массив - Список документов.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - Менеджер временных таблиц.
// 
// Возвращаемое значение:
//  Структура - Содержит данные для начала предварительного расчета стоимости:
//      * Результат - РезультатЗапроса -
//      * ОбъектыДляКоторыхСведенияНеАктуальны - Массив из СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы -
//
Функция ДанныеДляПредварительногоРасчетаСтоимостиВнеоборотныхАктивов(МассивСсылок, МенеджерВременныхТаблиц = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период    КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|
	|ПОМЕСТИТЬ КэшГраниц
	|
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьОС.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьОС.АналитикаКапитализацииРасходов)
	|			И (Задания.Месяц <= СтоимостьОС.Период)
	|
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период                          КАК Период,
	|	СтоимостьОС.АналитикаКапитализацииРасходов  КАК ОбъектУчета,
	|	СтоимостьОС.Организация                     КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|		ПО СтоимостьОС_РасчетСтоимости.Регистратор = СтоимостьОС.Регистратор
	|			И СтоимостьОС_РасчетСтоимости.РасчетСтоимости
	|
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период   КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьНМА.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьНМА.НематериальныйАктив)
	|			И (Задания.Месяц <= СтоимостьНМА.Период)
	|
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период               КАК Период,
	|	СтоимостьНМА.НематериальныйАктив  КАК ОбъектУчета,
	|	СтоимостьНМА.Организация          КАК Организация
	|
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|		ПО СтоимостьНМА_РасчетСтоимости.Регистратор = СтоимостьНМА.Регистратор
	|			И СтоимостьНМА_РасчетСтоимости.РасчетСтоимости
	|
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымРассчитываетсяСтоимость", ТипыДокументовПоКоторымРассчитываетсяСтоимость(Истина));
	
	Результат = Запрос.ВыполнитьПакет();

	ОбъектыДляКоторыхСведенияНеАктуальны = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Возврат Новый Структура(
			"Результат, ОбъектыДляКоторыхСведенияНеАктуальны", 
			Результат[Результат.ВГраница()],
			ОбъектыДляКоторыхСведенияНеАктуальны);
	
КонецФункции

// Определяет, что движения записываются при выполнении операции "Расчет стоимости ОС и НМА".
// Используется для управления логикой записи движений.
//
// Параметры:
//  Объект	 - РегистрСведенийНаборЗаписей - Набор записей регистра.
// 
// Возвращаемое значение:
//  Булево - Истина, если движения записываются при выполнении операции.
//
Функция ДвиженияЗаписываютсяПриВыполненииОперации(Объект) Экспорт

	Возврат Объект <> Неопределено 
		И Объект.ДополнительныеСвойства.Свойство(ИмяПризнакаВыполненияОперации());

КонецФункции

// Определяет, что движения записываются при выполнении операции "Актуализация движений по ОС и НМА.
// Используется для управления логикой записи движений.
//
// Параметры:
//  Объект	 - РегистрСведенийНаборЗаписей - Набор записей регистра.
// 
// Возвращаемое значение:
//  Булево - Истина, если движения записываются при выполнении операции.
//
Функция ДвиженияЗаписываютсяПриАктуализацияДвиженийПоВНА(Объект) Экспорт

	Возврат Объект <> Неопределено 
		И Объект.ДополнительныеСвойства.Свойство(ИмяПризнакаВыполненияОперацииАктуализацияДвиженийПоВНА());

КонецФункции

// Установить признак выполнения расчета стоимости внеоборотных активов.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ.
Процедура УстановитьПризнакВыполненияОперации(ДокументОбъект) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяПризнакаВыполненияОперации(), Истина);
	
КонецПроцедуры

// Имя признака выполнения расчета стоимости внеоборотных активов.
// 
// Возвращаемое значение:
//  Строка - Имя признака выполнения расчета стоимости внеоборотных активов
Функция ИмяПризнакаВыполненияОперации() Экспорт
	Возврат "РасчетСтоимостиВнеоборотныхАктивов";
КонецФункции

// Имя признака выполнения операции актуализация движений по ВНА.
// 
// Возвращаемое значение:
//  Строка -  Имя признака выполнения операции
Функция ИмяПризнакаВыполненияОперацииАктуализацияДвиженийПоВНА() Экспорт
	Возврат "АктуализацияДвиженийПоВНА";
КонецФункции

Функция ТипыДокументовПоКоторымРассчитываетсяСтоимость(ПроверитьНаличиеПрав = Ложь) Экспорт

	СписокТипов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных(
		Метаданные.Документы.МодернизацияОС2_4.Имя, ПроверитьНаличиеПрав, СписокТипов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных(
		Метаданные.Документы.ПринятиеКУчетуНМА2_4.Имя, ПроверитьНаличиеПрав, СписокТипов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных(
		Метаданные.Документы.ПринятиеКУчетуОС2_4.Имя, ПроверитьНаличиеПрав, СписокТипов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных(
		Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации.Имя, ПроверитьНаличиеПрав, СписокТипов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных(
		Метаданные.Документы.УлучшениеНМА.Имя, ПроверитьНаличиеПрав, СписокТипов);
	
	Возврат СписокТипов;

КонецФункции

Функция ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость() Экспорт

	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.МодернизацияОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.УлучшениеНМА);
	
	Возврат Операции;

КонецФункции

Процедура РассчитатьРасходыПоФактическойСтоимости(РезультатРасчета, ДанныеДокумента, ТаблицаОбъектов, ТаблицаРасходов)
	
	// Нужно фактическую стоимость каждого объекта распределить пропорционально суммам расходов.
	//
	// Например, в документе: СтоимостьУУ=1000, СтоимостьБУ=1000
	// Расходы: Статья1: СуммаУпр=500,  СуммаРегл=5000;
	//          Статья2: СуммаУпр=1500, СуммаРегл=15000;
	// Расчет: СтоимостьУУ на Статья1=1000*500/2000 =250
	//                     на Статья2=1000*1500/2000=750
	//         СтоимостьБУ на Статья1=1000*5000/2000 =2500
	//                     на Статья2=1000*15000/2000=7500.
	
	СведенияОРасходах = Новый Соответствие;
	Для Каждого СтрокаРасходы Из ТаблицаРасходов Цикл
		
		ДанныеПоАналитике = СведенияОРасходах.Получить(ДанныеДокумента.АналитикаКапитализацииРасходов);
		Если ДанныеПоАналитике = Неопределено Тогда
			ДанныеПоАналитике = Новый Структура;
			
			ДанныеПоАналитике.Вставить("РасходыПоОбъектуУчета", ТаблицаРасходов.СкопироватьКолонки());

			ДанныеПоАналитике.Вставить("МассивКоэффициентовСумма", Новый Массив);
			ДанныеПоАналитике.Вставить("МассивКоэффициентовСуммаБезНДС", Новый Массив);
			ДанныеПоАналитике.Вставить("МассивКоэффициентовСуммаУпр", Новый Массив);
			ДанныеПоАналитике.Вставить("МассивКоэффициентовСуммаРегл", Новый Массив);
			
			ДанныеПоАналитике.Вставить("СуммаОстаток", 0);
			ДанныеПоАналитике.Вставить("СуммаБезНДСОстаток", 0);
			ДанныеПоАналитике.Вставить("СуммаУпрОстаток", 0);
			ДанныеПоАналитике.Вставить("СуммаРеглОстаток", 0);
		КонецЕсли;
		
		РасходыПоОбъектуУчета = ДанныеПоАналитике.РасходыПоОбъектуУчета.Добавить();
		ЗаполнитьЗначенияСвойств(РасходыПоОбъектуУчета, СтрокаРасходы);
		
		ДанныеПоАналитике.МассивКоэффициентовСумма.Добавить(СтрокаРасходы.Сумма);
		ДанныеПоАналитике.МассивКоэффициентовСуммаБезНДС.Добавить(СтрокаРасходы.СуммаБезНДС);
		ДанныеПоАналитике.МассивКоэффициентовСуммаУпр.Добавить(СтрокаРасходы.СуммаУпр);
		ДанныеПоАналитике.МассивКоэффициентовСуммаРегл.Добавить(СтрокаРасходы.СуммаРегл);
		
		ДанныеПоАналитике.СуммаОстаток = ДанныеПоАналитике.СуммаОстаток + СтрокаРасходы.Сумма;
		ДанныеПоАналитике.СуммаБезНДСОстаток = ДанныеПоАналитике.СуммаБезНДСОстаток + СтрокаРасходы.СуммаБезНДС;
		ДанныеПоАналитике.СуммаУпрОстаток = ДанныеПоАналитике.СуммаУпрОстаток + СтрокаРасходы.СуммаУпр;
		ДанныеПоАналитике.СуммаРеглОстаток = ДанныеПоАналитике.СуммаРеглОстаток + СтрокаРасходы.СуммаРегл;
		
		СведенияОРасходах.Вставить(ДанныеДокумента.АналитикаКапитализацииРасходов, ДанныеПоАналитике);
		
	КонецЦикла;
	
	Для каждого ДанныеОбъекта Из ТаблицаОбъектов Цикл
		
		ДанныеПоАналитике = СведенияОРасходах.Получить(ДанныеОбъекта.АналитикаКапитализацииРасходов);
		
		Если ДанныеПоАналитике = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеОбъекта.ОтражатьВУпрУчете Тогда

			РаспределениеСумма = ПолучитьРаспределениеСтоимости(
									ДанныеОбъекта.СтоимостьУУ,
									ДанныеПоАналитике.СуммаОстаток,
									ДанныеПоАналитике.МассивКоэффициентовСумма);
			
			РаспределениеСуммаБезНДС = ПолучитьРаспределениеСтоимости(
									ДанныеОбъекта.СтоимостьУУ,
									ДанныеПоАналитике.СуммаБезНДСОстаток,
									ДанныеПоАналитике.МассивКоэффициентовСуммаБезНДС);
									
			РаспределениеСуммаУпр = ПолучитьРаспределениеСтоимости(
									ДанныеОбъекта.СтоимостьУУ,
									ДанныеПоАналитике.СуммаУпрОстаток,
									ДанныеПоАналитике.МассивКоэффициентовСуммаУпр);
									
		Иначе
			РаспределениеСумма = Неопределено;
			РаспределениеСуммаБезНДС = Неопределено;
			РаспределениеСуммаУпр = Неопределено;
		КонецЕсли;
		
		Если ДанныеОбъекта.ОтражатьВРеглУчете Тогда
			
			РаспределениеСуммаРегл = ПолучитьРаспределениеСтоимости(
									ДанныеОбъекта.СтоимостьБУ,
									ДанныеПоАналитике.СуммаРеглОстаток,
									ДанныеПоАналитике.МассивКоэффициентовСуммаРегл);
			
		Иначе
			РаспределениеСуммаРегл = Неопределено;
		КонецЕсли;
		
		Для Сч = 0 По ДанныеПоАналитике.РасходыПоОбъектуУчета.Количество()-1 Цикл
			
			РасходыПоОбъектуУчета = ДанныеПоАналитике.РасходыПоОбъектуУчета[Сч];
			
			НоваяСтрока = РезультатРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, РасходыПоОбъектуУчета);

			НоваяСтрока.Ссылка = ДанныеОбъекта.Ссылка;
			НоваяСтрока.ОбъектУчета = ДанныеОбъекта.ОбъектУчета;
			
			НоваяСтрока.Сумма = ?(РаспределениеСумма <> Неопределено, РаспределениеСумма[Сч], 0);
			НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСуммаБезНДС[Сч], 0);
			НоваяСтрока.СуммаУпр = ?(РаспределениеСуммаУпр <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
			НоваяСтрока.СуммаРегл = ?(РаспределениеСуммаРегл <> Неопределено, РаспределениеСуммаРегл[Сч], 0);
			
			// ПР и ВР рассчитываются исходя из полученной доли СуммаРегл
			Если РаспределениеСуммаРегл <> Неопределено Тогда
				Если РаспределениеСуммаРегл[Сч] <> РасходыПоОбъектуУчета.СуммаРегл Тогда
					
					НоваяСтрока.ПостояннаяРазница = 
						Окр(РасходыПоОбъектуУчета.ПостояннаяРазница 
							* РаспределениеСуммаРегл[Сч] 
							/ РасходыПоОбъектуУчета.СуммаРегл, 2);
					
					НоваяСтрока.ВременнаяРазница = 
						Окр(РасходыПоОбъектуУчета.ВременнаяРазница 
							* РаспределениеСуммаРегл[Сч] 
							/ РасходыПоОбъектуУчета.СуммаРегл, 2);
					
					НоваяСтрока.СуммаНДД = 
						Окр(РасходыПоОбъектуУчета.СуммаНДД 
							* РаспределениеСуммаРегл[Сч] 
							/ РасходыПоОбъектуУчета.СуммаРегл, 2);
					
				КонецЕсли;
			Иначе
				НоваяСтрока.ПостояннаяРазница = 0;
				НоваяСтрока.ВременнаяРазница  = 0;
			КонецЕсли;

			УчестьОтражениеВУчетеПриРасчетеСтоимости(НоваяСтрока, ДанныеОбъекта);

			// Уменьшаем расходы
			РасходыПоОбъектуУчета.Сумма = РасходыПоОбъектуУчета.Сумма - НоваяСтрока.Сумма;
			РасходыПоОбъектуУчета.СуммаБезНДС = РасходыПоОбъектуУчета.СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
			РасходыПоОбъектуУчета.СуммаУпр = РасходыПоОбъектуУчета.СуммаУпр - НоваяСтрока.СуммаУпр;
			РасходыПоОбъектуУчета.СуммаРегл = РасходыПоОбъектуУчета.СуммаРегл - НоваяСтрока.СуммаРегл;
			РасходыПоОбъектуУчета.ПостояннаяРазница = РасходыПоОбъектуУчета.ПостояннаяРазница - НоваяСтрока.ПостояннаяРазница;
			РасходыПоОбъектуУчета.ВременнаяРазница = РасходыПоОбъектуУчета.ВременнаяРазница - НоваяСтрока.ВременнаяРазница;
			РасходыПоОбъектуУчета.СуммаНДД = РасходыПоОбъектуУчета.СуммаНДД - НоваяСтрока.СуммаНДД;

			ДанныеПоАналитике.МассивКоэффициентовСумма[Сч] = ДанныеПоАналитике.МассивКоэффициентовСумма[Сч] - НоваяСтрока.Сумма;
			ДанныеПоАналитике.МассивКоэффициентовСуммаБезНДС[Сч] = ДанныеПоАналитике.МассивКоэффициентовСуммаБезНДС[Сч] - НоваяСтрока.СуммаБезНДС;
			ДанныеПоАналитике.МассивКоэффициентовСуммаУпр[Сч] = ДанныеПоАналитике.МассивКоэффициентовСуммаУпр[Сч] - НоваяСтрока.СуммаУпр;
			ДанныеПоАналитике.МассивКоэффициентовСуммаРегл[Сч] = ДанныеПоАналитике.МассивКоэффициентовСуммаРегл[Сч] - НоваяСтрока.СуммаРегл;

			ДанныеПоАналитике.СуммаОстаток = ДанныеПоАналитике.СуммаОстаток - НоваяСтрока.Сумма;
			ДанныеПоАналитике.СуммаБезНДСОстаток = ДанныеПоАналитике.СуммаБезНДСОстаток - НоваяСтрока.СуммаБезНДС;
			ДанныеПоАналитике.СуммаУпрОстаток = ДанныеПоАналитике.СуммаУпрОстаток - НоваяСтрока.СуммаУпр;
			ДанныеПоАналитике.СуммаРеглОстаток = ДанныеПоАналитике.СуммаРеглОстаток - НоваяСтрока.СуммаРегл;
			 
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура РассчитатьРасходыПоОбъектам(РезультатРасчета, ОбъектыПоАналитикеКапитализации, РасходыПоАналитикеКапитализации)
	
	Для Каждого СтрокаРасходов Из РасходыПоАналитикеКапитализации Цикл
		
		Для Каждого СтрокаДокумента Из ОбъектыПоАналитикеКапитализации Цикл
			
			НоваяСтрока = РезультатРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходов);
			
			НоваяСтрока.Ссылка = СтрокаДокумента.Ссылка;
			НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
			
			УчестьОтражениеВУчетеПриРасчетеСтоимости(НоваяСтрока, СтрокаДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьРасходыПоОбъектам(РезультатРасчета, ОбъектыПоАналитикеКапитализации, РасходыПоАналитикеКапитализации)

	МассивКоэффициентовСуммаУУ = СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, "СтоимостьУУ", "ОтражатьВУпрУчете");
	МассивКоэффициентовСуммаБУ = СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, "СтоимостьБУ", "ОтражатьВБУ");
	МассивКоэффициентовСуммаНУ = СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, "СтоимостьБУ", "ОтражатьВНУ");
	МассивКоэффициентовСуммаПР = СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, "СтоимостьБУ", "УчестьПР");
	МассивКоэффициентовСуммаНДД = СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, "СтоимостьБУ", "ОтражатьВНУ");
	
	Для каждого СтрокаРасходов Из РасходыПоАналитикеКапитализации Цикл
		
		РаспределениеСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.Сумма,  МассивКоэффициентовСуммаУУ);
										
		РаспределениеСуммаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.СуммаБезНДС,  МассивКоэффициентовСуммаУУ);
										
		РаспределениеСуммаУпр = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.СуммаУпр,  МассивКоэффициентовСуммаУУ);
		
		РаспределениеСуммаРегл = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.СуммаРегл, МассивКоэффициентовСуммаБУ);
										
		РаспределениеСуммаНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.СуммаНУ, МассивКоэффициентовСуммаНУ);
										
		РаспределениеСуммаПР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.ПостояннаяРазница, МассивКоэффициентовСуммаПР);
										
		РаспределениеСуммаНДД = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										СтрокаРасходов.СуммаНДД, МассивКоэффициентовСуммаНДД);
										
		Для Сч = 0 По ОбъектыПоАналитикеКапитализации.Количество()-1 Цикл
			
			СтрокаДокумента = ОбъектыПоАналитикеКапитализации[Сч];
			
			НоваяСтрока = РезультатРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасходов);
			
			НоваяСтрока.Ссылка = СтрокаДокумента.Ссылка;
			НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
		
			Если СтрокаДокумента.ОтражатьВУпрУчете Тогда
				НоваяСтрока.Сумма       = ?(РаспределениеСумма       <> Неопределено, РаспределениеСумма[Сч],    0);
				НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСумма[Сч],    0);
				НоваяСтрока.СуммаУпр    = ?(РаспределениеСуммаУпр    <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
			Иначе
				НоваяСтрока.Сумма       = 0;
				НоваяСтрока.СуммаБезНДС = 0;
				НоваяСтрока.СуммаУпр    = 0;
			КонецЕсли;
			
			Если СтрокаДокумента.ОтражатьВБУ Тогда
				НоваяСтрока.СуммаРегл         = ?(РаспределениеСуммаРегл <> Неопределено, РаспределениеСуммаРегл[Сч], 0);
				НоваяСтрока.ПостояннаяРазница = ?(РаспределениеСуммаПР   <> Неопределено, РаспределениеСуммаПР[Сч],   0);
			Иначе
				НоваяСтрока.СуммаРегл         = 0;
				НоваяСтрока.ПостояннаяРазница = 0;
			КонецЕсли; 
			
			Если СтрокаДокумента.ОтражатьВНУ Тогда
				СуммаНУ = ?(РаспределениеСуммаНУ <> Неопределено, РаспределениеСуммаНУ[Сч], 0);
			Иначе
				СуммаНУ = 0;
			КонецЕсли;
		
			НоваяСтрока.ВременнаяРазница = НоваяСтрока.СуммаРегл - СуммаНУ - НоваяСтрока.ПостояннаяРазница;
			
			Если СтрокаДокумента.ОтражатьВНУ Тогда
				НоваяСтрока.СуммаНДД = ?(РаспределениеСуммаНДД <> Неопределено, РаспределениеСуммаНДД[Сч], 0);
			Иначе
				НоваяСтрока.СуммаНДД = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьВтРасчетРасходов(МенеджерВременныхТаблиц)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеРасходы.Ссылка                      КАК Ссылка,
	|	ТекущиеРасходы.Организация                 КАК Организация,
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница,
	|	ТекущиеРасходы.СуммаНДД                    КАК СуммаНДД,
	|	ТекущиеРасходы.ИдентификаторСтроки         КАК ИдентификаторСтроки,
	|	ТекущиеРасходы.ИдентификаторСтрокиБУ       КАК ИдентификаторСтрокиБУ,
	|	ТекущиеРасходы.ИдентификаторСтрокиНУ       КАК ИдентификаторСтрокиНУ
	|
	|ПОМЕСТИТЬ ВтРасчетРасходов
	|
	|ИЗ
	|	втТекущиеРасходы КАК ТекущиеРасходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьВтРасчетСтоимости(МенеджерВременныхТаблиц)
	
	ТекстЗапроса = РасчетСтоимостиВНАЛокализация.ТекстЗапросаВтРасчетСтоимости();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущиеРасходы.Ссылка                    КАК Ссылка,
		|	ТекущиеРасходы.Организация               КАК Организация,
		|	ТекущиеРасходы.ИдентификаторСтроки       КАК ИдентификаторСтроки,
		|	ТекущиеРасходы.ИдентификаторСтрокиБУ     КАК ИдентификаторСтрокиБУ,
		|	ТекущиеРасходы.ИдентификаторСтрокиНУ     КАК ИдентификаторСтрокиНУ,
		|	ТекущиеРасходы.ОбъектУчета               КАК ОбъектУчета,
		|	ТекущиеРасходы.СтатьяРасходов            КАК КорСтатьяРасходов,
		|	ТекущиеРасходы.АналитикаРасходов         КАК КорАналитикаРасходов,
		|	ТекущиеРасходы.Подразделение             КАК КорПодразделение,
		|	ТекущиеРасходы.НаправлениеДеятельности   КАК КорНаправлениеДеятельности,
		|
		|	ТекущиеРасходы.Сумма                     КАК Сумма,
		|	ТекущиеРасходы.СуммаУпр                  КАК Стоимость,
		|	ТекущиеРасходы.СуммаРегл                 КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК НеУчитываемаяСтоимостьНУ,
		|	0 КАК КорПостояннаяРазница,
		|	0 КАК КорСуммаНУ
		|
		|ПОМЕСТИТЬ ВтРасчетСтоимости
		|
		|ИЗ
		|	ВтТекущиеРасходы КАК ТекущиеРасходы
		|
		|ГДЕ
		|	ТекущиеРасходы.СуммаУпр <> 0
		|		ИЛИ ТекущиеРасходы.СуммаРегл <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
		
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьРаспределениеСтоимости(Стоимость, СуммаОстаток, МассивКоэффициентовСумма)
	
	Если Стоимость < СуммаОстаток Тогда
		РаспределениеСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
									Стоимость, 
									МассивКоэффициентовСумма);
	Иначе
		РаспределениеСумма = МассивКоэффициентовСумма;
	КонецЕсли;
	
	Возврат РаспределениеСумма;
	
КонецФункции

Процедура УчестьОтражениеВУчетеПриРасчетеСтоимости(ДанныеСтроки, СтрокаДокумента)

	Если НЕ СтрокаДокумента.ОтражатьВУпрУчете Тогда
		ДанныеСтроки.Сумма = 0;
		ДанныеСтроки.СуммаБезНДС = 0;
		ДанныеСтроки.СуммаУпр = 0;
	КонецЕсли;
	
	Если НЕ СтрокаДокумента.ОтражатьВРеглУчете Тогда
		ДанныеСтроки.СуммаРегл = 0;
	КонецЕсли;
	
	РасчетСтоимостиВНАЛокализация.УчестьОтражениеВУчетеПриРасчетеСтоимости(ДанныеСтроки, СтрокаДокумента);
	
КонецПроцедуры

Функция СоздатьМассивКоэффициентов(ОбъектыПоАналитикеКапитализации, ИмяКолонкиКоэффициент, ИмяКолонкиОтражениеВУчете)

	СуммаКоэффициентов = 0;
	МассивКоэффициентов = Новый Массив;
	
	Для Каждого СтрокаДокумента Из ОбъектыПоАналитикеКапитализации Цикл
		
		Если СтрокаДокумента[ИмяКолонкиОтражениеВУчете] Тогда
			МассивКоэффициентов.Добавить(СтрокаДокумента[ИмяКолонкиКоэффициент]);
			СуммаКоэффициентов = СуммаКоэффициентов + СтрокаДокумента[ИмяКолонкиКоэффициент];
		Иначе
			МассивКоэффициентов.Добавить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаКоэффициентов = 0 Тогда
		Для Сч = 0 По МассивКоэффициентов.ВГраница() Цикл
			СтрокаДокумента = ОбъектыПоАналитикеКапитализации[Сч];
			Если СтрокаДокумента[ИмяКолонкиОтражениеВУчете] Тогда
				МассивКоэффициентов[Сч] = 1;
			Иначе
				МассивКоэффициентов[Сч] = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКоэффициентов;
	
КонецФункции

Функция МаксимальноеКоличествоЗаданий()

	ЗначенияПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
  							Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
							
	МаксимальноеКоличествоЗаданий = ЗначенияПараметров.МаксимальноеКоличествоЗаданий; // Число
	
	Возврат МаксимальноеКоличествоЗаданий;

КонецФункции

Функция РазмерПорцииДанных()
	
	ЗначенияПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
  							Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
  							
	РазмерПорцииДанных = ЗначенияПараметров.РазмерПорцииДанных; // Число
	 		
	Возврат РазмерПорцииДанных;
	
КонецФункции

Процедура ОпределитьИзменениеПрочихРасходов(ДанныеТаблиц)
	
	Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ДвиженияПрочиеРасходыИзменение") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.НачалоМесяца КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.АналитикаРасходов КАК ОбъектУчета,
	|	Таблица.Регистратор КАК Документ
	|
	|ПОМЕСТИТЬ ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение
	|
	|ИЗ
	|	ДвиженияПрочиеРасходыИзменение КАК Таблица
	|
	|ГДЕ
	|	(Таблица.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			И Таблица.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|		ИЛИ Таблица.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|			И Таблица.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|		ИЛИ Таблица.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы
	|			И Таблица.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка))
	|	И Таблица.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|	И (Таблица.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ИЛИ Таблица.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|	И (Таблица.СуммаИзменение <> 0
	|		ИЛИ Таблица.СуммаБезНДСИзменение <> 0
	|		ИЛИ Таблица.СуммаРеглИзменение <> 0
	|		ИЛИ Таблица.ПостояннаяРазницаИзменение <> 0
	|		ИЛИ Таблица.ВременнаяРазницаИзменение <> 0)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеТаблиц.Вставить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение", Выборка.Количество > 0);
	
КонецПроцедуры

Функция ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца()
	
	ТипыОбъектов = Новый Массив;
	
	РасчетСтоимостиВНАЛокализация.ДополнитьТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца(ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции

#КонецОбласти

#КонецОбласти
