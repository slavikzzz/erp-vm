#Область ПрограммныйИнтерфейс

// Проверяет, что это не новый элемент справочника
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика:
// 		* Объект - СправочникОбъект -
// 	ИмяФормы - Строка - имя подчиненной формы
// 	ОповещениеПослеЗаписи - ОписаниеОповещения - Описание
// 	ТекстВопроса - Строка - текст вопроса
//
Процедура ПроверитьЧтоЭтоНеНовыйЭлемент(Форма, ИмяФормы, ОповещениеПослеЗаписи, ТекстВопроса = Неопределено) Экспорт
	
	// Проверим, что это не новый элемент справочника.
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Если ТекстВопроса = Неопределено Тогда
			ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
			|Переход к ""%ИмяФормы%"" возможен только после записи данных.
			|Данные будут записаны.';
			|en = 'Data is not saved yet.
			|You can go to ""%ИмяФормы%"" only after saving the data.
			|Data will be saved.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяФормы%", ИмяФормы);
		КонецЕсли;
		ПараметрыОповещения = Новый Структура("Оповещение, Форма", ОповещениеПослеЗаписи, Форма);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета", ЭтотОбъект, ПараметрыОповещения), ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПослеЗаписи);
	
КонецПроцедуры

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - проверяемый индивидуальный номер налогоплательщика.
//  Объект - СправочникОбъект.Организации - проверяемая организация.
//
Процедура ПроверитьИНН(ИНН, Объект) Экспорт
	//++ Локализация
	Перем ТекстСообщения;
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ИНН) 
		И НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, 
			ЭтоЮрЛицо, 
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормыЭлемента

// Обработчик события ПослеЗаписи формы элемента справочника Организации
//
// Параметры:
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписи(ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	
	//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Форма.Объект.Ссылка, Форма);
	//-- НЕ УТ
	
	Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
	Форма.ДанныеРегистрацийПФРИзменены = Ложь;
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписи формы элемента справочника Организации
//
// Параметры:
//  Отказ           - Булево - признак отказа.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи, Форма) Экспорт
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы элемента справочника Организации
// 
// Параметры:
// 	ВыбранноеЗначение - Произвольный - Результат выбора в подчиненной форме.
// 	ИсточникВыбора    - Произвольный - Форма-источник события.
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора, Форма) Экспорт
	//++ Локализация
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Организации.Форма.ФормаНастройкиДокументооборота" И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, ВыбранноеЗначение);
	КонецЕсли;
	
	//++ НЕ УТ
	ОрганизацииКлиентСерверЛокализация.УправлениеДокументооборотом(Форма);
	Форма.Модифицированность = Истина;
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "ЗаполнитьОписаниеКодовДО", Истина);
	//-- НЕ УТ	
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы элемента справочника Организации
//
// Параметры:
//  ИмяСобытия - Строка -
//  Параметр - Произвольный -
//  Источник - Произвольный -
//  Форма - ФормаКлиентскогоПриложения -
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	//++ Локализация
	Если ИмяСобытия = "ЗавершеноРедактированиеРегистраций"
		И Источник = Форма.Объект.Ссылка Тогда
		МассивОбработчиков = Новый Массив;
		Если Параметр.ОткатитьИзменения Тогда
			Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Ложь;
			МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВНалоговыхОрганах");
		Иначе
			Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
			МассивОбработчиков.Добавить("ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования");
		КонецЕсли;
		МассивОбработчиков.Добавить("ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина, Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане"
		И Параметр.Владелец = Форма.Объект.Ссылка Тогда
		МассивОбработчиков = Новый Массив;
		МассивОбработчиков.Добавить("ОбновитьКПППослеРедактированияРегистрацииВНалоговомОргане");
		МассивОбработчиков.Добавить("ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина, Параметр);
	КонецЕсли;
	Если ИмяСобытия = "РедактированиеИсторииОсновнойРегистрации" 
		И Параметр.ВедущийОбъект = Форма.Объект.Ссылка Тогда
		Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
		МассивОбработчиков = Новый Массив;
		МассивОбработчиков.Добавить("ОбновитьРегистрацииВНалоговомОрганеПослеРедактирования");
		МассивОбработчиков.Добавить("ЗаполнитьОписаниеРегистрацииВНалоговомОргане");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина, Параметр);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗакрытии формы элемента справочника Организации
//
// Параметры:
//  ЗавершениеРаботы - Булево - признак завершения работы.
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПриЗакрытии(ЗавершениеРаботы, Форма) Экспорт
	//++ Локализация
	МассивОбработчиков = Новый Массив;
	Если НЕ ЗавершениеРаботы И Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены Тогда
		МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВНалоговыхОрганах");
	КонецЕсли;
	
	Если НЕ ЗавершениеРаботы И Форма.ДанныеРегистрацийПФРИзменены Тогда
		МассивОбработчиков.Добавить("ВосстановитьДанныеРегистрацийВПФР");
	КонецЕсли;
	Если МассивОбработчиков.Количество() > 0 Тогда
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, МассивОбработчиков, Истина);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЗакрытии формы элемента справочника Организации
//
// Параметры:
//  Отказ - Булево - признак отказа.
//  ЗавершениеРаботы - Булево - признак завершения работы.
//  ТекстПредупреждения - Строка - текст предупреждения.
//  СтандартнаяОбработка - Булево - признак стандартной обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация	
	Если ЗавершениеРаботы И (Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены ИЛИ Форма.ДанныеРегистрацийПФРИзменены) Тогда
		Отказ = Истина;
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура Нажатие_Организации(Элемент, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если Элемент.Имя = "ВидОбменаСКонтролирующимиОрганамиПредставление" Тогда
		ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменФСС" Тогда
		ОбменФССНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменСЭДОФСС" Тогда
		ОбменСЭДОФССНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменРАР" Тогда
		ОбменРАРНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменФТС" Тогда
		ОбменФТСНажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ОбменРПН" Тогда
		ОбменРПННажатие(Элемент, СтандартнаяОбработка, Форма);
	КонецЕсли;
	//++ НЕ УТ
	Если Элемент.Имя = "ДекорацияСтавкаНалогаНаИмуществоОсновныеСредства" Тогда
		ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатие(Элемент, Форма);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылкиФормы_Организации(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьТаблицуПримененияЕНВД" Тогда
		ЗакрытиеФормыПрименениеЕНВД =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеЕНВД", ЭтотОбъект, Новый Структура("Форма", Форма));
		ОткрытьФорму("Справочник.Организации.Форма.ФормаПрименениеЕНВД",
			Новый Структура("Организация", Форма.ГоловнаяОрганизация),
			Форма,,,,
			ЗакрытиеФормыПрименениеЕНВД,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиСистемыНалогообложения" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки системы налогообложения';
				|en = 'Taxation system settings'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиСистемыНалогообложенияОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
			
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьТаблицуПримененияПСН" Тогда
		ЗакрытиеФормыПрименениеПСН =  Новый ОписаниеОповещения("ЗакрытиеФормыПрименениеПСН", ЭтотОбъект, Новый Структура("Форма", Форма));
		ЗначениеОтбора = Новый Структура("Владелец", Форма.Объект.Ссылка);
		ОткрытьФорму("Справочник.Патенты.ФормаСписка",
			Новый Структура("Отбор", ЗначениеОтбора),
			Форма,,,,
			ЗакрытиеФормыПрименениеПСН,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиУчетаУСН" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки учета УСН';
				|en = 'STS accounting settings'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиУчетаУСНОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиУчетаНДСПриУСН" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки учета НДС при УСН';
				|en = 'VAT accounting settings under STS'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиУчетаНДСПриУСНОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	
	//++ НЕ УТ
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьУчетнаяПолитикаБухУчета" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Учетная политика бухгалтерского учета';
				|en = 'Accounting policy'"),
			Новый ОписаниеОповещения("ОткрытьУчетнаяПолитикаБухУчетаОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьНастройкиУчетаНалогаНаПрибыль" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки учета налога на прибыль';
				|en = 'Income tax accounting settings'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиУчетаНалогаНаПрибыльОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьРезервыОтпусков" Тогда
		ОрганизацииКлиентЛокализация.ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Настройки расчета резервов отпусков';
				|en = 'Settings of leave reserve calculation'"),
			Новый ОписаниеОповещения("ОткрытьНастройкиРасчетаРезервовОтпусков", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСтавкиНалогаНаИмущество" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Ставки налога на имущество';
				|en = 'Property tax rates'"),
			Новый ОписаниеОповещения("ОткрытьСтавкиНалогаНаИмуществоОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
	КонецЕсли;

	//-- НЕ УТ
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапуститьОбработкуКопированияНастроек" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Помощник копирования настроек учетной политики';
				|en = 'Accounting policy settings copy assistant'"),
			Новый ОписаниеОповещения("ОткрытьПомощникКопированияНастроекОбъектЗаписан",
			ЭтотОбъект,
			Новый Структура("Форма, КопированиеИзДругойОрганизации", Форма, Ложь)));
			
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапуститьОбработкуКопированияНастроекИзДругойОрганизации" Тогда
		ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Помощник копирования настроек учетной политики';
				|en = 'Accounting policy settings copy assistant'"),
			Новый ОписаниеОповещения("ОткрытьПомощникКопированияНастроекОбъектЗаписан",
			ЭтотОбъект,
			Новый Структура("Форма, КопированиеИзДругойОрганизации", Форма, Истина)));
		
	КонецЕсли;

	//-- Локализация
КонецПроцедуры

Процедура СкопироватьНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура();
	ИмяСобытия = "ЗаписьНастроекНалоговУчетныхПолитик";
	Оповестить(ИмяСобытия, ПараметрыОповещения);
	
КонецПроцедуры

Процедура ПриИзмененииРеквизита(Элемент, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "ИНН"
		ИЛИ Элемент.Имя = "ИННИП" Тогда
		ИННПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "КодОКВЭД"
		ИЛИ Элемент.Имя = "КодПоОКВЭДОбособленногоПодразделения"
		ИЛИ Элемент.Имя = "КодПоОКВЭДИндивидуальногоПредпринимателя" Тогда
		КодОКВЭДПриИзменении(Элемент, Форма);
	КонецЕсли;

	Если Элемент.Имя = "КодОКВЭД2"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ОбособленногоПодразделения" Тогда
		КодОКВЭД2ПриИзменении(Элемент, Форма);
	КонецЕсли;
	
	Если Элемент.Имя = "КрупнейшийНалогоплательщик" Тогда
		КрупнейшийНалогоплательщикПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ГоловнаяОрганизация" Тогда
		ГоловнаяОрганизацияПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "ИндивидуальныйПредприниматель" Тогда
		ИндивидуальныйПредпринимательПриИзменении(Элемент, Форма);
	КонецЕсли;
	Если Элемент.Имя = "НаименованиеСокращенное" Тогда
		НаименованиеСокращенноеПриИзменении(Элемент, Форма);
	КонецЕсли;

	//-- Локализация
КонецПроцедуры

Процедура ОкончаниеВводаТекста_Организации(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "КПП"
		ИЛИ Элемент.Имя = "КППОбособленногоПодразделения" Тогда
		
		ПриОкончанииВводаКПП(Текст, Форма);
	КонецЕсли;
	Если Элемент.Имя = "КодПоОКПО"
		ИЛИ Элемент.Имя = "КодПоОКПОИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКПООбособленногоПодразделения" Тогда
		
		ПриОкончанииВводаКодПоОКПО(Текст, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура НачалоВыбора_Организации(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма) Экспорт
	//++ Локализация
	Если Элемент.Имя = "КодОКВЭД"
		ИЛИ Элемент.Имя = "КодПоОКВЭДОбособленногоПодразделения"
		ИЛИ Элемент.Имя = "КодПоОКВЭДИндивидуальногоПредпринимателя" Тогда
		КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма);
	КонецЕсли;

	Если Элемент.Имя = "КодОКВЭД2"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ИндивидуальногоПредпринимателя"
		ИЛИ Элемент.Имя = "КодПоОКВЭД2ОбособленногоПодразделения" Тогда
		КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЭлемента

Процедура ВыполнитьКомандуЛокализации(Команда, Форма) Экспорт
	//++ Локализация
	Если Команда.Имя = "ЗаявлениеНаПодключениеОткрытьМастер" Тогда
		ЗаявлениеНаПодключениеОткрытьМастер(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыСФР" Тогда
		ОткрытьПараметрыСФР(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыПФР" Тогда
		ОткрытьПараметрыПФР(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыФСС" Тогда
		ОткрытьПараметрыФСС(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыТФОМС" Тогда
		ОткрытьПараметрыТФОМС(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыКлассификаторов" Тогда
		ОткрытьПараметрыКлассификаторов(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыРасчетаЗарплаты" Тогда
		ОткрытьПараметрыРасчетаЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьПараметрыМестаРегистрации" Тогда
		ОткрытьПараметрыМестаРегистрации(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьКадровыйУчетИРасчетЗарплаты" Тогда
		ОткрытьКадровыйУчетИРасчетЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьБухучетИВыплатуЗарплаты" Тогда
		ОткрытьБухучетИВыплатуЗарплаты(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьВоинскийУчет" Тогда
		ОткрытьВоинскийУчет(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ОткрытьРегистрациюВНалоговыхОрганах" Тогда
		ОткрытьРегистрациюВНалоговыхОрганах(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "УстановитьПорядокУплатыНалоговНаМестах" Тогда
		УстановитьПорядокУплатыНалоговНаМестах(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ЗаполнитьПоИНН" Тогда
		ЗаполнитьПоИНН(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ЗаявлениеНаПодключениеОткрытьСписок" Тогда
		ЗаявлениеНаПодключениеОткрытьСписок(Команда, Форма);
	КонецЕсли;
	Если Команда.Имя = "ИсторияКПП" Тогда
		ИсторияКПП(Команда, Форма);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыРедактированияИсторииНаименований

Процедура ИсторияНаименованийНаименованиеСокращенноеПриИзменении(ТекущиеДанные, Форма) Экспорт
	//++ Локализация
	
	Если ПустаяСтрока(ТекущиеДанные.НаименованиеПолное) Или СокрЛП(Форма.НаименованиеСокращенноеДоИзменения) = СокрЛП(ТекущиеДанные.НаименованиеПолное) Тогда
		СтруктураНаименования = ОрганизацииКлиентЛокализация.РазложитьСтрокуНаименования(Форма.ЮридическоеФизическоеЛицо, ТекущиеДанные.НаименованиеСокращенное);
		ТекущиеДанные.НаименованиеПолное = СформироватьНаименование(СтруктураНаименования);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные

#Область ОбменыСГосОрганами

Процедура ВидОбменаСКонтролирующимиОрганамиПредставлениеНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
			НСтр("ru = 'Документооборот с ФНС, ПФР и Росстат';
				|en = 'Data interchange with FTS, PF, and Russian Federal State Statistics Service'"),
			Новый ОписаниеОповещения("ВидОбменаСКонтролирующимиОрганамиОбъектЗаписан", 
				ЭтотОбъект,
				Новый Структура("Форма", Форма)));
КонецПроцедуры

Процедура ВидОбменаСКонтролирующимиОрганамиОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	ЗначенияЗаполнения	= Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ВидОбменаСКонтролирующимиОрганами", Объект.ВидОбменаСКонтролирующимиОрганами);
	ЗначенияЗаполнения.Вставить("УчетнаяЗаписьОбмена", Объект.УчетнаяЗаписьОбмена);
	ЗначенияЗаполнения.Вставить("КодНалоговогоОрганаПолучателя", Объект.КодНалоговогоОрганаПолучателя);
	ЗначенияЗаполнения.Вставить("КодОрганаФСГС", Объект.КодОрганаФСГС);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаНастройкиДокументооборота", 
					Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения), 
					Форма);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

Процедура ОбменФССНажатие(Элемент, СтандартнаяОбработка, Форма)
		
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;

	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Документооборот с ФСС';
			|en = 'Data interchange with SSF'"), 
		Новый ОписаниеОповещения("ОбменФССНажатиеОбъектЗаписан", ЭтотОбъект,Новый Структура("Форма", Форма)));
		
КонецПроцедуры

Процедура ОбменФССНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Форма.Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСС.ФормаЗаписи", 
		СтруктураПараметров,
		Форма,,,, 
		Новый ОписаниеОповещения("ОбменФССНажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

Процедура ОбменФССНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ПроверитьОбменФСС", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОбменСЭДОФССНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Социальный документооборот с ФСС';
			|en = 'Social data interchange with SSF'"),
		Новый ОписаниеОповещения("ОбменСЭДОФССНажатиеОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОбменСЭДОФССНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Страхователь", Форма.Объект.Ссылка));
	КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.НастройкиПолученияУведомленийОбЭЛН"), ПараметрыЗаписи);
	СтруктураПараметров = Новый Структура("Организация, Ключ", Форма.Объект.Ссылка, КлючЗаписи);
	
	ОткрытьФорму("РегистрСведений.НастройкиПолученияУведомленийОбЭЛН.ФормаЗаписи",
		СтруктураПараметров, 
		Форма,,,,
		Новый ОписаниеОповещения("ОбменСЭДОФССНажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбменСЭДОФССНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ПроверитьОбменСЭДОФСС", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОбменРАРНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Документооборот с Росалкогольрегулированием';
			|en = 'Data interchange with Federal Service for Alcohol Market Regulation'"),
		Новый ОписаниеОповещения("ОбменРАРНажатиеОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));

КонецПроцедуры

Процедура ОбменРАРНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Форма.Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФСРАР.ФормаЗаписи",
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОбменРАРНажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбменРАРНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ПроверитьОбменРАР", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОбменРПННажатие(Элемент, СтандартнаяОбработка, Форма)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Документооборот с РПН';
			|en = 'Data interchange with RPN'"),
		Новый ОписаниеОповещения("ОбменРПННажатиеОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОбменРПННажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Форма.Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаРПН.ФормаЗаписи",
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОбменРПННажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбменРПННажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ПроверитьОбменРПН", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОбменФТСНажатие(Элемент, СтандартнаяОбработка, Форма)
	
	//++ НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Документооборот с ФТС';
			|en = 'Data interchange with FCS'"),
		Новый ОписаниеОповещения("ОбменФТСНажатиеОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОбменФТСНажатиеОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка", Форма.Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаФТС.ФормаЗаписи",
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОбменФТСНажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОбменФТСНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ПроверитьОбменФТС", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Классификаторы

Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора(Форма, "ОКВЭД");
	
КонецПроцедуры

Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Форма)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора(Форма, "ОКВЭД2");
	
КонецПроцедуры

Процедура КодОКВЭДПриИзменении(Элемент, Форма)
	
	КодКлассификатораПриИзменении(Форма, "ОКВЭД");
	
КонецПроцедуры

Процедура КодОКВЭД2ПриИзменении(Элемент, Форма)
	
	КодКлассификатораПриИзменении(Форма, "ОКВЭД2");
	
КонецПроцедуры

#КонецОбласти

#Область НалогиУчетныеПолитики

Процедура ОткрытьНастройкиСистемыНалогообложенияОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьНастройкиУчетаУСНОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиУчетаУСН.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьНастройкиУчетаНДСПриУСНОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиУчетаНДСПриУСН.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
//++ НЕ УТ

Процедура ОткрытьУчетнаяПолитикаБухУчетаОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаБухУчета.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьНастройкиУчетаНалогаНаПрибыльОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.НастройкиУчетаНалогаНаПрибыль.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьСтавкиНалогаНаИмуществоОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОткрытьФорму("РегистрСведений.СтавкиНалогаНаИмущество.ФормаЗаписи",
		Новый Структура("Организация", Форма.Объект.Ссылка),
		Форма,,,,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатие(Элемент, Форма)
	СтруктураОтбор = Новый Структура;
	СтруктураОтбор.Вставить("Организация", Форма.Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбор);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаСпискаОбъектовСОсобымПорядкомНалогообложения", 
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатиеЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ДекорацияСтавкаНалогаНаИмуществоОсновныеСредстваНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ОбновитьДанныеПоОсновнымСредствам", Истина);
КонецПроцедуры

//-- НЕ УТ

Процедура ОткрытьПомощникКопированияНастроекОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ЗакрытиеФормыПомощникКопированияНастроек =  Новый ОписаниеОповещения("СкопироватьНастройкиЗавершение",
													ЭтотОбъект,
													Новый Структура("Форма", Форма));
	ОчиститьСообщения();
	ОткрытьФорму("Обработка.ПомощникКопированияНастроекУчетныхПолитик.Форма.Форма",
			Новый Структура("Организация, КопированиеИзДругойОрганизации", Форма.Объект.Ссылка, ДополнительныеПараметры.КопированиеИзДругойОрганизации),
			Форма,,,,
			ЗакрытиеФормыПомощникКопированияНастроек,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры
#КонецОбласти

Процедура ИННПриИзменении(Элемент, Форма)
	
	Объект = Форма.Объект;
	Если СтрДлина(Объект.ИНН) >= 4 
		И ПустаяСтрока(Объект.КПП) Тогда
		
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		
	КонецЕсли;
	
	ПартнерыИКонтрагентыЛокализацияКлиентСервер.УстановитьДоступностьКнопкиЗаполнитьПоИНН(Форма,
		Форма.Объект.ЮрФизЛицо,
		Форма.Объект.ИНН,
		Форма.Объект.ОбособленноеПодразделение,
		Форма.НастройкиПодключенияКСервисуИППЗаданы,
		Ложь);
	
КонецПроцедуры

Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент, Форма)
	
	Форма.Элементы.КодНалоговогоОрганаПолучателя.Доступность = Форма.Объект.КрупнейшийНалогоплательщик;
	
	Если НЕ Форма.Объект.КрупнейшийНалогоплательщик Тогда
		Форма.Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент, Форма)
	ПараметрыОбработки = Новый Структура();
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.ИндивидуальныйПредприниматель) Тогда
		Форма.Объект.ИНН = "";
		ПараметрыОбработки.Вставить("ИмяПроцедуры", "УправлениеФормойНаСервере")
	Иначе
		ОрганизацииВызовСервераЛокализация.ИзменитьИНН(Форма.Объект.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	ФИОФизическогоЛица = ОрганизацииВызовСервераЛокализация.ПолучитьФИОФизическогоЛица(Форма.Объект.ИндивидуальныйПредприниматель);
	
	Форма.ФИОИндивидуальногоПредпринимателя	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3",
		ФИОФизическогоЛица.Фамилия, ФИОФизическогоЛица.Имя, ФИОФизическогоЛица.Отчество);
		
	Форма.Объект.НаименованиеСокращенное	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ИП %1 %2 %3';
																											|en = 'IE %1 %2 %3'"),
		ФИОФизическогоЛица.Фамилия,
		?(ПустаяСтрока(ФИОФизическогоЛица.Имя), "", Лев(ФИОФизическогоЛица.Имя, 1) + "."),
		?(ПустаяСтрока(ФИОФизическогоЛица.Отчество), "", Лев(ФИОФизическогоЛица.Отчество, 1) + "."));
		
	Форма.Объект.НаименованиеПолное	= "";
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(Форма, "НаименованиеСокращенное", Истина, ПараметрыОбработки);
КонецПроцедуры

Процедура ГоловнаяОрганизацияПриИзменении(Элемент, Форма)
	Форма.Объект.ИНН = ОрганизацииВызовСервераЛокализация.ИзменитьИНН(Форма.Объект.ГоловнаяОрганизация);
	ПараметрыОбработки = Новый Структура("ИмяПроцедуры", "УправлениеФормойНаСервере");
	ОбщегоНазначенияУТКлиент.ПродолжитьИзменениеРеквизита(Форма,Элемент.Имя, Истина, ПараметрыОбработки);
КонецПроцедуры

Процедура ЗакрытиеФормыПрименениеЕНВД(Результат, ДополнительныеПараметры) Экспорт
	Форма =  ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "НастроитьТаблицуПримененияЕНВД", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗакрытиеФормыПрименениеПСН(Результат, ДополнительныеПараметры) Экспорт
	Форма =  ДополнительныеПараметры.Форма;
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "НастроитьТаблицуПримененияПСН", Истина);
КонецПроцедуры

Процедура НаименованиеСокращенноеПриИзменении(Элемент, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураНаименования = РазложитьСтрокуНаименования(Объект.ЮридическоеФизическоеЛицо, Объект.НаименованиеСокращенное);
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное	= СформироватьНаименованиеПолное(Форма, СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименованиеПолное(Форма, РазложитьСтрокуНаименования(Объект.ЮридическоеФизическоеЛицо, Форма.НаименованиеСокращенное));
		
		Если СокрЛП(Объект.НаименованиеПолное) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.НаименованиеПолное = СформироватьНаименованиеПолное(Форма, СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
	Иначе
		
		АвтоНаименованиеПрежнее	= СформироватьНаименование(РазложитьСтрокуНаименования(Объект.ЮридическоеФизическоеЛицо, Форма.НаименованиеСокращенное));
		
		Если СокрЛП(Объект.Наименование) = СокрЛП(АвтоНаименованиеПрежнее) Тогда
			Объект.Наименование	= СформироватьНаименование(СтруктураНаименования);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.НаименованиеСокращенное = Объект.НаименованиеСокращенное;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Контрагенты_Служебные

Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда, Форма)
	//++ НЕ УТ
	Если Форма.Объект.Ссылка.Пустая() ИЛИ Форма.Модифицированность Тогда
		Если НЕ Форма.Записать() Тогда
				Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Форма.Объект.Ссылка, Форма);
	
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ЗаявлениеНаПодключениеОткрытьСписок(Команда, Форма)
	
	//++ НЕ УТ
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуСпискаЗаявленийНаПодключение();
	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ИсторияКПП(Команда, Форма)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИсторияРегистрацииВНалоговомОргане", Форма.РегистрацииВНалоговомОрганеНаборЗаписей);
	ПараметрыФормы.Вставить("ВедущийОбъект", Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецРегистрацииВНалоговомОргане", Форма.Объект.ГоловнаяОрганизация);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	
	ОткрытьФорму("РегистрСведений.РегистрацииВНалоговомОргане.Форма.РедактированиеИсторииОсновнойРегистрации", ПараметрыФормы, ЭтотОбъект);
	
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыСФР(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Социальный фонд';
			|en = 'Social Insurance Fund'"),
		Новый ОписаниеОповещения("ОткрытьПараметрыСФРОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыСФРОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(Форма.ПФРСохраненныеЗначения) Тогда
		Форма.ПФРСохраненныеЗначения = ОрганизацииВызовСервераЛокализация.РегистрацииПФРВХранилище(Объект.Ссылка, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("РегистрационныйНомерСФР", Объект.РегистрационныйНомерСФР);
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровСФР",
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьПараметрыСФРЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыСФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Форма = ДополнительныеПараметры.Форма;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Форма.Модифицированность = Истина;
		Форма.ДанныеРегистрацийПФРИзменены = Истина;
		ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеСФР", Истина);
	КонецЕсли;

	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыПФР(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Пенсионный фонд';
			|en = 'Pension fund'"),
		Новый ОписаниеОповещения("ОткрытьПараметрыПФРОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыПФРОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	//++ НЕ УТ
	Если Не ЗначениеЗаполнено(Форма.ПФРСохраненныеЗначения) Тогда
		Форма.ПФРСохраненныеЗначения = ОрганизацииВызовСервераЛокализация.РегистрацииПФРВХранилище(Объект.Ссылка, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВидОрганизации", Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("КодОрганаПФР", Объект.КодОрганаПФР);
	СтруктураПараметров.Вставить("НаименованиеТерриториальногоОрганаПФР", Объект.НаименованиеТерриториальногоОрганаПФР);
	СтруктураПараметров.Вставить("РегистрационныйНомерПФР", Объект.РегистрационныйНомерПФР);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерПФР", Объект.ИПРегистрационныйНомерПФР);
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровПФР",
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьПараметрыПФРЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыПФРЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//++ НЕ УТ
	Форма = ДополнительныеПараметры.Форма;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Форма.Модифицированность = Истина;
		Форма.ДанныеРегистрацийПФРИзменены = Истина;
		ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеПФР", Истина);
	КонецЕсли;

	//-- НЕ УТ
	
	Возврат; // в УТ пустой
	
КонецПроцедуры

Процедура ОткрытьПараметрыФСС(Команда, Форма)
		
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Фонд социального страхования';
			|en = 'Social Security Fund'"),
		Новый ОписаниеОповещения("ОткрытьПараметрыФССОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
		
КонецПроцедуры

Процедура ОткрытьПараметрыФССОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("ВидОрганизации", Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("НаименованиеТерриториальногоОрганаФСС", Объект.НаименованиеТерриториальногоОрганаФСС);
	СтруктураПараметров.Вставить("РегистрационныйНомерФСС", Объект.РегистрационныйНомерФСС);
	СтруктураПараметров.Вставить("КодПодчиненностиФСС", Объект.КодПодчиненностиФСС);
	СтруктураПараметров.Вставить("ИПКодПодчиненностиФСС", Объект.ИПКодПодчиненностиФСС);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерФСС", Объект.ИПРегистрационныйНомерФСС);
	СтруктураПараметров.Вставить("ДополнительныйКодФСС", Объект.ДополнительныйКодФСС);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровФСС", 
		СтруктураПараметров, 
		Форма,,,, 
		Новый ОписаниеОповещения("ОткрытьПараметрыФССЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьПараметрыФССЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Результат;

	Если ЗначениеЗаполнено(СтруктураПараметров)
			И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураПараметров);
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеФСС", Истина);
	КонецЕсли;

	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыТФОМС(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Фонд обязательного медицинского состояния';
			|en = 'Compulsory medical condition fund'"), 
		Новый ОписаниеОповещения("ОткрытьПараметрыТФОМСОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
		
КонецПроцедуры

Процедура ОткрытьПараметрыТФОМСОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
		
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("РегистрационныйНомерТФОМС", Объект.РегистрационныйНомерТФОМС);
	СтруктураПараметров.Вставить("ИПРегистрационныйНомерТФОМС", Объект.ИПРегистрационныйНомерТФОМС);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметровТФОМС", 
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьПараметрыТФОМСЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)), 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьПараметрыТФОМСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Результат;

	Если ЗначениеЗаполнено(СтруктураПараметров)
			И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда

		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураПараметров);
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеТФОМС", Истина);
	КонецЕсли;

	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыКлассификаторов(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Классификаторы';
			|en = 'Classifiers'"),
		Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОткрытьПараметрыКлассификаторовОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("КодОКОНХ", Объект.КодОКОНХ);
	СтруктураПараметров.Вставить("КодОКОПФ", Объект.КодОКОПФ);
	СтруктураПараметров.Вставить("НаименованиеОКОПФ", Объект.НаименованиеОКОПФ);
	СтруктураПараметров.Вставить("КодОКФС", Объект.КодОКФС);
	СтруктураПараметров.Вставить("НаименованиеОКФС", Объект.НаименованиеОКФС);
	СтруктураПараметров.Вставить("КодОКВЭД", Объект.КодОКВЭД);	
	СтруктураПараметров.Вставить("НаименованиеОКВЭД", Объект.НаименованиеОКВЭД);
	СтруктураПараметров.Вставить("КодОКВЭД2", Объект.КодОКВЭД2);	
	СтруктураПараметров.Вставить("НаименованиеОКВЭД2", Объект.НаименованиеОКВЭД2);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыКлассификаторов", 
		СтруктураПараметров, 
		Форма,,,, 
		Новый ОписаниеОповещения("ОткрытьПараметрыКлассификаторовЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьПараметрыКлассификаторовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Результат;

	Если ЗначениеЗаполнено(СтруктураПараметров)
			И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураПараметров);
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеКлассификаторов", Истина);
	КонецЕсли;

	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыРасчетаЗарплаты(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Территориальные условия и график работы';
			|en = 'Site conditions and work schedule'"),
		Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан" ,ЭтотОбъект, Новый Структура("Форма", Форма)));
			
КонецПроцедуры

Процедура ОткрытьПараметрыРасчетаЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОрганизацияСсылка",            Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидОрганизации",               Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("ПрименятьРайонныйКоэффициент", Объект.ПрименятьРайонныйКоэффициент);
	СтруктураПараметров.Вставить("ПрименятьСевернуюНадбавку",    Объект.ПрименятьСевернуюНадбавку);
	СтруктураПараметров.Вставить("РайонныйКоэффициент",          Объект.РайонныйКоэффициент);
	СтруктураПараметров.Вставить("РайонныйКоэффициентРФ",        Объект.РайонныйКоэффициентРФ);
	СтруктураПараметров.Вставить("ГрафикРаботыСотрудников",      Объект.ГрафикРаботыСотрудников);
	СтруктураПараметров.Вставить("Военкомат",                    Объект.Военкомат);
	СтруктураПараметров.Вставить("ПроцентСевернойНадбавки",      Объект.ПроцентСевернойНадбавки);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыФормированияЗарплаты", 
		СтруктураПараметров,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьПараметрыРасчетаЗарплатыЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьПараметрыРасчетаЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Результат;

	Если ЗначениеЗаполнено(СтруктураПараметров)
			И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураПараметров);
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеПараметровРасчетаЗарплаты", Истина);
	КонецЕсли;

	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ОткрытьПараметрыМестаРегистрации(Команда, Форма)
	
	//++ НЕ УТ
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Иностранная организация';
			|en = 'Foreign company'"), 
		Новый ОписаниеОповещения("ОткрытьПараметрыИностраннойОрганизацииОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
			
КонецПроцедуры

Процедура ОткрытьПараметрыИностраннойОрганизацииОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидОрганизации", Форма.ВидОрганизации);
	СтруктураПараметров.Вставить("ОтделениеИностраннойОрганизации", Объект.ОтделениеИностраннойОрганизации);
	СтруктураПараметров.Вставить("ЗарегистрированВОЭЗ", Объект.ЗарегистрированВОЭЗ);
	СтруктураПараметров.Вставить("НаименованиеИнострОрганизации", Объект.НаименованиеИнострОрганизации);
	СтруктураПараметров.Вставить("СтранаРегистрацииИностраннойОрганизации", Объект.СтранаРегистрацииИностраннойОрганизации);
	СтруктураПараметров.Вставить("КодВСтранеРегистрации", Объект.КодВСтранеРегистрации);
	СтруктураПараметров.Вставить("НаименованиеИдентификатораВСтранеРегистрации", Объект.НаименованиеИдентификатораВСтранеРегистрации);
	СтруктураПараметров.Вставить("СтранаПостоянногоМестонахождения", Объект.СтранаПостоянногоМестонахождения);
	
	ОткрытьФорму("Справочник.Организации.Форма.ФормаПараметрыИностраннойОрганизации", 
		СтруктураПараметров,
		Форма, , , ,
		Новый ОписаниеОповещения("ОткрытьПараметрыИностраннойОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьПараметрыИностраннойОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	СтруктураПараметров = Результат;
	
	Если ЗначениеЗаполнено(СтруктураПараметров)
			И СтруктураПараметров <> КодВозвратаДиалога.Отмена Тогда
		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураПараметров);
		Форма.Модифицированность = Истина;
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеИностраннойОрганизации", Истина);
	КонецЕсли;
	
	//-- НЕ УТ
	Возврат;

КонецПроцедуры

Процедура ОткрытьКадровыйУчетИРасчетЗарплаты(Команда, Форма)
	
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Параметры кадрового учета и расчета зарплаты';
			|en = 'Parameters of HR recordkeeping and payroll'"),
		Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
			
КонецПроцедуры

Процедура ОткрытьКадровыйУчетИРасчетЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",  НСтр("ru = 'Параметры кадрового учета и расчет зарплаты';
													|en = 'HR recordkeeping parameters and payroll'"));
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияУчетнаяПолитика",
		ПараметрыОткрытия,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьКадровыйУчетИРасчетЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеКадровогоУчетаИРасчетаЗарплаты", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОткрытьБухучетИВыплатуЗарплаты(Команда, Форма)
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Бухучет и выплата зарплаты';
			|en = 'Accounting and salary payment'"),
		Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОткрытьБухучетИВыплатуЗарплатыОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			Форма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияБухучетИВыплатаЗарплаты",
		ПараметрыОткрытия,
		Форма,,,, 
		Новый ОписаниеОповещения("ОткрытьБухучетИВыплатуЗарплатыЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьБухучетИВыплатуЗарплатыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеБухучетаИВыплатыЗарплат", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОткрытьВоинскийУчет(Команда, Форма)
	//++ НЕ УТ
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Воинский учет';
			|en = 'Military registration'"), 
		Новый ОписаниеОповещения("ОткрытьВоинскийУчетОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
		
КонецПроцедуры

Процедура ОткрытьВоинскийУчетОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",			Форма.Заголовок);
	ПараметрыОткрытия.Вставить("ОрганизацияСсылка",	Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ОрганизацияВоинскийУчет",
		ПараметрыОткрытия,
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьВоинскийУчетЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ОткрытьВоинскийУчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьОписаниеВоинскогоУчета", Истина);
	//-- НЕ УТ
	Возврат;
КонецПроцедуры

Процедура ОткрытьРегистрациюВНалоговыхОрганах(Команда, Форма)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Налоговые органы';
			|en = 'Tax authorities'"),
		Новый ОписаниеОповещения("ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан", ЭтотОбъект, Новый Структура("Форма", Форма)));
			
КонецПроцедуры

Процедура ОткрытьРегистрациюВНалоговыхОрганахОбъектЗаписан(Результат, ДополнительныеПараметры) Экспорт 
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Форма.РегистрацииСохраненныеЗначения) Тогда
		Форма.РегистрацииСохраненныеЗначения = ОрганизацииВызовСервераЛокализация.РегистрацииВНалоговыхОрганахВХранилище(Форма.Объект.Ссылка, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Ссылка);
	СтруктураПараметров.Вставить("ОсновнаяРегистрация", Форма.РегистрацияВНалоговомОргане);
	СтруктураПараметров.Вставить("ИсторияРегистрацииВНалоговомОргане", Форма.РегистрацииВНалоговомОрганеНаборЗаписей);
	СтруктураПараметров.Вставить("ОткрытиеИзОрганизации", Истина);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаНастройкиРегистраций", СтруктураПараметров, Форма);

КонецПроцедуры

//++ НЕ УТ

Процедура ОткрытьНастройкиРасчетаРезервовОтпусков(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
		
	ОткрытьФорму("ОбщаяФорма.ОрганизацияНастройкиРасчетаРезервовОтпусков",
		Новый Структура("ОрганизацияСсылка", Форма.Объект.Ссылка),
		Форма,,,,
		Новый ОписаниеОповещения("ОткрытьНастройкиРасчетаРезервовОтпусковЗавершение", ЭтотОбъект, Новый Структура("Форма", Форма)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьНастройкиРасчетаРезервовОтпусковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(ДополнительныеПараметры.Форма, "ЗаполнитьНастройкиРасчетаРезервовОтпусков", Истина);
КонецПроцедуры
//-- НЕ УТ

Процедура УстановитьПорядокУплатыНалоговНаМестах(Команда, Форма)
	
	ПроверитьЧтоЭтоНеНовыйЭлемент(Форма,
		НСтр("ru = 'Порядку уплаты авансов по налогам';
			|en = 'Tax advance payments'"),
		Новый ОписаниеОповещения("ОткрытьПорядокУплатыАвансовПоНалогам", ЭтотОбъект, Новый Структура("Форма", Форма)));
	
КонецПроцедуры

Процедура ОткрытьПорядокУплатыАвансовПоНалогам(Результат, ДополнительныеПараметры) Экспорт 
	
	//++ НЕ УТ
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", Новый Структура("Организация", ДополнительныеПараметры.Форма.Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ПорядокУплатыНалоговНаМестах.Форма.НастройкаВСписке",
		СтруктураПараметров,
		ДополнительныеПараметры.Форма,,,,
		Неопределено,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//-- НЕ УТ
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПоИНН(Команда, Форма)

	ЗаполнитьПоИННЗавершение(Форма);  
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

Процедура ВыбратьКодИзКлассификатора(Форма, ИмяКлассификатора, Комментарий = "", Знач ИмяРеквизитаКод = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   Дата(2000, 1, 1)); // дата - любая заполненная, для целей получения кодов классификаторов не играет роли.
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ПараметрыФормы.Вставить("ТекущийКод",      Форма.Объект[ИмяРеквизитаКод]);
	ПараметрыФормы.Вставить("Комментарий",     Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Форма = ДопПараметры.Форма;
	Форма.Объект[ДопПараметры.ИмяРеквизитаКод] = РезультатВыбора.Код;
	Форма.Объект[ДопПараметры.ИмяРеквизитаНаименование] = РезультатВыбора.Наименование;
	//++ НЕ УТ
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "ЗаполнитьОписаниеКлассификаторов", Истина);
	//-- НЕ УТ
	
КонецПроцедуры

Процедура КодКлассификатораПриИзменении(Форма, ИмяКлассификатора, Знач ИмяРеквизитаКод = "")
	
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ИмяРеквизитаНаименование = "Наименование" + Сред(ИмяРеквизитаКод, 4);
	
	// Исправление возможной опечатки в разделителе
	Форма.Объект[ИмяРеквизитаКод] = СтрЗаменить(Форма.Объект[ИмяРеквизитаКод], ",", ".");
	
	Форма.Объект[ИмяРеквизитаНаименование] = ОрганизацииВызовСервераЛокализация.НаименованиеКодаКлассификатора(ИмяКлассификатора, Форма.Объект[ИмяРеквизитаКод]);
	//++ НЕ УТ
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "ЗаполнитьОписаниеКлассификаторов", Истина);
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеРеквизитовПоИНН

Процедура ЗаполнитьПоИННЗавершение(Форма) Экспорт 
	ТекстСообщения = "";
	Если ПустаяСтрока(Форма.Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Форма.Объект.ИНН, 
		ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Форма.Объект.ЮрФизЛицо),
		ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
	Иначе
		ИННЗаполненКорректно = Истина;
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно, Форма) Тогда
		Форма.ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыЛокализацияВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Форма.Объект.ЮрФизЛицо),
		                       Форма.Объект.ИНН,
		                       Форма.ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(Форма,РеквизитыКонтрагента);
	КонецЕсли;
	
КонецПроцедуры


Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно, Форма)

	Возврат ПартнерыИКонтрагентыЛокализацияКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               Форма.НастройкиПодключенияКСервисуИППЗаданы,
	               Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               Форма.Объект.ОбособленноеПодразделение); 

КонецФункции

Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(Форма, РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыЛокализацияКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
		
	Иначе
		
		Если РеквизитыКонтрагента.Свойство("ЭтоОКВЭД2") И ТипЗнч(РеквизитыКонтрагента.ЭтоОКВЭД2) = Тип("Булево")
			И РеквизитыКонтрагента.ЭтоОКВЭД2 Тогда
			РеквизитыКонтрагента.Вставить("КодОКВЭД2", РеквизитыКонтрагента.КодОКВЭД);
			РеквизитыКонтрагента.КодОКВЭД = Неопределено;
		КонецЕсли;
		
		РезультатСравнения = ПартнерыИКонтрагентыЛокализацияКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(Форма),
		                                                                                                         ЗаполнятьИНН);
																												 
		Если НЕ РезультатСравнения.ЕстьИзменения ИЛИ НЕ РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда
			
			РезультатПоДопРеквизитам = РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента, Форма);
			
			РезультатСравнения.ЕстьИзменения = РезультатСравнения.ЕстьИзменения ИЛИ РезультатПоДопРеквизитам.ЕстьИзменения;
			РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах ИЛИ РезультатПоДопРеквизитам.ЕстьИзмененияВЗаполненныхРеквизитах;
			
		КонецЕсли;
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах
				И ЗначениеЗаполнено(Форма.Объект.ВерсияДанных)
				Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента, Форма", РеквизитыКонтрагента, Форма));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?';
									|en = 'Fill in counterparty attributes again based on USRLE/USRIE data?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента, Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента, ДополнительныеПараметры.Форма);
		
	КонецЕсли;

КонецПроцедуры

Функция РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися(РеквизитыКонтрагента, Форма)
	Перем ЗначениеОбъекта;
	
	РезультатСравнения = Новый Структура("ЕстьИзменения,ЕстьИзмененияВЗаполненныхРеквизитах",Ложь,Ложь);
	
	ДанныеОбъектаДляСравнения = Новый Структура;
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения(Форма);
	
	Для каждого ЭлементИмя Из СопоставлениеРеквизитовСравнения Цикл
		ДанныеОбъектаДляСравнения.Вставить(ЭлементИмя.Ключ, Форма.Объект[ЭлементИмя.Ключ]);
	КонецЦикла; 
	
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		
		Если НРег(ЭлементСопоставления.Ключ) = НРег("СвидетельствоСерияНомер") Тогда
			Форма.Объект.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта);
			ДанныеКонтрагента = СокрЛП(""  + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
											+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер")
										);
			Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
				РезультатСравнения.ЕстьИзменения = Истина;
				Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
					РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
					
					Возврат РезультатСравнения;
					
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		
		ЗначениеРеквизитаКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		
		Если Форма.Объект.Свойство(ЭлементСопоставления.Ключ,ЗначениеОбъекта) И ЗначениеОбъекта <> ЗначениеРеквизитаКонтрагента Тогда
			
			//пустые значения локальное и внешнее могут казаться разнотипными - это не может быть признаком изменения значения
			Если НЕ ЗначениеЗаполнено(ЗначениеОбъекта) И НЕ ЗначениеЗаполнено(ЗначениеРеквизитаКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатСравнения.ЕстьИзменения = Истина;
			
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ДанныеОбъектаДляСравнения.Свойство("СвидетельствоСерияНомер",ЗначениеОбъекта) Тогда
		
		ДанныеКонтрагента = "" + ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Серия") +" "
								+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоОРегистрации.Номер");
		Если ЗначениеОбъекта <> ДанныеКонтрагента Тогда 
			РезультатСравнения.ЕстьИзменения = Истина;
			Если ЗначениеЗаполнено(ЗначениеОбъекта) Тогда
				РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах = Истина;
				
				Возврат РезультатСравнения;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатСравнения;

КонецФункции // РезультатСравненияПолученныхДанныхОрганизацииСИмеющимися()

Функция ДанныеОбъектаДляСравнения(Форма)
	Объект = Форма.Объект;
	ДанныеДляСравнения = ПартнерыИКонтрагентыЛокализацияКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, ИНН, Наименование");
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      Форма,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      Форма,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции 

// Возвращает сопоставление локальных реквизитов объекта и данных полученных из ЕГРН
// заполнению подлежат только реквизиты специфичные для справочника Организации, и размещаемые непосредственно в нем
//
// Возвращаемое значение:
// Структура - 	Ключ - локальное имя реквизита
//				Значение - путь к реквизиту данных ЕГРН (возможно через ".")
Функция СопоставлениеРеквизитовСравнения(Форма)
	
	Результат = Новый Структура;
	
	ПрефиксРеквизита = "";
	Если Форма.ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		ПрефиксРеквизита = "ИП";
		
		Результат.Вставить("СвидетельствоДатаВыдачи","РегистрацияВНалоговомОргане.ДатаРегистрации");
		Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерПФР","РегистрацияВПенсионномФонде.РегистрационныйНомерПФР");
		Результат.Вставить("СвидетельствоСерияНомер");	//значение этого реквизита конкатенируется из двух:  РегистрацияВНалоговомОргане.Серия и РегистрацияВНалоговомОргане.Номер
		
	КонецЕсли;
	
	Результат.Вставить("ДатаРегистрации","ДатаРегистрации");
	Результат.Вставить("КодОКВЭД","КодОКВЭД");
	Результат.Вставить("КодОКВЭД2","КодОКВЭД2");
	
	Результат.Вставить("КодПоОКАТО","РегистрацияВНалоговомОргане.ОКАТО");
	Результат.Вставить("КодНалоговогоОргана","РегистрацияВНалоговомОргане.Код");
	Результат.Вставить("НаименованиеНалоговогоОргана","РегистрацияВНалоговомОргане.Наименование");
	
	
	Результат.Вставить("КодОрганаПФР","РегистрацияВПенсионномФонде.КодОрганаПФР");
	Результат.Вставить("НаименованиеТерриториальногоОрганаПФР","РегистрацияВПенсионномФонде.НаименованиеОрганаПФР");
	
	Результат.Вставить(ПрефиксРеквизита+"КодПодчиненностиФСС","РегистрацияВФСС.КодПодчиненности");
	Результат.Вставить("НаименованиеТерриториальногоОрганаФСС","РегистрацияВФСС.НаименованиеОрганаФСС");
	Результат.Вставить(ПрефиксРеквизита+"РегистрационныйНомерФСС","РегистрацияВФСС.РегистрационныйНомерФСС");
	
	Возврат Результат;
	
КонецФункции // СопоставлениеРеквизитовСравнения()

Процедура ЗаполнитьРеквизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента, Форма)
	
	Если Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ОтложеннаяИнициализация
		И НЕ Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ВыполненаОтложеннаяИнициализация Тогда
		ДополнительныеПараметрыОбработки = Новый Структура();
		ДополнительныеПараметрыОбработки.Вставить("ИмяПроцедуры", "КонтактнаяИнформацияПриСменеСтраницы");
		ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, , Истина, ДополнительныеПараметрыОбработки);
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если ПустаяСтрока(Объект.Наименование) Тогда 
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "Наименование");
	КонецЕсли;
	ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюНаименований(Объект, РеквизитыКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.ДатаРегистрации) 
		И ЗначениеЗаполнено(Объект.ИсторияНаименований) Тогда
		ПерваяЗапись = Объект.ИсторияНаименований[0];
		Объект.ДатаРегистрации = ПерваяЗапись.Период;
	КонецЕсли;      
	ИсторияКПП = ПартнерыИКонтрагентыКлиент.ПолучитьИсториюРеквизита(РеквизитыКонтрагента, "КПП");   
	
	Если Не ИсторияКПП = Неопределено 
		И ИсторияКПП.Количество() > 0 Тогда
		ИсторияКППСортировка = Новый Массив;
		Для Каждого Элемент Из ИсторияКПП Цикл
			Если ИсторияКППСортировка.Количество() 
				И ИсторияКППСортировка[ИсторияКППСортировка.ВГраница()].Дата > Элемент.Дата Тогда
				ИсторияКППСортировка.Вставить(ИсторияКППСортировка.ВГраница(), Элемент);
			Иначе
				ИсторияКППСортировка.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		ИсторияКПП = ИсторияКППСортировка;
		ДанныеРегистрации = ИсторияКПП[ИсторияКПП.ВГраница()];
		Форма.ДатаРегистрацииВНалоговомОргане = ДанныеРегистрации.Дата;
		Форма.ИсторияКПП = ПоместитьВоВременноеХранилище(ИсторияКПП, Новый УникальныйИдентификатор);
		Форма.РегистрацииВНалоговомОрганеНаборЗаписей.Очистить();
	КонецЕсли;
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если РеквизитыКонтрагента.КПП <> Объект.КПП Тогда
			Объект.КПП = РеквизитыКонтрагента.КПП;
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыКонтрагента.Свойство("РегистрационныйНомер") Тогда
		Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеПолное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеПолное;
	КонецЕсли;
	
	Если Объект.НаименованиеСокращенное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда 
		Объект.НаименованиеСокращенное = РеквизитыКонтрагента.НаименованиеСокращенное;
	КонецЕсли;
	
	Если Объект.НаименованиеМеждународное <> РеквизитыКонтрагента.НаименованиеМеждународное Тогда
		Объект.НаименованиеМеждународное = РеквизитыКонтрагента.НаименованиеМеждународное;
	КонецЕсли;

	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(Форма,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда
		
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(Форма,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюАдресов(Форма, РеквизитыКонтрагента);
	КонецЕсли;     
	
	// Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	СтруктураРеквизитовФормыПФР = Новый Структура("КодОрганаПФР,НаименованиеТерриториальногоОрганаПФР,РегистрационныйНомерПФР,ИПРегистрационныйНомерПФР");
	
	СопоставлениеРеквизитовСравнения = СопоставлениеРеквизитовСравнения(Форма);
	Для каждого ЭлементСопоставления Из СопоставлениеРеквизитовСравнения Цикл
		РеквизитКонтрагента = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,ЭлементСопоставления.Значение);
		Если ЗначениеЗаполнено(РеквизитКонтрагента) И Объект[ЭлементСопоставления.Ключ] <> РеквизитКонтрагента Тогда
			Объект[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;

			Если СтруктураРеквизитовФормыПФР.Свойство(ЭлементСопоставления.Ключ) Тогда
				Форма[ЭлементСопоставления.Ключ] = РеквизитКонтрагента;
			КонецЕсли;

		КонецЕсли; 
		
	КонецЦикла; 
	
	
	Если СопоставлениеРеквизитовСравнения.Свойство("СвидетельствоСерияНомер") Тогда
		Объект.СвидетельствоСерияНомер = "" 	+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоСерияНомер.Серия") +" "
												+ ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента,"СвидетельствоСерияНомер.Номер");
		Объект.СвидетельствоДатаВыдачи = ПолучитьРеквизитКонтрагента(РеквизитыКонтрагента, "СвидетельствоСерияНомер.Дата");
	КонецЕсли;

	// Конец Заполнение Организации по ИНН данными из ЕГРЮЛ/ЕГРИП
	
	Форма.ДанныеРегистрацийВНалоговыхОрганахИзменены = Истина;
	Форма.Модифицированность = Истина;
	ОбщегоНазначенияУТКлиент.ПродолжитьВыполнениеКоманды(Форма, "ЗаполнитьОписанияПараметров", Истина);
	
КонецПроцедуры

Функция ПолучитьРеквизитКонтрагента(Знач РеквизитыКонтрагента, Знач ПутьРеквизита)
	Перем ЗначениеШага;
	
	ШагиПути = СтрРазделить(ПутьРеквизита,".",Ложь);
	КоличествоШагов = ШагиПути.Количество();
	
	Если КоличествоШагов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ РеквизитыКонтрагента.Свойство(ШагиПути[0],ЗначениеШага) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КоличествоШагов > 1 И ЗначениеЗаполнено(ЗначениеШага) Тогда
		ШагиПути.Удалить(0);
		
		Возврат ПолучитьРеквизитКонтрагента(ЗначениеШага,СтрСоединить(ШагиПути,"."));
		
	КонецЕсли; 
	
	Возврат ЗначениеШага;
	
КонецФункции // ПолучитьРеквизитКонтрагента()

#КонецОбласти

#Область МетодыДляОбработчиковСобытийФормы

Процедура ПриОкончанииВводаКодПоОКПО(ТекстРедактирования, Форма)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	ЭтоЮрЛицо = Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо")
		ИЛИ Форма.Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент");
	
	Если НЕ ПустаяСтрока(ТекстРедактирования) 
		И НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(ТекстРедактирования, 
			ЭтоЮрЛицо,
			ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КодПоОКПО",,);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОкончанииВводаКПП(ТекстРедактирования, Форма)
	
	Перем ТекстСообщения;
	ОчиститьСообщения();
	
	Если НЕ ПустаяСтрока(ТекстРедактирования)
		И НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ТекстРедактирования, ТекстСообщения) Тогда
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.КПП",,);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ПрочиеСлужебныеМетоды

Процедура ПроверитьЧтоЭтоНеНовыйЭлементОбработкаОтвета(КодОтвета, ДополнительныеПараметры) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.ОК Тогда 
		Форма = ДополнительныеПараметры.Форма; // РасширениеУправляемойФормыДляДокумента - 
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("НеЗакрыватьФорму", Истина);
		
		ЭлементЗаписан = Форма.Записать(ПараметрыЗаписи);
		
		Если Не ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = ДополнительныеПараметры.Оповещение;
		
		ВыполнитьОбработкуОповещения(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныеРегистрыНалоговУчетныхПолитик(МассивРегистров) Экспорт
	//++ Локализация
	МассивРегистров.Добавить("НастройкиСистемыНалогообложения");
	МассивРегистров.Добавить("УчетнаяПолитикаБухУчета");
	МассивРегистров.Добавить("НастройкиУчетаНалогаНаПрибыль");
	МассивРегистров.Добавить("НастройкиУчетаУСН"); 
	МассивРегистров.Добавить("НастройкиУчетаНДСПриУСН");
	МассивРегистров.Добавить("СтавкиНалогаНаИмущество");
	//-- Локализация
КонецПроцедуры

// Зависимый регистр.
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра
// 
// Возвращаемое значение:
//  Строка - Имя зависимого регистра
Функция ЗависимыйРегистр(ИмяРегистра) Экспорт
	
	ЗависимыйРегистр = ""; 
	
	//++ Локализация
	Если ИмяРегистра = "НастройкиУчетаНДСПриУСН" Тогда
		ЗависимыйРегистр = "НастройкиУчетаНДС";
	КонецЕсли;	
	//-- Локализация
	
	Возврат ЗависимыйРегистр;

КонецФункции


//++ Локализация

Функция РазложитьСтрокуНаименования(Знач ЮридическоеФизическоеЛицо, Знач НаименованиеОрганизации) Экспорт
	
	Результат	= Новый Структура("НаименованиеОрганизации,ОрганизационноПравоваяФорма,ОрганизационноПравоваяФормаСокращенно");
	
	НаименованиеОрганизации	= СокрЛП(НаименованиеОрганизации);
	
	Если УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'ООО';
																				|en = 'LLC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'ОАО';
																					|en = 'JSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'ЗАО';
																					|en = 'CJSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'ИП';
																					|en = 'Individual entrepreneur'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'Individual entrepreneur'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'Общество с ограниченной ответственностью';
																					|en = 'Limited liability company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'Открытое акционерное общество';
																					|en = 'Open Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'Закрытое акционерное общество';
																					|en = 'Closed Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(НаименованиеОрганизации, НСтр("ru = 'Индивидуальный предприниматель';
																					|en = 'Individual entrepreneur'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'Individual entrepreneur'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
	   И НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(НаименованиеОрганизации, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки	= Найти(НаименованиеОрганизации, """");
			ПозицияПоследнейКавычки	= 0;
			
			ВремНаименование	= НаименованиеОрганизации;
			
			ПозицияКавычки		= ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки	= ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование	= Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки		= Найти(ВремНаименование, """");
			КонецЦикла;
			
			НаименованиеОрганизации	= Сред(НаименованиеОрганизации, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				НаименованиеОрганизации	= НаименованиеОрганизации + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.НаименованиеОрганизации				= СокрЛП(НаименованиеОрганизации);
	Результат.ОрганизационноПравоваяФорма			= ОрганизационноПравоваяФорма;
	Результат.ОрганизационноПравоваяФормаСокращенно	= ОрганизационноПравоваяФормаСокращенно;
	
	Возврат Результат;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат	= Ложь;
	
	Наименование	= СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьНаименование(СтруктураНаименования)
	
	Возврат	СтруктураНаименования.НаименованиеОрганизации
			+ ?(ПустаяСтрока(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно), "", " ")
			+ СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно;
	
КонецФункции

Функция СформироватьНаименованиеПолное(Форма, СтруктураНаименования)
	Перем НаименованиеПолное;
	
	Объект = Форма.Объект;
	Если Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
		НаименованиеПолное = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2",
			СтруктураНаименования.ОрганизационноПравоваяФорма,
			?(ЗначениеЗаполнено(Форма.ФИОИндивидуальногоПредпринимателя), Форма.ФИОИндивидуальногоПредпринимателя,СтруктураНаименования.НаименованиеОрганизации)));
	Иначе
		
		Если НЕ ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФорма) Тогда
			НаименованиеПолное = СтруктураНаименования.НаименованиеОрганизации;
		Иначе
			НаименованиеПолное = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
				СтруктураНаименования.ОрганизационноПравоваяФорма, СтруктураНаименования.НаименованиеОрганизации));
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат	НаименованиеПолное;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти
