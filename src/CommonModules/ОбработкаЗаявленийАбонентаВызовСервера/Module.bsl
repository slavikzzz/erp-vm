////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обработка заявлений абонента на подключение".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция СледующееЗаявлениеТребующееРеакцииПользователя() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Статус В (&Одобрено, &Отклонено)
	|	И (НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
	|			ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
	|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЭДОЗавершена
	|				И ПОДСТРОКА(ЗаявлениеАбонентаСпецоператораСвязи.НастройкиЭДО, 0, 1000) <> """"
	|				И (ЗаявлениеАбонентаСпецоператораСвязи.ПереиздатьСертификатЭДО
	|					ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.ПодключитьЭДО))
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Ответственный = &Ответственный
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка В (&ЗаявленияТребующиеНапоминанияПозже)
	|	И ЗаявлениеАбонентаСпецоператораСвязи.Дата > &МесяцНазад
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления УБЫВ";
	
	Запрос.УстановитьПараметр("МесяцНазад", 	ТекущаяДатаСеанса() - 30*24*60*60);
	Запрос.УстановитьПараметр("Ответственный", 	Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Одобрено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("Отклонено", 		Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	
	Запрос.УстановитьПараметр("ЗаявленияТребующиеНапоминанияПозже", ЗаявленияТребующиеНапоминанияПозже());
	
	РезультатЗапроса 	= Запрос.Выполнить();
	Выборка 			= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ИсключитьЗаявлениеБезСертификата(Выборка.Ссылка) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
		
КонецФункции

Функция ИсключитьЗаявлениеБезСертификата(ДокументЗаявление) Экспорт

	Если НЕ ДокументЗаявление.ЭтоУдаленноеПереизданиеСертификата Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПоСроку = ПолучитьКрайнийСрокДЛ(ДокументЗаявление);
	
	Результат = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьИРазобратьОтветНаЗаявление(ДокументЗаявление);
	Если Результат.Свойство("ОтпечатокСертификатаИзОтвета") Тогда
		ОтпечатокСертификатаИзОтвета = Результат.ОтпечатокСертификатаИзОтвета;
	КонецЕсли;
	
	// Ждем когда появится сертификат и только потом напоминаем
	Исключить = РезультатПоСроку.РаспискаОтправлена И НЕ ЗначениеЗаполнено(ОтпечатокСертификатаИзОтвета);
	
	Возврат Исключить;

КонецФункции


// Варианты ответов от КА

//<remainingTime>10169</remainingTime>
//<message>Время до которого нужно предоставить электронную расписку</message>

//<remainingTime>123456</remainingTime>
//<message>Время до которого нужно предоставить бумажную расписку</message>

//<remainingTime>0</remainingTime>
//<message>Время для предоставления раcписок истекло</message>

//<message>Расписка приложена</message>
//
&НаСервере
Функция ПолучитьКрайнийСрокДЛ(ДокументЗаявление) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КрайнийСрокДЛ", Дата(1,1,1));
	Результат.Вставить("ПрошелКрайнийСрокДЛ", Ложь);
	Результат.Вставить("РаспискаОтправлена", Ложь);
	
	Попытка
	
		ТелоЗапроса = "<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:reg=""http://regservice.keydisk.ru/"">
	                   |   <soapenv:Header/>
	                   |   <soapenv:Body>
	                   |      <reg:GetReceiptRemainingTime>
	                   |         <!--Optional:-->
	                   |         <reg:workflowGuid>&workflowGuid</reg:workflowGuid>
	                   |      </reg:GetReceiptRemainingTime>
	                   |   </soapenv:Body>
	                   |</soapenv:Envelope>";
		
		ТелоЗапроса = СтрЗаменить(ТелоЗапроса, "&workflowGuid", ДокументЗаявление.ИдентификаторДокументооборота);
		
		Ответ = Документы.ЗаявлениеАбонентаСпецоператораСвязи.PostЗапросОператору(
			"GetReceiptRemainingTime", 
			ТелоЗапроса,
			Результат.ОписаниеОшибки);
			
		Если Ответ = Неопределено Тогда
			
			Результат.Выполнено = Ложь;
			Результат.ОписаниеОшибки = 
				НСтр("ru = 'Не удалось получить срок отправки расписки по причине: ';
					|en = 'Не удалось получить срок отправки расписки по причине: '") 
				+ Символы.ПС 
				+ Результат.ОписаниеОшибки;
				
			Возврат Результат;
		Иначе
			
			ДОМ     = ДокументооборотСКО.ДваждыРазобратьОтветНаPostЗапрос(Ответ, "GetReceiptRemainingTimeResult", "utf-8");
			code    = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "code");
			message = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "message");
			
			Если code = "0" Тогда
				
				Если message = "Время до которого нужно предоставить электронную расписку" Тогда
					
					remainingTime = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "remainingTime");
					Результат.КрайнийСрокДЛ = ТекущаяДатаСеанса() + remainingTime;
					
				ИначеЕсли message = "Время для предоставления расписок истекло"
					ИЛИ message = "Время до которого нужно предоставить бумажную расписку" Тогда
					
					Результат.ПрошелКрайнийСрокДЛ = Истина;
					
				ИначеЕсли message = "Расписка приложена" Тогда
					
					Результат.РаспискаОтправлена = Истина;
					
				КонецЕсли;
				
			Иначе
				
				СохранитьОшибку(
					НСтр("ru = 'Не удалось получить срок отправки расписки по причине: ';
						|en = 'Не удалось получить срок отправки расписки по причине: '"),
					Результат, 
					ДОМ);
					
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
		
	Исключение
		
		ДанныеОшибки = ИнформацияОбОшибке();
		
		ДокументооборотСКО.ОбработатьИсключение(
			ДанныеОшибки, 
			НСтр("ru = 'Получение срок отправки расписки в УЦ Основание (метод GetReceiptRemainingTime)';
				|en = 'Получение срок отправки расписки в УЦ Основание (метод GetReceiptRemainingTime)'"));
			
		ТекстОшибки  = КраткоеПредставлениеОшибки(ДанныеОшибки);
		
		Результат.Выполнено = Ложь;
		Результат.ОписаниеОшибки = 
			НСтр("ru = 'Не удалось получить срок отправки расписки по причине: ';
				|en = 'Не удалось получить срок отправки расписки по причине: '") 
			+ Символы.ПС 
			+ ТекстОшибки;
				
		Возврат Результат;
	
	КонецПопытки;
	
КонецФункции

Процедура СохранитьОшибку(Префикс, Результат, ДОМ) Экспорт

	message      = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "message");
	errorMessage = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДОМ, "errorMessage");
	
	Ошибка = Макс(message, errorMessage);
	
	Результат.Выполнено = Ложь;
	Результат.ОписаниеОшибки = 
		Префикс 
		+ Символы.ПС 
		+ Ошибка;

КонецПроцедуры


Процедура ВключитьОтслеживаниеИзмененияСтатусаЗаявления(ДокументЗаявление) Экспорт
	
	Если ДокументЗаявление.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Повторный запуск задания по одному заявлению вызывает ошибку.
		Задания = ЗаданияПоЗаявлению(ДокументЗаявление);
		Если Задания.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
			Интервал = 30;
		Иначе
			Интервал = 600;
		КонецЕсли;
		
		// Запускаем отслеживание изменения состояния
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодПовтораВТечениеДня  	= Интервал;
		Расписание.ПериодПовтораДней 			= 1;
		
		Параметры = Новый Массив;
		Параметры.Добавить(ДокументЗаявление);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", 	Метаданные.РегламентныеЗадания.ОбработкаЗаявленийАбонента);
		ПараметрыЗадания.Вставить("Ключ", 			КлючЗадания(ДокументЗаявление));
		ПараметрыЗадания.Вставить("Параметры", 		Параметры);
		ПараметрыЗадания.Вставить("Расписание", 	Расписание);
		ПараметрыЗадания.Вставить("Использование", 	Истина);
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 		10);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 	3);
		ПараметрыЗадания.Вставить("Наименование", 	НСтр("ru = 'Отслеживание заявления ';
															|en = 'Отслеживание заявления '") + ДокументЗаявление.Номер + НСтр("ru = ' по 1С-Отчетности';
																																|en = ' по 1С-Отчетности'"));
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтключитьОтслеживаниеИзменениеСтатусаЗаявления(ДокументЗаявление) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задания = ЗаданияПоЗаявлению(ДокументЗаявление);
	Для каждого Задание Из Задания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИРазобратьОтветНаЗаявление(
		Знач ДокументЗаявление,
		ЭтоВызовИзМастера = Ложь,
		ОбновитьЗаявление = Ложь) Экспорт
		
	РезультатОбмена = ОбменССерверомПолучитьОтвет(
		ДокументЗаявление,
		ЭтоВызовИзМастера); 

	Результат = ШаблонРезультатаПоЗаявлению(ДокументЗаявление);
	Результат.Вставить("ПовторятьСоединение", 	РезультатОбмена.ПовторятьСоединение);
	Результат.Вставить("УдалосьСоединиться",	РезультатОбмена.УдалосьСоединиться);
	Результат.Вставить("СтатусКомментарий", 	РезультатОбмена.СтатусКомментарий);
	
	ОтветПолучен = РезультатОбмена.Выполнено;
		
	Если ОтветПолучен Тогда
		
		РезультатРазбораОтвета = РегистрацияРазобратьОтвет(ДокументЗаявление, РезультатОбмена);
			
		ОтветРазобран = РезультатРазбораОтвета.Выполнено;
		
		Результат.Вставить("Статус", РезультатРазбораОтвета.Статус);
		
		Если ОтветРазобран Тогда
			
			Результат.Вставить("Выполнено", 					Истина);
			Результат.Вставить("ОтпечатокСертификатаИзОтвета",	РезультатРазбораОтвета.ОтпечатокСертификатаИзОтвета);
			Результат.Вставить("ИдентификаторАбонента", 		РезультатРазбораОтвета.ИдентификаторАбонента);
			Результат.Вставить("СтатусИзменился", 				РезультатРазбораОтвета.Статус <> ДокументЗаявление.Статус);
			Результат.Вставить("РаспискаОтУЦ", 					РезультатРазбораОтвета.РаспискаОтУЦ);
			
			Если ОбновитьЗаявление Тогда
				
				РеквизитыДляЗаписи = Новый Структура();
				РеквизитыДляЗаписи.Вставить("СтатусКомментарий", 	РезультатРазбораОтвета.СтатусКомментарий);
				РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", 	РезультатОбмена.ДатаОтвета);
				РеквизитыДляЗаписи.Вставить("Статус", 				РезультатРазбораОтвета.Статус);
				
				ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(РезультатОбмена.ИмяКаталогаСОтветом);
		
	ИначеЕсли РезультатОбмена.УдалосьСоединиться И НЕ ОтветПолучен Тогда 
		
		Если ОбновитьЗаявление Тогда
			РеквизитыДляЗаписи = Новый Структура();
			РеквизитыДляЗаписи.Вставить("СтатусКомментарий", 	РезультатОбмена.СтатусКомментарий);
			РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", 	РезультатОбмена.ДатаОтвета);
			РеквизитыДляЗаписи.Вставить("Статус", 				РезультатОбмена.Статус);
			
			ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
		КонецЕсли;
		
		ОперацииСФайламиЭДКО.УдалитьВременныйФайл(РезультатОбмена.ИмяКаталогаСОтветом);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ОтправленныеЗаявленияАбонентов(
		ДокументЗаявление 	 = Неопределено,
		Организация 		 = Неопределено,
		ТипЗаявления 		 = Неопределено,
		ИзмененныеРеквизиты  = Неопределено,
		ВключаяЭДО           = Ложь) Экспорт
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи) Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Если ИзмененныеРеквизиты = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Статус В (&Отклонено, &Одобрено)
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
		|			ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Статус = &Отправлено
		|			ИЛИ &ВключаяЭДО
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЭДОЗавершена
		|				И ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Статус = &Отклонено
		|				И ПОДСТРОКА(ЗаявлениеАбонентаСпецоператораСвязи.НастройкиЭДО, 0, 1000) <> """"
		|				И (ЗаявлениеАбонентаСпецоператораСвязи.ПодключитьЭДО
		|					ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.ПереиздатьСертификатЭДО))
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
		|				И &ЕстьОтборПоОрганизации
		|			ИЛИ НЕ &ЕстьОтборПоОрганизации)
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка В (&Заявления)
		|				И &ЕстьОтборПоЗаявлению
		|			ИЛИ НЕ &ЕстьОтборПоЗаявлению)
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = &ТипЗаявления
		|				И &ЕстьОтборПоТипу
		|			ИЛИ НЕ &ЕстьОтборПоТипу)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления УБЫВ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ИзменившиесяРеквизитыВторичногоЗаявления КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ПометкаУдаления
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус В (&Отклонено, &Одобрено)
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.НастройкаЗавершена
		|			ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус = &Отправлено
		|			ИЛИ &ВключаяЭДО
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.НастройкаЭДОЗавершена
		|				И ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.НастройкаЗавершена
		|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Статус = &Отклонено
		|				И ПОДСТРОКА(ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.НастройкиЭДО, 0, 1000) <> """"
		|				И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ПодключитьЭДО
		|					ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ПереиздатьСертификатЭДО))
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Организация = &Организация
		|				И &ЕстьОтборПоОрганизации
		|			ИЛИ НЕ &ЕстьОтборПоОрганизации)
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка В (&Заявления)
		|				И &ЕстьОтборПоЗаявлению
		|			ИЛИ НЕ &ЕстьОтборПоЗаявлению)
		|	И (ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.ТипЗаявления = &ТипЗаявления
		|				И &ЕстьОтборПоТипу
		|			ИЛИ НЕ &ЕстьОтборПоТипу)
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ИзмененныйРеквизит В(&ИзмененныеРеквизиты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка.Дата УБЫВ";

		Запрос.УстановитьПараметр("ИзмененныеРеквизиты", ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Отправлено", Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("Одобрено", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("Отклонено", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
	
	Запрос.УстановитьПараметр("Организация", 			Организация);
	Запрос.УстановитьПараметр("ЕстьОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	
	Если ТипЗнч(ДокументЗаявление) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		
		Заявления = Новый Массив;
		Заявления.Добавить(ДокументЗаявление);
		
		Запрос.УстановитьПараметр("Заявления", Заявления);
		
	Иначе
		
		Заявления = ДокументЗаявление;
		Запрос.УстановитьПараметр("Заявления", Заявления);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЕстьОтборПоЗаявлению", 	ЗначениеЗаполнено(ДокументЗаявление));
	
	Запрос.УстановитьПараметр("ТипЗаявления", 		ТипЗаявления);
	Запрос.УстановитьПараметр("ЕстьОтборПоТипу", 	ЗначениеЗаполнено(ТипЗаявления));
	Запрос.УстановитьПараметр("ВключаяЭДО", 	    ВключаяЭДО);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

// Проверяет наличие отправленных или одобренных заявления по 1С-Отчетности
// Внимание! Не менять без согласования с БП3. Вызывается из БП3.
// 
// Возвращаемое значение:
//  Булево - есть ли отправленные или одобренные заявлений
//
Функция ЕстьОтправленныеИлиОдобренныеЗаявления(Организация = Неопределено) Экспорт
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И (ЗаявлениеАбонентаСпецоператораСвязи.Статус = &Отправлено
	|				И ЗаявлениеАбонентаСпецоператораСвязи.ДатаОтправкиЗаявления > &ДатаОтправкиЗаявления
	|			ИЛИ ЗаявлениеАбонентаСпецоператораСвязи.Статус = &Одобрено
	|				И НЕ ЗаявлениеАбонентаСпецоператораСвязи.НастройкаЗавершена)
	|	И (ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация ИЛИ &ОрганизацияПустая)";
	
	ДвеНеделиНазад = ТекущаяДатаСеанса() - 14 * 24 * 60 * 60;
	
	Запрос.УстановитьПараметр("Отправлено", Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено);
	Запрос.УстановитьПараметр("Одобрено", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
	Запрос.УстановитьПараметр("ДатаОтправкиЗаявления", ДвеНеделиНазад);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияПустая", Организация = Неопределено);
	
	Запрос.Текст = Текст;
	
	Результат 		= Запрос.Выполнить();
	ЕстьЗаявления 	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка").Количество() > 0;
	
	Возврат ЕстьЗаявления;
		
КонецФункции

Функция ОбновитьРеквизитыЗаявления(Документ, РеквизитыДокумента) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		ДокументОбъект = Документ.ПолучитьОбъект();
	ИначеЕсли ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") Тогда
		ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документ;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект.Прочитать();
		
		// Копируем в заявление все новые свойства.
		ЗаполнитьЗначенияСвойств(ДокументОбъект, РеквизитыДокумента);
		
		// ИдентификаторКлючевогоКонтейнера
		Если РеквизитыДокумента.Свойство("ИдентификаторКлючевогоКонтейнера") Тогда
			
			Если ЗначениеЗаполнено(ДокументОбъект.УчетнаяЗапись) Тогда 
				ЗаблокироватьДанныеДляРедактирования(ДокументОбъект.УчетнаяЗапись);
				УчетнаяЗапись = ДокументОбъект.УчетнаяЗапись.ПолучитьОбъект();
				УчетнаяЗапись.ИдентификаторДокументооборота = РеквизитыДокумента.ИдентификаторКлючевогоКонтейнера;
				УчетнаяЗапись.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка заявлений.Обновление статуса';
										|en = 'Обработка заявлений.Обновление статуса'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовЗаявления(Документ) Экспорт
	
	Свойства =
		"СпецОператорСвязи,
		|ПутьКонтейнерЗакрытогоКлюча,
		|СтатусКомментарий,
		|ИдентификаторДокументооборота, 
		|ДатаПолученияОтвета, 
		|Статус,
		|Организация,
		|НастройкаЗавершена,
		|Дата,
		|Номер,
		|ЭлектроннаяПодписьВМоделиСервиса,
		|ТелефонМобильныйДляАвторизации,
		|ЭтоУпрощенноеЗаявление,
		|ПодписатьЭП,
		|ТипЗаявления,
		|ПометкаУдаления,
		|НастройкиЭДО,
		|НастройкаЭДОЗавершена,
		|ПодключитьЭДО,
		|ПереиздатьСертификатЭДО,
		|НомерОсновнойПоставки1с,
		|СпособПолученияСертификата, 
		|МодельХраненияЗакрытогоКлюча,
		|ВладелецЭЦП,
		|ЭтоМультиРежим,
		|Ответственный";
	
	ДополнительныеПараметры = Новый Структура(Свойства);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Документ);

	ДополнительныеПараметры.Вставить("УчетнаяЗаписьОблачнойПодписи", ОбработкаЗаявленийАбонентаКлиентСервер.ПолучитьПараметрПодключения(Документ, "УчетнаяЗапись"));

	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьИОтправитьЗаявлениеВМоделиСервиса(ДокументЗаявление, Алгоритм) Экспорт
	
	РезультатВыгрузки 		  = ОбработкаЗаявленийАбонента.ВыгрузитьЗаявлениеАбонентаВМоделиСервиса(ДокументЗаявление, Алгоритм);
	УдалосьВыгрузитьЗаявление = РезультатВыгрузки.Выполнено;
	
	Если УдалосьВыгрузитьЗаявление Тогда
		
		Статус 					= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		ДатаОтправкиЗаявления 	= ТекущаяДатаСеанса();

		РеквизитыДокументаДляЗаписи = Новый Структура;
		РеквизитыДокументаДляЗаписи.Вставить("ПутьКонтейнерЗакрытогоКлюча", Неопределено);
		РеквизитыДокументаДляЗаписи.Вставить("Статус",						Статус);
		РеквизитыДокументаДляЗаписи.Вставить("ДатаОтправкиЗаявления",		ДатаОтправкиЗаявления);
		РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий", 			"");
		
		ОбновитьРеквизитыЗаявления(ДокументЗаявление.Ссылка, РеквизитыДокументаДляЗаписи);
			
	Иначе
		
		Статус 					= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено");
		ДатаОтправкиЗаявления 	= ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	РезультатВыгрузки.Вставить("Статус", 				Статус);
	РезультатВыгрузки.Вставить("ДатаОтправкиЗаявления", ДатаОтправкиЗаявления);
		
	Возврат РезультатВыгрузки;
		
КонецФункции

Функция ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление) Экспорт
	
	Результат = МенеджерСервисаКриптографии.ПолучитьСтатусЗаявленияНаПодключение(ДокументЗаявление.ИдентификаторДокументооборота);
	
	Если Не Результат.Выполнено Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Результат.Статус = "Исполняется" Тогда
		Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено;
	ИначеЕсли Результат.Статус = "Отклонено" Тогда
		Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено;
	ИначеЕсли Результат.Статус = "Исполнено" Тогда
		Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пояснение = Результат.Пояснение;

	Если ЗначениеЗаполнено(Результат.Токен) 
		И ЗначениеЗаполнено(Результат.ИдентификаторСертификата) Тогда
		СпособПодтвержденияКриптоопераций = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументЗаявление, "СпособПодтвержденияКриптоопераций");
		ОбновитьДанныеДолговременногоТокена(Результат.Токен, Результат.ИдентификаторСертификата, СпособПодтвержденияКриптоопераций);
	КонецЕсли;
	
	РеквизитыДляЗаписи = Новый Структура;
	РеквизитыДляЗаписи.Вставить("Статус", Статус);
	РеквизитыДляЗаписи.Вставить("ДатаПолученияОтвета", ТекущаяДатаСеанса());
	РеквизитыДляЗаписи.Вставить("СтатусКомментарий", Пояснение);
	
	Возврат ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(ДокументЗаявление, РеквизитыДляЗаписи);
	
КонецФункции

Функция ПолучитьОтветСервераНаЗаявлениеАбонента(ДокументЗаявление) Экспорт
	
	РезультатОтветаСервера = Новый Структура;
	РезультатОтветаСервера.Вставить("СтатусИзменился", Ложь);
	
	РеквизитыДокумента	= ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
	
	Ответ = Новый Структура;
	Ответ.Вставить("РезультатОтветаСервера", РезультатОтветаСервера);
	Ответ.Вставить("РеквизитыДокумента", 	 РеквизитыДокумента);
	
	// Для заявления с ЭП в модели сервиса обязательно нужно сначала получить идентификатор ключевого контейнера.
	МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(РеквизитыДокумента);
	Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча) Тогда
		
		ЗаявлениеОбработано = ОбработатьИзменениеСтатусаЗаявленияАбонентаВМоделиСервиса(ДокументЗаявление);
		
		Если ЗаявлениеОбработано Тогда
			
			// Обновляем структуру реквизитов в доп. параметрах после обращения к серверу.
			РеквизитыДокумента	= ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
			
		Иначе
			
			Возврат Ответ;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// Получаем ответ от сервера.
	Если КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(МестоХраненияКлюча)
		И РеквизитыДокумента.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено Тогда
		
		РезультатОтветаСервера = Новый Структура;
		РезультатОтветаСервера.Вставить("ОтпечатокСертификатаИзОтвета", "");
		РезультатОтветаСервера.Вставить("ИдентификаторАбонента", 		"");
		РезультатОтветаСервера.Вставить("СтатусИзменился", 				Истина);
		РезультатОтветаСервера.Вставить("Статус", 						РеквизитыДокумента.Статус);
		РезультатОтветаСервера.Вставить("Выполнено", 					Истина);
		РезультатОтветаСервера.Вставить("ПовторятьСоединение", 			Ложь);
		
	Иначе
		
		РезультатОтветаСервера = ПолучитьИРазобратьОтветНаЗаявление(ДокументЗаявление,,Истина);
		
		ПолученОтветНаЗаявление = РезультатОтветаСервера.Выполнено;
		ПовторятьСоединение 	= РезультатОтветаСервера.ПовторятьСоединение;
		
		Если НЕ ПолученОтветНаЗаявление И ПовторятьСоединение Тогда
			РезультатОтветаСервера.Вставить("СообщитьОбОтсутствииИнтернета", Истина);
		Иначе
			// Обновляем структуру реквизитов в доп. параметрах после обращения к серверу.
			РеквизитыДокумента = ПолучитьСтруктуруРеквизитовЗаявления(ДокументЗаявление);
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ.Вставить("РезультатОтветаСервера", РезультатОтветаСервера);
	Ответ.Вставить("РеквизитыДокумента", 	 РеквизитыДокумента);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьРеквизитОблачнойПодписи(ДокументЗаявление, ВидПараметра) Экспорт
	
	Результат = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.ЗначениеБулево КАК ЗначениеБулево,
	|	ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.ЗначениеСтрока КАК ЗначениеСтрока,
	|	ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.ЗначениеСсылка КАК ЗначениеСсылка,
	|	ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.Параметр КАК Параметр
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи.ПараметрыПодключенияОблачнойПодписи КАК ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи
	|ГДЕ
	|	ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.Ссылка = &Ссылка
	|	И ЗаявлениеАбонентаСпецоператораСвязиПараметрыПодключенияОблачнойПодписи.Параметр = &Параметр";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументЗаявление);
	Запрос.УстановитьПараметр("Параметр", ВидПараметра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Новый Структура("Параметр, ЗначениеСсылка, ЗначениеБулево, ЗначениеСтрока");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Результат.Добавить(НоваяСтрока);
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ПоддерживаетсяВторичноеЗаявление(УчетнаяЗапись) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Спецоператор = УчетнаяЗапись.СпецоператорСвязи;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ПараметрСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
		Спецоператор, 
		"ПоддерживаетсяОтправкаВторичногоЗаявления");
	
	Возврат ПараметрСпецоператора = "Истина";
	
КонецФункции

Функция ВерсияБСП() Экспорт
	
	Возврат СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЭлДокументаЗаявления(ДокументЗаявление, Имя) Экспорт
	
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		
		Если ЭлектронныйДокумент.Документ <> Имя Тогда
			Продолжить;
		КонецЕсли;

		ПрисоединенныйФайл = ЭлектронныйДокумент.Файл;

		ДополнительныеПараметры = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ДополнительныеПараметры.ИдентификаторФормы 				= Новый УникальныйИдентификатор;
		ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные 	= Истина;
		Результат = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ДополнительныеПараметры);
		
		Адрес = Результат.СсылкаНаДвоичныеДанныеФайла;
		Возврат Адрес;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗаданияПоЗаявлению(ДокументЗаявление)
	
	// Задание ищется по ключу - ссылка на заявление абонента
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Ключ", КлючЗадания(ДокументЗаявление));
	ДополнительныеПараметры.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаЗаявленийАбонента);
	
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(ДополнительныеПараметры);
	
	Возврат Задания;
	
КонецФункции

Функция КлючЗадания(ДокументЗаявление)
	
	Возврат ДокументЗаявление.ИдентификаторДокументооборота;
	
КонецФункции

Функция ШаблонРезультатаПоЗаявлению(ДокументЗаявление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", 					Ложь);
	Результат.Вставить("СтатусКомментарий", 			ДокументЗаявление.СтатусКомментарий);
	Результат.Вставить("Статус", 						ДокументЗаявление.Статус);
	Результат.Вставить("СтатусИзменился",				Ложь);
	Результат.Вставить("ИдентификаторАбонента", 		"");
	Результат.Вставить("ОтпечатокСертификатаИзОтвета", 	"");
	Результат.Вставить("РаспискаОтУЦ",					"");
	Результат.Вставить("ПовторятьСоединение", 			Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ОбменССерверомПолучитьОтвет(ДокументЗаявление, ЭтоВызовИзМастера) Экспорт
	
	ИдентификаторДокументооборота 	= ДокументЗаявление.ИдентификаторДокументооборота;
	СпецоператорСвязи 				= ДокументЗаявление.СпецоператорСвязи;
	
	ИмяКаталогаСОтветомНаСервере 	= ОперацииСФайламиЭДКО.СоздатьВременныйКаталог();
	ИмяФайлаОтвета 					= ИмяКаталогаСОтветомНаСервере + "ответ.zip";
	
	Результат = ШаблонРезультатаПоЗаявлению(ДокументЗаявление);
	Результат.Вставить("ДатаОтвета", 			Неопределено);
	Результат.Вставить("ИмяКаталогаСОтветом", 	ИмяКаталогаСОтветомНаСервере);
	Результат.Вставить("ИмяФайлаОтвета", 		ИмяФайлаОтвета);
	Результат.Вставить("УдалосьСоединиться", 	Ложь);
	Результат.Вставить("ПовторятьСоединение", 	Истина);
	
	Сервис = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбменССерверомСоздатьСервис(
		СпецоператорСвязи, 
		ЭтоВызовИзМастера, 
		,
		, 
		Ложь);
		
	Если Сервис = Неопределено Тогда
		Результат.Вставить("СтатусКомментарий", НСтр("ru = 'Не удалось соединиться с сервером';
													|en = 'Не удалось соединиться с сервером'"));
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		XDTOРезультат = Сервис.ReceivePacket(Строка(идентификаторДокументооборота));
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось соединиться с сервером. ';
							|en = 'Не удалось соединиться с сервером. '") + ИнформацияОбОшибке().Описание;
		ТекстОшибки = ДокументооборотСКОВызовСервера.ДобавитьТекстОшибкиСертификатаКА(ТекстОшибки);
		
		Результат.Вставить("СтатусКомментарий", ТекстОшибки);
		
		Возврат Результат;
	КонецПопытки;
	
	Результат.Вставить("УдалосьСоединиться", 	Истина);
	Результат.Вставить("ПовторятьСоединение", 	Ложь);
	
	ЧтениеXML 		= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XDTOРезультат);
	
	ПостроительДОМ 	= Новый ПостроительDOM();
	ДОМ 			= ПостроительДОМ.Прочитать(ЧтениеXML);
	УзелDOM 		= ДОМ.ПолучитьЭлементыПоИмени("code");
	кодРезультата 	= УзелDOM[0].ТекстовоеСодержимое;
	
	Результат.Вставить("ДатаОтвета", ТекущаяДатаСеанса());
	
	Если кодРезультата = "0" Тогда
		УзелDOM = ДОМ.ПолучитьЭлементыПоИмени("packet");
		
		Если УзелDOM.Количество() > 0 Тогда
			
			ДвоичныеДанные = Base64Значение(УзелDOM[0].ТекстовоеСодержимое);
			ДвоичныеДанные.Записать(ИмяФайлаОтвета);
			ЧтениеXML.Закрыть();
			
			Результат.Вставить("Выполнено", Истина);
			
		Иначе
			
			СтатусКомментарий = НСтр("ru = 'При получении ответа возникла ошибка: ответ нечитаем';
									|en = 'При получении ответа возникла ошибка: ответ нечитаем'");
			Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
			
		КонецЕсли;
		
	ИначеЕсли Кодрезультата = "1" Тогда
		
		СтатусКомментарий = НСтр("ru = 'Заявление еще не обработано сервером, попробуйте позже.';
								|en = 'Заявление еще не обработано сервером, попробуйте позже.'");
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
	Иначе
		
		УзелDOM = ДОМ.ПолучитьЭлементыПоИмени("errorMessage");
		Если УзелDOM.Количество() > 0 Тогда
			сообщениеОшибки = УзелDOM[0].ТекстовоеСодержимое;
			СтатусКомментарий = НСтр("ru = 'При получении ответа сервер Калуги Астрал вернул ошибку: ';
									|en = 'При получении ответа сервер Калуги Астрал вернул ошибку: '") + сообщениеОшибки;
		Иначе
			СтатусКомментарий = НСтр("ru = 'При получении ответа сервер Калуги Астрал вернул ошибку: ';
									|en = 'При получении ответа сервер Калуги Астрал вернул ошибку: '") + кодРезультата;
		КонецЕсли;
		
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция РегистрацияРазобратьОтвет(ДокументЗаявление, РезультатОбмена) Экспорт
		
	Результат = ШаблонРезультатаПоЗаявлению(ДокументЗаявление);
	
	ИмяКаталогаСОтветом 	= РезультатОбмена.ИмяКаталогаСОтветом;
	ИмяФайлаОтвета 			= РезультатОбмена.ИмяФайлаОтвета; 
		
	Попытка
		Архив1 = Новый ЧтениеZipФайла(ИмяФайлаОтвета);
		
		Для Счетчик = 0 по Архив1.Элементы.Количество() - 1 Цикл
			
			Если Архив1.Элементы[Счетчик].расширение = "bin" Тогда
				
				Архив1.Извлечь(Архив1.Элементы[Счетчик], ИмяКаталогаСОтветом);
				Архив2 = Новый ЧтениеZipФайла(ИмяКаталогаСОтветом + Архив1.Элементы[Счетчик].имя);
				Архив2.Извлечьвсе(ИмяКаталогаСОтветом);
				
				ДокументDOM = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗагрузитьФайлXML(ИмяКаталогаСОтветом + "file");
				
				Отпечаток = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"ОтпечатокСертификата");
				Результат.Вставить("ОтпечатокСертификатаИзОтвета", Отпечаток);
				
				// Комментарий
				Результат.Вставить("СтатусКомментарий", ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"Результат"));
				
				// Успешность регистрации заявления
				РезультатРегистрации = Булево(ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"РегистрацияУспешна"));
				Если РезультатРегистрации Тогда
					
					РаспискаОтУЦ = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"Расписка");
					Результат.Вставить("РаспискаОтУЦ", РаспискаОтУЦ);
					
					ИдентификаторАбонента = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьЗначениеУзлаXML(ДокументDOM,"ИдентификаторАбонента");
					
					Результат.Вставить("Статус", 				Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено);
					Результат.Вставить("ИдентификаторАбонента",	ИдентификаторАбонента);
					Результат.Вставить("Выполнено", 			Истина);
					
					Возврат Результат;
					
				Иначе
					
					Результат.Вставить("Статус", 	Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
					Результат.Вставить("Выполнено", Истина);
									
					Возврат Результат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		СтатусКомментарий = НСтр("ru = 'Ошибка. Не удалось разобрать ответ сервера.';
								|en = 'Ошибка. Не удалось разобрать ответ сервера.'");
		
		Результат.Вставить("Статус", 			Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено);
		Результат.Вставить("СтатусКомментарий", СтатусКомментарий);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьЗаявленияТребующиеНапоминанияПозжеСПрошедшимСроком()
	
	Заявления = ХранилищеОбщихНастроек.Загрузить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже());
	
	Если Заявления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество 		= Заявления.Количество();
	ТекущаяСтрока 	= 0;

	Пока ТекущаяСтрока <= Количество - 1 Цикл
		
		Если Заявления[ТекущаяСтрока].Дата < ТекущаяДатаСеанса() Тогда
			Заявления.Удалить(ТекущаяСтрока);
			Количество = Количество - 1;
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + 1;
		КонецЕсли;
		
	Конеццикла; 
	
	ХранилищеОбщихНастроек.Сохранить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже(), , Заявления);

КонецПроцедуры

Функция ЗаявленияТребующиеНапоминанияПозже() Экспорт
	
	ОчиститьЗаявленияТребующиеНапоминанияПозжеСПрошедшимСроком();
	Заявления = ХранилищеОбщихНастроек.Загрузить(ОбработкаЗаявленийАбонента.КлючЗаявленийТребующихНапоминанияПозже());
	
	Если Заявления = Неопределено Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Заявления.ВыгрузитьКолонку("Заявление");
	КонецЕсли;

КонецФункции

Функция ОбновитьДанныеДолговременногоТокена(ДолговременныйТокен, ИдентификаторСертификата, Знач СпособПодтверждения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СпособПодтверждения = Неопределено Тогда
		СпособПодтверждения = Перечисления.СпособыПодтвержденияКриптоопераций.СессионныйТокен;
	КонецЕсли;
	
	Если СпособПодтверждения = Перечисления.СпособыПодтвержденияКриптоопераций.ДолговременныйТокен Тогда
		ИмяВеткиХранения				= СервисКриптографииСлужебный.ИмяНастройкиДлительногоМаркерБезопасностиСертификата(ИдентификаторСертификата);
		ДлительныйМаркерБезопасности 	= ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИмяВеткиХранения, "ДлительныйМаркерБезопасности", Ложь);
		
		Если ДлительныйМаркерБезопасности = Неопределено Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ИмяВеткиХранения, ДолговременныйТокен, "ДлительныйМаркерБезопасности"); 
		КонецЕсли;
		
		ЭлектроннаяПодписьВМоделиСервиса.УстановитьСвойстваРасшифрованияПодписания(ИдентификаторСертификата);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции	

Функция ЭтоРуководитель(Заявление) Экспорт
	
	Возврат ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоРуководитель(Заявление);
	
КонецФункции

Функция ЭтоБюджетополучатель(Заявление) Экспорт
	
	Возврат Заявление.ЭтоБюджетополучатель;
	
КонецФункции

Функция СертификатИзЗаявления(ДокументЗаявление) Экспорт
	
	Если ТипЗнч(ДокументЗаявление) = Тип("ДанныеФормыСтруктура") Тогда
		ЗаявлениеСсылка = ДокументЗаявление.Ссылка;
	Иначе
		ЗаявлениеСсылка = ДокументЗаявление;
	КонецЕсли;
	
	Если ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное Тогда
		Сертификат = ЗаявлениеСсылка.РеквизитыСертификата.Получить();
	Иначе
		Сертификат = ЗаявлениеСсылка.Сертификат.Получить();
	КонецЕсли;
	
	Возврат Сертификат;
		
КонецФункции

Функция ЭтоПоставляемыйСерверОблачнойПодписи(УчетнаяЗаписьОблачнойПодписи) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьОблачнойПодписи) Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		ДанныеУчетнойЗаписи = МодульСервисКриптографииDSS.ПолучитьВсеУчетныеЗаписи(УчетнаяЗаписьОблачнойПодписи);
		Если ДанныеУчетнойЗаписи.Количество() > 0 Тогда
			Результат = ЗначениеЗаполнено(ДанныеУчетнойЗаписи[0].ВнутреннийИдентификатор);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоИнтеграцияСБанком() Экспорт

	Возврат ОбработкаЗаявленийАбонента.ЭтоИнтеграцияСБанком();
	
КонецФункции

Функция МЧДЗагружена(МЧД) Экспорт
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	Если ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		Загружена =
			МЧД.ФайлВыгрузки.Получить() <> Неопределено
			И МЧД.ЭлектроннаяПодпись.Получить() <> Неопределено;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует()
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ПараметрыВозврата = Новый Структура;
		ПараметрыВозврата.Вставить("СформироватьФайлДоверенностиПриОтсутствии", Ложь);
		МассивФайлов = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(МЧД, ПараметрыВозврата);
		Загружена = МассивФайлов <> Неопределено И МассивФайлов.Количество() >= 2;
		
	Иначе
		Загружена =
			МЧД.ФайлВырузки.Получить() <> Неопределено
			И МЧД.ЭлектроннаяПодпись.Получить() <> Неопределено;
	КонецЕсли;
	
	Возврат Загружена;
	
КонецФункции

Функция ДополнитьОшибкуМЧД(МЧД, ТекстОшибки) Экспорт
	
	Ошибка = Строка(МЧД) + НСтр("ru = ' не может быть %1, поскольку ';
								|en = ' не может быть %1, поскольку '") + ТекстОшибки;
	
	Если ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		Ошибка = СтрШаблон(Ошибка, НСтр("ru = 'выбрано';
										|en = 'выбрано'"));
	Иначе
		Ошибка = СтрШаблон(Ошибка, НСтр("ru = 'выбрана';
										|en = 'выбрана'"));
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

Функция ПолучитьФайлыМЧД(МЧД, ВладелецЭЦПИНН, ВладелецЭЦПСНИЛС) Экспорт
	
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦБСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ = "МашиночитаемыеДоверенностиЦБ";
		ТипМЧДЦБ = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенностиЦБ);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Доверенность", Неопределено);
	
	Доверенность = Новый Структура;
	Доверенность.Вставить("МЧД", Неопределено);
	Доверенность.Вставить("ИмяМЧД", "");
	Доверенность.Вставить("АдресМЧД", "");
	Доверенность.Вставить("РазмерМЧД", 0);
	Доверенность.Вставить("ИмяПодписи", "");
	Доверенность.Вставить("АдресПодписи", "");
	Доверенность.Вставить("РазмерПодписи", 0);
	
	Если МЧД  = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяТипаСправочникаМашиночитаемыеДоверенности = "";
	Если ДокументооборотСКОКлиентСервер.ПодсистемаЦПРРМЧДСуществует() Тогда
		ИмяТипаСправочникаМашиночитаемыеДоверенности = "МашиночитаемыеДоверенности";
	КонецЕсли;
	
	Если ТипЗнч(МЧД) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Данные = КонтекстЭДОСервер.ДанныеУПУПИзИнформационнойБазы(МЧД);
		
		Если Данные.Свойство("ПредставительФизическоеЛицо") 
			И Данные.Свойство("СотрудникПредставителя_СНИЛС") 
			И ЗначениеЗаполнено(Данные.СотрудникПредставителя_СНИЛС) 
			И Данные.СотрудникПредставителя_СНИЛС <> ВладелецЭЦПСНИЛС Тогда
			
			ТекстОшибки = НСтр("ru = 'СНИЛС представителя %1 в УПУП отличается от СНИЛС владельца эл. подписи %2 в заявлении';
								|en = 'СНИЛС представителя %1 в УПУП отличается от СНИЛС владельца эл. подписи %2 в заявлении'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Данные.СотрудникПредставителя_СНИЛС, ВладелецЭЦПСНИЛС);
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, ТекстОшибки);
			Возврат Результат;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		Для каждого ПредставительМЧД Из МЧД.Представители Цикл
			ПредставительРеквизиты = ПредставительМЧД.ПредставительРеквизиты.Получить();
			СовпадаетИННФЛ = Неопределено;
			ПредставительФЛ_ИНН = "";
			
			Если ТипЗнч(ПредставительРеквизиты) = Тип("Структура")
				ИЛИ ТипЗнч(ПредставительРеквизиты) = Тип("ФиксированнаяСтруктура") Тогда
				
				ПредставительЭтоОрганизация = ПредставительРеквизиты.Свойство("ИНН")
					И ЗначениеЗаполнено(ПредставительРеквизиты.ИНН);
				ПредставительФЛ_ИНН = ?(ПредставительРеквизиты.Свойство("ИННФЛ"), ПредставительРеквизиты.ИННФЛ, "");
				СовпадаетИННФЛ =
					НЕ ПредставительЭтоОрганизация И ПредставительФЛ_ИНН = ВладелецЭЦПИНН
					ИЛИ ПредставительЭтоОрганизация;
				Если СовпадаетИННФЛ Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если СовпадаетИННФЛ = Ложь Тогда
			Если МЧД.Представители.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru = 'ИНН представителя %1 в МЧД отличается от ИНН владельца эл. подписи %2 в заявлении';
									|en = 'ИНН представителя %1 в МЧД отличается от ИНН владельца эл. подписи %2 в заявлении'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПредставительФЛ_ИНН, ВладелецЭЦПИНН);
			Иначе
				ТекстОшибки = НСтр("ru = 'ИНН представителей в МЧД отличаются от ИНН владельца эл. подписи %1 в заявлении';
									|en = 'ИНН представителей в МЧД отличаются от ИНН владельца эл. подписи %1 в заявлении'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецЭЦПИНН);
			КонецЕсли;
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		ПредставительЭтоОрганизация = ТипЗнч(МЧД.Представитель) = Тип("СправочникСсылка.Организации");
		СовпадаетИННФЛ = 
			НЕ ПредставительЭтоОрганизация И МЧД.ПредставительФЛ_ИНН = ВладелецЭЦПИНН
			ИЛИ ПредставительЭтоОрганизация; 
		
		Если НЕ СовпадаетИННФЛ Тогда
			ТекстОшибки = НСтр("ru = 'ИНН представителя %1 в МЧД отличается от ИНН владельца эл. подписи %2 в заявлении';
								|en = 'ИНН представителя %1 в МЧД отличается от ИНН владельца эл. подписи %2 в заявлении'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, МЧД.ПредставительФЛ_ИНН, ВладелецЭЦПИНН);
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, ТекстОшибки);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Доверенность.МЧД = МЧД;
	
	Если ЗначениеЗаполнено(ИмяТипаСправочникаМашиночитаемыеДоверенности)
		И ТипЗнч(МЧД) = Тип("СправочникСсылка." + ИмяТипаСправочникаМашиночитаемыеДоверенности) Тогда
		
		ПараметрыВозврата = Новый Структура;
		ПараметрыВозврата.Вставить("СформироватьФайлДоверенностиПриОтсутствии", Ложь);
		ПараметрыВозврата.Вставить("ИгнорироватьОтсутствиеФайлаДоверенности", 	Истина);
		МассивФайлов = ДокументооборотСКОВызовСервера.ВыгрузитьМЧДЕдиногоФормата(МЧД, ПараметрыВозврата);
		Если МассивФайлов = Неопределено ИЛИ МассивФайлов.Количество() = 0 Тогда
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, НСтр("ru = 'не удалось получить файл выгрузки доверенности';
																|en = 'не удалось получить файл выгрузки доверенности'"));
			Возврат Результат;
			
		Иначе
			Доверенность.ИмяМЧД 	= МассивФайлов[0].Имя;
			Доверенность.АдресМЧД 	= МассивФайлов[0].Адрес;
			Доверенность.РазмерМЧД 	= ПолучитьИзВременногоХранилища(МассивФайлов[0].Адрес).Размер();
		КонецЕсли;
		
		Если МассивФайлов.Количество() < 2 Тогда
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, НСтр("ru = 'не удалось получить файл подписи доверенности';
																|en = 'не удалось получить файл подписи доверенности'"));
			Возврат Результат;
			
		Иначе
			Доверенность.ИмяПодписи 	= МассивФайлов[1].Имя;
			Доверенность.АдресПодписи 	= МассивФайлов[1].Адрес;
			Доверенность.РазмерПодписи 	= ПолучитьИзВременногоХранилища(МассивФайлов[1].Адрес).Размер();
		КонецЕсли;
		
	Иначе
		Файл = ФайлВыгрузкиМЧД(МЧД);
		
		Если Файл = Неопределено Тогда
			Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, НСтр("ru = 'не удалось получить файл выгрузки доверенности';
																|en = 'не удалось получить файл выгрузки доверенности'"));
			Возврат Результат;
		Иначе
			Доверенность.ИмяМЧД    = Файл.Имя;
			Доверенность.АдресМЧД  = Файл.Адрес;
			Доверенность.РазмерМЧД = Файл.Размер;
		КонецЕсли;
		
		Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС")
			ИЛИ ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр")
			ИЛИ ТипЗнч(МЧД) = ТипМЧДЦБ Тогда
			
			Файл = ФайлыПодписиМЧД(МЧД);
			
			Если Файл = Неопределено Тогда
				Результат.ТекстОшибки = ДополнитьОшибкуМЧД(МЧД, НСтр("ru = 'не удалось получить файл подписи доверенности';
																	|en = 'не удалось получить файл подписи доверенности'"));
				Возврат Результат;
			Иначе
				Доверенность.ИмяПодписи    = Файл.Имя;
				Доверенность.АдресПодписи  = Файл.Адрес;
				Доверенность.РазмерПодписи = Файл.Размер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	Результат.Доверенность = Доверенность;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлыПодписиМЧД(Доверенность) Экспорт
	
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		// Нет отсоединенной подписи
		Возврат Неопределено;
	КонецЕсли;
	
	МЧДЗагружена = МЧДЗагружена(Доверенность);
	Если МЧДЗагружена Тогда
		
		ДвДанные = Доверенность.ЭлектроннаяПодпись.Получить();
		Адрес    = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
		Имя      = ИмяПодписиМЧД(Доверенность);
		
		Файл = Новый Структура;
		Файл.Вставить("Адрес",  Адрес);
		Файл.Вставить("Размер", ДвДанные.Размер());
		Файл.Вставить("Имя",    Имя);
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		
		Файл = ФайлыОтправленнойМЧД(
			Доверенность, 
			Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП, 
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		
		Файл = ФайлыОтправленнойМЧДРР(Доверенность, , Истина);
		
	КонецЕсли;
	
	Возврат Файл;

КонецФункции

Функция ФайлВыгрузкиМЧД(Доверенность) Экспорт
	
	МЧДЗагружена = МЧДЗагружена(Доверенность);
	Если МЧДЗагружена Тогда
		
		Если ТипЗнч(Доверенность) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
			ДвДанные = Доверенность.ФайлВыгрузки.Получить();
		Иначе
			ДвДанные = Доверенность.ФайлВырузки.Получить();
		КонецЕсли;
		Адрес    = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
		
		Файл = Новый Структура;
		Файл.Вставить("Адрес",  Адрес);
		Файл.Вставить("Имя",    Доверенность.ИмяФайлаВыгрузки);
		Файл.Вставить("Размер", ДвДанные.Размер());
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФНС") Тогда
		
		Файл = ФайлыОтправленнойМЧД(
			Доверенность, 
			Перечисления.ТипыТранспортныхСообщений.ПредставлениеНП,
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Представление);
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиРаспределенныйРеестр") Тогда
		
		Файл = ФайлыОтправленнойМЧДРР(Доверенность, Истина);
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС") Тогда
		
		Файл = ФайлыОтправленнойМЧДФСС(Доверенность);
		
	ИначеЕсли ТипЗнч(Доверенность) = Тип("ДокументСсылка.УведомлениеОПредоставленииПолномочийПредставителю") Тогда
		
		Файл = ФайлыОтправленнойМЧД(
			Доверенность, 
			Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР,
			Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
		
	КонецЕсли;
	
	Возврат Файл;

КонецФункции

Функция ФайлыОтправленнойМЧДРР(МЧД, НужнаМЧД = Ложь, НужнаПодпись = Ложь) Экспорт
	
	Если НужнаМЧД Тогда
		ДвДанные = МЧД.ФайлВырузки.Получить();
		ИмяФайла = МЧД.ИмяФайлаВыгрузки;
	ИначеЕсли НужнаПодпись Тогда
		ДвДанные = МЧД.ЭлектроннаяПодпись.Получить();
		ИмяФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(
			МЧД.ИмяФайлаВыгрузки).ИмяБезРасширения + "_SGN_"
			+ нрег(Строка(Новый УникальныйИдентификатор())) + ".sgn";
	КонецЕсли;
	
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
		
		Файл = Новый Структура;
		Файл.Вставить("Адрес",  Адрес);
		Файл.Вставить("Имя",    ИмяФайла);
		Файл.Вставить("Размер", ДвДанные.Размер());
		
		Возврат Файл;
		
	КонецЕсли;
	
КонецФункции

Функция ФайлыОтправленнойМЧД(МЧД, ТипСообщения, ТипыСодержимого) Экспорт
	
	ЦиклОбмена = ДокументооборотСКОВызовСервера.ПолучитьПоследнийЦиклОбмена(МЧД);
	Если ЦиклОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Сообщения = ДокументооборотСКОВызовСервера.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, ТипСообщения);
	Если Сообщения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Строки = Сообщения.НайтиСтроки(Новый Структура("Тип", ТипСообщения));
	
	Если Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТранспортноеСообщение = Строки[0];
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Вложения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(
		ТранспортноеСообщение, 
		Истина, 
		ТипыСодержимого, 
		, 
		Истина);
		
	Если Вложения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Вложение Из Вложения Цикл
		
		Файл = Новый Структура;
		Файл.Вставить("Адрес",  Вложение.Адрес);
		Файл.Вставить("Имя",    Вложение.ИмяФайла);
		Файл.Вставить("Размер", Вложение.Размер);
		
		Возврат Файл;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФайлыОтправленнойМЧДФСС(МЧД) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Отправка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(МЧД);
	
	Если ЗначениеЗаполнено(Отправка) Тогда
		
		ДвДанные = Отправка.ПодписанныйПакет.Получить();
		Если ДвДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
		
		ИмяФайла = Отправка.ИмяФайлаПакета;
		
		Файл = Новый Структура;
		Файл.Вставить("Адрес",  Адрес);
		Файл.Вставить("Имя",    ИмяФайла);
		Файл.Вставить("Размер", ДвДанные.Размер());
		
		Возврат Файл;
		
	Иначе
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, "Статус, НомерДоверенности, ЭлектроннаяПодпись");
		Если РеквизитыОбъекта.Статус = Перечисления.СтатусыМашиночитаемойДоверенностиКО.Подписано Тогда
			ДанныеПодписанногоЗапросаSOAP = РеквизитыОбъекта.ЭлектроннаяПодпись.Получить();
			Если ДанныеПодписанногоЗапросаSOAP <> Неопределено Тогда
				ДвДанные = ДокументооборотСКОВызовСервера.ИзвлечьДанныеПодписаннойВыгрузкиМЧДФСС(
					ДанныеПодписанногоЗапросаSOAP);
				Если ДвДанные <> Неопределено Тогда
					Адрес = ПоместитьВоВременноеХранилище(ДвДанные, Новый УникальныйИдентификатор);
					
					ИмяФайла = "P_" + РеквизитыОбъекта.НомерДоверенности + ".xml";
					
					Файл = Новый Структура;
					Файл.Вставить("Адрес",  Адрес);
					Файл.Вставить("Имя",    ИмяФайла);
					Файл.Вставить("Размер", ДвДанные.Размер());
					
					Возврат Файл;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИмяПодписиМЧД(МЧД) Экспорт
	
	Расширение = "sgn";
	Части = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(МЧД.ИмяФайлаВыгрузки);
	GUID = ВРЕГ(Строка(Новый УникальныйИдентификатор));
	Имя  = Части.ИмяБезРасширения + "_SGN_" + GUID + "." + Расширение;
	
	Возврат Имя;

КонецФункции

Функция ДобавитьПользователей1ПРежимаВУчетнуюЗаписьИзЗаявления(ДокументЗаявление, СсылкаУчетнаяЗапись) Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.ДобавитьПользователей1ПРежимаВУчетнуюЗаписьИзЗаявления(ДокументЗаявление, СсылкаУчетнаяЗапись);
	
КонецФункции

Функция АдресЗаявленияПо1СОтчетности(
		ДокументЗаявление, 
		ТекстЗапросаНаСертификат,
		ИдентификаторАбонента,
		АлгоритмКонтейнераКлючей = Неопределено) Экспорт
	
	Если ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоЗаявлениеНаИзменение(ДокументЗаявление) Тогда
		
		АдресЗаявления = ОбработкаЗаявленийАбонента.ЗаявлениеСформироватьЗаявлениеНаИзменение(
			ДокументЗаявление, 
			ТекстЗапросаНаСертификат, 
			ИдентификаторАбонента,
			АлгоритмКонтейнераКлючей);
			
		Имя = "Заявление_на_изменение";
			
	Иначе
		
		АдресЗаявления = ОбработкаЗаявленийАбонента.ЗаявлениеСформироватьЗаявлениеНаРегистрацию(
			ДокументЗаявление, 
			ТекстЗапросаНаСертификат, 
			ИдентификаторАбонента,
			АлгоритмКонтейнераКлючей);
			
		Имя = "Заявление_на_подключение";
			
	КонецЕсли;
	
	ПрисоединенныйФайл = ПрисоединенныйФайлЗаявления(
		ДокументЗаявление, 
		АдресЗаявления,
		Имя);
	
	Результат = Новый Структура();
	Результат.Вставить("АдресЗаявления", АдресЗаявления);
	Результат.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
	
	Возврат Результат;
			
КонецФункции

Функция ПрисоединенныйФайлЗаявления(
		ДокументЗаявление, 
		Адрес,
		Имя,
		Расширение = "xml") Экспорт
	
	КонтекстЭДОСервер  = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если ТипЗнч(ДокументЗаявление) = Тип("ДокументСсылка.ЗаявлениеАбонентаСпецоператораСвязи") Тогда
		
		ДокументОбъект = ДокументЗаявление.ПолучитьОбъект();
		ПрисоединенныйФайл = КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(ДокументОбъект, Адрес, Имя, "xml");
		ДокументОбъект.Записать();
		
	Иначе
		
		ПрисоединенныйФайл = КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(ДокументЗаявление, Адрес, Имя, "xml");
		
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
			
КонецФункции

Функция ИдентификаторАбонентаПоОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	// Получение идентификатора абонента
	ИдентификаторАбонента = "";
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	УчетнаяЗаписьОбмена = КонтекстЭДОСервер.НастройкиУчетнойЗаписиОрганизации(Организация);
	Если УчетнаяЗаписьОбмена <> Неопределено Тогда
		ИдентификаторАбонента = Строка(УчетнаяЗаписьОбмена.ИдентификаторАбонента);
		ИдентификаторСпецоператора = Строка(УчетнаяЗаписьОбмена.ИдентификаторСпецоператора);
		ДлинаИдентификатораСпецоператора = СтрДлина(ИдентификаторСпецоператора);
		ПрефиксИдентификатораАбонента = Лев(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора);
		
		Если ЗначениеЗаполнено(ИдентификаторСпецоператора) И нрег(ПрефиксИдентификатораАбонента) = нрег(ИдентификаторСпецоператора) Тогда
			ИдентификаторАбонента = Сред(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора + 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторАбонента;
	
КонецФункции

Функция ПолеСертификата_2_5_4_8(АдресЮридический) Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_8(АдресЮридический);
	
КонецФункции

Функция ПолеСертификата_2_5_4_7(АдресЮридический) Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_7(АдресЮридический);
	
КонецФункции

Функция ПолеСертификата_2_5_4_9(АдресЮридический) Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_9(АдресЮридический);
	
КонецФункции

Процедура ЗаявлениеСформироватьАдресДляЗапросаНаСертификатКвалифицированный(ДокументЗаявление, ПараметрыНовогоСертификата) Экспорт
	
	РеквизитыСертификата = ДокументЗаявление.РеквизитыСертификата.Получить();
	
	Если ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение 
		И ДокументЗаявление.ЭтоУдаленноеПереизданиеСертификата
		И ЗначениеЗаполнено(ДокументЗаявление.АдресЮридический_JSON) Тогда
		
		localityName = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_7(ДокументЗаявление.АдресЮридический_JSON);
		ПараметрыНовогоСертификата.Добавить("2.5.4.7", localityName); // поле L
		
		stateOrProvinceName = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_8(ДокументЗаявление.АдресЮридический_JSON);
		ПараметрыНовогоСертификата.Добавить("2.5.4.8", stateOrProvinceName); // поле S
		
		streetAddress = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_9(ДокументЗаявление.АдресЮридический_JSON);
		ПараметрыНовогоСертификата.Добавить("2.5.4.9", streetAddress);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыСертификата)
		И ДокументЗаявление.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		
		// Здесь тип сертификата - СертификатКриптографии
		
		ОбработкаЗаявленийАбонентаКлиентСервер.ПеренестиСвойстваСертификатаВЗапрос("OID2_5_4_8", ПараметрыНовогоСертификата, РеквизитыСертификата);
		ОбработкаЗаявленийАбонентаКлиентСервер.ПеренестиСвойстваСертификатаВЗапрос("OID2_5_4_7", ПараметрыНовогоСертификата, РеквизитыСертификата);
		ОбработкаЗаявленийАбонентаКлиентСервер.ПеренестиСвойстваСертификатаВЗапрос("OID2_5_4_9", ПараметрыНовогоСертификата, РеквизитыСертификата);
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ДокументЗаявление.АдресЮридический) Тогда
		
		localityName = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_7(ДокументЗаявление.АдресЮридический);
		ПараметрыНовогоСертификата.Добавить("2.5.4.7", localityName); // поле L
		
		stateOrProvinceName = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_8(ДокументЗаявление.АдресЮридический);
		ПараметрыНовогоСертификата.Добавить("2.5.4.8", stateOrProvinceName); // поле S
		
		streetAddress = ОбработкаЗаявленийАбонента.ПолеСертификата_2_5_4_9(ДокументЗаявление.АдресЮридический);
		ПараметрыНовогоСертификата.Добавить("2.5.4.9", streetAddress);
		
	Иначе
		
		ЭтоЮридическоеЛицо = СтрДлина(ДокументЗаявление.ИНН) = 10;
	
		ДокументМассив = ОбработкаЗаявленийАбонента.РазобратьСтрокуАдреса(ДокументЗаявление.АдресЮридический, ",");
		
		ЭтоЮридическоеЛицо = СтрДлина(ДокументЗаявление.ИНН) = 10;
		Если ЭтоЮридическоеЛицо Тогда
			Квартира = ?(ДокументМассив.Количество() = 10, ДокументМассив[9], "");
			ПараметрыНовогоСертификата.Добавить("2.5.4.9", СокрЛП(ДокументМассив[6] +" " +ДокументМассив[7] +" " + ДокументМассив[8] +" " + Квартира));
		КонецЕсли;
			
		Если ПустаяСтрока(ДокументМассив[4]) Тогда
			номер = 5; // населенный пункт
		Иначе
			номер = 4; // город
		КонецЕсли;
		
		НаселенныйПункт = ДокументМассив[номер];
		ПараметрыНовогоСертификата.Добавить("2.5.4.7", НаселенныйПункт); // поле L
		
		Регион = ОбработкаЗаявленийАбонента.КодИНазваниеРегионаДляСертификата(ДокументМассив[2]);
		ПараметрыНовогоСертификата.Добавить("2.5.4.8", Регион); // поле S
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийПользовательЭтоРуководитель(Организация, Знач Пользователь = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТекущееФизЛицо = Мультирежим.ФизЛицоПоПользователюИзСправочникаПользователи(Пользователь);

	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		Руководитель = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
		Результат = Руководитель = ТекущееФизЛицо;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗапретВыпускаСертификатаНаСотрудникаВступилВСилу() Экспорт

	Возврат ТекущаяДатаСеанса() >= Дата(2023, 9, 1);

КонецФункции

Функция ЗаполнитьСвойстваСертификатаСТокена(Реквизиты, Контейнер, ПроверятьЧтоПодходит) Экспорт
	
	ДвДанные = ПолучитьИзВременногоХранилища(Контейнер.Адрес);
	
	СвойстваСертификата = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСвойстваСертификата(ДвДанные);
	Контейнер.СерийныйНомер = СвойстваСертификата.СерийныйНомер;
	
	Сертификат = Новый СертификатКриптографии(ДвДанные);
	
	Контейнер.Субъект = Сертификат.Субъект;
	
	Контейнер.ДатаНачала = Сертификат.ДатаНачала;
	Контейнер.ДатаОкончания = Сертификат.ДатаОкончания;
	
	Если ПроверятьЧтоПодходит Тогда
		
		ЭтоСертификатВладельца = ОбработкаЗаявленийАбонентаКлиентСервер.ЭтоСертификатВладельца(
			Реквизиты, 
			Сертификат.Субъект);
	
		Контейнер.Подходит = ЭтоСертификатВладельца;
		
	Иначе
		
		Контейнер.Подходит = Истина;
		
	КонецЕсли;
	
	Возврат Контейнер;
	
КонецФункции

Функция НазваниеРегионаПоКоду(КодРегиона) Экспорт
	
	Возврат ОбработкаЗаявленийАбонентаПовтИсп.НазваниеРегионаПоКоду(КодРегиона);
	
КонецФункции

Функция КодИНазваниеРегионаДляСертификата(КодРегиона) Экспорт
	
	Возврат ОбработкаЗаявленийАбонентаПовтИсп.КодИНазваниеРегионаДляСертификата(КодРегиона);
	
КонецФункции

Функция КодРегионаПоАдресу(Адрес) Экспорт

	Возврат ОбработкаЗаявленийАбонента.КодРегионаПоАдресу(Адрес);
	
КонецФункции

Функция ПолучитьДанныеСотрудника(ВидВладельцаЭЦП, ДанныеОрганизации, Сотрудник) Экспорт
	
	Возврат ОбработкаЗаявленийАбонента.ПолучитьДанныеСотрудника(ВидВладельцаЭЦП, ДанныеОрганизации, Сотрудник)
	
КонецФункции

Функция ОтправкаРаспискиМожетВыпастьНаНерабочиеДни() Экспорт
	
	Сегодня = НачалоДня(ТекущаяДатаСеанса());
	
	Результат = 
		ТребованияФНСПовтИсп.ДатаПлюсДниПоКалендарю(Сегодня, 2).Дата <> ТребованияФНСПовтИсп.ДатаПлюсДни(Сегодня, 2, Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция СертификатСкороИстекает(ДействителенПо) Экспорт
	
	Сегодня = ТекущаяДатаСеанса();
	ЧетыреДня = 5*24*60*60;
	
	Если ДействителенПо - Сегодня < ЧетыреДня Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоУдаленноеПереизданиеСертификата(ДокументЗаявление) Экспорт

	Возврат ДокументЗаявление.ЭтоУдаленноеПереизданиеСертификата;

КонецФункции

Функция АдресПоBase64(Base64, УникальныйИдентификатор) Экспорт
	
	ДвДанные = Base64Значение(Base64);
	Возврат ПоместитьВоВременноеХранилище(ДвДанные, УникальныйИдентификатор);

КонецФункции

Функция КодРегионаПоАдресуJSON(Адрес) Экспорт
	
	Попытка
		Регион = РаботаСАдресами.РегионАдресаКонтактнойИнформации(Адрес);
	Исключение
		Возврат 0;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Регион) Тогда
		КодРегиона = АдресныйКлассификатор.КодРегионаПоНаименованию(Регион);
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			Возврат КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ВладелецСертификатаИзBase64(Base64) Экспорт
	
	ДвДанные = Base64Значение(Base64);
	Сертификат = Новый СертификатКриптографии(ДвДанные);
	
	Возврат Сертификат.Субъект;
	
КонецФункции

Функция ТикетАутентификацииНаПорталеПоддержки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецТикета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВладелецТикета();
	
	МодульИнтернетПоддержкаПользователей = ЭлектронныйДокументооборотСКонтролирующимиОрганами.МодульИнтернетПоддержкаПользователей();
	
	Если МодульИнтернетПоддержкаПользователей = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		РезультатПолученияТикета = МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
		
		Возврат РезультатПолученияТикета;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
