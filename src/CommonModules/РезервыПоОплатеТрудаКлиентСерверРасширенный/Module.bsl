
#Область СлужебныйПрограммныйИнтерфейс

Процедура ВводНачисленийИнициализироватьСтрокиНачислений(Форма, СтрокиНачислений, ОписаниеТаблицы, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	Если Форма.ЭтоНачисление И Форма.НормативныйМетодБУ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	
	Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
		// Инициализируем поля показателей и их значений.
		Для СчетчикПоказателей = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы,, РежимРаботы) Цикл
			СтрокаНачислений["Показатель" + СчетчикПоказателей] = ПредопределенноеЗначение("Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка");
			СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] = 0;
			СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей] = Неопределено;
			СтрокаНачислений["Значение" + СчетчикПоказателей] = Неопределено;
		КонецЦикла;
		
		ВидРасчетаРезерва = СтрокаНачислений.ВидРасчетаРезерва;
		Если Не ЗначениеЗаполнено(ВидРасчетаРезерва) Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ВидРасчета = РезервыПоОплатеТрудаРасширенныйПовтИсп.НачислениеВидаРасчетаРезерва(ВидРасчетаРезерва);
		#Иначе
			ВидРасчета = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.НачислениеВидаРасчетаРезерва(ВидРасчетаРезерва);
		#КонецЕсли
		Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			ИнфоОВидеРасчетаРезерва = РезервыПоОплатеТрудаРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчетаРезерва(ВидРасчетаРезерва);
		#Иначе
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			ИнфоОВидеРасчетаРезерва = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчетаРезерва(ВидРасчетаРезерва);
		#КонецЕсли
		Если ИнфоОВидеРасчетаРезерва.ИспользоватьСобственнуюФормулуРасчета
			Или ИнфоОВидеРасчетаРезерва.ЭтоРасчетОтпуска Тогда
			ЗаполнитьЗначенияСвойств(ИнфоОВидеРасчета, ИнфоОВидеРасчетаРезерва);
		КонецЕсли;
		ИнфоОВидеРасчета.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать");
		
		СтрокаНачислений.ИспользованиеПериода = ИнфоОВидеРасчета.ИспользованиеПериода;
		ЗаполнитьПериодВСтрокеПоУмолчанию(Форма, ОписаниеТаблицы, СтрокаНачислений, СтрокаНачислений.ИспользованиеПериода);
		
		СтрокаНачислений.ФиксированнаяСумма = Не ИнфоОВидеРасчета.Рассчитывается;
		Если Не ИнфоОВидеРасчета.Рассчитывается Тогда 
			ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
			СтрокаНачислений["ТочностьПоказателя1"] = "ЧДЦ=2";
			Форма.Элементы[ИмяТаблицы + "Значение1"].ОграничениеТипа = ТипЧисло;
		КонецЕсли;
		
		Если СтрокаНачислений.Свойство("ВидВремени") Тогда
			Если ИнфоОВидеРасчета.Свойство("ВидВремени") Тогда
				СтрокаНачислений.ВидВремени = ИнфоОВидеРасчета.ВидВремени;
			Иначе
				СтрокаНачислений.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
		
		МаксимальноеЧислоПоказателей = ИнфоОВидеРасчета.КоличествоПостоянныхПоказателей;
		
		Если МаксимальноеЧислоПоказателей > ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы,, РежимРаботы) Тогда
			ТекстПредупреждения = ЗарплатаКадрыРасширенныйКлиентСервер.ТекстПредупрежденияОписаниеНачисленийИзменилось();
			ВызватьИсключение ТекстПредупреждения;
		Иначе
			СчетчикПоказателей = 1;
			СведенияСтрокиНачисленияЗависящегоОтСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияСтрокиНачисленияЗависящегоОтСтажа();
			СведенияСтрокиНачисленияЗависящегоОтСтажа.Сотрудник = Сотрудник;
			СведенияСтрокиНачисленияЗависящегоОтСтажа.ДатаСведений = ДатаСведений;
			Для Каждого СтрокаПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
				#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
					ПоказательИнфо = РезервыПоОплатеТрудаРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(СтрокаПоказателя.Показатель);
				#Иначе
					ПоказательИнфо = РезервыПоОплатеТрудаКлиентРасширенныйПовтИсп.СведенияОПоказателеРасчетаРезервов(СтрокаПоказателя.Показатель);
				#КонецЕсли 
				ЗарплатаКадрыРасширенныйКлиентСервер.ПодготовитьИнформациюОСтажевыхПоказателях(СведенияСтрокиНачисленияЗависящегоОтСтажа, ПоказательИнфо, РежимРаботы);
				Если Не СтрокаПоказателя.ИспользоватьПриРасчете Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
					Продолжить;
				КонецЕсли;
				СтрокаНачислений["Показатель" + СчетчикПоказателей] 			= СтрокаПоказателя.Показатель;
				СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] 	= ПоказательИнфо["Точность"];
				
				Если СтрокаНачислений.Свойство("ДопускаетсяНулевоеЗначение" + СчетчикПоказателей) Тогда
					СтрокаНачислений["ДопускаетсяНулевоеЗначение" + СчетчикПоказателей] = ПоказательИнфо.ДопускаетсяНулевоеЗначение;
				КонецЕсли;
				
				СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей]= ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
				Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = ПоказательИнфо.ТипПоказателяПриРасчете;
				
				СчетчикПоказателей = СчетчикПоказателей + 1;
			КонецЦикла;
			ЗарплатаКадрыРасширенныйКлиентСервер.ПоместитьВСтрокуНачисленийИнформациюОСтажевыхПоказателях(СтрокаНачислений, СведенияСтрокиНачисленияЗависящегоОтСтажа, РежимРаботы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПолученияДанныхЗаполненияДокумента() Экспорт
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	ДополнениеСтруктуры = Новый Структура("Резерв,ВидОперации,ДопПараметрыОтбора");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПараметров, ДополнениеСтруктуры);
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ОписаниеРасчетногоДокумента() Экспорт
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	ДополнениеСтруктуры = Новый Структура("Резерв, ВидОперации,
		|РасчетРезервовИмя, ОценочныеОбязательстваПоСотрудникамИмя, ОценочныеОбязательстваИмя,
		|РасчетРезервовКоманднаяПанельИмя, ОценочныеОбязательстваПоСотрудникамКоманднаяПанельИмя, ОценочныеОбязательстваКоманднаяПанельИмя");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Описание, ДополнениеСтруктуры);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеТаблицыРасчета(ДополнятьКоличествомПоказателей = Ложь, ЗаполнятьМаксимальнымКоличествоПоказателей = Ложь) Экспорт
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Если ДополнятьКоличествомПоказателей Тогда
		ОписаниеТаблицы.Вставить("КоличествоОтображаемыхПоказателей", 0);
		ОписаниеТаблицы.Вставить("КоличествоПоказателейРасчета",      0);
	КонецЕсли;
	Если ЗаполнятьМаксимальнымКоличествоПоказателей Тогда
		ОписаниеТаблицы.Вставить("КоличествоОтображаемыхПоказателей", МаксимальноеКоличествоПоказателей());
	КонецЕсли;
	ОписаниеТаблицы.Вставить("ИмяРеквизитаВидОперации",           "ВидОперации");
	ОписаниеТаблицы.Вставить("ИмяРеквизитаВидРасчетаРезерва",     "ВидРасчетаРезерва");
	ОписаниеТаблицы.Вставить("ЭтоРасчетРезервов",                 Истина);
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

Функция МаксимальноеКоличествоПоказателей() Экспорт
	
	Возврат РезервыПоОплатеТрудаРасширенныйВызовСервера.МаксимальноеКоличествоПоказателей();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПериодВСтрокеПоУмолчанию(Форма, ОписаниеТаблицы, СтрокаНачислений, ИспользованиеПериода)
	
	Если ОписаниеТаблицы.ИмяРеквизитаПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцНачисления = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод];
	Если ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
		Если Не ЗначениеЗаполнено(СтрокаНачислений.ПериодДействия) Тогда
			СтрокаНачислений.ПериодДействия = МесяцНачисления;
			Если СтрокаНачислений.Свойство("ПериодДействияСтрокой") Тогда
				ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(СтрокаНачислений, "ПериодДействия", "ПериодДействияСтрокой");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачала = НачалоМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДатаНачала) 
		И Не ЗначениеЗаполнено(СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаНачала]) Тогда
		СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаНачала] = ДатаНачала;
	КонецЕсли;
	ДатаОкончания = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаДатаОкончания) 
		И Не ЗначениеЗаполнено(СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания]) Тогда
		СтрокаНачислений[ОписаниеТаблицы.ИмяРеквизитаДатаОкончания] = ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет обновление табличной части Показатели вида расчета 
// после редактирования формулы (изменения состава показателей).
//
// Параметры:
//	- СведенияОПоказателяхФормулы - соответствие, ключ которого показатель, 
//			значение - структура сведений о показателях.
//	- Показатели - данные формы коллекция связанная с табличной частью показателей.
//
Процедура ОбновитьПоказателиПоФормуле(СведенияОПоказателяхФормулы, Показатели) Экспорт
	
	// запомнить старые
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.ИспользоватьПриРасчете Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	// записать новые
	ОтборСтрок = Новый Структура("Показатель");
	Для Каждого КлючИЗначение Из СведенияОПоказателяхФормулы Цикл
		Показатель = КлючИЗначение.Ключ;
		Если ЗначениеЗаполнено(Показатель) Тогда
			ОтборСтрок.Показатель = Показатель;
			НайденныеСтроки = Показатели.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИспользоватьПриРасчете = Истина;
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтрокиКУдалению, НайденныеСтроки[0]);
			Иначе
				НоваяСтрока = Показатели.Добавить();
				НоваяСтрока.Показатель = Показатель;
				НоваяСтрока.ИспользоватьПриРасчете = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удалить неиспользуемые старые показатели.
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
