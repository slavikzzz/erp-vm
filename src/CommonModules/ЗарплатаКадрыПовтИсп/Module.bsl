#Область СлужебныйПрограммныйИнтерфейс

// Возвращает ссылку на "Регистрацию в налоговом органе" по состоянию на дату.
//
// Параметры:
//  СтруктурнаяЕдиница	 - СправочникСсылка.ПодразделенияОрганизаций, 
//						   СправочникСсылка.Организации, 
//						   ОпределяемыйТип.ТерриторияВыполненияРабот  - структурная единица для получения регистрации в НО.
//  ДатаАктуальности	 - Дата                                       - дата, на которую будет получена регистрация.
// 
// Возвращаемое значение:
//  СправочникСсылка.РегистрацияВНалоговомОргане - ссылка на существующую регистрацию, либо ПустаяСсылка().
//
Функция РегистрацияВНалоговомОргане(СтруктурнаяЕдиница, Знач ДатаАктуальности = Неопределено) Экспорт
	
	МенеджерСтруктурнойЕдиницы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтруктурнаяЕдиница);
	
	Возврат МенеджерСтруктурнойЕдиницы.РегистрацияВНалоговомОргане(СтруктурнаяЕдиница, ДатаАктуальности);
	
КонецФункции

Функция ДатаВступленияВСилуНА(ИмяНА) Экспорт
	Возврат РегистрыСведений.ДатыВступленияВСилуНА.ДатаВступленияВСилуНА(ИмяНА);
КонецФункции

Функция ДействующийПользовательФизическогоЛица(ФизическоеЛицо) Экспорт
	
	Возврат ФизическиеЛицаЗарплатаКадры.ПользовательФизическогоЛица(ФизическоеЛицо, Истина);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КэшИнформацииОВидахРасчета() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// См. ЗарплатаКадры.ГоловнаяОрганизация.
Функция ГоловнаяОрганизация(Организация) Экспорт
	Возврат РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация);
КонецФункции

// См. ЗарплатаКадры.ЭтоЮридическоеЛицо.
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
КонецФункции

// Возвращает ссылку на валюту в которой происходит расчет заработной платы (рубль РФ).
// Номинирование тарифов, надбавок, выплата зарплаты допускается в любой валюте, 
// но расчеты выполняются в валюте учета зарплаты.
Функция ВалютаУчетаЗаработнойПлаты() Экспорт

	Возврат Справочники.Валюты.НайтиПоКоду("643");

КонецФункции

// Возвращает массив ссылок на виды документов удостоверяющих личность.
//
// Параметры:
//	ТолькоДляИностранныхГраждан - Булево - флаг, указывающий, будет ли проверка проходить 
//                                         только по документам иностранных граждан или нет.
//
// Возвращаемое значение:
//		Массив из Справочник.ВидыДокументовФизическихЛиц.Ссылка

Функция ВидыДокументовУдостоверяющихЛичностьФНС(ТолькоДляИностранныхГраждан = Ложь) Экспорт
	
	Если ТолькоДляИностранныхГраждан Тогда
		КодыДокументовСтрокой = УчетНДФЛ.КодыДопустимыхДокументовУдостоверяющихЛичностьИностранныхГраждан();
	Иначе
		КодыДокументовСтрокой = УчетНДФЛ.КодыДопустимыхДокументовУдостоверяющихЛичность();
	КонецЕсли;

	КодыДокументов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КодыДокументовСтрокой, ",", , Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыДокументов", КодыДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.КодМВД В(&КодыДокументов)";
	
	ВидыДокументов = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыДокументов.Добавить(Выборка.Ссылка);	
	КонецЦикла;	
	
	Возврат ВидыДокументов;
		
КонецФункции	

// Возвращает настройки формирования печатных форм.
//
// Возвращаемое значение:
// 	ФиксированнаяСтруктура - см. РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НастройкиПечатныхФорм()
//
Функция НастройкиПечатныхФорм() Экспорт
	
	НастройкиПечатныхФорм = РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НастройкиПечатныхФорм();
	Возврат Новый ФиксированнаяСтруктура(НастройкиПечатныхФорм);
	
КонецФункции

// Возвращает коллекцию элементов справочника ВидыКонтактнойИнформации с типом Адрес.
//
Функция ВидыРоссийскихАдресов() Экспорт
	
	РоссийскиеАдреса = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И ВидыКонтактнойИнформации.ТолькоНациональныйАдрес";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РоссийскиеАдреса.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла; 
	
	Возврат РоссийскиеАдреса;
	
КонецФункции

// Получает размер минимальной оплаты труда.
//
// Параметры:
//	ДатаАктуальности - дата, на которую нужно получить МРОТ.
//
// Возвращаемое значение:
//	число, размер МРОТ на дату, или Неопределено, если МРОТ на дату не определен.
//
Функция МинимальныйРазмерОплатыТрудаРФ(ДатаАктуальности) Экспорт
	
	Возврат РегистрыСведений.МинимальнаяОплатаТрудаРФ.ДанныеМинимальногоРазмераОплатыТрудаРФ(ДатаАктуальности)["Размер"];
	
КонецФункции	

Функция МаксимальныйПриоритетСостоянийСотрудника() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Увольнение", Перечисления.СостоянияСотрудника.Увольнение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудника.Порядок
	|ИЗ
	|	Перечисление.СостоянияСотрудника КАК СостоянияСотрудника
	|ГДЕ
	|	СостоянияСотрудника.Ссылка = &Увольнение";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Порядок;
КонецФункции	

// Проверяет принадлежность объекта метаданных к подсистемам. Проверка производится на вхождение
// в состав указанных подсистем и на вхождение в состав подсистем подчиненных указанным.
//
// Параметры:
//			ПолноеИмяОбъектаМетаданных 	- Строка, полное имя объекта метаданных (см. функцию НайтиПоПолномуИмени).
//			ИменаПодсистем				- Строка, имена подсистем, перечисленные через запятую.
//
// Возвращаемое значение:
//		Булево
//
Функция ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, ИменаПодсистем) Экспорт
	
	ЭтоОбъектПодсистемы = Ложь;
	
	МассивИменПодсистем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПодсистем);
	Для каждого ИмяПодсистемы Из МассивИменПодсистем Цикл
		
		МетаданныеПодсистемы = Метаданные.Подсистемы.Найти(ИмяПодсистемы);
		Если МетаданныеПодсистемы <> Неопределено Тогда
			ЭтоОбъектПодсистемы = ОбъектМетаданныхВключенВПодсистему(МетаданныеПодсистемы, ПолноеИмяОбъектаМетаданных);
		КонецЕсли;
		
		Если ЭтоОбъектПодсистемы Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ЭтоОбъектПодсистемы;
	
КонецФункции

// Проверяет вхождение объекта метаданных в подсистему. Рекурсивно проверяется вхождение
// объекта метаданных в подсистемы подчиненные указанной.
//
// Параметры:
//		МетаданныеПодсистемы	- Метаданные подсистемы.
//		МетаданныеОбъекта		- Метаданные объекта.
//
// Возвращаемое значение:
//		Булево
//
Функция ОбъектМетаданныхВключенВПодсистему(МетаданныеПодсистемы, ПолноеИмяОбъектаМетаданных)
	
	Возврат ЗарплатаКадрыПовтИсп.ОбъектыМетаданныхПодсистемы(МетаданныеПодсистемы.ПолноеИмя()).Получить(ПолноеИмяОбъектаМетаданных) = Истина;
	
КонецФункции

Функция ОбъектыМетаданныхПодсистемы(ПолноеИмяОбъектаМетаданныхПодсистемы) Экспорт
	
	СоставОбъектов = Новый Соответствие;
	ЗаполнитьОбъектыПодсистемы(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданныхПодсистемы), СоставОбъектов);
	
	Возврат СоставОбъектов;
	
КонецФункции

Процедура ЗаполнитьОбъектыПодсистемы(МетаданныеПодсистемы, КоллекцияИменОбъектов)
	
	Для Каждого ОбъектСостава Из МетаданныеПодсистемы.Состав Цикл
		
		Если ОбъектСостава <> Неопределено Тогда
			КоллекцияИменОбъектов.Вставить(ОбъектСостава.ПолноеИмя(), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаданныеПодчиненнойПодсистемы Из МетаданныеПодсистемы.Подсистемы Цикл
		ЗаполнитьОбъектыПодсистемы(МетаданныеПодчиненнойПодсистемы, КоллекцияИменОбъектов);
	КонецЦикла;
	
КонецПроцедуры

// Строит соответствие тарифов страховых взносов на ОПС по категориям застрахованных лиц. 
//
// Параметры:
//  ОтчетныйГод - Число - год, для которого следует определить тариф;
//
// Возвращаемое значение:
//  Соответствие, ключом которого является категория ЗЛ (ПеречислениеСсылка.КатегорииЗастрахованныхЛицДляПФР), 
//					а значением - структура с полями ПФРСтраховая и ПФРНакопительная.
//
Функция ТарифыВзносовПоКатегориямЗЛ(ОтчетныйГод) Экспорт

	Возврат ПерсонифицированныйУчет.ТарифыПоКатегориям(Дата(ОтчетныйГод, 1, 1))

КонецФункции 

// Строит соответствие кодов тарифов страховых взносов на ОПС кодам категорий застрахованных лиц. 
//
// Параметры:
//  ОтчетныйГод - Число - год, для которого следует определить тариф;
//
// Возвращаемое значение:
//  Соответствие, ключом которого является код категории ЗЛ (строка), а значением - код тарифа (строка).
//
Функция СоответствиеКодовТарифаКодамКатегорийЗастрахованных(ОтчетныйГод) Экспорт
	Возврат ПерсонифицированныйУчет.СоответствиеКодовТарифаКодамКатегорийЗастрахованных(ОтчетныйГод)
КонецФункции

Функция ДоступныеОрганизации() Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	ДоступныеОбъекты = Новый Структура("Организации,Филиалы");
	ДоступныеОбъекты.Филиалы = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка(
		"Справочник.Организации", Тип("СправочникСсылка.Организации"));
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	ДоступныеОбъекты.Организации = ОрганизацииФилиалов(ДоступныеОбъекты.Филиалы);
	
	Возврат ДоступныеОбъекты;
	
КонецФункции

Функция ОрганизацииФилиалов(Филиалы)
	
	Если ЗначениеЗаполнено(Филиалы) Тогда
		
		ЗапросПоОрганизациям = Новый Запрос;
		ЗапросПоОрганизациям.УстановитьПараметр("РазрешенныеФилиалы", Филиалы);
		
		ЗапросПоОрганизациям.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&РазрешенныеФилиалы)";
		
		УстановитьПривилегированныйРежим(Истина);
		Организации = ЗапросПоОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("ГоловнаяОрганизация");
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		Организации = Новый Массив;
	КонецЕсли;
	
	Возврат Организации;
	
КонецФункции

Функция ИмяКлиентскогоПриложения() Экспорт
	
	ИмяПриложения = "1C Enterprise 8.3";
	
	СтандартнаяОбработка = Истина;
	
	ЗарплатаКадрыПереопределяемый.ПриОпределенииИмениКлиентскогоПриложения(ИмяПриложения, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
		МодульКонфигурацииЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадры");
		МодульКонфигурацииЗарплатаКадры.ПриОпределенииИмениКлиентскогоПриложения(ИмяПриложения, СтандартнаяОбработка);
	КонецЕсли;
	
	Возврат ИмяПриложения;
	
КонецФункции

// Формирует соответствие статей расходов способам расчетов с физическими лицами.
//
//	Возвращаемое значение: Соответствие
//		Ключ 		- ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами
//		Значение 	- СправочникаСсылка.СтатьиРасходовЗарплата
//
Функция СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами() Экспорт

	СоответствиеСпособовРасчетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтатьиРасходовЗарплата.Ссылка, ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК Ссылка,
	|	СпособыРасчетовСФизическимиЛицами.Ссылка КАК СпособРасчетов
	|ИЗ
	|	Перечисление.СпособыРасчетовСФизическимиЛицами КАК СпособыРасчетовСФизическимиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиРасходовЗарплата КАК СтатьиРасходовЗарплата
	|		ПО СпособыРасчетовСФизическимиЛицами.Ссылка = СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами
	|ГДЕ
	|	СтатьиРасходовЗарплата.СпособРасчетовСФизическимиЛицами <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСпособовРасчетов.Вставить(Выборка.СпособРасчетов, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеСпособовРасчетов;

КонецФункции

Функция УОрганизацииЕстьФилиалы(Знач Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьФилиалы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЕстьОбособленныеПодразделения");
	
	Если ЕстьФилиалы Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
		
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьФилиал
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И Организации.Ссылка <> &ГоловнаяОрганизация";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЕстьФилиалы = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьФилиалы;
	
КонецФункции

Функция РегномерПФРЗаполнен(Знач Организация, Знач Дата = Неопределено) Экспорт
	Возврат ЗначениеЗаполнено(СЭДОФСС.СведенияОСтрахователе(Организация, "РегНомПФР", Дата).РегНомПФР);
КонецФункции

Функция ОбъектыЗарплатноКадровойБиблиотекиСДополнительнымиСвойствами() Экспорт
	
	ОбъектыСоСвойствами = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	
	КоллекцииОбъектов = Новый Структура;
	КоллекцииОбъектов.Вставить("Справочник", Метаданные.Справочники);
	КоллекцииОбъектов.Вставить("Документ", Метаданные.Документы);
	КоллекцииОбъектов.Вставить("ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	
	Для Каждого ОписаниеКоллекции Из КоллекцииОбъектов Цикл
		
		Для Каждого МетаданныеОбъекта Из ОписаниеКоллекции.Значение Цикл
			
			ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
			Если Не ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных) Тогда
				Продолжить;
			КонецЕсли; 
			
			ИмяНабораСвойств = ОписаниеКоллекции.Ключ + "_" + МетаданныеОбъекта.Имя;
			Если ИменаПредопределенных.Найти(ИмяНабораСвойств) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыСоСвойствами.Вставить(ПолноеИмяОбъектаМетаданных, ИмяНабораСвойств);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбъектыСоСвойствами;
	
КонецФункции

// Возвращает соответствие у которого Ключ содержит полное имя объекта метаданных,
// управляющего функциональными опциями, а значение- Массив полных имен метаданных
// функциональных опций которыми он управляет.
//
Функция ОбъектыУправляющиеФункциональнымиОпциями() Экспорт
	
	ОбъектыУправляющиеОпциями = Новый Соответствие;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если Не ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(ФункциональнаяОпция.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяХранения = ФункциональнаяОпция.Хранение.ПолноеИмя();
		Если СтрЧислоВхождений(ИмяХранения, ".") > 1 Тогда
			ИмяХранения = Лев(ИмяХранения, СтрНайти(ИмяХранения, ".", , , 2) - 1);
		КонецЕсли;
		
		КоллекцияОпций = ОбъектыУправляющиеОпциями.Получить(ИмяХранения);
		Если КоллекцияОпций = Неопределено Тогда
			КоллекцияОпций = Новый Массив;
		КонецЕсли;
		
		КоллекцияОпций.Добавить(ФункциональнаяОпция.ПолноеИмя());
		ОбъектыУправляющиеОпциями.Вставить(ИмяХранения, КоллекцияОпций);
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ОбъектыУправляющиеОпциями);
	
КонецФункции

// Возвращает соответствие с описанием объекта метаданных с дополнительными
// реквизитами (свойствами), управляемых значениями функциональных опций.
//
// Параметры:
//	ПолноеИмяФункциональнойОпции	- Строка, полное имя объектов метаданных
//										функциональная опция
//
// Возвращаемое значение:
//	Соответствие	-	*Ключ		- полное имя объекта метаданных
//						*Значение	- Имя предопределенной группы справочника
//										НаборыДополнительныхРеквизитовИСведений
//
Функция ОбъектыСДополнительнымиСвойствамиУправляемыеФункциональнымиОпциями(ПолноеИмяФункциональнойОпции) Экспорт
	
	ОбъектыЗарплатноКадровойБиблиотеки = ЗарплатаКадрыПовтИсп.ОбъектыЗарплатноКадровойБиблиотекиСДополнительнымиСвойствами();
	ОбъектыОпции = Новый Соответствие;
	
	ФункциональнаяОпция = Метаданные.НайтиПоПолномуИмени(ПолноеИмяФункциональнойОпции);
	Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
		
		Если Элемент.Объект <> Неопределено Тогда
			
			ПолноеИмяОбъекта = Элемент.Объект.ПолноеИмя();
			
			ОписаниеОбъекта = ОбъектыЗарплатноКадровойБиблиотеки.Получить(ПолноеИмяОбъекта);
			Если ОписаниеОбъекта <> Неопределено Тогда
				ОбъектыОпции.Вставить(ПолноеИмяОбъекта, ОписаниеОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыОпции;
	
КонецФункции

// Возвращает соответствие с описанием объекта метаданных с дополнительными
// реквизитами (свойствами) не управляемыми значениями функциональных опций.
//
// Возвращаемое значение:
//	Соответствие	-	*Ключ - полное имя объекта метаданных
//						*Значение - Имя предопределенной группы справочника
//									НаборыДополнительныхРеквизитовИСведений
//
Функция ОбъектыСДополнительнымиСвойствамиНеУправляемыеФункциональнымиОпциями() Экспорт
	
	ОбъектыЗарплатноКадровойБиблиотеки = ЗарплатаКадрыПовтИсп.ОбъектыЗарплатноКадровойБиблиотекиСДополнительнымиСвойствами();
	
	ОбъектыОпций = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыЗарплатноКадровойБиблиотеки);
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			
			Если Элемент.Объект <> Неопределено Тогда
				ОбъектыОпций.Удалить(Элемент.Объект.ПолноеИмя());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОбъектыОпций;
	
КонецФункции

Функция ОбъектыУправляемыеНесколькимиФункциональнымиОпциями() Экспорт
	
	ФункциональныеОпцииОбъектов = Новый Соответствие;
	ОбъектыКУдалению = Новый Соответствие;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если Не ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(ФункциональнаяОпция.ПолноеИмя()) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОбъектСостава Из ФункциональнаяОпция.Состав Цикл
			
			Если ОбъектСостава.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяОбъекта = ОбъектСостава.Объект.ПолноеИмя();
			Если СтрЧислоВхождений(ИмяОбъекта, ".") > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не СтрНачинаетсяС(ИмяОбъекта, "Справочник.")
				И Не СтрНачинаетсяС(ИмяОбъекта, "Документ.") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ФункциональныеОпцииОбъекта = ФункциональныеОпцииОбъектов.Получить(ИмяОбъекта);
			Если ФункциональныеОпцииОбъекта = Неопределено Тогда
				ФункциональныеОпцииОбъекта = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФункциональнаяОпция.ПолноеИмя());
				ОбъектыКУдалению.Вставить(ИмяОбъекта);
			Иначе
				ФункциональныеОпцииОбъекта.Добавить(ФункциональнаяОпция.ПолноеИмя());
				ОбъектыКУдалению.Удалить(ИмяОбъекта);
			КонецЕсли;
			
			ФункциональныеОпцииОбъектов.Вставить(ИмяОбъекта, ФункциональныеОпцииОбъекта);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОписаниеОбъекта Из ОбъектыКУдалению Цикл
		ФункциональныеОпцииОбъектов.Удалить(ОписаниеОбъекта.Ключ);
	КонецЦикла;
	
	Возврат ФункциональныеОпцииОбъектов;
	
КонецФункции

Функция НачисленияРКСН() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииРК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииСН)";
	Запрос.УстановитьПараметр("КатегорииРК", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииРК());
	Запрос.УстановитьПараметр("КатегорииСН", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииСН());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура("НачисленияРК, НачисленияСН");
	Результат.НачисленияРК = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Результат.НачисленияСН = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
КонецФункции

// Возвращает описание полей ключа записи и ключевых полей строки набора записей,
// используемых в режимах замещения Обновление, Слияние, Удаление.
//
// Параметры:
//  ПолноеИмяРегистра - Строка - полное имя регистра.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//   * СписокПолей - Строка - имена полей ключа записи через запятую.
//   * СписокПолейОбновления - Строка - имена ключевых полей строки набора записей
//       для режимов замещения (Обновление, Слияние, Удаление) через запятую.
//   * ОписаниеПолей - ФиксированныйМассив из ФиксированнаяСтруктура:
//      ** Имя - Строка - имя поля ключа записи.
//      ** Тип - ОписаниеТипов
//      ** Представление - Строка
//   * ОписаниеПолейОбновления - ФиксированныйМассив из ФиксированнаяСтруктура:
//      ** Имя - Строка - имя ключевого поля строки набора записей.
//      ** Тип - ОписаниеТипов
//      ** Представление - Строка
//
Функция ОписаниеКлючаЗаписи(ПолноеИмяРегистра) Экспорт
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
	
	ВсеПоля = Новый Массив;
	НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
	Колонки = НаборЗаписей.Выгрузить().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		ВсеПоля.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ПоляКлюча = Новый Массив;
	ПоляОбновления = Новый Массив;
	ОписаниеПолей = Новый Массив;
	ОписаниеПолейОбновления = Новый Массив;
	
	СписокВсехПолей = СтрСоединить(ВсеПоля, ",");
	ПустойКлючЗаписи = Менеджер.СоздатьКлючЗаписи(Новый Структура(СписокВсехПолей));
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	ЭтоРегистрСведенийСРегистратором = ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеРегистра)
		И МетаданныеРегистра.РежимЗаписи
			= Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	
	Для Каждого Колонка Из Колонки Цикл
		Поле = Колонка.Имя;
		ОдноПоле = Новый Структура(Поле, Null);
		ЗаполнитьЗначенияСвойств(ОдноПоле, ПустойКлючЗаписи);
		Если ОдноПоле[Поле] = Null И Поле <> "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		ЭтоРазделитель = Ложь;
		ПредставлениеПоля = ПредставлениеПоляРегистра(МетаданныеРегистра, Поле, ЭтоРазделитель);
		ОписаниеПоля = Новый ФиксированнаяСтруктура(Новый Структура("Имя, Тип, Представление",
			Поле, Колонка.ТипЗначения, ПредставлениеПоля));
		Если ОдноПоле[Поле] <> Null Тогда
			ПоляКлюча.Добавить(Поле);
			ОписаниеПолей.Добавить(ОписаниеПоля);
		КонецЕсли;
		Если ЭтоРегистрСведенийСРегистратором
			И (ЭтоРазделитель Или Поле = "Регистратор" Или Поле = "НомерСтроки") Тогда
			ПоляОбновления.Добавить(Поле);
			ОписаниеПолейОбновления.Добавить(ОписаниеПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭтоРегистрСведенийСРегистратором Тогда
		ПоляОбновления = ПоляКлюча;
		ОписаниеПолейОбновления = ОписаниеПолей;
	КонецЕсли;
	
	ОписаниеКлюча = Новый Структура;
	ОписаниеКлюча.Вставить("ОписаниеПолей", Новый ФиксированныйМассив(ОписаниеПолей));
	ОписаниеКлюча.Вставить("СписокПолей",   СтрСоединить(ПоляКлюча, ","));
	ОписаниеКлюча.Вставить("ОписаниеПолейОбновления", Новый ФиксированныйМассив(ОписаниеПолейОбновления));
	ОписаниеКлюча.Вставить("СписокПолейОбновления",   СтрСоединить(ПоляОбновления, ","));
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКлюча);
	
КонецФункции

// Для функции ОписаниеКлючаЗаписи.
Функция ПредставлениеПоляРегистра(МетаданныеРегистра, Поле, ЭтоРазделитель)
	
	МетаданныеПоля = МетаданныеРегистра.Измерения.Найти(Поле);
	Если МетаданныеПоля = Неопределено Тогда
		МетаданныеПоля = МетаданныеРегистра.Ресурсы.Найти(Поле);
		Если МетаданныеПоля = Неопределено Тогда
			МетаданныеПоля = МетаданныеРегистра.Реквизиты.Найти(Поле);
			Если МетаданныеПоля = Неопределено Тогда
				Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
					Если СтандартныйРеквизит.Имя <> Поле Тогда
						Продолжить;
					КонецЕсли;
					МетаданныеПоля = СтандартныйРеквизит;
				КонецЦикла;
				Если МетаданныеПоля = Неопределено Тогда
					РазделениеНеИспользовать = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать;
					Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
						Если ОбщийРеквизит.РазделениеДанных = РазделениеНеИспользовать
						 Или ОбщийРеквизит.Имя <> Поле Тогда
						 	Продолжить;
						КонецЕсли;
						МетаданныеПоля = ОбщийРеквизит;
						ЭтоРазделитель = Истина;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МетаданныеПоля.Представление();
	
КонецФункции

Функция РежимыЗамещения() Экспорт
	Если Не ЗарплатаКадрыПовтИсп.РежимыЗамещенияДоступны() Тогда
		Возврат Новый ФиксированнаяСтруктура("Добавление,Замещение,Обновление,Слияние,Удаление");
	КонецЕсли;
	// АПК:488-выкл Поддержка новых типов платформы (исполняемый код безопасен)
	Возврат Вычислить("РежимЗамещения");
	// АПК:488-вкл
КонецФункции

Функция РежимДобавленияНабораЗаписей() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.РежимыЗамещения().Добавление;
КонецФункции

Функция РежимЗамещенияНабораЗаписей() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.РежимыЗамещения().Замещение;
КонецФункции

Функция РежимОбновленияНабораЗаписей() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.РежимыЗамещения().Обновление;
КонецФункции

Функция РежимСлиянияНабораЗаписей() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.РежимыЗамещения().Слияние;
КонецФункции

Функция РежимУдаленияНабораЗаписей() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.РежимыЗамещения().Удаление;
КонецФункции

Функция РежимыЗамещенияДоступны() Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Версия = СистемнаяИнформация.ВерсияПриложения;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия, "8.3.26.1398") < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ЗарплатаКадры.ИнформацияОВидеРасчета.
Функция ПолучитьИнформациюОВидеРасчета(ВидРасчета) Экспорт
	Возврат ЗарплатаКадры.ИнформацияОВидеРасчета(ВидРасчета);
КонецФункции

#КонецОбласти

#КонецОбласти
