
#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияМенеджеров

Функция НовыйМенеджерОбмена(Приложение, ВестиПротокол) Экспорт
	
	Возврат Обработки.МенеджерОбменаУправлениеПерсоналом.НовыйМенеджер(Приложение, ВестиПротокол);
	
КонецФункции

Функция НовыйМенеджерКонвертации(Приложение) Экспорт

	Возврат Обработки.МенеджерКонвертацииУправлениеПерсоналом.НовыйМенеджер(Приложение);

КонецФункции

#КонецОбласти

#Область РегистрацияСобытийВЖурналеРегистрации

Функция КомментарийЖРНачалоОбмена()

	Комментарий = НСтр("ru = 'Начало обмена.';
						|en = 'Exchange start.'");
	Возврат Комментарий;

КонецФункции

Функция КомментарийЖРОкончаниеОбмена(БылиОшибки)

	Комментарий = НСтр("ru = 'Окончание обмена.';
						|en = 'Exchange end.'");
	Если БылиОшибки Тогда
		Комментарий = СтрШаблон("%1 %2", Комментарий, НСтр("ru = 'Были ошибки.';
															|en = 'There were errors.'"));
	КонецЕсли;
	Возврат Комментарий;

КонецФункции

Процедура ЗаписатьСобытиеНачалоОбмена(ИменаСобытийЖР)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,, КомментарийЖРНачалоОбмена());

КонецПроцедуры
	
Процедура ЗаписатьСобытиеОкончаниеОбмена(ИменаСобытийЖР, БылиОшибки)

	ЗаписьЖурналаРегистрации(
		ИменаСобытийЖР.Обмен,
		УровеньЖурналаРегистрации.Информация,,,КомментарийЖРОкончаниеОбмена(БылиОшибки));

КонецПроцедуры

Функция ОписаниеОшибкиКонвертации(ОшибкиКонвертации)

	ШаблонОписанияОшибки = НСтр("ru = 'Ошибки конвертации объекта
		|%1';
		|en = 'Object conversion error
		|%1'");
	Ошибки = СформироватьJSONОписанияОшибки(ОшибкиКонвертации);
	
	Возврат СтрШаблон(ШаблонОписанияОшибки, Ошибки);

КонецФункции

Процедура ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ОписаниеОшибкиКонвертации)

	ШаблонОписания = НСтр("ru = 'Ошибка обработки объекта: %1. Идентификатор: %2';
							|en = 'Object processing error: %1. ID: %2'");
	Описание = СтрШаблон(ШаблонОписания, Строка(ТипОбъекта), ИдентификаторОбъекта);
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ОписаниеОшибкиКонвертации);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Конвертация, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ПодробноеПредставлениеОшибки)

	ШаблонОписания = НСтр("ru = 'Ошибка обработки объекта: %1. Идентификатор: %2';
							|en = 'Object processing error: %1. ID: %2'");
	Описание = СтрШаблон(ШаблонОписания, Строка(ТипОбъекта), ИдентификаторОбъекта);
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Процедура ЗаписатьОшибку(ИменаСобытийЖР, Описание, ПодробноеПредставлениеОшибки)
	
	ШаблонТекста = "%1
		|%2";
	Комментарий  = СтрШаблон(ШаблонТекста, Описание, ПодробноеПредставлениеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.Обмен, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);

КонецПроцедуры

Функция СформироватьJSONОписанияОшибки(Значение)
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSONОписанияОшибки", ИнтеграцияУправлениеПерсоналомОбмен);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSONОписанияОшибки(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		Результат = Строка(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьОшибкуПолученияДанныхФайла(ИменаСобытийЖР, ПрисоединенныйФайл, ОписаниеОшибки) Экспорт
	
	ШаблонОписания = НСтр("ru = 'Ошибка получения данных файла: %1
	|%2';
	|en = 'An error occurred when getting the file data: %1
	|%2'");
	Комментарий = СтрШаблон(ШаблонОписания, Строка(ПрисоединенныйФайл), ОписаниеОшибки);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьПредупреждениеПроверкиВерсийФайлов(ИменаСобытийЖР, ТипОбъекта, ДокументКЭДО, ТекстСообщения)

	ШаблонОписания = НСтр(
	"ru = 'Проверка версии электронного документа:
	|%1';
	|en = 'Check the electronic document version:
	|%1'");
	Комментарий = СтрШаблон(ШаблонОписания, ТекстСообщения);
	ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия, УровеньЖурналаРегистрации.Предупреждение,, ДокументКЭДО, Комментарий);

КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

Процедура ПроверкаНастроекПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение 	= Параметры.Приложение;
	Настройки 	= Параметры.Настройки;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Ложь);
	Результат = МенеджерОбмена.ПроверитьНастройкиПодключения(Настройки);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновитьДанныеСервисаПодписанияФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Приложение 	= Параметры.Приложение;
	Настройки 	= Параметры.Настройки;
	Отказ = Ложь;
	
	Результат = Новый Структура("СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерИнтеграции = ИнтеграцияУправлениеПерсоналомМенеджер.НовыйМенеджерИнтеграции(Приложение, Истина);
	Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Ошибка получения тикета на портале ИТС (%1)';
													|en = 'Ошибка получения тикета на портале ИТС (%1)'"), Ответ.СообщениеОбОшибке);
		Отказ = Истина;
	Иначе
		Настройки.Вставить("Тикет", Ответ.Тикет);
	КонецЕсли;
	
	Если Не Отказ Тогда
		МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Истина);
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.НастройкиСервисаПодписания;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиНастроек(Настройки, ТипОбъекта);
		Если РезультатВыгрузки.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка обновления настроек. Подробнее см в Журнале регистрации.';
												|en = 'Ошибка обновления настроек. Подробнее см в Журнале регистрации.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область Обмен

Процедура ВыполнитьОбменПослеПодключенияПриложения(Приложение) Экспорт
	
	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		
		ИнтеграцияУправлениеПерсоналом.ПроверитьРуководителейОрганизаций(Ложь);
		
		МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Ложь);
		
		Попытка
			ВыгрузитьИзмененияОбъектов(МенеджерОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			ВыгрузитьИзмененияПрочихОбъектов(МенеджерОбмена);
		Исключение
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Функция ВыполнитьОбмен(Приложение, ВестиПротокол) Экспорт

	БылиОшибки = Ложь;
	Попытка
		БылиОшибки = ИнтеграцияУправлениеПерсоналом.ОбработатьБудущиеСобытия(Приложение);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	ИнтеграцияУправлениеПерсоналом.ПроверитьРуководителейОрганизаций(БылиОшибки);
	
	Если ПроверятьДоступностьАдресаПоИмени(Приложение) Тогда
		ПроверитьДоступностьАдресаПоИмени(Приложение, ВестиПротокол);
	КонецЕсли;
	
	БылиОшибкиОбмена = РезультатВыполненияОбмена(Приложение, ВестиПротокол);
	
	Возврат БылиОшибки Или БылиОшибкиОбмена;

КонецФункции

Функция РезультатВыполненияОбмена(Приложение, ВестиПротокол)

	ИменаСобытийЖР = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);
	
	ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
	СобытиеОбмена = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СобытиеОбмена(Приложение, ВидСобытия);
	СобытиеОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	ЗаписатьСобытиеНачалоОбмена(ИменаСобытийЖР);
	
	МенеджерОбмена = НовыйМенеджерОбмена(Приложение, ВестиПротокол);
	
	БылиОшибки = Ложь;
	Попытка
		// Проверка (установка) версий API и DTO для обмена, при смене версий выполняются соответствующие обработчики.
		МенеджерОбмена.ПроверитьВерсиюФорматаОбмена();
	Исключение
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не БылиОшибки Тогда
		
		// Выгрузка удаления объектов.
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьУдалениеОбъектов(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Загрузка объектов, которые не получилось загрузить в прошлых обменах.
		Попытка
			БылиОшибкиЭтапа = ПовторнаяЗагрузкаНезагруженныхОбъектов(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Загрузка всех изменений.
		Попытка
			БылиОшибкиЭтапа = ЗагрузитьИзменения(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Выгрузка настроек, используемой функциональности приложения.
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьНастройкиПриложения(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Выгрузка документов на подпись.
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьДокументы(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Выгрузка результатов выполнения заявок.
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьРезультатыВыполненияЗаявок(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		// Выгрузка изменений объектов.
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьИзмененияОбъектов(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			БылиОшибкиЭтапа = ВыгрузитьИзмененияПрочихОбъектов(МенеджерОбмена);
			БылиОшибки = БылиОшибки Или БылиОшибкиЭтапа;
		Исключение
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР.ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
			
		Попытка
			ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Приложение);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
		ВыполнитьОбработчикиОбмена(МенеджерОбмена);
		
		БылиОшибки = БылиОшибки Или МенеджерОбмена.БылиОшибки Или МенеджерОбмена.МенеджерКонвертации.БылиОшибки;
		
	КонецЕсли;
	
	ЗаписатьСобытиеОкончаниеОбмена(ИменаСобытийЖР, БылиОшибки);
	
	СобытиеОбмена.ДатаОкончания = ТекущаяДатаСеанса();
	СобытиеОбмена.БылиОшибки 	= БылиОшибки;
	РегистрыСведений.СобытияОбменаУправлениеПерсоналом.ЗаписатьСобытиеОбмена(СобытиеОбмена);
	
	Возврат БылиОшибки;

КонецФункции

Функция ПовторнаяЗагрузкаНезагруженныхОбъектов(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", МенеджерОбмена.Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Идентификатор КАК Идентификатор,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.НезагруженныеОбъектыУправлениеПерсоналом КАК Таблица
	|ГДЕ
	|	Таблица.Приложение = &Приложение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипОбъекта";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	Выборка = РезультатЗапроса.Выбрать();
	Идентификаторы = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("ТипОбъекта") Цикл
		
		ТипОбъекта = Выборка.ТипОбъекта;
		ИмяВОбъектеВсеИзменения  = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
		Пока Выборка.Следующий() Цикл
			Идентификаторы.Добавить(Выборка.Идентификатор);
		КонецЦикла;
		
		Ответ = МенеджерОбмена.ПовторнаяЗагрузкаОбъектов(ТипОбъекта, Идентификаторы);
		Если Ответ.БылиОшибки Тогда
			БылиОшибки = Истина;
		Иначе
			Если ЗначениеЗаполнено(Ответ.ОбъектыDTO) Тогда
				Объекты = МенеджерОбмена.МенеджерКонвертации.ВыполнитьКонвертациюИзОбъектовDTO(Ответ.ОбъектыDTO, ТипОбъекта);
				ОбъектВсеИзменения = Новый Структура;
				ОбъектВсеИзменения.Вставить(ИмяВОбъектеВсеИзменения, Объекты);
				РезультатОбработки = ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения, Истина, Ложь);
				БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.НетОбъектов) Тогда
				// Идентификаторы по которым нет объекта в приложении.
				ОтменитьРегистрациюНезагруженныхОбъектов(Ответ.НетОбъектов, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БылиОшибки;

КонецФункции

Функция ЗагрузитьИзменения(МенеджерОбмена)
	
	Лимит = 100;
	БылиОшибки = Ложь;
	ОбработаноОбъектов = 0;
	Приложение = МенеджерОбмена.Приложение;
	
	ПервыйЗапрос = Истина;
	Пока ПервыйЗапрос Или Не БылиОшибки И ОбработаноОбъектов = Лимит Цикл
		
		ПервыйЗапрос = Ложь;
		ОбработаноОбъектов = 0;
		
		ВерсияИзменений = РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.ВерсияИзменений(Приложение);
		Ответ = МенеджерОбмена.ЗагрузитьИзменения(ВерсияИзменений, Лимит);
		Если Ответ.БылиОшибки Тогда
			БылиОшибки = Истина;
		ИначеЕсли ЗначениеЗаполнено(Ответ.ОбъектВсеИзменения) Тогда
			ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВсеИзменения;
			ОбъектВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ВыполнитьКонвертациюИзОбъектовDTO(Ответ.ОбъектВсеИзменения, ТипОбъекта);
			РезультатОбработки = ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения, Ложь, Ложь);
			БылиОшибки 			= РезультатОбработки.БылиОшибки;
			ОбработаноОбъектов 	= РезультатОбработки.ОбработаноОбъектов
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатОбработки = ОбработатьЗагруженныеИзменения(МенеджерОбмена, Новый Структура, Ложь, Истина);
	БылиОшибки = БылиОшибки Или РезультатОбработки.БылиОшибки;
	
	Возврат БылиОшибки;

КонецФункции

Функция РезультатВыгрузкиФизическогоЛица(Приложение, ФизическоеЛицо) Экспорт

	БылиОшибки = Ложь;
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	Данные = ДанныеФизическихЛицДляВыгрузки(Приложение, ФизическиеЛица, Ложь); 
	
	Если Не ЗначениеЗаполнено(Данные.ТаблицаДанных) Тогда
		БылиОшибки = Истина;
	Иначе
		МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Истина);
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(Данные.ТаблицаДанных, ТипОбъекта);
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
			ИнтеграцияКабинетСотрудникаОбмен.ВыполнитьАктивациюФизическихЛицКабинетСотрудника(МенеджерОбмена, РезультатВыгрузки);
		КонецЕсли;
		БылиОшибки = МенеджерОбмена.БылиОшибки Или МенеджерОбмена.МенеджерКонвертации.БылиОшибки;
	КонецЕсли;
	
	Возврат БылиОшибки;
	
КонецФункции

Процедура ВыполнитьОбработчикиОбмена(МенеджерОбмена)

	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ВыполнитьОбработчикиОбмена(МенеджерОбмена);
	КонецЕсли;

КонецПроцедуры

Функция КлючиПриложенияАктуальные(Приложение) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбмена = НовыйМенеджерОбмена(Приложение, Ложь);
	Ответ = МенеджерОбмена.ПроверкаАвторизации();
	Если Ответ.НеактуальныеКлючи Тогда
		// ключи не актуальны, удаляем токен, если он сохранен
		ИнтеграцияУправлениеПерсоналом.УдалитьТокенПриложения(Приложение);
	КонецЕсли;
	
	Возврат Не Ответ.НеактуальныеКлючи;

КонецФункции

#КонецОбласти

#Область ОбработчикиВыгрузкиОбъектов

Функция ВыгрузитьУдалениеОбъектов(МенеджерОбмена)

	БылиОшибки = Ложь;
	
	Приложение = МенеджерОбмена.Приложение;
	ТаблицаИзменений = ЗарегистрированоВыгрузитьУдаление(Приложение);
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат БылиОшибки;
	КонецЕсли;
	// Инициализации таблицы для отмены регистрации изменений.
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	Отбор = Новый Структура("ТипОбъекта");
	ТаблицаИзменений.Индексы.Добавить("ТипОбъекта");
	
	ТаблицаОбработано = НоваяТаблицаОбработано();
	
	ТипыОбъектов = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИзменений, "ТипОбъекта", Истина);
	Для каждого ТипОбъекта Из ТипыОбъектов Цикл
		
		Отбор.ТипОбъекта = ТипОбъекта;
		ОбъектыКУдалению = ТаблицаИзменений.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		
		РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиУдаления(ОбъектыКУдалению, ТипОбъекта);
		ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
	
	КонецЦикла;
	
	Попытка
		ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию);
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьИзмененияОбъектов(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	
	Приложение = МенеджерОбмена.Приложение;
	ТипыОбъектов = ИнтеграцияУправлениеПерсоналом.ТипыОсновныхОбъектов();
	
	// Получение всех зарегистрированных изменений для обмена по указанным типам объектов.
	ТаблицаИзменений = ЗарегистрированныеИзменения(Приложение, ТипыОбъектов);
	
	ТаблицаИзменений.Индексы.Добавить("ТипОбъекта");
	Отбор = Новый Структура("ТипОбъекта");
	
	// Порядок элементов в массиве определяет порядок выгрузки объектов.
	Для Индекс = 0 По ТипыОбъектов.ВГраница() Цикл
		
		ТипОбъекта = ТипыОбъектов[Индекс];
		Отбор.ТипОбъекта = ТипОбъекта;
		
		НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
		Изменения 			= ТаблицаИзменений.СкопироватьКолонки();
		ТаблицаОбработано 	= НоваяТаблицаОбработано();
		
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если СтрокаТЗ.ЕстьВПравилах Тогда
				ЗаполнитьЗначенияСвойств(Изменения.Добавить(), СтрокаТЗ);
			Иначе
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОбъектов = ДанныеОбъектовДляВыгрузки(МенеджерОбмена, Изменения, ТипОбъекта);
		БылиОшибки = БылиОшибки Или ДанныеОбъектов.БылиОшибки;

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеОбъектов.ОтменитьРегистрацию, ОтменитьРегистрацию);
		
		// Выгрузка объектов.
		Если ЗначениеЗаполнено(ДанныеОбъектов.ТаблицаДанных) Тогда
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеОбъектов.ТаблицаДанных, ТипОбъекта);
			БылиОшибки = БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо
				И Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
				ИнтеграцияКабинетСотрудникаОбмен.ВыполнитьАктивациюФизическихЛицКабинетСотрудника(МенеджерОбмена, РезультатВыгрузки);
			ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация Тогда
				ПроверитьВыгрузитьДанныеРуководителей(МенеджерОбмена, РезультатВыгрузки);
			КонецЕсли;
			ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта);
		КонецЕсли;
		
		Попытка
			ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, Изменения, ОтменитьРегистрацию);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ВыгрузитьНастройкиПриложения(МенеджерОбмена)
	
	БылиОшибки = Ложь;
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьНастройкиПриложения(МенеджерОбмена);
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьДокументы(МенеджерОбмена)

	БылиОшибки = Ложь;
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьДокументы(МенеджерОбмена);
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьРезультатыВыполненияЗаявок(МенеджерОбмена)

	БылиОшибки = Ложь;
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьРезультатыВыполненияЗаявок(МенеджерОбмена);
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

Функция ВыгрузитьИзмененияПрочихОбъектов(МенеджерОбмена)

	БылиОшибки = Ложь;
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьИзмененияПрочихОбъектов(МенеджерОбмена);
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

Процедура ПроверитьВыгрузитьДанныеРуководителей(МенеджерОбмена, РезультатВыгрузкиОрганизаций)

	Если Не ЗначениеЗаполнено(РезультатВыгрузкиОрганизаций.Выгружено) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", РезультатВыгрузкиОрганизаций.Выгружено);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеРуководители.СтруктурнаяЕдиница КАК Организация,
	|	ТекущиеРуководители.Руководитель КАК Руководитель
	|ИЗ
	|	РегистрСведений.ТекущиеРуководителиКабинетСотрудника КАК ТекущиеРуководители
	|ГДЕ
	|	ТекущиеРуководители.СтруктурнаяЕдиница В(&Организации)
	|	И ТекущиеРуководители.Руководитель <> ЗНАЧЕНИЕ(Справочник.физическиеЛица.ПустаяСсылка)";
	РуководителиОрганизаций = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(РуководителиОрганизаций) Тогда
		Руководители = ОбщегоНазначения.ВыгрузитьКолонку(РуководителиОрганизаций,"Руководитель", Истина);
		Приложение = МенеджерОбмена.Приложение;
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
		ВыгруженныеФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, Руководители);
		ФизическиеЛицаДляВыгрузки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Руководители, ВыгруженныеФизическиеЛица);
		Если ЗначениеЗаполнено(ФизическиеЛицаДляВыгрузки) Тогда
			ДанныеОбъектов = ДанныеФизическихЛицДляВыгрузки(Приложение, ФизическиеЛицаДляВыгрузки, Ложь);
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеОбъектов.ТаблицаДанных, ТипОбъекта);
			РезультатВыгрузкиОрганизаций.БылиОшибки = РезультатВыгрузкиОрганизаций.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			Для каждого СтрокаТЗ Из РуководителиОрганизаций Цикл
				Если ФизическиеЛицаДляВыгрузки.Найти(СтрокаТЗ.Руководитель) <> Неопределено И РезультатВыгрузки.Выгружено.Найти(СтрокаТЗ.Руководитель) = Неопределено Тогда
					Индекс = РезультатВыгрузкиОрганизаций.Выгружено.Найти(СтрокаТЗ.Организация);
					Если Индекс <> Неопределено Тогда
						РезультатВыгрузкиОрганизаций.Выгружено.Удалить(Индекс);
						РезультатВыгрузкиОрганизаций.НеВыгружено.Добавить(СтрокаТЗ.Организация);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника И ЗначениеЗаполнено(РезультатВыгрузки.Выгружено) Тогда
				// Выполним деактивацию кабинетов.
				ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
				СсылкаПубличныйИдентификатор = СсылкаПубличныйИдентификатор(РезультатВыгрузки.Выгружено, ТипОбъекта);
				ИдентификаторыКДеактивации = ОбщегоНазначенияБЗККлиентСервер.ЗначенияСоответствия(СсылкаПубличныйИдентификатор);
				БылиОшибки = ИнтеграцияКабинетСотрудникаОбмен.РезультатДеактивацииФизическихЛиц(ИдентификаторыКДеактивации);
				РезультатВыгрузкиОрганизаций.БылиОшибки = РезультатВыгрузкиОрганизаций.БылиОшибки Или БылиОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатВыгрузкиОрганизаций.Выгружено) Тогда
		Возврат;
	КонецЕсли;

	Запрос.УстановитьПараметр("Организации", РезультатВыгрузкиОрганизаций.Выгружено);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеРуководители.СтруктурнаяЕдиница КАК Организация,
	|	ТекущиеРуководители.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.ТекущиеРуководителиКабинетСотрудника КАК ТекущиеРуководители
	|ГДЕ
	|	ТекущиеРуководители.СтруктурнаяЕдиница В(&Организации)
	|	И ТекущиеРуководители.Должность <> ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)";
	ДолжностиРуководителей = Запрос.Выполнить().Выгрузить();
	Если ЗначениеЗаполнено(ДолжностиРуководителей)  Тогда
		Должности = ОбщегоНазначения.ВыгрузитьКолонку(ДолжностиРуководителей,"Должность", Истина);
		Приложение = МенеджерОбмена.Приложение;
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
		ВыгруженныеДолжности = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, Должности);
		ДолжностиДляВыгрузки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Должности, ВыгруженныеДолжности);
		Если ЗначениеЗаполнено(ДолжностиДляВыгрузки) Тогда
			ТаблицаДолжностей = Новый ТаблицаЗначений;
			ТаблицаДолжностей.Колонки.Добавить("Ссылка");
			Для каждого Должность Из ДолжностиДляВыгрузки Цикл
				НоваяСтрока = ТаблицаДолжностей.Добавить();
				НоваяСтрока.Ссылка = Должность;
			КонецЦикла;
			ДанныеОбъектов = ДанныеДолжностей(ТаблицаДолжностей);
			РезультатВыгрузки = МенеджерОбмена.РезультатВыгрузкиОбъектов(ДанныеОбъектов.ТаблицаДанных, ТипОбъекта);
			РезультатВыгрузкиОрганизаций.БылиОшибки = РезультатВыгрузкиОрганизаций.БылиОшибки Или РезультатВыгрузки.БылиОшибки;
			Для каждого СтрокаТЗ Из ДолжностиРуководителей Цикл
				Если ДолжностиДляВыгрузки.Найти(СтрокаТЗ.Должность) <> Неопределено И РезультатВыгрузки.Выгружено.Найти(СтрокаТЗ.Должность) = Неопределено Тогда
					Индекс = РезультатВыгрузкиОрганизаций.Выгружено.Найти(СтрокаТЗ.Организация);
					Если Индекс <> Неопределено Тогда
						РезультатВыгрузкиОрганизаций.Выгружено.Удалить(Индекс);
						РезультатВыгрузкиОрганизаций.НеВыгружено.Добавить(СтрокаТЗ.Организация);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗагрузкиОбъектов

Функция ОбработатьЗагруженныеИзменения(МенеджерОбмена, ОбъектВсеИзменения, ПовторнаяЗагрузка, ПовторнаяОбработка)

	РезультатОбработки = Новый Структура("БылиОшибки,ОбработаноОбъектов,ВерсияИзменений", Ложь, 0, 0);
	
	Если МенеджерОбмена.Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ОбработатьЗагрузкуФизическихЛиц(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		ОбработатьОфферы(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка);
		ОбработатьГрафикиОтпусковПредприятия(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		ОбработатьГрафикиОтпусковПодразделений(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
	Иначе
		ОбработатьЗагрузкуЗаявок(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка);
		ОбработатьЗаявкиЗарплатаСразу(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		ОбработатьРезультатыСогласования(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка);
		ОбработатьПравилаСогласования(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
		ОбработатьГрафикиОтпусковПодразделений(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка);
	КонецЕсли;
	
	Если Не ПовторнаяЗагрузка И РезультатОбработки.ВерсияИзменений <> 0 Тогда
		РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.ЗаписатьВерсиюИзменений(МенеджерОбмена.Приложение, РезультатОбработки.ВерсияИзменений);
	КонецЕсли;
	
	Возврат РезультатОбработки;

КонецФункции

Процедура ОбработатьЗагрузкуЗаявок(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка)

	ВерсияИзменений 	= РезультатОбработки.ВерсияИзменений;
	Приложение 			= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 		= МенеджерОбмена.ИменаСобытийЖР;
	
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Объект");
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗаявок.Колонки.Добавить("ПричинаОтсутствия", 	Новый ОписаниеТипов("ПеречислениеСсылка.ПричиныОтсутствийЗаявокКабинетСотрудника"));
	ТаблицаЗаявок.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаЗаявок.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗаявок.Колонки.Добавить("ТипОбъекта", 			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ТаблицаЗаявок.Колонки.Добавить("ОписаниеОшибки");
	ТаблицаЗаявок.Колонки.Добавить("Вложения");
	ТаблицаЗаявок.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаЗаявок.Колонки.Добавить("ОтменяемаяЗаявка");
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторОтменяемойЗаявки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	
	ОбрабатываемыеЗаявки = Новый Массив;
	ПеречислениеТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	Если ПовторнаяОбработка Тогда
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаПереносОтпуска);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ОтменаЗаявки);
	Иначе
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаНаОтпуск);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.Отсутствие);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаПереносОтпуска);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ОтменаЗаявки);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаИзменениеЛичныхДанных);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаНалоговыйВычет);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗапросСправки2НДФЛ);
		ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ОбращениеСотрудника);
		Если ИнтеграцияУправлениеПерсоналом.ДоступенРасширенныйФункционал() Тогда
			ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаНаКомпенсациюОтпуска);
			ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаДСВ);
			ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗапросСправкиСМестаРаботы);
			ОбрабатываемыеЗаявки.Добавить(ПеречислениеТипОбъекта.ЗаявкаОстаткиОтпусков);
		КонецЕсли;
	КонецЕсли;

	Для каждого ТипОбъекта Из ОбрабатываемыеЗаявки Цикл
		Если ПовторнаяОбработка Тогда
			Объекты = НеобработанныеОбъекты(Приложение, ТипОбъекта);
		Иначе
			ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
			Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объекты) Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Объект Из Объекты Цикл
			НоваяСтрока = ТаблицаЗаявок.Добавить(); 
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
			НоваяСтрока.Объект 				= Объект;
			НоваяСтрока.ОписаниеОшибки 		= ОшибкиКонвертацииОбъекта(Объект);
			НоваяСтрока.ТипОбъекта 			= ТипОбъекта;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаЗаявок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаявок = ИнтеграцияУправлениеПерсоналомСлужебный.ПараметрыРегистрацииНовыхЗаявок(ТаблицаЗаявок);
	
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		
		Если Не ПовторнаяОбработка Тогда
			ВерсияИзменений = Макс(ВерсияИзменений, СтрокаТЗ.ВерсияИзменений);
		КонецЕсли;
		
		Объект = СтрокаТЗ.Объект;
		
		ИдентификаторЭлектронногоДокумента = ЗначениеСвойстваОбъекта(Объект, "ИдентификаторЭлектронногоДокумента");
		Если ЗначениеЗаполнено(ИдентификаторЭлектронногоДокумента) Тогда
			ИдентификаторОбъекта = ИдентификаторЭлектронногоДокумента;
		Иначе
			ИдентификаторОбъекта = Объект.ИдентификаторЗаявки;
		КонецЕсли;
		
		// проверка повторной регистрации заявки
		РезультатРегистрацииЗаявки = ПараметрыЗаявок.ЗарегистрированныеЗаявки[СтрокаТЗ.ИдентификаторЗаявки];
		Если РезультатРегистрацииЗаявки <> Неопределено Тогда
			// заявка с таким идентификатором уже зарегистрирована
			ЗаявкаЗарегистрирована = Истина;
			Если ТипЗнч(РезультатРегистрацииЗаявки) = Тип("Соответствие") Тогда
				// есть заявки с дополнительной идентификацией
				Если ЗначениеЗаполнено(ИдентификаторЭлектронногоДокумента)
					И РезультатРегистрацииЗаявки[ИдентификаторЭлектронногоДокумента] = Неопределено Тогда
					ЗаявкаЗарегистрирована = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ЗаявкаЗарегистрирована Тогда
				Если ПовторнаяЗагрузка Тогда
					ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЗ.ИдентификаторЗаявки), СтрокаТЗ.ТипОбъекта, МенеджерОбмена);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина; 
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ОписаниеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОписаниеОшибокПолученияФайлов = "";
		Вложения = Новый Массив;
		Если Объект.Свойство("Вложения") И ЗначениеЗаполнено(Объект.Вложения) Тогда
			Ответ = ПолучитьВложения(МенеджерОбмена, Объект.Вложения);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.Вложения) Тогда
				Вложения = Ответ.Вложения;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЗ.Вложения = Вложения;
		
		ЭлектронныйДокумент = Неопределено;
		Если Объект.Свойство("ЭлектронныйДокумент") И ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
			Ответ = ЗагрузитьЭлектронныйДокумент(МенеджерОбмена, Объект.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				Если ПустаяСтрока(ОписаниеОшибокПолученияФайлов) Тогда
					ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки; 
				Иначе
					ОписаниеОшибокПолученияФайлов = СтрШаблон("%1%2%3",ОписаниеОшибокПолученияФайлов,  Символы.ПС,  Ответ.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				ЭлектронныйДокумент = Ответ.ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЗ.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если Объект.Свойство("Фотография") И ЗначениеЗаполнено(Объект.Фотография) Тогда
			Ответ = ЗагрузитьФайл(МенеджерОбмена, Объект.Фотография);
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				Объект.Фотография = Ответ.ОписаниеФайла;
			Иначе
				Объект.Фотография = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				Если ПустаяСтрока(ОписаниеОшибокПолученияФайлов) Тогда
					ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки; 
				Иначе
					ОписаниеОшибокПолученияФайлов = СтрШаблон("%1%2%3",ОписаниеОшибокПолученияФайлов,  Символы.ПС,  Ответ.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеОшибокПолученияФайлов) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибокПолученияФайлов);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ОписаниеОшибокПолученияФайлов);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Получение отменяемой заявки.
		Если СтрокаТЗ.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаПереносОтпуска
			Или СтрокаТЗ.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОтменаЗаявки Тогда
			
			ОтменяемаяЗаявка = Неопределено;
			ДанныеОтменяемойЗаявки = ПараметрыЗаявок.ОтменяемыеЗаявки[Объект.ИдентификаторОтменяемойЗаявки];
			Если ДанныеОтменяемойЗаявки <> Неопределено Тогда
				Если ТипЗнч(ДанныеОтменяемойЗаявки) = Тип("Соответствие") Тогда
					// Заявка с дополнительной идентификацией
					Если ЗначениеЗаполнено(Объект.ИдентификаторОтменяемогоЭлектронногоДокумента)
						И ДанныеОтменяемойЗаявки[Объект.ИдентификаторОтменяемогоЭлектронногоДокумента] <> Неопределено Тогда
						ОтменяемаяЗаявка = ДанныеОтменяемойЗаявки[Объект.ИдентификаторОтменяемогоЭлектронногоДокумента];
					КонецЕсли;
				Иначе
					ОтменяемаяЗаявка = ДанныеОтменяемойЗаявки;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтменяемаяЗаявка <> Неопределено Тогда
				СтрокаТЗ.ОтменяемаяЗаявка = ОтменяемаяЗаявка;
			Иначе
				Если ЗначениеЗаполнено(Объект.ИдентификаторОтменяемогоЭлектронногоДокумента) Тогда
					ОтменяемыйИдентификатор = Объект.ИдентификаторОтменяемогоЭлектронногоДокумента;
				Иначе
					ОтменяемыйИдентификатор = Объект.ИдентификаторОтменяемойЗаявки;
				КонецЕсли;
				ШаблонОписания = НСтр("ru = 'Не найдена отменяемая заявка с идентификатором %1.';
										|en = 'Не найдена отменяемая заявка с идентификатором %1.'");
				Описание = СтрШаблон(ШаблонОписания, ОтменяемыйИдентификатор);
				ЗарегистрироватьНеобработанныйОбъект(ИдентификаторОбъекта, Объект, СтрокаТЗ.ТипОбъекта, Описание, МенеджерОбмена);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗарегистрироватьНовуюЗаявку(СтрокаТЗ, ПараметрыЗаявок);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЗ.ИдентификаторЗаявки), СтрокаТЗ.ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение 
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, СтрокаТЗ.ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, СтрокаТЗ.ТипОбъекта, ПодробноеПредставлениеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ПовторнаяОбработка Тогда
		РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаЗаявок.Количество();
		РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьГрафикиОтпусковПредприятия(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПредприятия;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта(Объект);
	КонецЦикла;
	
	ИдентификаторыДокументов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторДокумент = ИнтеграцияУправлениеПерсоналомСлужебный.ДокументыСборГрафиковОтпусковПоИдентификаторам(ИдентификаторыДокументов);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		Объект = СтрокаТЗ.Объект;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьСборГрафиковОтпусковПредприятия(Объект, ИдентификаторДокумент);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьГрафикиОтпусковПодразделений(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)
	
	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусковПодразделения;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Объект Из Объекты Цикл 
		ОшибкиКонвертацииОбъекта = ОшибкиКонвертацииОбъекта(Объект);
		Если Объект.Свойство("Периоды") И ЗначениеЗаполнено(Объект.Периоды) Тогда
			Для каждого ЗаписьПериода Из Объект.Периоды Цикл
				ОшибкиКонвертации = ОшибкиКонвертацииОбъекта(ЗаписьПериода);
				Если ЗначениеЗаполнено(ОшибкиКонвертации) Тогда
					ОшибкиКонвертацииОбъекта.Добавить(ОшибкиКонвертации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта;
	КонецЦикла;
	
	ИдентификаторыДокументов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторДокумент = ИнтеграцияУправлениеПерсоналомСлужебный.ДокументыСборГрафиковОтпусковПоИдентификаторам(ИдентификаторыДокументов);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		Если Не ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьСборГрафиковОтпусковПодразделения(Объект, ИдентификаторДокумент);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
		
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьЗагрузкуФизическихЛиц(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта(Объект);
	КонецЦикла;
	
	Идентификаторы = ТаблицаОбъектов.ВыгрузитьКолонку("ФизическоеЛицо");
	ИдентификаторСсылка = ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		ИдентификаторФизическогоЛица = СтрокаТЗ.ФизическоеЛицо;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторФизическогоЛица, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторФизическогоЛица, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Если Объект.Свойство("Фотография") И ЗначениеЗаполнено(Объект.Фотография) Тогда
			Ответ = ЗагрузитьФайл(МенеджерОбмена, Объект.Фотография);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				РезультатОбработки.БылиОшибки = Истина;
				ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторФизическогоЛица, Ответ.ОписаниеОшибки);
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				Объект.Фотография = Ответ.ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьФизическоеЛицо(Объект, ИдентификаторСсылка); 
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторФизическогоЛица), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторФизическогоЛица, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторФизическогоЛица, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
	
	КонецЦикла;
	
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьОфферы(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("Кандидат", 				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Оффер;
	Если ПовторнаяОбработка Тогда
		Объекты = НеобработанныеОбъекты(Приложение, ТипОбъекта);
	Иначе
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
		Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта(Объект);
	КонецЦикла;
	
	ИдентификаторыДокументов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
	ИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомСлужебный.ОфферИдентификаторДокументаСсылка(ИдентификаторыДокументов);
	
	ИдентификаторыКандидатов = ТаблицаОбъектов.ВыгрузитьКолонку("Кандидат");
	ИдентификаторКандидатаСсылка = ПубличныйИдентификаторСсылка(ИдентификаторыКандидатов, Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		Если Не ПовторнаяОбработка Тогда
			ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		КонецЕсли;
		
		Объект = СтрокаТЗ.Объект;
		ИдентификаторДокумента = СтрокаТЗ.ИдентификаторДокумента;
		
		Если ЗначениеЗаполнено(ИдентификаторСсылка[ИдентификаторДокумента]) Тогда
			// Объект уже загружен, пропускаем.
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ПубличныйИдентификатор = ЗначениеСвойстваОбъекта(Объект, "Кандидат");
		Если Не ЗначениеЗаполнено(ПубличныйИдентификатор) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = НСтр("ru = 'Не заполнено поле Кандидат.';
									|en = 'The ""Candidate"" field is required.'");
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ОписаниеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		Иначе
			Кандидат = ИдентификаторКандидатаСсылка[ПубличныйИдентификатор];
			Если Кандидат = Неопределено Тогда
				// Еще нет физического лица, откладываем обработку объекта.
				Если Не ПовторнаяОбработка Тогда
					ШаблонОписания = НСтр("ru = 'Физическое лицо с идентификатором %1 еще не загружено.';
											|en = 'A person with the %1 ID is not imported yet.'");
					Описание = СтрШаблон(ШаблонОписания, Объект.Кандидат);
					ЗарегистрироватьНеобработанныйОбъект(ИдентификаторДокумента, Объект, ТипОбъекта, Описание, МенеджерОбмена);
				КонецЕсли;
				Продолжить;
			Иначе
				Объект.Кандидат = Кандидат;
				Если ПовторнаяОбработка Тогда
					УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьОффер(Объект);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторДокумента), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторДокумента, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторДокумента, ТипОбъекта, ПодробноеПредставлениеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторДокумента, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецПопытки;
	
	КонецЦикла;
	
	Если Не ПовторнаяОбработка Тогда
		РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
		РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, Идентификатор, ТипОбъекта, Описание)
	
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НезагруженныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НезагруженныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Описание 		= Описание;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка регистрации незагруженного объекта.';
						|en = 'An error occurred when registering an object that is not imported.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюНезагруженныхОбъектов(Идентификаторы, ТипОбъекта, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаИдентификаторов.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	ТаблицаИдентификаторов.Колонки.Добавить("Приложение", Новый ОписаниеТипов("ПеречислениеСсылка.ПриложенияДляИнтеграции"));
	Для каждого Идентификатор Из Идентификаторы Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор 	= Идентификатор;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.Приложение 		= Приложение;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НезагруженныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.ИсточникДанных = ТаблицаИдентификаторов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Идентификатор", "Идентификатор");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из ТаблицаИдентификаторов Цикл
			МенеджерЗаписи = РегистрыСведений.НезагруженныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Идентификатор 	= Идентификатор;
			МенеджерЗаписи.Приложение 		= Приложение;
			МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка отмены регистрации незагруженных объектов.';
						|en = 'An error occurred when canceling registration of objects that are not imported.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Функция ОшибкиКонвертацииОбъекта(Объект)
	
	ОшибкиКонвертации = Новый Массив;
	
	ОшибкиКонвертацииСсылки = Неопределено;
	Если Объект.Свойство("ОшибкиКонвертацииСсылки", ОшибкиКонвертацииСсылки) Тогда
		ОшибкиКонвертации.Добавить(НСтр("ru = 'Ошибка конвертации ссылки';
										|en = 'Reference conversion error'"));
		ОшибкиКонвертации.Добавить(ОшибкиКонвертацииСсылки);
	КонецЕсли;
	ОшибкиЗаполнения = Неопределено;
	Если Объект.Свойство("ОшибкиЗаполнения", ОшибкиЗаполнения) Тогда
		ОшибкиКонвертации.Добавить(НСтр("ru = 'Ошибка проверки заполнения';
										|en = 'Population check error'"));
		ОшибкиКонвертации.Добавить(ОшибкиЗаполнения);
	КонецЕсли;
	
	Возврат ОшибкиКонвертации;

КонецФункции

Функция ПолучитьВложения(МенеджерОбмена, Вложения)
	
	Результат = Новый Структура("Вложения,ОписаниеОшибки");
	
	ОписанияФайлов = Новый Массив;
	ОписаниеОшибки  = "";
	Для Каждого ОбъектФайл Из Вложения Цикл
		Ответ = ЗагрузитьФайл(МенеджерОбмена, ОбъектФайл);
		Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
			ОписанияФайлов.Добавить(Ответ.ОписаниеФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СтрШаблон("%1%2%3",ОписаниеОшибки, Символы.ПС, Ответ.ОписаниеОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вложения 			= ОписанияФайлов;
	Результат.ОписаниеОшибки 	= ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьФайл(МенеджерОбмена, ОбъектФайл)
	
	Результат = Новый Структура("ОписаниеФайла,ОписаниеОшибки");
	
	ОписаниеФайла = Неопределено;
	Ответ = МенеджерОбмена.РезультатЗагрузкиФайла(ОбъектФайл.ИдентификаторФайла);
	Если ЗначениеЗаполнено(Ответ.ДвоичныеДанныеФайла) Тогда
		ОписаниеФайла = Новый Структура("ИмяФайла,РасширениеФайла,ДвоичныеДанные,ХешСумма");
		ОписаниеФайла.ИмяФайла 			= ЗаменитьЗапрещенныеСимволыВИмениФайла(ОбъектФайл.ИмяФайла);
		ОписаниеФайла.РасширениеФайла 	= ОбъектФайл.Расширение;
		ОписаниеФайла.ДвоичныеДанные 	= Ответ.ДвоичныеДанныеФайла;
		ХешСумма = Неопределено;
		Если ОбъектФайл.Свойство("ХешСумма", ХешСумма) Тогда
			ОписаниеФайла.ХешСумма = ХешСумма;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ОписаниеФайла 	= ОписаниеФайла;
	Результат.ОписаниеОшибки 	= Ответ.ОписаниеОшибки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьЭлектронныйДокумент(МенеджерОбмена, ЭлектронныйДокумент)
	
	Результат = Новый Структура("ОписаниеФайла,ОписаниеОшибки");
	
	ИсходныйДокумент = ЭлектронныйДокумент.ИсходныйДокумент;
	РезультатЗагрузки = ЗагрузитьФайл(МенеджерОбмена, ИсходныйДокумент);
	Результат.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
	Если Не ЗначениеЗаполнено(РезультатЗагрузки.ОписаниеФайла) Тогда
		Возврат Результат;
	КонецЕсли;
	ОписаниеФайла = РезультатЗагрузки.ОписаниеФайла;
	
	ОригиналВMXL = ЗначениеСвойстваОбъекта(ЭлектронныйДокумент, "ОригиналВMXL");
	Если ЗначениеЗаполнено(ОригиналВMXL) Тогда
		Если ЗначениеЗаполнено(ЭлектронныйДокумент.ОригиналВMXL.ИдентификаторФайла) Тогда
			РезультатЗагрузки = ЗагрузитьФайл(МенеджерОбмена, ЭлектронныйДокумент.ОригиналВMXL);
			Результат.ОписаниеОшибки = РезультатЗагрузки.ОписаниеОшибки;
			Если Не ЗначениеЗаполнено(РезультатЗагрузки.ОписаниеФайла) Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		ОписаниеФайла.Вставить("ОригиналВMXL", РезультатЗагрузки.ОписаниеФайла.ДвоичныеДанные);
	КонецЕсли;
	
	Результат.ОписаниеФайла = ОписаниеФайла;
	
	Возврат Результат;

КонецФункции

Функция ЗаменитьЗапрещенныеСимволыВИмениФайла(ИсходнаяСтрока, ЗаменятьНа = "_")
	
	ЗапрещенныеСимволы = СтрРазделить("@,\,/,:,*,?,"",<,>,|,+", ",");
	
	СтрокаПослеЗамены = СокрЛП(ИсходнаяСтрока);
	
	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл
		СтрокаПослеЗамены = СтрЗаменить(СтрокаПослеЗамены, ЗапрещенныйСимвол, ЗаменятьНа);
	КонецЦикла;
	
	Если СтрЗаканчиваетсяНа(СтрокаПослеЗамены, ".") Тогда
		СтрокаПослеЗамены = Лев(СтрокаПослеЗамены, СтрДлина(СтрокаПослеЗамены) - 1) + ЗаменятьНа;
	КонецЕсли;
	
	Возврат СтрокаПослеЗамены;
	
КонецФункции

Процедура ОбработатьРезультатыСогласования(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка, ПовторнаяОбработка)
	
	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования;
	Если ПовторнаяОбработка Тогда
		Объекты = НеобработанныеОбъекты(Приложение, ТипОбъекта);
	Иначе
		ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
		Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторДокумента", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(72)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 			= Объект;
		НоваяСтрока.ОписаниеОшибки 	= ОшибкиКонвертацииОбъекта(Объект); 
		Если ЗначениеЗаполнено(Объект.ИдентификаторЭлектронногоДокумента) Тогда
			НоваяСтрока.ИдентификаторДокумента = Объект.ИдентификаторЭлектронногоДокумента;
		Иначе
			НоваяСтрока.ИдентификаторДокумента = Объект.ИдентификаторДокумента;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыДокументов = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторДокумента");
	ДанныеДляОбработки =  ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеДляОбработкиРезультатовСогласования(ИдентификаторыДокументов);
	
	ДокументыКЭДОДляКонтроляВеденияУчета = Новый Массив();
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		Если Не ПовторнаяОбработка Тогда
			ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		КонецЕсли;
		
		Объект = СтрокаТЗ.Объект;
		ИдентификаторОбъекта = Объект.ИдентификаторОбъекта;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторОбъекта, ТипОбъекта, ОписаниеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДанныеДокументаКЭДО = ДанныеДляОбработки.ДокументыКЭДО.Найти(СтрокаТЗ.ИдентификаторДокумента, "ИдентификаторДокумента");
		Если ДанныеДокументаКЭДО = Неопределено Тогда
			Если Не ПовторнаяОбработка Тогда
				ШаблонОписания = НСтр("ru = 'Не найден документ с идентификатором %1.';
										|en = 'A document with the %1 ID is not found.'");
				Описание = СтрШаблон(ШаблонОписания, СтрокаТЗ.ИдентификаторДокумента);
				ЗарегистрироватьНеобработанныйОбъект(ИдентификаторОбъекта, Объект, ТипОбъекта, Описание, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭлектронныйДокумент = ДанныеДокументаКЭДО.ЭлектронныйДокумент;
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ТекстСообщения = НСтр("ru = 'Нет электронного документа.';
									|en = 'There is no electronic document.'");
			ЗаписатьПредупреждениеПроверкиВерсийФайлов(ИменаСобытийЖР, ТипОбъекта, ДанныеДокументаКЭДО.Ссылка, ТекстСообщения);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Проверка соответствия электронного документа и результата согласования,
		// если не соответствует, не обрабатываем результат согласования.
		Если ЗначениеЗаполнено(Объект.ВерсияДокумента) Тогда
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлектронныйДокумент, Ложь);
			Если ДвоичныеДанныеФайла = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка получения данных электронного документа.';
										|en = 'An error occurred when receiving the electronic document data.'");
				ЗаписатьПредупреждениеПроверкиВерсийФайлов(ИменаСобытийЖР, ТипОбъекта, ДанныеДокументаКЭДО.Ссылка, ТекстСообщения);
				Если ПовторнаяОбработка Тогда
					УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ВерсияФайла = ИнтеграцияУправлениеПерсоналом.ХешСуммаДвоичныхДанных(ДвоичныеДанныеФайла);
			Если ВерсияФайла <> ВРег(Объект.ВерсияДокумента) Тогда
				ТекстСообщения = НСтр("ru = 'Версии файлов различаются.';
										|en = 'The file versions are different.'");
				ЗаписатьПредупреждениеПроверкиВерсийФайлов(ИменаСобытийЖР, ТипОбъекта, ДанныеДокументаКЭДО.Ссылка, ТекстСообщения);
				Если ПовторнаяОбработка Тогда
					УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗарегистрироватьРезультатСогласования(Объект, ДанныеДокументаКЭДО, ДанныеДляОбработки);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОбъекта), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
			ДокументыКЭДОДляКонтроляВеденияУчета.Добавить(ДанныеДокументаКЭДО.Ссылка);
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, ИдентификаторОбъекта, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, ИдентификаторОбъекта, ТипОбъекта, ПодробноеПредставлениеОшибки);
			Если ПовторнаяОбработка Тогда
				УдалитьНеобработанныйОбъект(ИдентификаторОбъекта, ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		КонецПопытки;
	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументыКЭДОДляКонтроляВеденияУчета) Тогда
		КадровыйЭДОВызовСервера.ПроверитьГотовностьДокументовДляАрхивирования(ДокументыКЭДОДляКонтроляВеденияУчета);
	КонецЕсли;
	
	Если Не ПовторнаяОбработка Тогда
		РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
		РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	КонецЕсли;

КонецПроцедуры 

Процедура ОбработатьПравилаСогласования(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПравилоСогласования;
	ИмяКоллекции = ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияИзменений", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаОбъектов.Колонки.Добавить("ИдентификаторПравила", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаОбъектов.Колонки.Добавить("ОписаниеОшибки");
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 					= Объект;
		НоваяСтрока.ОписаниеОшибки 			= ОшибкиКонвертацииОбъекта(Объект); 
	КонецЦикла;
	
	Идентификаторы = ТаблицаОбъектов.ВыгрузитьКолонку("ИдентификаторПравила");
	ЗагруженныеПравила = ИнтеграцияУправлениеПерсоналомСлужебный.ЗагруженныеПравилаСогласования(Идентификаторы); 
	
	Для Каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		
		ВерсияИзменений = ?(ВерсияИзменений < СтрокаТЗ.ВерсияИзменений, СтрокаТЗ.ВерсияИзменений, ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, СтрокаТЗ.ИдентификаторПравила, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторПравила, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ЗагрузитьПравилоСогласования(Объект, ЗагруженныеПравила);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЗ.ИдентификаторПравила), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, СтрокаТЗ.ИдентификаторПравила, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторПравила, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаОбъектов.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;

КонецПроцедуры

Процедура ОбработатьЗаявкиЗарплатаСразу(МенеджерОбмена, ОбъектВсеИзменения, РезультатОбработки, ПовторнаяЗагрузка)

	ВерсияИзменений = РезультатОбработки.ВерсияИзменений;
	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	ТипОбъектаИмяВОбъектеВсеИзменения = МенеджерОбмена.МенеджерКонвертации.ТипОбъектаИмяВОбъектеВсеИзменения;
	
	ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаявкаЗарплатаСразу;
	ИмяКоллекции 	= ТипОбъектаИмяВОбъектеВсеИзменения[ТипОбъекта];
	
	Объекты = ЗначениеСвойстваОбъекта(ОбъектВсеИзменения, ИмяКоллекции);
	Если Не ЗначениеЗаполнено(Объекты) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаявок = Новый ТаблицаЗначений;
	ТаблицаЗаявок.Колонки.Добавить("Объект");
	ТаблицаЗаявок.Колонки.Добавить("ВерсияИзменений", 		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТаблицаЗаявок.Колонки.Добавить("ИдентификаторЗаявки", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаЗаявок.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаЗаявок.Колонки.Добавить("ОписаниеОшибки");
	
	Для каждого Объект Из Объекты Цикл 
		НоваяСтрока = ТаблицаЗаявок.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Объект);
		НоваяСтрока.Объект 				= Объект;
		НоваяСтрока.ОписаниеОшибки 		= ОшибкиКонвертацииОбъекта(Объект);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаЗаявок) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка повторной загрузки
	Идентификаторы = ТаблицаЗаявок.ВыгрузитьКолонку("ИдентификаторЗаявки");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
	|	ДокументКадровогоЭДО.ИдентификаторЗаявкиКабинетСотрудника КАК ИдентификаторЗаявки
	|ИЗ
	|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
	|ГДЕ
	|	ДокументКадровогоЭДО.ИдентификаторЗаявкиКабинетСотрудника В(&Идентификаторы)";
	РезультатЗапроса = Запрос.Выполнить();
	ИдентификаторДокумент = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторДокумент.Вставить(Выборка.ИдентификаторЗаявки, Выборка.Ссылка);
	КонецЦикла;
	// Проверка повторной загрузки

	ТаблицаЗаявок.Колонки.Добавить("ЭлектронныйДокумент");
	Для каждого СтрокаТЗ Из ТаблицаЗаявок Цикл
		
		ВерсияИзменений = Макс(ВерсияИзменений, СтрокаТЗ.ВерсияИзменений);
		
		Объект = СтрокаТЗ.Объект;
		
		Если ИдентификаторДокумент[СтрокаТЗ.ИдентификаторЗаявки] <> Неопределено Тогда
			// повторная загрузка
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ОписаниеОшибки) Тогда
			РезультатОбработки.БылиОшибки = Истина; 
			ОписаниеОшибки = ОписаниеОшибкиКонвертации(СтрокаТЗ.ОписаниеОшибки);
			ЗарегистрироватьОшибкуКонвертацииОбъекта(ИменаСобытийЖР, ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, ТипОбъекта, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		ОписаниеОшибокПолученияФайлов = "";
		ЭлектронныйДокумент = Неопределено;
		Если Объект.Свойство("ЭлектронныйДокумент") И ЗначениеЗаполнено(Объект.ЭлектронныйДокумент) Тогда
			Ответ = ЗагрузитьЭлектронныйДокумент(МенеджерОбмена, Объект.ЭлектронныйДокумент);
			Если ЗначениеЗаполнено(Ответ.ОписаниеОшибки) Тогда
				ОписаниеОшибокПолученияФайлов = Ответ.ОписаниеОшибки;
			КонецЕсли;
			Если ЗначениеЗаполнено(Ответ.ОписаниеФайла) Тогда
				ЭлектронныйДокумент = Ответ.ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЗ.ЭлектронныйДокумент = ЭлектронныйДокумент;
		
		Если ЗначениеЗаполнено(ОписаниеОшибокПолученияФайлов) Тогда
			РезультатОбработки.БылиОшибки = Истина;
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ОписаниеОшибокПолученияФайлов);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, ТипОбъекта, ОписаниеОшибокПолученияФайлов);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ИнтеграцияУправлениеПерсоналомСлужебный.ОбработатьЗаявкуЗарплатаСразу(СтрокаТЗ);
			Если ПовторнаяЗагрузка Тогда
				ОтменитьРегистрациюНезагруженныхОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЗ.ИдентификаторЗаявки), ТипОбъекта, МенеджерОбмена);
			КонецЕсли;
		Исключение 
			РезультатОбработки.БылиОшибки = Истина;
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбработкиОбъекта(ИменаСобытийЖР, ТипОбъекта, СтрокаТЗ.ИдентификаторЗаявки, ПодробноеПредставлениеОшибки);
			ЗарегистрироватьНезагруженныйОбъект(МенеджерОбмена, СтрокаТЗ.ИдентификаторЗаявки, ТипОбъекта, ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	РезультатОбработки.ОбработаноОбъектов = РезультатОбработки.ОбработаноОбъектов + ТаблицаЗаявок.Количество();
	РезультатОбработки.ВерсияИзменений = ВерсияИзменений;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИзмененийДляВыгрузки

Функция ЗарегистрированныеИзменения(Приложение, ТипыОбъектов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР
	|		КОГДА ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВПравилах,
	|	ЕСТЬNULL(ВыгружаемыеОбъекты.УсловноВыгружается, ЛОЖЬ) КАК УсловноВыгружается
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ПО Изменения.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОбъектов)
	|	И НЕ Изменения.ВыгружатьУдаление";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДанныеОбъектовДляВыгрузки(МенеджерОбмена, ТаблицаИзменений, ТипОбъекта)
	
	ДанныеОбъектов = НовыеДанныеДляВыгрузки();
	Если Не ЗначениеЗаполнено(ТаблицаИзменений) Тогда
		Возврат ДанныеОбъектов;
	КонецЕсли;
	
	Приложение = МенеджерОбмена.Приложение;
	ПеречисленияМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	
	Если ТипОбъекта = ПеречисленияМенеджер.ФизическоеЛицо Тогда
		
		ДанныеОбъектов = ДанныеФизическихЛиц(Приложение, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Организация Тогда
		
		ДанныеОбъектов = ДанныеОрганизаций(ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Подразделение Тогда
		
		ДанныеОбъектов = ДанныеПодразделений(Приложение, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Должность Тогда
		
		ДанныеОбъектов = ДанныеДолжностей(ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ДолжностьПоШтатномуРасписанию Тогда
		
		ДанныеОбъектов = ДанныеШтатногоРасписания(Приложение, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.Сотрудник Тогда
		
		ДанныеОбъектов = ДанныеСотрудников(Приложение, ТаблицаИзменений);
		
	ИначеЕсли ТипОбъекта = ПеречисленияМенеджер.ГрафикРаботы Тогда
		
		ДанныеОбъектов = ДанныеГрафиковРаботыСотрудников(ТаблицаИзменений, Приложение);
		
	КонецЕсли;
	
	Возврат ДанныеОбъектов;
	
КонецФункции

Функция ЗарегистрированоВыгрузитьУдаление(Приложение)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|ГДЕ
	|	Изменения.ВыгружатьУдаление";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область РегистрацияОтменаРегистрацииИзменений

// Отменяет регистрацию изменений по результатам выгрузки.
//
// Параметры:
// 		Данные
//
Процедура ОтменитьРегистрациюИзменений(Приложение, ТаблицаОбработано, ТаблицаИзменений, ОтменитьРегистрацию) Экспорт
	
	Если ЗначениеЗаполнено(ТаблицаОбработано) Тогда
		ТаблицаИзменений.Индексы.Добавить("Ссылка,ТипОбъекта");
		Отбор = Новый Структура("Ссылка,ТипОбъекта");
		Для каждого СтрокаТЗ Из ТаблицаОбработано Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
			НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Отбор);
			ВерсияДанных = "";
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ВерсияДанных = НайденныеСтроки[0].ВерсияДанных;
			КонецЕсли;
			НоваяСтрока = ОтменитьРегистрацию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ВерсияДанных = ВерсияДанных;
		КонецЦикла;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОтменитьРегистрацию) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрыСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИмяТаблицы = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрыСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.ИсточникДанных = ОтменитьРегистрацию;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОтменитьРегистрацию", ОтменитьРегистрацию);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтменитьРегистрацию.Ссылка КАК Ссылка,
		|	ОтменитьРегистрацию.ТипОбъекта КАК ТипОбъекта,
		|	ОтменитьРегистрацию.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВТОтменитьРегистрацию
		|ИЗ
		|	&ОтменитьРегистрацию КАК ОтменитьРегистрацию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтменитьИзменения.Ссылка КАК Ссылка,
		|	ОтменитьИзменения.ТипОбъекта КАК ТипОбъекта
		|ИЗ
		|	ВТОтменитьРегистрацию КАК ОтменитьИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
		|		ПО ОтменитьИзменения.Ссылка = ИзмененияДляОбмена.Ссылка
		|			И ОтменитьИзменения.ТипОбъекта = ИзмененияДляОбмена.ТипОбъекта
		|			И ОтменитьИзменения.ВерсияДанных = ИзмененияДляОбмена.ВерсияДанных";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", ИмяТаблицы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведенийМенеджер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Выборка.Ссылка;
			МенеджерЗаписи.ТипОбъекта = Выборка.ТипОбъекта;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации изменений.
			|%1';
			|en = 'An error occurred when canceling registration changes.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюУсловноПубликуемыхОбъектов(Приложение) Экспорт
	
	ОкончаниеВыгрузки = НачалоДня(ТекущаяДатаСеанса());
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		
		ИмяТаблицы = "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал";
		ИмяТаблицыИзменения = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрыСведенийМенеджер = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал;
		
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		
		ИмяТаблицы = "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника";
		ИмяТаблицыИзменения = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрыСведенийМенеджер = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника;
		
		Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ОкончаниеВыгрузки = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
	|		ПО ВыгружаемыеОбъекты.Ссылка = ИзмененияДляОбмена.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается
	|	И ИзмененияДляОбмена.ВыгружатьУдаление ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", ИмяТаблицыИзменения);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			Блокировка.Заблокировать();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведенийМенеджер.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Ссылка = Выборка.Ссылка;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации условно выгружаемых объектов.
			|%1';
			|en = 'An error occurred when canceling registration of objects to be exported conditionally.
			|%1'");
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
			ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	// Обработка окончания выгрузки физических лиц.
	Запрос.УстановитьПараметр("ОкончаниеВыгрузки", ОкончаниеВыгрузки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
	|			ПО Сотрудники.Ссылка = ИзмененияДляОбмена.Ссылка
	|				И (ИзмененияДляОбмена.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник))
	|		ПО ВыгружаемыеОбъекты.Ссылка = Сотрудники.ФизическоеЛицо
	|ГДЕ
	|	ВыгружаемыеОбъекты.ОкончаниеВыгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВыгружаемыеОбъекты.ОкончаниеВыгрузки <= &ОкончаниеВыгрузки
	|	И ИзмененияДляОбмена.ВерсияДанных ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|			ПО Сотрудники.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведенийМенеджер.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Ссылка = Выборка.Ссылка;
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка отмены регистрации условно выгружаемых объектов.
			|%1';
			|en = 'An error occurred when canceling registration of objects to be exported conditionally.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти 

#Область НеобработанныеОбъекты

Функция НеобработанныеОбъекты(Приложение, ТипОбъекта)
	
	Объекты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеобработанныеОбъекты.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом КАК НеобработанныеОбъекты
	|ГДЕ
	|	НеобработанныеОбъекты.Приложение = &Приложение
	|	И НеобработанныеОбъекты.ТипОбъекта = &ТипОбъекта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объекты.Добавить(Выборка.Объект.Получить());
	КонецЦикла;
	
	Возврат Объекты;

КонецФункции

Процедура ЗарегистрироватьНеобработанныйОбъект(Идентификатор, Объект, ТипОбъекта, Описание, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	СвойстваОбъекта = Новый Структура("Организация,ФизическоеЛицо");
	ЗаполнитьЗначенияСвойств(СвойстваОбъекта, Объект);
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.РезультатСогласования Тогда
		СвойстваРезультатаСогласования = Новый Структура("Подписант");
		ЗаполнитьЗначенияСвойств(СвойстваРезультатаСогласования, Объект);
		СвойстваОбъекта.ФизическоеЛицо = СвойстваРезультатаСогласования.Подписант;
	ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Оффер Тогда
		СвойстваОффера = Новый Структура("Кандидат");
		ЗаполнитьЗначенияСвойств(СвойстваОффера, Объект);
		СвойстваОбъекта.ФизическоеЛицо = СвойстваОффера.Подписант;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Объект 			= Новый ХранилищеЗначения(Объект);
		МенеджерЗаписи.Описание 		= Описание;
		МенеджерЗаписи.Организация 		= СвойстваОбъекта.Организация;
		МенеджерЗаписи.ФизическоеЛицо 	= СвойстваОбъекта.ФизическоеЛицо;
		МенеджерЗаписи.ДатаРегистрации 	= ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = НСтр("ru = 'Ошибка регистрации необработанного объекта.';
								|en = 'An error occurred when registering an unprocessed object.'");
		ЗаписатьОшибку(ИменаСобытийЖР, ОписаниеОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура УдалитьНеобработанныйОбъект(Идентификатор, ТипОбъекта, МенеджерОбмена)

	Приложение 		= МенеджерОбмена.Приложение;
	ИменаСобытийЖР 	= МенеджерОбмена.ИменаСобытийЖР;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор 	= Идентификатор;
		МенеджерЗаписи.Приложение 		= Приложение;
		МенеджерЗаписи.ТипОбъекта 		= ТипОбъекта;
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		Описание = НСтр("ru = 'Ошибка отмены регистрации необработанного объекта.';
						|en = 'An error occurred when canceling registration of the unprocessed object.'");
		ЗаписатьОшибку(ИменаСобытийЖР, Описание, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхОбъектов 

Функция ДанныеФизическихЛиц(Приложение, ТаблицаИзменений)
	
	ФизическиеЛица = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ФизическиеЛицаСОшибками = ИнтеграцияУправлениеПерсоналом.ОбъектыСБлокирующимиОшибками(Приложение, ФизическиеЛица, ТипОбъекта);
	ФизическиеЛицаБезОшибок = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛица, ФизическиеЛицаСОшибками);
	ФизическиеЛицаКВыгрузке = ОграниченныйСписокФизическихЛиц(Приложение, ФизическиеЛицаБезОшибок);
	
	Возврат ДанныеФизическихЛицДляВыгрузки(Приложение, ФизическиеЛицаКВыгрузке, Истина);
	
КонецФункции

Функция ДанныеФизическихЛицДляВыгрузки(Приложение, ФизическиеЛица, ПроверятьОшибкиЗаполнения) Экспорт

	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеФизическихЛиц();
	
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеФизическихЛиц(ФизическиеЛица, Приложение);
	
	АдресаФотографий 		= Данные.АдресаФотографий;
	КонтактнаяИнформация 	= Данные.КонтактнаяИнформация;
	КадровыеДанные 			= Данные.КадровыеДанные;
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из КадровыеДанные Цикл
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиФизическогоЛица(СтрокаТЗ, АдресаФотографий, КонтактнаяИнформация);
		Если ПроверятьОшибкиЗаполнения Тогда
			РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхФизическогоЛица(ДанныеДляПроверки, Истина);
			Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
				ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
				ОшибкиЗаполнения.Вставить(СтрокаТЗ.ФизическоеЛицо, ОшибкиОбъекта);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляПроверки);
		
		НоваяСтрока.МестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(СтрокаТЗ.МестоРождения);
		НоваяСтрока.СклоненияФИО = СклоненияФИО(СтрокаТЗ.ФИОПолные, СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.Пол);
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ДокументВид) Тогда
			НоваяСтрока.ДокументУдостоверяющийЛичность = ДокументУдостоверяющийЛичность(СтрокаТЗ);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЗ.Страна) Тогда
			НоваяСтрока.Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЗ.Страна, "Код");
		Иначе
			НоваяСтрока.Страна = "";	
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			Результат.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеОрганизаций(ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеОрганизаций();
	
	Организации = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеОрганизаций(Организации);
	
	Для каждого СтрокаТЗ Из Данные Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПодразделений(Приложение, ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеПодразделений();
	
	Подразделения = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеПодразделений(Подразделения, Приложение);
	
	Для каждого СтрокаТЗ Из Данные Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Склонения = СклоненияПредставленияОбъекта(СтрокаТЗ.Наименование, СтрокаТЗ.Подразделение);
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеДолжностей(ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеДолжностей();
	
	Должности = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Должности", Должности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Должности.Ссылка КАК Должность,
	|	Должности.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Должности КАК Должности
	|ГДЕ
	|	Должности.Ссылка В(&Должности)";
	Данные = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЗ Из Данные Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.Склонения = СклоненияПредставленияОбъекта(СтрокаТЗ.Наименование, СтрокаТЗ.Должность);
	КонецЦикла;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат; 

КонецФункции

Функция ДанныеШтатногоРасписания(Приложение, ТаблицаИзменений)
	
	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеШтатногоРасписания();
	
	ПозицииШР = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеШтатногоРасписания(ПозицииШР);
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из Данные Цикл
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиПозицииШтатногоРасписания(СтрокаТЗ);
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхПозицииШтатногоРасписания(ДанныеДляПроверки);
		Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
			ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, ОшибкиОбъекта);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			Результат.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

Функция ДанныеСотрудников(Приложение, ТаблицаИзменений)
	
	ТипОбъектаСотрудник = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	
	Результат = НовыеДанныеДляВыгрузки();
	
	ИспользоватьРабочиеМестаОхраныТруда = Ложь;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИспользоватьРабочиеМестаОхраныТруда = ИнтеграцияКабинетСотрудника.ИспользоватьРабочиеМестаОхраныТруда();
	КонецЕсли;
	
	ТаблицаДанных 		= НоваяТаблицаДанныеСотрудников();
	ОтменитьРегистрацию = ТаблицаИзменений.СкопироватьКолонки("Ссылка,ТипОбъекта,ВерсияДанных");
	
	Отбор = Новый Структура("УсловноВыгружается", Истина);
	УсловноВыгружаемые = ТаблицаИзменений.Скопировать(Отбор);
	СотрудникиНеВыгружать = Новый Массив;
	Если ЗначениеЗаполнено(УсловноВыгружаемые) Тогда
		ОбъектыВыгружались = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъектаСотрудник, УсловноВыгружаемые.ВыгрузитьКолонку("Ссылка"));
		ОбъектыВыгружались = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ОбъектыВыгружались);
		Для каждого СтрокаТЗ Из УсловноВыгружаемые Цикл
			Если ОбъектыВыгружались[СтрокаТЗ.Ссылка] = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ОтменитьРегистрацию.Добавить(), СтрокаТЗ);
				СотрудникиНеВыгружать.Добавить(СтрокаТЗ.Ссылка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Сотрудники = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Сотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Сотрудники, СотрудникиНеВыгружать);
	
	ДанныеСотрудников = ИнтеграцияУправлениеПерсоналом.ДанныеСотрудников(Сотрудники, ИспользоватьРабочиеМестаОхраныТруда);
	
	Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ДолжностьПоШтатномуРасписанию", Истина);
	ПозицииПравилВыгрузки = ИнтеграцияУправлениеПерсоналом.ПозицииПравилВыгрузки(Приложение, Позиции);
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеСотрудников, "ФизическоеЛицо", Истина);
	ТипОбъектаФизическоеЛицо = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ФизическиеЛицаВыгружались = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъектаФизическоеЛицо, ФизическиеЛица);
	ФизическиеЛицаВыгружались = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛицаВыгружались);
	ФизическиеЛицаИсключения = ИнтеграцияУправлениеПерсоналом.ФизическиеЛицаИсключения(Приложение);
	
	ПроверяемыеОбъекты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, ФизическиеЛица);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, Позиции);
	ОшибкиЗаполненияОбъектов = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектов(Приложение, ПроверяемыеОбъекты);
	
	Отбор = Новый Структура("БлокирующаяОшибка,ТипОбъекта", Истина);
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ОшибкиФизическихЛиц = ОшибкиЗаполненияОбъектов.Скопировать(Отбор);
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	ОшибкиПозиций = ОшибкиЗаполненияОбъектов.Скопировать(Отбор); 
	
	ОшибкиФизическихЛиц.Индексы.Добавить("Ссылка");
	ОшибкиПозиций.Индексы.Добавить("Ссылка");
	Отбор = Новый Структура("Ссылка"); 
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	УправленческаяОрганизация = ИнтеграцияУправлениеПерсоналом.УправленческаяОрганизация();
	
	СчОбъектов = 1;
	Для каждого СтрокаТЗ Из ДанныеСотрудников Цикл
		
		Если СчОбъектов = 500 Тогда
			Прервать;
		КонецЕсли;
		
		Если ФизическиеЛицаВыгружались[СтрокаТЗ.ФизическоеЛицо] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДляПроверки = ИнтеграцияУправлениеПерсоналом.ДанныеДляПроверкиСотрудника(СтрокаТЗ);
		
		Отбор.Ссылка = СтрокаТЗ.ФизическоеЛицо;
		ОшибкиФизическогоЛица = ОшибкиФизическихЛиц.НайтиСтроки(Отбор);
		
		Отбор.Ссылка = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
		ОшибкиПозиции = ОшибкиПозиций.НайтиСтроки(Отбор);
		
		РезультатПроверки = ИнтеграцияУправлениеПерсоналом.РезультатПроверкиДанныхСотрудника(ДанныеДляПроверки, ОшибкиФизическогоЛица, ОшибкиПозиции);
		Если ЗначениеЗаполнено(РезультатПроверки[Приложение].БлокирующиеОшибки) Тогда
			ОшибкиОбъекта = ИнтеграцияУправлениеПерсоналом.ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.Сотрудник, ОшибкиОбъекта);
			Продолжить;
		КонецЕсли;
		
		ТарифнаяСтавка = Новый Структура("ПоказательТарифнойСтавки,Сумма");
		ТарифнаяСтавка.ПоказательТарифнойСтавки = СтрокаТЗ.ПоказательТарифнойСтавки;
		ТарифнаяСтавка.Сумма 					= СтрокаТЗ.РазмерТарифнойСтавки;
		
		Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
		СкрыватьВСписках = Ложь;
		Если СтрокаТЗ.Организация = УправленческаяОрганизация Тогда
			СкрыватьВСписках = Истина;
			Уволен = Истина;
		ИначеЕсли ФизическиеЛицаИсключения[СтрокаТЗ.ФизическоеЛицо] = Истина Тогда
			СкрыватьВСписках = Ложь;
		ИначеЕсли ФизическиеЛицаИсключения[СтрокаТЗ.ФизическоеЛицо] = Ложь Тогда
			СкрыватьВСписках = Истина;
		Иначе
			СкрыватьВСписках = ?(ПозицииПравилВыгрузки[СтрокаТЗ.ДолжностьПоШтатномуРасписанию] = Неопределено, Истина, Ложь);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ТарифнаяСтавка 		= ТарифнаяСтавка;
		НоваяСтрока.Уволен 				= Уволен;
		НоваяСтрока.СкрыватьВСписках 	= СкрыватьВСписках;
		
		СчОбъектов = СчОбъектов + 1;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
		Попытка
			ИнтеграцияУправлениеПерсоналом.ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта);
		Исключение
			Результат.БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Результат.ТаблицаДанных = ТаблицаДанных;
	Результат.ОтменитьРегистрацию = ОтменитьРегистрацию;
	
	Возврат Результат;
	
КонецФункции

Функция ДокументУдостоверяющийЛичность(ДанныеДокумента)
	
	ИменаСвойств = "ВидДокумента,Серия,Номер,ДатаВыдачи,КемВыдан,КодПодразделения";
	Описание = Новый Структура(ИменаСвойств);
	Описание.ВидДокумента 		= ДанныеДокумента.ДокументВид;
	Описание.Серия 				= ДанныеДокумента.ДокументСерия;
	Описание.Номер 				= ДанныеДокумента.ДокументНомер;
	Описание.ДатаВыдачи 		= ДанныеДокумента.ДокументДатаВыдачи;
	Описание.КемВыдан 			= ДанныеДокумента.ДокументКемВыдан;
	Описание.КодПодразделения 	= ДанныеДокумента.ДокументКодПодразделения;
	
	Возврат Описание;

КонецФункции

Функция ОграниченныйСписокФизическихЛиц(Приложение, ФизическиеЛица)
	
	Если ФизическиеЛица.Количество() <= 500 Тогда
		Возврат ФизическиеЛица;
	КонецЕсли;
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ВыгруженныеФизическиеЛица = ИнтеграцияУправлениеПерсоналом.ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, ФизическиеЛица);
	// Получим физических лиц, которые еще не выгружались.
	ФизическиеЛицаДляВыгрузки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизическиеЛица, ВыгруженныеФизическиеЛица);
	
	Если ФизическиеЛицаДляВыгрузки.Количество() < 500 Тогда
		Добавить = 500 - ФизическиеЛицаДляВыгрузки.Количество();
		Для каждого ФизическоеЛицо Из ВыгруженныеФизическиеЛица Цикл
			Если Добавить = 0 Тогда
				Прервать;
			КонецЕсли;
			ФизическиеЛицаДляВыгрузки.Добавить(ФизическоеЛицо);
			Добавить = Добавить - 1;
		КонецЦикла;
	Иначе
		ФизическиеЛицаДляВыгрузки = ОбщегоНазначенияБЗККлиентСервер.СрезМассива(ФизическиеЛицаДляВыгрузки, 0, 499);
	КонецЕсли;
	
	Возврат ФизическиеЛицаДляВыгрузки;

КонецФункции

Функция ДанныеГрафиковРаботыСотрудников(ТаблицаИзменений, Приложение)

	Результат = НовыеДанныеДляВыгрузки();
	ТаблицаДанных = НоваяТаблицаДанныеГрафиковРаботыСотрудников();
	
	ГрафикиРаботыСотрудников = ТаблицаИзменений.ВыгрузитьКолонку("Ссылка");
	Данные = ИнтеграцияУправлениеПерсоналом.ДанныеГрафиковРаботыСотрудников(ГрафикиРаботыСотрудников, Приложение);
	
	Если ЗначениеЗаполнено(Данные) Тогда
		Для каждого СтрокаТЗ Из Данные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;

	Результат.ТаблицаДанных = ТаблицаДанных;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыйРезультатЗагрузкиИзменений() Экспорт

	Возврат Новый Структура("БылиОшибки, ОбъектВсеИзменения", Ложь);

КонецФункции

Функция НоваяТаблицаОбработано() Экспорт

	ТаблицаОбработано = Новый ТаблицаЗначений;
	ТаблицаОбработано.Колонки.Добавить("Ссылка");
	ТаблицаОбработано.Колонки.Добавить("ТипОбъекта");
	
	Возврат ТаблицаОбработано;

КонецФункции

Функция НоваяТаблицаЗначений(ИменаКолонокСтрока) Экспорт
	
	Разделители = СтрШаблон("%1%2",Символы.ПС,",");
	ИменаКолонок = СтрРазделить(ИменаКолонокСтрока,Разделители, Ложь);
	Таблица = Новый ТаблицаЗначений;
	Для каждого ИмяКолонки Из ИменаКолонок Цикл
		Таблица.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Возврат Таблица;

КонецФункции

Функция НовыеДанныеДляВыгрузки() Экспорт

	Данные = Новый Структура;
	Данные.Вставить("ТаблицаДанных");
	Данные.Вставить("ОтменитьРегистрацию", Новый Массив);
	Данные.Вставить("БылиОшибки", Ложь);
	
	Возврат Данные;

КонецФункции

Функция НоваяТаблицаДанныеФизическихЛиц()
	
	ИменаКолонок = "
	|ФизическоеЛицо,
	|Фамилия,Имя,Отчество,Инициалы,
	|Пол,ДатаРождения,МестоРожденияПредставление,
	|ИНН,СтраховойНомерПФР,
	|ТелефонРабочийПредставление,ТелефонМобильныйПредставление,EMailПредставление,
	|АдресПоПропискеПредставление,АдресМестаПроживанияПредставление,
	|ДокументУдостоверяющийЛичность,
	|Фотография,
	|СклоненияФИО,
	|АдресФотографии,
	|ДатаОтключенияКабинетСотрудника,
	|Страна";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеОрганизаций()
	
	ИменаКолонок = "
	|Организация,
	|Наименование,
	|ИНН,
	|ГоловнаяОрганизация,
	|ОбособленноеПодразделение,
	|НаименованиеПолное
	|НаименованиеСокращенное
	|ОГРН
	|КПП
	|Руководитель
	|ДолжностьРуководителя";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеПодразделений()

	ИменаКолонок = "
	|Подразделение,
	|Наименование,
	|Код,
	|Родитель,
	|Руководитель,
	|Порядок,
	|Склонения";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);	

КонецФункции

Функция НоваяТаблицаДанныеДолжностей()

	ИменаКолонок = "
	|Должность,
	|Наименование,
	|Склонения";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеШтатногоРасписания()

	ИменаКолонок = "
	|ДолжностьПоШтатномуРасписанию,
	|Наименование,
	|Организация,Подразделение,Должность";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеСотрудников()
	
	ИменаКолонок = "
	|Сотрудник,ФизическоеЛицо,
	|Организация,Подразделение,Должность,ДолжностьПоШтатномуРасписанию
	|ВидЗанятости,ДатаПриема,РабочееМестоПериодРегистрации,
	|ГрафикРаботы,ТарифнаяСтавка,
	|Уволен,СкрыватьВСписках,
	|КлассУсловийТруда,РабочееМестоОхраныТруда,
	|ТабельныйНомер";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

Функция НоваяТаблицаДанныеГрафиковРаботыСотрудников()

	ИменаКолонок = "
	|ГрафикРаботы,
	|Наименование,
	|ПраздничныеДни";
	
	Возврат НоваяТаблицаЗначений(ИменаКолонок);

КонецФункции

#КонецОбласти

#Область ПубличныеИдентификаторы

Функция ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта) Экспорт
	
	ИдентификаторСсылка = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Идентификаторы) Тогда
		Возврат ИдентификаторСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПубличныеИдентификаторы.Ссылка КАК Ссылка,
	|	ПубличныеИдентификаторы.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК ПубличныеИдентификаторы
	|ГДЕ
	|	ПубличныеИдентификаторы.ТипОбъекта = &ТипОбъекта
	|	И ПубличныеИдентификаторы.Идентификатор В(&Идентификаторы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторСсылка.Вставить(Выборка.Идентификатор, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ИдентификаторСсылка;
	
КонецФункции

Функция СсылкаПубличныйИдентификатор(Ссылки, ТипОбъекта) Экспорт

	СсылкаИдентификатор = Новый Соответствие;
	
	Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДокументНаПодпись Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументКадровогоЭДО.Ссылка КАК Ссылка,
		|	ДокументКадровогоЭДО.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.ДокументКадровогоЭДО КАК ДокументКадровогоЭДО
		|ГДЕ
		|	ДокументКадровогоЭДО.Ссылка В(&Ссылки)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СсылкаИдентификатор.Вставить(Выборка.Ссылка, СокрЛП(Выборка.ИдентификаторДокумента));
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
		Запрос.УстановитьПараметр("Ссылки", Ссылки);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка КАК Ссылка,
		|	Идентификаторы.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом КАК Идентификаторы
		|ГДЕ
		|	Идентификаторы.ТипОбъекта = &ТипОбъекта
		|	И Идентификаторы.Ссылка В(&Ссылки)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СсылкаИдентификатор.Вставить(Выборка.Ссылка, СокрЛП(Выборка.Идентификатор));
		КонецЦикла;
		
		НовыеИдентификаторы = Новый ТаблицаЗначений;
		НовыеИдентификаторы.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубличныйИдентификаторУправлениеПерсоналом.Тип));
		НовыеИдентификаторы.Колонки.Добавить("ТипОбъекта", 		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
		НовыеИдентификаторы.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
		
		СсылкиБезИдентификатора = Новый Массив;
		
		Для каждого Ссылка Из Ссылки Цикл
			Идентификатор = СсылкаИдентификатор[Ссылка];
			Если Не ЗначениеЗаполнено(Идентификатор) Тогда
				Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение
					И ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
					СсылкиБезИдентификатора.Добавить(Ссылка);
					Продолжить;
				ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Оффер Тогда
					СсылкиБезИдентификатора.Добавить(Ссылка);
					Продолжить;
				Иначе
					Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
				КонецЕсли;
				НоваяСтрока = НовыеИдентификаторы.Добавить();
				НоваяСтрока.Ссылка 			= Ссылка;
				НоваяСтрока.Идентификатор 	= Идентификатор;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				СсылкаИдентификатор.Вставить(Ссылка, Идентификатор);
			КонецЕсли;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(СсылкиБезИдентификатора) Тогда
			
			Идентификаторы = Новый Массив;
			Если ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение Тогда
				Идентификаторы = ИдентификаторыОрганизацииКакПодразделения(СсылкиБезИдентификатора);
			ИначеЕсли ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Оффер Тогда
				Идентификаторы = ИдентификаторыОфферы(СсылкиБезИдентификатора);
			КонецЕсли;
			Для каждого СтрокаТЗ Из Идентификаторы Цикл
				НоваяСтрока = НовыеИдентификаторы.Добавить();
				НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
				НоваяСтрока.Идентификатор 	= СтрокаТЗ.Идентификатор;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				СсылкаИдентификатор.Вставить(СтрокаТЗ.Ссылка, СтрокаТЗ.Идентификатор);
			КонецЦикла;
			
		КонецЕсли;
		
		Если НовыеИдентификаторы.Количество() > 0 Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом");
				ЭлементБлокировки.ИсточникДанных = НовыеИдентификаторы;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				
				Для каждого СтрокаТЗ Из НовыеИдентификаторы Цикл
					МенеджерЗаписи = РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаИдентификатор;
	
КонецФункции

Функция ИдентификаторыОрганизацииКакПодразделения(Ссылки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ИдентификаторыОрганизаций.Идентификатор, """") КАК Идентификатор
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника КАК ИдентификаторыОрганизаций
	|		ПО Организации.Ссылка = ИдентификаторыОрганизаций.Организация
	|ГДЕ
	|	Организации.Ссылка В(&Ссылки)";
	Идентификаторы = Запрос.Выполнить().Выгрузить();
	
	НовыеИдентификаторы = Новый ТаблицаЗначений;
	НовыеИдентификаторы.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НовыеИдентификаторы.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	Для каждого СтрокаТЗ Из Идентификаторы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЗ.Идентификатор) Тогда
			СтрокаТЗ.Идентификатор = Строка(Новый УникальныйИдентификатор);
			НоваяСтрока = НовыеИдентификаторы.Добавить();
			НоваяСтрока.Ссылка = СтрокаТЗ.Ссылка;
			НоваяСтрока.Идентификатор = СтрокаТЗ.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НовыеИдентификаторы) Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИдентификаторыОрганизацийКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = НовыеИдентификаторы;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Ссылка");
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из НовыеИдентификаторы Цикл
				МенеджерЗаписи = РегистрыСведений.ИдентификаторыОрганизацийКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Организация 		= СтрокаТЗ.Ссылка;
				МенеджерЗаписи.Идентификатор 	= СтрокаТЗ.Идентификатор;
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Идентификаторы;

КонецФункции

Функция ИдентификаторыОфферы(Ссылки)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Оффер.Ссылка КАК Ссылка,
	|	Оффер.ИдентификаторДокумента КАК Идентификатор
	|ИЗ
	|	Документ.Оффер КАК Оффер
	|ГДЕ
	|	Оффер.Ссылка В(&Ссылки)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти 

#Область ПроверкаДоступностиАдресаПоИмени

Функция ПроверятьДоступностьАдресаПоИмени(Приложение)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Если Константы.СервисКабинетСотрудникаВЛокальнойСети.Получить() Тогда
			Возврат Ложь;
		Иначе
			Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
			Если Не Настройки.АдресПриложенияПоИмениДоступен И ЗначениеЗаполнено(Настройки.АдресПриложенияПоИмени) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Константы.Приложение1СПерсоналВЛокальнойСети.Получить() Тогда
			Возврат Ложь;
		Иначе
			Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
			Если Не Настройки.АдресПриложенияПоИмениДоступен И ЗначениеЗаполнено(Настройки.АдресПриложенияПоИмени) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ПроверитьДоступностьАдресаПоИмени(Приложение, ВестиПротокол) Экспорт
	
	МенеджерОбмена = НовыйМенеджерОбмена(Приложение, ВестиПротокол);
	АдресПоИмениДоступен = МенеджерОбмена.ДоступностьАдресаПоИмени();
	Если АдресПоИмениДоступен Тогда
		УстановитьАдресПриложенияПоИмениДоступен(Приложение, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАдресПриложенияПоИмениДоступен(Приложение, ЗначениеДоступности)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьАдресПриложенияПоИмениДоступен(ЗначениеДоступности);
	Иначе
		РегистрыСведений.НастройкиПодключения1СПерсонал.УстановитьАдресПриложенияПоИмениДоступен(ЗначениеДоступности);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ДополнитьТаблицуРезультатамиВыгрузки(ТаблицаОбработано, РезультатВыгрузки, ТипОбъекта) Экспорт
	
	Для каждого Ссылка Из РезультатВыгрузки.Выгружено Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла;
	
	Для каждого Ссылка Из РезультатВыгрузки.ОтменитьРегистрацию Цикл
		НоваяСтрока = ТаблицаОбработано.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
	КонецЦикла; 

КонецПроцедуры

Функция ТипОбъектаРазмерПакета(Приложение) Экспорт
	
	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипОбъектаРазмерПакета = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиОбмена.ТипОбъекта КАК ТипОбъекта,
	|	НастройкиОбмена.РазмерПорции КАК РазмерПорции
	|ИЗ
	|	РегистрСведений.РазмерыПорцийОбменаУправлениеПерсоналом КАК НастройкиОбмена
	|ГДЕ
	|	НастройкиОбмена.Приложение = &Приложение
	|	И НастройкиОбмена.РазмерПорции > 0";
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из Таблица Цикл
		ТипОбъектаРазмерПакета.Вставить(СтрокаТЗ.ТипОбъекта, СтрокаТЗ.РазмерПорции);
	КонецЦикла;
	
	ТипОбъектаРазмерПакетаПоУмолчанию = ТипОбъектаРазмерПакетаПоУмолчанию();
	Для каждого КлючИЗначение Из ТипОбъектаРазмерПакетаПоУмолчанию Цикл
		Если ТипОбъектаРазмерПакета[КлючИЗначение.Ключ] = Неопределено Тогда
			ТипОбъектаРазмерПакета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипОбъектаРазмерПакета;
	
КонецФункции

Функция ТипОбъектаРазмерПакетаПоУмолчанию()

	МенеджерТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипОбъектаРазмерПакета = Новый Соответствие;
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.Подразделение, 					10);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.РасчетныйЛисток, 				30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ПраздничныеДниГрафикаРаботы, 	5);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ГрафикОтпусков, 					30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ПлановоеУдержание, 				30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.БудущееИзменениеОстаткаОтпусков, 30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.ДокументНаПодпись, 				30);
	ТипОбъектаРазмерПакета.Вставить(МенеджерТипОбъекта.СогласиеНаПрисоединениеККЭДО, 	30);
	
	Возврат ТипОбъектаРазмерПакета;

КонецФункции 

// Возвращает значение свойства структуры по имени ключа,
// если свойства нет возвращает Неопределено.
//
// Параметры:
// 		Объект - Структра
// 		ИмяСвойства - Строка.
//
// Возвращаемое значение:
// 		Значение, полученное по ключу или неопределено, если нет такого свойства.
//
Функция ЗначениеСвойстваОбъекта(Объект, ИмяСвойства) Экспорт

	ЗначениеСвойства = Неопределено;
	Объект.Свойство(ИмяСвойства, ЗначениеСвойства);
	Возврат ЗначениеСвойства

КонецФункции

Функция СоответствиеНаоборот(ИсходноеСоответствие) Экспорт
	
	НовоеСоответствие = Новый Соответствие;
	Для каждого КлючИЗначение Из ИсходноеСоответствие Цикл
		НовоеСоответствие.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат НовоеСоответствие;

КонецФункции

Функция СоответствиеПадежей()
	
	СоответствиеПадежей = Новый Соответствие;
	
	СоответствиеПадежей.Вставить(1, "Именительный");
	СоответствиеПадежей.Вставить(2, "Родительный");
	СоответствиеПадежей.Вставить(3, "Дательный");
	СоответствиеПадежей.Вставить(4, "Винительный");
	СоответствиеПадежей.Вставить(5, "Творительный");
	СоответствиеПадежей.Вставить(6, "Предложный");
	
	Возврат СоответствиеПадежей;
	
КонецФункции

Функция СклоненияФИО(ФИО, ФизическоеЛицо, Пол) Экспорт
	
	ПолЧислом = ?(Пол = Перечисления.ПолФизическогоЛица.Мужской, 1, 2);
	
	Склонения = Новый Структура;
	СоответствиеПадежей = СоответствиеПадежей();
	Для каждого КлючиЗначение Из СоответствиеПадежей Цикл
		Склонения.Вставить(КлючиЗначение.Значение, СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, КлючиЗначение.Ключ,, ПолЧислом));
	КонецЦикла;
	
	Возврат Склонения;
	
КонецФункции

Функция СклоненияПредставленияОбъекта(Представление, Ссылка) Экспорт
	
	Склонения = Новый Структура;
	СоответствиеПадежей = СоответствиеПадежей();
	Для каждого КлючиЗначение Из СоответствиеПадежей Цикл
		Склонения.Вставить(КлючиЗначение.Значение, СклонениеПредставленийОбъектов.ПросклонятьПредставление(Представление, КлючиЗначение.Ключ));
	КонецЦикла;
	
	Возврат Склонения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
