#Область ПрограммныйИнтерфейс

// Возвращает параметры операции НСПК по кассе.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры операции
//  ИдентификаторКорзины - Строка - идентификатор корзины для операции возврата
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции
//
// Возвращаемое значение:
//  См. ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК
Функция ПараметрыОперацииНСПКПоКассеККМ(КассаККМ, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = ОбщиеПараметрыПодключенияНСПК();
	ПараметрыПодключенияКассыНСПК = ПараметрыПодключенияКассыНСПК(КассаККМ);
	ПараметрыПодключенияОрганизацииНСПК = ПараметрыПодключенияОрганизацииНСПК(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КассаККМ, "Владелец"));
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПККлиентСервер.ПараметрыОперацииНСПК();
	ПараметрыОперации.АдресСервера = ОбщиеПараметрыПодключенияНСПК.АдресСервисаНСПК;
	ПараметрыОперации.КлючДоступа =
		?(ЗначениеЗаполнено(ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК),
			ПараметрыПодключенияОрганизацииНСПК.КлючОрганизацииНСПК,
			ОбщиеПараметрыПодключенияНСПК.КлючДоступаНСПК);
	ПараметрыОперации.ИнтернетПрокси.Сервер = ОбщиеПараметрыПодключенияНСПК.ПараметрыПроксиНСПК.Сервер;
	ПараметрыОперации.ИнтернетПрокси.Порт = ОбщиеПараметрыПодключенияНСПК.ПараметрыПроксиНСПК.Порт;
	ПараметрыОперации.ИнтернетПрокси.Пользователь = ОбщиеПараметрыПодключенияНСПК.ПараметрыПроксиНСПК.Пользователь;
	ПараметрыОперации.ИнтернетПрокси.Пароль = ОбщиеПараметрыПодключенияНСПК.ПараметрыПроксиНСПК.Пароль;	
	ПараметрыОперации.ПротоколОбмена = ПараметрыПодключенияКассыНСПК.ПротоколОбменаНСПК;
	ПараметрыОперации.КлючКассы = ПараметрыПодключенияКассыНСПК.КлючКассыНСПК;
	ПараметрыОперации.ИдентификаторКассы = ПараметрыПодключенияКассыНСПК.ИдентификаторНСПК;
	ПараметрыОперации.ИдентификаторКорзины = ИдентификаторКорзины;
	ПараметрыОперации.ИдентификаторЗапроса = ИдентификаторЗапроса;
	ПараметрыОперации.ПроверятьКорневыеСертификаты = ПолучитьФункциональнуюОпцию("ИспользоватьКорневыеСертификатыНСПК");
	
	Если ПараметрыОперации.СсылкаНаПлатежныйСчет = Неопределено Тогда
		ПараметрыОперации.СсылкаНаПлатежныйСчет = "";
	КонецЕсли;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Возвращает общие параметры подключения к сервису НСПК.
//
// Возвращаемое значение:
//  см. РозничныеПродажиКлиентСерверЛокализация.ПараметрыПодключенияНСПК
//
Функция ОбщиеПараметрыПодключенияНСПК() Экспорт
	
	ОбщиеПараметрыПодключенияНСПК = РозничныеПродажиКлиентСерверЛокализация.ПараметрыПодключенияНСПК();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПодключения = Константы.НастройкиОбменаНСПК.Получить().Получить();
	Если ТипЗнч(ПараметрыПодключения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ОбщиеПараметрыПодключенияНСПК, ПараметрыПодключения, , "ПараметрыПроксиНСПК");
		Если ПараметрыПодключения.Свойство("ПараметрыПроксиНСПК") Тогда
			ЗаполнитьЗначенияСвойств(ОбщиеПараметрыПодключенияНСПК.ПараметрыПроксиНСПК, ПараметрыПодключения.ПараметрыПроксиНСПК);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры подключения кассы к сервису НСПК.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения по оборудованию в НСПК:
//  * ИдентификаторНСПК - Строка - Идентификатор НСПК
//  * КлючКассыНСПК - Строка - Ключ кассы в НСПК
//  * ПротоколОбменаНСПК - ПеречислениеСсылка.ПротоколОбменаФЭСНСПК
//
Функция ПараметрыПодключенияКассыНСПК(КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеПараметрыПодключенияНСПК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, "ИдентификаторНСПК,КлючКассыНСПК,ПротоколОбменаНСПК");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(ОбщиеПараметрыПодключенияНСПК.ПротоколОбменаНСПК) Тогда
		ОбщиеПараметрыПодключенияНСПК.ПротоколОбменаНСПК = Перечисления.ПротоколОбменаФЭСНСПК.ВерсияV1;
	КонецЕсли;
	
	Возврат ОбщиеПараметрыПодключенияНСПК;
КонецФункции

// Возвращает параметры подключения организации к сервису НСПК.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить параметры подключения.
//
// Возвращаемое значение:
//  Структура - содержит значения ключа организации в НСПК:
//  * КлючОрганизацииНСПК - Строка - Ключ организации в НСПК
//
Функция ПараметрыПодключенияОрганизацииНСПК(Организация) Экспорт
	
	ПараметрыПодключенияОрганизацииНСПК = Новый Структура();
	ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК", "");
	
	КлючОрганизацииНСПК = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КлючОрганизацииНСПК");
	Если ЗначениеЗаполнено(КлючОрганизацииНСПК) И Не ПустаяСтрока(КлючОрганизацииНСПК) Тогда
		ПараметрыПодключенияОрганизацииНСПК.Вставить("КлючОрганизацииНСПК", КлючОрганизацииНСПК);
	КонецЕсли;	
	
	Возврат ПараметрыПодключенияОрганизацииНСПК;
	
КонецФункции

// Возвращает результат проверки фискализации документа
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК;
//
// Возвращаемое значение:
//  Структура - содержит:
//  *Результат - Булево -
//  *ОписаниеОшибки - Строка -
//
Функция ДокументФискализирован(ЧекККМ) Экспорт
	
	РезультатВыполнения = Новый Структура("Результат, ОписаниеОшибки", Истина, "");
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		РезультатВыполнения.Вставить("Результат", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки",
			СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1';
							|en = 'Receipt fiscalization data is missing: %1'"), СокрЛП(ЧекККМ)));
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подтверждение операции ЭС НСПК';
				|en = 'Confirm digital NSPK certificate transaction'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЧекККМ,
			РезультатВыполнения.ОписаниеОшибки);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает параметры передачи данных фискального чека
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК;
//  СуммаСертификатамиНСПК - Число - Сумма оплаты сертификатами НСПК
//  ИдентификаторКорзины - Строка - идентификатор корзины операции ЭС НСПК;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции ЭС НСПК.
//
// Возвращаемое значение:
//  Структура - См. ЭлектронныеСертификатыНСПК.ПараметрыОперацииНСПК
Функция ПараметрыПередачиДанныхФискальногоЧека(ЧекККМ, СуммаСертификатамиНСПК = 0, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
	
	Если ДанныеФискальнойОперации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыОперацииНСПКПоКассеККМ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "КассаККМ"),
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
	
	ПараметрыОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыОперации.ФискальныйТипРасчета = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыОперации.ФискальныйПризнакЧека = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыОперации.ФискальныйЧекНомер = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	ПараметрыОперации.ОснованиеФискальнойОперации = ЧекККМ;
	
	ТорговыйОбъект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФискальнойОперации.ТорговыйОбъект, "Склад");
	
	ПараметрыОперации.ФискальныйМестоРасчетов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ТорговыйОбъект,
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		ТекущаяДатаСеанса(),
		Истина);
	
	Если ПустаяСтрока(ПараметрыОперации.ФискальныйМестоРасчетов) Тогда
		ПараметрыОперации.ФискальныйМестоРасчетов = Строка(ТорговыйОбъект);
	КонецЕсли;
	
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	
	Возврат ПараметрыОперации;
	
КонецФункции

// Возвращает результат передачи подтверждения операции ЭС НСПК.
//
// Параметры:
//  ЧекККМ - ДокументСсылка.ЧекККМ - Чек ККМ, который необходимо отправить для подтверждения операции с ЭС НСПК;
//  СуммаСертификатамиНСПК - Число - Сумма оплаты сертификатами НСПК
//  ИдентификаторКорзины - Строка - идентификатор корзины операции ЭС НСПК;
//  ИдентификаторЗапроса - Строка - идентификатор запроса операции ЭС НСПК.
//
// Возвращаемое значение:
//  Структура - содержит:
//  *Результат - Булево -
//  *КодРезультата - Число -
//  *ОписаниеОшибки - Строка -
//
Функция ПередачаДанныхФискальногоЧека(ЧекККМ, СуммаСертификатамиНСПК = 0, ИдентификаторКорзины = "", ИдентификаторЗапроса = "0") Экспорт
	
	РезультатВыполнения = Новый Структура("Результат, КодРезультата, ОписаниеОшибки", Ложь, 999, "");
	
	ДанныеФискальнойОперации = ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДанныеФискальнойОперации(ЧекККМ);
		
	Если ДанныеФискальнойОперации = Неопределено Тогда
		РезультатВыполнения.Вставить("ОписаниеОшибки",
			СтрШаблон(НСтр("ru = 'Отсутствуют данные о фискализации чека: %1';
							|en = 'Receipt fiscalization data is missing: %1'"), СокрЛП(ЧекККМ)));
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подтверждение операции ЭС НСПК';
				|en = 'Confirm digital NSPK certificate transaction'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ЧекККМ,
			РезультатВыполнения.ОписаниеОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	ПараметрыОперации = ЭлектронныеСертификатыНСПКУТ.ПараметрыОперацииНСПКПоКассеККМ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЧекККМ, "КассаККМ"),
		ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
	
	ПараметрыОперации.НомерФискальногоНакопителя = ДанныеФискальнойОперации.ЗаводскойНомерФН;
	ПараметрыОперации.ФискальныйТипРасчета = ДанныеФискальнойОперации.ТипРасчета;
	ПараметрыОперации.ФискальныйПризнакЧека = ЛЕВ(ДанныеФискальнойОперации.ФискальныйПризнак, 10);
	ПараметрыОперации.ФискальныйЧекНомер = Строка(ДанныеФискальнойОперации.НомерЧекаККМ);
	ПараметрыОперации.ФискальныйЧекДатаВремя = ДанныеФискальнойОперации.Дата;
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	ПараметрыОперации.ОснованиеФискальнойОперации = ЧекККМ;
	
	ПараметрыОперации.ФискальныйМестоРасчетов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФискальнойОперации.ТорговыйОбъект, "Склад"),
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		ТекущаяДатаСеанса(),
		Ложь);
	
	ПараметрыОперации.ФискальныйЧекСумма = СуммаСертификатамиНСПК;
	
	РезультатПередачи = ЭлектронныеСертификатыНСПК.ПередачаДанныхФискальногоЧека(ПараметрыОперации);
	
	ЗаполнитьЗначенияСвойств(РезультатВыполнения, РезультатПередачи);
	
	Если РезультатВыполнения.Результат Тогда
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'Подтверждение операции %1 успешно отправлено на сервер НСПК';
				|en = '%1 transaction confirmation is sent to the NSPK server'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы);
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	Иначе
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'При отправке подтверждения операции %1 на сервер НСПК произошла ошибка (код %2):
			|%3';
			|en = 'An error occurred when sending the %1 transaction confirmation to the NSPK server (code %2):
			|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ДанныеФискальнойОперации.ИдентификаторОплатыПлатежнойСистемы,
			Строка(РезультатВыполнения.КодРезультата),
			РезультатВыполнения.ОписаниеОшибки);
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ОписаниеОшибки", СообщениеПользователю);
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ДобавитьЗаписьПоНеотправленномуВНСПКФискальномуЧеку(ЧекККМ, СообщениеПользователю);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Подтверждение операции ЭС НСПК';
			|en = 'Confirm digital NSPK certificate transaction'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурнала,
		,
		ЧекККМ,
		СообщениеПользователю);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Сохраняет информацию об ошибке при отправке фискального чека в НСПК
// 
// Параметры:
//  ДокументОснование - ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат - Чек ККМ, который отправляется в НСПК;
//  СообщениеПользователю - Строка - Текст ошибки
Процедура ДобавитьЗаписьПоНеотправленномуВНСПКФискальномуЧеку(ДокументОснование, СообщениеПользователю) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НеотправленныеВНСПКФискальныеЧекиСТоварамиФСС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Значение = ДокументОснование;
	НаборЗаписей.Отбор.ДокументОснование.Использование = Истина;
		
	СтрокаНабораЗаписей = НаборЗаписей.Добавить();
	СтрокаНабораЗаписей.ДокументОснование = ДокументОснование;
	СтрокаНабораЗаписей.ДатаПоследнейПопытки = ТекущаяДатаСеанса();
	СтрокаНабораЗаписей.ТекстОшибки = СообщениеПользователю;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет информацию об ошибке при отправке фискального чека в НСПК
// 
// Параметры:
//  ДокументОснование - ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат - Чек ККМ, который отправляется в НСПК;
Процедура УдалитьЗаписьПоОтправленномуВНСПКФискальномуЧеку(ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НеотправленныеВНСПКФискальныеЧекиСТоварамиФСС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Значение = ДокументОснование;
	НаборЗаписей.Отбор.ДокументОснование.Использование = Истина;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти