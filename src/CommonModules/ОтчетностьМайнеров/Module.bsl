
#Область СлужебныйПрограммныйИнтерфейс

Процедура JSONВРеквизитыФормы(Форма, Текст) Экспорт 
	РеквизитыФормы = Новый Массив;
	Для Каждого Элт Из Форма.ПолучитьРеквизиты("") Цикл 
		РеквизитыФормы.Добавить(Элт.Имя);
	КонецЦикла;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Текст);
	
	Пока ЧтениеJSON.Прочитать() Цикл 
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если СтрНачинаетсяС(ИмяСвойства, ПрефиксРеквизита()) Тогда 
				ЧтениеJSON.Прочитать();
				ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
				ИмяРеквизитаНаФорме = СтрЗаменить(ИмяСвойства, ПрефиксРеквизита(), "");
				
				Если ЗначениеЗаполнено(ИмяСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) И РеквизитыФормы.Найти(ИмяРеквизитаНаФорме) <> Неопределено Тогда 
					ЗагрузитьПоказатель(Форма[ИмяРеквизитаНаФорме], ЗначениеСвойства)
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ИмяСвойства, ПрефиксТаблицы()) Тогда 
				СтрокаТаблицы = Неопределено;
				ИмяРеквизитаНаФорме = СтрЗаменить(ИмяСвойства, ПрефиксТаблицы(), "");
				Если РеквизитыФормы.Найти(ИмяРеквизитаНаФорме) = Неопределено Тогда
					СтрокаТаблицы = Неопределено;
					Продолжить;
				КонецЕсли;
				
				ЧтениеJSON.Прочитать();
				Если ЧтениеJSON.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда 
					Продолжить;
				КонецЕсли;
				
				ТаблицаФормы = Форма[ИмяРеквизитаНаФорме];
				Пока ЧтениеJSON.Прочитать() Цикл 
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
						Прервать;
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
						СтрокаТаблицы = ТаблицаФормы.Добавить();
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
						ЧтениеJSON.Прочитать();
						ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
						ЗагрузитьПоказатель(СтрокаТаблицы[ИмяСвойства], ЗначениеСвойства);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
КонецПроцедуры

Функция ОбщиеСправочникиМайнеров() Экспорт 
	Возврат УведомлениеОСпецрежимахНалогообложенияПовтИсп.ОбщиеСправочникиМайнеров("СправочникиМайнеров");
КонецФункции

Процедура СправочникиМайнеровВТаблицыНаФорме(Форма) Экспорт 
	СправочникиМайнеров = УведомлениеОСпецрежимахНалогообложенияПовтИсп.ОбщиеСправочникиМайнеров("СправочникиМайнеров");
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого КЗ Из СправочникиМайнеров Цикл 
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(КЗ.Ключ, Новый ОписаниеТипов("ТаблицаЗначений")));
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ДобавляемыеРеквизиты.Очистить();
	Для Каждого КЗ Из СправочникиМайнеров Цикл 
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Код", ОбщегоНазначения.ОписаниеТипаСтрока("10"), КЗ.Ключ));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Название", ОбщегоНазначения.ОписаниеТипаСтрока("100"), КЗ.Ключ));
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для Каждого КЗ Из СправочникиМайнеров Цикл 
		Форма.ЗначениеВРеквизитФормы(КЗ.Значение, КЗ.Ключ);
	КонецЦикла;
КонецПроцедуры

Функция JSONВСтруктуру(Текст) Экспорт
	Результат = Новый Структура;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Текст);
	
	Пока ЧтениеJSON.Прочитать() Цикл 
		Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда 
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Если СтрНачинаетсяС(ИмяСвойства, ПрефиксРеквизита()) Тогда
				ЧтениеJSON.Прочитать();
				ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
				Результат.Вставить(ИмяСвойства, ЗначениеСвойства);
			ИначеЕсли СтрНачинаетсяС(ИмяСвойства, ПрефиксТаблицы()) Тогда
				Если Не Результат.Свойство(ИмяСвойства) Тогда 
					Результат.Вставить(ИмяСвойства, Новый ТаблицаЗначений);
				КонецЕсли;
				ТаблицаФормы = Результат[ИмяСвойства];
				СтрокаТаблицы = Неопределено;
				
				ЧтениеJSON.Прочитать();
				Если ЧтениеJSON.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда 
					Продолжить;
				КонецЕсли;
				
				Пока ЧтениеJSON.Прочитать() Цикл 
					Если ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива Тогда 
						Прервать;
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда 
						СтрокаТаблицы = ТаблицаФормы.Добавить();
					ИначеЕсли ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
						ЧтениеJSON.Прочитать();
						Если ТаблицаФормы.Колонки.Найти(ИмяСвойства) = Неопределено Тогда 
							ТаблицаФормы.Колонки.Добавить(ИмяСвойства);
						КонецЕсли;
						ЗначениеСвойства = ?(ЧтениеJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка, ЧтениеJSON.ТекущееЗначение, "");
						СтрокаТаблицы[ИмяСвойства] = ЗначениеСвойства;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеJSON.Закрыть();
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗагрузитьПоказатель(РеквизитНаФорме, ЗначениеСвойства)
	ТекущийТип = Новый Массив;
	ТекущийТип.Добавить(ТипЗнч(РеквизитНаФорме));
	ОТ = Новый ОписаниеТипов(ТекущийТип);
	РеквизитНаФорме = ОТ.ПривестиЗначение(ЗначениеСвойства);
КонецФункции

Процедура ЗаписатьТаблицуПоказателей(Форма, ЗаписьJSON, ИмяТаблицы) Экспорт 
	Если ТипЗнч(Форма) = Тип("Структура") Тогда 
		Таблица = Форма[ИмяТаблицы];
	ИначеЕсли ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда 
		Таблица = Форма.РеквизитФормыВЗначение(ИмяТаблицы, Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ПрефиксТаблицы() + ИмяТаблицы);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для Каждого Стр Из Таблица Цикл 
		Если Не СтрокаТаблицыЗначенийЗаполнена(Стр) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для Каждого Колонка Из Таблица.Колонки Цикл 
			ЗаписьJSON.ЗаписатьИмяСвойства(Колонка.Имя);
			ЗаписьJSON.ЗаписатьЗначение(КонвертироватьПоказатель(Стр[Колонка.Имя]));
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
КонецПроцедуры

Процедура ЗаписатьИмяЗначениеСвойства(ЗаписьJSON, ИмяСвойства, ЗначениеСвойства) Экспорт 
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяСвойства);
	ЗаписьJSON.ЗаписатьЗначение(ЗначениеСвойства);
КонецПроцедуры

Процедура ЗаписатьПакетПоказателей(ДанныеДляЗаписи, ЗаписьJSON) Экспорт 
	Для Каждого КЗ Из ДанныеДляЗаписи Цикл 
		Если ЗначениеЗаполнено(КЗ.Значение) Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства(ПрефиксРеквизита() + КЗ.Ключ);
			ЗаписьJSON.ЗаписатьЗначение(КонвертироватьПоказатель(КЗ.Значение));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ПрефиксРеквизита()
	Возврат "Реквизит_";
КонецФункции

Функция ПрефиксТаблицы()
	Возврат "Таблица_";
КонецФункции

Функция СтрокаТаблицыЗначенийЗаполнена(Строка)
	Для Каждого Колонка Из Строка.Владелец().Колонки Цикл 
		Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция КонвертироватьПоказатель(Показатель)
	Если ТипЗнч(Показатель) = Тип("Число") Тогда 
		Возврат Формат(Показатель, "ЧГ=");
	ИначеЕсли ТипЗнч(Показатель) = Тип("Дата") Тогда 
		Возврат Формат(Показатель, "ДФ=yyyyMMdd");
	ИначеЕсли ТипЗнч(Показатель) = Тип("Булево") Тогда 
		Возврат Формат(Показатель, "БЛ=false; БИ=true");
	Иначе
		Возврат Строка(Показатель);
	КонецЕсли;
КонецФункции

#КонецОбласти
