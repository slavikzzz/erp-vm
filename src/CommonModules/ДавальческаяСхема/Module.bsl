////////////////////////////////////////////////////////////////
// Модуль "ДавальческаяСхема" содержит процедуры и функции для 
// работы с механизмом производством из давальческого сырья.
//
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиЭтаповЗакрытияМесяца

//++ Устарело_Переработка24
#Область ПроверкаОстатковПриемаВПереработку2_4

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ОстаткиПриемаВПереработку2_4(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока =  ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(
		ТаблицаЭтапов,
		ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковПриемаВПереработку2_4);
	
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ДавальческаяСхема.Оформление_ОстаткиПриемаВПереработку2_4");
	НоваяСтрока.ДействиеИспользование =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ДавальческаяСхема.Использование_ОстаткиПриемаВПереработку2_4");
	НоваяСтрока.ДействиеВыполнить  =  ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПанельАдминистрированияУТ.Формы.Продажи.ПолноеИмя());
		
КонецПроцедуры

// Обработчики этапа
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_ОстаткиПриемаВПереработку2_4(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваров.Договор.Организация КАК Организация,
	|	&ОстаткиУслугДавальцу              КАК ТипОстатка,
	|	ОстаткиТоваров.Номенклатура        КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика      КАК Характеристика,
	|	ОстаткиТоваров.КОформлениюОстаток  КАК Остаток
	|ПОМЕСТИТЬ ВТНеОформленныеОстатки
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоИзДавальческогоСырья
	|	И ОстаткиТоваров.Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиТоваров.ВидЗапасов.Договор.Организация            КАК Организация,
	|	&ОстаткиТоваровДавальца                                  КАК ТипОстатка,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ОстаткиТоваров.КоличествоОстаток                         КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоИзДавальческогоСырья
	|	И ОстаткиТоваров.ВидЗапасов.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца))
	|	И ЕСТЬNULL(ОстаткиТоваров.ВидЗапасов.Договор.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)) =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем)
	|	И ОстаткиТоваров.ВидЗапасов.Договор.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказКлиента КАК Документ.ЗаказДавальца).Организация КАК Организация,
	|	&ОстаткиЗаказовПродукции       КАК ТипОстатка,
	|	ОстаткиТоваров.Номенклатура    КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика  КАК Характеристика,
	|	ОстаткиТоваров.ЗаказаноОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказДавальца)) КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоИзДавальческогоСырья
	|	И ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказКлиента КАК Документ.ЗаказДавальца).Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказПоставщику КАК Документ.ЗаказДавальца).Организация КАК Организация,
	|	&ОстаткиЗаказовМатериалов      КАК ТипОстатка,
	|	ОстаткиТоваров.Номенклатура    КАК Номенклатура,
	|	ОстаткиТоваров.Характеристика  КАК Характеристика,
	|	ОстаткиТоваров.ЗаказаноОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказДавальца)) КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоИзДавальческогоСырья
	|	И ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказПоставщику КАК Документ.ЗаказДавальца).Организация В (&МассивОрганизаций)
	|";
	
	Запрос.УстановитьПараметр("ОстаткиУслугДавальцу",     НСтр("ru = 'Остаток услуг к оформлению';
																|en = 'Remaining services to register'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиТоваровДавальца",   НСтр("ru = 'Остаток товаров давальца';
																|en = 'Remaining provided goods'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиЗаказовМатериалов", НСтр("ru = 'Остаток заказанных материалов';
																|en = 'Ordered material balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиЗаказовПродукции",  НСтр("ru = 'Остаток заказанной продукции';
																|en = 'Ordered manufactured product balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНеОформленныеОстатки = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков приема в переработку (версии 2.4).';
				|en = 'No remaining subcontracting services delivered (version 2.4)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Оформляет этап закрытия месяца.
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Оформление_ОстаткиПриемаВПереработку2_4(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование   = НСтр("ru = 'Оформление остатков приема в переработку (версии 2.4)';
															|en = 'Register remaining subcontracting services delivered (version 2.4)'");
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Включить';
															|en = 'Enable'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.
// 
// Параметры:
// 	ТаблицаПроверок - см. АудитСостоянияСистемы.ТаблицаПроверокСостоянияСистемы
//
Процедура ОписаниеПроверок_ОстаткиПриемаВПереработку2_4(ТаблицаПроверок) Экспорт
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(
		ТаблицаПроверок,
		"ОформлениеОстатковПриемаВПереработку2_4",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковПриемаВПереработку2_4,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ДавальческаяСхема.ПроверкаОстаткиПриемаВПереработку2_4");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформлены остатки приема в переработку (версии 2.4)';
			|en = 'Remaining subcontracting services delivered (version 2.4) are not registered'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'При отключенной опции ""Производство из давальческого сырья (версии 2.4)"" не должно быть остатков по приему в переработку (версии 2.4).';
			|en = 'There must be no remaining subcontracting services delivered (version 2.4) if the Subcontracting (version 2.4) option is disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

// Регистрация ошибок.
// 
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаОстаткиПриемаВПереработку2_4(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",    НСтр("ru = 'Организация';
												|en = 'Company'",    ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ТипОстатка",     НСтр("ru = 'Тип остатка';
												|en = 'Balance type'",    ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Номенклатура",   НСтр("ru = 'Номенклатура';
												|en = 'Items'",   ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Характеристика", НСтр("ru = 'Характеристика';
												|en = 'Variant'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Остаток",        НСтр("ru = 'Остаток';
												|en = 'Remaining goods'",        ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНеОформленныеОстатки",
		НСтр("ru = 'Обнаружены остатки приема в переработку (версии 2.4) по организации ""%1"" на конец периода %2';
			|en = 'Remaining subcontracting services delivered (version 2.4) by %1 company for the %2 period end are found'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- Устарело_Переработка24

#Область ПроверкаОстатковКОформлениюОтчетовДавальцу

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ОстаткиКОформлениюОтчетовДавальцам(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока =  ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(
		ТаблицаЭтапов,
		ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовДавальцам);
	
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ДавальческаяСхема.Оформление_ОстаткиКОформлениюОтчетовДавальцам");
	НоваяСтрока.ДействиеИспользование =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ДавальческаяСхема.Использование_ОстаткиКОформлениюОтчетовДавальцам");
	
	НоваяСтрока.ДействиеВыполнить  =  ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовПриемаВПереработку2_5.Формы.КОформлениюНакладных.ПолноеИмя(), Истина);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаОтчеты");
	
КонецПроцедуры

// Обработчики этапа
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_ОстаткиКОформлениюОтчетовДавальцам(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваров.Организация                КАК Организация,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры КАК Аналитика,
	|	-ОстаткиТоваров.КоличествоОстаток         КАК Остаток
	|ПОМЕСТИТЬ ОстаткиКОформлениюОтчетовДавальцам
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК ОстаткиТоваров
	|
	|ГДЕ
	|	ОстаткиТоваров.КоличествоОстаток < 0
	|	И ОстаткиТоваров.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|	И ЕСТЬNULL(ОстаткиТоваров.ВидЗапасов.Договор.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)) =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СДавальцем2_5)
	|	И НЕ ЕСТЬNULL(ОстаткиТоваров.АналитикаУчетаНоменклатуры.Договор.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)) =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком2_5)
	|";
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОстаткиКОформлениюОтчетовДавальцам = 0 Тогда
	
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков к оформлению отчетов давальцам.';
				|en = 'There are no remaining goods to register ""Consumption reports — Subcontracting services delivered"".'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Оформляет этап закрытия месяца.
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Оформление_ОстаткиКОформлениюОтчетовДавальцам(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Оформить';
															|en = 'Register'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.
// 
// Параметры:
// 	ТаблицаПроверок - см. АудитСостоянияСистемы.ТаблицаПроверокСостоянияСистемы
//
Процедура ОписаниеПроверок_ОстаткиКОформлениюОтчетовДавальцам(ТаблицаПроверок) Экспорт
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(
		ТаблицаПроверок,
		"ОформлениеОтчетовДавальцам",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовДавальцам,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ДавальческаяСхема.ПроверкаОстаткиКОформлениюОтчетовДавальцам");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформлены отчеты давальцам.';
			|en = '""Consumption reports — Subcontracting services delivered"" are not registered.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'На все переданные давальцу изделия должны быть оформлены отчеты давальцу.';
			|en = 'For all finished products transferred to the provider, register ""Consumption reports — Subcontracting services delivered"".'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

// Регистрация ошибок.
// 
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаОстаткиКОформлениюОтчетовДавальцам(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Аналитика",   НСтр("ru = 'Аналитика';
											|en = 'Dimension'",   ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Остаток",     НСтр("ru = 'Остаток';
											|en = 'Remaining stock'",     ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОстаткиКОформлениюОтчетовДавальцам",
		НСтр("ru = 'Обнаружены остатки к оформлению отчетов давальцам по организации ""%1"" на конец периода %2';
			|en = 'There is remaining stock to register consumption reports for the ""%1"" company at the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//++ Устарело_Переработка24
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению);
		//-- Устарело_Переработка24
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ТипДокумента = ТипЗнч(Документ);
		
		//++ Устарело_Переработка24
		Если Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ПроизводствоБезЗаказа")
				//++ Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ВыпускПродукции")
				//-- Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2"))
			Или ТипДокумента = Тип("ДокументОбъект.ОтчетДавальцу")
			Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению);
		КонецЕсли;
		//-- Устарело_Переработка24
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	//++ Устарело_Переработка24
	МетаданныеРегистра = Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	//-- Устарело_Переработка24
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Устарело_Переработка24
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УслугиДавальцуКОформлению");
	//-- Устарело_Переработка24
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	//++ Устарело_Переработка24
	
	#Область УслугиДавальцуКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиДавальцуКОформлениюИзменение") Тогда
		
		ТекстыЗапроса.Добавить(
			// Анализируется ресурс "КОформлению", так как приход по этому ресурсу разделен во времени.
			"	ВЫБРАТЬ
			|		ТаблицаОстатков.Договор                        КАК Договор,
			|		ТаблицаОстатков.ЗаказДавальца                  КАК ЗаказДавальца,
			|		ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
			|		ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|		ТаблицаОстатков.Характеристика                 КАК Характеристика,
			|		ТаблицаОстатков.КОформлениюОстаток             КАК КОформлению
			|ПОМЕСТИТЬ ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль
			|	ИЗ
			|		РегистрНакопления.УслугиДавальцуКОформлению.Остатки(,
			|				(Договор, ЗаказДавальца, Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						Таблица.Договор,
			|						Таблица.ЗаказДавальца,
			|						Таблица.Номенклатура,
			|						Таблица.Характеристика
			|					ИЗ
			|						ДвиженияУслугиДавальцуКОформлениюИзменение КАК Таблица
			|					ГДЕ
			|						Таблица.КОформлениюИзменение > 0)
			|			) КАК ТаблицаОстатков
			|	ГДЕ
			|		ТаблицаОстатков.КОформлениюОстаток < 0
			|");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Таблица.Договор,
			|	Таблица.ЗаказДавальца,
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика
			|ПОМЕСТИТЬ ВТ_УслугиДавальцуКОформлениюКонтрольНаДату
			|ИЗ
			|	ДвиженияУслугиДавальцуКОформлениюИзменение КАК Таблица
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль
			|	ПО Таблица.Договор = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Договор
			|		И Таблица.ЗаказДавальца = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.ЗаказДавальца
			|		И Таблица.Номенклатура = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Номенклатура
			|		И Таблица.Характеристика = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Характеристика
			|
			|ГДЕ
			|	ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.ЗаказДавальца ЕСТЬ NULL");
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЛОЖЬ								КАК КонтрольНаДату,
			|	ТаблицаОстатков.Договор				КАК Договор,
			|	ТаблицаОстатков.ЗаказДавальца		КАК ЗаказДавальца,
			|	ТаблицаОстатков.Номенклатура		КАК Номенклатура,
			|	ТаблицаОстатков.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика		КАК Характеристика,
			|	ТаблицаОстатков.КОформлению			КАК КОформлению
			|ИЗ
			|	ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль КАК ТаблицаОстатков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА											КАК КонтрольНаДату,
			|	ТаблицаОстатков.Договор							КАК Договор,
			|	ТаблицаОстатков.ЗаказДавальца					КАК ЗаказДавальца,
			|	ТаблицаОстатков.Номенклатура					КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика					КАК Характеристика,
			|	ТаблицаОстатков.КОформлениюОстаток				КАК КОформлению
			|ИЗ
			|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки(&ДатаКонтроля,
			|			(Договор, ЗаказДавальца, Номенклатура, Характеристика) В
			|				(ВЫБРАТЬ
			|					Таблица.Договор,
			|					Таблица.ЗаказДавальца,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика
			|				ИЗ
			|					ВТ_УслугиДавальцуКОформлениюКонтрольНаДату КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	&ВыполнятьКонтрольДаты
			|	И ТаблицаОстатков.КОформлениюОстаток < 0
			|";
		
		ЗапросДаты = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Т.ДатаКонтроля) КАК Дата ИЗ ДвиженияУслугиДавальцуКОформлениюИзменение КАК Т");
		ЗапросДаты.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ВыполнятьКонтрольДаты = ВыборкаДаты.Следующий() И ЗначениеЗаполнено(ВыборкаДаты.Дата);
		ДатаОстатка = ?(ВыполнятьКонтрольДаты, ВыборкаДаты.Дата, '00010101');
		
		Запрос.УстановитьПараметр("ДатаКонтроля", ДатаОстатка);
		Запрос.УстановитьПараметр("ВыполнятьКонтрольДаты", ВыполнятьКонтрольДаты);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиУслугиДавальцуКОформлению");
		
	КонецЕсли;
	
	#КонецОбласти
	
	//-- Устарело_Переработка24
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	//++ Устарело_Переработка24
	
	#Область УслугиДавальцуКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиДавальцуКОформлениюИзменение") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиУслугиДавальцуКОформлению Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетДавальцу") Тогда
				// Это проведение отчета
				Если СтрокаОшибки.КонтрольНаДату
					И ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Продукция %1 в количестве %2 %3 еще не произведена. Отчет оформляется после производства продукции.';
							|en = 'Product %1 in the amount of %2 %3 is not manufactured yet. The report is generated after the product is manufactured.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				ИначеЕсли Не СтрокаОшибки.КонтрольНаДату
					И ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Продукция %1 в количестве %2 %3 еще не произведена.';
							|en = 'Product %1 in the amount of %2 %3 is not manufactured yet.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
			Иначе
				// Это проведение производственного документа
				Если СтрокаОшибки.КонтрольНаДату Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'На продукцию %1 уже оформлен отчет давальцу (по отчетам давальцу должно быть выпущено еще %2 %3). Производство должно быть отражено не позже месяца оформления отчета.';
							|en = '""Consumption report — Subcontracting services delivered"" is already registered for products %1 (%2 %3 must be released according to ""Consumption reports — Subcontracting services delivered""). Production must be recorded not later than the month of report registration.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				Иначе
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'На продукцию %1 уже оформлен отчет давальцу (по отчетам давальцу должно быть выпущено еще %2 %3).';
							|en = '""Consumption report — Subcontracting services delivered"" is already registered for products %1 (%2 %3 must be released according to ""Consumption reports — Subcontracting services delivered"").'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//-- Устарело_Переработка24
	
КонецПроцедуры

//++ Устарело_Переработка24

// Возвращает текст запроса временной таблицы "ВтТаблицаЗаказовДавальцаПоНазначениям", в которой
// определяются "Назначение работ", "Заказ давальца", "Договор" и "Подразделение" по "Назначениям" из строки табличной части.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, возможные значения "ЭтапПроизводства2_2" и "ПроизводствоБезЗаказа",
//  ИмяТЧВыходныеИзделия - Строка - имя табличной части выходных изделий, по умолчанию "ВыходныеИзделия",
//  ИмяТЧПобочныеИзделия - Строка - имя табличной части побочных изделий, по умолчанию "ПобочныеИзделия",
//  ПутьКНазначению - Строка - путь к реквизиту "Назначение" через реквизит табличной части, по умолчанию "Назначение",
//  						   пример: "АналитикаУчетаНоменклатуры.Назначение", где "АналитикаУчетаНоменклатуры"
//  						   		   является реквизитом табличной части.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(
			ИмяДокумента,
			ИмяТЧВыходныеИзделия = "ВыходныеИзделия",
			ИмяТЧПобочныеИзделия = "ПобочныеИзделия",
			ПутьКНазначению = "Назначение") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДавальческихНазначений.Назначение КАК Назначение,
	|	ТаблицаДавальческихНазначений.НазначениеРабот КАК НазначениеРабот
	|ПОМЕСТИТЬ ВтТаблицаДавальческихНазначений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения) КАК Назначение,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ = НЕОПРЕДЕЛЕНО
	|			  ИЛИ ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ) = ТИП(Документ.ЗаказДавальца)
	|				ТОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения)
	|			ИНАЧЕ ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Договор.Назначение
	|		КОНЕЦ КАК НазначениеРабот
	|	ИЗ
	|		&ТабличнаяЧастьВыходныеИзделия КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения) КАК Назначение,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ = НЕОПРЕДЕЛЕНО
	|			  ИЛИ ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ) = ТИП(Документ.ЗаказДавальца)
	|				ТОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения)
	|			ИНАЧЕ ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Договор.Назначение
	|		КОНЕЦ КАК НазначениеРабот
	|	ИЗ
	|		&ТабличнаяЧастьПобочныеИзделия КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.ОформитьОтчетДавальцу) КАК ТаблицаДавальческихНазначений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаДавальческихНазначений.Назначение КАК Назначение,
	|	ВтТаблицаДавальческихНазначений.НазначениеРабот КАК НазначениеРабот,
	|	ВтТаблицаДавальческихНазначений.НазначениеРабот.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ) = ТИП(Документ.ЗаказДавальца)
	|			ТОГДА ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказДавальца,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ) = ТИП(Документ.ЗаказДавальца)
	|			ТОГДА ВЫРАЗИТЬ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ КАК Документ.ЗаказДавальца).Подразделение
	|		ИНАЧЕ ВтТаблицаДавальческихНазначений.НазначениеРабот.Договор.Подразделение
	|	КОНЕЦ КАК Подразделение
	|ПОМЕСТИТЬ ВтТаблицаЗаказовДавальцаПоНазначениям
	|ИЗ
	|	ВтТаблицаДавальческихНазначений КАК ВтТаблицаДавальческихНазначений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение", СтрШаблон("ТабличнаяЧасть.%1", ПутьКНазначению));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьВыходныеИзделия", СтрШаблон("Документ.%1.%2", ИмяДокумента, ИмяТЧВыходныеИзделия));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьПобочныеИзделия", СтрШаблон("Документ.%1.%2", ИмяДокумента, ИмяТЧПобочныеИзделия));
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- Устарело_Переработка24

#КонецОбласти

//++ Устарело_Переработка24
#Область Настройки

// Определяет использование давальческой схемы 2.4
// 
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено - хозяйственная операция документа 
//
// Возвращаемое значение:
//   Булево - Истина, если давальческая схема используется
//
Функция ИспользуетсяДавальческаяСхема(ХозяйственнаяОперация = Неопределено) Экспорт
	
	ИспользуетсяДавальческаяСхема = Ложь;
	
	//++ Локализация
	ИспользуетсяДавальческаяСхема =
		ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
		И (ХозяйственнаяОперация = Неопределено
			Или ХозяйственнаяОперация = 
					Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	//-- Локализация
	
	Возврат ИспользуетсяДавальческаяСхема;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет реквизит "ОформитьОтчетДавальцу" в строках таблицы
//
// Параметры:
//  Таблица - ТабличнаяЧасть               - табличная часть, в котором заполняется реквизит "ОформитьОтчетДавальцу"
//  Объект  - ДокументОбъект, Неопределено - объект владелец табличной части
//		
Процедура ЗаполнитьФлагОформитьОтчетДавальцу(Таблица, Объект = Неопределено) Экспорт
	
	ХозяйственныеОперации = ?(Объект = Неопределено, Неопределено, Объект.ХозяйственнаяОперация);
	Если Не ИспользуетсяДавальческаяСхема(ХозяйственныеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСтрок = Новый Массив;
	Назначения = Новый Массив;
	
	Для каждого Строка Из Таблица Цикл
		
		Если ЗначениеЗаполнено(Строка.Назначение) Тогда
			
			Назначения.Добавить(Строка.Назначение);
			
			КоллекцияСтрок.Добавить(Строка);
			
		КонецЕсли;
		
		Строка.ОформитьОтчетДавальцу = Ложь;
		
	КонецЦикла;
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(Назначения);
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		СвойстваНазначения = СвойстваНазначений.Получить(Строка.Назначение);
		Строка.ОформитьОтчетДавальцу = СвойстваНазначения <> Неопределено 
									   И СвойстваНазначения.ЭтоНазначениеДавальца
									   И СвойстваНазначения.ЭтоДавальческаяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет признак ДоступноОформлениеОтчетаДавальцу в строках таблицы
// 
//	Параметры:
//		Форма   - ФормаКлиентскогоПриложения     - форма владелец обрабатываемой таблицы
//		Таблица - ДанныеФормыКоллекция - обрабатываемая таблица
//		Строки  - Массив, Неопределено - массив обрабатываемых строк
//
Процедура ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(Форма, Таблица, Строки = Неопределено) Экспорт
	
	Если Не Форма.ИспользуетсяДавальческаяСхема Тогда
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Назначение КАК Назначение
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Назначения.ТипНазначения В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22))
	|	И (Назначения.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Назначения.Заказ) = ТИП(Документ.ЗаказДавальца)) КАК ДоступноОформлениеОтчетаДавальцу
	|ИЗ
	|	Таблица КАК Таблица
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|	ПО Таблица.Назначение = Назначения.Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица.Выгрузить(Строки, "НомерСтроки, Назначение"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.НомерСтроки - 1], Выборка, "ДоступноОформлениеОтчетаДавальцу");
	КонецЦикла;
	
КонецПроцедуры	

// Заполняет служебный реквизит "ДоступноОформлениеОтчетаДавальцу" в строке по данным указанного назначение
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		
		СвойстваНазначение = КэшированныеЗначения.СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
		
		Если СвойстваНазначение = Неопределено Тогда 
		
			СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(ТекущаяСтрока.Назначение);
			СвойстваНазначение = СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
				
			КэшированныеЗначения.СвойстваНазначений.Вставить(ТекущаяСтрока.Назначение, СвойстваНазначение);
			
		КонецЕсли;
		
		ДоступноОформлениеОтчетаДавальцу = СвойстваНазначение.ЭтоНазначениеДавальца
										   И (ЗначениеЗаполнено(СвойстваНазначение.Договор) Или СвойстваНазначение.ЭтоДавальческаяПродукция);
		
	Иначе
		ДоступноОформлениеОтчетаДавальцу = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока.ДоступноОформлениеОтчетаДавальцу = ДоступноОформлениеОтчетаДавальцу;
	
	Если Не ТекущаяСтрока.ДоступноОформлениеОтчетаДавальцу И ТекущаяСтрока.ОформитьОтчетДавальцу Тогда
		ТекущаяСтрока.ОформитьОтчетДавальцу = Ложь;
	Иначе
		ТекущаяСтрока.ОформитьОтчетДавальцу = ЗначениеЗаполнено(ТекущаяСтрока.Назначение)
											  И СвойстваНазначение.ЭтоНазначениеДавальца
											  И СвойстваНазначение.ЭтоДавальческаяПродукция;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения доступности оформления отчета давальцу.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаОформлениеОтчетаДавальцу(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу",
		СтруктураДействий,
		КэшированныеЗначения) Тогда
	
		ТекстЗарпоса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	ВЫБОР
		|		КОГДА СпрНазначения.Ссылка ЕСТЬ НЕ NULL
		|			И СпрНазначения.ТипНазначения В(
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|			И (НЕ СпрНазначения.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИЛИ ТИПЗНАЧЕНИЯ(СпрНазначения.Заказ) = ТИП(Документ.ЗаказДавальца))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоступноОформлениеОтчетаДавальцу,
		|	ВЫБОР
		|		КОГДА
		|			СпрНазначения.Ссылка ЕСТЬ НЕ NULL
		|			И СпрНазначения.ТипНазначения В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22)) 
		|			И ТИПЗНАЧЕНИЯ(СпрНазначения.Заказ) = ТИП(Документ.ЗаказДавальца)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОформитьОтчетДавальцу
		|ИЗ
		|	ВтИсточникДанных КАК ИсточникДанных
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|	ПО СпрНазначения.Ссылка = ИсточникДанных.Назначение
		|";
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, "ОформлениеОтчетаДавальцу");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- Устарело_Переработка24

#Область Проверки

//++ Устарело_Переработка24

// Проверяет в договоре назначения заполнение подразделение
//
// Параметры:
//  Объект	- ДокументОбъект - проверяемый документ.
//  ИмяТЧ	- Строка - имя табличной части документа.
//  Отказ	- Булево - результат проверки.
//
Процедура ПроверитьПодразделениеДоговораНазначения(Объект, ИмяТЧ, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.ОформитьОтчетДавальцу
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Назначения.Представление КАК НазначениеПредставление
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Таблица.Назначение = Назначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО Назначения.Договор = Договоры.Ссылка
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(Назначения.Заказ) = ТИП(Документ.ЗаказДавальца)
	|	И ЕСТЬNULL(Договоры.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		= ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Таблица", Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Назначение, ОформитьОтчетДавальцу"));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
	
		ПредставлениеТЧ = Объект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
		
		Шаблон = НСтр("ru = 'В строке %1 списка ""%2"" в договоре назначения ""%3"" не указано подразделение.';
						|en = 'Business unit is not selected in the string %1 of the list ""%2"" in the contract of assignment ""%3"".'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
	
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.НомерСтроки, ПредставлениеТЧ, Выборка.НазначениеПредставление);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Назначение");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

//-- Устарело_Переработка24

// Проверяет корректность выбора назначения давальцев в документах с табличными частями
// "ВыходныеИзделия", "ПобочныеИзделия" и "МатериалыИРаботы".
// 
// Параметры:
//  Объект            - ДокументОбъект.ЗаказПереработчику2_5, ДокументОбъект.ОтчетПереработчика2_5, ДокументОбъект.ПроизводствоБезЗаказа - проверяемый документ.
//  ПараметрыПроверки - см. ПараметрыПроверкиВыбораНазначенияДавальца
//  Отказ             - Булево - признак проверки.
//
Процедура ПроверитьКорректностьВыбораНазначенияДавальца(Объект, ПараметрыПроверки, Отказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяТаблицыВыходныеИзделия        КАК ИмяТаблицы,
	|	&СинонимТаблицыВыходныеИзделия    КАК СинонимТаблицы,
	|	ВыходныеИзделия.НомерСтроки       КАК НомерСтроки,
	|	ВыходныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	ВыходныеИзделия.Назначение        КАК Назначение
	|ПОМЕСТИТЬ ВыходныеИзделия
	|ИЗ
	|	&ВыходныеИзделия КАК ВыходныеИзделия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	НомерГруппыЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИмяТаблицыПобочныеИзделия        КАК ИмяТаблицы,
	|	&СинонимТаблицыПобочныеИзделия    КАК СинонимТаблицы,
	|	ПобочныеИзделия.НомерСтроки       КАК НомерСтроки,
	|	ПобочныеИзделия.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	ПобочныеИзделия.Назначение        КАК Назначение
	|ПОМЕСТИТЬ ПобочныеИзделия
	|ИЗ
	|	&ПобочныеИзделия КАК ПобочныеИзделия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	НомерГруппыЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИмяТаблицыМатериалыИРаботы        КАК ИмяТаблицы,
	|	&СинонимТаблицыМатериалыИРаботы    КАК СинонимТаблицы,
	|	МатериалыИРаботы.НомерСтроки       КАК НомерСтроки,
	|	МатериалыИРаботы.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	МатериалыИРаботы.Назначение        КАК Назначение
	|ПОМЕСТИТЬ МатериалыИРаботы
	|ИЗ
	|	&МатериалыИРаботы КАК МатериалыИРаботы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение,
	|	НомерГруппыЗатрат
	|";
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Если ПараметрыПроверки.ДавальческиеГруппировкиЗатрат.Найти(Объект.ГруппировкаЗатрат) <> Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПобочныеИзделия.ИмяТаблицы     КАК ИмяТаблицы,
		|	ПобочныеИзделия.СинонимТаблицы КАК СинонимТаблицы,
		|	ПобочныеИзделия.НомерСтроки    КАК НомерСтроки
		|ИЗ
		|	ПобочныеИзделия КАК ПобочныеИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияПобочныеИзделия
		|		ПО ПобочныеИзделия.Назначение = НазначенияПобочныеИзделия.Ссылка
		|ГДЕ
		|	НазначенияПобочныеИзделия.ТипНазначения В (&ДавальческиеТипыНазначений)
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВыходныеИзделия КАК ВыходныеИзделия
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияВыходныеИзделия
		|				ПО ВыходныеИзделия.Назначение = НазначенияВыходныеИзделия.Ссылка
		|		ГДЕ
		|			ВыходныеИзделия.НомерГруппыЗатрат = ПобочныеИзделия.НомерГруппыЗатрат
		|			И ЕСТЬNULL(НазначенияВыходныеИзделия.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <>
		|																			НазначенияПобочныеИзделия.Партнер)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МатериалыИРаботы.ИмяТаблицы     КАК ИмяТаблицы,
		|	МатериалыИРаботы.СинонимТаблицы КАК СинонимТаблицы,
		|	МатериалыИРаботы.НомерСтроки    КАК НомерСтроки
		|ИЗ
		|	МатериалыИРаботы КАК МатериалыИРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияМатериалыИРаботы
		|		ПО МатериалыИРаботы.Назначение = НазначенияМатериалыИРаботы.Ссылка
		|ГДЕ
		|	НазначенияМатериалыИРаботы.ТипНазначения В (&ДавальческиеТипыНазначений)
		|	И ИСТИНА В (
		|		ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ВыходныеИзделия КАК ВыходныеИзделия
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияВыходныеИзделия
		|				ПО ВыходныеИзделия.Назначение = НазначенияВыходныеИзделия.Ссылка
		|		ГДЕ
		|			ВыходныеИзделия.НомерГруппыЗатрат = МатериалыИРаботы.НомерГруппыЗатрат
		|			И ЕСТЬNULL(НазначенияВыходныеИзделия.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <>
		|																			НазначенияМатериалыИРаботы.Партнер)
		|";
		
		ТекстСообщения =
			НСтр("ru = 'В строке %1 списка ""%2"" неправильно указана группировка затрат.
					   |Материалы давальца должны быть включены в себестоимость продукции того же давальца.';
					   |en = 'In line %1 of the ""%2"" list, cost grouping is specified incorrectly.
					   |Provider materials must be included in the manufactured product cost of the same provider.'");
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВыходныеИзделия.ИмяТаблицы     КАК ИмяТаблицы,
		|	ВыходныеИзделия.СинонимТаблицы КАК СинонимТаблицы,
		|	ВыходныеИзделия.НомерСтроки    КАК НомерСтроки
		|ИЗ
		|	ВыходныеИзделия КАК ВыходныеИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|		ПО ВыходныеИзделия.Назначение = Назначения.Ссылка
		|ГДЕ
		|	Назначения.ТипНазначения В (&ДавальческиеТипыНазначений)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПобочныеИзделия.ИмяТаблицы     КАК ИмяТаблицы,
		|	ПобочныеИзделия.СинонимТаблицы КАК СинонимТаблицы,
		|	ПобочныеИзделия.НомерСтроки    КАК НомерСтроки
		|ИЗ
		|	ПобочныеИзделия КАК ПобочныеИзделия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|		ПО ПобочныеИзделия.Назначение = Назначения.Ссылка
		|ГДЕ
		|	Назначения.ТипНазначения В (&ДавальческиеТипыНазначений)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МатериалыИРаботы.ИмяТаблицы     КАК ИмяТаблицы,
		|	МатериалыИРаботы.СинонимТаблицы КАК СинонимТаблицы,
		|	МатериалыИРаботы.НомерСтроки    КАК НомерСтроки
		|ИЗ
		|	МатериалыИРаботы КАК МатериалыИРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
		|		ПО МатериалыИРаботы.Назначение = Назначения.Ссылка
		|ГДЕ
		|	Назначения.ТипНазначения В (&ДавальческиеТипыНазначений)
		|";
		
		ТекстСообщения =
			НСтр("ru = 'В строке %1 списка ""%2"" выбрано давальческое назначение.
					   |Давальческое назначение может быть выбрано только при группировке затрат по назначениям.';
					   |en = 'In line %1 of the ""%2"" list, provider assignment is selected.
					   |You can select a provider assignment only when you group expenses by assignments.'");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	МетаТабличныеЧасти    = Объект.Метаданные().ТабличныеЧасти;
	
	ИмяТЧВыходныеИзделия  = ПараметрыПроверки.ИмяТЧВыходныеИзделия;
	ИмяТЧПобочныеИзделия  = ПараметрыПроверки.ИмяТЧПобочныеИзделия;
	ИмяТЧМатериалыИРаботы = ПараметрыПроверки.ИмяТЧМатериалыИРаботы;
	
	КолонкиТаблицы        = "НомерСтроки, Назначение, НомерГруппыЗатрат";
	
	Запрос.УстановитьПараметр("ИмяТаблицыВыходныеИзделия",      МетаТабличныеЧасти[ИмяТЧВыходныеИзделия].Имя);
	Запрос.УстановитьПараметр("СинонимТаблицыВыходныеИзделия",  МетаТабличныеЧасти[ИмяТЧВыходныеИзделия].Синоним);
	Запрос.УстановитьПараметр("ВыходныеИзделия",                Объект[ИмяТЧВыходныеИзделия].Выгрузить(, КолонкиТаблицы));
	
	Запрос.УстановитьПараметр("ИмяТаблицыПобочныеИзделия",      МетаТабличныеЧасти[ИмяТЧПобочныеИзделия].Имя);
	Запрос.УстановитьПараметр("СинонимТаблицыПобочныеИзделия",  МетаТабличныеЧасти[ИмяТЧПобочныеИзделия].Синоним);
	Запрос.УстановитьПараметр("ПобочныеИзделия",                Объект[ИмяТЧПобочныеИзделия].Выгрузить(, КолонкиТаблицы));

	Запрос.УстановитьПараметр("ИмяТаблицыМатериалыИРаботы",     МетаТабличныеЧасти[ИмяТЧМатериалыИРаботы].Имя);
	Запрос.УстановитьПараметр("СинонимТаблицыМатериалыИРаботы", МетаТабличныеЧасти[ИмяТЧМатериалыИРаботы].Синоним);
	Запрос.УстановитьПараметр("МатериалыИРаботы",               Объект[ИмяТЧМатериалыИРаботы].Выгрузить(, КолонкиТаблицы));
	
	Запрос.УстановитьПараметр("ДавальческиеТипыНазначений",     ПараметрыПроверки.ДавальческиеТипыНазначений);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстСообщения, Выборка.НомерСтроки, Выборка.СинонимТаблицы),
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "Назначение"),,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры проверки выбора назначения давальца.
// 
// Возвращаемое значение:
//  Структура - Параметры проверки выбора назначения давальца:
//   * ИмяТЧВыходныеИзделия          - Строка - имя табличной части, в которой указываются выходные изделия
//   * ИмяТЧПобочныеИзделия          - Строка - имя табличной части, в которой указываются побочные изделия
//   * ИмяТЧМатериалыИРаботы         - Строка - имя табличной части, в которой указываются материалы и работы
//   * ДавальческиеТипыНазначений    - Массив из ПеречислениеСсылка.ТипыНазначений - давальческие типы назначений
//   * ДавальческиеГруппировкиЗатрат - Массив из ПеречислениеСсылка.ГруппировкиЗатратВЗаказеПереработчику, ПеречислениеСсылка.ГруппировкиЗатратВПроизводствеБезЗаказа - давальческие группировки затрат
//
Функция ПараметрыПроверкиВыбораНазначенияДавальца() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяТЧВыходныеИзделия"         , "ВыходныеИзделия");
	СтруктураПараметров.Вставить("ИмяТЧПобочныеИзделия"         , "ПобочныеИзделия");
	СтруктураПараметров.Вставить("ИмяТЧМатериалыИРаботы"        , "МатериалыИРаботы");
	СтруктураПараметров.Вставить("ДавальческиеТипыНазначений"   , Новый Массив);
	СтруктураПараметров.Вставить("ДавальческиеГруппировкиЗатрат", Новый Массив);
	
	СтруктураПараметров.ДавальческиеТипыНазначений.Добавить(Перечисления.ТипыНазначений.Давальческое2_5);
	
	СтруктураПараметров.ДавальческиеГруппировкиЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям);
	СтруктураПараметров.ДавальческиеГруппировкиЗатрат.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Определяет для переданного массива назначений, хозяйственную операцию производства:
// "Производство из двальческого сырья", "Производство из двальческого сырья 2.5", "Собственное производство".
// Параметры:
//  Назначения - Массив Из СправочникСсылка.Назначения
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - операция, если все назначения можно оформить одним заказом на производство
//  Неопределено - если нужно оформлять разные заказы с разными операциями.
Функция ХозяйственнаяОперацияПроизводства(Назначения) Экспорт
	
	Если Назначения.Количество() = 0 Тогда
		Возврат Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(Набор.ХозяйственнаяОперация) КАК ХозяйственнаяОперация
		|ИЗ(
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ВсеНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
		|			КОГДА ВсеНазначения.ТипНазначения = ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22)
		|					И ВключеныДвальцы2_5.Значение
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
		
		//++ Устарело_Переработка24
		
		|			КОГДА ВсеНазначения.ТипНазначения В(
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
		|					ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22))
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
		
		//-- Устарело_Переработка24
		
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)
		|		КОНЕЦ КАК ХозяйственнаяОперация
		|	ИЗ
		|		Справочник.Назначения КАК ВсеНазначения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Константа.ИспользоватьПроизводствоИзДавальческогоСырья2_5 КАК ВключеныДвальцы2_5
		|			ПО ИСТИНА
		|	ГДЕ
		|		ВсеНазначения.Ссылка В(&Назначения)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство) КАК ХозяйственнаяОперация
		|	ГДЕ
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) В(&Назначения)) КАК Набор
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Набор.ХозяйственнаяОперация) = МАКСИМУМ(Набор.ХозяйственнаяОперация)";
		
	ХозяйственнаяОперация = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	Возврат ХозяйственнаяОперация;
	
КонецФункции

#КонецОбласти

//++ Устарело_Переработка24
#Область УсловноеОформление

// Устанавливает условное оформление поля "Оформить отчет давальцу"
//	
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление
//	ИмяОбъекта     - Строка           - имя объекта
//  ИмяТЧ          - Строка           - имя таблицы формы
//  ПутьКЭлементам - Строка           - путь к элементам формы
// 
Процедура УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "") Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ОформитьОтчетДавальцу"]["Имя"]);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоступноОформлениеОтчетаДавальцу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление для "Оформить отчет давальцу" для отменных строк
//	
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление
//	ИмяОбъекта     - Строка           - имя объекта
//  ИмяТЧ          - Строка           - имя таблицы формы
//  ПутьКЭлементам - Строка           - путь к элементам формы
// 
Процедура УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
			Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "") Экспорт

	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ОформитьОтчетДавальцу"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти
//-- Устарело_Переработка24

#Область Прочее

// Возвращает реквизиты связанные с давальческим назначением.
//  Параметры:
//   Назначение - СправочникСсылка.Назначения - Назначение для которого необходимо определить реквизиты заказа давальца
//                                              к которому оно относится.
//  Возвращаемое значение:
//   Неопределено, Структура - с полями:
//                  * Партнер    - СправочникСсылка.Партнеры - Партнер, указанный в заказе давальца.
//                  * Договор    - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в заказе давальца.
//                  * Контрагент - СправочникСсылка.Контрагенты - Контрагент, указанный в заказе давальца.
//
Функция РеквизитыПоНазначению(Назначение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца.Партнер ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца.Партнер
	//-- Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца2_5.Партнер ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца2_5.Партнер
	|		ИНАЧЕ СпрНазначения.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца.Договор ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца.Договор
	//-- Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца2_5.Договор ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца2_5.Договор
	|		ИНАЧЕ СпрНазначения.Договор
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	//++ Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца.Контрагент ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца.Контрагент
	//-- Устарело_Переработка24
	|		КОГДА НЕ ЗаказДавальца2_5.Контрагент ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца2_5.Контрагент
	|		ИНАЧЕ ЕСТЬNULL(СпрНазначения.Договор.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	Справочник.Назначения КАК СпрНазначения
	|
	//++ Устарело_Переработка24
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказДавальца
	|		ПО СпрНазначения.Заказ = ЗаказДавальца.Ссылка 
	//-- Устарело_Переработка24
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца2_5 КАК ЗаказДавальца2_5
	|		ПО СпрНазначения.Заказ = ЗаказДавальца2_5.Ссылка
	|ГДЕ
	|	СпрНазначения.Ссылка = &Назначение
	|	И (НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|		ИЛИ НЕ ЗаказДавальца2_5.Ссылка ЕСТЬ NULL
	|		ИЛИ СпрНазначения.ТипНазначения В (
	//++ Устарело_Переработка24
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	//-- Устарело_Переработка24
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|								ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое2_5))
	|			И СпрНазначения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
	|";
	
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Партнер, Договор, Контрагент");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти