
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СтавкиДисконтированияРезервов);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СрокиДисконтированияРезервовПредстоящихРасходов);
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов);
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РезервыПредстоящихРасходов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СтавкиДисконтированияРезервов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СрокиДисконтированияРезервовПредстоящихРасходов");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРезервыПредстоящихРасходов", ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийРезервыПредстоящихРасходов"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаданияКЗакрытиюМесяца

// Дополняет текст запроса механизма формирования заданий закрытия месяца.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданийКЗакрытиюМесяца(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц) Экспорт
	
	СоответствиеЗапросов = СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
	
	Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
		ЗакрытиеМесяцаСервер.ДополнитьНазванияТаблицДляЗаданий(Запрос, ЭлементСоответствия.Ключ);
		ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
			ЭлементСоответствия.Значение,
			Запрос.МенеджерВременныхТаблиц.Таблицы,
			ТекстЗапроса,
			ТекстЗапросаВременныхТаблиц,
			ИменаВременныхТаблиц);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

//++ НЕ УТ

#Область НачислениеСписаниеРезервовПредстоящихРасходов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеСписаниеРезервовПредстоящихРасходов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеСписаниеРезервовПредстоящихРасходов,
		Ложь, Истина, Ложь);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РезервыПредстоящихРасходов.Использование_НачислениеСписаниеРезервовПредстоящихРасходов");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеСписаниеРезервовПредстоящихРасходов.Формы.ФормаРабочееМесто.ПолноеИмя());
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ВсеОрганизации");

КонецПроцедуры

Процедура Использование_НачислениеСписаниеРезервовПредстоящихРасходов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыУчетаРезервов.Организация КАК Организация,
	|	ОбъектыУчетаРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыУчетаРезервов.Ссылка КАК ОбъектУчетаРезервов
	|ПОМЕСТИТЬ ВТРезервы
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервов
	|ГДЕ
	|	ОбъектыУчетаРезервов.НачалоПериода <= &КонецПериода
	|	И ОбъектыУчетаРезервов.КонецПериода = ДАТАВРЕМЯ(1,1,1)
	|	И ОбъектыУчетаРезервов.Организация В (&МассивОрганизаций)
	|	И НЕ ОбъектыУчетаРезервов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОбъектыУчетаРезервов.Организация КАК Организация,
	|	ОбъектыУчетаРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыУчетаРезервов.Ссылка КАК ОбъектУчетаРезервов
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК ОбъектыУчетаРезервов
	|ГДЕ
	|	ОбъектыУчетаРезервов.НачалоПериода <= &КонецПериода
	|	И ОбъектыУчетаРезервов.КонецПериода >= &КонецПериода
	|	И ОбъектыУчетаРезервов.Организация В (&МассивОрганизаций)
	|	И НЕ ОбъектыУчетаРезервов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РезервыПредстоящихРасходов.Организация КАК Организация,
	|	РезервыПредстоящихРасходов.ВидРезервов КАК ВидРезервов,
	|	РезервыПредстоящихРасходов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов.Остатки(&КонецПериода, Организация В (&МассивОрганизаций)) КАК РезервыПредстоящихРасходов
	|ГДЕ
	|	РезервыПредстоящихРасходов.СуммаУпрОстаток <> 0
	|	ИЛИ РезервыПредстоящихРасходов.СуммаРеглОстаток <> 0
	|	ИЛИ РезервыПредстоящихРасходов.СуммаНУОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыРезервов.Организация КАК Организация,
	|	ВидыРезервов.ВидРезервов КАК ВидРезервов
	|ПОМЕСТИТЬ ВТРезервыКОтражению
	|ИЗ
	|	ВТРезервы КАК ВидыРезервов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов КАК ОтражениеРезервов
	|		ПО (ОтражениеРезервов.Дата = &КонецПериода)
	|			И ВидыРезервов.Организация = ОтражениеРезервов.Организация
	|			И (ВидыРезервов.ВидРезервов = ОтражениеРезервов.ВидРезервов)
	|			И (ОтражениеРезервов.Проведен)
	|ГДЕ
	|	ОтражениеРезервов.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыРезервов.Организация КАК Организация,
	|	ОбъектыРезервов.ВидРезервов КАК ВидРезервов,
	|	ОбъектыРезервов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	ОтражениеРезервов.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВТОбъектыУчетаРезервовКОтражению
	|ИЗ
	|	ВТРезервы КАК ОбъектыРезервов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов КАК ОтражениеРезервов
	|		ПО (ОтражениеРезервов.Дата = &КонецПериода)
	|			И ОбъектыРезервов.Организация = ОтражениеРезервов.Организация
	|			И (ОбъектыРезервов.ВидРезервов = ОтражениеРезервов.ВидРезервов)
	|			И (ОтражениеРезервов.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеСписаниеРезервовПредстоящихРасходов.Резервы КАК РезервыОтраженияРезервов
	|		ПО ОтражениеРезервов.Ссылка = РезервыОтраженияРезервов.Ссылка
	|			И (ОбъектыРезервов.ОбъектУчетаРезервов = РезервыОтраженияРезервов.ОбъектУчетаРезервов)
	|ГДЕ
	|	РезервыОтраженияРезервов.ОбъектУчетаРезервов ЕСТЬ NULL";
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТРезервы = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет объектов учета резервов, требующих отражения начисления или списание резервов';
				|en = 'No provision objects that require accrual recording or reserve write-off'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТОбъектыУчетаРезервовКОтражению <> 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			НСтр("ru = 'Отражение резервов предстоящих расходов выполнено';
				|en = 'Reserve record of provisions and contingent liabilities complete'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РазмерыВременныхТаблиц.ВТРезервыКОтражению = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Отражение резервов предстоящих расходов выполнено';
				|en = 'Reserve record of provisions and contingent liabilities complete'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;	
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.

Процедура ОписаниеПроверок_НачислениеСписаниеРезервовПредстоящихРасходов(ТаблицаПроверок) Экспорт
	
	// Отражение резервов.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов",
		Перечисления.ОперацииЗакрытияМесяца.НачислениеСписаниеРезервовПредстоящихРасходов,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"РезервыПредстоящихРасходов.ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не отражена операция начисления/списания резервов предстоящих расходов';
			|en = 'Accrual/write-off transaction is not recorded for provisions and contingent liabilities'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'По всем видам резервов должны быть созданы документы ""Начисления и списания резервов предстоящих расходов"".';
			|en = 'The Accruals and deductions of documents for provisions and contingent liabilities must be created for all reserve kinds.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Обработчик проверки необходимости выполнения этапа 
//
//  Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНеобходимостиНачислениеСписаниеРезервовПредстоящихРасходов(ПараметрыПроверки) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидРезервов", НСтр("ru = 'Вид резервов';
											|en = 'Reserve kind'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРезервыКОтражению",
		НСтр("ru = 'Не созданы документы ""Начисления и списания резервов предстоящих расходов"" по организации ""%1"" за период %2';
			|en = 'The Accruals and deductions of documents for provisions and contingent liabilities were not created for the %1 company for the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
		
	Если ЗначениеЗаполнено(ПараметрыПроверки.ДополнительныеПараметры) Тогда
		КоличествоДанных = РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(
			ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц,
			"ВТРезервыКОтражению");
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыПроверки.ДополнительныеПараметры,
			КоличествоДанных);
	КонецЕсли;
		
	ШаблонТекстаОшибки = НСтр("ru = 'Для документов ""Начисления и списания резервов предстоящих расходов"" по организации ""%1"" за период %2 указаны не все объекты учета резервов';
								|en = 'Not all provision objects are specified for the ""Accruals and write-offs of provisions and contingent liabilities"" documents by the ""%1"" company for period %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	РасширенныйСписокПолей = СписокПолей.Скопировать();
	РасширенныйСписокПолей.Добавить("ОбъектУчетаРезервов", НСтр("ru = 'Объект учета резервов';
																|en = 'Provision object'", ОбщегоНазначения.КодОсновногоЯзыка()));
	РасширенныйСписокПолей.Добавить("Документ", НСтр("ru = 'Документ начисления и списания резервов';
													|en = 'Document of reserve accrual and write-off'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации, "ВТОбъектыУчетаРезервовКОтражению", ШаблонТекстаОшибки, РасширенныйСписокПолей, "Документ");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

//++ НЕ УТ

Процедура РезервыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если НЕ Параметры.Свойство("Отбор") ИЛИ ТипЗнч(Параметры.Отбор) <> Тип("Структура") Тогда
		Параметры.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	
	КлючНазначенияИспользования =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНазначенияИспользования", "РезервыПредстоящихРасходов");
	ТипыРезервов = Перечисления.ТипыРезервовПредстоящихРасходов.ТипыРезервовПоНазначению(КлючНазначенияИспользования);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры.Отбор, Новый Структура("ТипРезерва", ТипыРезервов), Ложь);
	
КонецПроцедуры

// Возвращает использование дисконтирования резервов по организации
//
// Параметры:
//  Период - Дата - период действия настройки
//  Организация - СправочникСсылка - Организация
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Булево - Использование дисконтирования
//
Функция ИспользуетсяУчетДисконтированияРезервов(Знач Период, Знач Организация) Экспорт

	ИспользуетсяУчетДисконтированияРезервов = Ложь;
	
	ДействующиеПараметры = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.Имя, Организация, Период);
	
	Если ДействующиеПараметры <> Неопределено Тогда
		ИспользуетсяУчетДисконтированияРезервов = ДействующиеПараметры.УчетДисконтированияРезервовПредстоящихРасходов;
	КонецЕсли;
	
	Возврат ИспользуетсяУчетДисконтированияРезервов;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеЗаданийКЗакрытиюМесяца

Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос)
	
	СоответствиеТекстовЗапросов = Новый Соответствие();
	//++ НЕ УТ
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРезервыПредстоящихРасходов",
		ТекстЗапросаТаблицаИзмененийРезервыПредстоящихРасходов(Запрос));
	//-- НЕ УТ
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаТаблицаИзмененийРезервыПредстоящихРасходов(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИзменений.Период КАК Месяц,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.РасчетПроцентныхРасходовДисконтирования) КАК Операция,
	|	ТаблицаИзменений.Организация КАК Организация,
	|	ТаблицаИзменений.Регистратор КАК Документ
	|ИЗ
	|	ТаблицаИзмененийРезервыПредстоящихРасходов КАК ТаблицаИзменений
	|ГДЕ
	|	(ТаблицаИзменений.СуммаДисконтированияУпр <> 0
	|	ИЛИ ТаблицаИзменений.СуммаДисконтированияРегл <> 0)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаИзменений.Регистратор) <> ТИП(Документ.РасчетПроцентныхРасходовДисконтирования)";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(
		ТекстЗапроса);
		
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти