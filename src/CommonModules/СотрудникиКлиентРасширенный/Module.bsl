////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиентРасширенный: методы, обслуживающие работу формы сотрудника.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура НачатьВыборФотографии(Форма) Экспорт
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = Форма.УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите фотографию';
												|en = 'Select a picture'");
	ПараметрыЗагрузки.Диалог.Фильтр = ФильтрВыбораФайловИзображений();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(
		Новый ОписаниеОповещения("ЗавершитьВыборФотографии", ЭтотОбъект, ДополнительныеПараметры), ПараметрыЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормыСотрудника

Процедура СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентБазовый.СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ДокументПриемНаРаботуПослеЗаписи" И Параметр.Сотрудник = Форма.СотрудникСсылка 
		ИЛИ ИмяСобытия = "ДокументДоговорРаботыУслугиПослеЗаписи" И Параметр.Сотрудник = Форма.СотрудникСсылка 
		ИЛИ ИмяСобытия = "ДокументДоговорАвторскогоЗаказаПослеЗаписи" И Параметр.Сотрудник = Форма.СотрудникСсылка
		ИЛИ ИмяСобытия = "ДокументНачальнаяШтатнаяРасстановкаПослеЗаписи" Тогда
		
		Форма.ПрочитатьДанныеСвязанныеСФизлицом();
		
	ИначеЕсли ИмяСобытия = "РедактированиеПроцентаСевернойНадбавки" 
		И Форма.ФизическоеЛицоСсылка = Источник Тогда
		
		Форма.ТекущийПроцентСевернойНадбавки = Параметр.ПроцентСевернойНадбавки;
		
	Иначе
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
			Модуль.ОбработкаОповещенияИзмененийДанныхСотрудников(Форма, ИмяСобытия, Параметр, Источник);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	СотрудникиКлиентБазовый.СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры

Процедура ОткрытьСписокЛицевыхСчетовЗарплатныхПроектовСотрудника(Форма, ФизическоеЛицоСсылка, СотрудникСсылка = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		СтруктураОтбора.Вставить("Сотрудник", СотрудникСсылка);
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("ИзФормыРедактированияЛичныхДанных", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыОткрытияФормы.Вставить("КлючНазначенияИспользования", "БезСписка");
	
	ОткрытьФорму("РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Форма.ФормаСписка", ПараметрыОткрытияФормы, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	СотрудникиКлиентБазовый.ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентБазовый.ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник); 
	
	Если ИмяСобытия = "ЗагруженаФотография" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодборПерсоналаКлиент");
		МодульПодборПерсоналаКлиент.ФизическиеЛицаФормаЭлементаОбработкаОповещения(Форма, ИмяСобытия, Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормСотрудникаИФизическогоЛица

Процедура ФизическиеЛицаИННПриИзменении(Форма, Элемент) Экспорт
	
	СотрудникиКлиентБазовый.ФизическиеЛицаИННПриИзменении(Форма, Элемент);
	ПроверитьУникальностьФизическогоЛица(Форма, "ИНН");
	
КонецПроцедуры

Процедура ФизическиеЛицаСтраховойНомерПФРПриИзменении(Форма, Элемент) Экспорт
	
	СотрудникиКлиентБазовый.ФизическиеЛицаСтраховойНомерПФРПриИзменении(Форма, Элемент);
	ПроверитьУникальностьФизическогоЛица(Форма, "СтраховойНомерПФР");
	
КонецПроцедуры

Процедура ФизическиеЛицаАдресФотографииНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	НачатьВыборФотографии(Форма);
	
КонецПроцедуры

Процедура ЗавершитьВыборФотографии(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
		
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.АдресФотографии = ПомещенныйФайл.Хранение;
	Оповестить("ЗагруженаФотография", ПомещенныйФайл.Хранение, Форма);
	
КонецПроцедуры

Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Форма) Экспорт
	
	СотрудникиКлиентБазовый.ДокументыФизическихЛицВидДокументаПриИзменении(Форма);
	ПроверитьУникальностьФизическогоЛица(Форма, "Документ");
	
КонецПроцедуры

Процедура ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент) Экспорт
	
	СотрудникиКлиентБазовый.ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент);
	ПроверитьУникальностьФизическогоЛица(Форма, "Документ");
	
КонецПроцедуры

Процедура ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент) Экспорт
	
	СотрудникиКлиентБазовый.ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент);
	ПроверитьУникальностьФизическогоЛица(Форма, "Документ");
	
КонецПроцедуры

Процедура ПроверитьУникальностьФизическогоЛица(Форма, ПроверяемыеИдентификатор) Экспорт
	
	Если ПроверяемыеИдентификатор = "ИНН"
		И НЕ ЗначениеЗаполнено(Форма.ФизическоеЛицо.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверяемыеИдентификатор = "СтраховойНомерПФР"
		И НЕ КадровыйУчетКлиентСервер.СНИЛСЗаполнен(Форма.ФизическоеЛицо.СтраховойНомерПФР) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверяемыеИдентификатор = "Документ"
		И (НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Номер)) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыПроверки = СотрудникиВызовСервераРасширенный.РезультатыПроверкиУникальностиФизическогоЛица(
		Форма.ФизическоеЛицоСсылка,
		?(ПроверяемыеИдентификатор = "ИНН", Форма.ФизическоеЛицо.ИНН, ""),
		?(ПроверяемыеИдентификатор = "СтраховойНомерПФР", Форма.ФизическоеЛицо.СтраховойНомерПФР, ""),
		?(ПроверяемыеИдентификатор = "Документ", Форма.ДокументыФизическихЛиц.ВидДокумента, ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка")),
		?(ПроверяемыеИдентификатор = "Документ", Форма.ДокументыФизическихЛиц.Серия, ""),
		?(ПроверяемыеИдентификатор = "Документ", Форма.ДокументыФизическихЛиц.Номер, ""));
	
	Если Форма.Параметры.Свойство("Ключ") Тогда
		ВедущийОбъект = Форма.Параметры.Ключ;
	Иначе
		ВедущийОбъект = Форма.ВладелецФормы.Параметры.Ключ;
	КонецЕсли;
	
	ВызовИзФормыСотрудника = ТипЗнч(ВедущийОбъект) = Тип("СправочникСсылка.Сотрудники");
	
	Если НЕ РезультатыПроверки.ФизическоеЛицоУникально Тогда
		
		ПараметрыОткрытия = СотрудникиКлиент.ПараметрыОткрытияФормыФизическиеЛицаСПохожимиДанными(РезультатыПроверки);
		Если РезультатыПроверки.ДанныеФизическихЛиц.Количество() > 0 И ВедущийОбъект.Пустая() Тогда
			
			ОписаниеПредметовПроверки = "";
			
			Если РезультатыПроверки.СообщенияПроверки.Количество() = 1 Тогда
				
				ОписаниеПредметовПроверки = РезультатыПроверки.СообщенияПроверки[0].ТекстСообщенияОбОшибке;
				
				Если РезультатыПроверки.ДанныеФизическихЛиц.Количество() > 1 Тогда
					
					ОписаниеПредметовПроверки = СтрЗаменить(ОписаниеПредметовПроверки,
						НСтр("ru = 'Найдена запись о человеке, имеющем такой же';
							|en = 'Entry is found about a person with the same'"),
						НСтр("ru = 'Найдены записи о людях, имеющих такой же';
							|en = 'Entries are found about people with the same '"));
					
				КонецЕсли;
				
			Иначе
				
				Для каждого СообщениеПроверки Из РезультатыПроверки.СообщенияПроверки Цикл
					
					Если СообщениеПроверки.ИмяПоля = "ИНН" Тогда
						
						ОписаниеПредметовПроверки = ?(ПустаяСтрока(ОписаниеПредметовПроверки), "", ОписаниеПредметовПроверки + ", ") 
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'ИНН (%1)';
									|en = 'TIN (%1)'"),
								Форма.ФизическоеЛицо.ИНН);
						
					ИначеЕсли СообщениеПроверки.ИмяПоля = "СтраховойНомерПФР" Тогда
						
						ОписаниеПредметовПроверки = ?(ПустаяСтрока(ОписаниеПредметовПроверки), "", ОписаниеПредметовПроверки + ", ")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'СНИЛС (%1)';
									|en = 'SNILS (%1)'"),
								Форма.ФизическоеЛицо.СтраховойНомерПФР);
						
					Иначе
						
						ОписаниеПредметовПроверки = ?(ПустаяСтрока(ОписаниеПредметовПроверки), "", ОписаниеПредметовПроверки + ", ")
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'документом, удостоверяющим личность';
									|en = 'identity document'"),
								Форма.ДокументыФизическихЛиц.ВидДокумента,
								?(ПустаяСтрока(Форма.ДокументыФизическихЛиц.Серия), "", Форма.ДокументыФизическихЛиц.Серия),
								Форма.ДокументыФизическихЛиц.Номер);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если РезультатыПроверки.ДанныеФизическихЛиц.Количество() = 1 Тогда
					
					ОписаниеПредметовПроверки = НСтр("ru = 'Найдена запись о человеке, имеющем такие же';
													|en = 'Entry is found about a person with the same'")
						+ " " + ОписаниеПредметовПроверки;
					
				Иначе
						
					ОписаниеПредметовПроверки = НСтр("ru = 'Найдены записи о людях, имеющих такие же';
													|en = 'Entries are found about people with the same '")
						+ " " + ОписаниеПредметовПроверки;
						
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыОткрытия.ТекстИнформационнойНадписи = ОписаниеПредметовПроверки + "."
				+ Символы.ПС + ПараметрыОткрытия.ТекстИнформационнойНадписи;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("ВызовИзФормыСотрудника", ВызовИзФормыСотрудника);
			
			Оповещение = Новый ОписаниеОповещения("ПроверитьУникальностьФизическогоЛицаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ТекстПредупреждения = РезультатыПроверки.СообщенияПроверки[0].ТекстСообщенияОбОшибке;
			
			Если НЕ ВедущийОбъект.Пустая() 
				И РезультатыПроверки.ДоступнаРольСохранениеДанныхЗадвоенныхФизическихЛиц Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Символы.ПС
					+ НСтр("ru = 'Не рекомендуется записывать дублирующиеся личные данные.
						|Тем не менее, можно записать текущие личные данные, после чего принять меры для устранения проблемы.';
						|en = 'It is not recommended that you duplicate personal information.
						|However, you can save the current personal information, and then take corrective actions.'");
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Записать %1 с этими личными данными невозможно.
							|Внесите изменения или обратитесь к администратору информационной системы для устранения проблемы.';
							|en = 'You cannot save %1 this personal data.
							|Make changes or contact the information system administrator to resolve this issue.'"),
						Форма.ФизическоеЛицо.ФИО);
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РезультатВыбора - Структура
//  ДополнительныеПараметры - Структура
Процедура ПроверитьУникальностьФизическогоЛицаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		ВызовИзФормыСотрудника = ДополнительныеПараметры.ВызовИзФормыСотрудника;
		
		Если ВызовИзФормыСотрудника Тогда
			
			СотрудникиКлиент.УстановитьФизическоеЛицоВФормеСотрудника(Форма, РезультатВыбора.ПохожийЧеловек);
			
		Иначе
			
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
			
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("Ключ", РезультатВыбора.ПохожийЧеловек));
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработатьСобытиеДополнительногоПоляФормыНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужбаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		МодульГосударственнаяСлужбаКлиент.ОбработатьСобытиеДополнительногоПоляФормыСотрудникаНажатие(
			Форма, Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

Функция ФильтрВыбораФайловИзображений()
	
	Элементы = Новый Массив();
	Элементы.Добавить(НСтр("ru = 'Все картинки (*.bmp;*.gif;*.jpeg;*.jpg;*.png;*.tif)|*.bmp;*.gif;*.jpeg;*.jpg;*.png;*.tif';
							|en = 'All pictures (*.bmp;*.gif;*.jpeg;*.jpg;*.png;*.tif)|*.bmp;*.gif;*.jpeg;*.jpg;*.png;*.tif'"));
	Элементы.Добавить(НСтр("ru = 'Все файлы(*.*)|*.*';
							|en = 'All files(*.*)|*.*'"));
	Элементы.Добавить(НСтр("ru = 'Формат bmp(*.bmp*)|*.bmp';
							|en = 'Format bmp(*.bmp*)|*.bmp'"));
	Элементы.Добавить(НСтр("ru = 'Формат GIF(*.gif*)|*.gif';
							|en = 'Format GIF(*.gif*)|*.gif'"));
	Элементы.Добавить(НСтр("ru = 'Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg';
							|en = 'Format JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg'"));
	Элементы.Добавить(НСтр("ru = 'Формат PNG(*.png*)|*.png';
							|en = 'Format PNG(*.png*)|*.png'"));
	Элементы.Добавить(НСтр("ru = 'Формат TIFF(*.tif)|*.tif';
							|en = 'Format TIFF(*.tif)|*.tif'"));
	Возврат СтрСоединить(Элементы, "|");
	
КонецФункции

#КонецОбласти
