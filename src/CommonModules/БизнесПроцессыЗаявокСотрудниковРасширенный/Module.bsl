
#Область СлужебныйПрограммныйИнтерфейс

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.17.83";
	Обработчик.Процедура		= "БизнесПроцессыЗаявокСотрудниковРасширенный.ОбновитьИспользованиеБизнесПроцессов";
	Обработчик.РежимВыполнения	= "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.17.83";
	Обработчик.Процедура 		= "БизнесПроцессыЗаявокСотрудниковРасширенный.ОбновитьСтруктуруПредприятия";
	Обработчик.РежимВыполнения 	= "Монопольно";
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия		   	= "3.1.17.86";
	Обработчик.Процедура 	   	= "БизнесПроцессыЗаявокСотрудниковРасширенный.ПеренестиЗаявкиКабинетаСотрудниковВЗаявкиСотрудников";
	Обработчик.РежимВыполнения 	= "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.18.116";
	Обработчик.Процедура		= "БизнесПроцессыЗаявокСотрудниковРасширенный.ОбновитьТочкиМаршрутовБизнесПроцессов";
	Обработчик.РежимВыполнения	= "Монопольно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.18.149";
	Обработчик.Процедура 		= "БизнесПроцессыЗаявокСотрудниковРасширенный.ОбновитьРолиИсполнителейЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 			= "3.1.19.33";
	Обработчик.Процедура 		= "БизнесПроцессыЗаявокСотрудниковРасширенный.ОбновитьИсполнителейЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= "Монопольно";
		
#Область ОбновлениеДляИспользованияКЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.33";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("3d0bc515-1d39-44a6-a885-b677c2478255");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников с предупреждением об отсутствии для работы с использованием КЭДО.';
										|en = 'Preparation of the employee requests with absence notification to use HR EDI.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.33";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("a9905a76-12ca-40bc-93d3-35aa4e493a59");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на получение справки об остатках отпусков для работы с использованием КЭДО.';
										|en = 'Preparation of the employee requests for remaining leave statement receipt to use HR EDI.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.19.33";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ОбновлениеДляИспользованияКЭДО";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор    = Новый УникальныйИдентификатор("0a897e6d-2f47-448b-a351-c90d67ae5b5e");
	Обработчик.Комментарий      = НСтр("ru = 'Подготовка заявок сотрудников на получение справки с места работы для работы с использованием КЭДО.';
										|en = 'Preparation of the employee requests for receiving a statement of employment to use HR EDI.'");
	
#КонецОбласти

#Область ПеренестиПрисоединенныеФайлыВложений

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.34";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("53ccc52e-9a94-49f6-8b38-bad895ee2465");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников с предупреждением об отсутствии в новый справочник.';
											|en = 'Transfer attachments of employee requests with absence notification to a new catalog.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.34";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("f65f92df-70c6-4cdd-8b76-7f9dd2513d02");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на получение справки об остатках отпусков в новый справочник.';
											|en = 'Transfer attachments of employee requests for remaining leave statement receipt to a new catalog.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.19.34";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ПеренестиПрисоединенныеФайлыВложений";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("32a6bc6b-dc98-4509-8562-eb46f9717188");
	Обработчик.Комментарий     	= НСтр("ru = 'Перенос присоединенных файлов вложений по заявкам сотрудников на получение справки с места работы в новый справочник.';
											|en = 'Transfer attachments of employee requests for employment statement receipt to a new catalog.'");
	
#КонецОбласти

#Область ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.3";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("d6d6a7b1-4ab5-453e-bfc8-9656d8f16a8f");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на добровольные страховые взносы.';
											|en = 'Fill the details of the HR EDI document content by employee requests for voluntary insurance contributions.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.3";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("98ef2adc-e5df-4293-8cf5-fe7bdec67404");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника с предупреждением об отсутствии.';
											|en = 'Fill the details of the HR EDI document content by employee requests with absence notification.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.3";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("d442ff9e-fb68-40d4-a4ab-32db998e179f");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на получение справки об остатках отпусков.';
											|en = 'Fill the details of the HR EDI document content by employee requests to receive a remaining leave statement.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          	= "3.1.21.3";
	Обработчик.Процедура       	= "БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ЗаполнитьСодержимоеДокументаКадровогоЭДОЗаявокСотрудников";
	Обработчик.РежимВыполнения 	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   	= Новый УникальныйИдентификатор("677479bd-9319-4aad-aa7a-ab81461aabba");
	Обработчик.Комментарий     	= НСтр("ru = 'Заполнение реквизита содержимое документа у документов кадрового эдо по заявкам сотрудника на получение справки с места работы.';
											|en = 'Fill the details of the HR EDI document content by employee requests to receive a statement of employment.'");
		
#КонецОбласти

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия			= "3.1.25.128";
	Обработчик.Процедура		= "БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ПеренестиСогласователейЗаявкиВРегистр";
	Обработчик.РежимВыполнения	= ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор	= Новый УникальныйИдентификатор("18bb6105-65d6-4880-bb58-548b65c04e5c");
	Обработчик.Комментарий		= НСтр("ru = 'Перенос информации о согласовании руководителем отсутствия в регистр согласователей заявок сотрудника';
										|en = 'Transfer information about the absence approval by the supervisor to the register of employee request approvers'");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураПредприятия()
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = МодульОрганизационнаяСтруктура.СтруктураПредприятия();
	КонецЕсли;
	
	Возврат СтруктураПредприятия;

КонецФункции

Процедура ДополнитьРолиИсполнителейЗадач(Роли) Экспорт

	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы);
	Роли.Добавить(Справочники.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ);

КонецПроцедуры

Функция ТипСтруктураПредприятия() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Возврат МодульОрганизационнаяСтруктура.ТипСтруктураПредприятия();
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция СоздаватьПрогулНеявкаПроверкаУсловия(БизнесПроцесс) Экспорт
	Возврат НЕ БизнесПроцесс.ПоБеременности;	
КонецФункции

Функция ДокументПредметЗаявкаСотрудникаОтсутствиеПоБолезни(БизнесПроцесс) Экспорт
	Если БизнесПроцесс.СостояниеЗаявки <> Перечисления.СостоянияЗаявокКабинетСотрудника.Новая
		 И Не БизнесПроцесс.СостояниеЗаявки.Пустая() Тогда
		Возврат ?(БизнесПроцесс.ИсправлениеПрогулНеявка.Пустая(),
			  	  БизнесПроцесс.БольничныйЛист, 
			  	  БизнесПроцесс.ИсправлениеПрогулНеявка)
	Иначе	
		Возврат БизнесПроцесс.ПрогулНеявка;
	КонецЕсли;
КонецФункции

Функция РольИсполнителяОтветственныйЗаУдержаниеДСВ() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ");
КонецФункции

Функция ТипЗаявкаСотрудникаДобровольныеСтраховыеВзносы() Экспорт
	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы");
КонецФункции

Функция ТипЗаявкаСотрудникаОтсутствие() Экспорт
	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтсутствие");
КонецФункции

Функция ТипЗаявкаСотрудникаСправкаСМестаРаботы() Экспорт
	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы");
КонецФункции

Функция ТипЗаявкаСотрудникаСправкаОстаткиОтпусков() Экспорт
	Возврат Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаОстаткиОтпусков");
КонецФункции

Функция МестаПозицийВСтруктуреПредприятия(Позиции) Экспорт
	
	СтруктураПредприятия = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		СтруктураПредприятия = Модуль.МестаПозицийВСтруктуреПредприятия(Позиции);
	КонецЕсли;
	Возврат СтруктураПредприятия;

КонецФункции

Функция ДоступнаФункциональнаяОпцияЗаявкаСотрудникаОтсутствиеПоБолезни(Этап) Экспорт
	Если Этап = ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихНевыходов");
	ИначеЕсли Этап = ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ОформлениеБольничногоЛиста") Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчетРасширенная");
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Процедура ОтметитьОжидаетПодписиЗаявкаСотрудникаСправкаСМестаРаботы(СправкаСМестаРаботы, Удаление) Экспорт
	БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ОтметитьОжидаетПодписание(СправкаСМестаРаботы, Удаление);	
КонецПроцедуры

Функция ПубликуемаяСтруктураПредприятия() Экспорт

	Если ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат СтруктураПодразделенийОрганизации();
	Иначе
		Возврат СтруктураПредприятия();
	КонецЕсли;

КонецФункции

Функция СтруктураПодразделенийОрганизации()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТекстЗапросаЗаявкиСотрудникаСПодписаннымФайломОтвета() Экспорт
	Возврат "ВЫБРАТЬ
	        |	ЗаявкаСотрудникаСправка2НДФЛ.Ссылка КАК Ссылка
	        |ПОМЕСТИТЬ ВТАктивныеЗаявкиСправка2НДФЛ
	        |ИЗ
	        |	БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ КАК ЗаявкаСотрудникаСправка2НДФЛ
	        |ГДЕ
	        |	НЕ ЗаявкаСотрудникаСправка2НДФЛ.Завершен
	        |	И НЕ ЗаявкаСотрудникаСправка2НДФЛ.Выполнено
	        |	И НЕ ЗаявкаСотрудникаСправка2НДФЛ.ПометкаУдаления
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СправкаНДФЛПрисоединенныеФайлы.Ссылка КАК СправкаНДФЛ,
	        |	ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ.Ссылка КАК Ссылка
	        |ПОМЕСТИТЬ ВТПодписанныеСправкиНДФЛ
	        |ИЗ
	        |	ВТАктивныеЗаявкиСправка2НДФЛ КАК ВТАктивныеЗаявкиСправка2НДФЛ
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправка2НДФЛ.СправкиНДФЛ КАК ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ
	        |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СправкаНДФЛПрисоединенныеФайлы КАК СправкаНДФЛПрисоединенныеФайлы
	        |			ПО ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ.СправкаНДФЛ = СправкаНДФЛПрисоединенныеФайлы.ВладелецФайла
	        |				И (НЕ СправкаНДФЛПрисоединенныеФайлы.ПометкаУдаления)
	        |				И (СправкаНДФЛПрисоединенныеФайлы.ПодписанЭП)
	        |		ПО ВТАктивныеЗаявкиСправка2НДФЛ.Ссылка = ЗаявкаСотрудникаСправка2НДФЛСправкиНДФЛ.Ссылка
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.Ссылка КАК СправкаСМестаРаботы,
	        |	ЗаявкаСотрудникаСправкаСМестаРаботы.Ссылка КАК Ссылка
	        |ПОМЕСТИТЬ ВТПодписанныеСправкиСМестаРаботы
	        |ИЗ
	        |	Справочник.ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы КАК ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы КАК ЗаявкаСотрудникаСправкаСМестаРаботы
	        |		ПО ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ВладелецФайла = ЗаявкаСотрудникаСправкаСМестаРаботы.Ссылка
	        |ГДЕ
	        |	НЕ ЗаявкаСотрудникаСправкаСМестаРаботы.ПометкаУдаления
	        |	И НЕ ЗаявкаСотрудникаСправкаСМестаРаботы.Завершен
	        |	И НЕ ЗаявкаСотрудникаСправкаСМестаРаботы.Выполнено
	        |	И НЕ ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ПометкаУдаления
	        |	И ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ФайлОтвета
	        |	И ЗаявкаСотрудникаСправкаСМестаРаботыПрисоединенныеФайлы.ПодписанЭП
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТПодписанныеСправкиНДФЛ.СправкаНДФЛ КАК ПрисоединенныйФайл,
	        |	КОЛИЧЕСТВО(ЗапланированныеДействияСФайламиДокументовКЭДО.ПрисоединенныйФайл) КАК КоличествоЗапланированныхДействий,
	        |	ВТПодписанныеСправкиНДФЛ.Ссылка КАК Ссылка,
	        |	ЗадачаИсполнителя.Ссылка КАК Задача
	        |ИЗ
	        |	ВТПодписанныеСправкиНДФЛ КАК ВТПодписанныеСправкиНДФЛ
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗапланированныеДействияСФайламиДокументовКЭДО КАК ЗапланированныеДействияСФайламиДокументовКЭДО
	        |		ПО ВТПодписанныеСправкиНДФЛ.СправкаНДФЛ = ЗапланированныеДействияСФайламиДокументовКЭДО.ПрисоединенныйФайл
	        |			И (ЗапланированныеДействияСФайламиДокументовКЭДО.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСФайламиДокументовКЭДО.Подписать))
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	        |		ПО ВТПодписанныеСправкиНДФЛ.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
	        |ГДЕ
	        |	НЕ ЗадачаИсполнителя.Выполнена
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТПодписанныеСправкиНДФЛ.СправкаНДФЛ,
	        |	ВТПодписанныеСправкиНДФЛ.Ссылка,
	        |	ЗадачаИсполнителя.Ссылка
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВТПодписанныеСправкиСМестаРаботы.СправкаСМестаРаботы,
	        |	КОЛИЧЕСТВО(ЗапланированныеДействияСФайламиДокументовКЭДО.ПрисоединенныйФайл),
	        |	ВТПодписанныеСправкиСМестаРаботы.Ссылка,
	        |	ЗадачаИсполнителя.Ссылка
	        |ИЗ
	        |	ВТПодписанныеСправкиСМестаРаботы КАК ВТПодписанныеСправкиСМестаРаботы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗапланированныеДействияСФайламиДокументовКЭДО КАК ЗапланированныеДействияСФайламиДокументовКЭДО
	        |		ПО ВТПодписанныеСправкиСМестаРаботы.СправкаСМестаРаботы = ЗапланированныеДействияСФайламиДокументовКЭДО.ПрисоединенныйФайл
	        |			И (ЗапланированныеДействияСФайламиДокументовКЭДО.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСФайламиДокументовКЭДО.Подписать))
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	        |		ПО ВТПодписанныеСправкиСМестаРаботы.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
	        |ГДЕ
	        |	НЕ ЗадачаИсполнителя.Выполнена
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТПодписанныеСправкиСМестаРаботы.СправкаСМестаРаботы,
	        |	ВТПодписанныеСправкиСМестаРаботы.Ссылка,
	        |	ЗадачаИсполнителя.Ссылка
	        |ИТОГИ ПО
	        |	Ссылка";
КонецФункции

Функция ВладелецЗаявкаСотрудника(Ссылки) Экспорт
	Возврат ТипЗнч(Ссылки[0]) = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы")	
КонецФункции

Функция АктивныеЭтапыЗаявокСотрудников() Экспорт
	
	АктивныеЭтапы = Новый Массив;
	
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыДобровольныеСтраховыеВзносы"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствие"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаОстаткиОтпусков"));
	АктивныеЭтапы.Добавить(ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаСМестаРаботы"));
	
	Возврат АктивныеЭтапы;
	
КонецФункции

Функция СоответствиеЭтапаЗаявкиСотрудникаИТипаЗаявки() Экспорт
	
	Соответствие = Новый Соответствие;
		
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыДобровольныеСтраховыеВзносы"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствие"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаОстаткиОтпусков"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.Имя);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаСМестаРаботы"),
		Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.Имя);
				
	Возврат Соответствие;
	
КонецФункции

Функция СоответствиеЭтапаЗаявкиСотрудникаИТочкиМаршрута() Экспорт
	
	Соответствие = Новый Соответствие;
		
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыДобровольныеСтраховыеВзносы"),
		БизнесПроцессы.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствие"),
		БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни"),
		БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ТочкиМаршрута.ЗарегистрироватьОтсутствие);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаОстаткиОтпусков"),
		БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.ТочкиМаршрута.Выполнить);
	Соответствие.Вставить(
		ПредопределенноеЗначение("Справочник.ЭтапыЗаявокСотрудников.ФормированиеСправкаСМестаРаботы"),
		БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ТочкиМаршрута.Выполнить);
				
	Возврат Соответствие;
	
КонецФункции

Функция ЗаявкаСотрудникаОтсутствиеПоБолезниПервыйЭтап() Экспорт
	Возврат Справочники.ЭтапыЗаявокСотрудников.СогласованиеКадрыОтсутствиеПоБолезни;	
КонецФункции

#Область КабинетСотрудника

Функция СоответствиеЗаявкиИТипаЗаявки()  Экспорт
	
	ТипыЗаявок = Перечисления.ТипыЗаявокКабинетСотрудника;
	СоответствиеЗаявок = Новый Соответствие;
	
	СоответствиеЗаявок.Вставить(ТипыЗаявок.ЗаявлениеНаКомпенсациюОтпуска,	"ЗаявкаСотрудникаОтпуск");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.ЗаявлениеНаУдержаниеДСВ,			"ЗаявкаСотрудникаДобровольныеСтраховыеВзносы");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.СправкаСМестаРаботы,				"ЗаявкаСотрудникаСправкаСМестаРаботы");
	СоответствиеЗаявок.Вставить(ТипыЗаявок.СправкаОбОстаткеОтпуска,			"ЗаявкаСотрудникаСправкаОстаткиОтпусков");
	
	Возврат СоответствиеЗаявок;
	
КонецФункции

Функция СоответствиеОтсутствия() Экспорт
	
	ПричиныОтсутствий = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника;
	СоответствиеОтсутствий = Новый Соответствие;
	
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.Опоздание,					"ЗаявкаСотрудникаОтсутствие");
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.ОтпускПоУходуЗаРебенком,		"ЗаявкаСотрудникаОтсутствие");
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.Отгул,						"ЗаявкаСотрудникаОтсутствие");
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.Командировка,					"ЗаявкаСотрудникаОтсутствие");
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.ЛичныеДела,					"ЗаявкаСотрудникаОтсутствие");
	СоответствиеОтсутствий.Вставить(ПричиныОтсутствий.ДниУходаЗаДетьмиИнвалидами,	"ЗаявкаСотрудникаОтсутствие");
	
	Возврат СоответствиеОтсутствий;
	
КонецФункции

// Получает таблицу с данными заявок с места работы.
//
// 	Параметры
// 		Заявки - Массив - ссылки на бизнес-процессы заявок с места работы
//
// 	Возвращаемое значение:
// 		ТаблицаЗначений
// 			* Заявка - БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаСМестаРаботы
// 			* Организация - СправочникСсылка.Организации
// 			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
// 			* Комментарий - Строка
// 			* ИдентификаторЗаявки - Строка
// 			* ВариантФормированияФайлаОтвета - ПеречислениеСсылка.ВариантыФормированияФайлаОтветаЗаявкиСотрудника.
//
Функция ДанныеЗаявокСправкиСРаботы(Заявки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заявки", Заявки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявки.Ссылка КАК Заявка,
	|	Заявки.Организация КАК Организация,
	|	Заявки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Заявки.ОтветПоЗаявке КАК Комментарий,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Заявки.СостояниеЗаявки КАК СостояниеЗаявки
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы КАК Заявки
	|ГДЕ
	|	Заявки.Ссылка В(&Заявки)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаФайловОтветаЗаявокСотрудника(ПубликуемыеЗаявки, ТипДанных) Экспорт

	ТаблицаФайловОтвета = Новый ТаблицаЗначений;
	ТаблицаФайловОтвета.Колонки.Добавить("Заявка");
	ТаблицаФайловОтвета.Колонки.Добавить("ФайлЗаявки");
	
	Если ТипДанных = Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаСправкаОстаткиОтпусков") Тогда
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы.Ссылка КАК ФайлЗаявки,
		               |	ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы.ВладелецФайла КАК Заявка
		               |ИЗ
		               |	Справочник.ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы КАК ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы
		               |ГДЕ
		               |	ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы.ФайлОтвета = ИСТИНА
		               |	И ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы.ВладелецФайла В(&ЗаявкиСотрудников)
		               |	И ЗаявкаСотрудникаСправкаОстаткиОтпусковПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ЗаявкиСотрудников", ПубликуемыеЗаявки);
		
		ТаблицаФайловОтвета = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаФайловОтвета;

КонецФункции

Функция ТипыЗаявокСогласовываемыеРуководителем() Экспорт
	
	ТипыЗаявок = Новый Массив;
	ТипыЗаявок.Добавить(Тип("БизнесПроцессСсылка.ЗаявкаСотрудникаОтсутствие"));
	
	Возврат ТипыЗаявок
	
КонецФункции

Процедура СоздатьВТДанныеЗаявокСправкиСРаботы(МенеджерВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Заявки.Ссылка КАК Заявка,
	|	Заявки.Организация КАК Организация,
	|	Заявки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Заявки.ОтветПоЗаявке КАК Комментарий,
	|	Заявки.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Заявки.ВариантФормированияФайлаОтвета КАК ВариантФормированияФайлаОтвета,
	|	Заявки.СостояниеЗаявки КАК СостояниеЗаявки
	|ПОМЕСТИТЬ ВТДанныеЗаявокСправкиСРаботы
	|ИЗ
	|	БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСсылки КАК Ссылки
	|		ПО Заявки.Ссылка = Ссылки.Ссылка";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура ОбновитьИспользованиеБизнесПроцессов() Экспорт
	
	ИспользуетсяСервисКабинетСотрудника = ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника");
	Если Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Получить() <> ИспользуетсяСервисКабинетСотрудника Тогда
		Константы.ИспользоватьБизнесПроцессыЗаявокСотрудников.Установить(ИспользуетсяСервисКабинетСотрудника);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтруктуруПредприятия() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураПредприятия().Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктураСобытия = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктураСобытия");
			МодульОрганизационнаяСтруктураСобытия.ОбновитьСтруктуруПредприятия(Ложь);
		КонецЕсли;	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИмяСобытия = НСтр("ru = 'Не удалось обновить структуру предприятия';
							|en = 'Cannot update the enterprise structure'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
		
КонецПроцедуры

Процедура ОбновитьРолиИсполнителейЗаявокСотрудников() Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	РолиИсполнителей = Новый Массив;
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаЗаявленияНаОтпуск"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаИзменениеЛичныхДанных"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаНалоговыеВычеты"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСогласованиеОтсутствий"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиНДФЛ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиОбОстаткахОтпусков"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаСправкиСМестаРаботы"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаУдержаниеДСВ"));
	РолиИсполнителей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РолиИсполнителей.ОтветственныйЗаОбращенияСотрудников"));
	
	Отбор = ОбновлениеИнформационнойБазы.ПараметрыОбновленияПредопределенныхЭлементов();
	Отбор.Элементы = РолиИсполнителей;
	
	ОбновлениеИнформационнойБазы.ОбновитьПредопределенныеЭлементы(Метаданные.Справочники.РолиИсполнителей, Отбор);
КонецПроцедуры

Процедура ОбновитьИсполнителейЗаявокСотрудников() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	РолиИсполнителейЗадач = БизнесПроцессыЗаявокСотрудников.РолиИсполнителейЗадач();
	ТипСтруктураПредприятия = ТипСтруктураПредприятия();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Роли", РолиИсполнителейЗадач);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В(&Роли)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольИсполнителя";
	Выборка = Запрос.Выполнить().Выбрать();
	НеОбрабатываемыеРоли = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("РольИсполнителя") Цикл
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ОсновнойОбъектАдресации)
				И ТипЗнч(Выборка.ОсновнойОбъектАдресации) = ТипСтруктураПредприятия Тогда
				НеОбрабатываемыеРоли.Добавить(Выборка.РольИсполнителя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РолиКОбработке = Новый Массив;
	Для каждого Роль Из РолиИсполнителейЗадач Цикл
		Если НеОбрабатываемыеРоли.Найти(Роль) = Неопределено Тогда
			РолиКОбработке.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	
	Если РолиКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПредприятия = СтруктураПредприятия();
	
	Запрос.УстановитьПараметр("Роли", РолиКОбработке);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсполнителиЗадач.РольИсполнителя КАК РольИсполнителя,
	|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|ГДЕ
	|	ИсполнителиЗадач.РольИсполнителя В(&Роли)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РольИсполнителя";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ИсполнителиЗадач.СоздатьНаборЗаписей();
	ПустоеПодразделение = Новый(ТипСтруктураПредприятия());
	Пока Выборка.СледующийПоЗначениюПоля("РольИсполнителя") Цикл
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				Для каждого СтрокаТЗ Из СтруктураПредприятия Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.РольИсполнителя = Выборка.РольИсполнителя;
					НоваяЗапись.Исполнитель = Выборка.Исполнитель;
					НоваяЗапись.ОсновнойОбъектАдресации = СтрокаТЗ.Подразделение;
				КонецЦикла;
			КонецЦикла;
			НаборЗаписей.Отбор.РольИсполнителя.Установить(Выборка.РольИсполнителя);
			
			НовыеИсполнителиЗадач = НаборЗаписей.Выгрузить();
			ГруппыИсполнителейЗадач = БизнесПроцессыИЗадачиСервер.ГруппыИсполнителейЗадач(НовыеИсполнителиЗадач);
			Индекс = 0;
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ГруппаИсполнителейЗадач = ГруппыИсполнителейЗадач[Индекс];
				Индекс = Индекс + 1;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Комментарий = СтрШаблон(НСтр("ru = 'Не удалось обновить роль сотрудника %1.';
										|en = 'Cannot update employee %1 role.'"),
									Строка(Выборка.РольИсполнителя));		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Бизнес-процессы заявок сотрудников.Обновление исполнителей заявок сотрудников';
											|en = 'Employee application business processes client server. Updating employee applications assignees'",
										  ОбщегоНазначения.КодОсновногоЯзыка()),
									 УровеньЖурналаРегистрации.Ошибка,
									 ,
									 ,
									 Комментарий);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПеренестиЗаявкиКабинетаСотрудниковВЗаявкиСотрудников

Процедура ПеренестиЗаявкиКабинетаСотрудниковВЗаявкиСотрудников() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыЗаявокСотрудников") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗаявкаКабинетСотрудника.Ссылка КАК ЗаявкаКабинетаСотрудника,
	|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
	|	УдалитьЗаявкаКабинетСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника КАК УдалитьЗаявкаКабинетСотрудника
	|		ПО ЗадачаИсполнителя.БизнесПроцесс = УдалитьЗаявкаКабинетСотрудника.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявкаКабинетаСотрудника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмененияДляСервиса.ПредметПубликации КАК ПредметПубликации
	|ИЗ
	|	РегистрСведений.УдалитьИзмененияДляСервисаКабинетСотрудника КАК ИзмененияДляСервиса
	|ГДЕ
	|	ИзмененияДляСервиса.ПредметПубликации ССЫЛКА БизнесПроцесс.УдалитьЗаявкаКабинетСотрудника";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса[0].Выгрузить(), "ФизическоеЛицо", Истина);
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиИнформационнойБазы(Ложь, ФизическиеЛица, ТекущаяДатаСеанса());
	ОбъектыАдресации = ОбъектыАдресации(ОсновныеСотрудники);
	
	ЗаявкиКПубликации = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ПредметПубликации");
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ЗаявкаКабинетаСотрудника") Цикл
		
		НачатьТранзакцию();
		Попытка 
			
			СтараяЗаявка = Выборка.ЗаявкаКабинетаСотрудника;
			ЗаявкаСотрудника = ЗаявкаНаОснованииЗаявкиКабинетаСотрудников(СтараяЗаявка, ОбъектыАдресации);
			
			Если ЗаявкаСотрудника = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				ЗадачаИсполнителяОбъект = Выборка.ЗадачаИсполнителя.ПолучитьОбъект();
				ЗадачаИсполнителяОбъект.БизнесПроцесс = ЗаявкаСотрудника;
				ЗадачаИсполнителяОбъект.ОсновнойОбъектАдресации = ЗаявкаСотрудника.ОсновнойОбъектАдресации;
				ЗадачаИсполнителяОбъект.ДополнительныйОбъектАдресации = ЗаявкаСотрудника.ДополнительныйОбъектАдресации;
				Если ЗадачаИсполнителяОбъект.Выполнена Тогда
					ЗадачаИсполнителяОбъект.Выполнена = Ложь;
					ЗадачаИсполнителяОбъект.Записать();
					ЗадачаИсполнителяОбъект.ВыполнитьЗадачу();
				Иначе
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗадачаИсполнителяОбъект);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗаявкиКПубликации.Найти(СтараяЗаявка) <> Неопределено Тогда
				
				НаборЗаписей = РегистрыСведений.УдалитьИзмененияДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПредметПубликации.Установить(СтараяЗаявка);
				НаборЗаписей.Прочитать();
				
				НовыйНаборЗаписей = РегистрыСведений.УдалитьИзмененияЗаявокДляСервисаКабинетСотрудника.СоздатьНаборЗаписей();
				НовыйНаборЗаписей.Отбор.ПредметПубликации.Установить(ЗаявкаСотрудника);
				
				Для Каждого Запись Из НаборЗаписей Цикл
					НоваяЗапись = НовыйНаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
					НоваяЗапись.ПредметПубликации = ЗаявкаСотрудника;
				КонецЦикла;
				
				НаборЗаписей.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйНаборЗаписей);
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				
			КонецЕсли;
			
			ОбновитьДанныеБизнесПроцессов(ЗаявкаСотрудника, СтараяЗаявка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Комментарий = СтрШаблон(НСтр("ru = 'Не удалось перенести заявку %1.';
										|en = 'Cannot transfer request %1.'"), Строка(СтараяЗаявка));		
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Бизнес-процессы заявок сотрудников.Перенес заявок кабинета сотрудников в заявки сотрудников';
					|en = 'Employee application business processes client server. Transferring employee account applications to employee applications'",
					 ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				Комментарий);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаявкаНаОснованииЗаявкиКабинетаСотрудников(Заявка, ОбъектыАдресации)
	
	ЗаявкаКабинета = Заявка.ПолучитьОбъект();
	
	Если ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаНалоговыеВычеты Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаНалоговыйВычет.СоздатьБизнесПроцесс();
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ЗаявлениеНаОтпуск Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаОтпуск.СоздатьБизнесПроцесс()
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.ИзменениеЛичныхДанных Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаИзменитьЛичныеДанные.СоздатьБизнесПроцесс();
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия Тогда
		Если ЗаявкаКабинета.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
			Или ЗаявкаКабинета.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам Тогда
			ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.СоздатьБизнесПроцесс();
		ИначеЕсли ЗаявкаКабинета.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
			ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаОтпуск.СоздатьБизнесПроцесс();
		Иначе
			ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаОтсутствие.СоздатьБизнесПроцесс();
		КонецЕсли;
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаСправка2НДФЛ.СоздатьБизнесПроцесс();
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаОбОстаткеОтпуска Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков.СоздатьБизнесПроцесс();
	ИначеЕсли ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаСМестаРаботы Тогда
		ЗаявкаСотрудника = БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.СоздатьБизнесПроцесс();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаявкаСотрудника, ЗаявкаКабинета, , "ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации,ГруппаИсполнителейЗадач");
	
	ЗаявкаСотрудника.Содержание = СтрЗаменить(ЗаявкаСотрудника.Содержание,
											  НСтр("ru = 'Проверьте автоматически сформированный файл или прикрепите свой и выполните задачу.';
													|en = 'Check the automatically generated file or attach your own and complete the task.'"),
											 "");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗаявкаСотрудника, "СтараяВерсия") Тогда
		ЗаявкаСотрудника.СтараяВерсия = Истина;
	КонецЕсли;
	ЗаявкаСотрудника.ТипЗаявкиКабинетСотрудника = ЗаявкаКабинета.ТипЗаявки;
	ЗаявкаСотрудника.ОсновнойОбъектАдресации = ОбъектыАдресации[ЗаявкаСотрудника.ФизическоеЛицо];
	
	Для каждого СтрокаТЧ Из ЗаявкаКабинета.УдалитьФайлыЗаявки Цикл
		ЗаполнитьЗначенияСвойств(ЗаявкаСотрудника.УдалитьФайлыЗаявки.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Если ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СправкаНДФЛ Тогда
		ЗаявкаСотрудника.Предмет = ЗаявкаКабинета.ФизическоеЛицо;
		НоваяСтрока = ЗаявкаСотрудника.СправкиНДФЛ.Добавить();
		НоваяСтрока.СправкаНДФЛ = ЗаявкаКабинета.Предмет;
	КонецЕсли;
	
	Если ЗаявкаКабинета.ТипЗаявки = Перечисления.ТипыЗаявокКабинетСотрудника.СогласованиеОтсутствия
		 И ЗаявкаКабинета.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.УчебныйОтпуск Тогда
		ОтпускПоБеременности = (ЗаявкаКабинета.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.ОтпускПоБеременностиИРодам); 
		Если ЗаявкаКабинета.ПричинаОтсутствия = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника.Болезнь
			 ИЛИ ОтпускПоБеременности Тогда
			ЗаявкаСотрудника.ПоБеременности = ОтпускПоБеременности;			
		Иначе
			ПричинаОтсутствия = ЗаявкаКабинета.ПричинаОтсутствия;
			ЗаявкаСотрудника.ПричинаОтсутствия = ПричинаОтсутствия;
			ПричиныОтсутствийЗаявокКабинетСотрудника = Перечисления.ПричиныОтсутствийЗаявокКабинетСотрудника;
			ЭтоОпоздание = (ПричинаОтсутствия = ПричиныОтсутствийЗаявокКабинетСотрудника.Опоздание);
			ЭтоЛичныеДела = (ПричинаОтсутствия = ПричиныОтсутствийЗаявокКабинетСотрудника.ЛичныеДела);
			ЗаявкаСотрудника.ДействиеНеТребуется = ЭтоОпоздание ИЛИ ЭтоЛичныеДела;
		КонецЕсли;
		ЗаявкаСотрудника.ДатаНачалаОтсутствия = ЗаявкаКабинета.ДатаНачалаОтпуска;
		ЗаявкаСотрудника.ДатаОкончанияОтсутствия = ЗаявкаКабинета.ДатаОкончанияОтпуска;
	КонецЕсли;
		
	ЗаявкаСотрудника.ГруппаИсполнителейЗадач = ?(ТипЗнч(ЗаявкаСотрудника.Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"),
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(ЗаявкаСотрудника.Исполнитель, ЗаявкаСотрудника.ОсновнойОбъектАдресации, ЗаявкаСотрудника.ДополнительныйОбъектАдресации),
		ЗаявкаСотрудника.Исполнитель);
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаявкаСотрудника);
	Возврат ЗаявкаСотрудника.Ссылка;

КонецФункции

Процедура ОбновитьДанныеБизнесПроцессов(НоваяЗаявка, СтараяЗаявка)
	
	НаборЗаписей = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Владелец.Установить(СтараяЗаявка);
	НаборЗаписей.Прочитать();
	
	НовыйНаборЗаписей = РегистрыСведений.ДанныеБизнесПроцессов.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Отбор.Владелец.Установить(НоваяЗаявка.Ссылка);
	
	Для Каждого Запись Из НаборЗаписей Цикл
		НоваяЗапись = НовыйНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		НоваяЗапись.Владелец = НоваяЗаявка.Ссылка;
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйНаборЗаписей);
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

Функция ОбъектыАдресации(ОсновныеСотрудникиФизическихЛиц)

	ОбъектыАдресации = Новый Соответствие;
	
	ОсновныеСотрудники = Новый Массив;
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		ОсновныеСотрудники.Добавить(ЭлементКоллекции.Значение);
	КонецЦикла;
	
	КадровыеДанные = "МестоВСтруктуреПредприятия";
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	Если Не ВедетсяШтатноеРасписание Тогда
		КадровыеДанные = КадровыеДанные + ",Подразделение,Должность";
	КонецЕсли;
	
	ТаблицаДанных = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, ОсновныеСотрудники, КадровыеДанные);
	Если Не ВедетсяШтатноеРасписание Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КадровыеДанные", ТаблицаДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПозицииСотрудников = Новый Соответствие;
		Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
			ПозицииСотрудников.Вставить(СтрокаТЗ.Сотрудник, СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
		КонецЦикла;
		
		Позиции = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций,"ДолжностьПоШтатномуРасписанию",Истина);
		СтруктураПредприятия = МестаПозицийВСтруктуреПредприятия(Позиции);
		ПодразделенияПозиций = Новый Соответствие;
		Для каждого СтрокаКоллекции Из СтруктураПредприятия Цикл
			ПодразделенияПозиций.Вставить(СтрокаКоллекции.Позиция, СтрокаКоллекции.Подразделение);
		КонецЦикла;
		
		Для каждого СтрокаТЗ Из ТаблицаДанных Цикл
			ДолжностьПоШтатномуРасписанию = ПозицииСотрудников[СтрокаТЗ.Сотрудник];
			СтрокаТЗ.МестоВСтруктуреПредприятия = ПодразделенияПозиций[ДолжностьПоШтатномуРасписанию];
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаДанных.Индексы.Добавить("Сотрудник");
	Отбор = Новый Структура("Сотрудник");
	ПустоеПодразделение = Новый(ТипСтруктураПредприятия());
	Для каждого ЭлементКоллекции Из ОсновныеСотрудникиФизическихЛиц Цикл
		Отбор.Сотрудник = ЭлементКоллекции.Значение;
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(Отбор);
		Подразделение = ПустоеПодразделение;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Подразделение = НайденныеСтроки[0].МестоВСтруктуреПредприятия;
		КонецЕсли;
		ОбъектыАдресации.Вставить(ЭлементКоллекции.Ключ, Подразделение);
	КонецЦикла;
	
	Возврат ОбъектыАдресации;

КонецФункции

#КонецОбласти

#Область ОбновитьТочкиМаршрутовБизнесПроцессов

Процедура ОбновитьТочкиМаршрутовБизнесПроцессов() Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗаписьБизнесПроцесса Из НеВыполненныеБизнесПроцессы() Цикл
			
			Если ЗаписьБизнесПроцесса.ЗадачаИсполнителя <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			БизнесПроцесс = ЗаписьБизнесПроцесса.БизнесПроцесс.ПолучитьОбъект();
			БизнесПроцесс.Завершен = Истина;
			БизнесПроцесс.Выполнено = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(БизнесПроцесс);
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
	    ОтменитьТранзакцию();
		Комментарий = НСтр("ru = 'Не удалось обновить точки маршрутов у заявок.';
							|en = 'Cannot update route points of the requests.'");		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Бизнес-процессы заявок сотрудников.Обновление точек маршрутов бизнес процессов';
				|en = 'Employee request business processes. Update business process route points'",
				 ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Комментарий);
	КонецПопытки;
	
КонецПроцедуры

Функция НеВыполненныеБизнесПроцессы() 
	
	ТаблицаБизнесПроцессов = НовыйНеВыполненныеБизнесПроцессы();
	
	Для Каждого ТипЗаявки Из Метаданные.ОпределяемыеТипы.ПубликуемыеЗаявкиКабинетСотрудника.Тип.Типы() Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НеВыполненныеБизнесПроцессыПоТипу(ТипЗаявки),
													  ТаблицаБизнесПроцессов);
	КонецЦикла;
												  
	Возврат ТаблицаБизнесПроцессов;											  
	
КонецФункции

Функция НеВыполненныеБизнесПроцессыПоТипу(ТипЗаявки)
	
	ТипЗаявкиСсылка = Новый(ТипЗаявки);
	ТипЗаявкиМетаданные = ТипЗаявкиСсылка.Метаданные();
	ИмяТаблицы = ТипЗаявкиМетаданные.Имя;
	
	ТаблицаБизнесПроцессов = НовыйНеВыполненныеБизнесПроцессы();
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаявкаСотрудника.Ссылка КАК БизнесПроцесс,
	               |	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя
	               |ИЗ
	               |	#Таблица КАК ЗаявкаСотрудника
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	               |		ПО ЗаявкаСотрудника.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
	               |ГДЕ
	               |	ЗаявкаСотрудника.Выполнено = ЛОЖЬ
				   |ИТОГИ ПО
				   |	БизнесПроцесс";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", "БизнесПроцесс." + ИмяТаблицы);
	
	ВыборкаБизнесПроцесс = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "БизнесПроцесс");
	Пока ВыборкаБизнесПроцесс.Следующий() Цикл
		НоваяЗаписьБизнесПроцессы = ТаблицаБизнесПроцессов.Добавить();
		НоваяЗаписьБизнесПроцессы.БизнесПроцесс = ВыборкаБизнесПроцесс.БизнесПроцесс;
		НоваяЗаписьБизнесПроцессы.ЗадачаИсполнителя = Неопределено;
		Выборка = ВыборкаБизнесПроцесс.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЗадачаИсполнителя = Null Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ЗадачаИсполнителя.Выполнена Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяЗаписьБизнесПроцессы.ЗадачаИсполнителя = Выборка.ЗадачаИсполнителя;
			
			Если Выборка.ЗадачаИсполнителя.ТочкаМаршрута <> Неопределено
				 И Выборка.ЗадачаИсполнителя.ТочкаМаршрута <> БизнесПроцессы.УдалитьЗаявкаКабинетСотрудника.ТочкиМаршрута.Выполнить Тогда
				Продолжить;
			КонецЕсли;
	
			ЗадачаИсполнителя = Выборка.ЗадачаИсполнителя.ПолучитьОбъект();
			Если ИмяТаблицы = Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.Имя Тогда
				ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.ЗаявкаСотрудникаОтсутствиеПоБолезни.ТочкиМаршрута.ЗарегистрироватьОтсутствие;
			Иначе
				ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы[ИмяТаблицы].ТочкиМаршрута.Выполнить;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗадачаИсполнителя);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаБизнесПроцессов;
	
КонецФункции

Функция НовыйНеВыполненныеБизнесПроцессы()
	
	ТаблицаБизнесПроцессов = Новый ТаблицаЗначений;
	ТаблицаБизнесПроцессов.Колонки.Добавить("БизнесПроцесс");
	ТаблицаБизнесПроцессов.Колонки.Добавить("ЗадачаИсполнителя");
	
	Возврат ТаблицаБизнесПроцессов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		Бизнеспроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы.ИдентификаторПечатнойФормы(),
		НСтр("ru = 'Справка с места работы';
			|en = 'Statement of employment'"),
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		,
		,
		Перечисления.ВариантыПодписанияДокументовКЭДО.НеТребуется);
	
КонецПроцедуры

Процедура ПоказатьНовуюФотографию(Форма) Экспорт

	Если Не Форма.Задание.ИзменитьФотографию Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Форма.Задание.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗаявкаСотрудникаИзменитьЛичныеДанныеПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.Фотография
	|	И ПрисоединенныеФайлы.ВладелецФайла = &Владелец";
	ПрисоединенныеФайлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если ЗначениеЗаполнено(ПрисоединенныеФайлы) Тогда
		ПрисоединенныйФайл = ПрисоединенныеФайлы[0];
		ДанныеФайла = Неопределено;
		Попытка
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла());
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(ДанныеФайла) Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Форма.АдресНовойФотографии = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНовуюФотографиюНаСервере(Форма) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ФотографииФизическихЛиц");
		ЭлементБлокировки.УстановитьЗначение("ФизическоеЛицо", Форма.Задание.ФизическоеЛицо);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ФотографииФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Форма.Задание.ФизическоеЛицо);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОбновитьНастройкуПубликации", Истина);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ФизическоеЛицо = Форма.Задание.ФизическоеЛицо;
		ЗаписьНабора.Фотография 	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Форма.АдресНовойФотографии));
		
		НаборЗаписей.Записать();
		
		Форма.Задание.ФотографияИзменена = Истина; 
		
		ЗаданиеОбъект = Форма.РеквизитФормыВЗначение("Задание");
		ЗаданиеОбъект.Записать();
		Форма.ЗначениеВРеквизитФормы(ЗаданиеОбъект, "Задание");
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

