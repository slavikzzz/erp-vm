//////////////////////////////////////////////////////////////
// Модуль "ОтложенныеЗадания" содержит процедуры и функции для
// работы с механизмом отложенных заданий.
//
///////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обрабатывает задания.
//
// Параметры:
//  Задания - Структура - ключ: имя регистра сведений очереди заданий
//                        значение: - Структура       - ключи совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра заданий.
//                                  - ТаблицаЗначений - имена колонок совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра сведений заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ИСТИНА.
//
Процедура Обработать(Задания, СгенерироватьИдентификаторЗаписи = Истина) Экспорт
	
	ТаблицаОчередей = Добавить(Задания, СгенерироватьИдентификаторЗаписи);
	
	Запустить(ТаблицаОчередей);
	
КонецПроцедуры

// Обрабатывает задания очереди.
//
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий
//  Данные - Структура, ТаблицаЗначений - ключи структуры и имена колонок таблицы совпадают с именам измерений,
//                                        ресурсов и реквизитов регистра заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ИСТИНА.
//
Процедура ОбработатьЗаданияОчереди(Очередь, Данные, СгенерироватьИдентификаторЗаписи = Истина) Экспорт
	
	ТаблицаОчереди = ДобавитьЗаданияВОчередь(Очередь, Данные, СгенерироватьИдентификаторЗаписи);
	
	Запустить(ТаблицаОчереди);
	
КонецПроцедуры

// Добавляет задания.
//
// Параметры:
//  Задания - Структура - ключ: имя регистра сведений очереди заданий
//                        значение: - Структура       - ключи совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра заданий.
//                                  - ТаблицаЗначений - имена колонок совпадают с именам измерений, ресурсов
//                                                      и реквизитов регистра сведений заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ЛОЖЬ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//   * Очередь               - Строка - имя регистра сведений очереди заданий
//   * ИндексСтроки          - Число - определяет очередность выполнения очередей
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей заданий (измерение
//                                                                 ИдентификаторЗаписи регистра сведений очереди
//                                                                 заданий).
//
Функция Добавить(Задания, СгенерироватьИдентификаторЗаписи = Ложь) Экспорт
	
	ТаблицаОчередей = ОчередиЗаданий().Скопировать(Новый Массив, ПоляЗапуска());
	ТаблицаОчередей.Колонки.Добавить("ИдентификаторыЗаписей", Новый ОписаниеТипов("Массив"));
	
	Для каждого Задание Из Задания Цикл
		ТаблицаОчереди = ДобавитьЗаданияВОчередь(Задание.Ключ, Задание.Значение, СгенерироватьИдентификаторЗаписи);
		ЗаполнитьЗначенияСвойств(ТаблицаОчередей.Добавить(), ТаблицаОчереди[0]);
	КонецЦикла;
	
	Если ТаблицаОчередей.Количество() > 1 Тогда
		ТаблицаОчередей.Сортировать("ИндексСтроки", Новый СравнениеЗначений);
	КонецЕсли;
	
	Возврат ТаблицаОчередей;
	
КонецФункции

// Добавляет задания в очередь.
//
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий
//  Данные - Структура, ТаблицаЗначений - ключи структуры и имена колонок таблицы совпадают с именам измерений,
//                                        ресурсов и реквизитов регистра заданий.
//  СгенерироватьИдентификаторЗаписи - Булево - если ИСТИНА, тогда идентификатор записи будет сгенерирован
//                                              автоматически. По умолчанию ЛОЖЬ.
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//   * Очередь               - Строка - имя регистра сведений очереди заданий
//   * ИндексСтроки          - Число - определяет очередность выполнения очередей
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей заданий (измерение
//                                                                 ИдентификаторЗаписи регистра сведений очереди
//                                                                 заданий).
//
Функция ДобавитьЗаданияВОчередь(Очередь, Данные, СгенерироватьИдентификаторЗаписи = Ложь) Экспорт
	
	ТаблицаОчереди = ОчередиЗаданий().Скопировать(Новый Структура("Очередь", Очередь), ПоляЗапуска());
	ТаблицаОчереди.Колонки.Добавить("ИдентификаторыЗаписей", Новый ОписаниеТипов("Массив"));
	
	СтрокаТаблицы = ТаблицаОчереди[0];
	
	НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
	
	ТипДанных = ТипЗнч(Данные);
	
	Если ТипДанных = Тип("ТаблицаЗначений") Тогда
		
		Для каждого СтрокаДанных Из Данные Цикл
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтрокаДанных);
			
			Если Не ЗначениеЗаполнено(ЗаписьНабора.ДатаЗаписи) Тогда
				ЗаписьНабора.ДатаЗаписи = ТекущаяУниверсальнаяДата();
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаписи) Или СгенерироватьИдентификаторЗаписи Тогда
				ЗаписьНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			СтрокаТаблицы.ИдентификаторыЗаписей.Добавить(ЗаписьНабора.ИдентификаторЗаписи);
			
		КонецЦикла;
		
	ИначеЕсли ТипДанных = Тип("Структура") Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Данные);
		
		Если Не ЗначениеЗаполнено(ЗаписьНабора.ДатаЗаписи) Тогда
			ЗаписьНабора.ДатаЗаписи = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаписи) Или СгенерироватьИдентификаторЗаписи Тогда
			ЗаписьНабора.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СтрокаТаблицы.ИдентификаторыЗаписей.Добавить(ЗаписьНабора.ИдентификаторЗаписи);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип данных ""%1"" отложенного задания.';
										|en = 'Unknown %1 data type of the deferred job.'"), ТипДанных);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаОчереди;
	
КонецФункции

// Запускает выполнения заданий.
// Для того, что бы обработать только указанные записи регистров сведений очереди заданий, нужно в параметр
// Очереди данного метода передать таблицу значений см. Добавить и в поле ИдентификаторыЗаписей добавить
// идентификаторы записей (значения ИдентификаторЗаписи из регистра сведений очереди заданий).
//
// Параметры:
//  Очереди - Строка, Массив из Строка, ТаблицаЗначений, Неопределено -
//             1. Строка           - имя регистра сведений очереди заданий
//             2. Массив из Строка - имена регистров сведений очередей заданий
//             3. ТаблицаЗаданий   - см. ИнициализироватьТаблицуЗаданий
//             4. Неопределено     - запускает все очереди.
//
Процедура Запустить(Знач Очереди = Неопределено) Экспорт
	
	ТипОчереди = ТипЗнч(Очереди);
	
	Если ТипОчереди = Тип("Строка") Тогда
		
		ТаблицаОчередей = ОчередиЗаданий().Скопировать(Новый Структура("Очередь", Очереди), ПоляЗапуска());
		
	ИначеЕсли ТипОчереди = Тип("Массив") Тогда
		
		Если Очереди.Количество() = 1 Тогда
			
			ТаблицаОчередей = ОчередиЗаданий().Скопировать(Новый Структура("Очередь", Очереди[0]), ПоляЗапуска());
			
		Иначе
			
			ОчередиЗаданий = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
			ОчередиЗаданий.Индексы.Добавить("Очередь");
			
			ТаблицаОчередей = ОчередиЗаданий.СкопироватьКолонки();
			
			ОтборОчередь = Новый Структура("Очередь");
			
			Для каждого Очередь Из Очереди Цикл
				
				ОтборОчередь.Очередь = Очередь;
				
				ЗаполнитьЗначенияСвойств(ТаблицаОчередей.Добавить(), ОчередиЗаданий.НайтиСтроки(ОтборОчередь)[0]);
				
			КонецЦикла;
			
			ТаблицаОчередей.Сортировать("ИндексСтроки", Новый СравнениеЗначений);
			
		КонецЕсли;
		
	ИначеЕсли ТипОчереди = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаОчередей = Очереди;
		
		Если ТаблицаОчередей.Колонки.Найти("ИндексСтроки") = Неопределено Тогда
			
			ОчередиЗаданий = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
			ОчередиЗаданий.Индексы.Добавить("Очередь");
			
			ТаблицаОчередей.Колонки.Добавить("ИндексСтроки", ОчередиЗаданий.Колонки.ИндексСтроки.ТипЗначения);
			
			Если ОчередиЗаданий.Колонки.Найти("ВыполнитьВТранзакцииВФайловойБазе") <> Неопределено Тогда
				
				ТаблицаОчередей.Колонки.Добавить(
					"ВыполнитьВТранзакцииВФайловойБазе",
					ОчередиЗаданий.Колонки.ВыполнитьВТранзакцииВФайловойБазе.ТипЗначения);
				
			КонецЕсли;
			
			ОтборОчередь = Новый Структура("Очередь");
			
			Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
				
				ОтборОчередь.Очередь = СтрокаТаблицы.Очередь;
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОчередиЗаданий.НайтиСтроки(ОтборОчередь)[0]);
				
			КонецЦикла;
			
			Если ТаблицаОчередей.Количество() > 1 Тогда
				ТаблицаОчередей.Сортировать("ИндексСтроки", Новый СравнениеЗначений);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТаблицаОчередей = ОчередиЗаданий().Скопировать(, ПоляЗапуска());
		
	КонецЕсли;
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		
		ЗапуститьВТекущейТранзакции(ТаблицаОчередей);
		
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ЗапуститьВФайловойБазе(ТаблицаОчередей);
		
	Иначе
		
		ЗапуститьСтартер(ТаблицаОчередей);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание ошибки выполнения задания
//
// Параметры:
//  Поля          - Структура - имена и представления полей участвующих в формировании описания ошибки
//  Данные        - Структура, ВыборкаИзРезультатаЗапроса, СтрокаТаблицыЗначений - данные задания
//  ТекстОшибки   - Строка - текст ошибки
//
// Возвращаемое значение:
//  Строка - текст ошибки
//
Функция ТекстОшибкиВыполнения(Поля, Данные, ТекстОшибки) Экспорт
	
	ТекстыОшибок    = Новый Массив;
	ОписаниеЗадания = Новый Массив;
	
	ТекстыОшибок.Добавить(ТекстОшибки);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Если СообщенияПользователю.Количество() > 0 Тогда
		
		ТекстыОшибок.Добавить("");
		
		Для каждого Сообщение Из СообщенияПользователю Цикл
			ТекстыОшибок.Добавить(Сообщение.Текст);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Поле Из Поля Цикл
		
		Имя           = Поле.Ключ;
		Представление = Поле.Значение;
		
		Если Не ЗначениеЗаполнено(Представление) Тогда
			Представление = Имя;
		КонецЕсли;
		
		ОписаниеЗадания.Добавить(СтрШаблон("%1: %2", Представление, Данные[Имя]));
		
	КонецЦикла;
	
	ШаблонОшибки = НСтр("ru = 'Ошибка обработки задания:
							   |
							   |%1
							   |
							   |%2';
							   |en = 'An error occurred while processing the job:
							   |
							   |%1
							   |
							   |%2'");
	
	Разделитель  = ";
					|";
	
	Возврат СтрШаблон(ШаблонОшибки, СтрСоединить(ОписаниеЗадания, Разделитель), СтрСоединить(ТекстыОшибок, Символы.ПС));
	
КонецФункции

// Инициализирует таблицу заданий, которую можно передать на вход метода см. Запустить
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица заданий:
//   * Очередь               - Строка - имя регистра сведений очереди заданий.
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей заданий (измерение
//                                                                 ИдентификаторЗаписи регистра сведений очереди
//                                                                 заданий).
//
Функция ИнициализироватьТаблицуЗаданий() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Очередь",               ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Таблица.Колонки.Добавить("ИдентификаторыЗаписей", Новый ОписаниеТипов("Массив"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает идентификаторы записей регистра сведений очереди заданий.
//
// Параметры:
//  Очередь - Строка    - имя регистра сведений очереди заданий.
//  Отбор   - Структура - структура отбора записей регистра сведений очереди заданий:
//                        ключи    - имена измерений, ресурсов, реквизитов регистра сведений очереди заданий,
//                        значение - единичное значение или массив значений.
//
// Возвращаемое значение:
//  Массив из УникальныйИдентификатор - идентификаторы записей (измерение ИдентификаторЗаписи регистра сведений очереди
//                                      заданий).
//
Функция ИдентификаторыЗаписей(Очередь, Отбор) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	ОчередьЗаданий КАК Таблица
	|ГДЕ
	|	&Отбор
	|";
	
	ТекстыОтбора = Новый Массив;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		ИмяПоля      = ЭлементОтбора.Ключ;
		ЗначениеПоля = ЭлементОтбора.Значение;
		
		ШаблонОтбора = ?(ТипЗнч(ЗначениеПоля) = Тип("Массив"), "Таблица.%1 В (&%1)", "Таблица.%1 = &%1");
		
		ТекстыОтбора.Добавить(СтрШаблон(ШаблонОтбора, ИмяПоля));
		
		Запрос.УстановитьПараметр(ИмяПоля, ЗначениеПоля);
		
	КонецЦикла;
	
	Разделитель = " И
				  |";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОчередьЗаданий", СтрШаблон("%1.%2", "РегистрСведений", Очередь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отбор",         СтрСоединить(ТекстыОтбора, Разделитель));
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивИдентификаторовЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЗаписи");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивИдентификаторовЗаписей;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает таблицу очередей заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Очереди заданий:
//   * Очередь                           - Строка - имя регистра сведений очереди заданий.
//   * ИмяМетода                         - Строка - имя метода выполнения заданий, принцип формирования аналогично
//                                                  аргументу см. ОбщегоНазначения.ВыполнитьМетодКонфигурации.ИмяМетода.
//   * Многопоточный                     - Булево - признак многопоточного выполнения заданий в очереди.
//   * КоличествоФоновыхЗаданий          - Число  - количество фоновых заданий для выполнения отложенных заданий
//                                                  очереди, по умолчанию 4
//                                                  (см. ОтложенныеЗаданияПереопределяемый.КоличествоФоновыхЗаданийПоУмолчанию).
//   * ПорцияРасчета                     - Число  - количество заданий, которые нужно передать в рабочий поток,
//                                                  по умолчанию 100
//                                                  (см. ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию).
//   * АналитикаРасчета                  - Строка - список полей регистра сведений очереди заданий, разделенные
//                                                  запятыми, в разрезе которых определяется задание, если не заполнено,
//                                                  тогда одна запись регистра считается одним заданием.
//   * ИнтервалОбработки                 - Число  - интервал обработки (в секундах) между времени начало текущей выборки
//                                                  и окончания выполнения последней порции расчета:
//                                                    1. если ИнтервалОбработки больше 0, тогда выборка и выполнения
//                                                       заданий происходит при наступлении одного из нижеперечисленных
//                                                       условий:
//                                                         1. количество заданий в выборке не меньше чем ПорцияРасчета,
//                                                         2. интервал между текущей датой и датой конца выполнения
//                                                            последней порции заданий не меньше чем ИнтервалОбработки,
//                                                    2. если ИнтервалОбработки является 0, тогда  ИнтервалОбработки
//                                                       не влияет на выборку и выполнения заданий.
//   * Приоритет                         - Число  - имеет только информативный смысл, отображается в интерфейсе,
//                                                  возможные значения:
//                                                    1. -1 - высокий (блокирует оперативную работу - распределение
//                                                            запасов, нельзя распечатать документы ...),
//                                                    2.  0 - средний,
//                                                    3.  1 - низкий.
//   * ВыполнитьЗаданияВТранзакции       - Булево - задания одной порции выполняются в транзакции, по умолчанию ЛОЖЬ.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево - если ЛОЖЬ, тогда в файловой базе задания выполняются в управляющем
//                                                  потоке,
//                                                  если ИСТИНА, тогда в файловой базе выполняется в той же транзакции.
//                                                  По умолчанию ИСТИНА.
//   * ВыборкаЗаданийПоУмолчанию         - Булево - если ИСТИНА, тогда для выборки заданий используется текст запроса
//                                                  сформированный в функции см. ТекстЗапросаВыборкиЗаданийПоУмолчанию,
//                                                  если ЛОЖЬ, тогда текст запроса выборки заданий формируется 
//                                                  в функции ТекстЗапросаВыборкиЗаданий модуля менеджера регистра
//                                                  сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ТекстЗапросаВыборкиЗаданий).
//                                                  По умолчанию ИСТИНА.
//   * ДополнительнаяОбработкаОшибок     - Булево - если ИСТИНА, тогда в методе выполнения заданий
//                                                  (см. ВыполнитьЗадания) перед обработкой ошибок
//                                                  (см. ОбработатьОшибки) запускается процедура ПередОбработкойОшибок
//                                                  модуля менеджера регистра сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ПередОбработкойОшибок).
//                                                  По умолчанию ЛОЖЬ.
//   * ИндексСтроки                      - Число  - служебное поле хранит индекс текущей строки.
//
Функция ОчередиЗаданий() Экспорт
	
	ТипЧисло1 = ОбщегоНазначения.ОписаниеТипаЧисло(1);
	ТипЧисло3 = ОбщегоНазначения.ОписаниеТипаЧисло(3,, ДопустимыйЗнак.Неотрицательный);
	ТипЧисло6 = ОбщегоНазначения.ОписаниеТипаЧисло(6,, ДопустимыйЗнак.Неотрицательный);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаОчередей = Новый ТаблицаЗначений;
	ТаблицаОчередей.Колонки.Добавить("Очередь",                           ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаОчередей.Колонки.Добавить("ИмяМетода",                         ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	ТаблицаОчередей.Колонки.Добавить("Многопоточный",                     ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("КоличествоФоновыхЗаданий",          ТипЧисло3);
	ТаблицаОчередей.Колонки.Добавить("ПорцияРасчета",                     ТипЧисло6);
	ТаблицаОчередей.Колонки.Добавить("АналитикаРасчета" ,                 ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаОчередей.Колонки.Добавить("ИнтервалОбработки",                 ТипЧисло6);
	ТаблицаОчередей.Колонки.Добавить("Приоритет",                         ТипЧисло1);
	ТаблицаОчередей.Колонки.Добавить("ВыполнитьЗаданияВТранзакции",       ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ВыполнитьВТранзакцииВФайловойБазе", ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ВыборкаЗаданийПоУмолчанию",         ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ДополнительнаяОбработкаОшибок",     ТипБулево);
	ТаблицаОчередей.Колонки.Добавить("ИндексСтроки",                      ТипЧисло6);
	ТаблицаОчередей.Индексы.Добавить("Очередь");
	
	МетаРегистр = Метаданные.РегистрыСведений;
	
	//++ НЕ УТКА
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь          = МетаРегистр.ЗаданияКРасчетуОчередиПроизводственныхОпераций.Имя;
	Параметры.ИмяМетода        = "РегистрыСведений.ОчередьПроизводственныхОпераций.РассчитатьОчередьОтложенно";
	Параметры.АналитикаРасчета = "ОбъектРасчета";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	//-- НЕ УТКА
	
	//++ НЕ УТ
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь          = МетаРегистр.ЗаданияКРасчетуДлительностиПроизводства.Имя;
	Параметры.ИмяМетода        = "РегистрыСведений.НормативнаяДлительностьПроизводства.ВыполнитьРасчет";
	Параметры.АналитикаРасчета = "ОбъектРасчета";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	//-- НЕ УТ
	
	//++ НЕ УТКА
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                           = МетаРегистр.ЗаданияКОбработкеЭтаповПроизводства.Имя;
	Параметры.ИмяМетода                         = "Документы.ЭтапПроизводства2_2.ОбработатьДокументОтложенно";
	Параметры.АналитикаРасчета                  = "ЭтапПроизводства";
	Параметры.ВыполнитьВТранзакцииВФайловойБазе = Ложь;
	Параметры.ВыборкаЗаданийПоУмолчанию         = Ложь;
	Параметры.ДополнительнаяОбработкаОшибок     = Истина;
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	//-- НЕ УТКА
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                  = МетаРегистр.ЗаданияКРаспределениюЗапасов.Имя;
	Параметры.ИмяМетода                = "РаспределениеЗапасов.ВыполнитьРаспределениеВФоне";
	Параметры.КоличествоФоновыхЗаданий = 1;
	Параметры.ПорцияРасчета            = 200;
	Параметры.АналитикаРасчета         = "Номенклатура, Характеристика, Склад";
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	//++ НЕ УТКА
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                     = МетаРегистр.ЗаданияКРасчетуДлительностиДоВыпускаПоЭтапамПроизводства.Имя;
	Параметры.ИмяМетода                   = "Документы.ЭтапПроизводства2_2.РассчитатьСдвигиЭтаповВнутриПартии";
	Параметры.АналитикаРасчета            = "ПартияПроизводства";
	Параметры.ВыполнитьЗаданияВТранзакции = Ложь;
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                     = МетаРегистр.ЗаданияКРасчетуНормативногоГрафикаПроизводства.Имя;
	Параметры.ИмяМетода                   = "РегистрыСведений.НормативныйГрафикЭтаповПроизводства.ОбработатьЗаданияКРасчетуНормативногоГрафикаПроизводства";
	Параметры.АналитикаРасчета            = "ОбъектРасчета";
	Параметры.ВыполнитьЗаданияВТранзакции = Ложь;
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                     = МетаРегистр.ЗаданияКРасчетуСостоянияОбеспеченияЭтаповПроизводства.Имя;
	Параметры.ИмяМетода                   = "РегистрыСведений.ЗаданияКРасчетуСостоянияОбеспеченияЭтаповПроизводства.ОбработатьЗадание";
	Параметры.АналитикаРасчета            = "ОбъектРасчета";
	Параметры.ВыполнитьЗаданияВТранзакции = Ложь;
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	
	Параметры = ПараметрыОчередиЗаданий();
	Параметры.Очередь                     = МетаРегистр.ЗаданияКРасчетуСтруктурыЗаказаПриИзмененииПриоритета.Имя;
	Параметры.ИмяМетода                   = "СтруктураЗаказаСлужебный.ЗарегистрироватьЗаданияКРаспределениюЗапасовПриИзмененииПриоритетаЗаказаНаПроизводство";
	Параметры.АналитикаРасчета            = "ЗаказНаПроизводство";
	Параметры.ВыполнитьЗаданияВТранзакции = Ложь;
	ДобавитьОчередь(ТаблицаОчередей, Параметры);
	//-- НЕ УТКА
	
	Возврат ТаблицаОчередей;
	
КонецФункции

// Запускает управляющий поток
//
// Параметры:
//  Очереди - ТаблицаЗначений - таблица очередей с колонками:
//   * Очередь               - Строка - имя регистра сведений очереди заданий,
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей регистра сведений  очереди
//                                                                 заданий (измерение ИдентификаторЗаписи).
//                                                                 Если параметр ТолькоУказанныеЗадания является ИСТИНА,
//                                                                 тогда данная колонка обязательна.
//  ТолькоУказанныеЗадания   - Булево - если ИСТИНА, тогда в управляющий поток Очереди задания с переданными
//                                      идентификаторами записей (см. параметр ТаблицаОчередей
//                                      колонка ИдентификаторыЗаписей).
//                                      По умолчанию ЛОЖЬ.
//
Процедура Стартер(Очереди, ТолькоУказанныеЗадания = Ложь) Экспорт
	
	Для каждого СтрокаТаблицы Из Очереди Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтрШаблон("%1 ""%2""",
																		НСтр("ru = 'Управляющий поток';
																			|en = 'Thread of control'"),
																		Очередь);
		ПараметрыВыполнения.КлючФоновогоЗадания         = КлючУправляющегоПотока(Очередь);
		ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение           = 0;
		
		Попытка
			
			ДлительныеОперации.ВыполнитьПроцедуру(
				ПараметрыВыполнения,
				"ОтложенныеЗадания.УправляющийПоток",
				Очередь,
				?(ТолькоУказанныеЗадания, СтрокаТаблицы.ИдентификаторыЗаписей, Неопределено));
			
		Исключение
			// Фоновое задание "Управляющий поток "<Представление очереди>"" с ключом "УправляющийПоток_<Очередь>"
			// уже запущен.
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СтартерУправляющегоПотока(Очередь = "") Экспорт
	
	ОтборУП = Новый Структура;
	ОтборУП.Вставить("Ключ",      ПараметрыСтартераУправляющегоПотока().Ключ);
	ОтборУП.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Пауза(20,, ОтборУП);
	
	Отбор = Неопределено;
	
	Если ЗначениеЗаполнено(Очередь) Тогда
		Отбор = Новый Структура;
		Отбор .Вставить("Очередь", Очередь);
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Если Отбор = Неопределено Тогда
			Отбор = Новый Структура;
		КонецЕсли;
		
		Отбор.Вставить("ВыполнитьВТранзакцииВФайловойБазе", Ложь);
		
	КонецЕсли;
	
	ТаблицаОчередей = ?(ЗначениеЗаполнено(Отбор), ОчередиЗаданий().Скопировать(Отбор), ОчередиЗаданий());
	
	Если ТаблицаОчередей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Стартер(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выборку заданий и запускает выполнения выбранных заданий.
//
// Параметры:
//  Очередь               - Строка - имя регистра сведений очереди заданий,
//  ИдентификаторыЗаписей - Массив из УникальныйИдентификатор, Неопределено - идентификаторы записей регистра сведений
//                                                                            очереди заданий (измерение
//                                                                            ИдентификаторЗаписи). Если не заполнено,
//                                                                            тогда выборка происходит без отбора по
//                                                                            идентификаторам записей.
//
Процедура УправляющийПоток(Очередь, ИдентификаторыЗаписей = Неопределено) Экспорт
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	РежимОтладки               = ОбщегоНазначения.РежимОтладки();
	
	ПараметрыОчереди = ОчередиЗаданий().НайтиСтроки(Новый Структура("Очередь", Очередь))[0];
	
	КоличествоРабочихПотоков		  = ?(ПараметрыОчереди.Многопоточный, ПараметрыОчереди.КоличествоФоновыхЗаданий, 1);
	ПорцияРасчета					  = ПараметрыОчереди.ПорцияРасчета;
	ВыполнитьЗаданияВТранзакции 	  = ПараметрыОчереди.ВыполнитьЗаданияВТранзакции;
	ВыполнитьВТранзакцииВФайловойБазе = ПараметрыОчереди.ВыполнитьВТранзакцииВФайловойБазе;
	ИнтервалОбработки				  = ?(Не ИнформационнаяБазаФайловая И ИдентификаторыЗаписей = Неопределено,
											ПараметрыОчереди.ИнтервалОбработки,
											0);
	
	РабочиеПотоки       = Неопределено;
	Таймауты            = Неопределено;
	КоличествоТаймаутов = 0;
	
	Если РежимОтладки Тогда
		
		ИнтервалОбработки = 0;
		
		ИмяМетода = ИмяМетодаРабочегоПотока(Очередь);
		
	ИначеЕсли ИнформационнаяБазаФайловая Тогда
		
		ИмяМетода = ИмяМетодаРабочегоПотока(Очередь);
		
		Если Не ВыполнитьВТранзакцииВФайловойБазе Тогда
			
			Таймауты = Таймауты();
			
			КоличествоТаймаутов = Таймауты.Количество();
			
		КонецЕсли;
		
	Иначе
		
		Очереди = Новый Массив;
		Очереди.Добавить(Очередь);
		
		ТаблицаНастроек  = НастройкиОчередей(Очереди);
		
		НастройкиОчереди = ?(ТаблицаНастроек.Количество() = 0,
								Новый Структура("Очередь, Приостановлена, ДатаПоследнейОбработки", Очередь, Ложь),
								ТаблицаНастроек[0]);
		
		Если НастройкиОчереди.Приостановлена Тогда
			Возврат;
		КонецЕсли;
		
		РабочиеПотоки = РабочиеПотоки();
		
		Если ИдентификаторыЗаписей = Неопределено Тогда
			
			Таймауты = Таймауты();
			
			КоличествоТаймаутов = Таймауты.Количество();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнтервалОбработки) Тогда
		ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	КоличествоЗаданий = КоличествоРабочихПотоков * ПорцияРасчета;
	
	Если ИдентификаторыЗаписей <> Неопределено Тогда
		
		КоличествоИдентификаторовЗаписей = ИдентификаторыЗаписей.Количество();
		КоличествоЗаданий                = Мин(КоличествоЗаданий, КоличествоИдентификаторовЗаписей);
		
		Запрос.УстановитьПараметр("ИдентификаторыЗаписей", ИдентификаторыЗаписей);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий);
	
	ТаблицаЗаданий = ТаблицаЗаданий(Запрос);
	
	КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
	
	Если КоличествоСтрокКОбработке = 0 Тогда
		
		ТаймаутыНачальные = ТаймаутыНачальные();
		
		Для каждого ТекущийТаймаут Из ТаймаутыНачальные Цикл
			
			Пауза(ТекущийТаймаут, Очередь);
			
			ТаблицаЗаданий = ТаблицаЗаданий(Запрос);
			
			КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
			
			Если КоличествоСтрокКОбработке > 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоличествоСтрокКОбработке > 0 Тогда
		
		ТаблицаПорции = ТаблицаЗаданий.СкопироватьКолонки();
		ТаблицаПорции.Колонки.Удалить("Обработано");
		
		ОтборОбработано    = Новый Структура("Обработано", Ложь);
		ОтборИдентификатор = Новый Структура("Обработано, ИдентификаторЗадания", Ложь);
		
		ТекущаяПорцияРасчета	  = ПорцияРасчета;
		
		КоличествоИтерации		  = ?(ИнформационнаяБазаФайловая Или РежимОтладки,
										1,
										КоличествоРабочихПотоков - КоличествоАктивныхРабочихПотоков(Очередь));
		
		НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
		КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
		
	КонецЕсли;
	
	Пока КоличествоСтрокКОбработке > 0 И КоличествоИтерации > 0 Цикл
		
		ОтборИдентификатор.ИдентификаторЗадания = НайденныеСтрокиКОбработке[0].ИдентификаторЗадания;
		
		НайденныеСтрокиЗадания = ТаблицаЗаданий.НайтиСтроки(ОтборИдентификатор);
		Для каждого СтрокаТаблицы Из НайденныеСтрокиЗадания Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПорции.Добавить(), СтрокаТаблицы);
			СтрокаТаблицы.Обработано = Истина;
		КонецЦикла;
		
		ТекущаяПорцияРасчета      = ТекущаяПорцияРасчета - 1;
		
		НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
		КоличествоСтрокКОбработке = НайденныеСтрокиКОбработке.Количество();
		
		Если ТекущаяПорцияРасчета = 0 Или КоличествоСтрокКОбработке = 0 Тогда
			
			Если РежимОтладки Тогда
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(
					ИмяМетода,
					ПараметрыРабочегоПотока(Очередь, ПараметрыДанных(ТаблицаПорции), Ложь, Ложь, Истина));
				
			ИначеЕсли ИнформационнаяБазаФайловая Тогда
				
				Если ВыполнитьВТранзакцииВФайловойБазе Тогда
					
					ОбщегоНазначения.ВыполнитьМетодКонфигурации(
						ИмяМетода,
						ПараметрыРабочегоПотока(Очередь, ПараметрыДанных(ТаблицаПорции), Ложь, Ложь, Истина));
					
				Иначе
					
					// В файловой базе отложенные задания выполняются в фоновом задании управляющего потока,
					// отдельные рабочие потоки не создаются.
					
					ВыполнитьЗаданияВФонеУправлящегоПотока(
						ИмяМетода,
						Очередь,
						ТаблицаПорции.Скопировать(),
						ВыполнитьЗаданияВТранзакции);
					
				КонецЕсли;
				
			Иначе
				
				ДобавитьРабочийПоток(
					РабочиеПотоки,
					Очередь,
					ТаблицаПорции.Скопировать(),
					ВыполнитьЗаданияВТранзакции);
				
				КоличествоИтерации = КоличествоИтерации - 1;
				
			КонецЕсли;
			
			ТекущаяПорцияРасчета = ПорцияРасчета;
			
			ТаблицаПорции.Очистить();
			
		КонецЕсли;
		
		Если КоличествоИтерации = 0 Тогда
			
			КоличествоАктивныхРабочихПотоков = КонтролироватьРабочиеПотоки(
								 					РабочиеПотоки,
								 					Очередь,
								 					ВыполнитьЗаданияВТранзакции);
			
			КоличествоИтерации = КоличествоРабочихПотоков - КоличествоАктивныхРабочихПотоков;
			
		КонецЕсли;
		
		Если КоличествоСтрокКОбработке = 0
		   И (ИдентификаторыЗаписей = Неопределено Или КоличествоИдентификаторовЗаписей > КоличествоЗаданий) Тогда
			
			Если ЗначениеЗаполнено(ИнтервалОбработки) Тогда
				ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки);
			КонецЕсли;
			
			ИдентификаторыПереданныеВРабочиеПотоки = Неопределено;
			
			Если РабочиеПотоки <> Неопределено И РабочиеПотоки.Количество() > 0 Тогда
				
				ИдентификаторыПереданныеВРабочиеПотоки = Новый Массив;
				
				Для каждого СтрокаРП Из РабочиеПотоки Цикл
					
					Если СтрокаРП.ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого СтрокаТД Из СтрокаРП.Данные Цикл
						ИдентификаторыПереданныеВРабочиеПотоки.Добавить(СтрокаТД.ИдентификаторЗаписи);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТаблицаЗаданий = ТаблицаЗаданий(Запрос, ИдентификаторыПереданныеВРабочиеПотоки);
			
			КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
			
			ИндексТаймаута = 0;
			
			Пока КоличествоСтрокКОбработке = 0 И ИндексТаймаута < КоличествоТаймаутов Цикл
				
				Пауза(Таймауты[ИндексТаймаута], Очередь);
				
				ТаблицаЗаданий = ТаблицаЗаданий(Запрос, ИдентификаторыПереданныеВРабочиеПотоки);
				
				КоличествоСтрокКОбработке = ТаблицаЗаданий.Количество();
				
				ИндексТаймаута = ИндексТаймаута + 1;
				
			КонецЦикла;
			
			Если КоличествоСтрокКОбработке > 0 Тогда
				НайденныеСтрокиКОбработке = ТаблицаЗаданий.НайтиСтроки(ОтборОбработано);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РежимОтладки Тогда
		
		Если Не ИнформационнаяБазаФайловая Тогда
			
			КонтролироватьРабочиеПотоки(
				РабочиеПотоки,
				Очередь,
				ВыполнитьЗаданияВТранзакции,
				Истина);
			
			Если ИдентификаторыЗаписей = Неопределено Тогда
				
				ЗапуститьСтартерУправляющегоПотока();
				
			КонецЕсли;
			
		ИначеЕсли Не ВыполнитьВТранзакцииВФайловойБазе И ИдентификаторыЗаписей = Неопределено Тогда
			
			ЗапуститьСтартерУправляющегоПотока();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет задания
//
// Параметры:
//  Очередь                     - Строка - имя регистра сведений очереди заданий.
//  ПараметрыДанных             - см. ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - Булево - признак выполнения заданий в транзакции.
//  ЗафиксироватьОшибку         - Булево - если ИСТИНА, тогда при возникновении ошибки, задание удаляется из регистра
//                                         сведений очереди заданий и добавляется в регистр 
//                                         "ОшибкиВыполненияОтложенныхЗаданий".
//  ОбработатьВТекущемСеансе    - Булево - если ИСТИНА, тогда задания выполняются в данной транзакции.
//                                         При возникновении ошибки, во время выполнении заданий, в случае, если
//                                         параметр ТекстОшибки является НЕОПРЕДЕЛЕНО, вызывается исключение.
//  ТекстОшибки                 - Строка, Неопределено - если тип Строка, тогда в данный параметр возвращается текст
//                                                       возникшей ошибки.
//                                                       По умолчанию НЕОПРЕДЕЛЕНО.
//  ДополнительныеСвойства       - Структура, Неопределено - необходимые данные, которые нужно передать в метод
//                                                           выполнения заданий.
//                                                           По умолчанию НЕОПРЕДЕЛЕНО.
//
Процедура ВыполнитьЗадания(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку,
			ОбработатьВТекущемСеансе,
			ТекстОшибки = Неопределено,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОчереди = ОчередиЗаданий().НайтиСтроки(Новый Структура("Очередь", Очередь))[0];
	
	ИмяМетода = ПараметрыОчереди.ИмяМетода;
	
	Данные = ПараметрыДанных.Данные;
	
	Параметры = Новый Массив;
	Параметры.Добавить(Данные);
	Параметры.Добавить(Новый Соответствие); // см. ОбработатьОшибки.ИдентификаторыНеОбработанныхЗаписей
	Параметры.Добавить(ДополнительныеСвойства);
	
	Если ОбработатьВТекущемСеансе Тогда
		
		ТекстИсключения = "";
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
			
			СтандартнаяОбработка = Истина;
			
			ИдентификаторыНеОбработанныхЗаписей = Параметры[1];
			Если ИдентификаторыНеОбработанныхЗаписей.Количество() > 0 Тогда
				ТекстИсключения = ПредставлениеОшибки(ИдентификаторыНеОбработанныхЗаписей);
			КонецЕсли;
			
			УдалитьЗадания(Очередь, Данные,,, ?(ЗначениеЗаполнено(ТекстИсключения), Неопределено, ТекстИсключения));
			
		Исключение
			
			Если СтандартнаяОбработка Тогда
				
				ТекстТекущейОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстТекущейОшибки);
				
			Иначе
				
				//Вызвано иcключение в методе выполнения
				ТекстТекущейОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстИсключения) Тогда
				ТекстИсключения = ТекстТекущейОшибки;
			КонецЕсли;
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Если ТекстОшибки = Неопределено Тогда
				
				ОбщегоНазначения.СообщитьПользователю(ТекстИсключения);
				
				Если ТранзакцияАктивна() Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе
				ТекстОшибки = ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстИсключения = "";
		
		Если ВыполнитьЗаданияВТранзакции Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		Иначе
			
			Попытка
				
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
				
			Исключение
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ИдентификаторыНеОбработанныхЗаписей = Параметры[1];
		
		Если Не ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Попытка
				
				Если ЗафиксироватьОшибку И ЗначениеЗаполнено(ИдентификаторыНеОбработанныхЗаписей) Тогда
					
					Если ПараметрыОчереди.ДополнительнаяОбработкаОшибок Тогда
						
						РегистрыСведений[Очередь].ПередОбработкойОшибок(
							ПараметрыОчереди,
							Данные,
							ИдентификаторыНеОбработанныхЗаписей,
							ТекстИсключения,
							Параметры[2]); // ДополнительныеСвойства
						
					КонецЕсли;
					
					ОбработатьОшибки(
						Очередь,
						Данные,
						ИдентификаторыНеОбработанныхЗаписей,
						ВыполнитьЗаданияВТранзакции,
						ТекстИсключения);
					
				Иначе
					
					УдалитьЗадания(
						Очередь,
						Данные,
						ИдентификаторыНеОбработанныхЗаписей,
						ВыполнитьЗаданияВТранзакции,
						ТекстИсключения);
					
					Если Данные.Количество() > 0 Тогда
						ПоместитьВоВременноеХранилище(Данные, ПараметрыДанных.АдресНеОбработанныхДанных);
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстИсключения)
		   И Не ЗафиксироватьОшибку
		   И ЗначениеЗаполнено(ИдентификаторыНеОбработанныхЗаписей) Тогда
			
			ТекстИсключения = ПредставлениеОшибки(ИдентификаторыНеОбработанныхЗаписей);
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстИсключения) Тогда
			
			Если ТекстОшибки = Неопределено Тогда
				
				// Перевод состояние рабочего потока в СостояниеФоновогоЗадания.ЗавершеноАварийно
				ВызватьИсключение ТекстИсключения;
				
			Иначе
				ТекстОшибки = ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса выборки заданий по умолчанию.
//
// Параметры:
//  Запрос              - Запрос - запрос выборки заданий
//  ПараметрыОчереди    - СтрокаТаблицыЗначений из см. ОчередиЗаданий
//  КоличествоЗаданий   - Число  - количество заданий в выборке
//  ДополнительныйОтбор - Строка - дополнительный отбор заданий в тексте выборки.
//                                 По умолчанию не заполнено.
//
// Возвращаемое значение:
//  Строка - текст запроса выборки заданий
//
Функция ТекстЗапросаВыборкиЗаданийПоУмолчанию(
			Запрос,
			ПараметрыОчереди,
			КоличествоЗаданий,
			ДополнительныйОтбор = "") Экспорт
	
	АналитикаРасчета = ПараметрыОчереди.АналитикаРасчета;
	
	Если ЗначениеЗаполнено(АналитикаРасчета) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	АналитикаРасчета,
		|	МИНИМУМ(ИдентификаторЗаписи) КАК ИдентификаторЗадания,
		|	МИНИМУМ(ДатаЗаписи)          КАК ДатаЗадания
		|ПОМЕСТИТЬ Задания
		|ИЗ
		|	ОчередьЗаданий КАК Таблица
		|ГДЕ
		|	&ОтборПоИдентификаторам
		|	И НЕ ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ОчередьЗаданий КАК Задания
		|			ГДЕ
		|				&УсловиеСоединение
		|				И Задания.ИдентификаторЗаписи В (&ИдентификаторыПереданныеВРабочиеПотоки))
		|	И &ДополнительныйОтбор
		|
		|СГРУППИРОВАТЬ ПО
		|	АналитикаРасчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗадания,
		|	АналитикаРасчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Задания.ИдентификаторЗадания КАК ИдентификаторЗадания,
		|	Задания.ДатаЗадания          КАК ДатаЗадания,
		|	Таблица.*
		|ИЗ
		|	Задания КАК Задания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьЗаданий КАК Таблица
		|		ПО &УсловиеСоединение
		|";
		
		Поля 	= Новый Структура(АналитикаРасчета);
		
		Условия = Новый Массив;
		Для каждого Поле Из Поля Цикл
			Условия.Добавить(СтрШаблон("Задания.%1 = Таблица.%1", Поле.Ключ));
		КонецЦикла;
		
		Разделитель = "
					  |		   И ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АналитикаРасчета",   АналитикаРасчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединение", СтрСоединить(Условия, Разделитель));
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	Таблица.ИдентификаторЗаписи КАК ИдентификаторЗадания,
		|	Таблица.ДатаЗаписи          КАК ДатаЗадания,
		|	*
		|ИЗ
		|	ОчередьЗаданий КАК Таблица
		|ГДЕ
		|	&ОтборПоИдентификаторам
		|	И НЕ Таблица.ИдентификаторЗаписи В (&ИдентификаторыПереданныеВРабочиеПотоки)
		|	И &ДополнительныйОтбор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаЗаписи
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "999", Формат(КоличествоЗаданий, "ЧН=0; ЧГ=;"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"ОчередьЗаданий",
								СтрШаблон("%1.%2", "РегистрСведений", ПараметрыОчереди.Очередь));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ОтборПоИдентификаторам",
								?(Запрос.Параметры.Свойство("ИдентификаторыЗаписей"),
									"Таблица.ИдентификаторЗаписи В (&ИдентификаторыЗаписей)",
									"ИСТИНА"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ДополнительныйОтбор",
								?(ЗначениеЗаполнено(ДополнительныйОтбор), ДополнительныйОтбор, "ИСТИНА"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает имя события "Обработка очереди заданий".
// 
// Возвращаемое значение:
//  Строка - Имя события
//
Функция ИмяСобытия() Экспорт
	
	Возврат НСтр("ru = 'Обработка очереди заданий';
				|en = 'Job queue processing'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#Область МетодыОболочкиОчередей

//++ НЕ УТКА

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуОчередиПроизводственныхОпераций(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

//-- НЕ УТКА

//++ НЕ УТ

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуДлительностиПроизводства(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

//-- НЕ УТ

//++ НЕ УТКА

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКОбработкеЭтаповПроизводства(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства =
		РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ДополнительныеСвойства(ЗафиксироватьОшибку);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки,
		ДополнительныеСвойства);
	
КонецПроцедуры

//-- НЕ УТКА

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРаспределениюЗапасов(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

//++ НЕ УТКА

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуДлительностиДоВыпускаПоЭтапамПроизводства(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуНормативногоГрафикаПроизводства(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуСостоянияОбеспеченияЭтаповПроизводства(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

// Дает возможность использовать механизм требования назначения функциональности, вызывает процедуру ВыполнитьЗадания.
//
// Параметры:
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  ПараметрыДанных             - см. ВыполнитьЗадания.ПараметрыДанных
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ЗафиксироватьОшибку         - см. ВыполнитьЗадания.ЗафиксироватьОшибку
//  ОбработатьВТекущемСеансе    - см. ВыполнитьЗадания.ОбработатьВТекущемСеансе
//  ТекстОшибки                 - см. ВыполнитьЗадания.ТекстОшибки
//
Процедура ЗаданияКРасчетуСтруктурыЗаказаПриИзмененииПриоритета(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку = Ложь,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено) Экспорт
	
	ВыполнитьЗадания(
		Очередь,
		ПараметрыДанных,
		ВыполнитьЗаданияВТранзакции,
		ЗафиксироватьОшибку,
		ОбработатьВТекущемСеансе,
		ТекстОшибки);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область РегламентноеЗадание

Процедура ВыполнениеОтложенныхЗаданийРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ВыполнениеОтложенныхЗаданий);
	
	Отбор = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),
				Новый Структура("ВыполнитьВТранзакцииВФайловойБазе", Ложь),
				Неопределено);
	
	ТаблицаОчередей = ОчередиЗаданий().Скопировать(Отбор, "Очередь, ИндексСтроки");
	
	Если ТаблицаОчередей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей);
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Стартер(РезультатЗапроса.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапускОчередей

// Запускает стартер.
//
// Параметры:
//  ТаблицаОчередей        - ТаблицаЗначений - с колонками:
//   * Очередь               - Строка                            - имя регистра сведений очереди заданий,
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей регистра сведений очереди
//                                                                 заданий (измерение ИдентификаторЗаписи).
//  ТолькоУказанныеЗадания - Булево          - если ИСТИНА, тогда в управляющий поток передаются  задания с переданными
//                                             идентификаторами записей (см. параметр ТаблицаОчередей колонка
//                                             ИдентификаторыЗаписей).
//                                             По умолчанию ЛОЖЬ.
//
Процедура ЗапуститьСтартер(Знач ТаблицаОчередей, ТолькоУказанныеЗадания = Ложь)
	
	ТаблицаОчередей.Колонки.Добавить("Обработать", Новый ОписаниеТипов("Булево"));
	ТаблицаОчередей.Индексы.Добавить("Очередь");
	ТаблицаОчередей.Индексы.Добавить("Обработать");
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	ОтборОчередь = Новый Структура("Очередь");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		ОтборОчередь.Очередь = Очередь;
		
		НайденныеНастройки = ТаблицаНастроек.НайтиСтроки(ОтборОчередь);
		Если НайденныеНастройки.Количество() > 0 И НайденныеНастройки[0].Приостановлена Тогда
			
			СтрокаТаблицы.Обработать = Ложь;
			
		ИначеЕсли ТолькоУказанныеЗадания Тогда
			
			СтрокаТаблицы.Обработать = Истина;
			
		Иначе
			
			Отбор.Ключ = КлючУправляющегоПотока(Очередь);
			
			СтрокаТаблицы.Обработать = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаОчередей = ТаблицаОчередей.Скопировать(Новый Структура("Обработать", Истина));
	Если ТаблицаОчередей.Количество() > 0 Тогда
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = "Стартер";
		ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
		ПараметрыВыполнения.ОжидатьЗавершение           = 0;
		
		ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполнения,
			"ОтложенныеЗадания.Стартер",
			ТаблицаОчередей,
			ТолькоУказанныеЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает выполнения отложенных заданий в текущей транзакции.
//
// Параметры:
//  ТаблицаОчередей        - ТаблицаЗначений - с колонками:
//   * Очередь               - Строка                            - имя регистра сведений очереди заданий,
//   * ИдентификаторыЗаписей - Массив из УникальныйИдентификатор - идентификаторы записей регистра сведений очереди
//                                                                 заданий (измерение ИдентификаторЗаписи).
//  ТолькоУказанныеЗадания - Булево          - если ИСТИНА, тогда передаются на выполнения только указанные задания
//                                             с переданными идентификаторами записей (см. параметр ТаблицаОчередей
//                                             колонка ИдентификаторыЗаписей).
//                                             По умолчанию ЛОЖЬ.
//
Процедура ЗапуститьВТекущейТранзакции(Знач ТаблицаОчередей, ТолькоУказанныеЗадания = Ложь)
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	ОтборОчередь = Новый Структура("Очередь");
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		ОтборОчередь.Очередь = Очередь;
		
		НайденныеНастройки = ТаблицаНастроек.НайтиСтроки(ОтборОчередь);
		Если НайденныеНастройки.Количество() > 0 И НайденныеНастройки[0].Приостановлена Тогда
			Продолжить;
		КонецЕсли;
		
		УправляющийПоток(Очередь, ?(ТолькоУказанныеЗадания, СтрокаТаблицы.ИдентификаторыЗаписей, Неопределено));
		
	КонецЦикла;
	
КонецПроцедуры

// Запускает выполнения отложенных заданий в файловой базе.
//
// Параметры:
//  ТаблицаОчередей        - ТаблицаЗначений - с колонками:
//   * Очередь                           - Строка                            - имя регистра сведений очереди заданий,
//   * ИндексСтроки                      - Число                             - определяет очередность выполнения
//                                                                             очередей.
//   * ИдентификаторыЗаписей             - Массив из УникальныйИдентификатор - идентификаторы записей заданий (измерение
//                                                                             ИдентификаторЗаписи регистра сведений
//                                                                             очереди заданий).
//                                                                             Если данная колонка отсутствует, тогда
//                                                                             передаются на выполнения все задания
//                                                                             очереди.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево                            - если ЛОЖЬ, тогда в файловой базе задания
//                                                                             выполняются в управляющем потоке,
//                                                                             если ИСТИНА, тогда в файловой базе
//                                                                             выполняется в той же транзакции.
//                                                                             По умолчанию ИСТИНА.
//
Процедура ЗапуститьВФайловойБазе(ТаблицаОчередей)
	
	ТаблицаОчередей.Индексы.Добавить("ВыполнитьВТранзакцииВФайловойБазе");
	
	КоличествоВыполнитьВТранзакцииВФайловойБазе =
		ТаблицаОчередей.НайтиСтроки(Новый Структура("ВыполнитьВТранзакцииВФайловойБазе", Истина)).Количество();
	
	Если КоличествоВыполнитьВТранзакцииВФайловойБазе = ТаблицаОчередей.Количество() Тогда
		
		ТолькоУказанныеЗадания = ТаблицаОчередей.Колонки.Найти("ИдентификаторыЗаписей") <> Неопределено;
		
		ЗапуститьВТекущейТранзакции(ТаблицаОчередей, ТолькоУказанныеЗадания);
		
	ИначеЕсли КоличествоВыполнитьВТранзакцииВФайловойБазе = 0 Тогда
		
		ЗапуститьСтартер(ТаблицаОчередей);
		
	Иначе
		
		ТолькоУказанныеЗадания = ТаблицаОчередей.Колонки.Найти("ИдентификаторыЗаписей") <> Неопределено;
		
		Таблица = ТаблицаОчередей.СкопироватьКолонки();
		
		ВыполнитьВТранзакцииВФайловойБазе = ТаблицаОчередей[0].ВыполнитьВТранзакцииВФайловойБазе;
		
		Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
			
			Если ВыполнитьВТранзакцииВФайловойБазе <> СтрокаТаблицы.ВыполнитьВТранзакцииВФайловойБазе Тогда
				
				Если ВыполнитьВТранзакцииВФайловойБазе Тогда
					
					ЗапуститьВТекущейТранзакции(Таблица, ТолькоУказанныеЗадания);
					
				Иначе
					
					ЗапуститьСтартер(Таблица);
					
				КонецЕсли;
				
				Таблица.Очистить();
				
				ВыполнитьВТранзакцииВФайловойБазе = СтрокаТаблицы.ВыполнитьВТранзакцииВФайловойБазе;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		Если ВыполнитьВТранзакцииВФайловойБазе Тогда
			
			ЗапуститьВТекущейТранзакции(Таблица, ТолькоУказанныеЗадания);
			
		Иначе
			
			ЗапуститьСтартер(Таблица);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПоляЗапуска()
	
	Возврат ?(ОбщегоНазначения.ИнформационнаяБазаФайловая() Или ОбщегоНазначения.РежимОтладки(),
				"Очередь, ИндексСтроки, ВыполнитьВТранзакцииВФайловойБазе",
				"Очередь, ИндексСтроки");
	
КонецФункции

#КонецОбласти

#Область ВыборкаЗаданий

#Область ТекстыЗапросов

Функция ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий)
	
	Если ПараметрыОчереди.ВыборкаЗаданийПоУмолчанию Тогда
		
		ТекстЗапроса = ТекстЗапросаВыборкиЗаданийПоУмолчанию(Запрос, ПараметрыОчереди, КоличествоЗаданий);
		
	Иначе
		
		Очередь = ПараметрыОчереди.Очередь;
		
		ТекстЗапроса = РегистрыСведений[Очередь].ТекстЗапросаВыборкиЗаданий(Запрос, ПараметрыОчереди, КоличествоЗаданий);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗначимыеОчереди(ТаблицаОчередей)
	
	ТаблицаНастроек = НастройкиОчередей(ТаблицаОчередей.ВыгрузитьКолонку("Очередь"));
	
	ШаблонЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Очередь      КАК Очередь,
	|	&ИндексСтроки КАК ИндексСтроки
	|ИЗ
	|	ОчередьЗаданий КАК Таблица";
	
	ТекстыЗапроса = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Очередь");
	
	Для каждого СтрокаТаблицы Из ТаблицаОчередей Цикл
		
		Очередь = СтрокаТаблицы.Очередь;
		
		Отбор.Очередь = Очередь;
		
		НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].Приостановлена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Очередь",       СтрШаблон("""%1""", Очередь));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "&ИндексСтроки",  Формат(СтрокаТаблицы.ИндексСтроки, "ЧН=0; ЧГ=;"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "ОчередьЗаданий", СтрШаблон("%1.%2", "РегистрСведений", Очередь));
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = ?(ТекстыЗапроса.Количество() = 0,
						"",
						СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ТаблицаЗаданий(Запрос, ИдентификаторыПереданныеВРабочиеПотоки = Неопределено)
	
	Запрос.УстановитьПараметр(
		"ИдентификаторыПереданныеВРабочиеПотоки",
		?(ИдентификаторыПереданныеВРабочиеПотоки = Неопределено, Новый Массив, ИдентификаторыПереданныеВРабочиеПотоки));
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Таблица.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
	Таблица.Индексы.Добавить("Обработано");
	Таблица.Индексы.Добавить("Обработано, ИдентификаторЗадания");
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ВыполненияЗаданий

// Обрабатывает ошибки.
//
// Параметры:
//  Очередь                             - см. ВыполнитьЗадания.Очередь
//  Данные                              - ТаблицаЗначений - данные для выполнения заданий,
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор не
//                                                                                   выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ВыполнитьЗаданияВТранзакции         - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ТекстИсключения                     - Строка - текст ошибки исключения.
//
Процедура ОбработатьОшибки(
			Очередь,
			Данные,
			ИдентификаторыНеОбработанныхЗаписей,
			ВыполнитьЗаданияВТранзакции = Ложь,
			ТекстИсключения = "")
	
	Если ИдентификаторыНеОбработанныхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для каждого Идентификатор Из ИдентификаторыНеОбработанныхЗаписей Цикл
		Идентификаторы.Добавить(Идентификатор.Ключ);
	КонецЦикла;
	
	Поля = Новый Массив;
	Для каждого Колонка Из Данные.Колонки Цикл
		
		ИмяПоля = Колонка.Имя;
		
		Если ИмяПоля = "ИдентификаторЗадания" Или ИмяПоля = "ДатаЗадания" Или ИмяПоля = "ИдентификаторЗаписи" Тогда
			Продолжить;
		КонецЕсли;
		
		Поля.Добавить(ИмяПоля);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	Данные.ДатаЗадания          КАК ДатаЗадания,
	|	Данные.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	&Поля
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ИдентификаторЗадания КАК ИдентификаторЗадания,
	|	Данные.ДатаЗадания          КАК ДатаЗадания,
	|	Данные.ИдентификаторЗаписи  КАК ИдентификаторЗаписи,
	|	&Поля
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	Данные.ИдентификаторЗаписи В (&Идентификаторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.ДатаЗадания
	|
	|ИТОГИ ПО
	|	ИдентификаторЗадания
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", СтрСоединить(Поля, ", "));
	
	Запрос.УстановитьПараметр("Данные",         Данные);
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТекстыОшибок   = Новый Массив;
	
	Если ВыполнитьЗаданияВТранзакции Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			КоличествоЗаписей = 0;
			
			НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
			
			ВыборкаИдентификаторЗадания = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторЗадания.Следующий() Цикл
				
				ТаблицаЗаписей.Очистить();
				
				ТекстыОшибок.Очистить();
				
				Выборка = ВыборкаИдентификаторЗадания.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Выборка);
					
					ТекстОшибки = ИдентификаторыНеОбработанныхЗаписей[Выборка.ИдентификаторЗаписи];
					Если ЗначениеЗаполнено(ТекстОшибки) И ТекстыОшибок.Найти(ТекстОшибки) = Неопределено Тогда
						ТекстыОшибок.Добавить(ТекстОшибки);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Очередь             = Очередь;
				ЗаписьНабора.ИдентификаторОшибки = Новый УникальныйИдентификатор;
				ЗаписьНабора.ДанныеЗадания       = Новый ХранилищеЗначения(ТаблицаЗаписей, Новый СжатиеДанных(9));
				ЗаписьНабора.ОписаниеОшибки      = ОписаниеОшибки;
				ЗаписьНабора.ДатаЗаписи          = ТекущаяДатаСеанса();
				
				КоличествоЗаписей = КоличествоЗаписей + 1;
				Если КоличествоЗаписей = 1000 Тогда
					
					УстановитьПривилегированныйРежим(Истина);
					НаборЗаписей.Записать(Ложь);
					УстановитьПривилегированныйРежим(Ложь);
					
					НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
					
					КоличествоЗаписей = 0;
					
				КонецЕсли;
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ОписаниеОшибки);
				
			КонецЦикла;
			
			Если КоличествоЗаписей > 0 Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
			
			УдалитьЗадания(Очередь, Данные,, ВыполнитьЗаданияВТранзакции, ТекстИсключения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
		
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецПопытки;
		
	Иначе
		
		ВыборкаИдентификаторЗадания = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторЗадания.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				НаборЗаписей = РегистрыСведений.ОшибкиВыполненияОтложенныхЗаданий.СоздатьНаборЗаписей();
				
				ТаблицаЗаписей.Очистить();
				
				ТекстыОшибок.Очистить();
				
				Выборка = ВыборкаИдентификаторЗадания.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(), Выборка);
					
					ТекстОшибки = ИдентификаторыНеОбработанныхЗаписей[Выборка.ИдентификаторЗаписи];
					Если ЗначениеЗаполнено(ТекстОшибки) И ТекстыОшибок.Найти(ТекстОшибки) = Неопределено Тогда
						ТекстыОшибок.Добавить(ТекстОшибки);
					КонецЕсли;
					
				КонецЦикла;
				
				ОписаниеОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.Очередь             = Очередь;
				ЗаписьНабора.ИдентификаторОшибки = Новый УникальныйИдентификатор;
				ЗаписьНабора.ДанныеЗадания       = Новый ХранилищеЗначения(ТаблицаЗаписей, Новый СжатиеДанных(9));
				ЗаписьНабора.ОписаниеОшибки      = ОписаниеОшибки;
				ЗаписьНабора.ДатаЗаписи          = ТекущаяДатаСеанса();
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать(Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				
				УдалитьЗадания(Очередь, ТаблицаЗаписей,, Истина, ОписаниеОшибки);
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ОписаниеОшибки);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет задания.
//
// Параметры:
//  Очередь                             - см. ОбработатьОшибки.Очередь
//  Данные                              - см. ОбработатьОшибки.Данные
//  ИдентификаторыНеОбработанныхЗаписей - см. ОбработатьОшибки.ИдентификаторыНеОбработанныхЗаписей
//  ВыполнитьЗаданияВТранзакции         - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//  ТекстИсключения                     - см. ОбработатьОшибки.ТекстИсключения
//
Процедура УдалитьЗадания(
			Очередь,
			Данные,
			ИдентификаторыНеОбработанныхЗаписей = Неопределено,
			ВыполнитьЗаданияВТранзакции = Ложь,
			ТекстИсключения = "")
	
	Если ВыполнитьЗаданияВТранзакции Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ИндексСтроки = Данные.Количество() - 1;
			
			Пока ИндексСтроки > -1 Цикл
				
				СтрокаДанных = Данные[ИндексСтроки];
				ИндексСтроки = ИндексСтроки - 1;
				
				ИдентификаторЗаписи = СтрокаДанных.ИдентификаторЗаписи;
				
				Если ИдентификаторыНеОбработанныхЗаписей <> Неопределено
				   И ИдентификаторыНеОбработанныхЗаписей[ИдентификаторЗаписи] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи);
				
				Данные.Удалить(СтрокаДанных);
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
		КонецПопытки;
		
	Иначе
		
		ТекстыИсключений  = Новый Массив;
		
		Попытка
			ИндексСтроки = Данные.Количество() - 1;
		Исключение
			
			ТекстИсключения = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстИсключения);
			
			Возврат;
			
		КонецПопытки;
		
		Пока ИндексСтроки > -1 Цикл
			
			Попытка
				
				КритическаяОшибка = Ложь;
				
				СтрокаДанных = Данные[ИндексСтроки];
				ИндексСтроки = ИндексСтроки - 1;
				
				КритическаяОшибка = Истина;
				
				ИдентификаторЗаписи = СтрокаДанных.ИдентификаторЗаписи;
				
				Если ИдентификаторыНеОбработанныхЗаписей <> Неопределено
				   И ИдентификаторыНеОбработанныхЗаписей[ИдентификаторЗаписи] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи);
				
				Данные.Удалить(СтрокаДанных);
				
			Исключение
				
				ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстОшибки);
				
				Если ТекстыИсключений.Найти(ТекстОшибки) = Неопределено Тогда
					ТекстыИсключений.Добавить(ТекстОшибки);
				КонецЕсли;
				
				Если КритическаяОшибка Тогда
					Прервать;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если ТекстыИсключений.Количество() > 0 Тогда
			ТекстИсключения = СтрСоединить(ТекстыИсключений, Символы.ПС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписьИзРегистраОчередиЗаданий(Очередь, ИдентификаторЗаписи)
	
	НаборЗаписей = РегистрыСведений[Очередь].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПредставлениеОшибки(ИдентификаторыНеОбработанныхЗаписей)
	
	ТекстОшибки = "";
	
	Если ЗначениеЗаполнено(ИдентификаторыНеОбработанныхЗаписей) Тогда
		
		ТекстыОшибок = Новый Массив;
		
		Для каждого Идентификатор Из ИдентификаторыНеОбработанныхЗаписей Цикл
			
			Текст = Идентификатор.Значение;
			Если ТекстыОшибок.Найти(Текст) = Неопределено Тогда
				ТекстыОшибок.Добавить(Текст);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ВыполнитьЗаданияВФонеУправлящегоПотока(ИмяМетода, Очередь, Порция, ВыполнитьЗаданияВТранзакции)
	
	КоличествоПовторов        = КоличествоПовторов();
	ТекущееКоличествоПовторов = 0;
	
	ПараметрыДанных = ПараметрыДанных(Порция, ПоместитьВоВременноеХранилище(Неопределено));
	
	Пока Истина Цикл
	
		ТекущееКоличествоПовторов = ТекущееКоличествоПовторов + 1;
		ЗафиксироватьОшибку       = ТекущееКоличествоПовторов = КоличествоПовторов;
		
		ПараметрыМетода = ПараметрыРабочегоПотока(
							Очередь,
							ПараметрыДанных,
							ВыполнитьЗаданияВТранзакции,
							ЗафиксироватьОшибку,
							Ложь,
							"");
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
		
		ТекстОшибки = ПараметрыМетода[5];
		
		Если ЗафиксироватьОшибку Или Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			УдалитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
			Прервать;
		Иначе
			
			ТекущиеДанные = ПолучитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
			
			Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
				ПараметрыДанных.Данные = ТекущиеДанные;
			Иначе
				УдалитьИзВременногоХранилища(ПараметрыДанных.АдресНеОбработанныхДанных);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(Очередь, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.РегистрыСведений[Очередь],,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РабочийПоток

// Инициализирует таблицу рабочих потоков.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица рабочих процессов:
//   * Данные                    - см. ПараметрыДанных.Данные
//   * АдресНеОбработанныхДанных - см. ПараметрыДанных.АдресНеОбработанныхДанных
//   * ФоновоеЗадание            - ФоновоеЗадание - рабочий процесс
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор рабочего процесса
//   * КоличествоПовторов      -   Число - количество повторов
//
Функция РабочиеПотоки()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Данные",                    Новый ОписаниеТипов("ТаблицаЗначений"));
	Таблица.Колонки.Добавить("АдресНеОбработанныхДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Таблица.Колонки.Добавить("ФоновоеЗадание",            Новый ОписаниеТипов("ФоновоеЗадание"));
	Таблица.Колонки.Добавить("УникальныйИдентификатор",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	Таблица.Колонки.Добавить("КоличествоПовторов",        ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Таблица.Индексы.Добавить("УникальныйИдентификатор");
	
	Возврат Таблица;
	
КонецФункции

// Создает рабочий поток и добавляет в таблицу рабочих потоков.
//
// Параметры:
//  Таблица                     - см. РабочиеПроцессы
//  Очередь                     - см. ВыполнитьЗадания.Очередь
//  Данные                      - ТаблицаЗначений - таблица данных заданий,
//  ВыполнитьЗаданияВТранзакции - см. ВыполнитьЗадания.ВыполнитьЗаданияВТранзакции
//
Процедура ДобавитьРабочийПоток(Таблица, Очередь, Данные, ВыполнитьЗаданияВТранзакции)
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Данные                    = Данные;
	СтрокаТаблицы.АдресНеОбработанныхДанных = ПоместитьВоВременноеХранилище(Неопределено);
	СтрокаТаблицы.ФоновоеЗадание            = РабочийПоток(Очередь, СтрокаТаблицы, ВыполнитьЗаданияВТранзакции, Ложь);
	СтрокаТаблицы.УникальныйИдентификатор   = СтрокаТаблицы.ФоновоеЗадание.УникальныйИдентификатор;
	СтрокаТаблицы.КоличествоПовторов        = 1;
	
КонецПроцедуры

Функция РабочийПоток(Очередь, Данные, ВыполнитьЗаданияВТранзакции, ЗафиксироватьОшибку)
	
	ИмяМетода = ИмяМетодаРабочегоПотока(Очередь);
	
	ПараметрыДанных = ПараметрыДанных(Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыДанных, Данные);
	
	ПараметрыМетода = ПараметрыРабочегоПотока(
						Очередь,
						ПараметрыДанных,
						ВыполнитьЗаданияВТранзакции,
						ЗафиксироватьОшибку);
	
	Наименование = СтрШаблон("%1 ""%2""", НСтр("ru = 'Рабочий поток';
												|en = 'Worker thread'"), Очередь);
	
	Возврат ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыМетода,, Наименование);
	
КонецФункции

Функция ИмяМетодаРабочегоПотока(Очередь)
	
	Возврат СтрШаблон("%1.%2", "ОтложенныеЗадания", Очередь);
	
КонецФункции

Функция ПараметрыРабочегоПотока(
			Очередь,
			ПараметрыДанных,
			ВыполнитьЗаданияВТранзакции,
			ЗафиксироватьОшибку,
			ОбработатьВТекущемСеансе = Ложь,
			ТекстОшибки = Неопределено)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Очередь);
	ПараметрыМетода.Добавить(ПараметрыДанных);
	ПараметрыМетода.Добавить(ВыполнитьЗаданияВТранзакции);
	ПараметрыМетода.Добавить(ЗафиксироватьОшибку);
	ПараметрыМетода.Добавить(ОбработатьВТекущемСеансе);
	ПараметрыМетода.Добавить(ТекстОшибки);
	
	Возврат ПараметрыМетода;
	
КонецФункции

Функция КоличествоАктивныхРабочихПотоков(Очередь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", ИмяМетодаРабочегоПотока(Очередь));
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	
КонецФункции

Функция КонтролироватьРабочиеПотоки(РабочиеПотоки, Очередь, ВыполнитьЗаданияВТранзакции, ВсеПотоки = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтборРабочийПоток = Новый Структура;
	ОтборРабочийПоток.Вставить("УникальныйИдентификатор");
	
	ЕстьСвободныйРабочийПоток = Ложь;
	
	КоличествоПовторов = КоличествоПовторов();
	
	Пока РабочиеПотоки.Количество() > 0 Цикл
		
		НайденныеРабочиеПотоки = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(
									РабочиеПотоки.ВыгрузитьКолонку("ФоновоеЗадание"), 1);
		
		Для каждого ТекущийРабочийПоток Из НайденныеРабочиеПотоки Цикл
			
			СостояниеРабочегоПотока = ТекущийРабочийПоток.Состояние;
			
			Если СостояниеРабочегоПотока = СостояниеФоновогоЗадания.Завершено
			 Или СостояниеРабочегоПотока = СостояниеФоновогоЗадания.Отменено Тогда
				
				ОтборРабочийПоток.УникальныйИдентификатор = ТекущийРабочийПоток.УникальныйИдентификатор;
				
				СтрокаРП = РабочиеПотоки.НайтиСтроки(ОтборРабочийПоток)[0];
				
				УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
				
				РабочиеПотоки.Удалить(СтрокаРП);
				
				Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
					ЕстьСвободныйРабочийПоток = Истина;
				КонецЕсли;
				
			ИначеЕсли СостояниеРабочегоПотока = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				
				ОтборРабочийПоток.УникальныйИдентификатор = ТекущийРабочийПоток.УникальныйИдентификатор;
				
				СтрокаРП = РабочиеПотоки.НайтиСтроки(ОтборРабочийПоток)[0];
				Если СтрокаРП.КоличествоПовторов = КоличествоПовторов Тогда
					
					УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
					
					РабочиеПотоки.Удалить(СтрокаРП);
					
					Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
						ЕстьСвободныйРабочийПоток = Истина;
					КонецЕсли;
					
				Иначе
					
					ТекущиеДанные = ПолучитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
					
					Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
						
						ТекущееКоличествоПовторов = СтрокаРП.КоличествоПовторов + 1;
						ЗафиксироватьОшибку       = ТекущееКоличествоПовторов = КоличествоПовторов;
						
						СтрокаРП.Данные                  = ТекущиеДанные;
						СтрокаРП.ФоновоеЗадание          = РабочийПоток(
																Очередь,
																СтрокаРП,
																ВыполнитьЗаданияВТранзакции,
																ЗафиксироватьОшибку);
						
						СтрокаРП.УникальныйИдентификатор = СтрокаРП.ФоновоеЗадание.УникальныйИдентификатор;
						СтрокаРП.КоличествоПовторов      = ТекущееКоличествоПовторов;
						
					Иначе
						
						УдалитьИзВременногоХранилища(СтрокаРП.АдресНеОбработанныхДанных);
						
						РабочиеПотоки.Удалить(СтрокаРП);
						
						Если Не ВсеПотоки И Не ЕстьСвободныйРабочийПоток Тогда
							ЕстьСвободныйРабочийПоток = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
		Если ЕстьСвободныйРабочийПоток Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ?(ВсеПотоки, 0, КоличествоАктивныхРабочихПотоков(Очередь));
	
КонецФункции

// Возвращает количество повторов запуска рабочего потока при возникновении ошибки.
//
// Возвращаемое значение:
//  Число - количество повторов
//
Функция КоличествоПовторов()
	
	Возврат 3;
	
КонецФункции

// Возвращает параметры данных.
//
// Параметры:
//  Данные                    - ТаблицаЗначений, Неопределено - данные для выполнения заданий,
//  АдресНеОбработанныхДанных - Строка, Неопределено          - адрес во временном хранилище, используется для передачи
//                                                              не обработанных данных из рабочего потока в управляющий
//                                                              поток. По умолчанию НЕОПРЕДЕЛЕНО.
//
// Возвращаемое значение:
//  Структура - с ключами:
//   * Данные                    - см. ПараметрыДанных.Данные
//   * АдресНеОбработанныхДанных - см. ПараметрыДанных.АдресНеОбработанныхДанных
//
Функция ПараметрыДанных(Данные, АдресНеОбработанныхДанных = Неопределено)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Данные",                    Данные);
	Параметры.Вставить("АдресНеОбработанныхДанных", АдресНеОбработанныхДанных);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область Прочее

#Область Очереди

// Возвращает параметры очереди заданий.
// 
// Возвращаемое значение:
//  Структура - с ключами:
//   * Очередь                           - Строка - имя регистра сведений очереди заданий.
//   * ИмяМетода                         - Строка - имя метода выполнения заданий, принцип формирования аналогично
//                                                  аргументу см. ОбщегоНазначения.ВыполнитьМетодКонфигурации.ИмяМетода.
//   * Многопоточный                     - Булево - признак многопоточного выполнения заданий в очереди.
//   * КоличествоФоновыхЗаданий          - Число  - количество фоновых заданий для выполнения отложенных заданий
//                                                  очереди, по умолчанию 4
//                                                  (см. ОтложенныеЗаданияПереопределяемый.КоличествоФоновыхЗаданийПоУмолчанию).
//   * ПорцияРасчета                     - Число  - количество заданий, которые нужно передать в рабочий поток,
//                                                  по умолчанию 100
//                                                  (см. ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию).
//   * АналитикаРасчета                  - Строка - список полей регистра сведений очереди заданий, разделенные
//                                                  запятыми, в разрезе которых определяется задание, если не заполнено,
//                                                  тогда одна запись регистра считается одним заданием.
//   * ИнтервалОбработки                 - Число  - интервал обработки (в секундах) между времени начало текущей выборки
//                                                  и окончания выполнения последней порции расчета:
//                                                    1. если ИнтервалОбработки больше 0, тогда выборка и выполнения
//                                                       заданий происходит при наступлении одного из нижеперечисленных
//                                                       условий:
//                                                         1. количество заданий в выборке не меньше чем ПорцияРасчета,
//                                                         2. интервал между текущей датой и датой конца выполнения
//                                                            последней порции заданий не меньше чем ИнтервалОбработки,
//                                                    2. если ИнтервалОбработки является 0, тогда  ИнтервалОбработки
//                                                       не влияет на выборку и выполнения заданий.
//   * Приоритет                         - Число  - имеет только информативный смысл, отображается в интерфейсе,
//                                                  возможные значения:
//                                                    1. -1 - высокий (блокирует оперативную работу - распределение
//                                                            запасов, нельзя распечатать документы ...),
//                                                    2.  0 - средний,
//                                                    3.  1 - низкий.
//   * ВыполнитьЗаданияВТранзакции       - Булево - задания одной порции выполняются в транзакции, по умолчанию ЛОЖЬ.
//   * ВыполнитьВТранзакцииВФайловойБазе - Булево - если ЛОЖЬ, тогда в файловой базе задания выполняются в управляющем
//                                                  потоке,
//                                                  если ИСТИНА, тогда в файловой базе выполняется в той же транзакции.
//                                                  По умолчанию ИСТИНА.
//   * ВыборкаЗаданийПоУмолчанию         - Булево - если ИСТИНА, тогда для выборки заданий используется текст запроса
//                                                  сформированный в функции см. ТекстЗапросаВыборкиЗаданийПоУмолчанию,
//                                                  если ЛОЖЬ, тогда текст запроса выборки заданий формируется 
//                                                  в функции ТекстЗапросаВыборкиЗаданий модуля менеджера регистра
//                                                  сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ТекстЗапросаВыборкиЗаданий).
//                                                  По умолчанию ИСТИНА.
//   * ДополнительнаяОбработкаОшибок     - Булево - если ИСТИНА, тогда в методе выполнения заданий
//                                                  (см. ВыполнитьЗадания) перед обработкой ошибок
//                                                  (см. ОбработатьОшибки) запускается процедура ПередОбработкойОшибок
//                                                  модуля менеджера регистра сведений очереди заданий
//                                                  (см. РегистрыСведений.ЗаданияКОбработкеЭтаповПроизводства.ПередОбработкойОшибок).
//                                                  По умолчанию ЛОЖЬ.
//
Функция ПараметрыОчередиЗаданий()
	
	КоличествоФоновыхЗаданий = ОтложенныеЗаданияПереопределяемый.КоличествоФоновыхЗаданийПоУмолчанию();
	ПорцияРасчета            = ОтложенныеЗаданияПереопределяемый.ПорцияРасчетаПоУмолчанию();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Очередь",                           "");
	Параметры.Вставить("ИмяМетода",                         "");
	Параметры.Вставить("Многопоточный",                     Истина);
	Параметры.Вставить("КоличествоФоновыхЗаданий",          КоличествоФоновыхЗаданий);
	Параметры.Вставить("ПорцияРасчета",                     ПорцияРасчета);
	Параметры.Вставить("АналитикаРасчета",                  "");
	Параметры.Вставить("ИнтервалОбработки",                 0);
	Параметры.Вставить("Приоритет",                         0);
	Параметры.Вставить("ВыполнитьЗаданияВТранзакции",       Ложь);
	Параметры.Вставить("ВыполнитьВТранзакцииВФайловойБазе", Истина);
	Параметры.Вставить("ВыборкаЗаданийПоУмолчанию",         Истина);
	Параметры.Вставить("ДополнительнаяОбработкаОшибок",     Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Добавляет очередь заданий.
// 
// Параметры:
//  ОчередиЗаданий - см. ОчередиЗаданий
//  Параметры      - см. ПараметрыОчередиЗаданий
//
Процедура ДобавитьОчередь(ОчередиЗаданий, Параметры)
	
	СтрокаТаблицы = ОчередиЗаданий.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Параметры);
	
	СтрокаТаблицы.ИндексСтроки = ОчередиЗаданий.Количество() - 1;
	
КонецПроцедуры

// Возвращает настройки очередей
// 
// Параметры:
//  Очереди - Массив из Строка, Неопределено - массив имен регистров сведений очередей заданий.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//   * Очередь                - Строка - имя регистра сведений очереди заданий,
//   * Приостановлена         - Булево - если ИСТИНА, тогда задания записываются но не выполняются,
//   * ДатаПоследнейОбработки - Дата   - используется только для тех очередей, у которых параметр 
//                                       "ИнтервалОбработки" (см. ОчередиЗаданий) заполнен.
//
Функция НастройкиОчередей(Очереди = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Очередь                КАК Очередь,
	|	Настройки.Приостановлена         КАК Приостановлена,
	|	Настройки.ДатаПоследнейОбработки КАК ДатаПоследнейОбработки
	|ИЗ
	|	РегистрСведений.НастройкиОчередейЗаданий КАК Настройки
	|ГДЕ
	|	Настройки.Очередь В (&Очереди)";
	
	Если ЗначениеЗаполнено(Очереди) Тогда
		Запрос.УстановитьПараметр("Очереди", Очереди);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Настройки.Очередь В (&Очереди)", "ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТаблицаНастроек = Новый ТаблицаЗначений;
		ТаблицаНастроек.Колонки.Добавить("Очередь",                ОбщегоНазначения.ОписаниеТипаСтрока(150));
		ТаблицаНастроек.Колонки.Добавить("Приостановлена",         Новый ОписаниеТипов("Булево"));
		ТаблицаНастроек.Колонки.Добавить("ДатаПоследнейОбработки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
	Иначе
		
		ТаблицаНастроек = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	ТаблицаНастроек.Индексы.Добавить("Очередь");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

#КонецОбласти

#Область УправляющийПоток

// Возвращает ключ управляющего потока.
// 
// Параметры:
//  Очередь - Строка - имя регистра сведений очереди заданий.
// 
// Возвращаемое значение:
//  Строка - ключ управляющего потока в формате "УправляющийПоток_<имя регистра сведений очереди заданий>"
//
Функция КлючУправляющегоПотока(Очередь)
	
	Возврат СтрШаблон("УправляющийПоток_%1", Очередь);
	
КонецФункции

Функция ПараметрыСтартераУправляющегоПотока()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ключ",         "СтартерУправляющегоПотока");
	Параметры.Вставить("ИмяМетода",    "ОтложенныеЗадания.СтартерУправляющегоПотока");
	Параметры.Вставить("Наименование", НСтр("ru = 'Стартер управляющего потока';
											|en = 'Starter of thread of control'"));
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗапуститьСтартерУправляющегоПотока()
	
	ПараметрыСтартераУП = ПараметрыСтартераУправляющегоПотока();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыСтартераУП.Наименование;
	ПараметрыВыполнения.КлючФоновогоЗадания         = ПараметрыСтартераУП.Ключ;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение           = 0;
	
	Попытка
		ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ПараметрыСтартераУП.ИмяМетода);
	Исключение
		// Фоновое задание "Стартер управляющего потока" с ключом "СтартерУправляющегоПотока" уже запущен.
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Паузы

Процедура Пауза(Длительность, Очередь = Неопределено, Отбор = Неопределено)
	
	Если Отбор = Неопределено Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ",      КлючУправляющегоПотока(Очередь));
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если НайденныеФоновыеЗадания.Количество() > 0 Тогда
		
		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(НайденныеФоновыеЗадания, Длительность);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПаузаИнтервалОбработки(НастройкиОчереди, ИнтервалОбработки)
	
	Очередь                = НастройкиОчереди.Очередь;
	ДатаПоследнейОбработки = НастройкиОчереди.ДатаПоследнейОбработки;
	
	ТекущаяДата            = ТекущаяУниверсальнаяДата();
	
	Если ЗначениеЗаполнено(ДатаПоследнейОбработки) Тогда
		
		ДлительностьПаузы = ИнтервалОбработки - (ТекущаяДата - ДатаПоследнейОбработки);
		
		Если ДлительностьПаузы > 0 И ДлительностьПаузы <= ИнтервалОбработки Тогда
			
			Пауза(ДлительностьПаузы, Очередь);
			
			ТекущаяДата = ТекущаяУниверсальнаяДата();
			
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиОчереди.ДатаПоследнейОбработки = ТекущаяДата;
	
	НаборЗаписей = РегистрыСведений.НастройкиОчередейЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Очередь.Установить(Очередь);
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), НастройкиОчереди);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция Таймауты()
	
	Таймауты = Новый Массив;
	Таймауты.Добавить(1);
	Таймауты.Добавить(2);
	Таймауты.Добавить(2);
	
	Возврат Таймауты;
	
КонецФункции

Функция ТаймаутыНачальные()
	
	ТаймаутыНачальные = Новый Массив;
	ТаймаутыНачальные.Добавить(0.2);
	ТаймаутыНачальные.Добавить(0.4);
	ТаймаутыНачальные.Добавить(0.4);
	ТаймаутыНачальные.Добавить(1);
	ТаймаутыНачальные.Добавить(1);
	
	Возврат ТаймаутыНачальные;
	
КонецФункции

#КонецОбласти

#КонецОбласти