////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы "Международный финансовый учет".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Возвращает валюты учета на плане счетов
// 
// Параметры:
// 	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, для которого необходимо получить учетные валюты.
// 	Организация - СправочникСсылка.Организации - Организация, для которых необходимо получить учетные валюты.
// 	
// Возвращаемое значение:
//	Структура - см. МеждународныйУчетОбщегоНазначения.УчетныеВалюты
//
Функция УчетныеВалюты(ПланСчетов, Организация) Экспорт

	Возврат МеждународныйУчетОбщегоНазначения.УчетныеВалюты(ПланСчетов, Организация);

КонецФункции


// Возвращает функциональную валюту, которая используется в организации на указанном плане счетов.
// 
// Параметры:
// 	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, для которого необходимо получить учетные валюты.
// 	Организация - СправочникСсылка.Организации - Организация, для которых необходимо получить учетные валюты.
// 	
// Возвращаемое значение:
//	СправочникСсылка.Валюты -
//
Функция ВалютаФункциональная(ПланСчетов, Организация) Экспорт

	Возврат МеждународныйУчетОбщегоНазначения.УчетныеВалюты(ПланСчетов, Организация).Функциональная;

КонецФункции

// Возвращает массив статей активов и пассивов, для которых в режиме формирования проводок МФУ по объектам учета
// настроены счета учета по объектам учета и объектам настройки
// 
// Возвращаемое значение:
//  ФиксированныйМассив из ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов
//
Функция СтатьиАктивовПассивовСНастройкамиПоОбъектам() Экспорт
	
	Возврат Новый ФиксированныйМассив(Перечисления.ОбъектыФинансовогоУчета.СтатьиАктивовПассивовСНастройками());
	
КонецФункции

//-- НЕ УТКА

// Возвращает параметры регистра для отражения в международном учете.
//
// Параметры:
//	ИмяРегистра - Строка - имя регистра, для которого возвращаются параметры отражения.
//
// Возвращаемое значение:
//	Структура из КлючИЗначение - Структура возвращаемых параметров:
//		* Показатели - см. МеждународныйУчетСерверПовтИсп.Показатели
//		* ПоказателиВВалюте - см. МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте
//		* ПоказателиКоличества - см. МеждународныйУчетСерверПовтИсп.ПоказателиКоличества
//		* ИсточникиУточненияСчета - см. МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета
//		* ИсточникиПодразделений - см. МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений
//		* ИсточникиНаправлений - см. МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений
//		* ИсточникиСубконто - см. МеждународныйУчетСерверПовтИсп.ИсточникиСубконто
Функция ПараметрыРегистра(ИмяРегистра) Экспорт

	ПараметрыОтражения = Новый Структура();
	ПараметрыОтражения.Вставить("Показатели", МеждународныйУчетСерверПовтИсп.Показатели(ИмяРегистра));
	ПараметрыОтражения.Вставить("ПоказателиВВалюте", МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте(ИмяРегистра));
	ПараметрыОтражения.Вставить("ПоказателиКоличества", МеждународныйУчетСерверПовтИсп.ПоказателиКоличества(ИмяРегистра));
	ПараметрыОтражения.Вставить("ИсточникиУточненияСчета", МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета(ИмяРегистра));
	ПараметрыОтражения.Вставить("ИсточникиПодразделений", МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений(ИмяРегистра));
	ПараметрыОтражения.Вставить("ИсточникиНаправлений", МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений(ИмяРегистра));
	ПараметрыОтражения.Вставить("ИсточникиСубконто", МеждународныйУчетСерверПовтИсп.ИсточникиСубконто(ИмяРегистра));
	
	Возврат ПараметрыОтражения;

КонецФункции

// Определяет источники уточнения счета, доступные в регистре и их свойства.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//				   Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваИсточника = СвойстваИсточникаУточненияСчета();
	ИсточникиУточненияСчета = РегистрыНакопления[ИмяРегистра].ИсточникиУточненияСчета(СвойстваИсточника);
	
	Возврат ИсточникиУточненияСчета;

КонецФункции

// Определяет источники подразделений регистра и их свойства.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//				   Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсточникиПодразделений = РегистрыНакопления[ИмяРегистра].ИсточникиПодразделений();
	
	Возврат ИсточникиПодразделений;

КонецФункции

// Определяет источники направлений регистра и их свойства.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//				   Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсточникиНаправлений = РегистрыНакопления[ИмяРегистра].ИсточникиНаправлений();
	
	Возврат ИсточникиНаправлений;

КонецФункции

// Определяет источники заполнения субконто.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИсточникиСубконто = РегистрыНакопления[ИмяРегистра].ИсточникиСубконто();
	
	Возврат ИсточникиСубконто;

КонецФункции

// Определяет показатели регистра.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - :
//   Ключ - Перечисления.ПоказателиАналитическихРегистров - имя показателя
//   Значение - Структура из КлючИЗначение - Описание свойств показателя:
//    *Ресурсы - Массив из Структура-:
//     **Имя - Строка - 
//     **ИсточникВалюты - Массив Из Строка -
//
Функция Показатели(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СвойстваПоказателей = СвойстваПоказателей();
	Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
		Показатели = РегистрыНакопления[ИмяРегистра].Показатели(СвойстваПоказателей);
	Иначе
		Показатели = Неопределено;
	КонецЕсли;
	
	Возврат Показатели;

КонецФункции

// Определяет показатели в валюте регистра.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//				   Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СвойстваПоказателей = СвойстваПоказателейВВалюте();
	ПоказателиВВалюте = РегистрыНакопления[ИмяРегистра].ПоказателиВВалюте(СвойстваПоказателей);
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели количества.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//				   Значение - структура свойств источника. 
//
Функция ПоказателиКоличества(ИмяРегистра) Экспорт

	Если ПустаяСтрока(ИмяРегистра) ИЛИ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиКоличества = РегистрыНакопления[ИмяРегистра].ПоказателиКоличества();
	
	Возврат ПоказателиКоличества;

КонецФункции
//++ НЕ УТКА

// Получает свойства счета международного учета
//
// Параметры:
//  Счет - ПланСчетовСсылка.Международный - Счет международного плана счетов.
//
// Возвращаемое значение:
//  Структура - свойства счета
//				Ключ - имя свойства счета.
//				Значение - значение свойства.
//
Функция СвойстваСчета(Знач Счет) Экспорт

	ДанныеСчета = Новый Структура;
	ДанныеСчета.Вставить("Ссылка", ПланыСчетов.Международный.ПустаяСсылка());
	ДанныеСчета.Вставить("Наименование", "");
	ДанныеСчета.Вставить("НаименованиеМеждународное", "");
	ДанныеСчета.Вставить("Описание", "");
	ДанныеСчета.Вставить("Рекласс", Ложь);
	ДанныеСчета.Вставить("ИсключитьИзРасчетаКурсовыхРазниц", Ложь);
	ДанныеСчета.Вставить("Код", "");
	ДанныеСчета.Вставить("Родитель", ПланыСчетов.Международный.ПустаяСсылка());
	ДанныеСчета.Вставить("Вид", Неопределено);
	ДанныеСчета.Вставить("Забалансовый", Ложь);
	ДанныеСчета.Вставить("ЗапретитьИспользоватьВПроводках" , Ложь);
	ДанныеСчета.Вставить("Валютный", Ложь);
	ДанныеСчета.Вставить("Количественный", Ложь);
	ДанныеСчета.Вставить("УчетПоПодразделениям" , Ложь);
	ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности", Ложь);
	ДанныеСчета.Вставить("КоличествоСубконто", 0);
	ДанныеСчета.Вставить("ПланСчетов", Справочники.ПланыСчетовМеждународногоУчета.ПустаяСсылка());
	ДанныеСчета.Вставить("ВариантФормированияПроводок", Перечисления.ВариантыФормированияПроводок.ПустаяСсылка());
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	
	Для ИндексСубконто = 1 По МаксКоличествоСубконто Цикл
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто, Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование", Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения", Неопределено);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", Ложь);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат ДанныеСчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПС.Ссылка КАК Ссылка,
	|	ПС.Наименование КАК Наименование,
	|	ПС.НаименованиеМеждународное КАК НаименованиеМеждународное,
	|	ПС.Описание КАК Описание,
	|	ПС.Рекласс КАК Рекласс,
	|	ПС.ИсключитьИзРасчетаКурсовыхРазниц КАК ИсключитьИзРасчетаКурсовыхРазниц,
	|	ПС.Код КАК Код,
	|	ПС.Родитель КАК Родитель,
	|	ПС.Вид КАК Вид,
	|	ПС.Забалансовый КАК Забалансовый,
	|	ПС.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках,
	|	ПС.Валютный КАК Валютный,
	|	ПС.Количественный КАК Количественный,
	|	ПС.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	ПС.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельности,
	|	ПС.ПланСчетов КАК ПланСчетов,
	|	ПС.ПланСчетов.ВариантФормированияПроводок КАК ВариантФормированияПроводок
	|ИЗ
	|	ПланСчетов.Международный КАК ПС
	|ГДЕ
	|	ПС.Ссылка = &Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МеждународныйВидыСубконто.НомерСтроки КАК НомерСтроки,
	|	МеждународныйВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МеждународныйВидыСубконто.ВидСубконто.Наименование КАК Наименование,
	|	МеждународныйВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	МеждународныйВидыСубконто.ТолькоОбороты КАК ТолькоОбороты
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК МеждународныйВидыСубконто
	|ГДЕ
	|	МеждународныйВидыСубконто.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	МеждународныйВидыСубконто.НомерСтроки";
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	ВыбранныйСчет = МассивРезультатов[0]; // РезультатЗапроса - 
	Выборка = ВыбранныйСчет.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСчета, Выборка);
	КонецЕсли;
	
	ВидыСубконтоСчета = МассивРезультатов[1]; // РезультатЗапроса - 
	ВыборкаВидыСубконто = ВидыСубконтоСчета.Выбрать();
	ДанныеСчета.КоличествоСубконто = ВыборкаВидыСубконто.Количество();
	
	ИндексСубконто = 0;
	Пока ВыборкаВидыСубконто.Следующий() Цикл
		
		ИндексСубконто = ИндексСубконто + 1;
		
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто,                   ВыборкаВидыСубконто.ВидСубконто);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "Наименование",  ВыборкаВидыСубконто.Наименование);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТипЗначения",   ВыборкаВидыСубконто.ТипЗначения);
		ДанныеСчета.Вставить("ВидСубконто" + ИндексСубконто + "ТолькоОбороты", ВыборкаВидыСубконто.ТолькоОбороты);
		
	КонецЦикла;
	
	Возврат ДанныеСчета;
	
КонецФункции

// Возвращает типы атрибута регистра.
//
// Параметры:
//	ИмяРегистра - Строка - имя регистра.
//	ИмяАтрибута - Строка - имя атрибута.
//
// Возвращаемое значение:
//	Массив - массив типов атрибута регистра.
//
Функция ТипыАтрибутаРегистра(ИмяРегистра, ИмяАтрибута) Экспорт

	МассивТипов = Новый Массив;
	Измерение = Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти(ИмяАтрибута);
	Если Измерение <> Неопределено Тогда
		МассивТипов = Измерение.Тип.Типы();
	КонецЕсли;
	
	Реквизит = Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты.Найти(ИмяАтрибута);
	Если Реквизит <> Неопределено Тогда
		МассивТипов = Реквизит.Тип.Типы();
	КонецЕсли;
	
	Возврат МассивТипов;
	
КонецФункции

// Возвращает статус на основе приоритетов статусов.
// 
// Параметры:
//	ТекущийСтатус - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - текущий статус.
//	НовыйСтатус - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - текущий статус.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - устанавливаемый статус.
//
Функция ОпределитьСтатус(ТекущийСтатус, НовыйСтатус) Экспорт

	ПриоритетТекущегоСтатуса = ПриоритетСтатуса(ТекущийСтатус);
	ПриоритетНовогоСтатуса = ПриоритетСтатуса(НовыйСтатус);
	Возврат ?(ПриоритетТекущегоСтатуса = Неопределено ИЛИ ПриоритетНовогоСтатуса < ПриоритетТекущегоСтатуса, НовыйСтатус, ТекущийСтатус);

КонецФункции

// Возвращает максимальное количество субконто международного плана счетов
//
// Возвращаемое значение:
// 	Число - 
Функция МаксКоличествоСубконто() Экспорт
	Возврат Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
КонецФункции

//-- НЕ УТКА
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//++ НЕ УТКА

Функция ОборотныеСубконто() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОборотныеВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ втОборотныеВидыСубконто
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК ОборотныеВидыСубконто
	|ГДЕ
	|	ОборотныеВидыСубконто.ТолькоОбороты
	|	И НЕ ИСТИНА В
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ИСТИНА
	|	ИЗ
	|		ПланСчетов.Международный.ВидыСубконто КАК ВсеВидыСубконто
	|	ГДЕ
	|		ВсеВидыСубконто.ВидСубконто = ОборотныеВидыСубконто.ВидСубконто
	|		И НЕ ВсеВидыСубконто.ТолькоОбороты
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ОборотныеВидыСубконто.ВидСубконто
	|;
	|
	|ВЫБРАТЬ
	|	ОборотныеВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ОборотныеВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	втОборотныеВидыСубконто КАК ОборотныеВидыСубконто
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результаты = Запрос.ВыполнитьПакет();

	Возврат Результаты[1].Выгрузить();

КонецФункции

Функция ИспользуемаяНастройкаФормированияПроводок(Период, ПланСчетов, Организация) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПланыСчетовОрганизацийСрезПоследних.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&Период,
	|		ПланСчетов = &ПланСчетов
	|		И Организация = &Организация
	|	) КАК ПланыСчетовОрганизацийСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НастройкаФормированияПроводок;
	КонецЕсли;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СвойстваИсточникаУточненияСчета()

	// Расшифровка свойств источника:
	// ИмяПоля - имя атрибута регистра накопления, из которого планируется получать источник уточнения счета.
	
	Возврат "ИмяПоля";

КонецФункции

Функция СвойстваПоказателей()

	СвойстваПоказателей = Новый Структура("СвойстваПоказателей, СвойстваРесурсов");
	
	// Расшифровка свойств показателей:
	// Ресурсы - массив ресурсов регистра, связанных с показателем.
	СвойстваПоказателей.СвойстваПоказателей = "Ресурсы";
	
	// Расшифровка свойств ресурсов:
	// Имя - имя ресурса регистра.
	// ИсточникВалюты - источник валюты для ресурса регистра.
	СвойстваПоказателей.СвойстваРесурсов = "Имя, ИсточникВалюты";
	
	Возврат СвойстваПоказателей;

КонецФункции

Функция СвойстваПоказателейВВалюте()

	// Расшифровка свойств показателей:
	// ИсточникВалюты - источник валюты для показателя регистра.
	
	Возврат "ИсточникВалюты";

КонецФункции

//++ НЕ УТКА

Функция ПриоритетСтатуса(Статус)

	Возврат ПриоритетыСтатусов().Получить(Статус);

КонецФункции

Функция ПриоритетыСтатусов()

	ПриоритетыСтатусов = Новый Соответствие;
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров, 0);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете, 1);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную, 2);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете, 3);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете, 4);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную, 5);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете, 6);
	
	Возврат ПриоритетыСтатусов;

КонецФункции
//-- НЕ УТКА
#КонецОбласти
