////////////////////////////////////////////////////////////////////////////////
// ФизическиеЛицаЗарплатаКадры: методы, дополняющие функциональность справочника
// 		ФизическиеЛица.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет данные для электронного тестирования кандидата.
// 
// Параметры:
//  ДанныеДляЗаполнения - Структура: см. ЭлектронноеТестированиеКандидатов.НовыйДанныеДляФормыЭлектронногоТестированияКандидата
//  Учащийся - СправочникСсылка.ФизическиеЛица
Процедура ЗаполнитьДанныеДляЭлектронногоТестированияКандидата(ДанныеДляЗаполнения, Учащийся) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
	Иначе
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, Учащийся, "Имя, Отчество");
	Отбор = Новый Структура("ФизическоеЛицо", Учащийся);
	НайденныеСтроки = КадровыеДанные.НайтиСтроки(Отбор);
	ДанныеДляЗаполнения.ИмяОтчество = СтрШаблон("%1 %2", НайденныеСтроки[0].Имя, НайденныеСтроки[0].Отчество);
	ТаблицаКандидатов = МодульПодборПерсонала.КандидатыФизическихЛиц(Учащийся);
	
	Если ТаблицаКандидатов.Количество() > 0 Тогда
		ДанныеДляЗаполнения.Кандидат = ТаблицаКандидатов[0].Кандидат;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбъединениеДублей

// См. Справочники.ФизическиеЛица.ДеревоДублей
Функция ДеревоДублей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчетРасширенный.СоздатьВТЗадублированныеФизическиеЛица(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадублированныеФизическиеЛица.ОбластьПоиска КАК ОбластьПоиска,
		|	ЗадублированныеФизическиеЛица.Значение КАК Значение,
		|	ЗадублированныеФизическиеЛица.ФизическоеЛицо КАК Дубль,
		|	ЗадублированныеФизическиеЛица.ИНН КАК ИНН,
		|	ЗадублированныеФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ЗадублированныеФизическиеЛица.ДокументВид КАК ДокументВид,
		|	ЗадублированныеФизическиеЛица.ДокументНомер КАК ДокументНомер,
		|	ЗадублированныеФизическиеЛица.ДокументСерия КАК ДокументСерия
		|ИЗ
		|	ВТЗадублированныеФизическиеЛица КАК ЗадублированныеФизическиеЛица
		|ИТОГИ
		|	МАКСИМУМ(ИНН),
		|	МАКСИМУМ(СтраховойНомерПФР),
		|	МАКСИМУМ(ДокументВид),
		|	МАКСИМУМ(ДокументНомер),
		|	МАКСИМУМ(ДокументСерия)
		|ПО
		|	ОбластьПоиска,
		|	Значение";
		
	ДеревоДублей = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоДублей;
	
КонецФункции

// См. Обработки.ОбъединениеДублейПерсональныхДанных.ДополнитьКолонкиТаблицыПоискаДублей
Процедура ДополнитьКолонкиТаблицыПоискаДублей(ОписанияКолонок) Экспорт
	
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ДокументВид",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"), , Ложь));
		
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ДокументНомер",
		ОбщегоНазначения.ОписаниеТипаСтрока(14), , Ложь));
		
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ДокументСерия",
		ОбщегоНазначения.ОписаниеТипаСтрока(14), , Ложь));
		
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ДокументПредставление",
		ОбщегоНазначения.ОписаниеТипаСтрока(0), НСтр("ru = 'Документ, удостоверяющий личность';
													|en = 'Identity document'")));
		
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("ИНН",
		ОбщегоНазначения.ОписаниеТипаСтрока(12), НСтр("ru = 'ИНН';
														|en = 'TIN'")));
		
	ОписанияКолонок.Добавить(Обработки.ОбъединениеДублейПерсональныхДанных.ОписаниеКолонки("СтраховойНомерПФР",
		ОбщегоНазначения.ОписаниеТипаСтрока(14), НСтр("ru = 'СНИЛС';
														|en = 'SNILS'")));
		
КонецПроцедуры

// См. Обработки.ОбъединениеДублейПерсональныхДанных.ДанныеДублей
Функция ДанныеДублей(Дубли) Экспорт
	
	ОбщегоНазначенияБЗККлиентСервер.УдалитьВсеВхожденияКромеТипаИзМассива(Дубли,
		Тип("СправочникСсылка.ФизическиеЛица"));
		
	ДанныеДублей = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, Дубли,
		"ИНН,СтраховойНомерПФР,ДокументВид,ДокументСерия,ДокументНомер,ДокументПредставление");
	ДанныеДублей.Колонки.Добавить("Дубль", Метаданные.ОпределяемыеТипы.СубъектПерсональныхДанных.Тип);
	
	Для Каждого СтрокаТаблицы Из ДанныеДублей Цикл
		СтрокаТаблицы.Дубль = СтрокаТаблицы.ФизическоеЛицо;
	КонецЦикла;
		
	Возврат ДанныеДублей;
	
КонецФункции

// Параметры:
//  Дубли - Массив из СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//	См. Обработки.ОбъединениеДублейПерсональныхДанных.НовыеПараметрыПолученияДанныхНайденныхДублей
Функция ПараметрыПолученияДанныхДублей(Дубли) Экспорт
	
	Параметры = Обработки.ОбъединениеДублейПерсональныхДанных.НовыеПараметрыПолученияДанныхНайденныхДублей();
	Параметры.МетаданныеОбъекта = Метаданные.Справочники.ФизическиеЛица;
	Параметры.ИмяКолонкиОбъекта = "ФизическоеЛицо";
	Параметры.Дубли = Дубли;
	Параметры.ОсновныеДанные = ОсновныеДанныеДублейФизическихЛиц(Дубли);
	Параметры.ОписанияТабличныхЧастей = ОписанияСравниваемыхТабличныхЧастей();
	Параметры.ОписанияПодчиненныхСправочников = ОписанияСравниваемыхСправочников();
	Параметры.ОписанияРегистровСведений = ОписанияСравниваемыхРегистровСведений();
		
	Возврат Параметры;
	
КонецФункции

// См. Справочники.ФизическиеЛица.ПриОбъединенииДублей
Процедура ПриОбъединенииДублей(ОставляемыйДубль, ДанныеДляОбъединения, ДополнительныеПараметры) Экспорт
	
	РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.ПриОбъединенииДублей(ОставляемыйДубль);
	ОбработатьРегистрыСведенийПриОбъединенииДублей(ОставляемыйДубль, ДанныеДляОбъединения);
	ОбработатьСотрудниковПриОбъединенииДублей(ОставляемыйДубль);
	
	ВладелецОставляемыхФИО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры,
		"ВладелецОставляемыхФИО");
	Если ЗначениеЗаполнено(ВладелецОставляемыхФИО) Тогда
		РегистрыСведений.ФИОФизическихЛиц.ПриОбъединенииДублей(ОставляемыйДубль, ВладелецОставляемыхФИО);
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.ФизическиеЛица.ДополнитьМетаданныеИсключаемыеПриЗаменеСсылокНаДубли
Процедура ДополнитьМетаданныеИсключаемыеПриЗаменеСсылокНаДубли(ИсключаемыеМетаданные) Экспорт
	
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.ФИОФизическихЛиц.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(
		Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.НакопленныеСтажиФизическихЛиц.ПолноеИмя());
	ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений.ФотографииФизическихЛиц.ПолноеИмя());
	
	ОписанияРегистров = ОписанияСравниваемыхРегистровСведений();
	Для каждого ОписаниеРегистра Из ОписанияРегистров Цикл
		ИсключаемыеМетаданные.Добавить(Метаданные.РегистрыСведений[ОписаниеРегистра.ИмяРегистра].ПолноеИмя());
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьМетаданныеИсключаемыеПриЗаменеСсылокНаДубли(ИсключаемыеМетаданные);
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.ФизическиеЛица.ПередЗаписьюОставляемогоДубля
Процедура ПередЗаписьюОставляемогоДубля(ДубльОбъект) Экспорт
	
	// Если изменилось ФИО, то нужно актуализировать части имени и наименование.
	
	ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДубльОбъект.ФИО);
	ЗаполнитьЗначенияСвойств(ДубльОбъект, ЧастиИмени, "Фамилия,Имя,Отчество");
	
	НовоеНаименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(ДубльОбъект.Фамилия, ДубльОбъект.Имя,
		ДубльОбъект.Отчество, ДубльОбъект.УточнениеНаименования);
	ДубльОбъект.Наименование = НовоеНаименование;
	
КонецПроцедуры

// См. Справочники.ФизическиеЛица.ПослеОбъединенияДублей
Процедура ПослеОбъединенияДублей(ОставляемыйДубль, УдаляемыеДубли, ДополнительныеПараметры) Экспорт
	
	ОбработатьФотографииПослеОбъединенияДублей(ОставляемыйДубль, УдаляемыеДубли);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПослеОбъединенияДублейФизическихЛиц(ОставляемыйДубль, УдаляемыеДубли, ДополнительныеПараметры)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыРасширенныйПереопределяемый.ОбработкаПолученияФормыСправочникаФизическиеЛица(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если Параметры.Свойство("Отбор") Тогда
			
			Если Параметры.Отбор.Свойство("Роль")
				И (Параметры.Отбор.Свойство("Организация")
					Или Параметры.Отбор.Свойство("ГоловнаяОрганизация")) Тогда
				
				Если Параметры.Отбор.Свойство("Организация") И ТипЗнч(Параметры.Отбор.Организация) = Тип("СправочникСсылка.Организации")
					Или Параметры.Отбор.Свойство("ГоловнаяОрганизация") И ТипЗнч(Параметры.Отбор.ГоловнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
					
					СтандартнаяОбработка = Ложь;
					ВыбраннаяФорма = "ФормаВыбораПоРоли";
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФизическиеЛицаЗарплатаКадрыБазовый.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПредставлениеРолиВоМножественномЧисле(Роль) Экспорт
	Если Роль = Перечисления.РолиФизическихЛиц.Акционер Тогда
		Возврат НСтр("ru = 'Акционеры';
					|en = 'Stockholders'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.Сотрудник Тогда
		Возврат НСтр("ru = 'Сотрудники';
					|en = 'Employees'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.БывшийСотрудник Тогда
		Возврат НСтр("ru = 'Бывшие сотрудники';
					|en = 'Former employees'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.ПрочийПолучательДоходов Тогда
		Возврат НСтр("ru = 'Прочие получатели доходов';
					|en = 'Other income recipients'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.РаздатчикЗарплаты Тогда
		Возврат НСтр("ru = 'Раздатчики зарплаты';
					|en = 'Salary distributors'");
	Иначе
		Возврат "" + Роль;
	КонецЕсли;
		
КонецФункции

Функция ПредставлениеРолиВРодительномПадеже(Роль) Экспорт
	Если Роль = Перечисления.РолиФизическихЛиц.Акционер Тогда
		Возврат НСтр("ru = 'акционера';
					|en = 'stockholder'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.Сотрудник Тогда
		Возврат НСтр("ru = 'сотрудника';
					|en = 'employee'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.БывшийСотрудник Тогда
		Возврат НСтр("ru = 'бывшего сотрудника';
					|en = 'former employee'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.ПрочийПолучательДоходов Тогда
		Возврат НСтр("ru = 'прочего получателя доходов';
					|en = 'other income recipient'");
	ИначеЕсли Роль = Перечисления.РолиФизическихЛиц.РаздатчикЗарплаты Тогда
		Возврат НСтр("ru = 'раздатчика зарплаты';
					|en = 'salary distributor'");
	Иначе
		Возврат "" + Роль;
	КонецЕсли;
		
КонецФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Организация;
	Перем Подразделение;
	Перем РольФизическогоЛица;
	
	Параметры.Отбор.Свойство("Организация", Организация);
	Параметры.Отбор.Свойство("Подразделение", Подразделение);
	Параметры.Отбор.Свойство("Роль", РольФизическогоЛица);
	
	Если Не Параметры.Свойство("ВыборГруппИЭлементов")
		Или Не ЗначениеЗаполнено(Параметры.ВыборГруппИЭлементов) Тогда
		
		ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		
	Иначе
		ВыборГруппИЭлементов = Параметры.ВыборГруппИЭлементов;
	КонецЕсли;
	
	Если Параметры.Свойство("СтрокаПоиска") 
		И НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		Если КадровыйУчет.НастройкиКадровогоУчета().ВПоляхВводаСотрудниковУчитыватьИзмененияФамилии Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ФизическиеЛицаЗарплатаКадры.СоздатьВТПрежниеФИО(Запрос.МенеджерВременныхТаблиц, Ложь, Параметры.СтрокаПоиска);
			УстановитьПривилегированныйРежим(Ложь);
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПрежниеФИО.ФИО + ВЫБОР
				|		КОГДА ФизическиеЛица.УточнениеНаименования = """"
				|			ТОГДА """"
				|		ИНАЧЕ "" "" + ФизическиеЛица.УточнениеНаименования
				|	КОНЕЦ КАК ФИО,
				|	ФизическиеЛица.Наименование КАК ФИОТекущее,
				|	ПрежниеФИО.ФизическоеЛицо КАК ФизическоеЛицо,
				|	МАКСИМУМ(ПрежниеФИО.Период) КАК Период,
				|	ФизическиеЛица.Код КАК Код,
				|	ФизическиеЛица.Фамилия КАК Фамилия,
				|	ФизическиеЛица.Имя КАК Имя,
				|	ФизическиеЛица.Отчество КАК Отчество,
				|	ФизическиеЛица.Инициалы КАК Инициалы,
				|	ЛОЖЬ КАК ЭтоГруппа
				|ПОМЕСТИТЬ ВТВсеСовпадения
				|ИЗ
				|	ВТПрежниеФИО КАК ПрежниеФИО
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
				|		ПО ПрежниеФИО.ФизическоеЛицо = ФизическиеЛица.Ссылка
				|			И (НЕ ФизическиеЛица.ЭтоГруппа)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПрежниеФИО.ФИО,
				|	ПрежниеФИО.ФизическоеЛицо,
				|	ФизическиеЛица.Наименование,
				|	ФизическиеЛица.Код,
				|	ФизическиеЛица.Фамилия,
				|	ФизическиеЛица.Имя,
				|	ФизическиеЛица.Отчество,
				|	ФизическиеЛица.Инициалы,
				|	ФизическиеЛица.УточнениеНаименования
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ФизическиеЛица.Наименование,
				|	ФизическиеЛица.Наименование,
				|	ФизическиеЛица.Ссылка,
				|	NULL,
				|	ФизическиеЛица.Код,
				|	ФизическиеЛица.Фамилия,
				|	ФизическиеЛица.Имя,
				|	ФизическиеЛица.Отчество,
				|	ФизическиеЛица.Инициалы,
				|	ФизическиеЛица.ЭтоГруппа
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрежниеФИО КАК ПрежниеФИО
				|		ПО ФизическиеЛица.Ссылка = ПрежниеФИО.ФизическоеЛицо
				|ГДЕ
				|	ПрежниеФИО.ФизическоеЛицо ЕСТЬ NULL
				|	И ФизическиеЛица.Наименование ПОДОБНО &СтрокаПоиска
				|	И НЕ ФизическиеЛица.ЭтоГруппа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВсеСовпадения.ФИО КАК ФИО,
				|	ВсеСовпадения.ФИОТекущее КАК ФИОТекущее,
				|	ВсеСовпадения.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ВсеСовпадения.Период КАК Период,
				|	ВсеСовпадения.Код КАК Код,
				|	ВсеСовпадения.Фамилия КАК Фамилия,
				|	ВсеСовпадения.Имя КАК Имя,
				|	ВсеСовпадения.Отчество КАК Отчество,
				|	ВсеСовпадения.Инициалы КАК Инициалы,
				|	ВсеСовпадения.ЭтоГруппа КАК ЭтоГруппа
				|ИЗ
				|	ВТВсеСовпадения КАК ВсеСовпадения
				|
				|УПОРЯДОЧИТЬ ПО
				|	ФИО";
			
		Иначе
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ФизическиеЛица.Наименование КАК ФИО,
				|	ФизическиеЛица.Наименование КАК ФИОТекущее,
				|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
				|	NULL КАК Период,
				|	ФизическиеЛица.Код КАК Код,
				|	ФизическиеЛица.Фамилия КАК Фамилия,
				|	ФизическиеЛица.Имя КАК Имя,
				|	ФизическиеЛица.Отчество КАК Отчество,
				|	ФизическиеЛица.Инициалы КАК Инициалы,
				|	ФизическиеЛица.ЭтоГруппа КАК ЭтоГруппа
				|ИЗ
				|	Справочник.ФизическиеЛица КАК ФизическиеЛица
				|ГДЕ
				|	ФизическиеЛица.Наименование ПОДОБНО &СтрокаПоиска
				|	И НЕ ФизическиеЛица.ЭтоГруппа
				|
				|УПОРЯДОЧИТЬ ПО
				|	ФИО";
			
		КонецЕсли;
		
		Если ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Элементы Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ФизическиеЛица.ЭтоГруппа", "");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			СтандартнаяОбработка = Ложь;
			ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.ФИО, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.ФИО, ДлинаСтрокиПоиска + 1));
					
				Если Не Выборка.ЭтоГруппа И ЗначениеЗаполнено(Выборка.Период) Тогда
					
					Если ЗначениеЗаполнено(Выборка.Фамилия) Тогда
						ФИОТекущее = Новый Структура("Фамилия,Имя,Отчество,Инициалы");
						ЗаполнитьЗначенияСвойств(ФИОТекущее, Выборка);
					Иначе
						ФИОТекущее = Выборка.ФИОТекущее;
					КонецЕсли;
					
					Представление = Новый ФорматированнаяСтрока(
						Представление,
						" (" + ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ФИОТекущее) + " " 
							+ НСтр("ru = 'с';
									|en = 'from'") + " " + Формат(Выборка.Период, "ДЛФ=D") + " (" + Выборка.Код + "))");
							
				Иначе
					
					Представление = Новый ФорматированнаяСтрока(
						Представление,
						" (" + Выборка.Код + ")");
					
				КонецЕсли;
				
				ДанныеВыбора.Добавить(Выборка.ФизическоеЛицо, Представление);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РольФизическогоЛица = Неопределено
		И Организация = Неопределено
		И Подразделение = Неопределено Тогда
		
		ФизическиеЛицаЗарплатаКадрыБазовый.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
		
	ИначеЕсли РольФизическогоЛица = Неопределено
		И (Организация <> Неопределено Или Подразделение <> Неопределено) Тогда
		
		Запрос = Новый Запрос;
		
		ДатаНачалаОтбора = Неопределено;
		ДатаОкончанияОтбора = Неопределено;
		
		Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") Тогда
			
			Если ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
				
				ДатаНачалаОтбора = НачалоДня(Параметры.Отбор.ДатаПримененияОтбора);
				ДатаОкончанияОтбора = КонецДня(Параметры.Отбор.ДатаПримененияОтбора);
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("ДатаПримененияОтбора");
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаОтбора) И Параметры.Отбор.Свойство("МесяцПримененияОтбора") Тогда
			
			Если ЗначениеЗаполнено(Параметры.Отбор.МесяцПримененияОтбора) Тогда
				
				ДатаНачалаОтбора = НачалоМесяца(Параметры.Отбор.МесяцПримененияОтбора);
				ДатаОкончанияОтбора = КонецМесяца(Параметры.Отбор.МесяцПримененияОтбора);
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("МесяцПримененияОтбора");
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МаксимальнаяДатаНачалоДня", НачалоДня(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()));
		
		ЗапросТекст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|			ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
			|			ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ДанныеДляПодбораСотрудников.Сотрудник
			|				И (ДанныеДляПодбораСотрудников.Начало В
			|					(ВЫБРАТЬ
			|						МАКСИМУМ(Т.Начало)
			|					ИЗ
			|						РегистрСведений.ДанныеДляПодбораСотрудников КАК Т
			|					ГДЕ
			|						ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
			|						И ВЫБОР
			|							КОГДА ОсновныеСотрудникиФизическихЛиц.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА Т.Начало
			|							ИНАЧЕ ОсновныеСотрудникиФизическихЛиц.ДатаНачала
			|						КОНЕЦ МЕЖДУ НАЧАЛОПЕРИОДА(Т.Начало, День) И КОНЕЦПЕРИОДА(ВЫБОР
			|							КОГДА Т.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ОсновныеСотрудникиФизическихЛиц.ДатаОкончания
			|							ИНАЧЕ Т.Окончание
			|						КОНЕЦ, ДЕНЬ)))
			|		ПО ФизическиеЛица.Ссылка = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	НЕ ФизическиеЛица.ЭтоГруппа
			|	И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания = &МаксимальнаяДатаНачалоДня
			|	И ДанныеДляПодбораСотрудников.Филиал = &Организация
			|	И ДанныеДляПодбораСотрудников.Подразделение = &Подразделение
			|	И &ДополнительноеУсловие";
		
		ОрганизацияСписком = ТипЗнч(Организация) = Тип("Массив") ИЛИ ТипЗнч(Организация) = Тип("СписокЗначений");
		Если Организация = НеОпределено ИЛИ ОрганизацияСписком И Организация.Количество() = 0 Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ДанныеДляПодбораСотрудников.Филиал = &Организация
				|	И ", "");
			
		ИначеЕсли ОрганизацияСписком Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ДанныеДляПодбораСотрудников.Филиал = &Организация
				|	И ", "ДанныеДляПодбораСотрудников.Филиал В (&Организация)
				|	И ");
			
		КонецЕсли;
		
		ПодразделениеСписком = ТипЗнч(Подразделение) = Тип("Массив") ИЛИ ТипЗнч(Подразделение) = Тип("СписокЗначений");
		Если Подразделение = НеОпределено ИЛИ ПодразделениеСписком И Подразделение.Количество() = 0 Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ДанныеДляПодбораСотрудников.Подразделение = &Подразделение
				|	И ", "");
			
		ИначеЕсли ПодразделениеСписком Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ДанныеДляПодбораСотрудников.Подразделение = &Подразделение
				|	И ", "ДанныеДляПодбораСотрудников.Подразделение В (&Подразделение)
				|	И ");
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачалаОтбора) Тогда
			
			ЗапросТекст = ЗапросТекст + Символы.ПС + "
				|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ДатаОкончанияОтбора
				|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &ДатаНачалаОтбора
				|		ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))";
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ВАрхиве") Тогда
			ЗапросТекст = ЗапросТекст + Символы.ПС + "	И ТекущиеКадровыеДанныеСотрудников.Сотрудник.ВАрхиве = " + ?(Параметры.Отбор.ВАрхиве = Истина, "ИСТИНА", "ЛОЖЬ");
		КонецЕсли; 
		
		Запрос.Текст = ЗапросТекст;
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Если ЗначениеЗаполнено(ДатаНачалаОтбора) Тогда
			
			Запрос.УстановитьПараметр("ДатаНачалаОтбора", ДатаНачалаОтбора);
			Запрос.УстановитьПараметр("ДатаОкончанияОтбора", ДатаОкончанияОтбора);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
			ИспользоватьДанныеВыбора = Истина;
		Иначе
			ИспользоватьДанныеВыбора = Ложь;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.ФизическиеЛица, Параметры, Запрос, "ФизическиеЛица", ИспользоватьДанныеВыбора);
		
	Иначе
		
		ЗапросТекст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
			|		ПО ФизическиеЛица.Ссылка = РолиФизическихЛиц.ФизическоеЛицо
			|ГДЕ
			|	НЕ ФизическиеЛица.ЭтоГруппа
			|	И РолиФизическихЛиц.Организация = &Организация
			|	И РолиФизическихЛиц.Роль = &РольФизическогоЛица
			|	И &ДополнительноеУсловие";
		
		ОрганизацияСписком = ТипЗнч(Организация) = Тип("Массив")
			Или ТипЗнч(Организация) = Тип("ФиксированныйМассив")
			Или ТипЗнч(Организация) = Тип("СписокЗначений");
		
		Если Организация = НеОпределено ИЛИ ОрганизацияСписком И Организация.Количество() = 0 Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "РолиФизическихЛиц.Организация = &Организация
				|	И ", "");
			
		ИначеЕсли ОрганизацияСписком Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "РолиФизическихЛиц.Организация = &Организация
				|	И ", "РолиФизическихЛиц.Организация В (&Организация)
				|	И ");
			
		КонецЕсли;
		
		РолиСписком = ТипЗнч(РольФизическогоЛица) = Тип("Массив")
			Или ТипЗнч(РольФизическогоЛица) = Тип("ФиксированныйМассив")
			Или ТипЗнч(РольФизическогоЛица) = Тип("СписокЗначений");
		
		Если РолиСписком И РольФизическогоЛица.Количество() = 0 Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "РолиФизическихЛиц.Роль = &РольФизическогоЛица
				|	И ", "");
			
		ИначеЕсли РолиСписком Тогда
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "РолиФизическихЛиц.Роль = &РольФизическогоЛица
				|	И ", "РолиФизическихЛиц.Роль В (&РольФизическогоЛица)
				|	И ");
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросТекст;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("РольФизическогоЛица", РольФизическогоЛица);
		
		Если ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
			ИспользоватьДанныеВыбора = Истина;
		Иначе
			ИспользоватьДанныеВыбора = Ложь;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.ФизическиеЛица, Параметры, Запрос, "ФизическиеЛица", ИспользоватьДанныеВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаВыбораСотрудниковПриСозданииНаСервере(Форма, Параметры) Экспорт
	
	УстановитьЗапросСпискаВФормеВыбораСотрудников(Форма);
	
	Если Параметры.Отбор.Свойство("Подразделение")
		И Параметры.Свойство("УчитыватьОтборПоПодразделению")
		И Параметры.УчитыватьОтборПоПодразделению
		И Не ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
		
		Параметры.Отбор.Удалить("Подразделение");
		
	КонецЕсли;
	
	ПараметрФилиал = Неопределено;
	// Сначала обрабатываем отбор по организации (филиалу).
	Если Параметры.Отбор.Свойство("Организация")
		И ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
		
		ПараметрФилиал = Параметры.Отбор.Организация;
		
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Филиал")
		И ЗначениеЗаполнено(Параметры.Отбор.Филиал) Тогда
		
		ПараметрФилиал = Параметры.Отбор.Филиал;
		
	КонецЕсли;
	
	ТекстЗапроса = Форма.Список.ТекстЗапроса;
	
	Если ПараметрФилиал = Неопределено
		Или ПараметрФилиал = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоФилиалу", "(ИСТИНА)");
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.Список, "ОтборПоФилиалу", ПараметрФилиал, Истина);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоФилиалу", "ВЫБОР КОГДА &ОтбиратьПоФилиалу ТОГДА Т.Филиал В (&ОтборПоФилиалу) ИНАЧЕ ИСТИНА КОНЕЦ");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК Организация,",
		"ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК Организация,
		|	ДанныеДляПодбораСотрудников.ВидДоговора КАК ВидДоговора,");
	
	Форма.Список.ТекстЗапроса = ТекстЗапроса;
	Форма.Список.УстановитьОбязательноеИспользование("ВидДоговора", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список, "ОтбиратьПоФилиалу", Истина, Истина);
	
КонецПроцедуры

Процедура УстановитьЗапросСпискаВФормеВыбораСотрудников(Форма)
	
	Список = Форма.Список;
	Если ПараметрыСеанса.АльтернативныйПодборСпискаСотрудников Тогда
		
		Список.ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СправочникФизическиеЛица.Ссылка КАК Ссылка,
			|	СправочникФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
			|	СправочникФизическиеЛица.Предопределенный КАК Предопределенный,
			|	СправочникФизическиеЛица.Родитель КАК Родитель,
			|	СправочникФизическиеЛица.ЭтоГруппа КАК ЭтоГруппа,
			|	СправочникФизическиеЛица.Код КАК Код,
			|	СправочникФизическиеЛица.Наименование КАК Наименование,
			|	СправочникФизическиеЛица.ДатаРождения КАК ДатаРождения,
			|	СправочникФизическиеЛица.ИНН КАК ИНН,
			|	СправочникФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
			|	ДанныеДляПодбораСотрудников.Код КАК ТабельныйНомер,
			|	ДанныеДляПодбораСотрудников.ВАрхиве КАК ВАрхиве,
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК Организация,
			|	ДанныеДляПодбораСотрудников.Филиал КАК Филиал,
			|	ДанныеДляПодбораСотрудников.Подразделение КАК Подразделение,
			|	ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости КАК ВидЗанятости
			|ИЗ
			|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
			|		ПО ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = СправочникФизическиеЛица.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
			|			И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|			И ОсновныеСотрудникиФизическихЛиц.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
			|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ДанныеДляПодбораСотрудников.Сотрудник
			|			И (ДанныеДляПодбораСотрудников.ЭтоГоловнойСотрудник)
			|			И (ДанныеДляПодбораСотрудников.ИдентификаторЗаписи В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(ДанныеДляПодбораСотрудниковОтбор.ИдентификаторЗаписи)
			|				ИЗ
			|					РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудниковОтбор
			|				ГДЕ
			|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = ДанныеДляПодбораСотрудниковОтбор.Сотрудник
			|					И ДанныеДляПодбораСотрудников.Организация = ДанныеДляПодбораСотрудниковОтбор.Организация
			|					И ДанныеДляПодбораСотрудниковОтбор.Начало В
			|						(ВЫБРАТЬ
			|							МАКСИМУМ(Т.Начало)
			|						ИЗ
			|							РегистрСведений.ДанныеДляПодбораСотрудников КАК Т
			|						ГДЕ
			|							ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
			|							И Т.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|							И Т.ЭтоГоловнойСотрудник
			|							И ДанныеДляПодбораСотрудниковОтбор.Организация = Т.Организация
			|							И (Т.Окончание МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаОкончания, ДЕНЬ)
			|								ИЛИ ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(Т.Начало, ДЕНЬ) И КОНЕЦПЕРИОДА(Т.Окончание, ДЕНЬ))
			|							И &ОтборПоФилиалу)))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
			|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ВидыЗанятостиСотрудниковИнтервальный.Сотрудник
			|			И (ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(Т.ДатаНачала) КАК ДатаНачала
			|				ИЗ
			|					РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК Т
			|				ГДЕ
			|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
			|					И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(Т.ДатаНачала, ДЕНЬ) И Т.ДатаОкончания))
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.ДатаОкончания = &МаксимальнаяДатаНачалоДня
			|{ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация.* КАК Организация,
			|	ДанныеДляПодбораСотрудников.Организация.*,
			|	ДанныеДляПодбораСотрудников.Филиал.*}";
		
	Иначе
		
		Список.ТекстЗапроса =
			"ВЫБРАТЬ
			|	СправочникФизическиеЛица.Ссылка КАК Ссылка,
			|	СправочникФизическиеЛица.ПометкаУдаления КАК ПометкаУдаления,
			|	СправочникФизическиеЛица.Предопределенный КАК Предопределенный,
			|	СправочникФизическиеЛица.Родитель КАК Родитель,
			|	СправочникФизическиеЛица.ЭтоГруппа КАК ЭтоГруппа,
			|	СправочникФизическиеЛица.Код КАК Код,
			|	СправочникФизическиеЛица.Наименование КАК Наименование,
			|	СправочникФизическиеЛица.ДатаРождения КАК ДатаРождения,
			|	СправочникФизическиеЛица.ИНН КАК ИНН,
			|	СправочникФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
			|	ДанныеДляПодбораСотрудников.Код КАК ТабельныйНомер,
			|	ДанныеДляПодбораСотрудников.ВАрхиве КАК ВАрхиве,
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК Организация,
			|	ДанныеДляПодбораСотрудников.Филиал КАК Филиал,
			|	ДанныеДляПодбораСотрудников.Подразделение КАК Подразделение,
			|	ВидыЗанятостиСотрудниковИнтервальный.ВидЗанятости КАК ВидЗанятости
			|ИЗ
			|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК СправочникФизическиеЛица
			|		ПО ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = СправочникФизическиеЛица.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ПО ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация = ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
			|			И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
			|			И ОсновныеСотрудникиФизическихЛиц.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
			|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ДанныеДляПодбораСотрудников.Сотрудник
			|			И (ДанныеДляПодбораСотрудников.ИдентификаторЗаписи В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Т.ИдентификаторЗаписи
			|				ИЗ
			|					РегистрСведений.ДанныеДляПодбораСотрудников КАК Т
			|				ГДЕ
			|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
			|					И Т.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|					И Т.ЭтоГоловнойСотрудник
			|					И (Т.Окончание МЕЖДУ НАЧАЛОПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаНачала, ДЕНЬ) И КОНЕЦПЕРИОДА(ОсновныеСотрудникиФизическихЛиц.ДатаОкончания, ДЕНЬ)
			|						ИЛИ ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(Т.Начало, ДЕНЬ) И КОНЕЦПЕРИОДА(Т.Окончание, ДЕНЬ))
			|					И &ОтборПоФилиалу
			|				УПОРЯДОЧИТЬ ПО
			|					Т.ПоДоговоруГПХ,
			|					Т.Начало УБЫВ,
			|					Т.Организация,
			|					Т.Филиал,
			|					Т.Подразделение))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковИнтервальный
			|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = ВидыЗанятостиСотрудниковИнтервальный.Сотрудник
			|			И (ВидыЗанятостиСотрудниковИнтервальный.ДатаНачала В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Т.ДатаНачала
			|				ИЗ
			|					РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК Т
			|				ГДЕ
			|					ОсновныеСотрудникиФизическихЛиц.Сотрудник = Т.Сотрудник
			|					И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(Т.ДатаНачала, ДЕНЬ) И Т.ДатаОкончания
			|				УПОРЯДОЧИТЬ ПО
			|					Т.ДатаНачала УБЫВ))
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.ДатаОкончания = &МаксимальнаяДатаНачалоДня
			|{ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация.* КАК Организация,
			|	ДанныеДляПодбораСотрудников.Организация.*,
			|	ДанныеДляПодбораСотрудников.Филиал.*}";
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "МаксимальнаяДатаНачалоДня", НачалоДня(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата()), Истина);
	
КонецПроцедуры

Процедура ЗапомнитьРеквизитыПрежнегоСостоянияОбъекта(ФизическоеЛицо) Экспорт
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ФизическоеЛицо.Ссылка,,,Ложь);
	Свойства = УправлениеСвойствами.ЗначенияСвойств(ФизическоеЛицо.Ссылка);
	
	ДополнительныеСвойства = ФизическоеЛицо.ДополнительныеСвойства;
	
	Если Свойства.Количество() > 0 Тогда
		ДополнительныеСвойства.ПрежниеЗначения.Вставить("ДополнительныеРеквизитыИСведения", 
			ОбщегоНазначения.ФиксированныеДанные(ОбщегоНазначения.ТаблицаЗначенийВМассив(Свойства)));
	КонецЕсли;
	
	Если ТаблицаКИ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.ПрежниеЗначения.Вставить("ТаблицаКИ", 
		ОбщегоНазначения.ФиксированныеДанные(ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаКИ)));
	
	НайденнаяСтрокаМобильныйТелефон = ТаблицаКИ.Найти(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица"), "Вид");
	Если НайденнаяСтрокаМобильныйТелефон <> Неопределено Тогда
		ДополнительныеСвойства.ПрежниеЗначения.Вставить("МобильныйТелефон", НайденнаяСтрокаМобильныйТелефон.Представление);
	КонецЕсли;
	
	НайденнаяСтрокаЭлектроннаяПочта = ТаблицаКИ.Найти(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица"), "Вид");
	Если НайденнаяСтрокаЭлектроннаяПочта <> Неопределено Тогда
		ДополнительныеСвойства.ПрежниеЗначения.Вставить("ЭлектроннаяПочта", НайденнаяСтрокаЭлектроннаяПочта.Представление);
	КонецЕсли;
	
КонецПроцедуры

// См. ФизическиеЛицаЗарплатаКадрыБазовый.ЗаписатьСвязанныеОбъекты
Процедура ЗаписатьСвязанныеОбъекты(ФизическоеЛицо) Экспорт
	
	ДополнительныеСвойства = ФизическоеЛицо.ДополнительныеСвойства;
	
	Если Не ДополнительныеСвойства.Свойство("СвязанныеОбъекты") Тогда
		Возврат;
	КонецЕсли;
	
	ФизическиеЛицаЗарплатаКадрыБазовый.ЗаписатьСвязанныеОбъекты(ФизическоеЛицо);
	
	СвязанныеОбъекты = ДополнительныеСвойства.СвязанныеОбъекты;
	
	Если СвязанныеОбъекты.Свойство("Образование") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
			МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
			МодульОбразованияФизическихЛиц.ЗаписатьДанныеОбОбразовании(ФизическоеЛицо, СвязанныеОбъекты.Образование);
		КонецЕсли;
	КонецЕсли;
	
	Если СвязанныеОбъекты.Свойство("ТрудоваяДеятельность") Тогда
		РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.ЗаполнитьТрудовуюДеятельностьФизическогоЛица(ФизическоеЛицо.Ссылка,
			СвязанныеОбъекты.ТрудоваяДеятельность);
	КонецЕсли;
	
	Если СвязанныеОбъекты.Свойство("ЗнаниеЯзыков") Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
			МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
			МодульОбразованияФизическихЛиц.ЗаписатьДанныеОЗнанииЯзыков(ФизическоеЛицо, СвязанныеОбъекты.ЗнаниеЯзыков);
		КонецЕсли;
	КонецЕсли;
	
	Если СвязанныеОбъекты.Свойство("СостояниеВБраке") Тогда
		Для Каждого ДанныеОСостоянииВБраке Из СвязанныеОбъекты.СостояниеВБраке Цикл
			РегистрыСведений.СостоянияВБракеФизическихЛиц.ДобавитьСостояниеВБракеФизическогоЛица(ФизическоеЛицо.Ссылка,
				ДанныеОСостоянииВБраке.СостояниеВБраке, ДанныеОСостоянииВБраке.Период);
		КонецЦикла;
	КонецЕсли;
	
	Если СвязанныеОбъекты.Свойство("УченыеСтепени") Тогда
		РегистрыСведений.УченыеСтепениФизическихЛиц.ЗаполнитьУченыеСтепениФизическогоЛица(ФизическоеЛицо.Ссылка,
			СвязанныеОбъекты.УченыеСтепени);
	КонецЕсли;
	
	Если СвязанныеОбъекты.Свойство("АдресФотографии") Тогда
		КадровыйУчетРасширенный.ЗаписатьФотографию(ФизическоеЛицо.Ссылка, СвязанныеОбъекты.АдресФотографии);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ЗаписатьСвязанныеОбъектыФизическогоЛица(ФизическоеЛицо, СвязанныеОбъекты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФизическоеЛицоПоКандидату(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ЗаполнитьФизическоеЛицоПоКандидату(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Склоняет ФИОПолные из кадровых данных и возвращает "Фамилия И. О." в указанном падеже.
//
// Параметры:
//   КадровыеДанныеСотрудника - СтрокаТаблицыЗначений, Структура - См. функции КадровыеДанные* модуля КадровыйУчет.
//       * ФизическоеЛицо
//       * Пол
//       * ФИОПолные
//   Падеж - Число - Падеж, в который необходимо поставить ФИО:
//       1 - Именительный
//       2 - Родительный
//       3 - Дательный
//       4 - Винительный
//       5 - Творительный
//       6 - Предложный.
//
// Возвращаемое значение:
//   Строка
//
Функция ПросклонятьФамилиюИнициалы(КадровыеДанныеСотрудника, Падеж) Экспорт
	ФИОВПадеже = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(
		КадровыеДанныеСотрудника.ФИОПолные,
		Падеж,
		ФИОВПадеже,
		КадровыеДанныеСотрудника.Пол,
		КадровыеДанныеСотрудника.ФизическоеЛицо);
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОВПадеже);
КонецФункции

#Область ОбъединениеДублейСлужебные

// Параметры:
//  Дубли - Массив из СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ОсновныеДанныеДублейФизическихЛиц(Дубли)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФИО,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.Пол,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.МестоРождения,
	|	ФизическиеЛица.ДатаРегистрации,
	|	ФизическиеЛица.ИмеетНаучныеТруды,
	|	ФизическиеЛица.ИмеетИзобретения,
	|	ФизическиеЛица.ЛьготаПриНачисленииПособий,
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.КонтактнаяИнформация.(
	|		Тип,
	|		Вид,
	|		Представление,
	|		ЗначенияПолей,
	|		Страна,
	|		Регион,
	|		Город,
	|		АдресЭП,
	|		ДоменноеИмяСервера,
	|		НомерТелефона,
	|		НомерТелефонаБезКодов
	|	),
	|	ФизическиеЛица.ДополнительныеРеквизиты.(
	|		Свойство,
	|		Значение,
	|		ТекстоваяСтрока
	|	)
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&Дубли)";
	
	Запрос.УстановитьПараметр("Дубли", Дубли);
	ОсновныеДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеДанные;
	
КонецФункции

// Возвращаемое значение:
//  Массив из Структура:
//   см. Обработки.ОбъединениеДублейПерсональныхДанных.НовоеОписаниеТабличнойЧасти
Функция ОписанияСравниваемыхТабличныхЧастей()
	
	ОписанияТабличныхЧастей = Новый Структура;
	
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	
	МетаданныеТабличнойЧасти = Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти.ДополнительныеРеквизиты;
	ОписанияТабличныхЧастей.Вставить(МетаданныеТабличнойЧасти.Имя,
		МодульОбработки.НовоеОписаниеТабличнойЧасти(МетаданныеТабличнойЧасти.Реквизиты.Свойство.Имя));
	
	МетаданныеТабличнойЧасти = Метаданные.Справочники.ФизическиеЛица.ТабличныеЧасти.КонтактнаяИнформация;
	ОписаниеТабличнойЧасти = МодульОбработки.НовоеОписаниеТабличнойЧасти(МетаданныеТабличнойЧасти.Реквизиты.Вид.Имя);
	ОписаниеТабличнойЧасти.ИмяРеквизитаПредставления = МетаданныеТабличнойЧасти.Реквизиты.Представление.Имя;
	ОписанияТабличныхЧастей.Вставить(МетаданныеТабличнойЧасти.Имя, ОписаниеТабличнойЧасти);
	
	Возврат ОписанияТабличныхЧастей;
	
КонецФункции

// Возвращаемое значение:
//  Массив из Структура
//  см. Обработки.ОбъединениеДублейПерсональныхДанных.НовоеОписаниеСправочника
Функция ОписанияСравниваемыхСправочников()
	
	ОписанияСправочников = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ДополнитьОписанияСправочниковПриОбъединенииДублей(ОписанияСправочников);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц") Тогда
		МодульСемейныеПоложенияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СемейныеПоложенияФизическихЛиц");
		МодульСемейныеПоложенияФизическихЛиц.ДополнитьОписанияСправочниковПриОбъединенииДублей(ОписанияСправочников);
	КонецЕсли;

	Возврат ОписанияСправочников;
	
КонецФункции

// Возвращаемое значение:
//  Массив из Структура
//   см. Обработки.ОбъединениеДублейПерсональныхДанных.НовоеОписаниеРегистра
Функция ОписанияСравниваемыхРегистровСведений()
	
	ОписанияРегистров = Новый Массив;
	МодульОбработки = ОбщегоНазначения.ОбщийМодуль("Обработки.ОбъединениеДублейПерсональныхДанных");
	
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.ГражданствоФизическихЛиц.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.ДоходыПредыдущегоМестаРаботыНДФЛ.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.НаградыФизическихЛиц.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.СведенияОбИнвалидностиФизическихЛиц.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.СтажиФизическихЛиц.Имя,
		Метаданные.РегистрыСведений.СтажиФизическихЛиц.Измерения.ВидСтажа.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц.Имя));
		
	ОписанияРегистров.Добавить(МодульОбработки.НовоеОписаниеРегистра(
		Метаданные.РегистрыСведений.УченыеСтепениФизическихЛиц.Имя));
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ДокументыФизическихЛиц = МодульОбработки.НовоеОписаниеРегистра(МетаданныеРегистра.Имя,
		МетаданныеРегистра.Измерения.ВидДокумента.Имя);
	ДокументыФизическихЛиц.ИмяРеквизита = МетаданныеРегистра.Измерения.Физлицо.Имя;
	ДокументыФизическихЛиц.ИмяРеквизитаПредставления = МетаданныеРегистра.Ресурсы.Представление.Имя;
	ОписанияРегистров.Добавить(ДокументыФизическихЛиц);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ВоинскийУчет") Тогда
		МодульВоинскийУчет = ОбщегоНазначения.ОбщийМодуль("ВоинскийУчет");
		МодульВоинскийУчет.ДополнитьОписанияРегистровСведенийПриОбъединенииДублей(ОписанияРегистров);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц") Тогда
		МодульОбразованияФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ОбразованияФизическихЛиц");
		МодульОбразованияФизическихЛиц.ДополнитьОписанияРегистровСведенийПриОбъединенииДублей(ОписанияРегистров);
	КонецЕсли;
	
	Возврат ОписанияРегистров;
	
КонецФункции

Процедура ОбработатьРегистрыСведенийПриОбъединенииДублей(ОставляемыйДубль, ДанныеДляОбъединения)
	
	ИменаИзмерений = Новый Массив;
	ИменаИзмерений.Добавить("ФизическоеЛицо");
	ИменаИзмерений.Добавить("ФизЛицо");
	Обработки.ОбъединениеДублейПерсональныхДанных.ОбработатьРегистрыСведений(ОставляемыйДубль, ИменаИзмерений,
		ДанныеДляОбъединения);
		
КонецПроцедуры

Процедура ОбработатьСотрудниковПриОбъединенииДублей(ОставляемыйДубль)
	
	// Обновим наименования сотрудников оставляемого физического лица.
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОставляемыйДубль;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Наименование,Фамилия,Имя,Отчество,УточнениеНаименования";
	
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Ложь, ПараметрыПолученияСотрудников);
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		НовоеНаименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(ДанныеСотрудника.Фамилия,
			ДанныеСотрудника.Имя, ДанныеСотрудника.Отчество, ДанныеСотрудника.УточнениеНаименования);
			
		Если ДанныеСотрудника.Наименование = НовоеНаименование Тогда
			Продолжить;
		КонецЕсли;
		
		СотрудникОбъект = ДанныеСотрудника.Сотрудник.ПолучитьОбъект();
		Попытка
			СотрудникОбъект.Заблокировать();
		Исключение
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать сотрудника %1. 
					|Возможно, он редактируется другим пользователем или в другой форме.';
					|en = 'Cannot block employee %1.
					|They might be locked by another user or in another form.'"),
				ДанныеСотрудника.Наименование);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		СотрудникОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		СотрудникОбъект.Наименование = НовоеНаименование;
		СотрудникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьФотографииПослеОбъединенияДублей(ОставляемыйДубль, УдаляемыеДубли)
	
	// Если у оставляемого дубля нет фотографии, то возьмем ее у удаляемых дублей (у первого у кого она есть)
	// и запишем оставляемому.
	
	ФизическиеЛица = ОбщегоНазначения.СкопироватьРекурсивно(УдаляемыеДубли);
	ФизическиеЛица.Добавить(ОставляемыйДубль);
	
	АдесаФотографий = КадровыйУчетРасширенный.АдресаФотографийФизическихЛиц(ФизическиеЛица);
	
	Если ЗначениеЗаполнено(АдесаФотографий.Получить(ОставляемыйДубль)) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого УдаляемыйДубль Из УдаляемыеДубли Цикл
		АдресФотографии = АдесаФотографий.Получить(УдаляемыйДубль);
		Если ЗначениеЗаполнено(АдресФотографии) Тогда
			КадровыйУчетРасширенный.ЗаписатьФотографию(ОставляемыйДубль, АдресФотографии);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
