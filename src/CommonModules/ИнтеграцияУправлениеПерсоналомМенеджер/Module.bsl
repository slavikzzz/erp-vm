
#Область СлужебныеПроцедурыИФункции

Функция НовыйМенеджерИнтеграции(Приложение, ВестиПротокол) Экспорт
	
	Возврат Обработки.МенеджерИнтеграцииУправлениеПерсоналом.НовыйМенеджер(Приложение, ВестиПротокол);
	
КонецФункции

#Область ФоновыеЗадания

Процедура ПроверитьКлючиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение 				= Параметры.Приложение;
	НастройкиПодключения 	= Параметры.НастройкиПодключения;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
	Результат = МенеджерИнтеграции.ПроверитьКлючи(НастройкиПодключения);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПолучитьАбонентаИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	Результат = Новый Структура("ИнтернетПоддержкаДоступна,Абонент,СообщениеОбОшибке", Ложь);
	
	Если Параметры.ИспользоватьКлючиАбонента Тогда
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Результат.Абонент = Новый Структура("Идентификатор,Наименование");
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерИнтеграции = НовыйМенеджерИнтеграции(Параметры.Приложение, Истина);
		
		Тикет = Неопределено;
		Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Результат.ИнтернетПоддержкаДоступна = Истина;
			Тикет = Ответ.Тикет;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Ответ = МенеджерИнтеграции.АбонентИПП(Тикет);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Иначе
				Результат.Абонент = Ответ.Абонент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗарезервироватьИмяДоменаФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;

	Результат = Новый Структура("Зарезервировано, Пояснение, СообщениеОбОшибке", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Параметры.Приложение, Истина);
	
	Если Параметры.ИспользоватьКлючиАбонента Тогда
		
		ОписаниеДомена = ОписаниеДомена(Параметры.ИмяДомена, "");
		Ответ = МенеджерИнтеграции.ЗарезервироватьИмяДомена(Неопределено, ОписаниеДомена);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Зарезервировано 	= Ответ.Зарезервировано;
			Результат.Пояснение 		= Ответ.Пояснение;
		КонецЕсли;
		
	Иначе
		Тикет = Неопределено;
		Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Тикет = Ответ.Тикет;
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОписаниеДомена = ОписаниеДомена(Параметры.ИмяДомена, Параметры.ИдентификаторВладельца);
			Ответ = МенеджерИнтеграции.ЗарезервироватьИмяДомена(Тикет, ОписаниеДомена);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Иначе
				Результат.Зарезервировано 	= Ответ.Зарезервировано;
				Результат.Пояснение 		= Ответ.Пояснение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Ответ, АдресХранилища);

КонецПроцедуры

Процедура РазвернутьПриложениеФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("Выполнено,Заказано,СсылкаДляАдминистратора,СообщениеОбОшибке", Ложь, Ложь, "");
	
	Приложение 				= Параметры.Приложение;
	ДанныеДляРазвертывания 	= Параметры.ДанныеДляРазвертывания;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
	
	Если Не Параметры.ИспользоватьКлючиАбонента Тогда
		
		Тикет = Неопределено;
		Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Тикет = Ответ.Тикет;
		КонецЕсли;
		
		// Создание Абонента
		Если Не Отказ Тогда
			Ответ = МенеджерИнтеграции.СоздатьАбонента(Тикет, ДанныеДляРазвертывания.ИдентификаторАбонентаИПП);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
				Отказ = Истина;
			Иначе
				КлючиМенеджера = Новый Структура("ИдентификаторКлиента,СекретКлиента");
				КлючиМенеджера.ИдентификаторКлиента = Ответ.Абонент.ИдентификаторКлиента;
				КлючиМенеджера.СекретКлиента 		= Ответ.Абонент.СекретКлиента;
				ИнтеграцияУправлениеПерсоналом.СохранитьКлючиМенеджера(Приложение, КлючиМенеджера);
				ИнтеграцияУправлениеПерсоналом.УдалитьТокенМенеджера(Приложение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подключение.
	ОписаниеПриложения 	= Неопределено;
	ОписаниеИС 			= Неопределено;
	ИдентификаторЗаявки = "";
	Если Не Отказ Тогда
		
		ОбъектДанныеДляРазвертывания = ОписаниеОбъектаДанныеДляРазвертывания(ДанныеДляРазвертывания, Приложение);
		Ответ = МенеджерИнтеграции.РазвернутьПриложение(ОбъектДанныеДляРазвертывания);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			ОписаниеПриложения 	= Ответ.РезультатПодключения.ОписаниеПриложения;
			ОписаниеИС 			= Ответ.РезультатПодключения.ОписаниеИС;
			Статус 				= Ответ.РезультатПодключения.Статус;
			ИдентификаторЗаявки = Ответ.РезультатПодключения.ИдентификаторЗаявки;
			Если Статус = "done" Тогда
				Результат.Выполнено = Истина;
				Результат.СсылкаДляАдминистратора = ОписаниеПриложения.Администратор.СсылкаДляАдминистратора;
			ИначеЕсли Статус = "inProgress" Тогда
				Результат.Заказано = Истина;
			Иначе
				СообщениеОбОшибке = СтрШаблон("%1 %2",НСтр("ru = 'При создании приложения получен статус:';
															|en = 'При создании приложения получен статус:'"), Статус);
				Результат.СообщениеОбОшибке = СообщениеОбОшибке;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		ЗаписатьНастройкиПриПодключенииПриложения(Приложение, ОписаниеПриложения, ОписаниеИС);
	ИначеЕсли Результат.Заказано Тогда
		НачатьПодключениеВОтложенномРежиме(Приложение, ИдентификаторЗаявки);
	Иначе
		ОчиститьДанныеИнтеграцииСПриложением(Приложение, Истина, Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверитьСостояниеПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("Выполнено,ОшибкаСозданияПриложения,СсылкаДляАдминистратора,СообщениеОбОшибке", Ложь, Ложь, "");
	
	Приложение = Параметры.Приложение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеПодключения = СостояниеПодключенияПриложения(Приложение);
	
	Ответ = ПроверитьСостояниеПодключения(Приложение, СостояниеПодключения.ИдентификаторЗаявки);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		ОписаниеПриложения 	= Ответ.РезультатПодключения.ОписаниеПриложения;
		ОписаниеИС 			= Ответ.РезультатПодключения.ОписаниеИС;
		Статус 				= Ответ.РезультатПодключения.Статус;
		Если Статус = "done" Тогда
			Результат.Выполнено = Истина;
			Результат.СсылкаДляАдминистратора = ОписаниеПриложения.Администратор.СсылкаДляАдминистратора;
		ИначеЕсли Статус <> "inProgress" Тогда
			Результат.ОшибкаСозданияПриложения = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не удалось подключить приложение.';
									|en = 'Не удалось подключить приложение.'");
			Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		ОчиститьСостояниеПодключенияПриложения(Приложение);
		ЗаписатьНастройкиПриПодключенииПриложения(Приложение, ОписаниеПриложения, ОписаниеИС);
	ИначеЕсли Результат.ОшибкаСозданияПриложения Тогда
		ОчиститьДанныеИнтеграцииСПриложением(Приложение, Истина, Ложь);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ПроверкаДоступностиАдресаПоИмениФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтеграцияУправлениеПерсоналомОбмен.ПроверитьДоступностьАдресаПоИмени(Параметры.Приложение, Истина);

КонецПроцедуры

Процедура ИнформацияОПриложенииФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("ОписаниеПриложения,Абонент,СообщениеОбОшибке");
	
	Приложение = Параметры.Приложение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторПриложения = ИдентификаторПриложения(Приложение);
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
	
	Ответ = МенеджерИнтеграции.ИнформацияОПриложении(ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
	КонецЕсли;
	
	Если Не Параметры.ИспользоватьКлючиАбонента Тогда
		Ответ = МенеджерИнтеграции.ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновитьАдминистратораПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	
	Приложение = Параметры.Приложение;
	Ответственный = Параметры.Ответственный;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = ЗарегистрироватьОпубликоватьОтветственного(Приложение, Ответственный);
	
	Если Не Отказ Тогда
		
		ОписаниеАдминистратора = ОписаниеАдминистратора(Ответственный);
		ИдентификаторПриложения = ИдентификаторПриложения(Приложение);
		
		МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
		Ответ = МенеджерИнтеграции.ОбновитьАдминистратораПриложения(ИдентификаторПриложения, ОписаниеАдминистратора);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		ИначеЕсли Ответ.АдминистраторИзменен Тогда
			Результат.НовыйОтветственный = Ответственный;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		 ЗаписатьНовогоОтветственногоЗаПриложение(Приложение, Ответственный)
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ИзменитьАбонентаИППФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	// Порядок смены абонента ИП:
	// - получение тикета ИП
	// - получение абонента ИПП
	// - создание нового абонента 
	// - смена абонента в приложении
	// - сохранение новых ключей менеджера
	
	Отказ = Ложь;
	Результат = Новый Структура("Абонент, СообщениеОбОшибке");
	
	Приложение = Параметры.Приложение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Параметры.Приложение, Истина);
	
	Тикет = Неопределено;
	Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	// Получение абонента ИПП.
	ИдентификаторАбонентаИПП = "";
	Если Не Отказ Тогда
		Ответ = МенеджерИнтеграции.АбонентИПП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			ИдентификаторАбонентаИПП = Ответ.Абонент.Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	// Создание Абонента
	КлючиМенеджера = Новый Структура("ИдентификаторКлиента,СекретКлиента");
	ИдентификаторАбонента = "";
	Если Не Отказ Тогда
		
		Тикет = Неопределено;
		Ответ = МенеджерИнтеграции.ТикетАутентификацииИПП();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Тикет = Ответ.Тикет;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Ответ = МенеджерИнтеграции.СоздатьАбонента(Тикет, ИдентификаторАбонентаИПП);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
				Отказ = Истина;
			Иначе
				КлючиМенеджера.ИдентификаторКлиента = Ответ.Абонент.ИдентификаторКлиента;
				КлючиМенеджера.СекретКлиента 		= Ответ.Абонент.СекретКлиента;
				ИдентификаторАбонента 				= Ответ.Абонент.ИдентификаторАбонента;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	// Смена абонента в приложении.
	Если Не Отказ Тогда
		ИдентификаторПриложения = ИдентификаторПриложения(Приложение);
		Ответ = МенеджерИнтеграции.СменитьАбонентаПриложения(ИдентификаторАбонента, ИдентификаторПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение новых ключей менеджера.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		ИнтеграцияУправлениеПерсоналом.СохранитьКлючиМенеджера(Приложение, КлючиМенеджера);
		ИнтеграцияУправлениеПерсоналом.УдалитьТокенМенеджера(Приложение);
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	// Обновление данных об оплате. Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = МенеджерИнтеграции.ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура УдалениеПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение = Параметры.Приложение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторИС = ИдентификаторИС(Приложение);
	
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
	МенеджерИнтеграции.УдалитьИнформационнуюСистему(ИдентификаторИС);
	
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);

КонецПроцедуры

#КонецОбласти 

#Область ОписанияОбъектов

Функция ОписаниеОбъектаДанныеДляРазвертывания(Данные, Приложение)
	
	Описание = Новый Структура("
	|Администратор,
	|Приложение,
	|ИнформационнаяСистема");
	
	Описание.Администратор = ОписаниеАдминистратора(Данные.Администратор);
	
	ОписаниеПриложения = Новый Структура;
	ОписаниеПриложения.Вставить("Наименование", Данные.ИмяПриложения);
	ОписаниеПриложения.Вставить("ИмяДомена", 	Данные.ИмяДомена);
	Описание.Приложение = ОписаниеПриложения;
	
	ОписаниеИС = Новый Структура("Наименование", НСтр("ru = '1С:Предприятие';
														|en = '1С:Предприятие'"));
	Описание.ИнформационнаяСистема = ОписаниеИС;

	Возврат Описание;

КонецФункции

Функция ОписаниеАдминистратора(ФизическоеЛицо)

	ДанныеАдминистратора = ДанныеАдминистратора(ФизическоеЛицо);
	ОписаниеАдминистратора = Новый Структура;
	ОписаниеАдминистратора.Вставить("Идентификатор", 	ДанныеАдминистратора.Идентификатор);
	ОписаниеАдминистратора.Вставить("Логин", 			ДанныеАдминистратора.Логин);
	ОписаниеАдминистратора.Вставить("МобильныйТелефон", ДанныеАдминистратора.МобильныйТелефон);
	ОписаниеАдминистратора.Вставить("ЭлектроннаяПочта", ДанныеАдминистратора.ЭлектроннаяПочта);
	
	Возврат ОписаниеАдминистратора;

КонецФункции

Функция ДанныеАдминистратора(ФизическоеЛицо)
	
	ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	КонтактнаяИнформация = ИнтеграцияУправлениеПерсоналом.КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица);
	МобильныйТелефон 	= КонтактнаяИнформация.МобильныеТелефоны[ФизическоеЛицо];
	ЭлектроннаяПочта 	= КонтактнаяИнформация.АдресаПочты[ФизическоеЛицо];
	
	КадровыеДанныеСтрока = "Фамилия,Инициалы";
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическиеЛица, КадровыеДанныеСтрока, ТекущаяДатаСеанса());
	
	СтрокаДанных = КадровыеДанные[0];
	Инициалы = СтрЗаменить(СтрокаДанных.Инициалы,".","");
	Инициалы = СтрЗаменить(Инициалы," ","");
	Логин = СтрШаблон("%1%2", СтрокаДанных.Фамилия, Инициалы);
	
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	СсылкаПубличныйИдентификатор = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(ФизическиеЛица, ТипОбъекта);
	
	ДанныеАдминистратора = Новый Структура;
	ДанныеАдминистратора.Вставить("Идентификатор", 		СсылкаПубличныйИдентификатор[ФизическоеЛицо]);
	ДанныеАдминистратора.Вставить("Логин", 				Логин);
	ДанныеАдминистратора.Вставить("МобильныйТелефон", 	МобильныйТелефон);
	ДанныеАдминистратора.Вставить("ЭлектроннаяПочта", 	ЭлектроннаяПочта);
	
	Возврат ДанныеАдминистратора;

КонецФункции

Функция ОписаниеДомена(ИмяДомена,ИдентификаторВладельца)
	
	Описание = Новый Структура("ИмяДомена,ИдентификаторВладельца,Резервировать");
	Описание.ИмяДомена 				= ИмяДомена;
	Описание.ИдентификаторВладельца = ИдентификаторВладельца;
	Описание.Резервировать 			= Истина;
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#Область ОбслуживаниеОтложенногоПодключения

Функция ПроверитьСостояниеПодключения(Приложение, ИдентификаторЗаявки)

	Результат = Новый Структура("РезультатПодключения,СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерИнтеграции = НовыйМенеджерИнтеграции(Приложение, Истина);
	Ответ = МенеджерИнтеграции.ПроверитьСостояниеПодключения(ИдентификаторЗаявки);
	
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.РезультатПодключения = Ответ.РезультатПодключения;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Обработчик продолжения обслуживания регламентного задания.
Процедура ОтложенноеПодключениеПриложения(Приложение, ПараметрыПодключения) Экспорт
	
	СостояниеПодключения = СостояниеПодключенияПриложения(Приложение); 
	Если Не ЗначениеЗаполнено(СостояниеПодключения.Состояние) Тогда
		УдалитьРегламентноеЗадание(ПараметрыПодключения);
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.ОжиданиеПодключения Тогда
		Ответ = ПроверитьСостояниеПодключения(Приложение, СостояниеПодключения.ИдентификаторЗаявки);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			УдалитьРегламентноеЗадание(ПараметрыПодключения);
			ВызватьИсключение Ответ.СообщениеОбОшибке;
		Иначе
			ОписаниеПриложения 	= Ответ.РезультатПодключения.ОписаниеПриложения;
			ОписаниеИС 			= Ответ.РезультатПодключения.ОписаниеИС;
			Статус 				= Ответ.РезультатПодключения.Статус;
			Если Статус = "done" Тогда
				ЗаписатьНастройкиПриПодключенииПриложения(Приложение, ОписаниеПриложения, ОписаниеИС);
				ЗавершитьОтложенноеПодключение(Приложение, ПараметрыПодключения, Ложь, ОписаниеПриложения.Администратор.СсылкаДляАдминистратора);
			ИначеЕсли Статус <> "inProgress" Тогда
				ОчиститьДанныеИнтеграцииСПриложением(Приложение, Истина, Ложь);
				ЗавершитьОтложенноеПодключение(Приложение, ПараметрыПодключения, Истина);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СостояниеПодключения.Состояние = Перечисления.СостоянияПодключенияПриложения.Создано Тогда
		ЗавершитьОтложенноеПодключение(Приложение, ПараметрыПодключения, Ложь);
	Иначе
		ЗавершитьОтложенноеПодключение(Приложение, ПараметрыПодключения, Истина);
	КонецЕсли;
	
	КоличествоПопыток = СостояниеПодключения.КоличествоПопыток +1;
	Если КоличествоПопыток < 30 Тогда
		ЗарегистрироватьПопыткуОтложенногоПодключения(Приложение);
	Иначе
		УдалитьРегламентноеЗадание(ПараметрыПодключения);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПодключениеВОтложенномРежиме(Приложение, ИдентификаторЗаявки)
	
	Состояние = Перечисления.СостоянияПодключенияПриложения.ОжиданиеПодключения;
	УстановитьСостояниеПодключения(Приложение, Состояние, ИдентификаторЗаявки);

	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 600;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		МДРегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника;
		Наименование = НСтр("ru = 'Подключение сервиса ""1С:Кабинет сотрудника""';
							|en = 'Подключение сервиса ""1С:Кабинет сотрудника""'");
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		МДРегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеПриложения1СПерсонал;
		Наименование = НСтр("ru = 'Подключение приложения ""1С:Персонал""';
							|en = 'Подключение приложения ""1С:Персонал""'");
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура("ИдентификаторЗадания");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные",		МДРегламентноеЗадание);
	ПараметрыЗадания.Вставить("Наименование",	Наименование);
	ПараметрыЗадания.Вставить("Использование",	Истина);
	ПараметрыЗадания.Вставить("Расписание",		Расписание);
	ПараметрыЗадания.Вставить("Параметры",		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПодключения));
	Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	ПараметрыПодключения.ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	ОбновитьПараметрыРегламентногоЗадания(ПараметрыПодключения);
	
КонецПроцедуры

Процедура ОбновитьПараметрыРегламентногоЗадания(ПараметрыПодключения)
	
	Изменения = Новый Структура;
	Изменения.Вставить("Параметры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПодключения));
	РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыПодключения.ИдентификаторЗадания, Изменения);
	
КонецПроцедуры

Процедура УдалитьРегламентноеЗадание(ПараметрыПодключения)

	РегламентныеЗаданияСервер.УдалитьЗадание(ПараметрыПодключения.ИдентификаторЗадания);

КонецПроцедуры

Процедура ЗавершитьОтложенноеПодключение(Приложение, ПараметрыПодключения, ОшибкаСоздания, СсылкаДляАдминистратора = "")
	
	УдалитьРегламентноеЗадание(ПараметрыПодключения);
	Если ОшибкаСоздания Тогда
		ОчиститьДанныеИнтеграцииСПриложением(Приложение, Ложь, Ложь);
		УстановитьСостояниеПодключения(Приложение, Перечисления.СостоянияПодключенияПриложения.ОшибкаСоздания);
	Иначе
		УстановитьСостояниеПодключения(Приложение, Перечисления.СостоянияПодключенияПриложения.Создано,, СсылкаДляАдминистратора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СостоянияОтложенногоПодключения

Функция СостояниеПодключенияПриложения(Приложение) Экспорт
	
	Состояние = Новый Структура("Состояние,ИдентификаторЗаявки,СсылкаДляАдминистратора,КоличествоПопыток");
	Состояние.КоличествоПопыток = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостояниеПодключения.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	СостояниеПодключения.Состояние КАК Состояние,
	|	СостояниеПодключения.СсылкаДляАдминистратора КАК СсылкаДляАдминистратора,
	|	СостояниеПодключения.КоличествоПопыток КАК КоличествоПопыток
	|ИЗ
	|	РегистрСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом КАК СостояниеПодключения
	|ГДЕ
	|	СостояниеПодключения.Приложение = &Приложение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Состояние, Выборка);
	КонецЦикла;
	
	Возврат Состояние;
	
КонецФункции

Процедура ОчиститьСостояниеПодключенияПриложения(Приложение) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура УстановитьСостояниеПодключения(Приложение, Состояние, ИдентификаторЗаявки = "", СсылкаДляАдминистратора = "") Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Приложение = Приложение;
	Иначе
		ЗаписьНабора = НаборЗаписей[0];
	КонецЕсли;
	ЗаписьНабора.Состояние = Состояние;
	Если ЗначениеЗаполнено(СсылкаДляАдминистратора) Тогда
		ЗаписьНабора.СсылкаДляАдминистратора = СсылкаДляАдминистратора;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторЗаявки) Тогда
		ЗаписьНабора.ИдентификаторЗаявки = ИдентификаторЗаявки;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗарегистрироватьПопыткуОтложенногоПодключения(Приложение)

	НаборЗаписей = РегистрыСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Приложение);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьНабора = НаборЗаписей[0];
	ЗаписьНабора.КоличествоПопыток = ЗаписьНабора.КоличествоПопыток + 1;
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область АдресИдентификаторМенеджера

Функция АдресМенеджера(Приложение) Экспорт
	
	АдресМенеджера = "";
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		АдресМенеджера = СокрЛП(Константы.АдресМенеджера1СПерсонал.Получить());
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		АдресМенеджера = "https://ess-manager.1c-cabinet.ru/applications/ess-manager";
	КонецЕсли;
	
	Возврат АдресМенеджера;
	
КонецФункции

Функция ИдентификаторМенеджера(Приложение) Экспорт
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Возврат "1C-HRM";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Возврат "1C-ESS";
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область Прочие

Функция РазрешенныеСимволыИмениДомена() Экспорт
	
	СтрокаСимволы = "abcdefghijklmnopqrstuvwxyz0123456789-";
	РазрешенныеСимволы = Новый Соответствие;
	Для Позиция = 1 По СтрДлина(СтрокаСимволы) Цикл
		РазрешенныеСимволы.Вставить(Сред(СтрокаСимволы,Позиция,1), Истина);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(РазрешенныеСимволы);
	
КонецФункции

Функция ПояснениеИмяДомена() Экспорт

	Возврат НСтр("ru = 'В адресе можно использовать только латинские буквы, цифры и дефис (""-"")';
				|en = 'В адресе можно использовать только латинские буквы, цифры и дефис (""-"")'");

КонецФункции

Функция ПодобратьИмяПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяПриложения = Константы.ЗаголовокСистемы.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПустаяСтрока(ИмяПриложения) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации";
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование");
		УстановитьПривилегированныйРежим(Ложь);
		Если РезультатЗапроса.Количество() = 1 Тогда
			ИмяПриложения = РезультатЗапроса[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяПриложения;
	
КонецФункции

Функция ПодобратьОтветственногоЗаПриложение() Экспорт
	
	Ответственный = Неопределено;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "ФизическоеЛицо");
	КонецЕсли;
	
	Возврат Ответственный;
		
КонецФункции

Процедура ЗаписатьНастройкиПриПодключенииПриложения(Приложение, ОписаниеПриложения, ОписаниеИС)

	Идентификатор = ОписаниеПриложения.Администратор.ФизическоеЛицо;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор); 
	ПубличныйИдентификаторСсылка = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(Идентификаторы, ТипОбъекта);
	Ответственный = ПубличныйИдентификаторСсылка[Идентификатор];
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ЗаписатьНастройкиПриПодключенииПриложения(Ответственный, ОписаниеПриложения, ОписаниеИС);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаписатьНастройкиПриПодключенииПриложения(Ответственный, ОписаниеПриложения, ОписаниеИС);
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьДанныеИнтеграцииСПриложением(Приложение, УдалитьДанныеОтложенногоПодключения, РегистрироватьСобытиеЖР)

	УстановитьПривилегированныйРежим(Истина);
	Если УдалитьДанныеОтложенногоПодключения Тогда
		ОчиститьСостояниеПодключенияПриложения(Приложение);
	КонецЕсли;
	
	ИнтеграцияУправлениеПерсоналом.ОчиститьДанныеПриОтключенииПриложения(Приложение, РегистрироватьСобытиеЖР);

КонецПроцедуры

Функция ИдентификаторПриложения(Приложение)
	
	Идентификатор = "";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Идентификатор = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса().ИдентификаторПриложения;
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Идентификатор = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки().ИдентификаторПриложения;
	КонецЕсли;
	
	Возврат Идентификатор;

КонецФункции

Функция ИдентификаторИС(Приложение)
	
	Идентификатор = "";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Идентификатор = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса().Идентификатор;
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Идентификатор = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки().Идентификатор;
	КонецЕсли;
	
	Возврат Идентификатор;

КонецФункции

Функция ЗарегистрироватьОпубликоватьОтветственного(Приложение, Ответственный)
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Возврат ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(Ответственный);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Возврат Интеграция1СПерсонал.ЗарегистрироватьОпубликоватьОтветственного(Ответственный);;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ЗаписатьНовогоОтветственногоЗаПриложение(Приложение, Ответственный)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ЗаписатьНовогоОтветственногоЗаПриложение(Ответственный);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаписатьНовогоОтветственногоЗаПриложение(Ответственный);
	КонецЕсли;

КонецПроцедуры

Функция ДоступноПодключениеПриложения1СПерсонал() Экспорт
	
	АдресРесурса = АдресПроверкиДоступностиПодключения1СПерсонал();
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресРесурса);
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(СтруктураURI.Схема) = "HTTPS" Или ВРег(СтруктураURI.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Таймаут = 10;
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", 	ИнтеграцияУправлениеПерсоналом.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", 	"application/json");
	
	ПолныйАдресРесурса = СтрШаблон("/%1%2", СтруктураURI.ПутьНаСервере,"/api/ping");
	Запрос = Новый HTTPЗапрос(ПолныйАдресРесурса, Заголовки);
	
	Попытка
		Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", Запрос);
		Если Ответ <> Неопределено И Ответ.КодСостояния = 200 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Ложь;

КонецФункции

Функция АдресПроверкиДоступностиПодключения1СПерсонал()

	Возврат "https://hr-app-manager.1c-hrm.ru/applications/hr-app-manager";

КонецФункции

#КонецОбласти

#КонецОбласти