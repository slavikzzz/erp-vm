#Область ПрограммныйИнтерфейс

// Открывает форму настроек организации в части социального ЭДО.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация, для которой необходимо показать настройки.
//
Процедура ОткрытьНастройкиОрганизации(Организация) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	Страхователи = СЭДОФССВызовСервера.СтрахователиОрганизаций(Организация);
	Если Страхователи.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Страхователь = Страхователи[0];
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("СЭДОФССРасширенныйКлиент");
		Модуль.ОткрытьНастройкиПолученияУведомленийОбЭЛН(Страхователь);
	Иначе
		ВызватьИсключение НСтр("ru = 'В программе отсутствует возможность получения сообщений ФСС об изменении состояний ЭЛН.';
								|en = 'The application cannot receive SSF messages about ESLR status changes.'");
	КонецЕсли;
	// АПК:278-вкл
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ИменаСобытийШироковещательныхОповещений

// Возвращает имя оповещения форм, вызываемого после получения сообщений СЭДО от ФСС.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяСобытияПослеПолученияСообщенийОтФСС() Экспорт
	Возврат "ПослеПолученияСообщенийСЭДОФСС";
КонецФункции

// Возвращает имя оповещения форм, вызываемого после отправки подтверждения получения документов СЭДО ФСС.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяСобытияПослеОтправкиПодтвержденияПолучения() Экспорт
	Возврат "ПослеОтправкиПодтвержденияПолученияСообщенийСЭДОФСС";
КонецФункции

// Возвращает имя оповещения форм, вызываемого перед началом открытия формы отправки документов СЭДО в ФСС.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяСобытияПередПодготовкойДокументовКОтправке() Экспорт
	Возврат "ПередПодготовкойДокументовСЭДОКОтправкеВФСС";
КонецФункции

// Возвращает строку которую можно использовать в качестве 1го параметра метода Оповестить для обновления текущих дел.
Функция ИмяСобытияОбновитьТекущиеДела() Экспорт
	Возврат "ОбновитьТекущиеДела";
КонецФункции

// Вызывает оповещение для обновления формы текущих дел.
Процедура ОповеститьОНеобходимостиОбновитьТекущиеДела() Экспорт
	Оповестить(ИмяСобытияОбновитьТекущиеДела());
КонецПроцедуры

#КонецОбласти

#Область Обмен

// Получает сообщения ФСС.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   Организации - Неопределено, Массив из СправочникСсылка.Организации
//   Форма - Неопределено, ФормаКлиентскогоПриложения
//
Процедура ПолучитьСообщенияИзФСС(Организации = Неопределено, Форма = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Отборы = СЭДОФССКлиентСервер.ОтборыПоОрганизациямФормы(Форма);
		Страхователи = СЭДОФССВызовСервера.СтрахователиИзОтборовПоОрганизациямФормы(Отборы);
	Иначе
		Страхователи = СЭДОФССВызовСервера.СтрахователиОрганизаций(Организации);
	КонецЕсли;
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияСообщенийИзФСС", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьВходящиеСообщенияСЭДОФСС(Обработчик, Страхователи);
КонецПроцедуры

// Получает сообщения ФСС за период.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   Форма - Неопределено, ФормаКлиентскогоПриложения
//
Процедура ОткрытьФормуПолученияСообщенийЗаПериод(Форма = Неопределено) Экспорт
	ПараметрыФормы = СЭДОФССКлиентСервер.ОтборыПоОрганизациямФормы(Форма);
	НеИскатьФорму = Истина;
	ОткрытьФорму("Обработка.ОбщиеФормыСЭДОФСС.Форма.ПолучениеСообщенийЗаПериод", ПараметрыФормы, , НеИскатьФорму);
КонецПроцедуры

// Получает указанные сообщения ФСС.
//   После получения вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеПолученияСообщенийОтФСС().
//
// Параметры:
//   ИдентификаторыСообщенийСтрахователей - Соответствие - Соообщения в разрезе страхователей:
//       * Ключ - СправочникСсылка.Организации - Страхователь
//       * Значение - Массив из Строка - Идентификаторы сообщений
//
Процедура ПовторноПолучитьСообщенияИзФСС(ИдентификаторыСообщенийСтрахователей) Экспорт
	Страхователи = Новый Массив;
	Для Каждого КлючИЗначение Из ИдентификаторыСообщенийСтрахователей Цикл
		Страхователи.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Страхователи", Страхователи);
	Контекст.Вставить("ИдентификаторыСообщений", ИдентификаторыСообщенийСтрахователей);
	Контекст.Вставить("ТекущийИндекс", -1);
	Контекст.Вставить("Страхователь", Неопределено);
	Контекст.Вставить("ВГраница", Страхователи.ВГраница());
	Контекст.Вставить("Кратко", Новый Массив);
	Контекст.Вставить("Подробно", Новый Массив);
	Контекст.Вставить("ВозниклаОшибка", Ложь);
	
	ПродолжитьПовторноеПолучениеСообщенийИзФСС(Неопределено, Контекст);
КонецПроцедуры

// Отправляет подтверждения получения документов СЭДО ФСС.
//   После отправки вызывается событие с именем, возвращаемым функцией ИмяСобытияПослеОтправкиПодтвержденияПолучения().
//
// Параметры:
//   МассивСсылок - Массив из ДокументСсылка - У документов должны быть реквизиты:
//       * Страхователь - СправочникСсылка.Организации - Страхователь, получивший документ.
//       * ИдентификаторСообщения - Строка - Идентификатор входящего сообщения СЭДО.
//
Процедура ОтправитьПодтверждениеПолучения(МассивСсылок) Экспорт
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если МассивСсылок.Количество() > 1 Тогда
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(МассивСсылок);
		Список.ЗаполнитьПометки(Истина);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отмеченные", Список);
		ПараметрыФормы.Вставить("ЗначенияДляВыбора", Список);
		ПараметрыФормы.Вставить("ЗначенияДляВыбораЗаполнены", Истина);
		ПараметрыФормы.Вставить("ОграничиватьВыборУказаннымиЗначениями", Истина);
		ПараметрыФормы.Вставить("Представление", НСтр("ru = 'Отправка подтверждения получения в ФСС';
														|en = 'Sending confirmation of receipt to SSF'"));
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Обработчик = Новый ОписаниеОповещения("ОтправитьПодтверждениеПолученияЗавершениеВыбора", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	Иначе
		ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок);
	КонецЕсли;
КонецПроцедуры

// Отправляет документы в ФСС.
//
// Параметры:
//   МассивСсылок - Массив - Массив ссылок документов СЭДО, которые необходимо отправить в ФСС.
//
Процедура ОтправитьДокументы(МассивСсылок, Форма = Неопределено) Экспорт
	Количество = МассивСсылок.Количество();
	Если Количество = 0 Тогда
		Возврат;
	ИначеЕсли Количество = 1 И Форма <> Неопределено И СтрЗаканчиваетсяНа(Форма.ИмяФормы, ".ФормаДокумента") Тогда
		// При открытии из карточки документа важно открывать независимо чтобы работала гиперссылка сообщения об ошибках.
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		Владелец = Неопределено;
	ИначеЕсли Количество <= 8 Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Владелец = Форма;
	Иначе
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		Владелец = Неопределено;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("МассивСсылок", МассивСсылок);
	Оповестить(ИмяСобытияПередПодготовкойДокументовКОтправке(), МассивСсылок, Форма);
	ОткрытьФорму("Обработка.ОбщиеФормыСЭДОФСС.Форма.ОтправкаДокументов", ПараметрыФормы, Владелец, Ложь, , , , РежимОткрытияОкна);
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДелаПоСЭДО

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы.
Процедура ПослеНачалаРаботыСистемы() Экспорт
	Параметры  = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	ИмяФлажка  = СЭДОФССКлиентСервер.ИмяФлажкаПоказыватьТекущиеДелаПоСЭДО();
	Показывать = ОбщегоНазначенияБЗККлиентСервер.ЗначениеСвойства(Параметры, ИмяФлажка);
	Если Показывать <> Истина Тогда
		Возврат;
	КонецЕсли;
	Если ПользователиКлиент.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	Если ОткрытаФормаТекущиеДела() Тогда
		Возврат;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПоказатьТекущиеДелаПоСЭДО", 5, Истина);
КонецПроцедуры

// Вызывается из ЗарплатаКадрыГлобальный.ПоказатьТекущиеДелаПоСЭДО.
Процедура ПоказатьТекущиеДелаПоСЭДОГлобальный() Экспорт
	Если ОткрытаФормаТекущиеДела() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуТекущиеДелаПоСЭДО();
КонецПроцедуры

// Открывает форму списка текущих дел по СЭДО.
Процедура ОткрытьФормуТекущиеДелаПоСЭДО() Экспорт
	НеИскатьФорму = Истина;
	ОткрытьФорму("Обработка.ОбщиеФормыСЭДОФСС.Форма.ТекущиеДелаПоСЭДО", , , НеИскатьФорму);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПолучитьСообщенияИзФСС

Процедура ПослеПолученияСообщенийИзФСС(Результат, ПустойПараметр) Экспорт
	Если Результат.ОшибкиПоОрганизациям.Количество() > 0 Тогда
		ТекстыОшибок = Новый Массив;
		Для Каждого КлючИЗначение Из Результат.ОшибкиПоОрганизациям Цикл
			Текст = Строка(КлючИЗначение.Ключ) + ":" + Символы.ПС + СтрСоединить(КлючИЗначение.Значение, Символы.ПС);
			ТекстыОшибок.Добавить(Текст);
		КонецЦикла;
		ИнформированиеПользователяКлиент.ПоказатьПодробности(
			СтрСоединить(ТекстыОшибок, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС),
			НСтр("ru = 'Информация об ошибке';
				|en = 'Error details'"),
			БиблиотекаКартинок.Предупреждение32);
	КонецЕсли;
	Оповестить(ИмяСобытияПослеПолученияСообщенийОтФСС(), Результат);
	ОповеститьОНеобходимостиОбновитьТекущиеДела();
КонецПроцедуры

#КонецОбласти

#Область ПовторноПолучитьСообщенияИзФСС

Процедура ПродолжитьПовторноеПолучениеСообщенийИзФСС(Результат, Контекст) Экспорт
	
	// Обработка результатов получения пакета сообщений очередного страхователя.
	Если Контекст.Страхователь <> Неопределено Тогда
		КоличествоОшибок = 0;
		Ошибки = Новый Массив;
		Если Результат <> Неопределено Тогда
			Для Каждого РезультатПолучения Из Результат.РезультатыПолучения Цикл
				Если ЗначениеЗаполнено(РезультатПолучения.ОписаниеОшибки) Тогда
					КоличествоОшибок = КоличествоОшибок + 1;
					Ошибки.Добавить(РезультатПолучения.ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		КоличествоСообщений = Контекст.ИдентификаторыСообщений[Контекст.Страхователь].Количество();
		Если КоличествоОшибок = 0 Тогда
			Если КоличествоСообщений = 0 Тогда
				КраткиеИтоги = НСтр("ru = 'Сообщений нет';
									|en = 'No messages'");
			Иначе
				КраткиеИтоги = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';Успешно получено %1 сообщение;;Успешно получено %1 сообщения;Успешно получено %1 сообщений;';
						|en = ';Successfully received %1 message;;Successfully received %1 messages;Successfully received %1 messages;'"),
					КоличествоСообщений);
			КонецЕсли;
			Подробности = "";
		Иначе
			Контекст.ВозниклаОшибка = Истина;
			КраткиеИтоги = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 ошибка;;%1 ошибки;%1 ошибок;';
					|en = ';%1 error;;%1 errors;%1 errors;'"),
				КоличествоОшибок);
			Подробности = Символы.ПС + СтрСоединить(Ошибки, Символы.ПС);
		КонецЕсли;
		ЗаголовокСообщения = Строка(Контекст.Страхователь) + ": " + КраткиеИтоги;
		Контекст.Кратко.Добавить(ЗаголовокСообщения);
		Контекст.Подробно.Добавить(ЗаголовокСообщения + Подробности);
	КонецЕсли;
	
	// Переход к следующему сообщению.
	Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
	
	// Возврат результата если сообщение уже отправлено.
	Если Контекст.ТекущийИндекс > Контекст.ВГраница Тогда
		ИнформированиеПользователяКлиент.Предупредить(
			СтрСоединить(Контекст.Кратко, Символы.ПС),
			СтрСоединить(Контекст.Подробно, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС),
			?(Контекст.ВозниклаОшибка, НСтр("ru = 'Информация об ошибке';
											|en = 'Error details'"), НСтр("ru = 'Результаты получения сообщений';
																				|en = 'Messages receiving results'")));
		Оповестить(ИмяСобытияПослеПолученияСообщенийОтФСС(), Результат);
		ОповеститьОНеобходимостиОбновитьТекущиеДела();
		Возврат;
	КонецЕсли;
	
	// Отправка подтверждения получения сообщения.
	Контекст.Страхователь = Контекст.Страхователи[Контекст.ТекущийИндекс];
	Идентификаторы = Контекст.ИдентификаторыСообщений[Контекст.Страхователь];
	Если Идентификаторы.Количество() = 0 Тогда
		ПродолжитьПовторноеПолучениеСообщенийИзФСС(Неопределено, Контекст);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПродолжитьПовторноеПолучениеСообщенийИзФСС", ЭтотОбъект, Контекст);
		ЭлектронныйДокументооборотСФССКлиент.ПолучитьСообщенияСЭДО(Обработчик, Контекст.Страхователь, Идентификаторы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОтправитьПодтверждениеПолучения

Процедура ОтправитьПодтверждениеПолученияЗавершениеВыбора(СписокСсылок, ПустойПараметр) Экспорт
	Если ТипЗнч(СписокСсылок) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	МассивСсылок = Новый Массив;
	Для Каждого ЭлементСписка Из СписокСсылок Цикл
		Если ЭлементСписка.Пометка И МассивСсылок.Найти(ЭлементСписка.Значение) = Неопределено Тогда
			МассивСсылок.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок);
КонецПроцедуры

Процедура ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок, Обработчик = Неопределено, ОшибкиВФормеПредупреждения = Истина) Экспорт
	Контекст = СЭДОФССВызовСервера.КонтекстОтправкиПодтвержденияПолучения(МассивСсылок);
	Контекст.Вставить("МассивСсылок", МассивСсылок);
	Контекст.Вставить("ТекущийИндекс", -1);
	Контекст.Вставить("ВГраница", Контекст.Страхователи.ВГраница());
	Контекст.Вставить("ТекстыОшибок", Новый Массив);
	Контекст.Вставить("Обработчик", Обработчик);
	Контекст.Вставить("ОшибкиВФормеПредупреждения", ОшибкиВФормеПредупреждения);
	
	ПродолжитьОтправкуПодтверждениеПолучения(Неопределено, Контекст);
КонецПроцедуры

Процедура ПродолжитьОтправкуПодтверждениеПолучения(РезультатОтправки, Контекст) Экспорт
	// Чтение результатов отправки.
	Если РезультатОтправки <> Неопределено Тогда
		Если ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
			Контекст.ТекстыОшибок.Добавить(РезультатОтправки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Переход к следующему сообщению.
	Контекст.ТекущийИндекс = Контекст.ТекущийИндекс + 1;
	
	// Возврат результата если сообщение уже отправлено.
	Если Контекст.ТекущийИндекс > Контекст.ВГраница Тогда
		Успех = (Контекст.ТекстыОшибок.Количество() = 0);
		Если Не Успех Тогда
			Если Контекст.ВГраница = 0 Тогда
				Заголовок = НСтр("ru = 'Ошибки отправки подтверждения получения';
								|en = 'Errors occurred when sending receipt confirmation'");
			Иначе
				Заголовок = НСтр("ru = 'Ошибки отправки подтверждений получения';
								|en = 'Errors occurred when sending receipt confirmations'");
			КонецЕсли;
			Подробности = СтрСоединить(Контекст.ТекстыОшибок, Символы.ПС + Символы.ПС + "----------" + Символы.ПС + Символы.ПС);
			Ошибка = Новый Структура("Заголовок, Подробности", Заголовок, Подробности);
			Если Контекст.ОшибкиВФормеПредупреждения Тогда
				ПоказатьОшибкиОтправкиПодтвержденияПолучения(Ошибка);
			Иначе
				Если Контекст.ВГраница = 0 Тогда
					Текст = СтрШаблон(НСтр("ru = 'Подтверждение получения %1';
											|en = 'Receipt confirmation %1'"), Контекст.МассивСсылок[0]);
				Иначе
					Текст = СтрШаблон(НСтр("ru = 'Подтверждения получения (%1)';
											|en = 'Receipt confirmation (%1)'"), Контекст.ВГраница + 1);
				КонецЕсли;
				Если Контекст.ТекстыОшибок.Количество() = 1 Тогда
					Пояснение = НСтр("ru = 'Возникла ошибка';
									|en = 'Error occurred'");
				Иначе
					Пояснение = СтрШаблон(НСтр("ru = 'Возникли ошибки (%1)';
												|en = 'Errors occurred (%1)'"), Контекст.ТекстыОшибок.Количество());
				КонецЕсли;
				Обработчик = Новый ОписаниеОповещения("ПоказатьОшибкиОтправкиПодтвержденияПолучения", ЭтотОбъект, Ошибка);
				ПоказатьОповещениеПользователя(Текст, Обработчик, Пояснение, БиблиотекаКартинок.Предупреждение32);
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Обработчик <> Неопределено Тогда
			Результат = Новый Структура("Успех, ТекстыОшибок", Успех, Контекст.ТекстыОшибок);
			ВыполнитьОбработкуОповещения(Контекст.Обработчик, Результат);
		КонецЕсли;
		Оповестить(ИмяСобытияПослеОтправкиПодтвержденияПолучения(), Контекст);
		Возврат;
	КонецЕсли;
	
	// Отправка подтверждения получения сообщения.
	Страхователь = Контекст.Страхователи[Контекст.ТекущийИндекс];
	Обработчик = Новый ОписаниеОповещения("ПродолжитьОтправкуПодтверждениеПолучения", ЭтотОбъект, Контекст);
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьПодтверждениеОПолученииСообщенийСЭДО(
		Обработчик,
		Страхователь,
		Контекст.ИдентификаторыСообщенийСтрахователей[Страхователь]);
КонецПроцедуры

Процедура ПоказатьОшибкиОтправкиПодтвержденияПолучения(Ошибка) Экспорт
	ИнформированиеПользователяКлиент.ПоказатьПодробности(
		Ошибка.Подробности,
		Ошибка.Заголовок,
		БиблиотекаКартинок.Предупреждение32);
КонецПроцедуры

#КонецОбласти

#Область ИзвещенияФСС

Процедура ПолучитьДанныеВложенияВходящегоДокумента(ОбработчикРезультата, Ссылка, ИдентификаторФормы) Экспорт
	
	Контекст = СЭДОФССВызовСервера.КонтекстПолученияДанныхВходящегоВложения(Ссылка, ИдентификаторФормы);
	Контекст.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если Контекст.ДанныеФайла = Неопределено Тогда
		Шаблон = НСтр("ru = 'Не найден файл ""%1"". Возможно документ еще не получен из СЭДО.';
						|en = 'Не найден файл ""%1"". Возможно документ еще не получен из СЭДО.'");
		ИнформированиеПользователяКлиент.Предупредить(СтрШаблон(Шаблон, Строка(Ссылка)));
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработчикВопросаОПодтвержденииПолученияВходящегоДокумента", ЭтотОбъект, Контекст);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(1, НСтр("ru = 'Подтвердить получение';
							|en = 'Confirm receipt'"), , БиблиотекаКартинок.Успешно32);
	Кнопки.Добавить(2, НСтр("ru = 'Пропустить';
							|en = 'Ignore'"));
	Кнопки.Добавить(0, НСтр("ru = 'Отмена';
							|en = 'Cancel'"));
	
	Если Кнопки.НайтиПоЗначению(Контекст.ОтветНаВопрос) <> Неопределено Тогда
		
		Результат = Новый Структура("Значение, БольшеНеЗадаватьЭтотВопрос", Контекст.ОтветНаВопрос, Ложь);
		ВыполнитьОбработкуОповещения(Обработчик, Результат);
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В целях уменьшения бумажного документооборота рекомендуется подтвердить получение документа ""%1"".';
							|en = 'To reduce paperwork, it is recommended that you confirm receipt of the ""%1"" document.'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Строка(Ссылка));
		
		Параметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		Параметры.Заголовок                            = НСтр("ru = 'Подтверждение получения';
																|en = 'Receipt confirmation'");
		Параметры.КнопкаПоУмолчанию                    = 1;
		Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Контекст.ПравоСохранения;
		Параметры.Картинка = БиблиотекаКартинок.ПолезныйСовет32;
		
		// Процедура СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю не позволяет указывать текст флажка,
		// поэтому форма "Вопрос" открывается напрямую.
		Параметры.Вставить("ТекстФлажка",    НСтр("ru = 'Запомнить выбор';
													|en = 'Remember selection'"));
		Параметры.Вставить("Кнопки",         Кнопки);
		Параметры.Вставить("ТекстСообщения", ТекстВопроса);
		
		ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры, , , , , Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикВопросаОПодтвержденииПолученияВходящегоДокумента(Ответ, Контекст) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.Значение = 1 Тогда
		Если Ответ.БольшеНеЗадаватьЭтотВопрос Тогда
			СЭДОФССВызовСервера.СохранитьОтветНаВопросОПодтвержденииПолученияВходящегоДокумента(Ответ.Значение);
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПослеОтправкиПодтвержденияПолученияВходящегоДокумента", ЭтотОбъект, Контекст);
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Контекст.Ссылка);
		ОтправитьПодтверждениеПолученияВыбранных(МассивСсылок, Обработчик, Ложь);
	ИначеЕсли Ответ.Значение = 2 Тогда
		Если Ответ.БольшеНеЗадаватьЭтотВопрос Тогда
			СЭДОФССВызовСервера.СохранитьОтветНаВопросОПодтвержденииПолученияВходящегоДокумента(Ответ.Значение);
		КонецЕсли;
		ПослеОтправкиПодтвержденияПолученияВходящегоДокумента(Неопределено, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтправкиПодтвержденияПолученияВходящегоДокумента(Результат, Контекст) Экспорт
	ВыполнитьОбработкуОповещения(Контекст.ОбработчикРезультата, Контекст.ДанныеФайла);
КонецПроцедуры

#КонецОбласти

#Область ДанныеСообщений

Процедура ПоказатьТекстXML(Идентификатор) Экспорт
	ТекстXML = СЭДОФССВызовСервера.ТекстXML(Идентификатор);
	Если Не ЗначениеЗаполнено(ТекстXML) Тогда
		ПоказатьОповещениеПользователя(
			,
			,
			НСтр("ru = 'Сообщение не найдено или недоступно по правам';
				|en = 'The message is not found or it is unavailable due to insufficient rights'"),
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстXML);
	ТекстовыйДокумент.ИспользуемоеИмяФайла = Идентификатор + ".xml";
	ТекстовыйДокумент.Показать(ТекстовыйДокумент.ИспользуемоеИмяФайла, ТекстовыйДокумент.ИспользуемоеИмяФайла);
КонецПроцедуры

Процедура ОткрытьКарточкуРегистра(ИмяРегистра, Измерения) Экспорт
	ПараметрыЗаписи = Новый Массив(1);
	ПараметрыЗаписи[0] = Измерения;
	КлючРегистра = Новый(Тип("РегистрСведенийКлючЗаписи." + ИмяРегистра), ПараметрыЗаписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", КлючРегистра);
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("РегистрСведений." + ИмяРегистра + ".ФормаЗаписи", ПараметрыФормы, , , , , , Блокировать);
КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональность

// Открывает форму редактирования многострочного комментария.
//
// Параметры:
//  Элемент            - Строка    - Произвольный текст, который необходимо отредактировать.
//                     - ПолеФормы - Поле ввода, содержащее произвольный текст, который необходимо отредактировать.
//  ФормаИлиОбработчик - ФормаКлиентскогоПриложения - форма, в поле которой выполняется ввод комментария.
//                     - ОписаниеОповещения         - Описание оповещения формы, вызываемое после ввода комментария.
//  ПолноеИмяРеквизита - Строка - имя реквизита формы, в который будет помещен введенный пользователем комментарий.
//                                По умолчанию - "Объект.Комментарий".
//  ЗаголовокРеквизита - Строка - текст, который необходимо отобразить в заголовке формы.
//                                По умолчанию - "Комментарий".
//
// Пример:
//  ПоказатьФормуРедактированияКомментария(Элемент, ЭтотОбъект, "Объект.Комментарий");
//
Процедура ПоказатьФормуРедактированияКомментария(Элемент, ФормаИлиОбработчик, ПолноеИмяРеквизита = "Объект.Комментарий", ЗаголовокРеквизита = Неопределено) Экспорт
	
	Контекст = Новый Структура("Форма, ПолноеИмяРеквизита, Обработчик");
	Контекст.ПолноеИмяРеквизита = ПолноеИмяРеквизита;
	Если ТипЗнч(ФормаИлиОбработчик) = Тип("ОписаниеОповещения") Тогда
		Контекст.Обработчик = ФормаИлиОбработчик;
		Контекст.Форма      = ФормаИлиОбработчик.Модуль;
	Иначе
		Контекст.Форма = ФормаИлиОбработчик;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("КомментарийЗавершениеВвода", ЭтотОбъект, Контекст);
	
	Текст = ?(ТипЗнч(Элемент) = Тип("ПолеФормы"), Элемент.ТекстРедактирования, Элемент);
	
	ЗаголовокФормы = ЗаголовокРеквизита;
	Если ЗаголовокФормы = Неопределено Тогда
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") И ЗначениеЗаполнено(Элемент.Заголовок) Тогда
			ЗаголовокФормы = Элемент.Заголовок;
		Иначе
			ЗаголовокФормы = НСтр("ru = 'Комментарий';
									|en = 'Comment'");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(Обработчик, Текст, ЗаголовокФормы);
	
КонецПроцедуры

Процедура КомментарийЗавершениеВвода(Знач ВведенныйТекст, Знач Контекст) Экспорт
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		Контекст.Форма,
		Контекст.ПолноеИмяРеквизита,
		ВведенныйТекст);
	
	Контекст.Форма.Модифицированность = Истина;
	
	Если ТипЗнч(Контекст.Обработчик) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Контекст.Обработчик, ВведенныйТекст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

Функция ОткрытаФормаТекущиеДела()
	ОкнаКлиентскогоПриложения = ПолучитьОкна();
	// В режиме запуска ОбычноеПриложение возвращает Неопределено.
	Если ОкнаКлиентскогоПриложения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого ОкноКлиентскогоПриложения Из ОкнаКлиентскогоПриложения Цикл
		Для Каждого ФормаКлиентскогоПриложения Из ОкноКлиентскогоПриложения.Содержимое Цикл
			Если ФормаКлиентскогоПриложения.Открыта()
				И СтрНайти(ФормаКлиентскогоПриложения.ИмяФормы, ".ТекущиеДела.") > 0 Тогда
				Возврат Истина;
			ИначеЕсли ОкноКлиентскогоПриложения.НачальнаяСтраница
				И ФормаКлиентскогоПриложения.Открыта()
				И ФормаКлиентскогоПриложения.ИмяФормы = "ОбщаяФорма.ПустойРабочийСтол" Тогда
				Возврат Истина; // Идет обновление информационной базы.
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#КонецОбласти
