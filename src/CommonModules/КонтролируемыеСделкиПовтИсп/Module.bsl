#Область ПрограммныйИнтерфейс

// Определяет принадлежит ли страна к списку стран офшоров на основании макета на дату.
// (см. общий макет ПереченьОфшоров).
// Параметры:
//	ДатаЗапроса - Дата, Неопределено - Дата проверки действия офшорных территорий.
//	Страна - СправочникСсылка.СтраныМира.
//	УчитыватьНалоговыйПериод - Булево - в случае Истина дата проверки устанавливается на начало года.
// Возвращаемое значение:
//	Булево - Истина, если код переданной страны найден в макете "Перечень офшоров", Ложь - в противном случае.
Функция СтранаЯвляетсяОфшором(Знач ДатаЗапроса, Страна, УчитыватьНалоговыйПериод = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаЗапроса) Тогда
		ДатаЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если УчитыватьНалоговыйПериод Тогда
		ДатаЗапроса = НачалоГода(ДатаЗапроса);
	КонецЕсли;
	
	Возврат УчетОфшоров.ЯвляетсяОфшором(ДатаЗапроса, Страна);
	
КонецФункции

// Возвращает список кодов стран офшоров.
// (см. общий макет ПереченьОфшоров).
// ОтчетныйГод - Дата, Неопределено.
// Возвращаемое значение:
// Массив - список кодов из макета "Перечень офшоров".
Функция ПереченьКодовСтранОфшоров(Знач ОтчетныйГод) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтчетныйГод) Тогда
		ОтчетныйГод = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	МакетОфшоров = ПолучитьОбщийМакет("ПереченьОфшоров");
	КлассификаторXML = МакетОфшоров.ПолучитьТекст();
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(КлассификаторXML);
	ТаблицаОфшоров = СериализаторXDTO.ПрочитатьXML(Чтение); // ТаблицаЗначений
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Запрос.Параметры.Вставить("ТаблицаОфшоров", ТаблицаОфшоров);
	Запрос.Параметры.Вставить("ДатаНачалаПериода", ОтчетныйГод);
	Запрос.Параметры.Вставить("ДатаКонцаПериода", ОтчетныйГод);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОфшоров.Код КАК Код,
	|	ТаблицаОфшоров.ДатаНачала КАК ДатаНачала,
	|	ТаблицаОфшоров.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ Офшоры
	|ИЗ
	|	&ТаблицаОфшоров КАК ТаблицаОфшоров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код,
	|	ДатаОкончания,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраныМира.Код КАК Код
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|		ЛЕВОЕ СОЕДИНЕНИЕ Офшоры КАК Офшоры
	|		ПО СтраныМира.Код = Офшоры.Код
	|ГДЕ
	|	(Офшоры.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И Офшоры.ДатаНачала <= &ДатаКонцаПериода
	|			ИЛИ Офшоры.ДатаОкончания МЕЖДУ &ДатаНачалаПериода И &ДатаКонцаПериода)
	|	И СтраныМира.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Офшоры";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
КонецФункции

// Возвращает список кодов ТНВЭД, которые принадлежат к товарам мировой биржевой торговли, на основании макета.
// (см. макет Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ТоварыМировойБиржевойТорговли).
// Параметры:
// ОтчетныйГод - Дата - отчетный год, за который формируется уведомление и по которому необходимо определять действующие
// 		товары мировой биржевой торговли.
// Возвращаемое значение:
// Массив - список кодов из макета "Товары мировой биржевой торговли".
Функция ПереченьКодовТНВЭДМировойБиржевойТорговли(ОтчетныйГод) Экспорт
	
	КодыТНВЭД = КодыТНВЭДМировойБиржевойТорговли();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.СсылкаТНВЭД КАК СсылкаТНВЭД,
	|	Данные.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	Данные.ДатаОкончанияДействия КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ КодыТНВЭД
	|ИЗ
	|	&КодыТНВЭД КАК Данные;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.СсылкаТНВЭД КАК СсылкаТНВЭД,
	|	ТНВЭД.Код КАК Код,
	|	ТНВЭД.Наименование КАК Наименование
	|ИЗ
	|	КодыТНВЭД КАК Данные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК ТНВЭД
	|	ПО ТНВЭД.Ссылка = Данные.СсылкаТНВЭД
	|ГДЕ
	|	Данные.ДатаНачалаДействия <= &ОтчетныйГод И Данные.ДатаОкончанияДействия >= &ОтчетныйГод";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КодыТНВЭД", КодыТНВЭД);
	Запрос.УстановитьПараметр("ОтчетныйГод", ОтчетныйГод);
	
	МассивКодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
	Возврат МассивКодов;
	
КонецФункции

// Возвращает таблицу кодов ТНВЭД, которые принадлежат к товарам мировой биржевой торговли, на основании макета.
// (см. макет Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ТоварыМировойБиржевойТорговлиXML).
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* СсылкаТНВЭД - Справочник.КлассификаторТНВЭД - ссылка на классификатор кодов ТНВЭД
//		* ДатаНачалаДействия - Дата - дата начала действия
//		* ДатаОкончанияДействия - Дата - дата окончания действия.
//
Функция КодыТНВЭДМировойБиржевойТорговли() Экспорт
	
	КодыТНВЭД = Новый ТаблицаЗначений;
	КодыТНВЭД.Колонки.Добавить("СсылкаТНВЭД", Новый ОписаниеТипов("СправочникСсылка.КлассификаторТНВЭД"));
	КодыТНВЭД.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КодыТНВЭД.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ПравилаТНВЭД = ПравилаТНВЭДТоваровМировойБиржевойТорговли();
	
	ПодходящиеТНВЭД = ПодходящиеТНВЭДПоПравилам(ПравилаТНВЭД);
	
	Для Каждого ПравилоТНВЭД Из ПравилаТНВЭД Цикл
		ДобавитьПодходящийКодТНВЭД(ПравилоТНВЭД, ПодходящиеТНВЭД, КодыТНВЭД);
	КонецЦикла;
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		ПроверитьПересекающиесяПериодыКодовТНВЭД(КодыТНВЭД);
	КонецЕсли;
	
	Возврат КодыТНВЭД;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписокКодовНаименованийСделки() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "ТипИСтороныДоговора", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция СоответствиеКодовСтороныСделки() Экспорт
	
	СоответствиеКодов = Новый Соответствие();
	
	Макет = Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ПолучитьМакет("КонтролируемыеСделкиСпискиКодов");
	ОбластьМакета = Макет.ПолучитьОбласть("ТипИСтороныДоговора");
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		КодНаименованияСделки = ОбластьМакета.Область(Ном,1, Ном, 1).Текст;
		СписокКодов = Новый СписокЗначений();
		Для Колонка = 2 По 4 Цикл
			Код = ОбластьМакета.Область(Ном, Колонка*2 - 1 , Ном, Колонка*2 - 1).Текст;
			Наименование = ОбластьМакета.Область(Ном, Колонка*2, Ном, Колонка*2).Текст;
			Если ЗначениеЗаполнено(Код) Тогда
				СписокКодов.Добавить(Код, "" + Код + " - " + Наименование);
			КонецЕсли;
		КонецЦикла;
		СоответствиеКодов.Вставить(КодНаименованияСделки, СписокКодов);
	КонецЦикла;
	
	Возврат СоответствиеКодов;
	
КонецФункции

Функция КодыУсловийПоставки() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодУсловийПоставки", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция ПолучитьКодыВидовДеятельностиФизЛиц() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодВидаДеятельности", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция ПолучитьКодВидаДокументаПоВидуДокумента(ДокументВид) Экспорт 
	
	Если ЗначениеЗаполнено(ДокументВид) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВид, "КодМВД");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКодыОпределенияЦеныСделки() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "ОснованияПризнанияЦеныСделкиРыночной", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция ПолучитьКодыМетодовЦенообразования() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "МетодыЦенообразования", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция ПолучитьКодыКатегорийНалогоплательщика() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодКатегорииНалогоплательщика", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция ПолучитьКодыФормыРеорганизации() Экспорт
	
	Возврат СписокИзМакета("КонтролируемыеСделкиСпискиКодов", "КодРеорганизации", "Обработка.ПомощникПодготовкиУведомленияОКонтролируемыхСделках");
	
КонецФункции

Функция СписокИзМакета(ИмяМакета, ИмяОбласти, ИмяИсточникаМакета = Неопределено)
	
	СписокКодов = Новый СписокЗначений();
	
	Макет = МакетПоИмениИсточникаИОбласти(ИмяМакета, ИмяОбласти, ИмяИсточникаМакета);
	Если Макет = Неопределено Тогда
		Возврат СписокКодов;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
	
	Для Ном = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		ТекКод = СокрЛП(ОбластьМакета.Область(Ном,1, Ном, 1).Текст);
		ТекНаименование = СокрЛП(ОбластьМакета.Область(Ном, 2, Ном, 2).Текст);
		Если ЗначениеЗаполнено(ТекКод) Тогда
			ТекНаименование = "" + ТекКод + " - " + ТекНаименование;
		КонецЕсли;
		СписокКодов.Добавить(ТекКод, ТекНаименование);
	КонецЦикла;
	
	Возврат СписокКодов;
	
КонецФункции

Функция МакетПоИмениИсточникаИОбласти(ИмяМакета, ИмяОбласти, ИмяИсточникаМакета = Неопределено)
	
	Макет = Неопределено;
	
	Если ИмяИсточникаМакета = Неопределено Тогда
		Макет = ПолучитьОбщийМакет(ИмяМакета);
	Иначе
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяИсточникаМакета);
		Если МенеджерИсточника <> Неопределено Тогда
			Макет = МенеджерИсточника.ПолучитьМакет(ИмяМакета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Функция ПравилаТНВЭДТоваровМировойБиржевойТорговли()
	
	ТекстКлассификатора = Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.ПолучитьМакет("ТоварыМировойБиржевойТорговлиXML");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстКлассификатора.ПолучитьТекст());
	
	Если Не ЧтениеXML.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML списка ТНВЭД товаров мировой биржевой торговли';
								|en = 'Empty XML of the FEACN list of the commodities of international marketplace trading'");
	ИначеЕсли ЧтениеXML.Имя <> "ПредметыМировойБиржевойТорговли" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML списка ТНВЭД товаров мировой биржевой торговли';
								|en = 'Error in the XML structure of the FEACN list of the commodities of international marketplace trading'");
	КонецЕсли;
	
	ТипКодаТНВЭД = Метаданные.Справочники.КлассификаторТНВЭД.СтандартныеРеквизиты["Код"].Тип;
	
	ПравилаТНВЭД = Новый ТаблицаЗначений;
	ПравилаТНВЭД.Колонки.Добавить("КодТНВЭД", ТипКодаТНВЭД);
	ПравилаТНВЭД.Колонки.Добавить("Исключения", Новый ОписаниеТипов("Соответствие"));
	ПравилаТНВЭД.Колонки.Добавить("ДатаНачалаДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПравилаТНВЭД.Колонки.Добавить("ДатаОкончанияДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ТекущаяСтрокаПравила = Неопределено;
	ТекущаяДатаНачалаДействия = '00010101';
	ТекущаяДатаОкончанияДействия = ДатаНеуказанногоСрокаДействия();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		ИмяУзла = ЧтениеXML.Имя;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если ИмяУзла = "ПредметыМировойБиржевойТорговли" Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ИмяУзла = "ПериодДействия" Тогда
				
				ТекущаяДатаНачалаДействия = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЧтениеXML.ПолучитьАтрибут("НачалоПериода"));
				Если Не ЗначениеЗаполнено(ТекущаяДатаНачалаДействия) Тогда
					ТекущаяДатаНачалаДействия = '00010101';
				КонецЕсли;
				
				ТекущаяДатаОкончанияДействия = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЧтениеXML.ПолучитьАтрибут("ОкончаниеПериода"));
				Если Не ЗначениеЗаполнено(ТекущаяДатаОкончанияДействия) Тогда
					ТекущаяДатаОкончанияДействия = ДатаНеуказанногоСрокаДействия();
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "КодТНВЭД" Тогда
				
				Код = ЧтениеXML.ПолучитьАтрибут("Код");
				Если Не ЗначениеЗаполнено(Код) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущаяСтрокаПравила = ПравилаТНВЭД.Добавить();
				ТекущаяСтрокаПравила.КодТНВЭД = Код;
				ТекущаяСтрокаПравила.ДатаНачалаДействия = ТекущаяДатаНачалаДействия;
				ТекущаяСтрокаПравила.ДатаОкончанияДействия = ТекущаяДатаОкончанияДействия;
				
			ИначеЕсли ИмяУзла = "Исключение" Тогда
				
				Код = ЧтениеXML.ПолучитьАтрибут("Код");
				Если Не ЗначениеЗаполнено(Код) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущаяСтрокаПравила.Исключения.Вставить(Код, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат ПравилаТНВЭД;
	
КонецФункции

Функция ПодходящиеТНВЭДПоПравилам(ПравилаТНВЭД)
	
	// Все коды в правилах содержат как минимум 4 символа.
	// Поэтому соберем все уникальные значения первых 4 символов из правил ТНВЭД,
	// И по ним выберем те коды ТВНЭД из справочника,
	// у которых первые 4 символа кода совпадают с выбранными.
	// После этого уже будем для каждого кода применять правило, и отбирать те,
	// которые подходят под правило.
	// Отбор по 4 символам нужен для того, чтобы ускорить алгоритм, и не перебирать все элементы ТНВЭД.
	
	СоответствиеКороткихКодов = Новый Соответствие;
	Для Каждого ПравилоТНВЭД Из ПравилаТНВЭД Цикл
		СоответствиеКороткихКодов.Вставить(Лев(ПравилоТНВЭД.КодТНВЭД, 4), Истина);
	КонецЦикла;
	
	МассивКороткихКодов = Новый Массив;
	Для Каждого КлючЗначение Из СоответствиеКороткихКодов Цикл
		МассивКороткихКодов.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКороткихКодов", МассивКороткихКодов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторТНВЭД.Ссылка КАК СсылкаТНВЭД,
	|	КлассификаторТНВЭД.Код КАК КодТНВЭД
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|ГДЕ
	|	ПОДСТРОКА(КлассификаторТНВЭД.Код, 0, 4) В (&МассивКороткихКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьПодходящийКодТНВЭД(ПравилоТНВЭД, ПодходящиеТНВЭД, КодыТНВЭД)
	
	ДлинаКодаПравила = СтрДлина(ПравилоТНВЭД.КодТНВЭД);
	Для Каждого СтрокаТНВЭД Из ПодходящиеТНВЭД Цикл
		
		Если Лев(СтрокаТНВЭД.КодТНВЭД, ДлинаКодаПравила) <> ПравилоТНВЭД.КодТНВЭД Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилоТНВЭД.Исключения.Получить(СтрокаТНВЭД.КодТНВЭД) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКода = КодыТНВЭД.Добавить();
		ОписаниеКода.СсылкаТНВЭД = СтрокаТНВЭД.СсылкаТНВЭД;
		ОписаниеКода.ДатаНачалаДействия = НачалоДня(ПравилоТНВЭД.ДатаНачалаДействия);
		ОписаниеКода.ДатаОкончанияДействия = КонецДня(ПравилоТНВЭД.ДатаОкончанияДействия);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаНеуказанногоСрокаДействия()
	
	Возврат '39991231235959';
	
КонецФункции

Процедура ПроверитьПересекающиесяПериодыКодовТНВЭД(КодыТНВЭД)
	
	УникальныеКодыТНВЭД = КодыТНВЭД.Скопировать(, "СсылкаТНВЭД");
	УникальныеКодыТНВЭД.Свернуть("СсылкаТНВЭД", "");
	
	Для Каждого УникальныйКодТНВЭД Из УникальныеКодыТНВЭД Цикл
		
		СтрокиДействияКодов = КодыТНВЭД.НайтиСтроки(Новый Структура("СсылкаТНВЭД", УникальныйКодТНВЭД.СсылкаТНВЭД));
		Если СтрокиДействияКодов.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерСтроки = 0 По СтрокиДействияКодов.Количество() - 2 Цикл
			
			Для НомерСтрокиСравнения = НомерСтроки + 1 По СтрокиДействияКодов.Количество() - 1 Цикл
				
				Если СтрокиДействияКодов[НомерСтроки].ДатаНачалаДействия > СтрокиДействияКодов[НомерСтрокиСравнения].ДатаОкончанияДействия
					Или СтрокиДействияКодов[НомерСтроки].ДатаОкончанияДействия < СтрокиДействияКодов[НомерСтрокиСравнения].ДатаНачалаДействия Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстИсключения = СтрШаблон(НСтр("ru = 'Для кода ТНВЭД %1 есть пересекающиеся периоды действия';
												|en = 'For the %1 FEACN code, there are overlapping validity periods'"), УникальныйКодТНВЭД.СсылкаТНВЭД);
				ВызватьИсключение ТекстИсключения;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти