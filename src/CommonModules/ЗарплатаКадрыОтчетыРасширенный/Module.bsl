
#Область СлужебныеПроцедурыИФункции

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// Базовые настройки вариантов отчетов.
	ЗарплатаКадрыОтчетыБазовый.НастроитьВариантыОтчетов(Настройки);
	
	// Исключение вариантов отчетов, не предназначенных для интерактивного использования.
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЖурналУчетаИсполнительныхДокументов, "КарточкаУчетаИсполнительныхДокументов");
	Вариант.Включен = Ложь;
	
	// Технические варианты отчетов.
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ФактическиеОтпускаСотрудников, "ФактическиеОтпускаСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ПлановыеУдержанияСотрудников, "ПлановыеУдержанияСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.КадроваяИсторияСотрудников, "КадроваяИсторияСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОтчетыПоСотрудникам, "ЗаполнениеСписковСотрудников");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОтчетыПоСотрудникам, "Т4");
	Вариант.Описание = НСтр("ru = 'Учетная карточка научного, научно-педагогического работника (Унифицированная форма Т-4).';
							|en = 'Research specialist, teacher registration card (Unified form Т-4).'");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОтчетыПоСотрудникам, "СевернаяНадбавка");
	Вариант.Описание = НСтр("ru = 'Информация по северному стажу и проценту северной надбавки сотрудников.';
							|en = 'Information on the employee Northern length of service and Northern allowance percentage.'");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОстаткиОтпусков, "ДанныеРасчета");
	Вариант.Включен = Ложь;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ2, "Т2ГСМС");
	Вариант.Включен = Ложь;
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ПрименятьСевернуюНадбавку");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОтчетыПоСотрудникам, "СевернаяНадбавка");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	// Подчинение вариантов отчета по источникам финансирования функциональной опции ИспользоватьИсточникиФинансирования.
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержанийАвансом, "РасчетныйЛистокСРазбивкойПоИсточникамФинансированияПерваяПоловинаМесяца");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализЗадолженностиПоЗарплате, "ЗадолженностьВРазрезеИсточниковФинансирования");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЛицевыеСчетаСотрудников, "Т54");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьРасчетЗарплатыРасширенная");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ЛицевыеСчетаСотрудников, "Т54а");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьРасчетЗарплатыРасширенная");
	
	// Обновление настроек отчетов по штатному расписанию.
	УправлениеШтатнымРасписанием.УстановитьДоступностьОтчетовПоШтатномуРасписанию(Настройки);
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("РаботаВБюджетномУчреждении");   
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ13, "Форма0504421");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Описание = НСтр("ru = 'Устаревшая форма. Применялась до 2015 года.';
							|en = 'Obsolete form. Used until 2015.'");
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Зарплата, "СмТакже");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ13, "Форма0504421с2015");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержаний, "Форма0504401");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Описание = НСтр("ru = 'Устаревшая форма. Применялась до 2015 года.';
							|en = 'Obsolete form. Used until 2015.'");
	Вариант.Размещение.Очистить();
	Вариант.Размещение.Вставить(Метаданные.Подсистемы.Зарплата, "СмТакже");
	Вариант.Включен = Истина;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержаний, "Форма0504401с2015");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Истина;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержаний, "Форма0504402");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Истина;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализНачисленийИУдержанийАвансом, "Форма0504402ПерваяПоловинаМесяца");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Истина;
	
	// Описание вариантов отчета АнализОбязательствПоНДФЛ.
	РаботаВХозрасчетнойОрганизации = ЗарплатаКадрыРасширенный.ЗначениеРаботаВХозрасчетнойОрганизации();
	Если РаботаВХозрасчетнойОрганизации = Неопределено Тогда
		РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
	КонецЕсли;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализОбязательствПоНДФЛ, "КонтрольСроковУплатыПоИсточникам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Не РаботаВХозрасчетнойОрганизации;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализОбязательствПоНДФЛ, "УдержанныйНДФЛПоИсточникам");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = Не РаботаВХозрасчетнойОрганизации;
	
	ФункциональныеОпции = Новый Массив;
	ФункциональныеОпции.Добавить("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализОбязательствПоНДФЛ, "КонтрольСроковУплатыПоСтатьям");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = РаботаВХозрасчетнойОрганизации;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.АнализОбязательствПоНДФЛ, "УдержанныйНДФЛПоСтатьям");
	Вариант.ФункциональныеОпции = ФункциональныеОпции;
	Вариант.Включен = РаботаВХозрасчетнойОрганизации;
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.НастройкиБухучета, "НастройкиБухучета");
	Вариант.Включен = Истина;

	// Настройки вариантов отчетов приложений.
#Область ЗарплатаКадрыПриложения	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыРасширенный");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДоступКНаркотическимСредствам");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ТарификационнаяОтчетностьУчрежденийФМБА");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОстаткиОтпусков");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		Модуль.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	
#КонецОбласти
	
	// Настройка отчетов
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализЗадолженностиПоЗарплате);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализИзмененийЛичныхДанныхСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.АнализПлановыхНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ВыплатыНезарплатныхДоходов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ГрафикОтпусков);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ДинамикаПлановыхНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Договорники);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЖурналУчетаИсполнительныхДокументов);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЗадолженностьПоВзысканиям);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЗаймыСотрудникам);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИзменениеШтатногоРасписания);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ИсполнительныеДокументы);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КадроваяИсторияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КвалификационныеКатегорииСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.КонтактнаяИнформацияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ЛицевыеСчетаСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.НаградыСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.НастройкиПрограммыЗарплатаКадры);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.НачисленныеДоходыВОтчетахПоНДФЛ); 
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОтпускаСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПлановыеУдержанияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СведенияОбИзмененияхДляВоенкомата);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СоставыСемейСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СостояниеШтатногоРасписания);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СостоянияСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СправкиСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СравнениеПлановыхИФактическихНачислений);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтажиСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.СтатистикаПерсонала);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ТрудоваяДеятельностьСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ13);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ФактическиеОтпускаСотрудников);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ШтатноеРасписание);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ШтатноеРасписаниеНачисления);
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ1);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ1а);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ5);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ5а);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ6);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ6а);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ8);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ8а);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ9);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ9а);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТ11);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаТрудовойДоговорМикропредприятий);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.НастройкиБухучета);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПечатнаяФормаПриостановлениеТрудовогоДоговора);
	
КонецПроцедуры

Процедура ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета, НаАванс) Экспорт
	
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	
	Если КлючВарианта = "Т51"
		Или КлючВарианта = "Т51ПерваяПоловинаМесяца"
		Или КлючВарианта = "Т49"
		Или КлючВарианта = "13ФО"
		Или КлючВарианта = "Т49ПерваяПоловинаМесяца"
		Или КлючВарианта = "Форма0504402"
		Или КлючВарианта = "Форма0504402ПерваяПоловинаМесяца" Тогда
		
		Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
			
			Если ПользовательскоеПоле.Заголовок = "ОтработаноРабочихДней" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""Праздники""
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""ВыходныеДни""
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
					|		Тогда ОтработаноДней
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноРабочихЧасов" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""Праздники""
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных <> ""ВыходныеДни""
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
					|		И ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
					|		Тогда ОтработаноЧасов
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноПразднВыходныхДней" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И (ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""Праздники""
					|			ИЛИ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""ВыходныеДни"")
					|		Тогда ОтработаноДней
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноПразднВыходныхЧасов" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И (ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""Праздники""
					|			ИЛИ ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""ВыходныеДни"")
					|		Тогда ОтработаноЧасов
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноПраздничныхДней" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""Праздники""
					|		Тогда ОтработаноДней
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноПраздничныхЧасов" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""Праздники""
					|		Тогда ОтработаноЧасов
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноВыходныхДней" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""ВыходныеДни""
					|		Тогда ОтработаноДней
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ОтработаноВыходныхЧасов" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ИмяПредопределенныхДанных = ""ВыходныеДни""
					|		Тогда ОтработаноЧасов
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоПовременно" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
					|		И ВидРасчета.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоСдельно" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "НачисленоВНатуральнойФорме" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ПрочиеДоходы" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) ИЛИ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)))
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени <> ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
					|		ИЛИ ВидРасчета В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности))
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ДругиеДоходы" Тогда
				
				Выражение = 
					"Выбор
					|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
					|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
					|		Тогда Сумма
					|	Иначе 0
					|Конец";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ПрочиеУдержания" Тогда
				
				Если КлючВарианта = "Т51"
					Или КлючВарианта = "Т51ПерваяПоловинаМесяца"
					Или КлючВарианта = "Форма0504402"
					Или КлючВарианта = "Форма0504402ПерваяПоловинаМесяца" Тогда
					
					Если НаАванс Тогда
						
						Выражение =
							"Выбор
							|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда Сумма
							|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
							|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
							|		Тогда Сумма
							|	Иначе 0
							|Конец";
						
					Иначе
						
						Выражение =
							"Выбор
							|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда Сумма
							|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
							|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
							|		Тогда Сумма
							|	Иначе 0
							|Конец";
						
					КонецЕсли;
					
				Иначе
					
					Если НаАванс Тогда
						
						Выражение =
							"Выбор
							|	Когда ВидРасчета.КатегорияУдержания = Значение(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда 0
							|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда 0
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда 0
							|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
							|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
							|		Тогда Сумма
							|	Иначе 0
							|Конец";
						
					Иначе
						
						Выражение = 
							"Выбор
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда 0
							|	Когда ВидРасчета.КатегорияУдержания = Значение(Перечисление.КатегорииУдержаний.ИсполнительныйЛист) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда 0
							|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
							|		Тогда Сумма
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда 0
							|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
							|		Тогда 0
							|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
							|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
							|		Тогда Сумма
							|	Иначе 0
							|Конец";
						
					КонецЕсли;
					
				КонецЕсли;
					
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ВсегоУдержано" Тогда
				
				Если НаАванс Тогда
					
					Выражение =
						"Выбор
						|	Когда ВидРасчета В (&ИсчисленныеНалоги)
						|		Тогда Сумма
						|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
						|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
						|		Тогда Сумма
						|	Иначе 0
						|Конец";
					
				Иначе
					
					Выражение =
						"Выбор
						|	Когда ВидРасчета В (&ИсчисленныеНалоги)
						|		Тогда Сумма
						|	Когда (НЕ ВидРасчета В (&ИсчисленныеНалоги)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
						|		И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме)
						|		Тогда Сумма
						|	Иначе 0
						|Конец";
					
				КонецЕсли;
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "Аванс"
				И (КлючВарианта = "Т49" Или КлючВарианта = "Т49ПерваяПоловинаМесяца") Тогда
				
				Если НаАванс Тогда
					
					Выражение = 
						"Выбор
						|	Когда (ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) ИЛИ ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Иначе 0
						|Конец";
					
				Иначе
					
					Выражение = 
						"Выбор
						|	Когда ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Когда (ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод) ИЛИ ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод)) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.Выплачено)
						|		Тогда Сумма
						|	Иначе 0
						|Конец";
					
				КонецЕсли;
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			ИначеЕсли ПользовательскоеПоле.Заголовок = "ПроцентПНВЛ" Тогда
				
				Выражение = 
					"Выбор
					|	Когда (Не Показатель Есть Null) И Показатель.ТипПоказателя = Значение(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
					|		Тогда Значение
					|	Иначе 0
					|Конец";
	
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей("Сумма(" + Выражение + ")");
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЗарплатаКадрыОтчеты.ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта) Тогда
		
		Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
			
			Если ПользовательскоеПоле.Заголовок = "УчетВремениВЧасах" Тогда
				
				Выражение = "ЕСТЬNULL(ВидРасчета.УчетВремениВЧасах, Ложь)";
				
				ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(Выражение);
				ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(Выражение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание")
			И ПолучитьФункциональнуюОпцию("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании") Тогда
			
		ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(НастройкиОтчета.Структура);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючВарианта = "РасчетныйЛисток"
		Или КлючВарианта = "РасчетныйЛистокУправленческий"
		Или КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования" Тогда
		
		УстановитьИспользованиеПараметраОтчета("ВыводитьОснованияНачисленийИУдержаний", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		УстановитьИспользованиеПараметраОтчета("РасшифровыватьСдельныйЗаработокПоВидамРабот", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		УстановитьИспользованиеПараметраОтчета("ВыводитьПоказателиНачисленийИУдержаний", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		УстановитьИспользованиеПараметраОтчета("ВыводитьВсеПоказателиНачисленийИУдержаний", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		УстановитьИспользованиеПараметраОтчета("ВыводитьРасшифровкиОднойСтрокой", НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеПараметраОтчета(ИмяПараметра, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПараметрОтчета = НовыеНастройкиКД.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрОтчета = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = Неопределено;
	
	Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
		
		Для Каждого ЭлементНастройки Из НовыеПользовательскиеНастройкиКД.Элементы Цикл 
			
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
				И Строка(ЭлементНастройки.Параметр) = ИмяПараметра Тогда 
				
				ИдентификаторНастройки = ЭлементНастройки.ИдентификаторПользовательскойНастройки;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторНастройки) Тогда 
		ИдентификаторНастройки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрОтчета.ИдентификаторПользовательскойНастройки = ИдентификаторНастройки;
	
КонецПроцедуры

Функция ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(Структура)
	
	ВставленоПолеГруппировки = Ложь;
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Использование Тогда
			
			ВставленоПолеГруппировки = Ложь;
			Если ЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() > 0 Тогда
				
				Для каждого ЭлементГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
					
					Если ТипЗнч(ЭлементГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
						
						Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("ДолжностьГоловногоСотрудникаНаКонецПериода") Тогда
							
							ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеГруппировки.Использование = Истина;
							ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("РазрядКатегорияГоловногоСотрудникаНаКонецПериода");
							
							ВставленоПолеГруппировки = Истина;
							Прервать;
							
						КонецЕсли; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если Не ВставленоПолеГруппировки Тогда
				ВставленоПолеГруппировки = ДобавитьВГруппировкуРазрядКатегорияГоловногоСотрудникаНаКонецПериода(ЭлементСтруктуры.Структура)
			КонецЕсли; 
			
			Если ВставленоПолеГруппировки Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ВставленоПолеГруппировки;
		
КонецФункции

Функция ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта) Экспорт
	
	ЭтоРасчетныйЛисток = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		ЭтоРасчетныйЛисток = Модуль.ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта);
		
	КонецЕсли;
	
	Если Не ЭтоРасчетныйЛисток Тогда
		
		ЭтоРасчетныйЛисток = ЗарплатаКадрыОтчетыБазовый.ЭтоКлючВариантаОтчетаРасчетныйЛисток(КлючВарианта)
			Или КлючВарианта = "РасчетныйЛистокПерваяПоловинаМесяца"
			Или КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансированияПерваяПоловинаМесяца";
		
	КонецЕсли;
	
	Возврат ЭтоРасчетныйЛисток;
	
КонецФункции

Функция НаборыВнешнихДанныхАнализНачисленийИУдержаний() Экспорт
	
	НаборыВнешнихДанных = ЗарплатаКадрыОтчетыБазовый.НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	
	НачисленияУдержанияДокумента = НаборыВнешнихДанных.НачисленияУдержанияДокумента;
	
	НачисленияУдержанияДокумента.Колонки.Добавить("ВремяВЧасах",										Новый ОписаниеТипов("Булево"));
	НачисленияУдержанияДокумента.Колонки.Добавить("Значение",											Новый ОписаниеТипов("Число"));
	НачисленияУдержанияДокумента.Колонки.Добавить("Показатель",											Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	НачисленияУдержанияДокумента.Колонки.Добавить("РазрядКатегорияГоловногоСотрудникаНаКонецПериода",	Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	НачисленияУдержанияДокумента.Колонки.Добавить("РазрядКатегорияНаКонецПериода",						Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	НачисленияУдержанияДокумента.Колонки.Добавить("РазрядКатегория",									Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	
	Возврат НаборыВнешнихДанных;
	
КонецФункции

Функция НаборыВнешнихДанныхДокументаФизическихЛиц(ДанныеДокумента) Экспорт
	
	НачисленияУдержанияПоСотрудникам = Новый ТаблицаЗначений;
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Период",								Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Регистратор",						Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплаты"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Организация",						Новый ОписаниеТипов("СправочникСсылка.Организации"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ФизическоеЛицо",						Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Сотрудник",							Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Подразделение",						Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("НачислениеУдержание",				Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления,ПланВидовРасчетаСсылка.Удержания,ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ГруппаНачисленияУдержанияВыплаты",	Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНачисленияУдержанияВыплаты"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ПериодДействия",						Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДокументОснование",					Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДатаНачала",							Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ДатаОкончания",						Новый ОписаниеТипов("Дата"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("Сумма",								Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОтработаноДней",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОтработаноЧасов",					Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОплаченоДней",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ОплаченоЧасов",						Новый ОписаниеТипов("Число"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ВремяВЧасах",						Новый ОписаниеТипов("Булево"));
	НачисленияУдержанияПоСотрудникам.Колонки.Добавить("ИдентификаторСтроки",				Новый ОписаниеТипов("Число"));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДокумента, НачисленияУдержанияПоСотрудникам);
	
	Запрос = ЗапросДанныеДокументаФизическихЛиц();
	Запрос.УстановитьПараметр("НачисленияУдержанияПоСотрудникам", НачисленияУдержанияПоСотрудникам);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(Запрос.Текст, Запрос);
	
	НаборыВнешнихДанных = НаборыВнешнихДанныхАнализНачисленийИУдержаний();
	НаборыВнешнихДанных.НачисленияУдержанияДокумента = Запрос.Выполнить().Выгрузить();
	
	Возврат НаборыВнешнихДанных;
	
КонецФункции

Функция ЗапросДанныеДокументаФизическихЛиц() Экспорт
	
	Запрос = ЗарплатаКадрыОтчетыБазовый.ЗапросДанныеДокументаФизическихЛиц();
	
	ДополнительныеПоляКадровыхДанныхСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	
	СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
	СтрокаДополнительногоПоля.ИмяПоля = "РазрядКатегория";
	СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудников",
		"РазрядКатегория",
		"РабочееМесто.РазрядКатегория");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеСотрудниковНаКонецПериода",
		"РазрядКатегорияНаКонецПериода",
		"РабочееМесто.РазрядКатегорияНаКонецПериода");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
		СтрокаДополнительногоПоля,
		"КадровыеДанныеГоловныхСотрудников",
		"РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
		"РабочееМесто.РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
		НСтр("ru = 'Разряд категория основного сотрудника на конец периода';
			|en = 'Category of the main employee as of the end of the period'"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ВывестиДополнительныеПоляПредставленийВЗапрос(Запрос, ДополнительныеПоляКадровыхДанныхСотрудников, "Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний");
	
	Возврат Запрос;
	
КонецФункции

Функция НачислениеДоговораГПХПоДокументуОснованию(ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") Тогда
		Возврат Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа;
	КонецЕсли;
	
	Возврат Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги;
	
КонецФункции

Функция СдельныйЗаработокСотрудников(СтрокиСотрудников) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеФизическихЛиц = Новый ТаблицаЗначений;
	ДанныеФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеФизическихЛиц.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеФизическихЛиц.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеФизическихЛиц.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ЗаполнитьДанныеОСдельномЗаработке(ДанныеФизическихЛиц, СтрокиСотрудников);
	
	Запрос.УстановитьПараметр("ДанныеФизическихЛиц", ДанныеФизическихЛиц);
	Запрос.УстановитьПараметр("СдельныйЗаработок", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеФизическихЛиц.ДатаНачала КАК ДатаНачала,
		|	ДанныеФизическихЛиц.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	&ДанныеФизическихЛиц КАК ДанныеФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияОперативногоПоказателя.Регистратор КАК Регистратор,
		|	ЗначенияОперативногоПоказателя.Показатель КАК Показатель,
		|	ЗначенияОперативногоПоказателя.Организация КАК Организация,
		|	СУММА(ЗначенияОперативногоПоказателя.Значение) КАК Значение,
		|	ЗначенияОперативногоПоказателя.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗначенияОперативногоПоказателя.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗначенияОперативногоПоказателя.ОтношениеКЕНВД КАК ОтношениеКЕНВД,
		|	ЗначенияОперативногоПоказателя.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТСводныеЗначенияОперативногоПоказателя
		|ИЗ
		|	ВТФизическиеЛица КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|		ПО (ДанныеДляРасчета.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ДанныеДляРасчета.ГоловнаяОрганизация = ЗначенияОперативногоПоказателя.Организация.ГоловнаяОрганизация)
		|			И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|			И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияОперативногоПоказателя.Регистратор,
		|	ЗначенияОперативногоПоказателя.Показатель,
		|	ЗначенияОперативногоПоказателя.Организация,
		|	ЗначенияОперативногоПоказателя.СтатьяФинансирования,
		|	ЗначенияОперативногоПоказателя.СпособОтраженияЗарплатыВБухучете,
		|	ЗначенияОперативногоПоказателя.ОтношениеКЕНВД,
		|	ЗначенияОперативногоПоказателя.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДанныеДляРасчета.ДатаНачала, МЕСЯЦ) КАК МесяцНачисления,
		|	ДанныеДляРасчета.ДатаНачала КАК ДатаНачала,
		|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ДанныеДляРасчетаЗарплатыВыполненныеРаботы.ВидРабот, ЗначенияОперативногоПоказателя.Регистратор) КАК ВидРабот,
		|	ЗначенияОперативногоПоказателя.Значение КАК Значение,
		|	СводныеЗначенияОперативногоПоказателя.Значение КАК Значение1,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СводныеЗначенияОперативногоПоказателя.Значение, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЕСТЬNULL(ЗначенияОперативногоПоказателя.Значение, СводныеЗначенияОперативногоПоказателя.Значение) / СводныеЗначенияОперативногоПоказателя.Значение
		|	КОНЕЦ КАК КоэффициентПересчета,
		|	СУММА(ДанныеДляРасчетаЗарплатыВыполненныеРаботы.Сумма) КАК Сумма,
		|	СУММА(ДанныеДляРасчетаЗарплатыВыполненныеРаботы.ОбъемВыполненныхРабот) КАК ОбъемВыполненныхРабот,
		|	ВЫБОР
		|		КОГДА ДанныеДляРасчетаЗарплатыВыполненныеРаботы.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ДанныеДляРасчетаЗарплатыВыполненныеРаботы.СтатьяФинансирования
		|	КОНЕЦ КАК СтатьяФинансирования
		|ПОМЕСТИТЬ ВТСдельныйЗаработокСотрудников
		|ИЗ
		|	ВТФизическиеЛица КАК ДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДанныеДляРасчетаЗарплаты.ВыполненныеРаботы КАК ДанныеДляРасчетаЗарплатыВыполненныеРаботы
		|			ПО ЗначенияОперативногоПоказателя.Регистратор = ДанныеДляРасчетаЗарплатыВыполненныеРаботы.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеЗначенияОперативногоПоказателя КАК СводныеЗначенияОперативногоПоказателя
		|			ПО ЗначенияОперативногоПоказателя.Регистратор = СводныеЗначенияОперативногоПоказателя.Регистратор
		|				И ЗначенияОперативногоПоказателя.Организация = СводныеЗначенияОперативногоПоказателя.Организация
		|				И ЗначенияОперативногоПоказателя.Показатель = СводныеЗначенияОперативногоПоказателя.Показатель
		|				И ЗначенияОперативногоПоказателя.СтатьяФинансирования = СводныеЗначенияОперативногоПоказателя.СтатьяФинансирования
		|				И ЗначенияОперативногоПоказателя.СпособОтраженияЗарплатыВБухучете = СводныеЗначенияОперативногоПоказателя.СпособОтраженияЗарплатыВБухучете
		|				И ЗначенияОперативногоПоказателя.ОтношениеКЕНВД = СводныеЗначенияОперативногоПоказателя.ОтношениеКЕНВД
		|				И ЗначенияОперативногоПоказателя.Подразделение = СводныеЗначенияОперативногоПоказателя.Подразделение
		|		ПО ДанныеДляРасчета.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо
		|			И (ДанныеДляРасчета.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ ДанныеДляРасчета.ГоловнаяОрганизация = ЗначенияОперативногоПоказателя.Организация.ГоловнаяОрганизация)
		|			И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|			И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.ДатаНачала,
		|	ДанныеДляРасчета.ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Сотрудник,
		|	ДанныеДляРасчетаЗарплатыВыполненныеРаботы.СтатьяФинансирования,
		|	ЕСТЬNULL(ДанныеДляРасчетаЗарплатыВыполненныеРаботы.ВидРабот, ЗначенияОперативногоПоказателя.Регистратор),
		|	ЗначенияОперативногоПоказателя.Значение,
		|	СводныеЗначенияОперативногоПоказателя.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СдельныйЗаработокСотрудников.МесяцНачисления КАК МесяцНачисления,
		|	СдельныйЗаработокСотрудников.ДатаНачала КАК ДатаНачала,
		|	СдельныйЗаработокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СдельныйЗаработокСотрудников.Сотрудник КАК Сотрудник,
		|	СдельныйЗаработокСотрудников.ВидРабот КАК ВидРабот,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СдельныйЗаработокСотрудников.Сумма, 0) = 0
		|			ТОГДА СдельныйЗаработокСотрудников.ОбъемВыполненныхРабот
		|		ИНАЧЕ СдельныйЗаработокСотрудников.Сумма
		|	КОНЕЦ * СдельныйЗаработокСотрудников.КоэффициентПересчета КАК ОбъемВыполненныхРабот,
		|	СдельныйЗаработокСотрудников.СтатьяФинансирования КАК СтатьяФинансирования
		|ИЗ
		|	ВТСдельныйЗаработокСотрудников КАК СдельныйЗаработокСотрудников
		|
		|УПОРЯДОЧИТЬ ПО
		|	МесяцНачисления,
		|	ФизическоеЛицо,
		|	СтатьяФинансирования,
		|	Сотрудник,
		|	ДатаНачала,
		|	ВидРабот";
	
	ДанныеОСдельномЗаработке = Запрос.Выполнить().Выгрузить();
	ДанныеОСдельномЗаработке.Индексы.Добавить("МесяцНачисления,ФизическоеЛицо,СтатьяФинансирования,Сотрудник,ДатаНачала");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеОСдельномЗаработке;
	
КонецФункции

Процедура ЗаполнитьДанныеОСдельномЗаработке(ДанныеФизическихЛиц, СтрокиОтчета)
	
	Если СтрокиОтчета.Родитель = Неопределено Тогда
		ЕстьГруппировкаПоОрганизации = Ложь;
	Иначе
		ЕстьГруппировкаПоОрганизации = (СтрокиОтчета.Родитель.Владелец().Колонки.Найти("ОрганизацияСортировки") <> Неопределено);
	КонецЕсли;
	
	Для Каждого СтрокаОтчета Из СтрокиОтчета Цикл
		
		Если ЗначениеЗаполнено(СтрокаОтчета.Группа)
			И СтрокаОтчета.Группа <> Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаОтчета.ВидРасчета)
			И ТипЗнч(СтрокаОтчета.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			
			ДанныеОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаОтчета.ВидРасчета);
			Если ДанныеОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда Тогда
				
				НоваяСтрокаФизическиеЛица = ДанныеФизическихЛиц.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаФизическиеЛица, СтрокаОтчета);
				Если ЕстьГруппировкаПоОрганизации И ЗначениеЗаполнено(СтрокаОтчета.ОрганизацияСортировки) Тогда
					НоваяСтрокаФизическиеЛица.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(СтрокаОтчета.ОрганизацияСортировки);
				Иначе
					НоваяСтрокаФизическиеЛица.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ЗаполнитьДанныеОСдельномЗаработке(ДанныеФизическихЛиц, СтрокаОтчета.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ВариантовОтчетовПечатныхФорм

Функция МакетыВариантовОтчетовПечатныхФорм() Экспорт
	
	МакетыВариантовОтчетов = ЗарплатаКадрыОтчетыБазовый.МакетыВариантовОтчетовПечатныхФорм();
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ1.Т1", "ОбщийМакет.ПФ_MXL_Т1");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ5.Т5", "ОбщийМакет.ПФ_MXL_Т5");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ1а.Т1а", "Отчет.ПечатнаяФормаТ1а.ПФ_MXL_Т1а");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ5а.Т5а", "Отчет.ПечатнаяФормаТ5а.ПФ_MXL_Т5а");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ6.Т6", "ОбщийМакет.ПФ_MXL_Т6");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ8.Т8", "ОбщийМакет.ПФ_MXL_Т8");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ6а.Т6а", "Отчет.ПечатнаяФормаТ6а.ПФ_MXL_Т6а");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ8а.Т8а", "Отчет.ПечатнаяФормаТ8а.ПФ_MXL_Т8а");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ9.Т9", "Отчет.ПечатнаяФормаТ9.ПФ_MXL_Т9");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ9.Т10", "Отчет.ПечатнаяФормаТ9.ПФ_MXL_Т10");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ9.Т10а", "Отчет.ПечатнаяФормаТ9.ПФ_MXL_Т10а");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ9а.Т9а", "Отчет.ПечатнаяФормаТ9а.ПФ_MXL_Т9а");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ11.Т11", "Отчет.ПечатнаяФормаТ11.ПФ_MXL_Т11");
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТ11.Т11а", "Отчет.ПечатнаяФормаТ11.ПФ_MXL_Т11а");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТрудовойДоговорМикропредприятий.ТрудовойДоговорМикропредприятий",
		"ОбщийМакет.ПФ_MXL_ТрудовойДоговорМикропредприятий");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаТрудовойДоговорМикропредприятий.ТрудовойДоговорМикропредприятийБезДоступаКЗарплате",
		"ОбщийМакет.ПФ_MXL_ТрудовойДоговорМикропредприятийБезДоступаКЗарплате");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		
		МакетыВариантовОтчетов.Вставить("Отчет.АнализНачисленийИУдержаний.РасчетныйЛистокСРазбивкойПоИсточникамФинансирования",
			"ОбщийМакет.ПФ_MXL_РасчетныйЛистокСРазбивкойПоИсточникамФинансирования");
		
		МакетыВариантовОтчетов.Вставить("Отчет.АнализНачисленийИУдержанийАвансом.РасчетныйЛистокСРазбивкойПоИсточникамФинансированияПерваяПоловинаМесяца",
			"ОбщийМакет.ПФ_MXL_РасчетныйЛистокСРазбивкойПоИсточникамФинансированияПерваяПоловинаМесяца");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ДополнитьКоллекциюМакетовВариантовОтчетовПечатныхФорм(МакетыВариантовОтчетов);
	КонецЕсли;
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказМобилизация",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеМобилизация");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказКонтракт",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеКонтракт");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказСодействие",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеСодействие");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказГражданскиеСлужащиеМобилизация",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеМобилизация");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказГражданскиеСлужащиеКонтракт",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеКонтракт");
	
	МакетыВариантовОтчетов.Вставить("Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПриказГражданскиеСлужащиеСодействие",
		"Отчет.ПечатнаяФормаПриостановлениеТрудовогоДоговора.ПФ_MXL_ПриостановлениеГражданскиеСлужащиеСодействие");
	
	Возврат МакетыВариантовОтчетов;
	
КонецФункции

Функция ИмяОбъектаИзПутиКМакетуПечатнойФормы(ПутьКМакетуПечатнойФормы) Экспорт
	
	ПодстрокиПути = СтрРазделить(ПутьКМакетуПечатнойФормы, ".");
	ПодстрокиПути.Удалить(ПодстрокиПути.Количество() - 1);
	
	Возврат СтрСоединить(ПодстрокиПути, ".");
	
КонецФункции

#КонецОбласти

Функция РазрядКатегорияНаПечать(РазрядКатегория) Экспорт
	
	Если ЗначениеЗаполнено(РазрядКатегория) Тогда
		Возврат ", " + Строка(РазрядКатегория);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЭтоНачислениеСдельнойОплатыТруда(ВидРасчета) Экспорт
	
	СвойстваНачисления = ЗарплатаКадрыРасширенныйВызовСервера.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	Если СвойстваНачисления.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти