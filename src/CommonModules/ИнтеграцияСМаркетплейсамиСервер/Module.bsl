///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак использования интеграции хотя бы с одним маркетплейсом.
//
// Возвращаемое значение:
//   Булево - признак использования интеграции.
//
Функция ИспользуетсяИнтеграцияСМаркетплейсами() Экспорт

	ИспользуютсяИнтеграцияСOzon = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ЕстьУчетныеЗаписиOzon = Ложь;
	Если ИспользуютсяИнтеграцияСOzon Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсOzon)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		ЕстьУчетныеЗаписиOzon = Не Результат.Пустой();
	КонецЕсли;

	ИспользуютсяИнтеграцияСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");
	ЕстьУчетныеЗаписиЯндексМаркет = Ложь;
	Если ИспользуютсяИнтеграцияСЯндексМаркет Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
			|ГДЕ
			|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет)
			|	И НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		ЕстьУчетныеЗаписиЯндексМаркет = Не Результат.Пустой();
	КонецЕсли;

	ИспользуютсяИнтеграцииСМаркетплейсами = ИспользуютсяИнтеграцияСOzon И ЕстьУчетныеЗаписиOzon
			Или ИспользуютсяИнтеграцияСЯндексМаркет И ЕстьУчетныеЗаписиЯндексМаркет;

	Возврат ИспользуютсяИнтеграцииСМаркетплейсами;

КонецФункции

// Создает элементы подсистемы "Интеграция с Ozon" в форме присоединенного файла.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыЭлементаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.Объект.Ссылка) <> Тип("СправочникСсылка.НоменклатураПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаКоманды, Форма.Элементы.ФормаОткрытьФайлДляПросмотра);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме списка присоединенных файлов.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыСпискаПрисоединенныхФайлов(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Или ТипЗнч(Форма.ВладелецФайла) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;

	ПсевдонимПоля = "ПубликуетсяВСервисах";
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];
	ТекстПоля = ОператорВыбрать.Источники[0].Источник.Псевдоним + "." + ПсевдонимПоля;

	ПолеПубликуетсяВСервисах = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
	ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяВСервисах);
	ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

	КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяВСервисах);
	КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;
	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

	Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	ЭлементПубликуетсяНаМП = Форма.Элементы.Добавить(ПсевдонимПоля, Тип("ПолеФормы"), Форма.Элементы.Список);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Список.ПубликуетсяВСервисах";

КонецПроцедуры

// Создает элементы подсистемы "Интеграция с Ozon" в форме сертификата номенклатуры.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыЭлементаСертификатаНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	ЭлементПубликуетсяНаМП = Форма.Элементы.Вставить("ПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.ГруппаИзображение, Форма.Элементы.ГруппаКоманднаяПанельИГиперссылка);
	ЭлементПубликуетсяНаМП.Вид = ВидПоляФормы.ПолеФлажка;
	ЭлементПубликуетсяНаМП.ВидФлажка = ВидФлажка.Выключатель;
	ЭлементПубликуетсяНаМП.ПутьКДанным = "Объект.ПубликуетсяВСервисах";
	ЭлементПубликуетсяНаМП.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;

КонецПроцедуры

// При создании формы списка контекст сертификатов номенклатуры.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - источник события.
//
Процедура ПриСозданииФормыСпискаКонтекстСертификатовНоменклатуры(Форма) Экспорт

	Если Не ИспользуетсяИнтеграцияСМаркетплейсами() Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Форма.СертификатыНоменклатуры.ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("СертификатыНоменклатуры.ПубликуетсяВСервисах");
	Форма.СертификатыНоменклатуры.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	НовыйЭлемент = Форма.Элементы.Добавить("СертификатыНоменклатурыПубликуетсяВСервисах", Тип("ПолеФормы"), Форма.Элементы.СертификатыНоменклатуры);
	НовыйЭлемент.ПутьКДанным = "СертификатыНоменклатуры.ПубликуетсяВСервисах";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;

КонецПроцедуры

// Описывает структуру ошибки.
//
// Возвращаемое значение:
//   Структура - описание ошибки:
//     * КодОшибки      - Строка - код ошибки;
//     * ОписаниеОшибки - Строка - текстовое описание ошибки.
//     * Детализация    - Массив Из Строка - детализированная информация по ошибке;
//                      - Неопределено - детализация не используется (по умолчанию).
//
Функция НоваяОшибка() Экспорт

	Ошибка = Новый Структура;
	Ошибка.Вставить("КодОшибки",      "");
	Ошибка.Вставить("ОписаниеОшибки", "");
	Ошибка.Вставить("Детализация",    Неопределено);

	Возврат Ошибка;

КонецФункции

#Область РаботаСВнешнимиРесурсами

// Возвращает общие параметры подключения к REST API Яндекс.OAuth.
// 
// Возвращаемое значение:
//   Структура Из КлючИЗначение - дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыССервисомАвторизации() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "oauth.yandex.ru";
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2';
													|en = 'An error occurred when executing the %1 API method: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3';
														|en = 'An error occurred when executing the %1 API method: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("oauth.yandex.ru", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры подключения к REST API Яндекс.Диск.
// 
// Возвращаемое значение:
//   Структура Из КлючИЗначение - дополненная структура функции ПараметрыСоединения().
//
Функция ПараметрыРаботыСЯндексДиском() Экспорт

	ПараметрыРаботы = ПараметрыСоединения();
	ПараметрыРаботы.Сервер = "cloud-api.yandex.net";
	ПараметрыРаботы.Порт = 443;
	ПараметрыРаботы.Вставить("ШаблонОшибки", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: %2';
													|en = 'An error occurred when executing the %1 API method: %2'"));
	ПараметрыРаботы.Вставить("ШаблонОшибкиСКодом", НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3';
														|en = 'An error occurred when executing the %1 API method: (%2) %3'"));
	ПараметрыРаботы.Вставить("ТипОбъектОшибка", ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "error"));

	Возврат ПараметрыРаботы;

КонецФункции

// Возвращает общие параметры приложения для использования в механизмах сервиса.
// 
// Возвращаемое значение:
//   Структура - дополненная структура функции ПараметрыАвторизацииПриложения().
//
Функция ПараметрыПриложенияЯндексДиск() Экспорт

	ПараметрыПриложенияЯндексДиск = ПараметрыАвторизацииПриложения();
	ПараметрыПриложенияЯндексДиск.ИдентификаторПриложения = "ЯндексДиск";
	ПараметрыПриложенияЯндексДиск.client_id = "17d0ffccaae840dba48edd4e246f6f27";
	ПараметрыПриложенияЯндексДиск.client_secret = "80ebf05fe140474d9b7adbdf6ade7e4e";

	Возврат ПараметрыПриложенияЯндексДиск;

КонецФункции

// Формирует HTTPЗапрос по переданным данным.
// 
// Параметры:
//   Адрес                   - Строка - путь к ресурсу на сервере.
//   ТелоЗапроса             - Строка, ДвоичныеДанные - источник для установки тела запроса.
//                               Применимо для методов HTTP: OPTIONS, PATCH, POST и PUT.
//   ДополнительныеЗаголовки - Соответствие Из КлючИЗначение - заголовки запроса. Могут перезаписывать обязательные 
//                               заголовки функции. Названия заголовков регистронезависимые.
// 
// Возвращаемое значение:
//   HTTPЗапрос - подготовленный для отправки запрос HTTP.
//
Функция ЗапросHTTP(Адрес, ТелоЗапроса = "", ДополнительныеЗаголовки = Неопределено) Экспорт

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("charset", "UTF-8");
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("content-type", "application/json");

	Если ДополнительныеЗаголовки <> Неопределено Тогда
		Для Каждого Заголовок Из ДополнительныеЗаголовки Цикл
			Заголовки.Вставить(НРег(Заголовок.Ключ), Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);

	Если Не ПустаяСтрока(ТелоЗапроса) Тогда
		Если ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
		КонецЕсли;
	КонецЕсли;

	Возврат Запрос;

КонецФункции

// Записывает список ключей и значений по адресу в защищенное хранилище.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
//   ПараметрыАвторизацииПриложения       - Структура - используется для формирования адреса в хранилище, см. ПараметрыАвторизацииПриложения.
//   ДанныеПриложения          - Структура, Соответствие Из Произвольный - источник пар ключ/значение для записи в 
//                                 защищенное хранилище.
//
Процедура ЗаписатьДанныеПриложенияВХранилище(УчетнаяЗаписьМаркетплейса, ПараметрыАвторизацииПриложения, ДанныеПриложения) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыАвторизацииПриложения.ИдентификаторПриложения;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ЭлементДанных Из ДанныеПриложения Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресВХранилище, ЭлементДанных.Значение, ЭлементДанных.Ключ);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Получает данные приложения из хранилища.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
//   ПараметрыАвторизацииПриложения       - Структура - используется для формирования адреса в хранилище, см. ПараметрыАвторизацииПриложения.
//   Ключи                     - Строка - имена ключей, разделенные запятыми.
// 
// Возвращаемое значение:
//   Произвольный, Структура, Неопределено - данные из безопасного хранилища. Если указан один ключ, то возвращается его 
//     значение, иначе структура. Если данные отсутствуют - Неопределенно.
//
Функция ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыАвторизацииПриложения, Ключи) Экспорт

	АдресВХранилище = Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор()) + "/" + ПараметрыАвторизацииПриложения.ИдентификаторПриложения;
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(АдресВХранилище, Ключи);

КонецФункции

#Область РаботаСЯндексАвторизацией

// Формирует адрес для интерактивного запроса кода подтверждения.
// 
// Параметры:
//   КодПриложения - Строка - код приложения Яндекс, для которого запрашивается доступ.
// 
// Возвращаемое значение:
//   Строка - адрес для перехода на страницу запроса кода подтверждения.
//
Функция АдресЗапросаКодаПодтверждения(КодПриложения) Экспорт

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "authorizeRequest");
	ОбъектXDTO = ФабрикаXDTO.Создать(ТипОбъекта);
	ОбъектXDTO.client_id = КодПриложения;

	ПараметрыСоединения = ПараметрыРаботыССервисомАвторизации();

	Метод = "authorize";

	СтрокаСоединения = ПротоколПоУмолчанию(ПараметрыСоединения.Порт) + ПараметрыСоединения.Сервер + "/" + Метод + ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта);

	Возврат СтрокаСоединения;

КонецФункции

// Запрашивает токены авторизации приложения по коду подтверждения от пользователя.
// 
// Параметры:
//   Приложение       - Структура - описание приложения Яндекс. 
//                        Содержит ключи: client_id, client_secret.
//   КодПодтверждения - Строка - код подтверждения, указанный пользователем.
// 
// Возвращаемое значение:
//   Структура - результат обмена кода подтверждения на ключи доступа для приложения.
//               Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ЗапроситьТокеныАвторизацииПоКоду(Приложение, КодПодтверждения) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.code = КодПодтверждения;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.';
			|en = 'An error occurred when authorizing with this confirmation code.
			|For more information, see the event log.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

// Запрашивает токены авторизации приложения по токену обновления.
// 
// Параметры:
//   Приложение      - Структура - описание приложения Яндекс. 
//                       Содержит ключи: client_id, client_secret.
//   ТокенОбновления - Строка - токен обновления, полученный при предыдущем запросе.
// 
// Возвращаемое значение:
//   Структура - результат обновления токенов доступа для приложения.
//               Содержит ключи: Отказ, token_type, access_token, expires_in, refresh_token.
//
Функция ОбновитьТокеныАвторизации(Приложение, ТокенОбновления) Экспорт

	ПараметрыРаботы = ПараметрыРаботыССервисомАвторизации();

	ТипОбъекта = ФабрикаXDTO.Тип("oauth.yandex.ru", "refreshRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.grant_type = "refresh_token";
	ЗапросОбъект.refresh_token = ТокенОбновления;
	ЗапросОбъект.client_id = Приложение.client_id;
	ЗапросОбъект.client_secret = Приложение.client_secret;

	ТелоЗапроса = ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта, Ложь);
	Метод = "token";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Content-Length", СтрДлина(ТелоЗапроса));

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос);

	ПараметрыОтвета = Новый Структура("Отказ, token_type, access_token, expires_in, refresh_token", Истина);

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ПараметрыОтвета;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("oauth.yandex.ru", "tokenResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыОтвета, РезультатПриведения.Объект);
			ПараметрыОтвета.Отказ = Ложь;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.error_description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При авторизации с данным кодом подтверждения возникла ошибка.
			|Подробности см. в журнале регистрации.';
			|en = 'An error occurred when authorizing with this confirmation code.
			|For more information, see the event log.'"));
	КонецЕсли;

	Возврат ПараметрыОтвета;

КонецФункции

#КонецОбласти

#Область РаботаСЯндексДиском

// Получает из хранилища токен доступа, выданный приложению для работы с сервисом Яндекс.Диск.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
// 
// Возвращаемое значение:
//   Строка - токен доступа приложения.
//
Функция ПолучитьТокенДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса) Экспорт

	ПараметрыАвторизацииПриложения = ПараметрыПриложенияЯндексДиск();
	ТокенДоступа = ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыАвторизацииПриложения, "access_token");

	Возврат ТокенДоступа;

КонецФункции  

// Получает из хранилища дату окончания срока действия доступа, выданному приложению для работы с сервисом Яндекс.Диск.
// 
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - используется для формирования адреса в 
//                                 хранилище.
// 
// Возвращаемое значение:
//   Дата - дата окончания срока действия доступа.
//
Функция ПолучитьДатуДействияДоступаЯндексДиск(УчетнаяЗаписьМаркетплейса) Экспорт

	ПараметрыАвторизацииПриложения = ПараметрыПриложенияЯндексДиск();
	ДатаДействия = ПолучитьДанныеПриложенияИзХранилища(УчетнаяЗаписьМаркетплейса, ПараметрыАвторизацииПриложения, "expires_in");
	
	Если НЕ ЗначениеЗаполнено(ДатаДействия) Тогда 
		ДатаДействия = Дата('00010101');
	КонецЕсли;
	
	Возврат ДатаДействия;

КонецФункции

// Получает метаинформацию о файле или каталоге с помощью запроса GET к методу v1/disk/resources.
// 
// Параметры:
//   ТокенДоступа          - Строка - access_token приложения.
//   ПрисоединенныйФайл    - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, по которому запрашивается информация 
//                           от сервиса.
//   СписокПолей           - Строка - имена реквизитов, разделенные запятой. Подробности см. в описании метода API. 
//   ПовторятьПриОшибке404 - Число  - количество повторений при получении временной ошибки (код 404).
// 
// Возвращаемое значение:
//   Структура - содержит свойство "Отказ" (булево) и значения запрошенных полей.
//
Функция ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, СписокПолей = "name", ПовторятьПриОшибке404 = 0) Экспорт

	СписокКлючей = "Отказ, КодСостояния" + ?(ПустаяСтрока(СписокПолей), "", ", ") + СписокПолей;

	ИнформацияОРесурсе = Новый Структура(СписокКлючей, Истина);
	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = СписокПолей;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	ИнформацияОРесурсе.КодСостояния = РезультатОтправки.КодСостояния;

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат ИнформацияОРесурсе;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "metainfoResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
			ЗаполнитьЗначенияСвойств(ИнформацияОРесурсе, ОтветОбъект);
			ИнформацияОРесурсе.Отказ = Ложь;
		КонецЕсли; 
	ИначеЕсли РезультатОтправки.КодСостояния = 404 Тогда  
		ПовторятьПриОшибке404 = ПовторятьПриОшибке404 + 1;
		ОбщегоНазначенияБТС.Пауза(1);
		Если ПовторятьПриОшибке404 < 3 Тогда   
			ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, СписокПолей = "name", ПовторятьПриОшибке404);  
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Возврат ИнформацияОРесурсе;

КонецФункции

// Загружает файл на сервис Яндекс.Диск в папку приложения и публикует его.
// 
// Параметры:
//   ТокенДоступа          - Строка - access_token приложения.
//   ПрисоединенныйФайл    - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, который загружается на сервис.
//   ОбновитьФайлНаСервисе - Булево - признак обновления.
// 
// Возвращаемое значение:
//   Структура - содержит путь к файлу на сервисе, публичную ссылку и признак отказа в выполнении операции.
//
Функция ЗагрузитьФайлНаСервис(ТокенДоступа, ПрисоединенныйФайл, ОбновитьФайлНаСервисе = Истина) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();
	РезультатПубликации = Новый Структура("ПутьКФайлуНаЯДиске, ПубличнаяСсылка, Отказ", "", "", Истина);
	ПутьКФайлуНаЯДиске = ПутьКРесурсу(ПрисоединенныйФайл);
	РезультатПубликации.ПутьКФайлуНаЯДиске = ПутьКФайлуНаЯДиске;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл);
	Если ИнформацияОРесурсе.КодСостояния = 200 И Не ОбновитьФайлНаСервисе Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
		Возврат РезультатПубликации;
	КонецЕсли;

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources/upload";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "GET");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "uploadGetResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ОтветОбъект.href);

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "image/jpeg");

	ПараметрыСоединения = ПараметрыСоединения();
	ПараметрыСоединения.Сервер = СтруктураURI.Хост;
	ПараметрыСоединения.Порт = СтруктураURI.Порт;
	ТелоЗапроса = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл, Ложь);
	Если ТелоЗапроса = Неопределено Тогда
		Возврат РезультатПубликации;
	КонецЕсли;

	Метод = СтруктураURI.ПутьНаСервере;

	Запрос = ЗапросHTTP(Метод, ТелоЗапроса, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыСоединения, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		ШаблонОшибки = НСтр("ru = 'При выполнении метода API %1 возникла ошибка: (%2) %3';
							|en = 'An error occurred when executing the %1 API method: (%2) %3'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;
	ЗапросОбъект.fields = "public_key";

	Метод = "v1/disk/resources/publish";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "PUT");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	Если РезультатОтправки.КодСостояния = 200 Тогда
		РезультатПриведения = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "publishResponse"));
		Если РезультатПриведения.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатПриведения.ТекстОшибки);
			ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат РезультатПубликации;
		Иначе
			ОтветОбъект = РезультатПриведения.Объект;
		КонецЕсли;
	Иначе
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат РезультатПубликации;
	КонецЕсли;

	ИнформацияОРесурсе = ПолучитьИнформациюОРесурсе(ТокенДоступа, ПрисоединенныйФайл, "public_url");

	Если Не ИнформацияОРесурсе.Отказ Тогда
		РезультатПубликации.ПубличнаяСсылка = ИнформацияОРесурсе.public_url;
		РезультатПубликации.Отказ = Ложь;
	КонецЕсли;
	Возврат РезультатПубликации;

КонецФункции

// Удаляет ресурс с сервиса Яндекс.Диск из папки приложения.
// 
// Параметры:
//   ТокенДоступа       - Строка - access_token приложения.
//   ПутьКФайлуНаЯДиске - Строка - путь к файлу на сервисе, возвращается функцией ЗагрузитьФайлНаСервис().
// 
// Возвращаемое значение:
//   Булево - признак успешного завершения операции удаления файла.
//
Функция УдалитьФайлССервиса(ТокенДоступа, ПутьКФайлуНаЯДиске) Экспорт

	ПараметрыРаботы = ПараметрыРаботыСЯндексДиском();

	ТипОбъекта = ФабрикаXDTO.Тип("cloud-api.yandex.net/v1/disk", "deleteRequest");
	ЗапросОбъект = ФабрикаXDTO.Создать(ТипОбъекта);
	ЗапросОбъект.path = ПутьКФайлуНаЯДиске;

	Метод = "v1/disk/resources";

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/json");
	Заголовки.Вставить("Authorization", "OAuth " + ТокенДоступа);

	Запрос = ЗапросHTTP(Метод + ПараметрыЗапроса(ЗапросОбъект, ТипОбъекта),, Заголовки);
	РезультатОтправки = ВыполнитьЗапросHTTP(ПараметрыРаботы, Запрос, "DELETE");

	Если РезультатОтправки.Отказ Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибки, Метод, РезультатОтправки.ТекстОшибки);
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗапросУспешноОбработан(РезультатОтправки.КодСостояния) Тогда
		РезультатПриведенияКОшибке = ПривестиКТипуОбъекта(РезультатОтправки.ТекстОтвета, ПараметрыРаботы.ТипОбъектОшибка);
		Если РезультатПриведенияКОшибке.Отказ Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, РезультатОтправки.КодСостояния, РезультатОтправки.ТекстОтвета);
		Иначе
			ОтветОбъект = РезультатПриведенияКОшибке.Объект;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыРаботы.ШаблонОшибкиСКодом, Метод, ОтветОбъект.error, ОтветОбъект.description);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ОписаниеСобытияДляЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет загрузку информации о продажах товаров через торговую площадку. Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ЗагрузитьИнформациюОПродажахТоваровЧерезТорговуюПлощадку(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаИнформацииОПродажахТоваровЧерезТорговуюПлощадку);

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ЗагрузитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

// Выполняет обновление информации о продажах товаров через торговую площадку. Используется регламентным заданием.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//
Процедура ОбновитьИнформациюОПродажахТоваровЧерезТорговыеПлощадки(УчетнаяЗаписьМаркетплейса) Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеИнформацииОПродажахТоваровЧерезСкладыOzon);

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьИнформациюОПродажахТоваровРегламентнымЗаданием(УчетнаяЗаписьМаркетплейса);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций;
//  - возможность выполнения в различных режимах работы программы;
//  - прочие параметры.
//
// Параметры:
//   Настройки - см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.Настройки.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	// Яндекс Маркет
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаОстатковТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ВыгрузкаУстановленныхЦенЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ЗагрузкаРекомендованныхЦенЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ОтправкаНаМодерациюСвязейТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ПолучениеРекомендацийПоСклейкеТовараЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексМаркет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
	// Ozon
	Настройка                                         = Настройки.Добавить();
	Настройка.РегламентноеЗадание                     = Метаданные.РегламентныеЗадания.ПолучениеСтатусовМодерацииТоваровЯндексМаркет;
	Настройка.ФункциональнаяОпция                     = Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСOzon;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Истина;
	Настройка.ДоступноВМоделиСервиса                  = Истина;
	Настройка.РаботаетСВнешнимиРесурсами              = Истина;
	Настройка.Параметризуется                         = Истина;
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииСерверныхОповещений
Процедура ПриДобавленииСерверныхОповещений(Оповещения) Экспорт
	
	Оповещение                    = СерверныеОповещения.НовоеСерверноеОповещение("ИнтеграцияСЯндексМаркетСервер.ОбновитьДанные");
	Оповещение.ИмяМодуляПолучения = "ИнтеграцияСМаркетплейсамиКлиент";
	Оповещение.ПериодПроверки     = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
	Оповещение                    = СерверныеОповещения.НовоеСерверноеОповещение("ИнтеграцияСМаркетплейсомOzonСервер.ОбновитьДанные");
	Оповещение.ИмяМодуляПолучения = "ИнтеграцияСМаркетплейсамиКлиент";
	Оповещение.ПериодПроверки     = 60;
	Оповещения.Вставить(Оповещение.Имя, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получение двоичных данных по адресу URL, например изображения.
//
// Параметры:
//   ВнешнийАдрес - Строка - адрес URL картинки.
// 
// Возвращаемое значение:
//   См. ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище.
//
Функция ДанныеФайлаПоВнешнейСсылке(Знач ВнешнийАдрес) Экспорт
	
	Ответ = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ВнешнийАдрес, Неопределено, Истина);
	Возврат Ответ;
	
КонецФункции

// Проверяет является ли указанное значение файлом картинки.
// 
// Параметры:
//   ПроверяемоеЗначение - ДвоичныеДанные, Строка - данные картинки или адрес во временном хранилище.
// 
// Возвращаемое значение:
//   Булево - это файл картинки.
//
Функция ЭтоФайлКартинки(ПроверяемоеЗначение) Экспорт
	
	ЭтоФайлКартинки = Истина;
	ДвоичныеДанныеИзображения = ПроверяемоеЗначение;
	
	Если ЭтоАдресВременногоХранилища(ПроверяемоеЗначение) Тогда
		ДвоичныеДанныеИзображения = ПолучитьИзВременногоХранилища(ПроверяемоеЗначение);
	КонецЕсли;
	
	МеханизмКартинка = Новый Картинка(ДвоичныеДанныеИзображения);
	Если МеханизмКартинка.Формат() = Неопределено 
			Или МеханизмКартинка.Формат() = ФорматКартинки.НеизвестныйФормат Тогда
		ЭтоФайлКартинки = Ложь;
	КонецЕсли;
	
	Возврат ЭтоФайлКартинки;
	
КонецФункции

// Добавляет реквизит формы УчетнаяЗаписьМаркетплейса и заполняет его значением из параметров формы.
// Вызывается из форм обработок ПодборТоваровПоОтбору и ПодборТоваровВДокументПродажи.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - изменяемая форма.
//
Процедура ДобавитьЗаполнитьУчетнуюЗапись(Форма) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;

	РеквизитУчетнаяЗапись = Новый РеквизитФормы("УчетнаяЗаписьМаркетплейса", Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов"));
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитУчетнаяЗапись);
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	Форма.Параметры.Свойство("УчетнаяЗаписьМаркетплейса", Форма.УчетнаяЗаписьМаркетплейса);

КонецПроцедуры

// Заполняет параметр учетной записи в компоновщике настроек.
//
// Параметры:
//   СтруктураНастроек - Структура - настройки:
//     * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки КД, в которых содержатся необходимые 
//                               параметры.
//   Компоновщик       - КомпоновщикНастроекКомпоновкиДанных - настройки КД, для которых требуется установить параметры.
//
Процедура ЗаполнитьУчетнуюЗапись(СтруктураНастроек, Компоновщик) Экспорт

	Если СтруктураНастроек.КомпоновщикНастроек <> Неопределено Тогда
		ПараметрУчетнаяЗапись = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(СтруктураНастроек.КомпоновщикНастроек.Настройки, "УчетнаяЗаписьМаркетплейса");
		Если ПараметрУчетнаяЗапись <> Неопределено 
				И ЗначениеЗаполнено(ПараметрУчетнаяЗапись.Значение) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				Компоновщик.Настройки, "УчетнаяЗаписьМаркетплейса",
				ПараметрУчетнаяЗапись.Значение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Дополняет схему компоновки данных для маркетплейсов. 
// Выполняет инъекцию в текст запроса СКД для ценообразования. Вызывается из обработки ПодборТоваровПоОтбору.
// 
// Параметры:
//   СтруктураНастроек     - Структура - данные, структура настроек;
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - модифицируемая схема.
//
Процедура ДополнитьСКДДляМаркетплейсов(СтруктураНастроек, СхемаКомпоновкиДанных) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");
	ИспользуетсяЦенообразование25       = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураНастроек.УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");

	РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];

	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	СхемаЗапроса.УстановитьТекстЗапроса(РабочийНаборДанных.Запрос);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];
	
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
		УсловиеСоединения =
			"(СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
			|И (СтатусыПубликации.Номенклатура = ИсходныеДанныеПоследнийЗапрос.Номенклатура)
			|И (СтатусыПубликации.Характеристика = ИсходныеДанныеПоследнийЗапрос.Характеристика)
			|И &УсловиеПоУпаковке
			|И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)";
		
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
		УсловиеСоединения =
			"(СтатусыПубликации.УчетнаяЗапись= &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.Номенклатура = ИсходныеДанныеПоследнийЗапрос.Номенклатура)
			|И (СтатусыПубликации.Характеристика = ИсходныеДанныеПоследнийЗапрос.Характеристика)
			|И &УсловиеПоУпаковке";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусыПубликации = ЗапросПакета.ДоступныеТаблицы.Найти(ИмяТаблицы);
	Если ОператорВыбрать.Источники.НайтиПоИмени(ИмяТаблицы) <> Неопределено Тогда
		Возврат;	// Инъекция уже выполнена.
	КонецЕсли;
	
	ИсточникСтатусыПубликации = ОператорВыбрать.Источники.Добавить(ТаблицаСтатусыПубликации, "СтатусыПубликации");
	ИсточникСтатусыПубликации.Соединения.Очистить();

	Если ИспользуетсяЦенообразование25 Тогда
    	УсловиеСоединения = СтрЗаменить(УсловиеСоединения, "&УсловиеПоУпаковке", "(ВЫБОР
			|		КОГДА СтатусыПубликации.Упаковка = СтатусыПубликации.Номенклатура.ЕдиницаИзмерения
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ СтатусыПубликации.Упаковка
			|	КОНЕЦ = ИсходныеДанныеПоследнийЗапрос.Упаковка)");
	Иначе
		УсловиеСоединения = СтрЗаменить(УсловиеСоединения, "&УсловиеПоУпаковке", "ИСТИНА");
	КонецЕсли;

	Если ОператорВыбрать.Источники[0].Соединения.Добавить(ИсточникСтатусыПубликации, УсловиеСоединения) Тогда
		ПоследнееСоединение = ОператорВыбрать.Источники[0].Соединения[ОператорВыбрать.Источники[0].Соединения.Количество() - 1];
		ПоследнееСоединение.ОбязательноеСоединение = Ложь;
		ПоследнееСоединение.НачалоГруппыНеобязательныхСоединений = Истина;

		ТекстПоля = "НЕ СтатусыПубликации.Номенклатура ЕСТЬ NULL";
		ПсевдонимПоля = "ЯвляетсяТоваромМаркетплейса";
		ПолеПубликуетсяНаМП = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
		ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяНаМП);
		ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

		КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяНаМП);
		КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;
		ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

		РабочийНаборДанных.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();

		ПолеНабора             = РабочийНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Поле        = ПсевдонимПоля;
		ПолеНабора.ПутьКДанным = ПсевдонимПоля;

		ПараметрУчетнаяЗапись = СхемаКомпоновкиДанных.Параметры.Добавить();
		ПараметрУчетнаяЗапись.Имя = "УчетнаяЗаписьМаркетплейса";
		ПараметрУчетнаяЗапись.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УчетныеЗаписиМаркетплейсов");
		ПараметрУчетнаяЗапись.ОграничениеИспользования = Истина;
		ПараметрУчетнаяЗапись.ВключатьВДоступныеПоля = Ложь;

		ПараметрыОтбора = Новый Структура("ВПользовательскиеНастройки", Истина);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, ПсевдонимПоля, Истина, ВидСравненияКомпоновкиДанных.Равно, Ложь, ПараметрыОтбора);
	КонецЕсли;

КонецПроцедуры

// Дополняет текст запроса для маркетплейсов.
// Выполняет инъекцию в текст запроса для подбора товаров. Вызывается из обработки ПодборТоваровВДокументПродажи.
//
// Параметры:
//   ШаблонТекстЗапроса        - Строка - текст запроса для динамического списка.
//   ТипСписка                 - Строка - может принимать значения: "СписокНоменклатура", "СписокХарактеристики", 
//                                 "СписокНоменклатураПартнера".
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//
Процедура ДополнитьТекстЗапросаДляМаркетплейсов(ШаблонТекстЗапроса, ТипСписка, УчетнаяЗаписьМаркетплейса) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса");

	Если ТипСписка <> "СписокНоменклатура" И ТипСписка <> "СписокХарактеристики" Тогда
		Возврат;
	КонецЕсли;

	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.РежимКомпоновкиДанных = Истина;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонТекстЗапроса);

	ЗапросПакета = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	ОператорВыбрать = ЗапросПакета.Операторы[0];

	КолонкаНоменклатура = ЗапросПакета.Колонки.Найти("Номенклатура");
	ЗначениеПоляНоменклатура = Строка(КолонкаНоменклатура.Поля[0]);
	КолонкаХарактеристика = ЗапросПакета.Колонки.Найти("Характеристика");
	Если КолонкаХарактеристика = Неопределено Тогда
		ЗначениеПоляХарактеристика = "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	Иначе
		ЗначениеПоляХарактеристика = Строка(КолонкаХарактеристика.Поля[0]);
	КонецЕсли;
	КолонкаУпаковка = ЗапросПакета.Колонки.Найти("Упаковка");
	ЗначениеПоляУпаковка = Строка(КолонкаУпаковка.Поля[0]);

	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon";
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(СтатусыПубликации.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Товар))
			|И (СтатусыПубликации.Номенклатура = %1)
			|И (СтатусыПубликации.Характеристика = %2)
			|И (СтатусыПубликации.Упаковка = %3)
			|И (СтатусыПубликации.ОбъектПубликации = НЕОПРЕДЕЛЕНО)",
			ЗначениеПоляНоменклатура, ЗначениеПоляХарактеристика, ЗначениеПоляУпаковка);
		
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
		ИмяТаблицы = "РегистрСведений.СтатусыПубликацииТоваровЯндексМаркет";
		УсловиеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(СтатусыПубликации.УчетнаяЗапись = &УчетнаяЗаписьМаркетплейса)
			|И (СтатусыПубликации.Номенклатура = %1)
			|И (СтатусыПубликации.Характеристика = %2)
			|И (ВЫБОР
			|		КОГДА СтатусыПубликации.Упаковка = СтатусыПубликации.Номенклатура.ЕдиницаИзмерения
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|		ИНАЧЕ СтатусыПубликации.Упаковка
			|	КОНЕЦ = %3)",
			ЗначениеПоляНоменклатура, ЗначениеПоляХарактеристика, ЗначениеПоляУпаковка);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусыПубликации = ЗапросПакета.ДоступныеТаблицы.Найти(ИмяТаблицы);
	Если ОператорВыбрать.Источники.НайтиПоИмени(ИмяТаблицы) <> Неопределено Тогда
		Возврат;	// Инъекция уже выполнена.
	КонецЕсли;
	ИсточникСтатусыПубликации = ОператорВыбрать.Источники.Добавить(ТаблицаСтатусыПубликации);
	ИсточникСтатусыПубликации.Источник.Псевдоним = "СтатусыПубликации";
	ИсточникСтатусыПубликации.Соединения.Очистить();

	ОператорВыбрать.Источники[0].Соединения.Добавить(ИсточникСтатусыПубликации, УсловиеСоединения);

	ТекстПоля = "НЕ СтатусыПубликации.Номенклатура ЕСТЬ NULL";
	ПсевдонимПоля = "ПубликуетсяНаМаркетплейсе";
	ПолеПубликуетсяНаМП = ОператорВыбрать.ВыбираемыеПоля.Добавить(ТекстПоля);
	ВыражениеПубликуетсяНаМП = ОператорВыбрать.ВыраженияОтбораКомпоновкиДанных.Добавить(ПолеПубликуетсяНаМП);
	ВыражениеПубликуетсяНаМП.Псевдоним = ПсевдонимПоля;

	КолонкиСхемыЗапроса = ЗапросПакета.Колонки.Найти(ПолеПубликуетсяНаМП);
	КолонкиСхемыЗапроса.Псевдоним = ПсевдонимПоля;

	ЗапросПакета.ПоляВыбораКомпоновкиДанных.Добавить(КолонкиСхемыЗапроса);

	ШаблонТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры

// Устанавливает условное оформление динамических списков.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма клиентского приложения, для которой устанавливается условное оформление.
//
Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма) Экспорт

	ИспользоватьИнтеграциюСOzon         = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСOzon");
	ИспользоватьИнтеграциюСЯндексМаркет = ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСЯндексМаркет");

	Если Не ИспользоватьИнтеграциюСOzon 
			И Не ИспользоватьИнтеграциюСЯндексМаркет Тогда
		Возврат;
	КонецЕсли;

	Форма.СписокНоменклатура.УстановитьОбязательноеИспользование("ПубликуетсяНаМаркетплейсе", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокСтандартныйПоискНоменклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокРасширенныйПоискНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ПубликуетсяНаМаркетплейсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);

	Форма.СписокХарактеристики.УстановитьОбязательноеИспользование("ПубликуетсяНаМаркетплейсе", Истина);

	Элемент = Форма.УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокСтандартныйПоискХарактеристики.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Форма.Элементы.СписокРасширенныйПоискХарактеристики.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ПубликуетсяНаМаркетплейсе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыгрузкаЗагрузкаДанныхСлужебныеПроцедурыИФункции

// Конструктор определения используемых методов. Заполняется в модуле менеджера объекта метаданных.
// Описание синтаксиса процедур / функций см. в ИспользуемыеМетодыМенеджераОбъектаМетаданных().
//
// Возвращаемое значение:
//   Структура - список параметров:
//     * ВыполнитьПроверкуИнформацииПоКолонкам                    - Булево - признак наличия функции.
//            Используется для проверки наличия различий в сохраненных пользователем настройках по колонкам
//            и базовых настройках, заданных на этапе разработки, с целью восстановления стандартных настроек
//            при наличии расхождений.
//              С параметрами:
//                ИнформацияПоКолонкам - см. ИнициализироватьТаблицуИнформацииПоКолонкам.
//                ИмяТабличнойЧасти    - Строка - имя загружаемой табличной части объекта метаданных,
//                                         например: "ДанныеПоставок".
//              С возвращаемым значением:
//                Булево - результат проверки.
//     * УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть        - Булево - признак наличия процедуры.
//            Используется для заполнения основных настроек.
//              С параметрами:
//              Параметры - смотри ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//     * ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных    - Булево - признак наличия процедуры.
//            Используется для добавления условного оформления в форму.
//              С параметрами:
//                Форма             - ФормаКлиентскогоПриложения - форма, для которой необходимо дополнить
//                                      условное оформление.
//                ИмяТабличнойЧасти - Строка - имя загружаемой табличной части объекта метаданных,
//                                      например: "ДанныеПоставок".
//     * НастроитьДинамическийСписокОтображенияРезультатаЗагрузки - Булево - признак наличия процедуры.
//            Используется изменения текста запроса динамического списка и заполнения его свойств и параметров.
//              С параметрами:
//                СвойстваДинамическогоСписка - Структура - см. ОбщегоНазначения.СтруктураСвойствДинамическогоСписка.
//                ИмяТабличнойЧасти - Строка - имя загружаемой табличной части объекта метаданных,
//                                      например: "ДанныеПоставок".
//     * ПолучитьДанныеИнтеграционнымиМетодами                    - Булево - признак наличия функции.
//            Используется для получения данных по API.
//              С параметрами:
//                Параметры                  - см. ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//              С возвращаемым значением:
//                ТаблицаЗначений - таблица результата сопоставления.
//     * СопоставитьЗагружаемыеДанные                             - Булево - признак наличия функции.
//            Используется для сопоставления данных, загружаемых в табличную часть объекта метаданных, с данными в ИБ.
//              С параметрами:
//                ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения
//                                               загруженных сопоставленных данных.
//                ДанныеИзФайла              - ТаблицаЗначений - динамически подготовленная таблица с загруженными данными.
//                Параметры                  - см. ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//              С возвращаемым значением:
//                ТаблицаЗначений - таблица результата сопоставления.
//     * ЗаписатьЗагружаемыеДанные                                - Булево - признак наличия процедуры.
//            Используется для записи загружаемых данных в учетную систему 1С.
//              С параметрами:
//                ТаблицаСопоставленияДанных - ТаблицаЗначений - динамически подготовленная таблица для заполнения
//                                               загруженных сопоставленных данных.
//                Параметры                  - Структура - параметры, переданные из формы-источника.
//                СсылкаДляОбновленияДанных  - ДокументСсылка, Неопределено - ссылка для заполнения загружаемыми данными.
//              С возвращаемым значением:
//                Структура - смотри РезультатЗаписиЗагружаемыхДанных.
//     * НаименованиеСохраняемогоФайла                            - Булево - признак наличия функции.
//            Используется для формирования наименования присоединенного файла в зависимости от типа ссылки.
//              С параметрами:
//                СсылкаНаОбъект   - ДокументСсылка - ссылка на объект, для которого нужно получить наименование файла.
//                ДляВыгрузкиВФайл - Булево - признак формирования наименования файла для сохранения
//                                     в файловую систему пользователя.
//              С возвращаемым значением:
//                Строка - наименование файла.
//     * ЗаполнитьШапкуМакета                                     - Булево - признак наличия процедуры.
//            Используется для заполнения шапки выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ЗаполнитьЗаголовокТаблицыМакета                          - Булево - признак наличия процедуры.
//            Используется для заполнения заголовка таблицы выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ПолучитьДанныеСтрокТаблицыМакета                         - Булево - признак наличия функции.
//            Используется для подготовки коллекции данных по строкам таблицы выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ВывестиТаблицуМакета                                     - Булево - признак наличия процедуры.
//            Используется для вывода таблицы макета выгружаемого табличного документа,
//            если подготовки данных таблицы и стандартного вывода не достаточно.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//     * ЗаполнитьПодвалМакета                                    - Булево - признак наличия процедуры.
//            Используется для заполнения подвала выгружаемого табличного документа.
//            См. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
//
Функция ИспользуемыеМетодыМенеджераОбъектаМетаданных() Экспорт

	ИспользуемыеМетоды = Новый Структура;

	// Основные методы.
	ИспользуемыеМетоды.Вставить("ВыполнитьПроверкуИнформацииПоКолонкам",                    Ложь);
	ИспользуемыеМетоды.Вставить("УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть",        Ложь);
	ИспользуемыеМетоды.Вставить("ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных",    Ложь);
	ИспользуемыеМетоды.Вставить("НастроитьДинамическийСписокОтображенияРезультатаЗагрузки", Ложь);
	ИспользуемыеМетоды.Вставить("ПолучитьДанныеИнтеграционнымиМетодами",                    Ложь);
	ИспользуемыеМетоды.Вставить("СопоставитьЗагружаемыеДанные",                             Ложь);
	ИспользуемыеМетоды.Вставить("ЗаписатьЗагружаемыеДанные",                                Ложь);

	// Выгрузка в файл - см. СформироватьТабличныйДокументПоИмениМакетаСШаблоном.
	ИспользуемыеМетоды.Вставить("НаименованиеСохраняемогоФайла",                            Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьШапкуМакета",                                     Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьЗаголовокТаблицыМакета",                          Ложь);
	ИспользуемыеМетоды.Вставить("ПолучитьДанныеСтрокТаблицыМакета",                         Ложь);
	ИспользуемыеМетоды.Вставить("ВывестиТаблицуМакета",                                     Ложь);
	ИспользуемыеМетоды.Вставить("ЗаполнитьПодвалМакета",                                    Ложь);

	Возврат ИспользуемыеМетоды;

КонецФункции

// Возвращает признак использования запрашиваемого метода.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//   ИмяМетода            - Строка - имя проверяемого метода.
//
// Возвращаемое значение:
//   Булево.
//
Функция МетодКонфигурацииИспользуется(ИмяОбъектаМетаданных, ИмяМетода) Экспорт

	МетодИспользуется = Ложь;

	МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаМетаданных);
	Методы = МенеджерОбъекта.ОпределитьИспользуемыеМетоды();

	Попытка
		МетодИспользуется = Методы[ИмяМетода];
	Исключение
		МетодИспользуется = Ложь;
	КонецПопытки;

	Возврат МетодИспользуется;

КонецФункции

// Конструктор параметров шапки макета.
//
// Возвращаемое значение:
//   Структура:
//     * Параметры - Структура - данные по параметрам, где ключ - имя параметра, значение - значение параметра.
//     * Шаблоны   - Массив Из Структура - данные по каждому шаблону в шапке макета, см. ДанныеШаблона.
//
Функция ПараметрыШапки() Экспорт

	ПараметрыШапки = Новый Структура;
	ПараметрыШапки.Вставить("Параметры", Новый Структура);
	ПараметрыШапки.Вставить("Шаблоны",   Новый Массив);

	Возврат ПараметрыШапки;

КонецФункции

// Конструктор заполняемых данных шаблона.
//
// Возвращаемое значение:
//   Структура:
//     * Шаблон               - Строка - содержимое ячейки шапки макета.
//     * КлючевыеСловаШаблона - Массив Из Строка - слова, заключенные в эталонном макете объекта метаданных в фигурные 
//                                скобки, например {отчет}. Состав этих слов должен полностью совпадать в загружаемом 
//                                макете с эталонным.
//     * ПараметрыШаблона     - Массив Из Строка - слова, заключенные в эталонном макете объекта метаданных в фигурные 
//                                скобки, например: [НачалоПериода]. Параметры определяются в загружаемом макете в 
//                                порядке расположения между ключевыми словами.
//     * ШиринаОбластиПоиска  - Число - количество ячеек по горизонтали.
//     * ВысотаОбластиПоиска  - Число - количество ячеек по вертикали.
//
Функция ДанныеШаблона()

	ДанныеШаблона = Новый Структура;
	ДанныеШаблона.Вставить("Шаблон",               "");
	ДанныеШаблона.Вставить("КлючевыеСловаШаблона", Новый Массив);
	ДанныеШаблона.Вставить("ПараметрыШаблона",     Новый Массив);
	ДанныеШаблона.Вставить("ШиринаОбластиПоиска",  0); // Сколько колонок нужно читать для шаблона.
	ДанныеШаблона.Вставить("ВысотаОбластиПоиска",  0); // Сколько строк нужно читать для шаблона.

	Возврат ДанныеШаблона;

КонецФункции

// Конструктор структуры параметров для формы Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных.
//
// Возвращаемое значение:
//   Структура - список параметров:
//    * ИмяОбъектаМетаданных - Строка - имя объекта метаданных, из которого берутся данные для выгрузки/загрузки.
//    * ИмяТабличнойЧасти - Строка - имя таблицы-источника колонок из указанного объекта метаданных.
//    * ИмяМакетаСШаблоном - Строка - имя макета-источника данных, ожидаемых при загрузке.
//    * ОбязательныеКолонки - Массив из Строка - имена колонок, заполнение которых проверяется.
//          Строки с незаполненными значениями будут пропущены при записи в ИБ.
//    * ЗаполняемыеПриЗагрузкеКолонки - Соответствие Из КлючИЗначение - ключом является имя колонки, 
//          значением синоним колонки.
//          Добавляются доступные для редактирования пользователем реквизиты из состава объекта метаданных,
//          а также служебные невидимые реквизиты (отсутствующие в реквизитах объекта метаданных),
//          необходимые на этапе сопоставления данных.
//    * ТипыДанныхКолонок - Соответствие из КлючИЗначение - ключом является имя колонки, значением тип значения колонки.
//          Добавляются типы реквизитов для дальнейшей обработки данных.
//          Если для реквизита тип не добавлен, то по умолчанию используется тип Строка.
//    * ОсновныеКолонки - Массив из Строка - имена колонок, которые можно отфильтровать вариантом "Основные".
//    * ПустыеВИтогахКолонки - Массив из Строка - имена колонок для определения строки итогов.
//          Для указанных колонок в строке итогов всегда не заполнены значения.
//    * КомандаИзменитьПоведениеЭлементовФормы - Строка - имя команды изменения поведения элементов формы.
//          Например: КомандаИзменитьПоведениеЭлементовФормы =
//                         "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ИзменитьПоведениеЭлементовФормы".
//    * ПодключаемыеОбработчикиСобытий - Структура из КлючИЗначение - в ключе указывается имя поля и события, 
//          а в значении путь к процедуре/функции, выполняемой на сервере.
//          Доступны события формы Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанных:
//                 Подключаемый_ТаблицаСопоставленияДанныхПолеПриИзменении - "ПриИзменении",
//                 Подключаемый_ТаблицаСопоставленияДанныхПолеНачалоВыбора - "ПараметрыНачалаВыбора",
//                 ОбработкаОповещения для имени события "ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере" -
//                        в источнике передается имя метода.
//          Например: ОбработчикиСобытий.Вставить("ИдентификаторПубликацииПриИзменении",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПриИзменении");
//                  ОбработчикиСобытий.Вставить("СкладПараметрыНачалаВыбора",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ПолеПараметрыНачалаВыбора");
//                  ОбработчикиСобытий.Вставить("ЗаполнитьСкладыВВыделенныхСтроках",
//                    "Обработки.УправлениеПродажамиНаOzon.Подключаемый_ЗаполнитьСкладыВВыделенныхСтроках"); // Оповещение.
//    * ПодключаемыеКомандыЗаполнения - Структура из КлючИЗначение - в ключе указывается имя подключаемой команды,
//          а в значении структура с ключами с ключами "Представление, Действие, Картинка".
//          В ключе Действие указывается путь к процедуре, выполняемой на клиенте. 
//          Если в ключе Действие ничего не задано, то используется команда формы Подключаемый_ВыполнитьКоманду.
//          Если картинка задана, то она будет отображена для команды.
//          Например: ПодключаемыеКомандыЗаполнения.Вставить("ЗаполнитьСклады",
//                    Новый Структура("Представление, Действие, Картинка", НСтр("ru = 'Заполнить склады'"), ""));.
//    * ДополнительныеПараметры - Структура из КлючИЗначение - произвольный состав дополнительных параметров.
//          Может использоваться в подключаемых алгоритмах.
//    * АдресХранилища - Строка - адрес хранилища, в которое будет помещен результат загрузки.
//    * ВысотаЗаголовкаТаблицыМакетаСШаблоном - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//          Заполняется программно, по умолчанию 1.
//    * ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число -высота заголовка загружаемого макета.
//          Заполняется программно, по умолчанию 1,
//          но может быть задана при заполнении параметров формы в алгоритмах подключения.
//          Например: Параметры.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = 3;
//                  (с учетом строки с нумерацией колонок, которой нет в шапке шаблона).
//
Функция ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть() Экспорт

	ПараметрыПоУмолчанию = Новый Структура;
	ПараметрыПоУмолчанию.Вставить("ИмяОбъектаМетаданных",                     "");
	ПараметрыПоУмолчанию.Вставить("ИмяТабличнойЧасти",                        "");
	ПараметрыПоУмолчанию.Вставить("ИмяМакетаСШаблоном",                       "");
	ПараметрыПоУмолчанию.Вставить("ОбязательныеКолонки",                      Новый Массив);
	ПараметрыПоУмолчанию.Вставить("ПустыеВИтогахКолонки",                     Новый Массив);
	ПараметрыПоУмолчанию.Вставить("ЗаполняемыеПриЗагрузкеКолонки",            Новый Соответствие);
	ПараметрыПоУмолчанию.Вставить("ТипыДанныхКолонок",                        Новый Соответствие);
	ПараметрыПоУмолчанию.Вставить("ОсновныеКолонки",                          Новый Массив);
	ПараметрыПоУмолчанию.Вставить("КомандаИзменитьПоведениеЭлементовФормы",   "");
	ПараметрыПоУмолчанию.Вставить("ПодключаемыеОбработчикиСобытий",           Новый Структура);
	ПараметрыПоУмолчанию.Вставить("ПодключаемыеКомандыЗаполнения",            Новый Структура);
	ПараметрыПоУмолчанию.Вставить("ДополнительныеПараметры",                  Новый Структура);
	ПараметрыПоУмолчанию.Вставить("АдресХранилища",                           "");
	ПараметрыПоУмолчанию.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    1);
	ПараметрыПоУмолчанию.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);

	Возврат ПараметрыПоУмолчанию;

КонецФункции

// Создать таблицу со списком неоднозначностей для которых в ИБ имеется несколько подходящих вариантов данных.
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * НомерСтроки - Число  - номер строки, в которой была обнаружена неоднозначность;
//     * Колонка     - Строка - имя колонки, в которой была обнаружена неоднозначность.
//
Функция НовыйСписокНеоднозначностей() Экспорт

	СписокНеоднозначностей = Новый ТаблицаЗначений;
	СписокНеоднозначностей.Колонки.Добавить("НомерСтроки");
	СписокНеоднозначностей.Колонки.Добавить("Колонка");

	Возврат СписокНеоднозначностей;

КонецФункции

// Возвращает доступные состояния документов, отображаемые в списке загруженных документов.
//
// Возвращаемое значение:
//   Структура:
//     * СостояниеНовый      - Строка - документ новый.
//     * СостояниеОбновлен   - Строка - документ переоформлен.
//     * СостояниеНеОбновлен - Строка - документ не обновлен.
//
Функция ДоступныеСостоянияДокументов() Экспорт

	ДоступныеСостоянияДокументов = Новый Структура;
	ДоступныеСостоянияДокументов.Вставить("СостояниеНовый",      НСтр("ru = 'Создан новый';
																		|en = 'New is created'"));
	ДоступныеСостоянияДокументов.Вставить("СостояниеОбновлен",   НСтр("ru = 'Обновлен';
																		|en = 'Updated'"));
	ДоступныеСостоянияДокументов.Вставить("СостояниеНеОбновлен", НСтр("ru = 'Не обновлен';
																		|en = 'Not updated'"));

	Возврат ДоступныеСостоянияДокументов;

КонецФункции

// Получает менеджер объекта метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   СправочникМенеджер, ДокументМенеджер, ОбработкаМенеджер, РегистрСведенийМенеджер - менеджер объекта.
//
Функция МенеджерОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт

	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если МенеджерОбъекта = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается для объекта с типом: %1';
				|en = 'Cannot import data from a file to a table for object of the %1 type'"),
			ПолноеИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат МенеджерОбъекта;

КонецФункции

// Получает имя менеджера объекта метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//    Строка
//
Функция ИмяМенеджераОбъекта(ПолноеИмяОбъектаМетаданных) Экспорт

	ОбъектМетаданных = ОбъектМетаданных(ПолноеИмяОбъектаМетаданных);
	ИмяБазовогоТипа  = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);

	ЧастиИмени = СтрРазделить(ПолноеИмяОбъектаМетаданных, ".");
	ЧастиИмени[0] = ИмяБазовогоТипа;

	ИмяМенеджераОбъекта = СтрСоединить(ЧастиИмени, ".");

	Возврат ИмяМенеджераОбъекта;

КонецФункции

// Получает объект метаданных.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//
// Возвращаемое значение:
//   ОбъектМетаданных
//
Функция ОбъектМетаданных(ПолноеИмяОбъектаМетаданных) Экспорт

	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается для объекта с типом: %1';
				|en = 'Cannot import data from a file to a table for object of the %1 type'"),
			ПолноеИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ОбъектМетаданных;

КонецФункции

// Получает табличную часть объект метаданных.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - полное имя объекта метаданных.
//   ИмяТабличнойЧасти    - Строка - имя табличной части.
//
// Возвращаемое значение:
//    ОбъектМетаданных - табличная часть объекта метаданных.
//
Функция ТабличнаяЧастьОбъектаМетаданных(ИмяОбъектаМетаданных, ИмяТабличнойЧасти) Экспорт

	ОбъектМетаданных = ОбъектМетаданных(ИмяОбъектаМетаданных);
	ТабличнаяЧасть   = ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);

	Если ТабличнаяЧасть = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть %1 не поддерживается для объекта с типом: %2';
				|en = 'Cannot import data from a file to the %1 table for object of the %2 type'"),
			ИмяТабличнойЧасти,
			ИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ТабличнаяЧасть;

КонецФункции

// Формирует имя файла для выгрузки/загрузки.
//
// Параметры:
//   ИмяОбъектаМетаданных - Строка - имя объекта метаданных.
//   СсылкаНаОбъект       - ЛюбаяСсылка - ссылка объекта для формирования имени файла.
//   ДляВыгрузкиВФайл     - Булево - признак выгрузки/загрузки.
//
// Возвращаемое значение:
//   Строка - имя файла для выгрузки/загрузки.
//
Функция СформироватьИмяФайлаДляОбъектаМетаданных(Знач ИмяОбъектаМетаданных, СсылкаНаОбъект,
			ДляВыгрузкиВФайл = Ложь) Экспорт

	ИмяФайла = "";

	Если МетодКонфигурацииИспользуется(ИмяОбъектаМетаданных, "НаименованиеСохраняемогоФайла") Тогда
		МенеджерОбъекта = МенеджерОбъекта(ИмяОбъектаМетаданных);
		ИмяФайла = МенеджерОбъекта.НаименованиеСохраняемогоФайла(СсылкаНаОбъект, ДляВыгрузкиВФайл);
	КонецЕсли;

	Если ПустаяСтрока(ИмяФайла) Тогда
		Если СтрНайти(ИмяОбъектаМетаданных, ".ТабличныеЧасти.") Тогда
			ИмяОбъектаМетаданных = СтрЗаменить(ИмяОбъектаМетаданных, ".ТабличныеЧасти.", Символы.ПС);
			ЧастиИмениОбъектаМетаданных = СтрРазделить(ИмяОбъектаМетаданных, Символы.ПС);
			МетаданныеОбъекта = ТабличнаяЧастьОбъектаМетаданных(
					ЧастиИмениОбъектаМетаданных[0], ЧастиИмениОбъектаМетаданных[1]);
		Иначе
			МетаданныеОбъекта = ОбъектМетаданных(ИмяОбъектаМетаданных);
		КонецЕсли;

		Если МетаданныеОбъекта <> Неопределено Тогда
			ИмяФайла = СокрЛП(МетаданныеОбъекта.Синоним);
			Если СтрДлина(ИмяФайла) = 0 Тогда
				ИмяФайла = ИмяОбъектаМетаданных;
			КонецЕсли;
		Иначе
			ИмяФайла = ИмяОбъектаМетаданных;
		КонецЕсли;
	КонецЕсли;

	ИмяФайла = СтрЗаменить(ИмяФайла,":","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"*","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"\","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"/","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"&","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"<","");
	ИмяФайла = СтрЗаменить(ИмяФайла,">","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"|","");
	ИмяФайла = СтрЗаменить(ИмяФайла,"""","");

	Возврат ИмяФайла;

КонецФункции

// Возвращает найденный по наименованию файл из присоединенных файлов.
//
// Параметры:
//   СсылкаНаОбъект    - ЛюбаяСсылка - ссылка на объект, для которого нужен поиск присоединенного файла, должен иметь 
//                         справочник присоединенных файлов.
//   НаименованиеФайла - Строка - наименование искомого файла.
//
// Возвращаемое значение:
//   Неопределено, СправочникСсылка - ссылка на присоединенный файл из справочника присоединенных файлов ссылки на объект.
//
Функция НайтиПрисоединенныйФайл(СсылкаНаОбъект, НаименованиеФайла) Экспорт

	ПрисоединенныйФайл = Неопределено;

	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОбъект, Файлы);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.Наименование = НаименованиеФайла И Не Файл.ПометкаУдаления Тогда
			ПрисоединенныйФайл = Файл;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрисоединенныйФайл;

КонецФункции

// Записывает или обновляет присоединенный файл для объекта метаданных и возвращает ссылку на него.
//
// Параметры:
//   СсылкаНаОбъект                   - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - ссылка объект, для которого есть 
//                                        справочник присоединенных файлов.
//   ПутьКВременномуФайлу             - Строка - путь к файлу на сервере, в котором содержится записываемая информация.
//   ПутьКВыбранномуФайлу             - Строка - путь к файлу, который был выбран пользователем.
//   НаименованиеПрисоединенногоФайла - Строка - наименование, под которым будет записан файл.
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка на справочник присоединенных файлов для объекта метаданных.
//
Функция ЗаписатьПрисоединенныйФайл(СсылкаНаОбъект, ПутьКВременномуФайлу, ПутьКВыбранномуФайлу,
			НаименованиеПрисоединенногоФайла) Экспорт

	ПрисоединенныйФайл = Неопределено;

	Если Не ПустаяСтрока(ПутьКВременномуФайлу) Тогда
		Попытка
			ИмяФайла              = СтрЗаменить(ПутьКВременномуФайлу, "\", "/");
			ИмяФайла              = Сред(ИмяФайла, СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца) + 1);
			РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
				ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла));

			ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКВременномуФайлу);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ПрисоединенныйФайл = НайтиПрисоединенныйФайл(
				СсылкаНаОбъект, НаименованиеПрисоединенногоФайла);

			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ИнформацияОФайле = Новый Структура;
				ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
				ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", Неопределено);
				ИнформацияОФайле.Вставить("РасширениеБезТочки", РасширениеФайла);
				ИнформацияОФайле.Вставить("РасширениеБезТочки", РасширениеФайла);

				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ИнформацияОФайле)
			Иначе
				ДополнительныеРеквизиты = Новый Структура;
				ДополнительныеРеквизиты.Вставить("ДатаСоздания", ТекущаяУниверсальнаяДата());

				ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ДополнительныеРеквизиты);
				ПараметрыФайла.Автор                       = Пользователи.АвторизованныйПользователь();
				ПараметрыФайла.ВладелецФайлов              = СсылкаНаОбъект;
				ПараметрыФайла.ИмяБезРасширения            = НаименованиеПрисоединенногоФайла;
				ПараметрыФайла.РасширениеБезТочки          = РасширениеФайла;
				ПараметрыФайла.ГруппаФайлов                = Неопределено;
				ПараметрыФайла.ВремяИзмененияУниверсальное = ДополнительныеРеквизиты.ДатаСоздания;

				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, 
					АдресВременногоХранилищаФайла,
					,
					ПутьКВыбранномуФайлу);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(ИнтеграцияСМаркетплейсомOzonСервер.СобытиеЖурналаРегистрации() + "."
					+ НСтр("ru = 'Запись загружаемого файла в присоединенные файлы';
							|en = 'Save the file to import to attachments'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				, 
				СсылкаНаОбъект, 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

	Возврат ПрисоединенныйФайл;

КонецФункции

// Заполняет в параметрах выгрузки/загрузки данных информацию об именах колонок, их типах
// и обязательности заполнения.
//
// Параметры:
//  Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//
Процедура ЗаполнитьИнформациюПоЗагружаемымРеквизитам(Параметры) Экспорт

	ОбъектМетаданных = ТабличнаяЧастьОбъектаМетаданных(
		Параметры.ИмяОбъектаМетаданных,
		Параметры.ИмяТабличнойЧасти);

	Если ОбъектМетаданных <> Неопределено Тогда
		Для Каждого РеквизитОбъектаМетаданных Из ОбъектМетаданных.Реквизиты Цикл
			Параметры.ЗаполняемыеПриЗагрузкеКолонки.Вставить(РеквизитОбъектаМетаданных.Имя,
				РеквизитОбъектаМетаданных.Синоним);
			Параметры.ТипыДанныхКолонок.Вставить(РеквизитОбъектаМетаданных.Имя, РеквизитОбъектаМетаданных.Тип);

			Если РеквизитОбъектаМетаданных.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
				Параметры.ОбязательныеКолонки.Добавить(РеквизитОбъектаМетаданных.Имя);
				Параметры.ОсновныеКолонки.Добавить(РеквизитОбъектаМетаданных.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#Область ИнформацияПоШапкеМакета

Функция ОбластьЗаголовкаШаблонаТаблицы(Шаблон)

	Попытка
		ОбластьЗаголовокТаблицы = Шаблон.ПолучитьОбласть("ЗаголовокТаблицы");
	Исключение
		ОбластьШапкиТаблицы = Шаблон;

		ВысотаШапки = 1;
		СчетчикПустыхСтрок = 0;

		Для НомерСтроки = 1 По ОбластьШапкиТаблицы.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ОбластьШапкиТаблицы.ШиринаТаблицы Цикл
				Ячейка = ОбластьШапкиТаблицы.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
				Если ЗначениеЗаполнено(Ячейка.Текст) Тогда
					ВысотаШапки = НомерСтроки;
				КонецЕсли;
			КонецЦикла;

			Если СчетчикПустыхСтрок = 10 Тогда
				Прервать;
			ИначеЕсли ВысотаШапки <> НомерСтроки Тогда
				СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьЗаголовокТаблицы = ОбластьШапкиТаблицы.ПолучитьОбласть(1, 1, ВысотаШапки, ОбластьШапкиТаблицы.ШиринаТаблицы);
	КонецПопытки;

	Возврат ОбластьЗаголовокТаблицы;

КонецФункции

Процедура ЗаполнитьПараметрыШапки(Шаблон, ПараметрыШапки)

	ПараметрыШапки.Вставить("Параметры", Новый Структура);
	ПараметрыШапки.Вставить("Шаблоны",   Новый Массив);

	Попытка
		ДанныеШапки = Шаблон.ПолучитьОбласть("ДанныеШапки");

		Для НомерСтроки = 1 По ДанныеШапки.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ДанныеШапки.ШиринаТаблицы Цикл
				Ячейка = ДанныеШапки.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
				ТекстШаблона = Ячейка.Текст;

				Если ПустаяСтрока(ТекстШаблона) Тогда
					Продолжить;
				КонецЕсли;

				ТекстЯчейки = Ячейка.Текст;	// ТекстЯчейки = ТекстЯчейкиКРазбору(ТекстЯчейки);
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "{", Символы.ПС + "{");
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "}", "}" + Символы.ПС);
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "[", Символы.ПС + "[");
				ТекстЯчейки = СтрЗаменить(ТекстЯчейки, "]", "]" + Символы.ПС);

				ШиринаОбластиПоиска = 1;	// ШиринаОбластиПоиска = Шаблон.ШиринаТаблицы - НомерКолонки + 1; // Сколько колонок нужно читать для шаблона.
				ВысотаОбластиПоиска = 1;

				// Определение размера области поиска параметров.
				РазмерОбластиПоиска = Ячейка.Примечание.Текст; // Ожидается в примечании текст по шаблону: "ШиринаОбластиПоиска = 7; ВысотаОбластиПоиска = 4".

				Если Не ПустаяСтрока(РазмерОбластиПоиска) Тогда
					ШиринаОбластиПоискаИзПримечания = 1;
					ВысотаОбластиПоискаИзПримечания = 1;

					РазмерОбластиПоиска = СтрЗаменить(РазмерОбластиПоиска, "=", "");
					РазмерОбластиПоиска = СтрРазделить(РазмерОбластиПоиска, Символы.ПС);
					Для Каждого ОбластьПоиска Из РазмерОбластиПоиска Цикл
						Если СтрНайти(ОбластьПоиска, "ШиринаОбластиПоиска") > 0 Тогда
							ШиринаОбластиПоискаИзПримечания = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(СтрЗаменить(ОбластьПоиска, "ШиринаОбластиПоиска", "")));
						КонецЕсли;
						Если СтрНайти(ОбластьПоиска, "ВысотаОбластиПоиска") > 0 Тогда
							ВысотаОбластиПоискаИзПримечания = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СокрЛП(СтрЗаменить(ОбластьПоиска, "ВысотаОбластиПоиска", "")));
						КонецЕсли;
					КонецЦикла;

					ШиринаОбластиПоиска = ШиринаОбластиПоискаИзПримечания;
					ВысотаОбластиПоиска = ВысотаОбластиПоискаИзПримечания;
				КонецЕсли;

				// Разбор шаблона.
				ПараметрыШаблона     = Новый Массив;
				КлючевыеСловаШаблона = Новый Массив;

				СоставЯчейки = СтрРазделить(ТекстЯчейки, Символы.ПС, Ложь);
				Для Каждого ЧастьСостава Из СоставЯчейки Цикл
					Если СтрНайти(ЧастьСостава, "{") > 0 Тогда
						КлючевоеСлово = СтрЗаменить(ЧастьСостава, "{", "");
						КлючевоеСлово = СтрЗаменить(КлючевоеСлово, "}", "");

						КлючевыеСловаШаблона.Добавить(КлючевоеСлово);
					КонецЕсли;
					Если СтрНайти(ЧастьСостава, "[") > 0 Тогда
						ИмяПараметра = СтрЗаменить(ЧастьСостава, "[", "");
						ИмяПараметра = СтрЗаменить(ИмяПараметра, "]", "");

						ПараметрыШаблона.Добавить(ИмяПараметра);
						ПараметрыШапки.Параметры.Вставить(ИмяПараметра, "");
					КонецЕсли;
				КонецЦикла;

				Если ПараметрыШаблона.Количество() > 0 Тогда
					ДанныеШаблона = ДанныеШаблона();
					ДанныеШаблона.Шаблон               = ТекстШаблона;
					ДанныеШаблона.КлючевыеСловаШаблона = КлючевыеСловаШаблона;
					ДанныеШаблона.ПараметрыШаблона     = ПараметрыШаблона;
					ДанныеШаблона.ШиринаОбластиПоиска  = ШиринаОбластиПоиска; // Сколько колонок нужно читать для шаблона.
					ДанныеШаблона.ВысотаОбластиПоиска  = ВысотаОбластиПоиска; // Сколько строк нужно читать для шаблона.

					ПараметрыШапки.Шаблоны.Добавить(ДанныеШаблона);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
		Возврат;
	КонецПопытки;

КонецПроцедуры

// Заполняет параметры шапки чтением данных из присоединенного файла.
//
// Параметры:
//   ПрисоединенныйФайл          - СправочникСсылка - ссылка на присоединенный файл объекта метаданных.
//   ИнформацияПоКолонкамТаблица - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки              - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//
Процедура ЗаполнитьПараметрыШапкиИзПрисоединенногоФайла(ПрисоединенныйФайл, ИнформацияПоКолонкамТаблица,
			ПараметрыШапки) Экспорт

	Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл);

	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
	ДвоичныеДанные = ПолучитьИЗВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

	СодержимоеФайла = Новый ТабличныйДокумент;
	СодержимоеФайла.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);

	ТаблицаСДаннымиМакета = ПолучитьТаблицуСДаннымиИзМакета(СодержимоеФайла);

	ИнициализироватьКолонкиИШапку(ИнформацияПоКолонкамТаблица, ТаблицаСДаннымиМакета, ПараметрыШапки);

КонецПроцедуры

// Возвращает колонки-реквизиты зависимые от функциональных опций.
//
// Параметры:
//   ПолноеИмяОбъекта - Строка - полное наименование объекта.
//   
// Возвращаемое значение:
//   Соответствие Из КлючИЗначение:
//     * Ключ     - Строка - имя колонки;
//     * Значение - Булево - признак доступности.
//
Функция КолонкиЗависимыеОтФункциональныхОпций(ПолноеИмяОбъекта)

	ИнформацияОФункциональныхОпциях = Новый Соответствие;
	ИмяОбъектаССуффиксомРеквизит = ПолноеИмяОбъекта + ".Реквизит.";

	ФункциональныеОпции = ДоступностьОбъектовПоОпциям();
	Для Каждого ФункциональнаяОпция Из ФункциональныеОпции Цикл
		Если СтрНачинаетсяС(ФункциональнаяОпция.Ключ, ИмяОбъектаССуффиксомРеквизит) Тогда
			ИнформацияОФункциональныхОпциях.Вставить(Сред(ФункциональнаяОпция.Ключ, СтрДлина(ИмяОбъектаССуффиксомРеквизит) + 1), ФункциональнаяОпция.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат ИнформацияОФункциональныхОпциях;

КонецФункции

Функция ДоступностьОбъектовПоОпциям()

	Параметры = Новый Структура;
	ОбщегоНазначенияПереопределяемый.ПриОпределенииПараметровФункциональныхОпцийИнтерфейса(Параметры);

	ДоступностьОбъектов = Новый Соответствие;
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Значение = -1;
		Для Каждого Элемент Из ФункциональнаяОпция.Состав Цикл
			Если Элемент.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Значение = -1 Тогда
				Значение = ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя, Параметры);
			КонецЕсли;
			ПолноеИмя = Элемент.Объект.ПолноеИмя();
			Если Значение = Истина Тогда
				ДоступностьОбъектов.Вставить(ПолноеИмя, Истина);
			Иначе
				Если ДоступностьОбъектов[ПолноеИмя] = Неопределено Тогда
					ДоступностьОбъектов.Вставить(ПолноеИмя, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Новый ФиксированноеСоответствие(ДоступностьОбъектов);

КонецФункции

#КонецОбласти

#Область ПодготовкаКЗагрузкеДанных

// Возвращает предопределенные стандартные колонки.
//
// Параметры:
//   ДобавитьОписаниеКолонок        - Булево - признак добавления описания колонки,т.е. типа и синонима.
//   ДобавитьСписокНеоднозначностей - Булево - признак добавления колонки описания неоднозначностей.
//
// Возвращаемое значение:
//   Массив из Строка    - список имен стандартных колонок;
//   Массив из Структура - список стандартных колонок с именем, типом и синонимом.
//
Функция СтандартныеКолонкиЗагрузки(ДобавитьОписаниеКолонок = Истина, ДобавитьСписокНеоднозначностей = Истина) Экспорт

	СтандартныеКолонки = Новый Массив;

	Если ДобавитьОписаниеКолонок Тогда
		ОписаниеКолонки = "Имя, Тип, Синоним";
		ТипСтрока = Новый ОписаниеТипов("Строка");

		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "НомерСтроки",
			Новый ОписаниеТипов("Число"), НСтр("ru = '№';
												|en = 'No.'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "РезультатСопоставленияСтроки",
			ТипСтрока, НСтр("ru = 'Результат';
							|en = 'Result'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "СтрокаОбработана",
			Новый ОписаниеТипов("Булево"), НСтр("ru = 'Обработана';
												|en = 'Processed'")));
		СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "ОписаниеОшибки",
			ТипСтрока, НСтр("ru = 'Причина';
							|en = 'Reason'")));

		Если ДобавитьСписокНеоднозначностей Тогда
			СтандартныеКолонки.Добавить(Новый Структура(ОписаниеКолонки, "СписокНеоднозначностей",
				Новый ОписаниеТипов("СписокЗначений"), НСтр("ru = 'Список неоднозначностей';
															|en = 'List of conflicts'")));
		КонецЕсли;
	Иначе
		СтандартныеКолонки.Добавить("НомерСтроки");
		СтандартныеКолонки.Добавить("РезультатСопоставленияСтроки");
		СтандартныеКолонки.Добавить("СтрокаОбработана");
		СтандартныеКолонки.Добавить("ОписаниеОшибки");
		Если ДобавитьСписокНеоднозначностей Тогда
			СтандартныеКолонки.Добавить("СписокНеоднозначностей");
		КонецЕсли;
	КонецЕсли;

	Возврат СтандартныеКолонки;

КонецФункции

// Добавляет стандартные колонки или реквизиты формы в зависимости от типа коллекции.
//
// Параметры:
//   Коллекция - ТаблицаЗначений         - дополняемая таблица.
//             - Массив из РеквизитФормы - дополняемый список реквизитов формы.
//   ДобавитьСписокНеоднозначностей - Булево - признак добавления колонки для заполнения списка неоднозначностей.
//   ИмяКоллекцииФормы - Строка - имя коллекции для добавления реквизитов формы.
//
Процедура ДобавитьСтандартныеКолонки(Коллекция, ДобавитьСписокНеоднозначностей = Истина,
			ИмяКоллекцииФормы = "") Экспорт

	ТипКоллекции = ТипЗнч(Коллекция);
	Если ТипКоллекции <> Тип("ТаблицаЗначений") И ТипКоллекции <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	СтандартныеКолонки = СтандартныеКолонкиЗагрузки(Истина, ДобавитьСписокНеоднозначностей);

	ДобавитьКакРеквизитФормы = Не ПустаяСтрока(ИмяКоллекцииФормы);

	Для Каждого Колонка Из СтандартныеКолонки Цикл
		Если ДобавитьКакРеквизитФормы Тогда
			Коллекция.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип,
				ИмяКоллекцииФормы, Колонка.Синоним));
		Иначе
			Коллекция.Колонки.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Синоним);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Инициализируется таблица информации по колонкам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходимо инициализировать таблицу информации по колонкам;
//        - Неопределено - при незаполненном значении параметра создается таблица значений.
//
// Возвращаемое значение:
//  ТаблицаЗначений - если параметр Форма не заполнен, иначе ничего не возвращается.
//
Функция ИнициализироватьТаблицуИнформацииПоКолонкам(Форма = Неопределено) Экспорт

	ТипСтрока       = Новый ОписаниеТипов("Строка");
	ТипСтрока150    = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100));
	ТипБулево       = Новый ОписаниеТипов("Булево");
	ТипСтрока       = Новый ОписаниеТипов("Строка");
	ТипЧислоЦелое   = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0));
	ТипЧислоДробное = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 3));
	ТипПроизвольный = Новый ОписаниеТипов();

	Если Форма = Неопределено Тогда
		ТаблицаИнформацииПоКолонкам = Новый ТаблицаЗначений;

		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ПредставлениеКолонки",      ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Синоним",                   ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ИмяКолонки",                ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Группа",                    ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Использование",             ТипСтрока150);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Родитель",                  ТипСтрока);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Примечание",                ТипСтрока);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ТипКолонки",                ТипПроизвольный);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ОбязательнаДляЗаполнения",  ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВидимостьВМакете",          ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВидимостьПриСопоставлении", ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ВИтогахВсегдаПустая",       ТипБулево);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Ширина",                    ТипЧислоДробное);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("ПозицияВМакете",            ТипЧислоЦелое);
		ТаблицаИнформацииПоКолонкам.Колонки.Добавить("Позиция",                   ТипЧислоЦелое);

		Возврат ТаблицаИнформацииПоКолонкам;

	Иначе // Заполнение таблицы формы.

		МассивРеквизитов = Новый Массив;

		Если СтрНайти(Форма.ИмяФормы, "РедактированиеБланка") = 0 Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ПредставлениеКолонки",      ТипСтрока150,    "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Синоним",                   ТипСтрока150,    "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидимостьВМакете",          ТипБулево,       "ИнформацияПоКолонкам"));
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Группа",                    ТипСтрока150,    "ИнформацияПоКолонкам"));
		КонецЕсли;

		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяКолонки",                ТипСтрока150,    "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Использование",             ТипСтрока150,    "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Родитель",                  ТипСтрока,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Примечание",                ТипСтрока,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипКолонки",                ТипПроизвольный, "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ОбязательнаДляЗаполнения",  ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидимостьПриСопоставлении", ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВИтогахВсегдаПустая",       ТипБулево,       "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Ширина",                    ТипЧислоДробное, "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ПозицияВМакете",            ТипЧислоЦелое,   "ИнформацияПоКолонкам"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Позиция",                   ТипЧислоЦелое,   "ИнформацияПоКолонкам"));

		Форма.ИзменитьРеквизиты(МассивРеквизитов);

	КонецЕсли;

КонецФункции

// Определяет состав колонок для загрузки данных и параметров шапки, если она задана.
//
// Параметры:
//   ПараметрыЗагрузки    - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//   ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки       - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//
Процедура ОпределитьИнформациюПоКолонкамИПараметрамШапки(ПараметрыЗагрузки, ИнформацияПоКолонкам, ПараметрыШапки) Экспорт

	МенеджерОбъекта = МенеджерОбъекта(ПараметрыЗагрузки.ИмяОбъектаМетаданных);

	Макет = МенеджерОбъекта.ПолучитьМакет(ПараметрыЗагрузки.ИмяМакетаСШаблоном);
	Если Макет = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается, т.к. отсутствует макет %1 у объекта с типом: %2';
				|en = 'Cannot import data from a file to a table since there is no %1 template for object of the %2 type'"),
			ПараметрыЗагрузки.ИмяМакетаСШаблоном,
			ПараметрыЗагрузки.ИмяОбъектаМетаданных);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Если ПараметрыШапки <> Неопределено Тогда
		ЗаполнитьПараметрыШапки(Макет, ПараметрыШапки);
	КонецЕсли;

	ОбластьЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    ОбластьЗаголовокТаблицы.ВысотаТаблицы);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", ОбластьЗаголовокТаблицы.ВысотаТаблицы);

	ЗаполнитьИнформациюПоЗагружаемымРеквизитам(ПараметрыЗагрузки);

	ОпределитьИнформациюПоКолонкамТабличнаяЧасть(ИнформацияПоКолонкам, Макет, ПараметрыЗагрузки);

	ТребуетсяПересчетПозиций = Ложь;

	СписокКолонокСФункциональнымиОпциями = КолонкиЗависимыеОтФункциональныхОпций(ПараметрыЗагрузки.ИмяОбъектаМетаданных + "." + ПараметрыЗагрузки.ИмяТабличнойЧасти);
	Для Каждого ФункциональнаяОпцияКолонкиВключена Из СписокКолонокСФункциональнымиОпциями Цикл
		СтрокаСИнформациейОКолонке = ИнформацияПоКолонкам.Найти(ФункциональнаяОпцияКолонкиВключена.Ключ, "ИмяКолонки");
		Если СтрокаСИнформациейОКолонке <> Неопределено Тогда
			Если НЕ ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				ИнформацияПоКолонкам.Удалить(СтрокаСИнформациейОКолонке);
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		Иначе
			Если ФункциональнаяОпцияКолонкиВключена.Значение Тогда
				СоздатьИнформациюПоКолонкамНаОснованииШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам, ФункциональнаяОпцияКолонкиВключена.Ключ);
				ТребуетсяПересчетПозиций = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ТребуетсяПересчетПозиций Тогда
		ИнформацияПоКолонкам.Сортировать("Позиция");
		Позиция = 1;
		ПозицияВМакете = 1;

		Для Каждого Колонка Из ИнформацияПоКолонкам Цикл
			Колонка.Позиция = Позиция;
			Позиция = Позиция + 1;

			Если Колонка.ВидимостьВМакете Тогда
				Колонка.ПозицияВМакете = ПозицияВМакете;
				ПозицияВМакете = ПозицияВМакете + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьИнформациюПоКолонкамТабличнаяЧасть(Знач ИнформацияПоКолонкам, Знач Макет, ПараметрыЗагрузки)

	Если МетодКонфигурацииИспользуется(ПараметрыЗагрузки.ИмяОбъектаМетаданных, "УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть") Тогда
		МенеджерОбъекта = МенеджерОбъекта(ПараметрыЗагрузки.ИмяОбъектаМетаданных);
		МенеджерОбъекта.УстановитьПараметрыЗагрузкиИзФайлаВТабличнуюЧасть(ПараметрыЗагрузки);
	КонецЕсли;

	Если ИнформацияПоКолонкам.Количество() = 0 Тогда
		ЗаголовокТаблицы = ОбластьЗаголовкаШаблонаТаблицы(Макет);
		СоздатьИнформациюПоКолонкамНаОснованииШаблона(ЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам);
	КонецЕсли;

КонецПроцедуры

// Заполняет таблицу о колонках в макете. Информация используется для построения таблицы сопоставления.
//
// Параметры:
//   ОбластьЗаголовокТаблицы  - ТабличныйДокумент - область заголовка макета.
//   ПараметрыЗагрузки        - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть.
//   ИнформацияПоКолонкам     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ИменаДобавляемыхКолонок  - Строка - список добавляемых колонок через запятую. Если значение не заполонено, то 
//                                добавляются все.
//
Процедура СоздатьИнформациюПоКолонкамНаОснованииШаблона(ОбластьЗаголовокТаблицы, ПараметрыЗагрузки, ИнформацияПоКолонкам,
			ИменаДобавляемыхКолонок = Неопределено)

	ВыборочноеДобавление = Ложь;
	Если ЗначениеЗаполнено(ИменаДобавляемыхКолонок) Тогда
		ВыборочноеДобавление = Истина;
		МассивДобавляемыхКолонок = СтрРазделить(ИменаДобавляемыхКолонок, ",", Ложь);
		Позиция = ИнформацияПоКолонкам.Количество() + 1;
	Иначе
		ИнформацияПоКолонкам.Очистить();
		Позиция = 1;
	КонецЕсли;

	Если ПараметрыЗагрузки.Свойство("ТипыДанныхКолонок") Тогда
		СоответствиеТиповДанныхКолонок = ПараметрыЗагрузки.ТипыДанныхКолонок;
	Иначе
		СоответствиеТиповДанныхКолонок = Новый Соответствие;
	КонецЕсли;

	ВысотаШапки = ОбластьЗаголовокТаблицы.ВысотаТаблицы;
	Если ВысотаШапки = 2 Тогда
		НомерКолонки = 1;
		Группы = Новый Соответствие;
		ИспользуетсяГруппировка = Истина;
		Пока НомерКолонки <= ОбластьЗаголовокТаблицы.ШиринаТаблицы Цикл
			Область = ОбластьЗаголовокТаблицы.ПолучитьОбласть(1, НомерКолонки);
			Ячейка = ОбластьЗаголовокТаблицы.ПолучитьОбласть(1, НомерКолонки, 1, НомерКолонки).ТекущаяОбласть;
			Группа = Ячейка.Текст;
			Для Индекс = НомерКолонки По НомерКолонки + Область.ШиринаТаблицы -1 Цикл
				Группы.Вставить(Индекс, Группа);
			КонецЦикла;
			НомерКолонки = НомерКолонки + Область.ШиринаТаблицы;
		КонецЦикла;
	Иначе
		ИспользуетсяГруппировка = Ложь;
	КонецЕсли;

	ОбъектМетаданных = ТабличнаяЧастьОбъектаМетаданных(ПараметрыЗагрузки.ИмяОбъектаМетаданных, ПараметрыЗагрузки.ИмяТабличнойЧасти);

	ДобавленныеКолонки = Новый Массив;

	Для НомерСтроки = 1 По ВысотаШапки Цикл
		Для НомерКолонки = 1 По ОбластьЗаголовокТаблицы.ШиринаТаблицы Цикл
			Ячейка = ОбластьЗаголовокТаблицы.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;

			Если ПустаяСтрока(Ячейка.ПараметрРасшифровки) Тогда
				Продолжить;
			ИначеЕсли НЕ ПустаяСтрока(Ячейка.Параметр) Тогда
				Продолжить;
			КонецЕсли;

			Если Ячейка.Имя = "R1C1" Тогда
				ИмяРеквизита = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
				ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.ПараметрРасшифровки);
				Родитель = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Текст);
			Иначе
				ИмяРеквизита = Ячейка.Имя;
				ПредставлениеРеквизита = ?(ЗначениеЗаполнено(Ячейка.Текст), Ячейка.Текст, Ячейка.Имя);
				Родитель = ?(ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки), Ячейка.ПараметрРасшифровки, Ячейка.Имя);
			КонецЕсли;

			Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
				Попытка
					МетаданныеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
				Исключение
					МетаданныеРеквизита = Неопределено;
				КонецПопытки;

				ТипДанныхКолонки = Новый ОписаниеТипов("Строка");
				Если МетаданныеРеквизита <> Неопределено Тогда
					ТипДанныхКолонки = МетаданныеРеквизита.Тип;
				КонецЕсли;
				Если СоответствиеТиповДанныхКолонок <> Неопределено Тогда
					ТипДанныхКолонкиПереопределенный = СоответствиеТиповДанныхКолонок.Получить(ИмяРеквизита);
					Если ТипДанныхКолонкиПереопределенный <> Неопределено Тогда
						ТипДанныхКолонки = ТипДанныхКолонкиПереопределенный;
					КонецЕсли;
				КонецЕсли;

				Если ВыборочноеДобавление И МассивДобавляемыхКолонок.Найти(ИмяРеквизита) = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ДобавленныеКолонки.Добавить(ИмяРеквизита);

				ОбязательнаДляЗаполнения = Ячейка.Шрифт.Полужирный = Истина
					Или Ячейка.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт
					Или ПараметрыЗагрузки.ОбязательныеКолонки.Найти(ИмяРеквизита) <> Неопределено;
				ВИтогахВсегдаПустая      = ПараметрыЗагрузки.ПустыеВИтогахКолонки.Найти(ИмяРеквизита) <> Неопределено;

				ПримечаниеВШапкеКолонки = Ячейка.Примечание.Текст + ?(ОбязательнаДляЗаполнения,
					Символы.ПС + НСтр("ru = 'Обязательно для заполнения.';
										|en = 'Required.'"), "");

				СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
				СтрокаИнфоПроКолонки.ИмяКолонки                = ИмяРеквизита;
				СтрокаИнфоПроКолонки.ПредставлениеКолонки      = ПредставлениеРеквизита;
				СтрокаИнфоПроКолонки.ТипКолонки                = ТипДанныхКолонки;
				СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения  = ОбязательнаДляЗаполнения;
				СтрокаИнфоПроКолонки.Позиция                   = Позиция;
				СтрокаИнфоПроКолонки.ПозицияВМакете            = Позиция;
				СтрокаИнфоПроКолонки.Родитель                  = Родитель;
				СтрокаИнфоПроКолонки.ВидимостьВМакете          = Истина;
				СтрокаИнфоПроКолонки.ВидимостьПриСопоставлении = Истина;
				СтрокаИнфоПроКолонки.Примечание                = ПримечаниеВШапкеКолонки;
				СтрокаИнфоПроКолонки.Ширина                    = Ячейка.ШиринаКолонки;
				СтрокаИнфоПроКолонки.ВИтогахВсегдаПустая       = ВИтогахВсегдаПустая;

				Если МетаданныеРеквизита <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
					Если МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
						СтрокаИнфоПроКолонки.Использование = "ДляГруппы";
					ИначеЕсли МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
						СтрокаИнфоПроКолонки.Использование = "ДляГруппыИЭлемента";
					Иначе
						СтрокаИнфоПроКолонки.Использование = "ДляЭлемента";
					КонецЕсли;
				КонецЕсли;

				Если ИспользуетсяГруппировка Тогда
					ГруппаКолонки = Группы.Получить(НомерКолонки);
					СтрокаИнфоПроКолонки.Группа =
						?(СтрокаИнфоПроКолонки.ПредставлениеКолонки = ГруппаКолонки, "", ГруппаКолонки);
				КонецЕсли;

				Позиция = Позиция + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Каждого Реквизит Из ПараметрыЗагрузки.ЗаполняемыеПриЗагрузкеКолонки Цикл
		ИмяРеквизита     = Реквизит.Ключ;
		СинонимРеквизита = Реквизит.Значение;

		Если ДобавленныеКолонки.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДобавленныеКолонки.Добавить(ИмяРеквизита);

		ТипДанныхКолонки = Новый ОписаниеТипов("Строка");
		Если СоответствиеТиповДанныхКолонок <> Неопределено Тогда
			ТипДанныхКолонкиПереопределенный = СоответствиеТиповДанныхКолонок.Получить(ИмяРеквизита);
			Если ТипДанныхКолонкиПереопределенный <> Неопределено Тогда
				ТипДанныхКолонки = ТипДанныхКолонкиПереопределенный;
			КонецЕсли;
		КонецЕсли;

		ОбязательнаДляЗаполнения = ПараметрыЗагрузки.ОбязательныеКолонки.Найти(ИмяРеквизита) <> Неопределено;
		ВИтогахВсегдаПустая      = ПараметрыЗагрузки.ПустыеВИтогахКолонки.Найти(ИмяРеквизита) <> Неопределено;

		СтрокаИнфоПроКолонки = ИнформацияПоКолонкам.Добавить();
		СтрокаИнфоПроКолонки.ИмяКолонки                = ИмяРеквизита;
		СтрокаИнфоПроКолонки.ПредставлениеКолонки      = СинонимРеквизита;
		СтрокаИнфоПроКолонки.ТипКолонки                = ТипДанныхКолонки;
		СтрокаИнфоПроКолонки.ОбязательнаДляЗаполнения  = ОбязательнаДляЗаполнения;
		СтрокаИнфоПроКолонки.Позиция                   = Позиция;
		СтрокаИнфоПроКолонки.ПозицияВМакете            = -1;
		СтрокаИнфоПроКолонки.Родитель                  = ИмяРеквизита;
		СтрокаИнфоПроКолонки.ВидимостьВМакете          = Ложь;
		СтрокаИнфоПроКолонки.ВидимостьПриСопоставлении = Истина;
		СтрокаИнфоПроКолонки.Примечание                = НСтр("ru = 'Служебная колонка';
																|en = 'Internal column'");
		СтрокаИнфоПроКолонки.ВИтогахВсегдаПустая       = ВИтогахВсегдаПустая;

		Попытка
			МетаданныеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
		Исключение
			МетаданныеРеквизита = Неопределено;
		КонецПопытки;

		Если МетаданныеРеквизита <> Неопределено И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
			Если МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
				СтрокаИнфоПроКолонки.Использование = "ДляГруппы";
			ИначеЕсли МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
				СтрокаИнфоПроКолонки.Использование = "ДляГруппыИЭлемента";
			Иначе
				СтрокаИнфоПроКолонки.Использование = "ДляЭлемента";
			КонецЕсли;
		КонецЕсли;

		Если ИспользуетсяГруппировка Тогда
			СтрокаИнфоПроКолонки.Группа = Группы.Получить(НомерКолонки);
		КонецЕсли;

		Позиция = Позиция + 1;
	КонецЦикла;

КонецПроцедуры

Функция ШиринаКолонкиПоТипу(Тип)

	ШиринаКолонки = 20;

	Если Тип.СодержитТип(Тип("Булево")) Тогда 
		ШиринаКолонки = 3;
	ИначеЕсли Тип.СодержитТип(Тип("Число")) Тогда 
		ШиринаКолонки = Тип.КвалификаторыЧисла.Разрядность + 1;
	ИначеЕсли Тип.СодержитТип(Тип("Строка")) Тогда 
		Если Тип.КвалификаторыСтроки.Длина > 0 Тогда 
			ШиринаКолонки = ?(Тип.КвалификаторыСтроки.Длина > 20, 20, Тип.КвалификаторыСтроки.Длина);
		Иначе
			ШиринаКолонки = 20;
		КонецЕсли;
	ИначеЕсли Тип.СодержитТип(Тип("Дата")) Тогда 
		ШиринаКолонки = 12;
	ИначеЕсли Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		ШиринаКолонки = 20;
	Иначе
		Для Каждого ТипОбъекта Из Тип.Типы() Цикл
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
				Если Не МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0  Тогда
					ШиринаКолонки = МетаданныеОбъекта.ДлинаКода + 1;
				КонецЕсли;

				Если МетаданныеОбъекта.ДлинаНаименования > 0  Тогда
					Если МетаданныеОбъекта.ДлинаНаименования > ШиринаКолонки Тогда
						ШиринаКолонки = ?(МетаданныеОбъекта.ДлинаНаименования > 30, 30, МетаданныеОбъекта.ДлинаНаименования + 1);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
				ДлинаПредставления = СтрДлина(МетаданныеОбъекта.Представление());
				ШиринаКолонки      = ?( ДлинаПредставления > 30, 30, ДлинаПредставления + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ШиринаКолонки;

КонецФункции

// Создает шапку бланка по информации о колонках.
//
// Параметры:
//   ИнформацияПоКолонкам - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ПараметрыШапки       - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//   
// Возвращаемое значение:
//   ТабличныйДокумент - шапка бланка.
//
Функция ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(ИнформацияПоКолонкам, ПараметрыШапки,
		ВысотаЗаголовкаТаблицыЗагружаемогоМакета) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Справочники.УчетныеЗаписиМаркетплейсов.ПолучитьМакет("ПростойШаблон");

	КолонкиИмеютГруппировку = КолонкиИмеютГруппировку(ИнформацияПоКолонкам);
	Если КолонкиИмеютГруппировку Тогда
		Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьЗаголовокСГруппой = Макет.ПолучитьОбласть("Шапка2Строки");
		ОбластьЗаголовокБезГруппы = Макет.ПолучитьОбласть("Шапка2СтрокиБезГруппы");
		НомерСтроки = 2;
	Иначе
		ОбластьЗаголовокБезГруппы = Макет.ПолучитьОбласть("Заголовок");
		НомерСтроки = 1;
	КонецЕсли;

	РазницаВШапке = ВысотаЗаголовкаТаблицыЗагружаемогоМакета - НомерСтроки;

	ИнформацияПоКолонкам.Сортировать("Позиция");

	Группа = Неопределено;
	ПозицияНачалоГруппы = 1;
	Сдвиг = 0;
	Для Позиция = 0 По ИнформацияПоКолонкам.Количество() -1 Цикл
		Колонка = ИнформацияПоКолонкам.Получить(Позиция);

		Если Колонка.ВидимостьВМакете Тогда
			Если Группа = Неопределено Тогда
				Группа = Колонка.Группа;
			КонецЕсли;

			Если КолонкиИмеютГруппировку Тогда
				Если ПустаяСтрока(Колонка.Группа) Тогда
					ОбластьЗаголовок = ОбластьЗаголовокБезГруппы;
					ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки - 1, 1, НомерСтроки + РазницаВШапке, 1);
					ОбластьИмяКолонки.Объединить();
				Иначе
					ОбластьЗаголовок = ОбластьЗаголовокСГруппой;
					ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки, 1, НомерСтроки + РазницаВШапке, 1);
					ОбластьИмяКолонки.Объединить();
				КонецЕсли;
			Иначе
				ОбластьЗаголовок = ОбластьЗаголовокБезГруппы;
				ОбластьИмяКолонки = ОбластьЗаголовок.Область(НомерСтроки, 1, НомерСтроки + РазницаВШапке, 1);
				ОбластьИмяКолонки.Объединить();
			КонецЕсли;

			ОбластьИмяКолонки.Имя = Колонка.ИмяКолонки;
			ОбластьИмяКолонки.Расшифровка = Колонка.Группа;
			ОбластьИмяКолонки.Примечание.Текст = Колонка.Примечание;
			Если Колонка.ОбязательнаДляЗаполнения Тогда
				ОбластьИмяКолонки.Шрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
			Иначе
				ОбластьИмяКолонки.Шрифт = Неопределено;
			КонецЕсли;

			ОбластьИмяКолонки.ШиринаКолонки = ?(Колонка.Ширина = 0, ШиринаКолонкиПоТипу(Колонка.ТипКолонки), Колонка.Ширина);
			ОбластьЗаголовок.Параметры.Заголовок = ?(ПустаяСтрока(Колонка.Синоним), Колонка.ПредставлениеКолонки, Колонка.Синоним);
			ТабличныйДокумент.Присоединить(ОбластьЗаголовок);

			Если КолонкиИмеютГруппировку И Колонка.Группа <> Группа Тогда
				Если Не ПустаяСтрока(Группа) Тогда
					Область = ТабличныйДокумент.Область(1, ПозицияНачалоГруппы, 1, Позиция - Сдвиг);
					Область.Текст = Группа;
					Область.Объединить();
					Область.Обвести(Линия, Линия, Линия, Линия);
				КонецЕсли;
				ПозицияНачалоГруппы = Позиция + 1 - Сдвиг;
				Группа = Колонка.Группа;
			КонецЕсли;
		Иначе
			Сдвиг = Сдвиг + 1;
		КонецЕсли;
	КонецЦикла;

	Если КолонкиИмеютГруппировку И Не ПустаяСтрока(Группа) Тогда
		Область = ТабличныйДокумент.Область(1, ПозицияНачалоГруппы, 1, Позиция - Сдвиг);
		Область.Текст = Группа;
		Область.Объединить();
		Область.Обвести(Линия, Линия, Линия,Линия);
	КонецЕсли;

	ШаблоныДанныхШапки   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны", Новый Массив);
	ПараметрыДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Параметры", Новый Структура);
	МассивСтрокШапки = Новый Массив;

	Если ШаблоныДанныхШапки.Количество() > 0 Тогда
		Для Каждого ДанныеШаблона Из ШаблоныДанныхШапки Цикл
			СтрокаШапки = ДанныеШаблона.Шаблон; // Шаблон состоит из ключевых слов в фигурных скобках {} и параметров в квадратных скобках [],
			//									например: "{Отчет} о {реализации} {№} [Параметр1] {от} [Параметр2]".

			Для Каждого ПараметрШаблона Из ПараметрыДанныхШапки Цикл
				СтрокаШапки = СтрЗаменить(СтрокаШапки,
					"[" + ПараметрШаблона.Ключ + "]",
					?(ЗначениеЗаполнено(ПараметрШаблона.Значение), Строка(ПараметрШаблона.Значение), "_____________"));
			КонецЦикла;
			
			СтрокаШапки = СтрЗаменить(СтрокаШапки, "{", "");
			СтрокаШапки = СтрЗаменить(СтрокаШапки, "}", "");

			МассивСтрокШапки.Добавить(СтрокаШапки);
		КонецЦикла;
	КонецЕсли;

	Если МассивСтрокШапки.Количество() > 0 Тогда
		ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
		ОбластьЗаполнения = ИтоговыйТабличныйДокумент.ПолучитьОбласть(1, 1, 1, ТабличныйДокумент.ШиринаТаблицы);
		ОбластьЗаполнения.Область(1, 1, 1, ОбластьЗаполнения.ШиринаТаблицы).Объединить();

		Для Каждого СтрокаШапки Из МассивСтрокШапки Цикл
			ОбластьЗаполнения.ТекущаяОбласть.Текст = СтрокаШапки;
			ИтоговыйТабличныйДокумент.Вывести(ОбластьЗаполнения);
		КонецЦикла;

		ИтоговыйТабличныйДокумент.Вывести(ТабличныйДокумент);
	Иначе
		ИтоговыйТабличныйДокумент = ТабличныйДокумент
	КонецЕсли;

	Возврат ИтоговыйТабличныйДокумент;

КонецФункции

Функция КолонкиИмеютГруппировку(Знач ИнформацияПоКолонкам)

	ГруппыКолонок = Новый Соответствие;
	Для каждого КолонкаТаблицы Из ИнформацияПоКолонкам Цикл
		ГруппыКолонок.Вставить(КолонкаТаблицы.Группа);
	КонецЦикла;
	Возврат ?(ГруппыКолонок.Количество() > 1, Истина, Ложь);

КонецФункции

// Подготавливает состав результата записи загружаемых данных.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ОписаниеОшибки - Строка - Описание ошибки.
//     * СсылкаНаОбъект - Неопределено, ЛюбаяСсылка - ссылка на созданный при загрузке объект.
//     * Ссылки         - Массив из ЛюбаяСсылка - все записанные ссылки для заполнения параметра отбора динамического
//                           списка формы Справочники.УчетныеЗаписиМаркетплейсов.Формы.ВыгрузкаЗагрузкаДанных.
//     * СостоянияСсылок - Соответствие из КлючИЗначение - описание ошибки.
//
Функция РезультатЗаписиЗагружаемыхДанных() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",  "");
	Результат.Вставить("СсылкаНаОбъект",  Неопределено);
	Результат.Вставить("Ссылки",          Новый Массив);
	Результат.Вставить("СостоянияСсылок", Новый Соответствие);

	Возврат Результат;

КонецФункции

// Подготавливает состав результата получения данных по API.
// 
// Возвращаемое значение:
//   Структура - список параметров:
//     * ОписаниеОшибки    - см. НоваяОшибка.
//     * АдресТаблицыЗагруженныхДанных - Строка - адрес хранилища с данными.
//     * ПараметрыШапки - см. ПараметрыШапки.
//
Функция РезультатПолученияДанныхИнтеграционнымиМетодами() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбОшибке", НоваяОшибка());
	Результат.Вставить("АдресТаблицыЗагруженныхДанных", Неопределено);
	Результат.Вставить("ПараметрыШапки", ПараметрыШапки());

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

// Конструктор параметров загрузки табличного документа.
//
// Параметры:
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, для которой нужны параметры.
//
// Возвращаемое значение:
//   Структура:
//     * ДанныеФайла                              - Неопределено, ДвоичныеДанные - данные файла, которые требуется загрузить.
//     * РасширениеФайла                          - Строка - расширение файла.
//     * ЗаполняемыйШаблон                        - Неопределено, ТабличныйДокумент - заполняемый табличный документ.
//     * ПараметрыШапки                           - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//     * ИнформацияПоКолонкам                     - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//     * ВысотаЗаголовкаТаблицыЗагружаемогоМакета - Число - высота заголовка таблицы загружаемого макета.
//     * ВысотаЗаголовкаТаблицыМакетаСШаблоном    - Число - высота заголовка таблицы эталонного макета объекта конфигурации.
//     * АдресХранилища                           - Строка - адрес хранилища, в которое будет помещен результат загрузки.
//
Функция ПараметрыЗагрузкиТабличногоДокумента(УникальныйИдентификаторФормы) Экспорт

	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ДанныеФайла",                              Неопределено);
	ПараметрыЗагрузки.Вставить("РасширениеФайла",                          "");
	ПараметрыЗагрузки.Вставить("ЗаполняемыйШаблон",                        Неопределено);
	ПараметрыЗагрузки.Вставить("ПараметрыШапки",                           ПараметрыШапки());
	ПараметрыЗагрузки.Вставить("ИнформацияПоКолонкам",                     Новый ТаблицаЗначений);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
	ПараметрыЗагрузки.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    1);
	ПараметрыЗагрузки.Вставить("АдресХранилища",                           ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификаторФормы));

	Возврат ПараметрыЗагрузки;

КонецФункции

// Загружает данные в таблицу значений.
//
// Параметры:
//   ПараметрыЗагрузки - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента.
//
// Возвращаемое значение:
//   Структура
//
Функция ЗагрузитьФайлВТаблицу(ПараметрыЗагрузки) Экспорт

	ПутьКВременномуФайлу = ПолучитьИмяВременногоФайла(ПараметрыЗагрузки.РасширениеФайла);
	ДвоичныеДанные = ПараметрыЗагрузки.ДанныеФайла; // ДвоичныеДанные
	ДвоичныеДанные.Записать(ПутьКВременномуФайлу);

	ДанныеФайла = Новый ТабличныйДокумент;
	ДанныеФайла.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	ФайловаяСистема.УдалитьВременныйФайл(ПутьКВременномуФайлу);

	Результат = ТабличныйДокументВТаблицу(ДанныеФайла, ПараметрыЗагрузки);

	Возврат Результат;

КонецФункции

// Создает таблицу значений по данным из шаблона и сохраняет ее во временное хранилище.
// 
// Параметры:
//   ШаблонСДанными    - ТабличныйДокумент - данные в виде табличного документа, которые нужно обработать.
//   ПараметрыЗагрузки - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента. 
//
// Возвращаемое значение:
//   Структура из КлючИЗначение:
//     * ШаблонБезОшибокЗаполнения - Булево - признак отсутствия ошибок.
//     * АдресТаблицыЗагруженныхДанных - Строка - адрес временного хранилища с загруженными данными.
//     * ПараметрыШапки - Структура из КлючИЗначение - параметры.
//     * ШаблонСДанными - ТабличныйДокумент - загружаемый табличный документ.
//
Функция ТабличныйДокументВТаблицу(ШаблонСДанными, Знач ПараметрыЗагрузки) Экспорт

	ПараметрыПрогресса = ПараметрыПрогресса();
	ПараметрыПрогресса.ШагИтерацииВПроцентах = 30;

	ТаблицаСДаннымиМакета = ПолучитьТаблицуСДаннымиИзМакета(ШаблонСДанными);

	ИнформацияПоКолонкам                     = ПараметрыЗагрузки.ИнформацияПоКолонкам;
	ПараметрыШапки                           = ПараметрыЗагрузки.ПараметрыШапки;
	ЗаполняемыйШаблон                        = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ЗаполняемыйШаблон", Неопределено);
	АдресХранилища                           = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "АдресХранилища", "");
	ВысотаЗаголовкаТаблицыЗагружаемогоМакета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
	ВысотаЗаголовкаТаблицыМакетаСШаблоном    = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "ВысотаЗаголовкаТаблицыМакетаСШаблоном", 1);

	ЗагружатьВТабличныйДокумент = (ЗаполняемыйШаблон <> Неопределено);

	Результат = Новый Структура;
	Результат.Вставить("ШаблонБезОшибокЗаполнения",     Истина);
	Результат.Вставить("АдресТаблицыЗагруженныхДанных", "");
	Результат.Вставить("ПараметрыШапки",                Новый Структура);
	Результат.Вставить("ШаблонСДанными",                Новый ТабличныйДокумент);

	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");

	ТаблицаИнформацияПоКолонкам = ИнформацияПоКолонкам.Скопировать();

	СтрокаСДаннымиТаблицы = 1;
	ИнициализироватьКолонкиИШапку(ТаблицаИнформацияПоКолонкам, ТаблицаСДаннымиМакета, ПараметрыШапки, СтрокаСДаннымиТаблицы);

	Отбор = Новый Структура("ВИтогахВсегдаПустая", Истина);
	КоличествоПустыхКолонокДляОпределенияСтрокиИтогов = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор).Количество();

	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	АвтоЦвет = Новый Цвет();

	ТаблицаЗагруженныхДанных = Новый ТаблицаЗначений;

	Для Каждого Колонка Из ТаблицаИнформацияПоКолонкам Цикл
		Если Колонка.ТипКолонки = Неопределено Тогда
			ТипКолонки = ОписаниеТипаСтрока;
		Иначе
			ТипКолонки = Колонка.ТипКолонки;
		КонецЕсли;
		ТаблицаЗагруженныхДанных.Колонки.Добавить(Колонка.ИмяКолонки, ТипКолонки, Колонка.ПредставлениеКолонки);
	КонецЦикла;

	ДобавитьСтандартныеКолонки(ТаблицаЗагруженныхДанных);

	Если ЗагружатьВТабличныйДокумент Тогда
		Отбор = Новый Структура("ВидимостьВМакете", Истина);
		КолонкиМакета = ТаблицаИнформацияПоКолонкам.НайтиСтроки(Отбор);

		СтрокаНачалаВывода = ВысотаЗаголовкаТаблицыЗагружаемогоМакета + ПараметрыШапки.Шаблоны.Количество();
		КоличествоКолонокШаблона = КолонкиМакета.Количество();

		ОбластьВывода = ЗаполняемыйШаблон.ПолучитьОбласть(СтрокаНачалаВывода, 1,
			СтрокаНачалаВывода , КоличествоКолонокШаблона);

		Счетчик = 1;
		Для Каждого Колонка Из КолонкиМакета Цикл
			Если ЗначениеЗаполнено(Колонка.ПозицияВМакете) Тогда
				ОбластьЗаполнения = ОбластьВывода.Область(1, Счетчик, 1, Счетчик);
				ОбластьЗаполнения.Параметр = Колонка.ИмяКолонки;
				ОбластьЗаполнения.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;

				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ВсегоСтрок = ТаблицаСДаннымиМакета.Количество() - СтрокаСДаннымиТаблицы;
	ПроцентВыполнения = 0;

	СтрокаСДаннымиТаблицы = СтрокаСДаннымиТаблицы
		+ ?(ЗагружатьВТабличныйДокумент, ВысотаЗаголовкаТаблицыЗагружаемогоМакета, ВысотаЗаголовкаТаблицыМакетаСШаблоном) - 1;
	КорректировкаНомераСтроки = СтрокаСДаннымиТаблицы - 1;

	// Начало чтения со строки за шапкой.
	Для НомерСтроки = СтрокаСДаннымиТаблицы По ТаблицаСДаннымиМакета.Количество() Цикл
		УстановитьПроцентПрогресса(ВсегоСтрок, НомерСтроки, ПроцентВыполнения, ПараметрыПрогресса);

		СтрокаТаблицы = ТаблицаСДаннымиМакета.Получить(НомерСтроки - 1);

		СтрокаТаблицыПустая     = Истина;
		КоличествоКолонокИтогов = 0;
		СтрокаБезОшибок = Истина;

		НоваяСтрока = ТаблицаЗагруженныхДанных.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки - КорректировкаНомераСтроки;

		НомерКолонки = 0;
		Для Каждого Колонка Из ТаблицаИнформацияПоКолонкам Цикл
			Если Колонка.ПозицияВМакете = -1 Тогда
				Продолжить;
			КонецЕсли;

			НомерКолонки = НомерКолонки + 1;

			ЗначениеЯчейки = СокрЛП(СтрокаТаблицы["Колонка_" + Колонка.ПозицияВМакете]);
			ЗначениеЯчейки = ?(ЗначениеЯчейки = "0", "", ЗначениеЯчейки);

			Если СтрокаТаблицыПустая Тогда
				СтрокаТаблицыПустая = Не ЗначениеЗаполнено(ЗначениеЯчейки);
			КонецЕсли;

			КоличествоКолонокИтогов = КоличествоКолонокИтогов + ?(Колонка.ВИтогахВсегдаПустая И Не ЗначениеЗаполнено(ЗначениеЯчейки), 1, 0);

			ИмяКолонки = Колонка.ИмяКолонки;

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				НоваяСтрока[ИмяКолонки] = ПриведениеЗначенияКПростомуТипу(ЗначениеЯчейки, Колонка.ТипКолонки);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) И ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки(Колонка.ТипКолонки.Типы(), ЗначениеЯчейки);
			КонецЕсли;

			Если ЗагружатьВТабличныйДокумент Тогда
				Ячейка = ОбластьВывода.Область(1, НомерКолонки, 1, НомерКолонки);
				Если Колонка.ОбязательнаДляЗаполнения И Не ЗначениеЗаполнено(НоваяСтрока[ИмяКолонки]) Тогда
					Ячейка.ЦветФона  = ЦветаСтиля.ЦветФонаВнимание;
					Ячейка.ЦветРамки = WebЦвета.СеребристоСерый;
					Ячейка.Обвести(Линия,, Линия, Линия);
					СтрокаБезОшибок = Ложь;
				Иначе
					Ячейка.ЦветФона = АвтоЦвет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если СтрокаТаблицыПустая Тогда
			ТаблицаЗагруженныхДанных.Удалить(НоваяСтрока);
			КорректировкаНомераСтроки = КорректировкаНомераСтроки + 1;
		ИначеЕсли КоличествоПустыхКолонокДляОпределенияСтрокиИтогов <> 0 И КоличествоКолонокИтогов = КоличествоПустыхКолонокДляОпределенияСтрокиИтогов Тогда
			ТаблицаЗагруженныхДанных.Удалить(НоваяСтрока);
			// После обнаружения строки итогов прерываем чтение.
			Прервать;
		Иначе
			Результат.ШаблонБезОшибокЗаполнения = СтрокаБезОшибок;

			Если ЗагружатьВТабличныйДокумент Тогда
				ОбластьВывода.Параметры.Заполнить(НоваяСтрока);
				ЗаполняемыйШаблон.Вывести(ОбластьВывода);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Результат.АдресТаблицыЗагруженныхДанных = ПоместитьВоВременноеХранилище(ТаблицаЗагруженныхДанных, АдресХранилища);
	Результат.ПараметрыШапки = ПараметрыШапки;

	ЗаполненныеШаблоны = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "ЗаполненныеШаблоны", Новый Массив);

	Если ЗагружатьВТабличныйДокумент Тогда
		Если ЗаполненныеШаблоны.Количество() > 0 Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;

			// Вывести строки шапки в результирующий табличный документ.
			ОбластьЗаполнения = ТабличныйДокумент.ПолучитьОбласть(1, 1, 1, ЗаполняемыйШаблон.ШиринаТаблицы);
			ОбластьЗаполнения.Область(1, 1, 1, ЗаполняемыйШаблон.ШиринаТаблицы).Объединить();

			Для Каждого СтрокаШапки Из ЗаполненныеШаблоны Цикл
				ОбластьЗаполнения.ТекущаяОбласть.Текст = СтрокаШапки;
				ТабличныйДокумент.Вывести(ОбластьЗаполнения);
			КонецЦикла;

			// Вывести в результирующий табличный документ заполненный загружаемыми строками табличный документ.
			ТабличныйДокумент.Вывести(ЗаполняемыйШаблон);

			Результат.Вставить("ШаблонСДанными", ТабличныйДокумент);
		Иначе
			Результат.Вставить("ШаблонСДанными", ЗаполняемыйШаблон);
		КонецЕсли;
	КонецЕсли;

	ПараметрыПрогресса.ШагИтерацииВПроцентах = 5;
	ПараметрыПрогресса.ПрогрессВыполнения = 30; // Часть прогресса выполнена (сопоставление данных).
	УстановитьПроцентПрогресса(1, 1, 0, ПараметрыПрогресса); // Пройдена половина процесса.

	Возврат Результат;

КонецФункции

// Считывает данные табличного документа в таблицу значений.
//
// Параметры:
//   МакетСДанными             - ТабличныйДокумент - данные, прочитанные из файла.
//   МаксимальнаяШиринаТаблицы - Число - максимальное количество перебираемых строк при поиске колонок шапки.
//
// Возвращаемое значение:
//   ТаблицаЗначений, ДеревоЗначений - таблица с составом колонок из файла, колонки именуются с префиксом "Колонка_".
//
Функция ПолучитьТаблицуСДаннымиИзМакета(МакетСДанными, МаксимальнаяШиринаТаблицы = 100) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;

	КоличествоКолонок = ?(МакетСДанными.ШиринаТаблицы = 0, 1, Мин(МакетСДанными.ШиринаТаблицы, МаксимальнаяШиринаТаблицы));
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		АдресЯчейки = "R1" + "C" + Формат(НомерКолонки, "ЧГ=0");
		Ячейка = ТабличныйДокумент.Область(АдресЯчейки);
		Ячейка.Текст = "Колонка_" + Формат(НомерКолонки, "ЧГ=0");
	КонецЦикла;

	ТабличныйДокумент.Вывести(МакетСДанными);

	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
	Построитель.Выполнить();
	ТаблицаСДаннымиИзМакета = Построитель.Результат.Выгрузить();

	Возврат ТаблицаСДаннымиИзМакета;

КонецФункции

Функция ЗначениеЯчейки(Типы, ЗначениеЯчейки)

	ДанныеЯчейки = "";
	Для Каждого ТипДанных Из Типы Цикл
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипДанных);
		
		Если МетаданныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			Если Не МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0 Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = Справочники[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
			Для Каждого ЗначениеПеречисления Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
				Если Строка(ЗначениеПеречисления) = СокрЛП(ЗначениеЯчейки) Тогда
					ДанныеЯчейки = ЗначениеПеречисления;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(МетаданныеОбъекта) Тогда
			ДанныеЯчейки = ПланыСчетов[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки);
			Если ДанныеЯчейки.Пустая() Тогда
				ДанныеЯчейки = ПланыСчетов[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
			Если НЕ МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0 Тогда
				ДанныеЯчейки = ПланыВидовХарактеристик[МетаданныеОбъекта.Имя].НайтиПоКоду(ЗначениеЯчейки, Истина);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДанныеЯчейки) Тогда
				ДанныеЯчейки = ПланыВидовХарактеристик[МетаданныеОбъекта.Имя].НайтиПоНаименованию(ЗначениеЯчейки, Истина);
			КонецЕсли;
		Иначе
			ДанныеЯчейки = СтрЗаменить(ЗначениеЯчейки, Символы.НПП, "");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеЯчейки) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеЯчейки;
	
КонецФункции

// Приводит строковое значение к требуемому простому типу.
//
// Параметры:
//   Значение - Строка - преобразуемое значение.
//   ОписаниеТипов - ОписаниеТипов из Дата, Булево, Строка, Число - ожидаемый тип значения.
//
// Возвращаемое значение:
//   Дата, Булево, Строка, Число - преобразованное значение.
//
Функция ПриведениеЗначенияКПростомуТипу(Значение, ОписаниеТипов) Экспорт

	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		Если Тип = Тип("Дата") Тогда
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение, ОписаниеТипов.КвалификаторыДаты.ЧастиДаты);

		ИначеЕсли Тип = Тип("Булево") Тогда
			ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(Значение);

		ИначеЕсли Тип = Тип("Строка") Тогда
			ОписаниеТипаБулево = Новый ОписаниеТипов("Строка");
			Возврат ОписаниеТипаБулево.ПривестиЗначение(СтрЗаменить(Значение, Символы.НПП, ""));

		ИначеЕсли Тип = Тип("Число") Тогда
			НецифровыеСимволы = СтрСоединить(СтрРазделить(Значение, "1234567890,."));
			Значение = СтрСоединить(СтрРазделить(Значение, НецифровыеСимволы));
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Возврат ОписаниеТипаЧисло.ПривестиЗначение(Значение);

		КонецЕсли;
	КонецЦикла;

	Возврат Значение;

КонецФункции

Функция ТекстЯчейкиКРазбору(Знач ТекстЯчейки)

	ЛишниеСимволы = "[]{}";
	ТекстЯчейки = СтрРазделить(ТекстЯчейки, ЛишниеСимволы, Ложь);
	ТекстЯчейки = СтрСоединить(ТекстЯчейки, " ");
	ТекстЯчейки = СтрРазделить(ТекстЯчейки, " ", Ложь);

	// Удалим лишние пробелы.
	Для Инд = 0 По ТекстЯчейки.Количество() - 1 Цикл
		ТекстЯчейки[Инд] = СокрЛП(ТекстЯчейки[Инд]);
	КонецЦикла;

	ТекстЯчейки = СтрСоединить(ТекстЯчейки, " ");

	Возврат ТекстЯчейки;

КонецФункции

// Заполняет параметры шапки и определяет колонки из загружаемых данных.
//
// Параметры:
//   ИнформацияПоКолонкам  - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//   ТаблицаСДаннымиМакета - ТаблицаЗначений - 
//   ПараметрыШапки        - Структура - 
//   СтрокаСДаннымиТаблицы - Число - номер строки, с которой начинается чтение данных строк таблицы.
//   ВысотаШапки           - Число - максимальное количество перебираемых строк при поиске колонок шапки.
//
Процедура ИнициализироватьКолонкиИШапку(ИнформацияПоКолонкам, ТаблицаСДаннымиМакета, ПараметрыШапки = Неопределено,
			СтрокаСДаннымиТаблицы = 1, ВысотаШапки = 100) Экспорт

	Для Каждого Строка Из ИнформацияПоКолонкам Цикл
		Строка.ПозицияВМакете = -1;
	КонецЦикла;

	КолонокКПоиску = ИнформацияПоКолонкам.Количество();
	НомерСтроки = 1;

	// Чтение данных шапки.
	ШаблоныДанныхШапки   = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны",   Новый Массив);
	ПараметрыДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Параметры", Новый Структура);

	// Очистка значений параметров.
	Для Каждого ПараметрДанныхШапки Из ПараметрыДанныхШапки Цикл
		ПараметрыДанныхШапки[ПараметрДанныхШапки.Ключ] = "";
	КонецЦикла;

	МассивСтрокШапки    = Новый Массив; // Для формирования заголовка в ЗаполняемыйШаблон.
	ОбработанныеШаблоны = Новый Массив; // Шаблоны, исключаемые из обработки.
	ОбработанныеЯчейки  = Новый Массив; // Ячейки, исключаемые из обработки.

	НомерОбработаннойСтроки = 1;

	Если ШаблоныДанныхШапки.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСДаннымиМакета Цикл
			Если НомерСтроки = ВысотаШапки Тогда
				Прервать;
			КонецЕсли;

			Если ШаблоныДанныхШапки.Количество() = ОбработанныеШаблоны.Количество() Тогда
				Прервать;
			КонецЕсли;

			Для НомерКолонки = 1 По ТаблицаСДаннымиМакета.Колонки.Количество() Цикл
				АдресЯчейки = Строка(НомерСтроки) + ";" + Строка(НомерКолонки);
				Если ОбработанныеЯчейки.Найти(АдресЯчейки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Колонка = ТаблицаСДаннымиМакета.Колонки.Получить(НомерКолонки - 1);

				ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);

				Если ПустаяСтрока(ЗначениеЯчейки) Тогда
					Продолжить;
				КонецЕсли;

				ШаблонНайден = Ложь;

				Для Каждого ДанныеШаблона Из ШаблоныДанныхШапки Цикл
					Если ШаблонНайден Тогда
						Прервать;
					КонецЕсли;

					Шаблон = ДанныеШаблона.Шаблон;  // Шаблон состоит ключевых слов в фигурных скобках ({}), параметров в квадратных скобках ([])
													// и любых иных слов и символов, например:
													// "{Отчет} {реализации} {№} [Параметр1] {от} [Параметр2]".
													// Шаблон - это отдельная ячейка в области ДанныеШапки макета используемого объекта метаданных.

					Если ОбработанныеШаблоны.Найти(Шаблон) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;

					КлючевыеСловаШаблона = ДанныеШаблона.КлючевыеСловаШаблона;
					ПараметрыШаблона     = ДанныеШаблона.ПараметрыШаблона;
					ШиринаОбластиПоиска  = ДанныеШаблона.ШиринаОбластиПоиска;
					ВысотаОбластиПоиска  = ДанныеШаблона.ВысотаОбластиПоиска;

					ВсегоСовпадений = КлючевыеСловаШаблона.Количество();

					Если ВсегоСовпадений = 0 Тогда // Нет ключевых слов поиска.
						Продолжить;
					КонецЕсли;

					ЗначениеОбласти = ЗначениеЯчейки;

					ПоследняяСтрокаОбласти = НомерСтроки;

					СодержимоеЯчеек = Новый Массив;
					СодержимоеЯчеек.Добавить(Новый Структура("Строка, Колонка, СодержимоеЯчейки",
						НомерСтроки, НомерКолонки, ЗначениеЯчейки));
					НачальнаяСтрокаОбласти  = НомерСтроки;
					НачальнаяКолонкаОбласти = НомерКолонки;
					КонечнаяСтрокаОбласти  = НомерСтроки;
					КонечнаяКолонкаОбласти = НомерКолонки;

					// Чтение данных из области поиска.
					// Область поиска задается в примечании ячейки области ДанныеШапки макета используемого объекта метаданных в формате:
					// "ШиринаОбластиПоиска = 8
					//  ВысотаОбластиПоиска = 4".
					Если ВысотаОбластиПоиска <> 1 Или ШиринаОбластиПоиска <> 1 Тогда
						НачальныйНомерСтроки   = НомерСтроки + ?(ШиринаОбластиПоиска > 1, 0, 1);
						НачальныйНомерКолонки  = НомерКолонки + ?(ШиринаОбластиПоиска > 1, 1, 0);
						ПоследняяСтрокаОбласти = Мин(НомерСтроки + ВысотаОбластиПоиска - 1, ТаблицаСДаннымиМакета.Количество());
						ВсегоКолонокОбласти    = Мин(НомерКолонки + ШиринаОбластиПоиска - 1, ТаблицаСДаннымиМакета.Колонки.Количество());

						Для НомерСтрокиОбласти = НачальныйНомерСтроки По ПоследняяСтрокаОбласти Цикл
							СтрокаОбласти = ТаблицаСДаннымиМакета.Получить(НомерСтрокиОбласти - 1);
							Для НомерКолонкиОбласти = НачальныйНомерКолонки По ВсегоКолонокОбласти Цикл
								ЗначениеЯчейкиОбласти = СокрЛП(СтрокаОбласти["Колонка_" + (НомерКолонкиОбласти)]);

								СодержимоеЯчеек.Добавить(Новый Структура("Строка, Колонка, СодержимоеЯчейки",
									НомерСтрокиОбласти, НомерКолонкиОбласти, ЗначениеЯчейкиОбласти));

								Если ПустаяСтрока(ЗначениеЯчейкиОбласти) Тогда
									Продолжить;
								КонецЕсли;

								ЗначениеОбласти = ЗначениеОбласти + Символы.ПС + ЗначениеЯчейкиОбласти;
							КонецЦикла;

							НачальныйНомерКолонки = НомерКолонки;
						КонецЦикла;

						НомерКолонки = ВсегоКолонокОбласти;
					КонецЕсли;

					// Удаление из шаблона незначимых частей для поиска параметров.
					ПодготовленныйШаблон = СтрЗаменить(Шаблон, "{", Символы.ПС + "{");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "{", Символы.ПС + "{");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "}", "}" + Символы.ПС);
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "[", Символы.ПС + "[");
					ПодготовленныйШаблон = СтрЗаменить(ПодготовленныйШаблон, "]", "]" + Символы.ПС);
					ЗначимыеЧастиШаблона = СтрРазделить(ПодготовленныйШаблон, Символы.ПС, Ложь);

					Инд = ЗначимыеЧастиШаблона.Количество() - 1;
					Пока Инд >=0 Цикл
						ЧастьШаблона = ЗначимыеЧастиШаблона[Инд];
						Если СтрНайти(ЧастьШаблона, "{") = 0 И СтрНайти(ЧастьШаблона, "[") = 0 Тогда
							ЗначимыеЧастиШаблона.Удалить(Инд);
						КонецЕсли;
						Инд = Инд - 1;
					КонецЦикла;

					// Поиск ключевых слов.
					ЗначениеОбласти = ТекстЯчейкиКРазбору(ЗначениеОбласти);
					ШаблонОбласти   = "";

					НачальнаяПозиция = 1;
					Для Каждого КлючевоеСловоШаблона Из КлючевыеСловаШаблона Цикл
						Позиция = СтрНайти(ЗначениеОбласти, КлючевоеСловоШаблона);
						Если Позиция = 0 Тогда
							Продолжить;
						КонецЕсли;

						ДлинаСлова = СтрДлина(КлючевоеСловоШаблона);
						Замена = Сред(ЗначениеОбласти, Позиция, ДлинаСлова);

						// Анализ содержимого до ключевого слова, т.к. между ключевыми словами может содержаться параметр.
						СтрокаДоСловаЗамены = "";
						ДобавлятьСловоДоЗамены = Ложь;
						ИндЗначимойЧасти = ЗначимыеЧастиШаблона.Найти("{" + КлючевоеСловоШаблона + "}");
						Если ИндЗначимойЧасти <> Неопределено И ИндЗначимойЧасти > 0 Тогда
							ПредыдущаяЗначимаяЧасть = ЗначимыеЧастиШаблона[ИндЗначимойЧасти - 1];
							Если СтрНайти(ПредыдущаяЗначимаяЧасть, "[") > 0 Тогда
								СтрокаДоСловаЗамены = Сред(ЗначениеОбласти, НачальнаяПозиция, ?(НачальнаяПозиция = Позиция, 0, Позиция -1 - НачальнаяПозиция));
								ДобавлятьСловоДоЗамены = Истина;
								Если ПустаяСтрока(СтрокаДоСловаЗамены) Тогда
									СтрокаДоСловаЗамены = " ";
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;

						// Заполнение шаблона области.
						ЗначениеОбласти = Лев(ЗначениеОбласти, Позиция - 1) + Сред(ЗначениеОбласти, Позиция + ДлинаСлова);
						ШаблонОбласти   = ШаблонОбласти + ?(ДобавлятьСловоДоЗамены, Символы.ПС + СокрЛП(СтрокаДоСловаЗамены), "")
							+ Символы.ПС +  "{" + Замена + "}";

						НачальнаяПозиция = Позиция;
						ВсегоСовпадений = ВсегоСовпадений - 1;
					КонецЦикла;

					ШаблонОбласти = ШаблонОбласти + Символы.ПС + СокрЛП(Сред(ЗначениеОбласти, НачальнаяПозиция));
					СоставЯчейки = СтрРазделить(ШаблонОбласти, Символы.ПС, Ложь);
					
					ШаблонНайден = Истина;
					НайденыПараметры = Ложь;
					СтрокаШапки = Шаблон;

					// Заполнение параметров.
					ИндексПараметра = 0;
					Для ИндексЧасти = 0 По СоставЯчейки.Количество() - 1 Цикл
						Если ИндексПараметра > ПараметрыШаблона.Количество() - 1 Тогда
							Прервать;
						КонецЕсли;

						Если СтрНайти(СоставЯчейки[ИндексЧасти], "{") = 0 Тогда
							Попытка
								ЗначениеПараметра = СоставЯчейки[ИндексЧасти];
								ПараметрыДанныхШапки[ПараметрыШаблона[ИндексПараметра]] = ЗначениеПараметра;

								СтрокаШапки = СтрЗаменить(СтрокаШапки, "[" + ПараметрыШаблона[ИндексПараметра] + "]", ЗначениеПараметра);

								НайденыПараметры = Истина;
								ИндексПараметра = ИндексПараметра + 1;
							Исключение
								Прервать;
							КонецПопытки;
						КонецЕсли;

						// Получим обработанные ячейки.
						Инд = 0;
						Для Каждого СодержимоеЯчейки Из СодержимоеЯчеек Цикл
							ИскомаяЧасть = СтрЗаменить(СоставЯчейки[ИндексЧасти], "{", "");
							ИскомаяЧасть = СтрЗаменить(ИскомаяЧасть, "}", "");
							Если СтрНайти(СодержимоеЯчейки.СодержимоеЯчейки, ИскомаяЧасть) > 0 Тогда
								КонечнаяСтрокаОбласти  = Макс(КонечнаяСтрокаОбласти, СодержимоеЯчейки.Строка);
								КонечнаяКолонкаОбласти = Макс(КонечнаяКолонкаОбласти, СодержимоеЯчейки.Колонка);
								Прервать;
							КонецЕсли;

							Инд = Инд + 1;
						КонецЦикла;
					КонецЦикла;

					// Заполнение строки шапки для вывода в ЗаполняемыйШаблон.
					Если НайденыПараметры Тогда
						СтрокаШапки = СтрЗаменить(СтрокаШапки, "{", "");
						СтрокаШапки = СтрЗаменить(СтрокаШапки, "}", "");
						МассивСтрокШапки.Добавить(СтрокаШапки);
						ОбработанныеШаблоны.Добавить(Шаблон);
					КонецЕсли;

					// Добавление обработанных ячеек области текущего шаблона для исключения из анализа других шаблонов.
					Для СтрокаЯчейки = НачальнаяСтрокаОбласти По КонечнаяСтрокаОбласти Цикл
						Для КолонкаЯчейки = НачальнаяКолонкаОбласти По КонечнаяКолонкаОбласти Цикл
							АдресЯчейки = Строка(СтрокаЯчейки) + ";" + Строка(КолонкаЯчейки);
							ОбработанныеЯчейки.Добавить(АдресЯчейки);
						КонецЦикла;
					КонецЦикла;

					НомерОбработаннойСтроки = Макс(НомерСтроки, КонечнаяСтрокаОбласти - 1);
				КонецЦикла;
			КонецЦикла;

			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;

	Если МассивСтрокШапки.Количество() > 0 Тогда
		ПараметрыШапки.Вставить("ЗаполненныеШаблоны", МассивСтрокШапки);
	КонецЕсли;

	Если ОбработанныеШаблоны.Количество() = 0 Тогда
		НомерСтрокиВыборки = 1;
	Иначе
		НомерСтрокиВыборки = НомерОбработаннойСтроки + 1;
	КонецЕсли;

	// Чтение заголовка таблицы.
	Для НомерСтроки = НомерСтрокиВыборки По ТаблицаСДаннымиМакета.Количество() - 1 Цикл
		СтрокаТаблицы = ТаблицаСДаннымиМакета[НомерСтроки - 1];

		Если НомерСтроки = ВысотаШапки Тогда
			Прервать;
		КонецЕсли;

		Если КолонокКПоиску = 0 Тогда
			Прервать;
		КонецЕсли;

		// Поиск по точному совпадению значения ячейки табличного документа ожидаемому значению.
		Для Каждого Колонка Из ТаблицаСДаннымиМакета.Колонки Цикл
			ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);
			ПозицияВМакете = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Колонка.Имя, "Колонка_", ""));

			Если ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
				// Возможно, шапка начинается с группы колонок.
				Отбор = Новый Структура("Группа, ПозицияВМакете", ЗначениеЯчейки, -1);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() > 0 Тогда
					Если СтрокаСДаннымиТаблицы = 1 Тогда
						СтрокаСДаннымиТаблицы = НомерСтроки;
					Иначе
						СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
					КонецЕсли;

					Продолжить;
				КонецЕсли;

				// Поиск колонки.
				Отбор = Новый Структура("Синоним, ПозицияВМакете", ЗначениеЯчейки, -1);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() > 0 Тогда
					НайденныеКолонки[0].ПозицияВМакете = ПозицияВМакете;
					КолонокКПоиску = КолонокКПоиску - 1;

					Если СтрокаСДаннымиТаблицы = 1 Тогда
						СтрокаСДаннымиТаблицы = НомерСтроки;
					Иначе
						СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
					КонецЕсли;
				Иначе
					Отбор = Новый Структура("ПредставлениеКолонки, ПозицияВМакете", ЗначениеЯчейки, -1);
					НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
					Если НайденныеКолонки.Количество() > 0 Тогда
						НайденныеКолонки[0].ПозицияВМакете = ПозицияВМакете;
						КолонокКПоиску = КолонокКПоиску - 1;

						Если СтрокаСДаннымиТаблицы = 1 Тогда
							СтрокаСДаннымиТаблицы = НомерСтроки;
						Иначе
							СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если КолонокКПоиску > 0 Тогда
			// Поиск по частичному вхождению ожидаемого значения в значение ячейки табличного документа.
			Для Каждого Колонка Из ТаблицаСДаннымиМакета.Колонки Цикл
				ЗначениеЯчейки = СокрЛП(СтрокаТаблицы[Колонка.Имя]);
				ПозицияВМакете = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(Колонка.Имя, "Колонка_", ""));

				Отбор = Новый Структура("ПозицияВМакете", ПозицияВМакете);
				НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
				Если НайденныеКолонки.Количество() = 0 И ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					Отбор = Новый Структура("ПозицияВМакете", -1);
					НайденныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);

					Для Каждого НайденнаяКолонка Из НайденныеКолонки Цикл
						Если Не ПустаяСтрока(НайденнаяКолонка.Синоним) Тогда
							СоставСинонима = СтрРазделить(НайденнаяКолонка.Синоним, "/", Ложь);
							Для Каждого ЧастьСинонима Из СоставСинонима Цикл
								ПозицияСинонима = СтрНайти(ЗначениеЯчейки, СокрЛП(ЧастьСинонима));
								Если ПозицияСинонима > 0 Тогда
									НайденнаяКолонка.ПозицияВМакете = ПозицияВМакете;
									КолонокКПоиску = КолонокКПоиску - 1;

									Если СтрокаСДаннымиТаблицы = 1 Тогда
										СтрокаСДаннымиТаблицы = НомерСтроки;
									Иначе
										СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
									КонецЕсли;

									ЗавершитьПоиск = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗавершитьПоиск Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;

						Если Не ПустаяСтрока(НайденнаяКолонка.ПредставлениеКолонки) Тогда
							СоставСинонима = СтрРазделить(НайденнаяКолонка.ПредставлениеКолонки, "/", Ложь);
							ЗавершитьПоиск = Ложь;
							Для Каждого ЧастьСинонима Из СоставСинонима Цикл
								ПозицияПредставленияКолонки = СтрНайти(ЗначениеЯчейки, СокрЛП(ЧастьСинонима));
								Если ПозицияПредставленияКолонки > 0 Тогда
									НайденнаяКолонка.ПозицияВМакете = ПозицияВМакете;
									КолонокКПоиску = КолонокКПоиску - 1;

									Если СтрокаСДаннымиТаблицы = 1 Тогда
										СтрокаСДаннымиТаблицы = НомерСтроки;
									Иначе
										СтрокаСДаннымиТаблицы = Мин(СтрокаСДаннымиТаблицы, НомерСтроки);
									КонецЕсли;

									ЗавершитьПоиск = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ЗавершитьПоиск Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	СтрокаСДаннымиТаблицы = СтрокаСДаннымиТаблицы + 1;

КонецПроцедуры

// Конструктор параметров загрузки методами API.
//
// Параметры:
//   УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, для которой нужны параметры.
//
// Возвращаемое значение:
//   Структура:
//     * ИмяОбъектаМетаданных          - Строка - имя объекта метаданных, из которого берутся данные для выгрузки/загрузки.
//     * ИмяТабличнойЧасти             - Строка - имя таблицы-источника колонок из указанного объекта метаданных.
//     * АдресТаблицыЗагруженныхДанных - Строка - адрес хранилища с результатом.
//     * ОбязательныеКолонки           - Массив из Строка - имена колонок, заполнение которых проверяется.
//     * ПараметрыШапки                - см. ПараметрыШапки.
//     * УчетнаяЗапись                 - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//     * НачалоПериода                 - Дата - начало выборки данных.
//     * КонецПериода                  - Дата - окончание выборки данных.
//
Функция ПараметрыЗагрузкиИнтеграционнымиМетодами() Экспорт

	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных",          "");
	ПараметрыЗагрузки.Вставить("ИмяТабличнойЧасти",             "");
	ПараметрыЗагрузки.Вставить("АдресТаблицыЗагруженныхДанных", "");
	ПараметрыЗагрузки.Вставить("ОбязательныеКолонки",           Новый Массив);
	ПараметрыЗагрузки.Вставить("ПараметрыШапки",                ПараметрыШапки());

	ПараметрыЗагрузки.Вставить("УчетнаяЗапись", Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
	ПараметрыЗагрузки.Вставить("НачалоПериода", Дата(1, 1, 1));
	ПараметрыЗагрузки.Вставить("КонецПериода",  Дата(1, 1, 1));

	Возврат ПараметрыЗагрузки;

КонецФункции


#КонецОбласти

#Область ПодготовкаКВыгрузкеДанных

// Конструктор параметров выгрузки данных в макет.
//
// Возвращаемое значение:
//   Структура:
//     * УчетнаяЗапись           - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//     * ИмяОбъектаМетаданных    - Строка - полное имя объекта метаданных.
//     * ИмяМакетаСШаблоном      - Строка - имя макета объекта метаданных.
//     * СсылкаНаОбъект          - Неопределено, ЛюбаяСсылка - ссылка на объект, данные по которому выводятся в табличный 
//                                   документ.
//     * ИнформацияПоКолонкам    - см. ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам.
//     * ПараметрыШапки          - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки.
//     * ДополнительныеПараметры - Структура - любые дополнительные параметры.
//
Функция ПараметрыВыгрузкиДанныхВМакет() Экспорт

	ПараметрыВыгрузкиДанныхВМакет = Новый Структура;
	ПараметрыВыгрузкиДанныхВМакет.Вставить("УчетнаяЗапись",           Справочники.УчетныеЗаписиМаркетплейсов.ПустаяСсылка());
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИмяОбъектаМетаданных",    "");
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИмяМакетаСШаблоном",      "");
	ПараметрыВыгрузкиДанныхВМакет.Вставить("СсылкаНаОбъект",          Неопределено);
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ИнформацияПоКолонкам",    Новый ТаблицаЗначений);
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ПараметрыШапки",          ПараметрыШапки());
	ПараметрыВыгрузкиДанныхВМакет.Вставить("ДополнительныеПараметры", Новый Структура);

	Возврат ПараметрыВыгрузкиДанныхВМакет;
	
КонецФункции

// Формирует табличный документ для переданной в параметра ссылки на объект.
//
// Параметры:
//   Параметры - см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыВыгрузкиДанныхВМакет.
//
// Возвращаемое значение:
//   Структура:
//     * ШаблонСДанными - ТабличныйДокумент - сформированный табличный документ;
//     * ОписаниеОшибки - Строка - описание ошибки.
//
Функция СформироватьТабличныйДокументПоИмениМакетаСШаблоном(Параметры) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ШаблонСДанными", Новый ТабличныйДокумент);
	Результат.Вставить("ОписаниеОшибки", "");

	МенеджерОбъекта = МенеджерОбъекта(Параметры.ИмяОбъектаМетаданных); // МенеджерОбъектаМетаданных

	Макет = УправлениеПечатью.МакетПечатнойФормы(Параметры.ИмяОбъектаМетаданных + "." + Параметры.ИмяМакетаСШаблоном); // ТабличныйДокумент

	Если Макет = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка данных из файла в табличную часть не поддерживается, т.к. отсутствует макет %1 у объекта с типом: %2';
				|en = 'Cannot import data from a file to a table since there is no %1 template for object of the %2 type'"),
			Параметры.ИмяМакетаСШаблоном,
			Параметры.ИмяОбъектаМетаданных);
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;

	МассивОшибок = Новый Массив;

	ШаблонСДанными = Результат.ШаблонСДанными;

	// Заполнение шапки макета.

	Попытка
		ОбластьДанныеШапки = Макет.ПолучитьОбласть("ДанныеШапки");
	Исключение
		ОбластьДанныеШапки = Неопределено;
	КонецПопытки;

	// ОбластьДанныеШапки может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьШапкуМакета") Тогда
		МенеджерОбъекта.ЗаполнитьШапкуМакета(ОбластьДанныеШапки, Параметры);
	КонецЕсли;

	Если ОбластьДанныеШапки <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьДанныеШапки);
	КонецЕсли;

	// Заполнение заголовка таблицы макета.

	Попытка
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	Исключение
		ОбластьЗаголовокТаблицы = Неопределено;
	КонецПопытки;

	// ОбластьЗаголовокТаблицы может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьЗаголовокТаблицыМакета") Тогда
		МенеджерОбъекта.ЗаполнитьЗаголовокТаблицыМакета(ОбластьЗаголовокТаблицы, Параметры);
	КонецЕсли;

	Если ОбластьЗаголовокТаблицы <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьЗаголовокТаблицы);
	КонецЕсли;

	// Заполнение строк макета.

	Попытка
		ОбластьДанныеСтроки = Макет.ПолучитьОбласть("ДанныеСтроки");
	Исключение
		ОбластьДанныеСтроки = Неопределено;
	КонецПопытки;

	ДанныеСтрокМакета = Неопределено;
	Если ОбластьДанныеСтроки <> Неопределено Тогда
		// Данные строк таблицы макета должны быть получены в модуле менеджера используемого объекта метаданных.
		ОписаниеОшибки = "";

		Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ПолучитьДанныеСтрокТаблицыМакета") Тогда
			ДанныеСтрокМакета = МенеджерОбъекта.ПолучитьДанныеСтрокТаблицыМакета(Параметры, ОписаниеОшибки);
		КонецЕсли;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			МассивОшибок.Добавить(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;

	Если ОбластьДанныеСтроки <> Неопределено И ДанныеСтрокМакета <> Неопределено Тогда
		Если ТипЗнч(ДанныеСтрокМакета) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока ДанныеСтрокМакета.Следующий() Цикл
				ОбластьДанныеСтроки.Параметры.Заполнить(ДанныеСтрокМакета);
				ШаблонСДанными.Вывести(ОбластьДанныеСтроки);
			КонецЦикла;
		Иначе
			Для Каждого ДанныеСтроки Из ДанныеСтрокМакета Цикл
				ОбластьДанныеСтроки.Параметры.Заполнить(ДанныеСтроки);
				ШаблонСДанными.Вывести(ОбластьДанныеСтроки);
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Таблица макета может быть заполнена в модуле менеджера используемого объекта метаданных.
		Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ВывестиТаблицуМакета") Тогда
			МенеджерОбъекта.ВывестиТаблицуМакета(ШаблонСДанными, Параметры);
		КонецЕсли;
	КонецЕсли;

	// Заполнение подвала макета.

	Попытка
		ОбластьДанныеПодвала = Макет.ПолучитьОбласть("ДанныеПодвала");
	Исключение
		ОбластьДанныеПодвала = Неопределено;
	КонецПопытки;

	// ОбластьДанныеПодвала может быть переопределена и заполнена в модуле менеджера используемого объекта метаданных.
	Если МетодКонфигурацииИспользуется(Параметры.ИмяОбъектаМетаданных, "ЗаполнитьПодвалМакета") Тогда
		МенеджерОбъекта.ЗаполнитьПодвалМакета(ОбластьДанныеПодвала, Параметры);
	КонецЕсли;

	Если ОбластьДанныеПодвала <> Неопределено Тогда
		ШаблонСДанными.Вывести(ОбластьДанныеПодвала);
	КонецЕсли;

	Результат.ШаблонСДанными = ШаблонСДанными;
	Результат.ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДлительныеОперации

// Сообщает о прогрессе выполнения длительной операции.
//
// Параметры:
//   ВсегоОбрабатываемыхОбъектов - Число - общее количество обрабатываемых за итерацию объектов.
//   ИндексТекущегоОбъекта       - Число - порядковый номер текущего объекта в итерации.
//   ВыполненоПроцентовИтерации  - Число - процент, установленный в предыдущем обращении в данную процедуру.
//   ПараметрыПрогресса          - Структура - характеристики прогресса, см. ИнтеграцияСМаркетплейсамиСервер.ПараметрыПрогресса.
//
Процедура УстановитьПроцентПрогресса(Знач ВсегоОбрабатываемыхОбъектов, ИндексТекущегоОбъекта,
			ВыполненоПроцентовИтерации, ПараметрыПрогресса) Экспорт

	ВсегоОбрабатываемыхОбъектов = ?(ВсегоОбрабатываемыхОбъектов = 0, 1, ВсегоОбрабатываемыхОбъектов);

	ТекущийПроцентВыполнения = Окр(ИндексТекущегоОбъекта / ВсегоОбрабатываемыхОбъектов, 1);
	Если ВыполненоПроцентовИтерации = ТекущийПроцентВыполнения Тогда
		Возврат;
	КонецЕсли;

	ВыполненоПроцентовИтерации = ТекущийПроцентВыполнения;

	Процент = ИндексТекущегоОбъекта * (ПараметрыПрогресса.ШагИтерацииВПроцентах / ВсегоОбрабатываемыхОбъектов)
		+ ПараметрыПрогресса.ПрогрессВыполнения;
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.СообщитьПрогресс(Процент);

КонецПроцедуры

// Конструктор параметров прогресса.
//
// Возвращаемое значение:
//   Структура:
//     * ШагИтерацииВПроцентах - Число - максимальный размер итерации в процентах.
//     * ПрогрессВыполнения    - Число - текущий прогресс процесса до перехода к новой итерации.
//
Функция ПараметрыПрогресса() Экспорт

	ПараметрыПрогресса = Новый Структура;
	ПараметрыПрогресса.Вставить("ШагИтерацииВПроцентах", 100);
	ПараметрыПрогресса.Вставить("ПрогрессВыполнения", 0);
	
	Возврат ПараметрыПрогресса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СкладыСлужебный

// Определяет сопоставленные склады из данных информационной базы.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//   ТолькоСсылки              - Булево - признак возврата только массива складов, иначе возвращается таблица.
//   ВыводитьПодчиненныеСклады - Булево - признак включения в ответ подчиненных складов.
// 
// Возвращаемое значение:
//   - Массив Из СправочникСсылка.Склады - список ссылок СправочникСсылка.Склады.
//   - ТаблицаЗначений - таблица с данными по складам.
//
Функция ПолучитьСопоставленныеСклады(УчетнаяЗаписьМаркетплейса, ТолькоСсылки = Истина,
		ВыводитьПодчиненныеСклады = Истина) Экспорт

	СопоставленныеСклады = Новый ТаблицаЗначений;
	СопоставленныеСклады.Колонки.Добавить("Группа",              		   Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СопоставленныеСклады.Колонки.Добавить("Склад",               		   Новый ОписаниеТипов("СправочникСсылка.Склады"));
	СопоставленныеСклады.Колонки.Добавить("ИдентификаторСклада", 		   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СопоставленныеСклады.Колонки.Добавить("НаименованиеСклада",  		   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250)));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыFBO", Новый ОписаниеТипов("Булево"));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыFBS", Новый ОписаниеТипов("Булево"));
	СопоставленныеСклады.Колонки.Добавить("ИспользуетсяДляСхемыРаботыDBS", Новый ОписаниеТипов("Булево"));

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоответствияОбъектов.Объект1С КАК Склад,
		|	СоответствияОбъектов.ИдентификаторОбъектаМаркетплейса КАК ИдентификаторСклада,
		|	СоответствияОбъектов.НаименованиеОбъектаМаркетплейса КАК НаименованиеСклада,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыFBO КАК ИспользуетсяДляСхемыРаботыFBO,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыFBS КАК ИспользуетсяДляСхемыРаботыFBS,
		|	СоответствияОбъектов.ИспользуетсяДляСхемыРаботыDBS КАК ИспользуетсяДляСхемыРаботыDBS,
		|	Склады.ЭтоГруппа КАК ЭтоГруппаСкладов
		|ИЗ
		|	РегистрСведений.СоответствияОбъектовМаркетплейсов КАК СоответствияОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СоответствияОбъектов.Объект1С = Склады.Ссылка
		|ГДЕ
		|	СоответствияОбъектов.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СоответствияОбъектов.ВидОбъектаМаркетплейса = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовМаркетплейсов.Склад)"; 
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьМаркетплейса", УчетнаяЗаписьМаркетплейса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ТолькоСсылки Тогда
			Возврат Новый Массив;
		Иначе
			Возврат СопоставленныеСклады;
		КонецЕсли;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВыводитьПодчиненныеСклады И Выборка.ЭтоГруппаСкладов Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПодчиненныеСклады = СкладыСервер.СписокПодчиненныхСкладов(Выборка.Склад);
			УстановитьПривилегированныйРежим(Ложь);
			
			Для Каждого Склад Из ПодчиненныеСклады Цикл
				НоваяСтрока = СопоставленныеСклады.Добавить();
				НоваяСтрока.Группа = Выборка.Склад;
				НоваяСтрока.Склад = Склад.Значение;
				НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
				НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыFBO = Выборка.ИспользуетсяДляСхемыРаботыFBO;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыFBS = Выборка.ИспользуетсяДляСхемыРаботыFBS;
				НоваяСтрока.ИспользуетсяДляСхемыРаботыDBS = Выборка.ИспользуетсяДляСхемыРаботыDBS;
			КонецЦикла;
			
		Иначе
			НоваяСтрока = СопоставленныеСклады.Добавить();
			НоваяСтрока.Группа = Выборка.Склад;
			НоваяСтрока.Склад = Выборка.Склад;
			НоваяСтрока.ИдентификаторСклада = Выборка.ИдентификаторСклада;
			НоваяСтрока.НаименованиеСклада = Выборка.НаименованиеСклада;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыFBO = Выборка.ИспользуетсяДляСхемыРаботыFBO;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыFBS = Выборка.ИспользуетсяДляСхемыРаботыFBS;
			НоваяСтрока.ИспользуетсяДляСхемыРаботыDBS = Выборка.ИспользуетсяДляСхемыРаботыDBS;
		КонецЕсли;
	КонецЦикла;

	Если ТолькоСсылки Тогда
		СопоставленныеСклады.Свернуть("Склад");
		Возврат СопоставленныеСклады.ВыгрузитьКолонку("Склад");
	Иначе
		СопоставленныеСклады.Свернуть("Группа, Склад, ИдентификаторСклада, НаименованиеСклада, ИспользуетсяДляСхемыРаботыFBO, ИспользуетсяДляСхемыРаботыFBS, ИспользуетсяДляСхемыРаботыDBS");
		Возврат СопоставленныеСклады;
	КонецЕсли;

КонецФункции

#КонецОбласти

Функция ОписаниеСобытияДляЖурналаРегистрации()

	Возврат НСтр("ru = 'Интеграция с маркетплейсами';
				|en = 'Integration with marketplaces'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Формирует строку параметров запроса (QUERY).
// 
// Параметры:
//   ОбъектXDTO          - ОбъектXDTO - объект, из реквизитов с формой "атрибут" которого формируется строка.
//   ТипОбъекта          - ТипОбъектаXDTO - тип объекта из операнда ОбъектXDTO.
//   ДобавитьРазделитель - Булево - добавить к строке предваряющий разделитель (знак вопроса).
// 
// Возвращаемое значение:
//   Строка - строковое представление параметров запроса для использования в URI.
//
Функция ПараметрыЗапроса(ОбъектXDTO, ТипОбъекта, ДобавитьРазделитель = Истина)

	СтрокиПараметров = Новый Массив;

	Для Каждого Свойство Из ТипОбъекта.Свойства Цикл
		Если Свойство.Форма = ФормаXML.Атрибут Тогда
			СтрокиПараметров.Добавить(Свойство.Имя + "=" + КодироватьСтроку(XMLСтрока(ОбъектXDTO[Свойство.Имя]), СпособКодированияСтроки.КодировкаURL));
		КонецЕсли;
	КонецЦикла;

	Если СтрокиПараметров.Количество() > 0 Тогда
		Если ДобавитьРазделитель Тогда
			Возврат "?" + СтрСоединить(СтрокиПараметров, "&");
		Иначе
			Возврат СтрСоединить(СтрокиПараметров, "&");
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПараметрыСоединения()

	Возврат Новый Структура("Сервер, Порт, Протокол", "", 443, "https");

КонецФункции

// Возвращает описание приложения Яндекс.
// 
// Возвращаемое значение:
//   Структура - описание приложения Яндекс. Содержит ключи: client_id, client_secret.
//
Функция ПараметрыАвторизацииПриложения()

	Возврат Новый Структура("ИдентификаторПриложения, client_id, client_secret", "", "", "");

КонецФункции

// Анализирует код состояния запроса после обработки сервером на корректность (диапазон 200-299).
// Применяется в случаях возврата сервером множества значений кода состояния.
// 
// Параметры:
//   КодСостояния - Число - код состояния запроса HTTP.
// 
// Возвращаемое значение:
//   Булево - признак успешной обработки запроса сервером.
//
Функция ЗапросУспешноОбработан(КодСостояния)

	Возврат КодСостояния >= 200 И КодСостояния <= 299;

КонецФункции

// Проверяет строку на допустимость использования в качестве метода HTTP согласно разделу 4 RFC 7231.
// 
// Параметры:
//   Метод - Строка - переданный метод HTTP.
// 
// Возвращаемое значение:
//   Булево - признак допустимости метода HTTP.
//
Функция МетодHTTPДопустим(Метод)

	Методы = Новый Структура;
	Методы.Вставить("DELETE");
	Методы.Вставить("GET");
	Методы.Вставить("POST");
	Методы.Вставить("PUT");
	
	Возврат Методы.Свойство(ВРег(Метод)) <> Неопределено;

КонецФункции

Функция ПротоколПоУмолчанию(Порт)

	ПортыПоУмолчанию = Новый Соответствие;
	ПортыПоУмолчанию.Вставить(80, "http://");
	ПортыПоУмолчанию.Вставить(443, "https://");
	ПортыПоУмолчанию.Вставить(21, "ftp://");
	ПортыПоУмолчанию.Вставить(990, "ftps://");

	Протокол = ПортыПоУмолчанию.Получить(Порт);
	Если Протокол = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Протокол;
	КонецЕсли;

КонецФункции

// Формирует и отправляет запрос HTTP с анализом ответа сервера.
// 
// Параметры:
//   ПараметрыПодключения - Структура - параметры подключения к серверу, см. ПараметрыСоединения.
//   Запрос               - HTTPЗапрос - запрос для отправки.
//   МетодHTTP            - Строка - метод HTTP из допустимых по разделу 4 RFC 7231.
// 
// Возвращаемое значение:
//   Структура - информация об отправке и обработке запроса сервером. Содержит ключи: КодСостояния, ТекстОтвета, Отказ, 
//     ТекстОшибки.
//
Функция ВыполнитьЗапросHTTP(ПараметрыПодключения, Запрос, МетодHTTP = "POST")

	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Протокол);
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Сервер, ПараметрыПодключения.Порт,,, Прокси, 20, ЗащищенноеСоединение, Ложь);

	Ответ = Новый Структура();
	Ответ.Вставить("КодСостояния", 0);
	Ответ.Вставить("ТекстОтвета", "");
	Ответ.Вставить("Отказ", Ложь);
	Ответ.Вставить("ТекстОшибки", "");

	Если Не МетодHTTPДопустим(МетодHTTP) Тогда
		ШаблонОшибки = НСтр("ru = 'Указан недопустимый метод HTTP (%1)';
							|en = 'Invalid HTTP method is specified (%1)'");
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, МетодHTTP);
		Возврат Ответ;
	КонецЕсли;

	Попытка
		РезультатЗапроса = Соединение.ВызватьHTTPМетод(ВРег(МетодHTTP), Запрос);

		Ответ.КодСостояния = РезультатЗапроса.КодСостояния;
		Ответ.ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку("UTF8");
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При отправке запроса на сервер %1 возникла ошибка: %2';
				|en = 'An error occurred when sending the request to the %1 server: %2'"),
			ПараметрыПодключения.Сервер,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		Ответ.Отказ = Истина;
		Ответ.ТекстОшибки = ТекстОшибки;
	КонецПопытки;

	Возврат Ответ;

КонецФункции   

// Выполняет попытку приведения строки в формате JSON к указанному типу объекта XDTO.
// 
// Параметры:
//   ТекстОбъекта - Строка - строковое описание объекта в формате JSON.
//   ТипОбъекта   - ТипОбъектаXDTO - тип объекта для приведения.
// 
// Возвращаемое значение:
//   Структура - результат выполнения приведения. Содержит ключи: Объект, Отказ, ТекстОшибки.
//
Функция ПривестиКТипуОбъекта(ТекстОбъекта, ТипОбъекта)

	РезультатПриведения = Новый Структура("Объект, Отказ, ТекстОшибки", Неопределено, Ложь, "");

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(ТекстОбъекта);
		РезультатПриведения.Объект = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON, ТипОбъекта);
	Исключение
		РезультатПриведения.Отказ = Истина;
		РезультатПриведения.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат РезультатПриведения

КонецФункции

// Возвращает путь к ресурсу (папке или файлу) относительно папки приложения.
// 
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка.НоменклатураПрисоединенныеФайлы - файл, по которому запрашивается информация 
//                          от сервиса.
// 
// Возвращаемое значение:
//   Строка - путь к ресурсу в кодировке URL.
//
Функция ПутьКРесурсу(ПрисоединенныйФайл)

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ДатаМодификацииУниверсальная, Расширение");
	Возврат "app:/" + ПрисоединенныйФайл.УникальныйИдентификатор() + Формат(ЗначенияРеквизитов.ДатаМодификацииУниверсальная, "ДФ=ггггММддччммсс") + "." + ЗначенияРеквизитов.Расширение;

КонецФункции

#КонецОбласти

#КонецЕсли