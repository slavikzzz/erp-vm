////////////////////////////////////////////////////////////////////////////////
// Подсистема подработок (кратковременных трудовых соглашений сотрудников).
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Прекращает все действующие подработки сотрудников.
//
// Параметры:
// 	Регистратор - ДокументСсылка - документ, регистрирующий увольнение.
//  Движения    - КоллекцияДвижений
// 	Сотрудники  - ТаблицаЗначений
//                	* Сотрудник      - СправочникСсылка.Сотрудники - увольняемый основной сотрудник.
//                	* ДатаУвольнения - Дата                        - дата увольнения основного сотрудника.
//
Процедура ПрекратитьПодработкиСотрудников(Регистратор, Движения, Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТГоловныеСотрудники
		|ИЗ
		|	&Сотрудники КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ГоловныеСотрудники.ДатаУвольнения, ДЕНЬ, 1) КАК НачалоПериода,
		|	ДОБАВИТЬКДАТЕ(ГоловныеСотрудники.ДатаУвольнения, ДЕНЬ, 1) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГоловныеСотрудники КАК ГоловныеСотрудники
		|		ПО Сотрудники.ГоловнойСотрудник = ГоловныеСотрудники.Сотрудник";
		
	Запрос.Выполнить();
	
	ПрекратитьПодработкиСотрудниковПоВременнойТаблице(Регистратор, Движения, Запрос.МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ПрекратитьПодработкиСотрудниковПоВременнойТаблице(Регистратор, Движения, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	
	ПараметрыПолученияПодработок.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияПодработок.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	ПараметрыПолученияПодработок.РаботникиПоДоговорамГПХ = Ложь;
	
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияПодработок);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*,
		|	ДОБАВИТЬКДАТЕ(СотрудникиПериоды.ОкончаниеПериода, ДЕНЬ, -1) КАК ДатаУвольнения
		|
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник
		|ГДЕ
		|	РабочиеМестаСотрудников.ГоловнойСотрудник <> РабочиеМестаСотрудников.Сотрудник";
	
	ПодработкиСотрудника = Запрос.Выполнить().Выгрузить();
	
	Если ПодработкиСотрудника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеСобытия =  Неопределено;
	Для Каждого Подработка Из ПодработкиСотрудника Цикл
		
		Если КадровыеСобытия = Неопределено Тогда
			КадровыеСобытия = Документы.ПрекращениеПодработки.КадровыеСобытияУвольнение(Подработка.Сотрудник, Подработка.ДатаУвольнения, Подработка.ФизическоеЛицо);
			Продолжить;
		КонецЕсли;
		
		КадровоеСобытие = Документы.ПрекращениеПодработки.КадровыеСобытияУвольнение(Подработка.Сотрудник, Подработка.ДатаУвольнения, Подработка.ФизическоеЛицо);
		ЗаполнитьЗначенияСвойств(КадровыеСобытия.Добавить(), КадровоеСобытие[0]);
	
	КонецЦикла;
	
	КадровыйУчет.СформироватьКадровыеДвижения(Регистратор, Движения, КадровыеСобытия);
	
	Для Каждого Подработка Из ПодработкиСотрудника Цикл
		
		// Прекращаем плановые начисления и удержания.
		РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеНачисленияУдержания(Движения, Подработка.Сотрудник, КонецДня(Подработка.ДатаУвольнения) + 1, Подработка.Организация, Ложь);
		
		// Регистрируем состояние
		СостоянияСотрудников.ЗарегистрироватьСостояниеСотрудника(Движения, Регистратор, Подработка.Сотрудник, Перечисления.СостоянияСотрудника.Увольнение, КонецДня(Подработка.ДатаУвольнения) + 1);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПодработок(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПодработок", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#Область НастройкиВариантовОтчетов

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание см. ЗарплатаКадрыВариантыОтчетов.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.Подработки);

КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d6-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НазначениеПодработки);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПрекращениеПодработки);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.НазначениеПодработки, Истина);
	Списки.Вставить(Метаданные.Справочники.НазначениеПодработкиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПрекращениеПодработки, Истина);
	Списки.Вставить(Метаданные.Справочники.ПрекращениеПодработкиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.Подработки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НазначениеПодработки", "ДатаЗапрета", "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрекращениеПодработки", "ДатаЗапрета", "Зарплата", "Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации) Экспорт
	
	// Метаданные.Документы.НазначениеПодработки
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.НазначениеПодработки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.НазначениеПодработки);
	СписокОбъектов.Добавить(Документы.ПрекращениеПодработки); 
	
КонецПроцедуры

Процедура ПроверкаЗаполненияДокументаНачальнаяШтатнаяРасстановка(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПодработок = Объект.Сотрудники.НайтиСтроки(Новый Структура("ВидЗанятости", Перечисления.ВидыЗанятости.Подработка));
	Если СтрокиПодработок.Количество() > 0 Тогда
		ВызватьИсключение НСтр("ru = 'Для регистрации данных по подработкам необходимо включить настройку кадрового учета ""Использовать подработки""';
								|en = 'To register information on side jobs, enable the ""Use side jobs"" HR recordkeeping setting  '");
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти