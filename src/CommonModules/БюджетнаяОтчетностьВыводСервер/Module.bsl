#Область ПрограммныйИнтерфейс

// Получает структуру необязательных параметров для функции ПолучитьВыборкуЯчеек
// Возвращаемое значение:
//	Структура - структура параметров с ключами:
//	  * Колонка - СписокЗначений, Неопределено - список колонок к выводу
//	  * Строка - СписокЗначений, Неопределено - список строк к выводу
//	  * ИндексыПоиска - Соответствие, Неопределено - описание параметра:
//	    ** Ключ - Строка - имена колонок индекса через запятую
//	    ** Значение - Булево -
//	  *ДобавлятьФлаг - Булево - признак добавления колонки в формате Флаг + <ИмяИзмерения>.
//	  *РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - режим формирования 
//
Функция НеобязательныеПараметрыПолученияВыборкиЯчеек() Экспорт
	Параметры = Новый Структура("Колонка, Строка, ИндексыПоиска, ДобавлятьФлаг, ВидАналитики, ВыводитьИерархиюЭлементов,
			| ДополнительныйОтбор, РежимФормирования");
	Параметры.ДобавлятьФлаг = Ложь;
	Параметры.ВыводитьИерархиюЭлементов = Ложь;
	
	Возврат Параметры;
КонецФункции

// Получает ячейки бюджета в соответствии с переданными параметрами.
// 
// Параметры:
//	ДанныеЯчеек - ТаблицаЗначений - описание параметра.
//	НакопленныйОтбор - Структура - описание состава накапливаемых отборов:
//	* Ключ - Строка - имя измерения.
//	* Значение - Произвольный - значение применяемого отбора.
//	НеобязательныеПараметры - Структура, Неопределено - структура необязательных параметров с ключами:
//	  * Колонка - СписокЗначений, Неопределено - список колонок к выводу.
//	  * Строка - СписокЗначений, Неопределено - список строк к выводу.
//	  * ИндексыПоиска - Соответствие, Неопределено - описание параметра:
//	    ** Ключ - Строка - имена колонок индекса через запятую.
//	    ** Значение - Булево -
//	  *ДобавлятьФлаг - Булево - признак добавления колонки в формате Флаг + <ИмяИзмерения>. По умолчанию Ложь.
//
// Возвращаемое значение:
//	Массив - массив строк, найденных в таблице ДанныеЯчеек.
//
Функция ПолучитьВыборкуЯчеек(ДанныеЯчеек, НакопленныйОтбор,
						НеобязательныеПараметры = Неопределено)
	
	// Получение необязательных параметров
	Колонка = Неопределено;
	Строка = Неопределено;
	ИндексыПоиска = Неопределено;
	ДобавлятьФлаг = Ложь;
	Если НеобязательныеПараметры <> Неопределено Тогда
		НеобязательныеПараметры.Свойство("Колонка",       Колонка);
		НеобязательныеПараметры.Свойство("Строка",        Строка);
		НеобязательныеПараметры.Свойство("ИндексыПоиска", ИндексыПоиска);
		НеобязательныеПараметры.Свойство("ДобавлятьФлаг", ДобавлятьФлаг);
		Если ДобавлятьФлаг = Неопределено Тогда
			ДобавлятьФлаг = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтбора = Неопределено;
	НайденныеСтроки = НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Колонка, Строка, НакопленныйОтбор, ИндексыПоиска, СтруктураОтбора);
	
	ОтборЯчейки = ОтборЯчейкиПоСтруктуреПоиска(СтруктураОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ОтборЯчейки = ОтборЯчейки;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

// Получает ячейки бюджета в соответствии с переданными параметрами.
// 
// Параметры:
//	ДанныеЯчеек - ТаблицаЗначений - содержит в том числе (см. ДанныеЯчеек):
// 		*Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 		*Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 		*ИндексСтроки - Число - Индекс строки.
// 		*СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - Статья бюджетов или целевой показатель.
// 		*ПоказательБюджетов - СправочникСсылка.ПоказателиБюджетов - Показатель бюджетов (расчетный или целевой).
// 		*НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель.
// 		*РедактируемоеЗначение - Строка - Имя ячейки редактируемого значения.
// 		*ОсновнойЭлемент - Булево - Если истина, то выводится в бюджет, если ложь - то служит для расчета значений в основных ячейках.
// 		*ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента.
// 		*РасчетЗаполнение - Строка - Вариант расчета / заполнения ячейки.
// 		*ВидОперанда - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид операнда.
// 		*ПорядокРасчетаОперанда - Число - порядок расчета операнда.
// 		*МинимумНомерПоПорядку - Число - минимальный номер по порядку.
// 		*Примечание - Строка - Примечание.
// 		*Период - Дата - Период данных ячейки.
// 		*Валюта - СправочникСсылка.Валюты - Валюта суммовых значений.
// 		*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - Единица измерения количественных значений.
// 		*Количество - Число - Количество.
// 		*КоличествоОборот - Число - Количество оборот.
// 		*Сумма - Число - Сумма.
// 		*СуммаОборот - Число - Сумма оборот.
// 		*СуммаВал - Число - Сумма валютная.
// 		*СуммаВалОборот - Число - Сумма валютная оборот.
// 		*Значение - Число - Значение нефинансового показателя.
// 		*ИмяОбластиКоличество - Строка - Имя области в табличном документе.
// 		*ИмяОбластиСумма - Строка - Имя области в табличном документе.
// 		*РассчитанКоличество - Булево - флаг расчета количества по формуле.
// 		*РассчитанСумма - Булево - флаг расчета суммы по формуле.
// 		*РассчитанЗначение - Булево - флаг расчета значения для нефинансового показателя по формуле.
// 		*СтрокаДанныхСопоставлена - Булево - Флаг сопоставления строки таблицы и строки табличного документа бюджета.
//	Измерения - Массив, Строка - коллекция имен измерений или название единственного измерения.
//	НакопленныйОтбор - Структура - описание состава накапливаемых отборов:
//	* Ключ - Строка - имя измерения.
//	* Значение - ПроизвольноеЗначение - значение применяемого отбора.
//	НеобязательныеПараметры - Структура, Неопределено - структура необязательных параметров с ключами:
//	  * Колонка - СписокЗначений, Неопределено - список колонок к выводу.
//	  * Строка - СписокЗначений, Неопределено - список строк к выводу.
//	  * ИндексыПоиска - Соответствие, Неопределено - описание параметра:
//	    ** Ключ - Строка - имена колонок индекса через запятую.
//	    ** Значение - Булево -
//	  *ДобавлятьФлаг - Булево - признак добавления колонки в формате Флаг + <ИмяИзмерения>. По умолчанию Ложь.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица, результат выполнения схемы компоновки.
//
Функция ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, Измерения, НакопленныйОтбор,
							НеобязательныеПараметры = Неопределено) Экспорт
	
	// Получение необязательных параметров
	Колонка = Неопределено;
	Строка = Неопределено;
	ИндексыПоиска = Неопределено;
	ДобавлятьФлаг = Ложь;
	ВыводитьИерархиюЭлементов = Ложь;
	ДополнительныйОтбор = Неопределено;
	РежимФормирования = Неопределено;
	Если НеобязательныеПараметры <> Неопределено Тогда
		НеобязательныеПараметры.Свойство("Колонка", Колонка);
		НеобязательныеПараметры.Свойство("Строка", Строка);
		НеобязательныеПараметры.Свойство("ИндексыПоиска", ИндексыПоиска);
		НеобязательныеПараметры.Свойство("ДобавлятьФлаг", ДобавлятьФлаг);
		НеобязательныеПараметры.Свойство("ВыводитьИерархиюЭлементов", ВыводитьИерархиюЭлементов);
		НеобязательныеПараметры.Свойство("ДополнительныйОтбор", ДополнительныйОтбор);
		НеобязательныеПараметры.Удалить("ДополнительныйОтбор");
		НеобязательныеПараметры.Свойство("РежимФормирования", РежимФормирования);
		Если ДобавлятьФлаг = Неопределено Тогда
			ДобавлятьФлаг = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	Набор = Неопределено;
	СКД = ФинОтчеты.НоваяСхемаНаборОбъект("ДанныеЯчеек", Набор);
	ФинОтчеты.НовоеПолеНабора(Набор, "ОсновнойЭлемент");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	
	Если ТипЗнч(Измерения) = Тип("Массив") Тогда
		
		СписокИзмерений = Измерения;
		ФинОтчеты.НовоеПолеНабора(Набор, "МинимумНомерПоПорядку");
		ФинОтчеты.НовоеПолеНабора(Набор, "СуммаОборот");
		Если СписокИзмерений.Количество() > 1 Тогда
			ВыводитьИерархиюЭлементов = Ложь;
		КонецЕсли;
		
	Иначе
		
		СписокИзмерений = Новый Массив;
		СписокИзмерений.Добавить(Измерения);
		
	КонецЕсли;
	
	Для Каждого ИмяИзмерения Из СписокИзмерений Цикл
	
		Если ВыводитьИерархиюЭлементов Тогда
			ТипыВидаАналитики = БюджетированиеПовтИсп.ТипыВидаАналитики(НеобязательныеПараметры.ВидАналитики);
			Поле = ФинОтчеты.НовоеПолеНабора(Набор, ИмяИзмерения, , , Новый ОписаниеТипов(ТипыВидаАналитики));
			// Иерархия доступна при использовании иерархии для всех типов значений,
			// поэтому достаточно проверить один тип значений
			ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипыВидаАналитики[0]).ПолноеИмя();
			ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЭтоГруппа", 
				?(ОбщегоНазначенияУТПовтИсп.ЕстьРеквизитОбъекта(ИмяОбъектаМетаданных, "ЭтоГруппа"),
				ИмяИзмерения + ".ЭтоГруппа", "ЛОЖЬ"), , , Новый ОписаниеТипов("Булево"));
			ФинОтчеты.НовыйРесурс(СКД, "ЭтоГруппа", , "ЭтоГруппа");
		Иначе
			Поле = ФинОтчеты.НовоеПолеНабора(Набор, ИмяИзмерения);
		КонецЕсли;
		ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
		ПолеУпорядочивания.Выражение = 
		"ВЫБОР
		|	КОГДА ЗначениеЗаполнено(" + ИмяИзмерения + ") ТОГДА
		|	0 ИНАЧЕ 1 КОНЕЦ";
		ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ПолеУпорядочивания = Поле.ВыраженияУпорядочивания.Добавить();
		ПолеУпорядочивания.Выражение = ИмяИзмерения;
		ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ПолеУпорядочивания.Автоупорядочивание = Истина;
	
	КонецЦикла;
	
	Если СписокИзмерений.Количество() > 1
		И РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		ТекстВыраженияДа = " И (ЗначениеЗаполнено (" + СтрСоединить(СписокИзмерений, ") ИЛИ ЗначениеЗаполнено(") + "))";
		ТекстВыраженияНет = " И (НЕ ЗначениеЗаполнено (" + СтрСоединить(СписокИзмерений, ") ИЛИ НЕ ЗначениеЗаполнено(")
			+ "))";
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЕстьПустаяАналитика", "ВЫБОР КОГДА СуммаОборот = 0" + ТекстВыраженияДа
			+ ТекстВыраженияНет + " И МинимумНомерПоПорядку ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", , ,
			Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКД);
	
	Если Колонка <> Неопределено
		И ЗначениеЗаполнено(Колонка) Тогда
		
		ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Колонка", Колонка);
		Отбор.ВидСравнения = ВидСравненияОтчета;
		
	КонецЕсли;
	
	Если Строка <> Неопределено
		И ЗначениеЗаполнено(Строка) Тогда
		
		ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор = ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "Строка", Строка);
		Отбор.ВидСравнения = ВидСравненияОтчета;
		
	КонецЕсли;
	
	Если ВыводитьИерархиюЭлементов Тогда
		
		ФинОтчеты.НовоеПолеВыбора(Компоновщик.Настройки, "ЭтоГруппа");
		
		Если Не ЗначениеЗаполнено(РежимФормирования)
			Или РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
			ВидСравненияОтчета = ВидСравненияКомпоновкиДанных.Заполнено;
			ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, ИмяИзмерения, , , ВидСравненияОтчета);
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныйОтбор) = Тип("ХранилищеЗначения") Тогда
			НастройкиОтбора = ДополнительныйОтбор.Получить();
			Если ТипЗнч(НастройкиОтбора) = Тип("НастройкиКомпоновкиДанных")
				И НастройкиОтбора.Отбор.Элементы.Количество() > 0 Тогда
				ОбработатьНастройкиОтбораПоИерархииАналитики(НастройкиОтбора.Отбор, ИмяИзмерения);
				Настройки = Компоновщик.ПолучитьНастройки();
				КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СКД, Настройки, НастройкиОтбора);
				Компоновщик.ЗагрузитьНастройки(Настройки);
				НеобязательныеПараметры.Вставить("ДополнительныйОтбор", ДополнительныйОтбор);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "ОсновнойЭлемент", Истина);
	
	Если СписокИзмерений.Количество() > 1
		И РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		ФинОтчеты.НовыйОтбор(Компоновщик.Настройки.Отбор, "ЕстьПустаяАналитика", Ложь);
	КонецЕсли;
	
	// Поиск с учетом индексов
	СтрокиВКоторыхСледуетИскать = НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Неопределено, Неопределено,
		НакопленныйОтбор, ИндексыПоиска);
	СтрокиВКоторыхСледуетИскать = ДанныеЯчеек.Скопировать(СтрокиВКоторыхСледуетИскать);
	
	Группировка = Неопределено;
	
	Для Каждого ИмяИзмерения Из СписокИзмерений Цикл
		
		Порядок = Компоновщик.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных(ИмяИзмерения);
		
		Если Группировка = Неопределено Тогда
			Группировка = ФинОтчеты.НоваяГруппировка(Компоновщик.Настройки.Структура, ИмяИзмерения, ?(
				ВыводитьИерархиюЭлементов, ТипГруппировкиКомпоновкиДанных.Иерархия, Неопределено));
		Иначе
			ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяИзмерения);
		КонецЕсли;
		
		Если ДобавлятьФлаг Тогда
			ФинОтчеты.НовоеПолеНабора(Набор, "Флаг" + ИмяИзмерения);
			ФинОтчеты.НовоеПолеГруппировки(Группировка, "Флаг" + ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
		
	Если ВыводитьИерархиюЭлементов Тогда
		ФинОтчеты.НовоеПолеВыбора(Группировка, "ЭтоГруппа");
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки,
			"ГоризонтальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(Компоновщик.Настройки,
			"ВертикальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СКД, Компоновщик, Новый Структура("ДанныеЯчеек",
		СтрокиВКоторыхСледуетИскать), ВыводитьИерархиюЭлементов);
	
	Возврат Результат;
	
КонецФункции

#Область ПроцедурыИФункцииГенерацииБюджета

// Возвращает данные ячеек вида бюджета и параметры их вывода
//
// Параметры:
//	Параметры - см. Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент
//
// Возвращаемое значение:
//	Структура - данные ячеек и параметры их вывода:
//		* ДанныеЯчеек - см. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
//		* ДанныеРасшифровки - см. ДобавитьПараметрВывода.ПараметрыВывода
//		* Результат - ТабличныйДокумент -
//		* ПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
//		* СтильУровней - Структура - содержит:
// 	 		** Значение - см. ПолучитьКэшСтилейСтрокСпискаРедактирования
//		* ДеревоСтрокСпискаРедактирования - ДеревоЗначений -
//		* Примечания - Строка, Произвольный, Структура -
//
Функция ДанныеЭкземпляраБюджета(Параметры) Экспорт
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	РежимФормирования = Параметры.РежимФормирования;
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, РежимФормирования, СтруктураПараметровВывода);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		СтруктураПараметровВывода.Вставить("КолонкиТаблиц", Результат.КолонкиТаблиц);
		
		РезультатРасчета.Вставить("ДанныеРасшифровки", Результат.ДанныеРасшифровки);
		РезультатРасчета.Вставить("Результат", Результат.ТабличныйДокумент);
		РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
		РезультатРасчета.Вставить("СтильУровней", Результат.СтильУровней);
		РезультатРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Результат.ДеревоСтрокСпискаРедактирования);
		Если Результат.Свойство("УчитыватьДополнительныйОтборПоИерархии")
			И Параметры.УчитыватьДополнительныйОтборПоИерархии Тогда
			РезультатРасчета.Вставить("УчитыватьДополнительныйОтборПоИерархии", Истина);
		КонецЕсли;
		Если Результат.Свойство("ТребуетсяПересчетИтоговЯчеек") Тогда
			РезультатРасчета.Вставить("ТребуетсяПересчетИтоговЯчеек", Истина);
		КонецЕсли;
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			РезультатРасчета.Вставить("Примечания", Результат.Примечания);
		Иначе
			РезультатРасчета.Вставить("СтрокаСортировкиДанныхЯчеек", Результат.СтрокаСортировкиДанныхЯчеек);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииГенерацииБюджета

#Область ПолучениеДанныхБюджетногоОтчета

Функция ДанныеДляБюджетногоОтчета(Параметры) Экспорт
	
	Результат = ПолучитьДанныеДляБюджетногоОтчета(Параметры, Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", Результат.ТабличныйДокумент);
	РезультатВыполнения.Вставить("ДанныеЯчеек", Результат.ДанныеЯчеек);
	РезультатВыполнения.Вставить("ДанныеРасшифровки", Результат.ДанныеРасшифровки);
	
	Если Параметры.Свойство("СравнитьНаРазличныеДатыАктуальности")
		И Параметры.СравнитьНаРазличныеДатыАктуальности
		И Параметры.Свойство("ДатаАктуальностиСравнение") Тогда
		Параметры.Вставить("ДатаАктуальности", Параметры.ДатаАктуальностиСравнение);
		
		РезультатСравнение = ПолучитьДанныеДляБюджетногоОтчета(Параметры, Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
		
		РезультатВыполнения.Вставить("РезультатСравнение", РезультатСравнение.ТабличныйДокумент);
		РезультатВыполнения.Вставить("ДанныеЯчеекСравнение", РезультатСравнение.ДанныеЯчеек);
		РезультатВыполнения.Вставить("ДанныеРасшифровкиСравнение", РезультатСравнение.ДанныеРасшифровки);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ПоместитьДанныеДляБюджетногоОтчетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатВыполнения = ДанныеДляБюджетногоОтчета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры


// Выполняет действия по построению бюджета (подготовка вспомогательных кэшируемых данных, получение данных из
// базы данных, меппинг данных на структуру отчета, вывод данных в табличный документ)
// и табличный документ с выведенным бюджетом.
// Ключевая операция: "Бюджетирование.ВыводПолучениеДанныхДляБюджетногоОтчета".
//
// Параметры:
// 	ПараметрыДанных - см. Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент
// 	РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - Режим формирования бюджета.
// 	СсылкаНаПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
//
// Возвращаемое значение:
// 	Структура - Структура с данными для построения бюджета:
// 	 *ДанныеЯчеек - см. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
//
Функция ПолучитьДанныеДляБюджетногоОтчета(ПараметрыДанных, РежимФормирования, СсылкаНаПараметрыВыводаВидаБюджета = Неопределено)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Бюджетирование.ВыводПолучениеДанныхДляБюджетногоОтчета");
	
	ВидБюджета = ПараметрыДанных.ВидБюджета;
	
	ПараметрыЭтаповРасчета = Новый Структура;
	Результат = Новый Структура;
	Результат.Вставить("ДанныеЯчеек", Неопределено);
	ПродолжитьРасчет = Истина;
	
	#Область КонтрольЗаполненияВидаБюджета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
		ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаКонтрольЗаполненияВидаБюджета(ПараметрыЭтаповРасчета, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеКонтрольПараметровВыводаВидаБюджета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
		ПараметрыЭтаповРасчета.Вставить("СсылкаНаПараметрыВыводаВидаБюджета", СсылкаНаПараметрыВыводаВидаБюджета);
		ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольПараметровВыводаВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеДанныхПоИсточникам
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("СКДДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("КэшДанных", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеДанныхПоИсточникам(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПолучениеКонтрольСтруктурыЯчеекСДанными
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольСтруктурыЯчеекСДанными(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПодготовкаПараметровВывода
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", Неопределено);
		ПараметрыЭтаповРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаПодготовкаПараметровВывода(ПараметрыЭтаповРасчета, ПродолжитьРасчет);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ВыводБюджетногоОтчета
	Если ПродолжитьРасчет Тогда
		ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", Неопределено);
		
		ВыводПолучениеДанныхДляБюджетногоОтчетаВыводБюджетногоОтчета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		ВысотаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ВысотаТаблицы;
		ШиринаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ШиринаТаблицы;
	КонецЕсли;
	#КонецОбласти 
	
	#Область ОформлениеБюджета
	Если ПродолжитьРасчет Тогда
		ВыводПолучениеДанныхДляБюджетногоОтчетаОформлениеБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет);
		
		ВысотаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ВысотаТаблицы;
		ШиринаТаблицы = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат.ШиринаТаблицы;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВысотаТаблицы * ШиринаТаблицы / 10); // Удельное время расчета 10 ячеек, для уменьшения погрешности
	КонецЕсли;
	#КонецОбласти 
	
	Возврат Результат;
	
КонецФункции

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаКонтрольЗаполненияВидаБюджета(ПараметрыЭтаповРасчета, ПродолжитьРасчет)
	
	Если Не ЗначениеЗаполнено(ПараметрыЭтаповРасчета.ВидБюджета) Тогда
		ПродолжитьРасчет = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольПараметровВыводаВидаБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	СсылкаНаПараметрыВыводаВидаБюджета = ПараметрыЭтаповРасчета.СсылкаНаПараметрыВыводаВидаБюджета;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
	Иначе
		Если СсылкаНаПараметрыВыводаВидаБюджета = Неопределено Тогда
			ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования);
		Иначе
			ПараметрыВыводаВидаБюджета = СсылкаНаПараметрыВыводаВидаБюджета;
		КонецЕсли;
	КонецЕсли;
	
	// Описание отчета - состав колонок таблицы данных.
	СтруктураКолонокТаблицыДанных    = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных;
	
	// СтруктураОписанияОтчета содержит:
	// Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета.
	// Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений.
	СтруктураОписанияОтчета          = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	Если Не СтруктураОписанияОтчета.ИсточникиДанных.Количество() Тогда
		
		РезультатРасчета = Новый Структура;
		РезультатРасчета.Вставить("ДанныеРасшифровки", Неопределено);
		РезультатРасчета.Вставить("КолонкиТаблиц", Неопределено);
		РезультатРасчета.Вставить("ДанныеРасшифровки", Неопределено);
		РезультатРасчета.Вставить("ДанныеЯчеек", Неопределено);
		РезультатРасчета.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
		РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", Неопределено);
		РезультатРасчета.Вставить("СтильУровней", Неопределено);
		РезультатРасчета.Вставить("ДеревоСтрокСпискаРедактирования", Неопределено);
		
		Результат = РезультатРасчета;
		ПродолжитьРасчет = Ложь;
		
	КонецЕсли;
	
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("СсылкаНаПараметрыВыводаВидаБюджета", СсылкаНаПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ПараметрыЭтаповРасчета - Структура - Описание:
// * СсылкаНаПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
// * ПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
// * РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// * СтруктураОписанияОтчета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета
// * ВидБюджета - СправочникСсылка.ВидыБюджетов -
// * ПараметрыДанных - Структура -
// 	Результат - Структура - Описание:
// * ДанныеЯчеек - ТаблицаЗначений, Неопределено -
// 	ПродолжитьРасчет - Булево - Описание
Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеДанныхПоИсточникам(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	ПараметрыВыводаВидаБюджета =
		ПараметрыЭтаповРасчета.ПараметрыВыводаВидаБюджета; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
	СтруктураОписанияОтчета =
		ПараметрыЭтаповРасчета.СтруктураОписанияОтчета; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета
	
	// СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц.
	СКДДанных = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	// Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета.
	ДеревоВывода = ПараметрыВыводаВидаБюджета.ДеревоВывода;
	КэшДанных = ПараметрыВыводаВидаБюджета.КэшДанных;
	
	// Получаем данные источников по СКД.
	ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета,
		СКДДанных,
		ПараметрыДанных,
		СтруктураОписанияОтчета.ИсточникиДанных,
		СтруктураОписанияОтчета.СтруктураЯчеек,
		КэшДанных);
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("СКДДанных", СКДДанных);
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", ДанныеИсточников);
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ПараметрыЭтаповРасчета - Структура - Описание:
// 	*СтруктураКолонокТаблицыДанных - см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
// 	*СтруктураОписанияОтчета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета
// 	*РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// 	*ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	*ПараметрыДанных - Структура -
// 	Результат - Структура - Описание:
// 	*ДанныеЯчеек - см. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
// 	ПродолжитьРасчет - Булево - Флаг продолжения расчета.
Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПолучениеКонтрольСтруктурыЯчеекСДанными(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	СтруктураКолонокТаблицыДанных = ПараметрыЭтаповРасчета.СтруктураКолонокТаблицыДанных;
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	СтруктураОписанияОтчета = ПараметрыЭтаповРасчета.СтруктураОписанияОтчета;
	ДанныеИсточников = ПараметрыЭтаповРасчета.ДанныеИсточников;
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	КэшДанных = ПараметрыЭтаповРасчета.КэшДанных;
	
	// Получаем данные ячеек по источникам.
	ДанныеЯчеек = ДанныеЯчеек(СтруктураКолонокТаблицыДанных,
		ПараметрыДанных,
		СтруктураОписанияОтчета,
		ДанныеИсточников,
		РежимФормирования,
		КэшДанных);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		Результат = Новый Структура("ДанныеЯчеек", ДанныеЯчеек);
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("ДанныеИсточников", ДанныеИсточников);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаПодготовкаПараметровВывода(ПараметрыЭтаповРасчета, ПродолжитьРасчет)
	
	ДеревоВывода = ПараметрыЭтаповРасчета.ДеревоВывода;
	ДанныеЯчеек = ПараметрыЭтаповРасчета.ДанныеЯчеек; // см. ДанныеЯчеек
	ВидБюджета = ПараметрыЭтаповРасчета.ВидБюджета;
	ПараметрыДанных = ПараметрыЭтаповРасчета.ПараметрыДанных;
	РежимФормирования = ПараметрыЭтаповРасчета.РежимФормирования;
	СтруктураКолонокТаблицыДанных = ПараметрыЭтаповРасчета.СтруктураКолонокТаблицыДанных;
	КэшДанных = ПараметрыЭтаповРасчета.КэшДанных;
	СтруктураОписанияОтчета = ПараметрыЭтаповРасчета.СтруктураОписанияОтчета;
	
	// Выводим дерево в отчет.
	ПараметрыВывода = Новый Структура();
	ДобавитьПараметрВывода(ПараметрыВывода, "ДеревоВывода", ДеревоВывода);
	ДобавитьПараметрВывода(ПараметрыВывода, "ДанныеЯчеек", ДанныеЯчеек);
	ДобавитьПараметрВывода(ПараметрыВывода, "ВидБюджета", ВидБюджета);
	ДобавитьПараметрВывода(ПараметрыВывода, "НачалоПериода", ПараметрыДанных.НачалоПериода);
	ДобавитьПараметрВывода(ПараметрыВывода, "КонецПериода", ПараметрыДанных.КонецПериода);
	ДобавитьПараметрВывода(ПараметрыВывода, "РежимФормирования", РежимФормирования);
	
	ДобавитьПараметрВывода(ПараметрыВывода, "ПредставленияИзмерений", ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, СтруктураКолонокТаблицыДанных));
	ДобавитьПараметрВывода(ПараметрыВывода, "ДанныеРасшифровки", Новый Соответствие);
	ДобавитьПараметрВывода(ПараметрыВывода, "КэшЗначенийАналитик", КэшДанных.КэшЗначенийАналитик);
	ДобавитьПараметрВывода(ПараметрыВывода, "ИндексыПоискаИзмерений", Новый Соответствие);
	ДобавитьПараметрВывода(ПараметрыВывода, "ПараметрыЯчеек", СтруктураОписанияОтчета.ПараметрыЯчеек);
	ДобавитьПараметрВывода(ПараметрыВывода, "СтруктураЯчеек", СтруктураОписанияОтчета.СтруктураЯчеек);
	ДобавитьПараметрВывода(ПараметрыВывода, "СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ДобавитьПараметрВывода(ПараметрыВывода, "ПараметрыПериодов", ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных));
	ДобавитьПараметрВывода(ПараметрыВывода, "ПодчиненныеЭлементыВидаБюджета", СтруктураОписанияОтчета.ТаблицаПодчиненностиЭлементов);
	ДобавитьПараметрВывода(ПараметрыВывода, "ЗначенияПодстановки", ПолучитьЗначенияПодстановкиПоПараметрамДанных(РежимФормирования, ПараметрыДанных));
	ДобавитьПараметрВывода(ПараметрыВывода, "ВыводитьПримечания", Ложь);
	ДобавитьПараметрВывода(ПараметрыВывода, "ВыводитьНомераТаблиц", Ложь);
	
	КэшПараметровЕдиницИзмерения = ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	ДобавитьПараметрВывода(ПараметрыВывода, "КэшПараметровЕдиницИзмерения", КэшПараметровЕдиницИзмерения);
	
	КэшПараметровВалют = ПолучитьКэшПараметровВалют(ДанныеЯчеек,
			СтруктураОписанияОтчета.ПараметрыЯчеек,
			ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета);
	ДобавитьПараметрВывода(ПараметрыВывода, "КэшПараметровВалют", КэшПараметровВалют);
	
	Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
		
		ДеревоСтрокСпискаРедактирования = Новый ДеревоЗначений;
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Строка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Представление");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Картинка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Уровень");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДТаблицы");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИДГруппировки");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ИмяИзмерения");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ЭтоАналитикаПрочее");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("РедактируемыеЗначения");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("Расшифровка");
		ДеревоСтрокСпискаРедактирования.Колонки.Добавить("ЭтоОбъединеннаяАналитика");
		
		ДобавитьПараметрВывода(ПараметрыВывода, "ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
		ДобавитьПараметрВывода(ПараметрыВывода, "СтильУровней", Новый Соответствие);
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			
			ПараметрыВыводаПримечаний = ПолучитьПараметрыВыводаПримечаний(СтруктураКолонокТаблицыДанных, ДанныеЯчеек, ДеревоВывода);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыВывода, ПараметрыВыводаПримечаний, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	ПараметрыЭтаповРасчета.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	ПараметрыЭтаповРасчета.Вставить("ВидБюджета", ВидБюджета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ПараметрыЭтаповРасчета.Вставить("РежимФормирования", РежимФормирования);
	ПараметрыЭтаповРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонокТаблицыДанных);
	ПараметрыЭтаповРасчета.Вставить("КэшДанных", КэшДанных);
	ПараметрыЭтаповРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ДеревоСтрокСпискаРедактирования", ДеревоСтрокСпискаРедактирования);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаВыводБюджетногоОтчета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ПараметрыВывода = ПараметрыЭтаповРасчета.ПараметрыВывода; // см. ДобавитьПараметрВывода.ПараметрыВывода
	ПараметрыВыводаВидаБюджета = ПараметрыЭтаповРасчета.ПараметрыВыводаВидаБюджета;
	
	ПараметрыВывода.Вставить("КэшРеквизитовЭлементовБюджета", ПараметрыЭтаповРасчета.КэшДанных.КэшРеквизитовЭлементовБюджета);
	ПараметрыВывода.Вставить("КэшПредставленийПустыхАналитик", Новый Соответствие);
	
	// Добавление строк в таблицу без индексов для целей оптимизации.
	ДанныеЯчеекДобавленныеСтроки = ПараметрыВывода.ДанныеЯчеек.СкопироватьКолонки(); // ТаблицаЗначений - таблица данных ячеек.
	ПараметрыВывода.Вставить("ДанныеЯчеекДобавленныеСтроки", ДанныеЯчеекДобавленныеСтроки);
	ПараметрыВывода.Вставить("КолонкиТаблицыПоЭлементамОтчета", Новый Соответствие); // Кэш деревьев колонок ячеек по элементам отчета "Таблица".
	
	ПараметрыВывода.Вставить("ВыводитьИерархиюЭлементов", ПараметрыЭтаповРасчета.ПараметрыДанных.ВыводитьИерархиюЭлементов);
	ПараметрыВывода.Вставить("УчитыватьДополнительныйОтборПоИерархии", ПараметрыЭтаповРасчета.ПараметрыДанных.УчитыватьДополнительныйОтборПоИерархии);
	Если ПараметрыЭтаповРасчета.ПараметрыДанных.Свойство("ВалютаОтчета") Тогда
		ПараметрыВывода.Вставить("ВалютаОтчета", ПараметрыЭтаповРасчета.ПараметрыДанных.ВалютаОтчета);
	КонецЕсли;
	ОбходДанныхОтчета(ПараметрыВывода);
	
	Если ДанныеЯчеекДобавленныеСтроки.Количество() Тогда
		КолонкиИндексовТаблицыЯчеек = Новый Массив;
		Для каждого ИндексТаблицы Из ПараметрыВывода.ДанныеЯчеек.Индексы Цикл
			КолонкиИндекса = "";
			Для каждого ИмяКолонкиИндекса Из ИндексТаблицы Цикл
				КолонкиИндекса = КолонкиИндекса + ?(КолонкиИндекса = "", "", ", ") + ИмяКолонкиИндекса;
			КонецЦикла;
			КолонкиИндексовТаблицыЯчеек.Добавить(КолонкиИндекса);
		КонецЦикла;
		ПараметрыВывода.ДанныеЯчеек.Индексы.Очистить();
		
		// У добавленных строк значения в колонках не заполнены.
		НеКопируемыеКолонки = Новый Массив;
		НеКопируемыеКолонки.Добавить("ОтборЯчейки");
		НеКопируемыеКолонки.Добавить("РассчитанСумма");
		НеКопируемыеКолонки.Добавить("РассчитанСуммаВал");
		НеКопируемыеКолонки.Добавить("РассчитанКоличество");
		НеКопируемыеКолонки.Добавить("РассчитанЗначение");
		НеКопируемыеКолонки.Добавить("СуммаВалОборот");
		НеКопируемыеКолонки.Добавить("СуммаОборот");
		НеКопируемыеКолонки.Добавить("Сумма");
		НеКопируемыеКолонки.Добавить("СуммаВал");
		НеКопируемыеКолонки.Добавить("Количество");
		НеКопируемыеКолонки.Добавить("Значение");
		НеКопируемыеКолонки.Добавить("ИмяОбластиСумма");
		НеКопируемыеКолонки.Добавить("ИмяОбластиКоличество");
		НеКопируемыеКолонки.Добавить("ИмяОбластиЗначение");
		НеКопируемыеКолонки.Добавить("ИмяОбластиСуммаИерархия");
		НеКопируемыеКолонки.Добавить("ИмяОбластиКоличествоИерархия");
		НеКопируемыеКолонки.Добавить("ИмяОбластиЗначениеИерархия");
		
		ЗначенияПоУмолчанию = Новый Структура;
		ЗначенияПоУмолчанию.Вставить("РассчитанСумма", Ложь);
		ЗначенияПоУмолчанию.Вставить("РассчитанСуммаВал", Ложь);
		ЗначенияПоУмолчанию.Вставить("РассчитанКоличество", Ложь);
		ЗначенияПоУмолчанию.Вставить("РассчитанЗначение", Ложь);
		
		СписокКолонокСвертки = "";
		Для каждого Колонка Из ДанныеЯчеекДобавленныеСтроки.Колонки Цикл
			Если НеКопируемыеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокКолонокСвертки = СписокКолонокСвертки + ?(СписокКолонокСвертки = "", "", ", ") + Колонка.Имя;
		КонецЦикла;
		
		ДанныеЯчеекДобавленныеСтрокиСвертка = ДанныеЯчеекДобавленныеСтроки.Скопировать(, СписокКолонокСвертки);
		
		ДанныеЯчеекДобавленныеСтрокиСвертка.Свернуть(СписокКолонокСвертки);
		ДанныеЯчеекДобавленныеСтроки.Индексы.Добавить(СписокКолонокСвертки);
		
		Для каждого СтрокаНаДобавление Из ДанныеЯчеекДобавленныеСтрокиСвертка Цикл
			НоваяСтрока = ПараметрыВывода.ДанныеЯчеек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаДобавление);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПоУмолчанию);
			ПоискСтроки = Новый Структура(СписокКолонокСвертки);
			ЗаполнитьЗначенияСвойств(ПоискСтроки, НоваяСтрока);
			// В колонке "ОтборЯчейки" имена колонок могут быть перечислены в разном порядке, поэтому дозаполняем отдельно.
			ИсходныеСтроки = ДанныеЯчеекДобавленныеСтроки.НайтиСтроки(ПоискСтроки);
			Если ИсходныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.ОтборЯчейки = ИсходныеСтроки[0].ОтборЯчейки;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеЯчеекДобавленныеСтрокиСвертка = Неопределено;
		
		Для каждого ИменаКолонок Из КолонкиИндексовТаблицыЯчеек Цикл
			ПараметрыВывода.ДанныеЯчеек.Индексы.Добавить(ИменаКолонок);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеЯчеекДобавленныеСтроки = Неопределено;
	ПараметрыВывода.Удалить("ДанныеЯчеекДобавленныеСтроки");
	
	Если ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
		СортировкаДанныхЯчеек = СтрРазделить("Строка,Колонка,ОсновнойЭлемент", ",");
		Для Каждого ИндексПоиска Из ПараметрыВывода.ИндексыПоискаИзмерений Цикл
			Если Не ИндексПоиска.Значение Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейПоиска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИндексПоиска.Ключ, ",");
			Для Каждого ПолеПоиска Из МассивПолейПоиска Цикл
				Если СортировкаДанныхЯчеек.Найти(ПолеПоиска) = Неопределено Тогда
					СортировкаДанныхЯчеек.Добавить(ПолеПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		СтрокаСортировкиДанныхЯчеек = СтрСоединить(СортировкаДанныхЯчеек, ",");
		ПараметрыВывода.ДанныеЯчеек.Сортировать(СтрокаСортировкиДанныхЯчеек);
	КонецЕсли;
	
	// Вывод бюджетного отчета.
	ТабличныйДокументРезультат = ВывестиДанныеВОтчет(ПараметрыВывода);
	
	ПараметрыВывода.Удалить("КолонкиТаблицыПоЭлементамОтчета");
	
	ПараметрыВыводаВидаБюджета.Вставить("ИндексыТаблицыДанныхЯчеек", ПараметрыВывода.ИндексыПоискаИзмерений);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеЯчеек", ПараметрыЭтаповРасчета.ДанныеЯчеек);
	Результат.Вставить("ТабличныйДокумент", ТабличныйДокументРезультат);
	Результат.Вставить("ДанныеРасшифровки", ПараметрыВывода.ДанныеРасшифровки);
	
	Если (ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
		
		Результат.Вставить("ДеревоСтрокСпискаРедактирования", ПараметрыЭтаповРасчета.ДеревоСтрокСпискаРедактирования);
		Результат.Вставить("СтильУровней", ПараметрыВывода.СтильУровней);
		Результат.Вставить("КолонкиТаблиц", ПараметрыВывода.КолонкиТаблиц);
		Если ПараметрыВывода.Свойство("УчитыватьДополнительныйОтборПоИерархии") Тогда
			Результат.Вставить("УчитыватьДополнительныйОтборПоИерархии", Истина);
		КонецЕсли;
		Если ПараметрыВывода.Свойство("ТребуетсяПересчетИтоговЯчеек") Тогда
			Результат.Вставить("ТребуетсяПересчетИтоговЯчеек", Истина);
		КонецЕсли;
		
		Если ПараметрыЭтаповРасчета.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			
			Результат.Вставить("Примечания", ПараметрыВывода.Примечания);
			
		Иначе
			
			Результат.Вставить("СтрокаСортировкиДанныхЯчеек", СтрокаСортировкиДанныхЯчеек);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", ТабличныйДокументРезультат);
	
КонецПроцедуры

Процедура ВыводПолучениеДанныхДляБюджетногоОтчетаОформлениеБюджета(ПараметрыЭтаповРасчета, Результат, ПродолжитьРасчет)
	
	ТабличныйДокументРезультат = ПараметрыЭтаповРасчета.ТабличныйДокументРезультат;
	ПараметрыВывода = ПараметрыЭтаповРасчета.ПараметрыВывода;
	ДеревоВывода = ПараметрыЭтаповРасчета.ДеревоВывода;
	
	ОформитьБюджет(ТабличныйДокументРезультат, ПараметрыВывода, ДеревоВывода);
	
	ПродолжитьРасчет = Истина;
	
	ПараметрыЭтаповРасчета.Вставить("ТабличныйДокументРезультат", ТабличныйДокументРезультат);
	ПараметрыЭтаповРасчета.Вставить("ПараметрыВывода", ПараметрыВывода);
	ПараметрыЭтаповРасчета.Вставить("ДеревоВывода", ДеревоВывода);
	
КонецПроцедуры

#КонецОбласти 

Процедура ПоместитьДанныеЭкземпляраБюджетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатРасчета = ДанныеЭкземпляраБюджета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры

// Производит расчета изменений в ячейках табличного документа экземпляра бюджета
// Ключевая операция: "Бюджетирование.ВыводПолучениеИзмененийЭкземпляраБюджета".
// 
// Параметры:
//  Параметры - см. Документы.ЭкземплярБюджета.ПараметрыВыводаВидаБюджетаВТабличныйДокумент
// Возвращаемое значение:
// 	Структура - Описание:
// 	*ДанныеЯчеек - См. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
// 	*Результат - ТаблицаЗначений -
// 	*СтруктураПараметровВывода - Структура -
//
Функция ИзмененияЭкземпляраБюджета(Параметры) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Бюджетирование.ВыводПолучениеИзмененийЭкземпляраБюджета");
	
	СтруктураПараметровВывода = Параметры.ПараметрыВыводаВидаБюджета;
	
	РассчитанныеИзменения = ПолучитьИзмененияВЯчейкахРекурсивно(Параметры.ВидБюджета,
		Параметры.НачалоПериода,
		Параметры.КонецПериода,
		СтруктураПараметровВывода,
		Параметры,
		Параметры.ДанныеЯчеек);
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Результат", РассчитанныеИзменения.Результат);
	РезультатРасчета.Вставить("ПараметрыВыводаВидаБюджета", СтруктураПараметровВывода);
	РезультатРасчета.Вставить("ДанныеЯчеек", РассчитанныеИзменения.ДанныеЯчеек);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
	Возврат РезультатРасчета;
	
КонецФункции

Процедура ПоместитьИзмененияЭкземпляраБюджетаВХранилище(Параметры, АдресХранилища) Экспорт
	
	РезультатРасчета = ИзмененияЭкземпляраБюджета(Параметры);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	НачалоПериода - Дата -
// 	КонецПериода  - Дата -
// 	ПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
// 	ПараметрыДанных - Структура - Описание:
// 	*Организация - СправочникСсылка.Организации -
// 	*Подразделение - СправочникСсылка.СтруктураПредприятия -
// 	*Валюта - СправочникСсылка.Валюты -
// 	*Сценарий - СправочникСсылка.Сценарии -
// 	*Документ - ДокументСсылка.ЭкземплярБюджета -
// 	*АналитикаСтатейБюджетов - ТаблицаЗначений -
// 	*ОборотыПоСтатьямБюджетов - ТаблицаЗначений -
// 	*АналитикаЗначений - ТаблицаЗначений -
// 	*ДатаАктуальности - Дата -
// 	*ВалютаСценария - СправочникСсылка.Валюты -
// 	*Статус - СписокЗначений из ПеречислениеСсылка.СтатусыПланов -
// 	*ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	*ПараметрыВыводаВидаБюджета - Структура - 
// 	*ДанныеЯчеек - ТаблицаЗначений -
// 	*Ключ_ГУИД - Произвольный -
// 	*ДополнительныеФильтрыПоАналитикам - Структура -
// 	*ИспользоватьДляВводаПлана - Булево -
// 	*Расшифровка - Неопределено, Соответствие -
// 	*КэшПараметровСтатей - Неопределено, Соответствие -
// 	*РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// 	ПредыдущиеДанныеЯчеек - ТаблицаЗначений - Таблица предыдущих данных ячеек:
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
//
// Возвращаемое значение:
// 	Структура - Описание:
// 	*Результат - Соответствие - содержит:
// 		**Ключ - Строка - Имя области со значением
// 		**Значение - Произвольный - значение в данной области
// 	*ДанныеЯчеек - ТаблицаЗначений -
// 	*ИзмененияСвязанныхЯчеек - Массив из СтрокаТаблицыЗначений - массив из строк с колонками:
// 		**Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 		**Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
//
Функция ПолучитьИзмененияВЯчейках(ВидБюджета,
						НачалоПериода,
						КонецПериода,
						ПараметрыВыводаВидаБюджета,
						ПараметрыДанных,
						ПредыдущиеДанныеЯчеек)
	
	ИндексыТаблицыДанныхЯчеек = ПараметрыВыводаВидаБюджета.ИндексыТаблицыДанныхЯчеек;
	
	// Описание отчета - состав колонок таблицы данных
	СтруктураКолонокТаблицыДанных =
		ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных; // см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
	
	// СтруктураОписанияОтчета содержит:
	// Структура исходных ячеек - таблица с описанием структуры отчета. по сути развернутая в список матрица отчета
	// Источники данных - сегменты выбранных статей и показателей, разбитые по признаку отборов и смещений.
	СтруктураОписанияОтчета = ПараметрыВыводаВидаБюджета.СтруктураОписанияОтчета;
	
	// СКД по источникам - сгенерированная СКД для получения данных по плану и из фактических таблиц.
	СКДДанных = ПараметрыВыводаВидаБюджета.СКДДанных;
	
	// Дерево вывода - дерево для вывода отчета, построенное на основании структуры отчета.
	КэшДанных = ПараметрыВыводаВидаБюджета.КэшДанных;
	
	// Получаем данные ячеек по источникам
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	
	ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных);
	
	СтрокиОснования = Неопределено;
	СтрокиКПересчету = Новый Соответствие;
	РасчетЗаполнениеИтог = НРег("Итог");
	
	Если Не СтруктураОписанияОтчета.НеТребуетРасчетаДанныхЯчеек Тогда
		
		// Получаем данные источников по СКД
		ДанныеИсточников = ПолучитьДанныеПоИсточникам(ВидБюджета,
			СКДДанных,
			ПараметрыДанных,
			СтруктураОписанияОтчета.ИсточникиДанных,
			СтруктураОписанияОтчета.СтруктураЯчеек,
			КэшДанных);
		
		// Таблица с развернутыми ячейками по данным, проходит итеративные циклы расчета формул.
		ДанныеЯчеек = ДанныеЯчеек(СтруктураКолонокТаблицыДанных,
			ПараметрыДанных,
			СтруктураОписанияОтчета,
			ДанныеИсточников,
			РежимФормирования,
			КэшДанных);
		
		Если ПараметрыДанных.Свойство("СтрокиОснования", СтрокиОснования) И ПараметрыДанных.Свойство("ТолькоРасчетные") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			ПредыдущиеДанныеЯчеек.Индексы.Добавить("РасчетЗаполнение");
			ПредыдущиеДанныеЯчеек.Индексы.Добавить("Строка");
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			
			СтруктураПоиска = Новый Структура("РасчетЗаполнение", РасчетЗаполнениеИтог);
			ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, СтрокиКПересчету);
			
			Для Каждого СтрокаОтчета Из СтрокиОснования Цикл
				СтруктураПоиска = Новый Структура("Строка", СтрокаОтчета);
				ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, СтрокиКПересчету);
			КонецЦикла;
		ИначеЕсли ПараметрыДанных.Свойство("СтрокиОснования") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			ПредыдущиеДанныеЯчеек.Индексы.Добавить("Строка");
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			Для Каждого СтрокаОтчета Из СтрокиОснования Цикл
				СтруктураПоиска = Новый Структура("Строка", СтрокаОтчета);
				ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, СтрокиКПересчету);
			КонецЦикла;
		ИначеЕсли ПараметрыДанных.Свойство("ТолькоРасчетные") Тогда
			ПредыдущиеДанныеЯчеек.Индексы.Очистить();
			ПредыдущиеДанныеЯчеек.Индексы.Добавить("РасчетЗаполнение");
			НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
			СтруктураПоиска = Новый Структура("РасчетЗаполнение", РасчетЗаполнениеИтог);
			ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, СтрокиКПересчету);
		Иначе
			НовыеДанныеЯчеек = ДанныеЯчеек;
		КонецЕсли;
		
		Если ПараметрыДанных.Свойство("ТолькоРасчетные")
			ИЛИ ПараметрыДанных.Свойство("СтрокиОснования") Тогда
			СтрокиКРасчету = Новый Массив;
			Для Каждого СтрокаДанных Из ДанныеЯчеек Цикл
				НоваяСтрока = НовыеДанныеЯчеек.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				
				Если НоваяСтрока.ОсновнойЭлемент Тогда
					СтрокиКРасчету.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СтрокиКРасчету = НовыеДанныеЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
		КонецЕсли;
		
	Иначе
		
		СтруктураОписанияОтчета.ПараметрыЯчеек.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		ПредыдущиеДанныеЯчеек.Индексы.Очистить();
		ПредыдущиеДанныеЯчеек.Индексы.Добавить("ИндексСтроки");
		ПредыдущиеДанныеЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
		ДобавленныйИндекс = Неопределено;
		Если НЕ ИндексСуществует(СтруктураОписанияОтчета.ПараметрыЯчеек,
			"ОперандСтрока, ОперандКолонка") Тогда
			ДобавленныйИндекс = СтруктураОписанияОтчета.ПараметрыЯчеек.Индексы.Добавить("ОперандСтрока, ОперандКолонка");
		КонецЕсли;
		НовыеДанныеЯчеек = ПредыдущиеДанныеЯчеек.Скопировать();
		Расшифровка = Неопределено; // см. НовыйСтруктураРасшифровки
		СтрокиКРасчету = Новый Массив;
		
		Если ПараметрыДанных.Свойство("Расшифровка", Расшифровка) Тогда
			СброситьФлагРасчетаУСвязанныхЯчеек(ПредыдущиеДанныеЯчеек,
				НовыеДанныеЯчеек,
				СтруктураОписанияОтчета.ПараметрыЯчеек,
				Расшифровка.Строка,
				Расшифровка.Колонка,
				СтрокиКПересчету);
		Иначе
			Для Каждого СтрокаДанныхЯчеек Из ПредыдущиеДанныеЯчеек Цикл
				Если Не СтрокаДанныхЯчеек.ОсновнойЭлемент Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыЯчейки = СтруктураОписанияОтчета.ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
				Если ПараметрыЯчейки.РасчетЗаполнение <> "итог"
					И Не СтрокаДанныхЯчеек.ВыводИерархии Тогда
					Продолжить;
				КонецЕсли;
				ИндексСтроки = ПредыдущиеДанныеЯчеек.Индекс(СтрокаДанныхЯчеек);
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанСумма = Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанКоличество = Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанЗначение = Ложь;
				СтрокиКПересчету.Вставить(СтрокаДанныхЯчеек);
				СброситьФлагРасчетаУСвязанныхЯчеек(ПредыдущиеДанныеЯчеек,
					НовыеДанныеЯчеек,
					СтруктураОписанияОтчета.ПараметрыЯчеек,
					СтрокаДанныхЯчеек.Строка,
					СтрокаДанныхЯчеек.Колонка,
					СтрокиКПересчету);
			КонецЦикла;
		КонецЕсли;
		Если НЕ ДобавленныйИндекс = Неопределено Тогда
			СтруктураОписанияОтчета.ПараметрыЯчеек.Индексы.Удалить(ДобавленныйИндекс);
		КонецЕсли;
		СтруктураОписанияОтчета.ПараметрыЯчеек.Колонки.Удалить("Обработано");
		
	КонецЕсли;
	
	КэшРеквизитовЭлементовБюджета = Неопределено;
	Если НЕ ПараметрыДанных.ПараметрыВыводаВидаБюджета.КэшДанных.Свойство("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета) Тогда
		КэшРеквизитовЭлементовБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.КэшРеквизитовЭлементовБюджета(ВидБюджета);
		ПараметрыДанных.ПараметрыВыводаВидаБюджета.КэшДанных.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
	КонецЕсли;
	
	ПараметрыРасчетаИзменений = Новый Структура;
	ПараметрыРасчетаИзменений.Вставить("ПараметрыЯчеек", СтруктураОписанияОтчета.ПараметрыЯчеек);
	ПараметрыРасчетаИзменений.Вставить("ПараметрыПериодов", ПараметрыПериодов);
	ПараметрыРасчетаИзменений.Вставить("КэшРеквизитовЭлементовБюджета", ПараметрыДанных.ПараметрыВыводаВидаБюджета.КэшДанных.КэшРеквизитовЭлементовБюджета);
	ПараметрыРасчетаИзменений.Вставить("ИндексыТаблицыДанныхЯчеек", ИндексыТаблицыДанныхЯчеек);
	ПараметрыРасчетаИзменений.Вставить("НовыеДанныеЯчеек", НовыеДанныеЯчеек);
	ПараметрыРасчетаИзменений.Вставить("ПредыдущиеДанныеЯчеек", ПредыдущиеДанныеЯчеек);
	ПараметрыРасчетаИзменений.Вставить("СтрокиКРасчету", СтрокиКРасчету);
	ПараметрыРасчетаИзменений.Вставить("ИсходныеСтрокиКПересчету", СтрокиКПересчету);
	
	РезультатИзменений = РассчитатьИзмененияВОтчете(ПараметрыРасчетаИзменений);
	
	Если Не СтруктураОписанияОтчета.НеТребуетРасчетаДанныхЯчеек
		И ПараметрыДанных.Свойство("СтрокаСортировкиДанныхЯчеек") Тогда
		НовыеДанныеЯчеек.Сортировать(ПараметрыДанных.СтрокаСортировкиДанныхЯчеек);
	КонецЕсли;
	
	ТаблицаИзменений = РезультатИзменений.ТаблицаИзменений;
	ИзмененияСвязанныхЯчеек = РезультатИзменений.ИзмененияСвязанныхЯчеек;
	
	Результат = Новый Структура("Результат, ДанныеЯчеек, ИзмененияСвязанныхЯчеек", ТаблицаИзменений, НовыеДанныеЯчеек, ИзмененияСвязанныхЯчеек);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияВЯчейкахРекурсивно(ВидБюджета, НачалоПериода, КонецПериода,
						ПараметрыВыводаВидаБюджета, ПараметрыДанных, ПредыдущиеДанныеЯчеек)
	
	Результат = ПолучитьИзмененияВЯчейках(ВидБюджета,
			НачалоПериода,
			КонецПериода,
			ПараметрыВыводаВидаБюджета,
			ПараметрыДанных,
			ПредыдущиеДанныеЯчеек);
	
	ПараметрыДанных.Вставить("Объект", ПараметрыДанных);
	ТаблицаИзмененийИтог = Результат.Результат;
	ДанныеЯчеек = Результат.ДанныеЯчеек;
	ИзмененияСвязанныхЯчеек = Результат.ИзмененияСвязанныхЯчеек;
	ТаблицаИзменений = ТаблицаИзмененийИтог; 
	
	ИменаПоказателиОбластей = Новый Соответствие;
	ИменаПоказателиОбластей.Вставить("ИмяОбластиСумма", "Сумма");
	ИменаПоказателиОбластей.Вставить("ИмяОбластиКоличество", "Количество");
	ИменаПоказателиОбластей.Вставить("ИмяОбластиЗначение", "Значение");
	
	КоличествоПересчетовЯчеек = Новый Соответствие;
	
	МаксимумПересчетовЯчейки = 0;
	Сч = 0;
	
	Пока ИзмененияСвязанныхЯчеек.Количество() > 0 Цикл
		
		Сч = Сч + 1;
		Если МаксимумПересчетовЯчейки > 10 ИЛИ Сч > 10000 Тогда // Защита от зацикливания.
			ТекстОшибки = НСтр("ru = 'Превышено допустимое количество запусков процедуры расчета изменений в ячейках.
				|Выполнение прервано для предотвращения зацикливания, данные заполненные по связанным ячейкам могут быть некорректными.';
				|en = 'The maximum number of available starts of change calculation in bins has been exceeded.
				|Execution is aborted to prevent looping, data filled in by linked bins might be incorrect.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Отразить измененные ячейки в параметрах данных
		Для Каждого СтрокаОтражения Из ИзмененияСвязанныхЯчеек Цикл
			Для Каждого ИмяПоказательОбласти Из ИменаПоказателиОбластей Цикл
				Область = СтрокаОтражения[ИмяПоказательОбласти.Ключ];
				Если ЗначениеЗаполнено(Область) Тогда
					ЗначениеИзменений = ТаблицаИзменений.Получить(Область);
					КоличествоПересчетовЯчейки = КоличествоПересчетовЯчеек.Получить(Область);
					КоличествоПересчетовЯчейки = ?(КоличествоПересчетовЯчейки = Неопределено, 0, КоличествоПересчетовЯчейки) + 1;
					КоличествоПересчетовЯчеек.Вставить(Область, КоличествоПересчетовЯчейки);
					МаксимумПересчетовЯчейки = Макс(МаксимумПересчетовЯчейки, КоличествоПересчетовЯчейки);
					Если Не ЗначениеИзменений = Неопределено Тогда
						Расшифровка = Новый Структура;
						Расшифровка.Вставить("Значение", ЗначениеИзменений);
						Расшифровка.Вставить("ИмяПоказателя", ИмяПоказательОбласти.Значение);
						Расшифровка.Вставить("Строка", СтрокаОтражения.Строка);
						Расшифровка.Вставить("Колонка", СтрокаОтражения.Колонка); 
						Если ЗначениеЗаполнено(СтрокаОтражения.СтатьяБюджетов) Тогда
							Расшифровка.Вставить("СтатьяБюджетов", СтрокаОтражения.СтатьяБюджетов);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтражения.РедактируемоеЗначение) Тогда
							Расшифровка.Вставить("РедактируемоеЗначение",СтрокаОтражения.РедактируемоеЗначение);
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаОтражения.Валюта) Тогда
							Расшифровка.Вставить("Валюта", СтрокаОтражения.Валюта);
						КонецЕсли;
						Для Каждого Периодичность Из Перечисления.Периодичность Цикл
							ПериодСтрокой = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
							Если Не ДанныеЯчеек.Колонки.Найти(ПериодСтрокой) = Неопределено И ЗначениеЗаполнено(СтрокаОтражения[ПериодСтрокой]) Тогда
								Расшифровка.Вставить(ПериодСтрокой, СтрокаОтражения[ПериодСтрокой]);	
							КонецЕсли;
						КонецЦикла;
						СоответствиеЗначенийАналитик = Новый Соответствие;
						Для Каждого ВидАналитики Из ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
							КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
							Значение = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
							Если Не ДанныеЯчеек.Колонки.Найти(КлючИмени) = Неопределено И ЗначениеЗаполнено(СтрокаОтражения[КлючИмени]) Тогда
								Значение = СтрокаОтражения[КлючИмени];
							КонецЕсли;
							ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(КлючИмени, ВидАналитики);
							Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипЗначения);
							СоответствиеЗначенийАналитик.Вставить(ВидАналитики, Значение);
						КонецЦикла;
						Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик); 
						
						БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ПараметрыДанных, Расшифровка, ЗначениеИзменений);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		Результат = ПолучитьИзмененияВЯчейках(ВидБюджета,
				НачалоПериода,
				КонецПериода,
				ПараметрыВыводаВидаБюджета,
				ПараметрыДанных,
				ДанныеЯчеек);
		
		ТаблицаИзменений = Результат.Результат;
		Для Каждого КлючИЗначение Из ТаблицаИзменений Цикл
			ТаблицаИзмененийИтог.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		ДанныеЯчеек = Результат.ДанныеЯчеек;
		ИзмененияСвязанныхЯчеек = Результат.ИзмененияСвязанныхЯчеек;
	
	КонецЦикла;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	
	Для Каждого КлючЗначение Из ТаблицаИзмененийИтог Цикл
		НоваяСтрока = ТаблицаИзменений.Добавить();
		НоваяСтрока.ИмяОбласти = КлючЗначение.Ключ;
		НоваяСтрока.Значение = КлючЗначение.Значение;
	КонецЦикла;
	
	Результат = Новый Структура("Результат, ДанныеЯчеек", ТаблицаИзменений, ДанныеЯчеек);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоИсточникам

Процедура ПолучитьНастраиваемыеЭлементыОтбора(Отбор, Список, Имя) Экспорт
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПолучитьНастраиваемыеЭлементыОтбора(ЭлементОтбора, Список, Имя);
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(НРег(ЭлементОтбора.ПравоеЗначение), НРег("<заполнить"))
			И СтрНайти(НРег(ЭлементОтбора.ЛевоеЗначение), Имя) Тогда
			
			Список.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьНеНастраиваемыеЭлементыОтбора(Отбор, Список, Имя) Экспорт
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ПолучитьНеНастраиваемыеЭлементыОтбора(ЭлементОтбора, Список, Имя);
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНайти(ЭлементОтбора.ПравоеЗначение, "<заполнить") = 0
			И СтрНайти(НРег(ЭлементОтбора.ЛевоеЗначение), Имя) Тогда
			
			Список.Добавить(ЭлементОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет настройки СКД.
// 
// Параметры:
// 	Настройки - НастройкиКомпоновкиДанных -
// 	ПараметрыДанных - см. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта
Процедура ДополнитьНастройкиСКДПередВыводом(Настройки, ПараметрыДанных) Экспорт
	Значение = Неопределено;
	
	Структура = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
	Структура.Вставить("Организация");
	Структура.Вставить("Сценарий");
	Структура.Вставить("Подразделение");
	Структура.Вставить("ВалютаХранения");
	
	Для Каждого КлючИЗначение Из Структура Цикл
		
		Используется = ПараметрыДанных.Свойство(КлючИЗначение.Ключ, Значение);
		Если Используется Тогда
			Если КлючИЗначение.Ключ = "Подразделение" Тогда
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Отборы = Новый Массив;
		ПолучитьНастраиваемыеЭлементыОтбора(Настройки.Отбор, Отборы, НРег(КлючИЗначение.Ключ));
		Если КлючИЗначение.Ключ = "Организация"
			ИЛИ КлючИЗначение.Ключ = "Сценарий"
			ИЛИ КлючИЗначение.Ключ = "Подразделение"
			ИЛИ КлючИЗначение.Ключ = "ВалютаХранения" Тогда
			НеНастраиваемыеОтборы = Новый Массив;
		Иначе
			НеНастраиваемыеОтборы = Новый Массив;
			ПолучитьНеНастраиваемыеЭлементыОтбора(Настройки.Отбор, НеНастраиваемыеОтборы, НРег(КлючИЗначение.Ключ));
		КонецЕсли;
		Для Каждого ЭлементОтбора Из Отборы Цикл
			ЭлементОтбора.Использование = Используется;
			Если Используется Тогда
				ПохожийЭлемент = ПохожийЭлементОтбора(НеНастраиваемыеОтборы,
					ЭлементОтбора.ЛевоеЗначение,
					ЭлементОтбора.Родитель,
					ВидСравненияОтбора,
					Значение);
				
				Если ПохожийЭлемент = Неопределено Тогда
					ЭлементОтбора.ПравоеЗначение = Значение;
					ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				Иначе
					Если ЭлементОтбора.Родитель = Неопределено Тогда
						РодительскиеЭлементыОтборы = Настройки.Отбор.Элементы;
					Иначе
						ЭлементОтбораРодитель = ЭлементОтбора.Родитель; // ГруппаЭлементовОтбораКомпоновкиДанных -
						РодительскиеЭлементыОтборы = ЭлементОтбораРодитель.Элементы;
					КонецЕсли;
					РодительскиеЭлементыОтборы.Удалить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючИЗначение.Ключ = "Организация"
			ИЛИ КлючИЗначение.Ключ = "Сценарий"
			ИЛИ КлючИЗначение.Ключ = "Подразделение"
			ИЛИ КлючИЗначение.Ключ = "ВалютаХранения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Используется Тогда
			НеНастраиваемыеОтборы = Новый Массив;
			ПолучитьНеНастраиваемыеЭлементыОтбора(Настройки.Отбор, НеНастраиваемыеОтборы, НРег(КлючИЗначение.Ключ));
			Для Каждого ЭлементОтбора Из НеНастраиваемыеОтборы Цикл
				ПохожийЭлемент = ПохожийЭлементОтбора(НеНастраиваемыеОтборы,
					ЭлементОтбора.ЛевоеЗначение,
					ЭлементОтбора.Родитель,
					ВидСравненияОтбора,
					Значение);
					
				Если ПохожийЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.Родитель = Неопределено Тогда
					НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Иначе
					ЭлементОтбораРодитель = ЭлементОтбора.Родитель; // ГруппаЭлементовОтбораКомпоновкиДанных -
					НовыйЭлементОтбора = ЭлементОтбораРодитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				КонецЕсли;
				НовыйЭлементОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
				НовыйЭлементОтбора.Использование = Истина;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				НовыйЭлементОтбора.ПравоеЗначение = Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Дополняет настройки СКД.
// 
// Параметры:
// 	Настройки - НастройкиКомпоновкиДанных -
// 	ПараметрыДанных - см. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта
// 	ИсключитьСценарий - Булево - Флаг исключения сценария.
Процедура ДополнитьНастройкиСКДПередВыводомАльтернативный(Настройки, ПараметрыДанных, ИсключитьСценарий = Ложь) Экспорт
	
	Структура = Новый Структура;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Структура, ПараметрыДанных.ДополнительныеФильтрыПоИзмерениям, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Структура, ПараметрыДанных.ДополнительныеФильтрыПоАналитикам, Истина);
	
	Если ИсключитьСценарий Тогда
		Структура.Вставить("Сценарий", Неопределено);
	КонецЕсли;
		
	Для Каждого КлючИЗначение Из Структура Цикл
		
		Используется = (Не КлючИЗначение.Значение = Неопределено);
		Если Используется Тогда
			Если КлючИЗначение.Ключ = "Подразделение" Тогда
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Отборы = Новый Массив;
		ПолучитьНастраиваемыеЭлементыОтбора(Настройки.Отбор, Отборы, НРег(КлючИЗначение.Ключ));
		Для Каждого ЭлементОтбора Из Отборы Цикл
			ЭлементОтбора.Использование = Используется;
			Если Используется Тогда
				ЭлементОтбора.ПравоеЗначение = КлючИЗначение.Значение;
				ЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
			КонецЕсли;
		КонецЦикла;
		
		Если КлючИЗначение.Ключ = "Организация"
			ИЛИ КлючИЗначение.Ключ = "Сценарий"
			ИЛИ КлючИЗначение.Ключ = "Подразделение"
			ИЛИ КлючИЗначение.Ключ = "ВалютаХранения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Используется Тогда
			НеНастраиваемыеОтборы = Новый Массив;
			ПолучитьНеНастраиваемыеЭлементыОтбора(Настройки.Отбор, НеНастраиваемыеОтборы, НРег(КлючИЗначение.Ключ));
			Для Каждого ЭлементОтбора Из НеНастраиваемыеОтборы Цикл
				ПохожийЭлемент = ПохожийЭлементОтбора(НеНастраиваемыеОтборы,
					ЭлементОтбора.ЛевоеЗначение,
					ЭлементОтбора.Родитель,
					ВидСравненияОтбора,
					КлючИЗначение.Значение);
				
				Если ПохожийЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.Родитель = Неопределено Тогда
					НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				Иначе
					ЭлементОтбораРодитель = ЭлементОтбора.Родитель; // ГруппаЭлементовОтбораКомпоновкиДанных -
					НовыйЭлементОтбора = ЭлементОтбораРодитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				КонецЕсли;
				НовыйЭлементОтбора.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
				НовыйЭлементОтбора.Использование = Истина;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияОтбора;
				НовыйЭлементОтбора.ПравоеЗначение = КлючИЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПохожийЭлементОтбора(МассивЭлементовДляПоиска, ЛевоеЗначение, Родитель, ВидСравненияОтбора, ПравоеЗначение)
	
	ПохожийЭлементОтбора = Неопределено;
	
	Для Каждого ЭлементОтбораПроверки Из МассивЭлементовДляПоиска Цикл
		Если ЭлементОтбораПроверки.ЛевоеЗначение = ЛевоеЗначение
			И ЭлементОтбораПроверки.Родитель = Родитель
			И ЭлементОтбораПроверки.Использование = Истина
			И ЭлементОтбораПроверки.ВидСравнения = ВидСравненияОтбора
			И ЗначенияОтбораРавны(ЭлементОтбораПроверки.ПравоеЗначение, ПравоеЗначение) Тогда
			ПохожийЭлементОтбора = ЭлементОтбораПроверки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПохожийЭлементОтбора;
	
КонецФункции

Функция ЗначенияОтбораРавны(ЗначениеОтбора, ЗначениеОтбораСравнения)
	ЗначенияРавны = Истина;
	
	ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
	Если ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбораСравнения) Тогда
		Если ТипЗначенияОтбора = Тип("Массив") Тогда
			Если ЗначениеОтбора.Количество()
					<> ЗначениеОтбораСравнения.Количество() Тогда
				ЗначенияРавны = Ложь;
			Иначе
				ИндексЭлемента = 0;
				Для ИндексЭлемента = 0 По ЗначениеОтбора.Количество() - 1 Цикл
					Если ЗначениеОтбора[ИндексЭлемента] <> ЗначениеОтбораСравнения[ИндексЭлемента] Тогда
						ЗначенияРавны = Ложь;
						Прервать;
					КонецЕсли;
					ИндексЭлемента = ИндексЭлемента + 1;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗначенияОтбора = Тип("СписокЗначений") Тогда
			Если ЗначениеОтбора.Количество()
					<> ЗначениеОтбораСравнения.Количество() Тогда
				ЗначенияРавны = Ложь;
			Иначе
				ИндексЭлемента = 0;
				Для ИндексЭлемента = 0 По ЗначениеОтбора.Количество() - 1 Цикл
					Значение1 = ЗначениеОтбора.Получить(ИндексЭлемента).Значение;
					Значение2 = ЗначениеОтбораСравнения.Получить(ИндексЭлемента).Значение;
					Если Значение1 <> Значение2 Тогда
						ЗначенияРавны = Ложь;
						Прервать;
					КонецЕсли;
					ИндексЭлемента = ИндексЭлемента + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ЗначенияРавны = (ЗначениеОтбора = ЗначениеОтбораСравнения);
		КонецЕсли;
	Иначе
		ЗначенияРавны = Ложь;
	КонецЕсли;
	
	Возврат ЗначенияРавны;
КонецФункции


Функция ПолучитьДанныеПоИсточникам(ВидБюджета, СКДДанных, ПараметрыДанных, ИсточникиДанных, СтруктураЯчеек, КэшДанных)
	
	СКДПлановыеДанные = Неопределено;
	СКДПлановыеДанныеПривилегированно = Неопределено;
	СКДДанныеДокумента = Неопределено;
	СКДФактическиеДанные = Неопределено;
	СКДФактическиеДанныеПривилегированно = Неопределено;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	НачалоПериода = ПараметрыДанных.НачалоПериода;
	КонецПериода = ПараметрыДанных.КонецПериода;
	ГраницаФактДанных = ПараметрыДанных.ГраницаФактДанных;
	
	ВнешниеНаборы = Новый Структура;
	
	Если КэшДанных.Свойство("ФункциональнаяВалюта") Тогда
		ФункциональнаяВалюта = КэшДанных.ФункциональнаяВалюта;
	Иначе
		ФункциональнаяВалюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "Владелец.ФункциональнаяВалюта");
		КэшДанных.Вставить("ФункциональнаяВалюта", ФункциональнаяВалюта);
	КонецЕсли;
	
	Если КэшДанных.Свойство("КэшЗначенийАналитик") Тогда
		КэшЗначенийАналитик = КэшДанных.КэшЗначенийАналитик;
	Иначе
		КэшЗначенийАналитик = Новый Соответствие;
		КэшДанных.Вставить("КэшЗначенийАналитик", КэшЗначенийАналитик);
	КонецЕсли;
	
	Если НЕ КэшДанных.Свойство("КэшРеквизитовЭлементовБюджета") Тогда
		КэшРеквизитовЭлементовБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.КэшРеквизитовЭлементовБюджета(ВидБюджета);
		КэшДанных.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
	КонецЕсли;
	
	Если КэшДанных.Свойство("КэшПлановыхКурсов") Тогда
		
		КэшПлановыхКурсов = КэшДанных.КэшПлановыхКурсов;
		
	Иначе
		
		КэшПлановыхКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(,,НачалоПериода, КонецПериода);
		КэшПлановыхКурсов.Сортировать("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий, Период");
		КэшПлановыхКурсов.Индексы.Добавить("Валюта, Сценарий");
		
		КэшДанных.Вставить("КэшПлановыхКурсов", КэшПлановыхКурсов);
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("ПлановыеДанные") Тогда
		
		ПлановыеДанные = КэшДанных.ПлановыеДанные;
		
	ИначеЕсли СКДДанных.Свойство("СКДПлановыеДанные", СКДПлановыеДанные)
		И ТипЗнч(СКДПлановыеДанные) = Тип("СхемаКомпоновкиДанных")
		И СКДПлановыеДанные.НаборыДанных[0].Элементы.Количество() Тогда
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПлановыеДанные);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение Из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ПараметрыДанных.Свойство("Документ") Тогда
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ", ПараметрыДанных.Документ);
		КонецЕсли;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		
		Если ПараметрыДанных.Свойство("Статус") Тогда
			ФинОтчеты.УстановитьОтбор(Компоновщик.Настройки.Отбор, "Статус", ПараметрыДанных.Статус, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ПлановыеДанные = ФинОтчеты.ВыгрузитьРезультатСКД(СКДПлановыеДанные, Компоновщик);
		
		ПоляПересчета = Новый Массив;
		Если ПлановыеДанные.Колонки.Найти("СуммаВалПриход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалПриход", "СуммаПриход", "СуммаПриход", "СуммаВалПриход"));
		КонецЕсли;
		Если ПлановыеДанные.Колонки.Найти("СуммаВалРасход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалРасход", "СуммаРасход", "СуммаРасход", "СуммаВалРасход"));
		КонецЕсли;
		
		Если ПоляПересчета.Количество() Тогда
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(
				ПлановыеДанные, ПараметрыДанных.ВалютаОтчета, ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		КэшДанных.Вставить("ПлановыеДанные", ПлановыеДанные);
		
	Иначе
		
		ПлановыеДанные = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ПлановыеДанные", ПлановыеДанные);
	
	// Плановые данные привилегированно
	Если КэшДанных.Свойство("ПлановыеДанныеПривилегированно") Тогда
		
		ПлановыеДанныеПривилегированно = КэшДанных.ПлановыеДанныеПривилегированно;
		
	ИначеЕсли СКДДанных.Свойство("СКДПлановыеДанныеПривилегированно", СКДПлановыеДанныеПривилегированно)
		И ТипЗнч(СКДПлановыеДанныеПривилегированно) = Тип("СхемаКомпоновкиДанных") 
		И СКДПлановыеДанныеПривилегированно.НаборыДанных[0].Элементы.Количество() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПлановыеДанныеПривилегированно);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение Из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Если ПараметрыДанных.Свойство("Документ") Тогда
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ", ПараметрыДанных.Документ);
		КонецЕсли;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов", КэшПлановыхКурсов);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		
		Если ПараметрыДанных.Свойство("Статус") Тогда
			ФинОтчеты.УстановитьОтбор(Компоновщик.Настройки.Отбор, "Статус", ПараметрыДанных.Статус, ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
		ПлановыеДанныеПривилегированно = ФинОтчеты.ВыгрузитьРезультатСКД(СКДПлановыеДанныеПривилегированно, Компоновщик);
		
		ПоляПересчета = Новый Массив;
		Если ПлановыеДанныеПривилегированно.Колонки.Найти("СуммаВалПриход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалПриход", "СуммаПриход", "СуммаПриход", "СуммаВалПриход"));
		КонецЕсли;
		Если ПлановыеДанныеПривилегированно.Колонки.Найти("СуммаВалРасход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалРасход", "СуммаРасход", "СуммаРасход", "СуммаВалРасход"));
		КонецЕсли;
		
		Если ПоляПересчета.Количество() Тогда
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(
				ПлановыеДанныеПривилегированно, ПараметрыДанных.ВалютаОтчета, ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		КэшДанных.Вставить("ПлановыеДанныеПривилегированно", ПлановыеДанныеПривилегированно);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ПлановыеДанныеПривилегированно = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ПлановыеДанныеПривилегированно", ПлановыеДанныеПривилегированно);
	
	Если СКДДанных.Свойство("СКДДанныеДокумента", СКДДанныеДокумента) И СКДДанныеДокумента <> Неопределено Тогда
		
		#Область ПодготовкаКэшейДляДанныхДокумента
		
		Если КэшДанных.Свойство("НастройкиСвязей") Тогда
			
			НастройкиСвязей = КэшДанных.НастройкиСвязей;
			
		Иначе
			
			МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	РегистрСведений.СтатьяБюджетов КАК СтатьяБюджетов,
			|	РегистрСведений.СвязанныйПоказательБюджетов КАК ПоказательБюджетов,
			|	РегистрСведений.Коэффициент КАК Коэффициент,
			|	РегистрСведений.Расход КАК Расход,
			|	&ТекстАналитик,
			|	&ТекстТрансляцииАналитик,
			|	&ТекстАдресаТрансляцииАналитик,
			|	&ТекстВидыАналитикПоказателей,
			|	РегистрСведений.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик КАК ПоказательКоличествоИспользуемыхАналитик,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоВалюте КАК УчитыватьПоВалюте,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ИсточникЗаполненияВалюты,
			|	РегистрСведений.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству КАК ПоказательУчитыватьПоКоличеству,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК ПоказательЕдиницаИзмеренияОпределяетсяАналитикой,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АдресАналитикиКоличество КАК ПоказательАдресАналитикиКоличество,
			|	РегистрСведений.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК ПоказательИсточникЗаполнениеЕдиницыИзмерения,
			|	РегистрСведений.СвязанныйПоказательБюджетов.ЕдиницаИзмерения КАК ПоказательЕдиницаИзмерения
			|ИЗ
			|	РегистрСведений.СвязиПоказателейБюджетов КАК РегистрСведений";
			ТекстАналитик = "";
			ТекстТрансляцииАналитик = "";
			ТекстАдресаТрансляцииАналитик = "";
			ТекстВидыАналитикПоказателей = "";
			
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				ТекстАналитик = ТекстАналитик + ?(ТекстАналитик = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"РегистрСведений.Аналитика%1 КАК Аналитика%1",
						НомерАналитики);
				
				ТекстТрансляцииАналитик = ТекстТрансляцииАналитик + ?(ТекстТрансляцииАналитик = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"РегистрСведений.ТранслироватьАналитику%1 КАК ТранслироватьАналитику%1",
						НомерАналитики);
				
				ТекстАдресаТрансляцииАналитик = ТекстАдресаТрансляцииАналитик + ?(ТекстАдресаТрансляцииАналитик = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"РегистрСведений.АдресТрансляцииАналитики%1 КАК АдресТрансляцииАналитики%1",
						НомерАналитики);
				
				ТекстВидыАналитикПоказателей = ТекстВидыАналитикПоказателей + ?(ТекстВидыАналитикПоказателей = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"РегистрСведений.СвязанныйПоказательБюджетов.ВидАналитики%1 КАК ПоказательВидАналитики%1",
						НомерАналитики);
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитик", ТекстАналитик);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстТрансляцииАналитик", ТекстТрансляцииАналитик);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАдресаТрансляцииАналитик", ТекстАдресаТрансляцииАналитик);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыАналитикПоказателей", ТекстВидыАналитикПоказателей);
			Запрос.Текст = ТекстЗапроса;
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			НастройкиСвязей = РезультатЗапроса.Выгрузить();
			УстановитьПривилегированныйРежим(Ложь);
			КэшДанных.Вставить("НастройкиСвязей", НастройкиСвязей);
			
		КонецЕсли;
		
		Если КэшДанных.Свойство("КэшПараметровСтатей") Тогда
			
			КэшПараметровСтатей = КэшДанных.КэшПараметровСтатей;
			
		Иначе
			
			МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
			ТекстАналитикСтатьи = "";
			ТекстАналитикПоказателя = "";
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				ТекстАналитикСтатьи = ТекстАналитикСтатьи + ?(ТекстАналитикСтатьи = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"СтатьиБюджетов.ВидАналитики%1 КАК ВидАналитики%1",
						НомерАналитики);
				
				ТекстАналитикПоказателя = ТекстАналитикПоказателя + ?(ТекстАналитикПоказателя = "", "", "," + Символы.ПС + Символы.Таб)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ПоказателиБюджетов.ВидАналитики%1",
						НомерАналитики);
			КонецЦикла;
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	СтатьиБюджетов.Ссылка КАК СтатьяБюджетов,
			|	СтатьиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
			|	&ТекстАналитикСтатьи,
			|	СтатьиБюджетов.УчитыватьПоКоличеству КАК СтатьяУчитыватьПоКоличеству,
			|	СтатьиБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой КАК СтатьяЕдиницаИзмеренияОпределяетсяАналитикой,
			|	СтатьиБюджетов.АдресАналитикиКоличество КАК СтатьяАдресАналитикиКоличество,
			|	СтатьиБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СтатьяИсточникЗаполнениеЕдиницыИзмерения,
			|	СтатьиБюджетов.ЕдиницаИзмерения КАК СтатьяЕдиницаИзмерения
			|ИЗ
			|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
			|ГДЕ
			|	&ОтборCтатей
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоказателиБюджетов.Ссылка,
			|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик,
			|	&ТекстАналитикПоказателя,
			|	ПоказателиБюджетов.УчитыватьПоКоличеству,
			|	ПоказателиБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой,
			|	ПоказателиБюджетов.АдресАналитикиКоличество,
			|	ПоказателиБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения,
			|	ПоказателиБюджетов.ЕдиницаИзмерения
			|ИЗ
			|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
			|ГДЕ
			|	ТипПоказателя = &ТипПоказателя
			|	И &ОтборПоказателей
			|";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикСтатьи", ТекстАналитикСтатьи);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикПоказателя", ТекстАналитикПоказателя);
			Запрос.Текст = ТекстЗапроса;
			
			СтруктураПоиска = Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
			СтатьиБюджета = СтруктураЯчеек.Скопировать(СтруктураПоиска).ВыгрузитьКолонку("СтатьяБюджетов");
			СтатьиБюджета = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтатьиБюджета);
			
			ЕстьПустоеЗначение = Ложь;
			Для Каждого СтатьяБюджетов Из СтатьиБюджета Цикл
				Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
					ЕстьПустоеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьПустоеЗначение Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборCтатей", "Ссылка В (&СписокСтатей)");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоказателей", "Ссылка В (&СписокСтатей)");
				СписокСтатей = Новый СписокЗначений;
				СписокСтатей.ЗагрузитьЗначения(СтатьиБюджета);
				Запрос.УстановитьПараметр("СписокСтатей", СписокСтатей);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборCтатей", "ИСТИНА");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоказателей", "ИСТИНА");
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТипПоказателя", Перечисления.ТипПоказателяБюджетов.Целевой);
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			КэшПараметровСтатей = РезультатЗапроса.Выгрузить();
			КэшДанных.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
		КонецЕсли;
		
		#КонецОбласти
		
		Для Каждого КлючИЗначение Из СКДДанныеДокумента Цикл
			
			Если КэшДанных.Свойство(КлючИЗначение.Ключ) Тогда
				
				МакетКомпоновки = КэшДанных[КлючИЗначение.Ключ];
				
			Иначе
				
				Компоновщик = ФинОтчеты.КомпоновщикСхемы(КлючИЗначение.Значение);
				
				ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
				
				Для Каждого Параметр Из СКДДанных.Параметры Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, Параметр.Ключ, Параметр.Значение);
				КонецЦикла;
				
				Значение = Неопределено;
				Если ПараметрыДанных.Свойство("Организация", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Организация", Значение);
				КонецЕсли;
				Если ПараметрыДанных.Свойство("Подразделение", Значение) Тогда
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Подразделение", Значение);
				КонецЕсли;
				Для Каждого ВычисляемоеПоле Из ПараметрыДанных.ДополнительныеФильтрыПоАналитикам Цикл
					ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_" + ВычисляемоеПоле.Ключ, ПараметрыДанных[ВычисляемоеПоле.Ключ]);
				КонецЦикла;
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Валюта",      ПараметрыДанных.Валюта);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "Документ_Сценарий",    ПараметрыДанных.Сценарий);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода",        НачалоПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода",         КонецПериода);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных",    ГраницаФактДанных);
				
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик",  КэшЗначенийАналитик);
				ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшПлановыхКурсов",    КэшПлановыхКурсов);
				
				МакетКомпоновки = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(КлючИЗначение.Значение, Компоновщик);
				
				// Если после выполнения компоновщика набора количество наборов уменьшилось, то
				// считаем, что нет доступа к одному из наборов схемы компоновки.
				Если КлючИЗначение.Значение.НаборыДанных.Количество() > МакетКомпоновки.НаборыДанных.Количество() Тогда
					ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.';
											|en = 'Access violation.'");
				КонецЕсли;
				
				КэшДанных.Вставить(КлючИЗначение.Ключ, МакетКомпоновки);
				
			КонецЕсли;
			
			ВнешниеНаборыДокумента = Новый Структура;
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Аналитика", ПараметрыДанных.АналитикаСтатейБюджетов);
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Суммы", ПараметрыДанных.ОборотыПоСтатьямБюджетов);
			ВнешниеНаборыДокумента.Вставить("ЭкземплярБюджета_Значения", ПараметрыДанных.АналитикаЗначений);
			ВнешниеНаборыДокумента.Вставить("НастройкиСвязей", НастройкиСвязей);
			ВнешниеНаборыДокумента.Вставить("КэшПараметровСтатей", КэшПараметровСтатей);
			
			ДанныеТаблицыДокумента = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДокумента);
			ДанныеТаблицыДокумента.Колонки.Добавить("ФлагВыводитьВсегда", ОбщегоНазначения.ОписаниеТипаЧисло(1));
			ДанныеТаблицыДокумента.ЗаполнитьЗначения(1, "ФлагВыводитьВсегда");
			ВнешниеНаборы.Вставить(КлючИЗначение.Ключ, ДанныеТаблицыДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КэшДанных.Свойство("ФактическиеДанные") Тогда
		ФактическиеДанные = КэшДанных.ФактическиеДанные;
	Иначе
		Валюта = ПараметрыДанных.ВалютаОтчета;
		РежимПолученияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "РежимПолученияДанных");
		Если Не ЗначениеЗаполнено(РежимПолученияДанных) Тогда
			РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные;
		КонецЕсли;
		ФактическиеДанные = БюджетированиеСервер.ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, Валюта, РежимПолученияДанных);
		КэшДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	Если КэшДанных.Свойство("ХранимыеФактическиеДанные") Тогда
		
		ХранимыеФактическиеДанные = КэшДанных.ХранимыеФактическиеДанные;
		
	ИначеЕсли СКДДанных.Свойство("СКДФактическиеДанные", СКДФактическиеДанные)
		И ТипЗнч(СКДФактическиеДанные) = Тип("СхемаКомпоновкиДанных")
		И СКДФактическиеДанные.НаборыДанных[0].Элементы.Количество() Тогда
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДФактическиеДанные);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение Из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		
		ХранимыеФактическиеДанные = ФинОтчеты.ВыгрузитьРезультатСКД(СКДФактическиеДанные, Компоновщик);
		
		ПоляПересчета = Новый Массив;
		Если ХранимыеФактическиеДанные.Колонки.Найти("СуммаВалПриход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВвалюте",
				"СуммаВалПриход", "СуммаПриход", "СуммаПриход", "СуммаВалПриход"));
		КонецЕсли;
		Если ХранимыеФактическиеДанные.Колонки.Найти("СуммаВалРасход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалРасход", "СуммаРасход", "СуммаРасход", "СуммаВалРасход"));
		КонецЕсли;
		
		Если ПоляПересчета.Количество() Тогда
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(
				ХранимыеФактическиеДанные, ПараметрыДанных.ВалютаОтчета, ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		КэшДанных.Вставить("ХранимыеФактическиеДанные", ХранимыеФактическиеДанные);
		
	Иначе
		
		ХранимыеФактическиеДанные = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ХранимыеФактическиеДанные", ХранимыеФактическиеДанные);
	
	// Хранимые фактические данные привилегированно
	
	Если КэшДанных.Свойство("ХранимыеФактическиеДанныеПривилегированно") Тогда
		
		ХранимыеФактическиеДанныеПривилегированно = КэшДанных.ХранимыеФактическиеДанныеПривилегированно;
		
	ИначеЕсли СКДДанных.Свойство("СКДФактическиеДанныеПривилегированно", СКДФактическиеДанныеПривилегированно)
		И ТипЗнч(СКДФактическиеДанныеПривилегированно) = Тип("СхемаКомпоновкиДанных")
		И СКДФактическиеДанныеПривилегированно.НаборыДанных[0].Элементы.Количество() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДФактическиеДанныеПривилегированно);
		
		ДополнитьНастройкиСКДПередВыводом(Компоновщик.Настройки, ПараметрыДанных);
		
		Для Каждого КлючИЗначение Из СКДДанных.Параметры Цикл
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ДатаАктуальности", ПараметрыДанных.ДатаАктуальности);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "ГраницаФактДанных", ГраницаФактДанных);
		
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КэшЗначенийАналитик", КэшЗначенийАналитик);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		
		ХранимыеФактическиеДанныеПривилегированно = ФинОтчеты.ВыгрузитьРезультатСКД(СКДФактическиеДанныеПривилегированно, Компоновщик);
		
		ПоляПересчета = Новый Массив;
		Если ХранимыеФактическиеДанныеПривилегированно.Колонки.Найти("СуммаВалПриход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалПриход", "СуммаПриход", "СуммаПриход", "СуммаВалПриход"));
		КонецЕсли;
		Если ХранимыеФактическиеДанныеПривилегированно.Колонки.Найти("СуммаВалРасход") <> Неопределено Тогда
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалРасход", "СуммаРасход", "СуммаРасход", "СуммаВалРасход"));
		КонецЕсли;
		
		Если ПоляПересчета.Количество() Тогда
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(
				ХранимыеФактическиеДанные, ПараметрыДанных.ВалютаОтчета, ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		КэшДанных.Вставить("ХранимыеФактическиеДанныеПривилегированно", ХранимыеФактическиеДанныеПривилегированно);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		ХранимыеФактическиеДанныеПривилегированно = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ВнешниеНаборы.Вставить("ХранимыеФактическиеДанныеПривилегированно", ХранимыеФактическиеДанныеПривилегированно);
	
	Если КэшДанных.Свойство("МакетПредварительнойСКД") Тогда
		МакетПредварительнойСКД = КэшДанных.МакетПредварительнойСКД;
	Иначе
		СКДПредварительная = СКДДанных.СКДПредварительныйРасчет;
		Если СКДПредварительная <> Неопределено Тогда
			Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДПредварительная);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
			ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
			МакетПредварительнойСКД = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПредварительная, Компоновщик);
			
			// Если после выполнения компоновщика набора количество наборов уменьшилось, то
			// считаем, что нет доступа к одному из наборов схемы компоновки.
			Если СКДПредварительная.НаборыДанных.Количество() > МакетПредварительнойСКД.НаборыДанных.Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.';
										|en = 'Access violation.'"); 
			КонецЕсли;
				
			КэшДанных.Вставить("МакетПредварительнойСКД", МакетПредварительнойСКД);
		КонецЕсли;
	КонецЕсли;
	
	Если МакетПредварительнойСКД <> Неопределено Тогда
		ТаблицаПредварительныхИтогов = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетПредварительнойСКД, ВнешниеНаборы);
		ВнешниеНаборы.Вставить("ПредварительныйРасчет", ТаблицаПредварительныхИтогов);
	КонецЕсли;
	
	Если КэшДанных.Свойство("МакетСКДИтоговой") Тогда
		МакетСКДИтоговой = КэшДанных.МакетСКДИтоговой;
	Иначе
		СКДИтоговая = СКДДанных.СКДИтоговая;
		Компоновщик = ФинОтчеты.КомпоновщикСхемы(СКДИтоговая);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "НачалоПериода", НачалоПериода);
		ФинОтчеты.УстановитьПараметрКомпоновки(Компоновщик, "КонецПериода", КонецПериода);
		МакетСКДИтоговой = ФинОтчеты.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДИтоговая, Компоновщик);
		
		// Если после выполнения компоновщика набора количество наборов уменьшилось, то
		// считаем, что нет доступа к одному из наборов схемы компоновки.
		Если СКДИтоговая.НаборыДанных.Количество() > МакетСКДИтоговой.НаборыДанных.Количество() Тогда
			ВызватьИсключение НСтр("ru = 'Нарушение прав доступа.';
									|en = 'Access violation.'");
		КонецЕсли;
		
		КэшДанных.Вставить("МакетСКДИтоговой", МакетСКДИтоговой);
	КонецЕсли;
	
	ТаблицаРезультат = ФинОтчеты.ВыгрузитьРезультатСКДПоМакету(МакетСКДИтоговой, ВнешниеНаборы);
	Если ТаблицаРезультат.Колонки.Найти("РедактируемоеЗначение") = Неопределено Тогда
		// для совместимости
		ТаблицаРезультат.Колонки.Добавить("РедактируемоеЗначение", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	КонецЕсли;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область РасчетДанныхСтруктурыЯчеек

// Функция возвращает массив периодов
//
// Параметры:
//  НачалоПериода  - Дата - начало периода
//  КонецПериода  - Дата - окончание периода
//  Периодичность  - ПеречислениеСсылка.Периодичность - периодичность шага.
//
// Возвращаемое значение:
//   Массив - массив периодов
//
Функция ПериодыБюджетногоОтчета(Знач НачалоПериода, Знач КонецПериода, Периодичность) Экспорт
	
	Результат = Новый Массив;
	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(НачалоПериода, Периодичность);
	Пока НачалоПериода <= КонецПериода Цикл
		Результат.Добавить(НачалоПериода);
		НачалоПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(НачалоПериода, Периодичность, 1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу значений с колонками ПериодNNN,
// где NNN - название стандартного периода (год, квартал и т.д).
// В строках таблицы содержаться даты начала всех периодов с учетом периодичности соответствующей колонки.
//
// Параметры:
//   Периодичности - Массив - значения периодичностей, которые планируется добавить в таблицу
//   НачалоПериода - Дата - начало периода
//   КонецПериода - Дата - конец периода
//
// Возвращаемое значение:
//  ТаблицаЗначений -
//
Функция ТаблицаПериодов(Периодичности, НачалоПериода, КонецПериода) Экспорт
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	Для Каждого Периодичность Из Периодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		ТаблицаПериодов.Колонки.Добавить(ИмяПериода, Новый ОписаниеТипов("Дата"));
	КонецЦикла;
	
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	МассивПериодов = ПериодыБюджетногоОтчета(НачалоПериода, КонецПериода, МинимальнаяПериодичность);
	
	Для Каждого Период Из МассивПериодов Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		Для Каждого Периодичность Из Периодичности Цикл
			ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
			НоваяСтрока[ИмяПериода] = БюджетированиеКлиентСервер.ДатаНачалаПериода(Период, Периодичность);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Функция ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета, ИсточникиПериодовГруппировок, НачалоПериода, КонецПериода, ГраницаФактДанных, ТекстПериодов)
	
	Периодичности = ОписаниеОтчета.Периодичности;
	ТаблицаПериодов = ТаблицаПериодов(Периодичности, НачалоПериода, КонецПериода);
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ПериодыПервогоЗапроса = СокрЛП(СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодов"));
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИменаПолейВыборки
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов";
	
	ИменаПолейВыборки = Лев(ПериодыПервогоЗапроса, СтрДлина(ПериодыПервогоЗапроса) - 1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИменаПолейВыборки", ИменаПолейВыборки);
	ТекстЗапроса = ТекстЗапроса + ";";
	
	// Сформируем для каждого источника свою таблицу периодов, если она отличается от ТаблицаПериодов.
	ТаблицыПериодовИсточников = Новый Соответствие();

	Если ИсточникиПериодовГруппировок.Количество() > 0 Тогда
		
		Для Каждого Источник Из ИсточникиПериодовГруппировок Цикл
			
			ТекстЗапросаПериодов =
			"ВЫБРАТЬ
			|	&ВыражениеНачалоПериода КАК НачалоПериода,
			|	&ВыражениеКонецПериода КАК КонецПериода";
			
			ВыражениеНачалоПериода = СтрЗаменить(Источник.ВыражениеНачалоПериодаГруппировки,
					"ЛеваяТаблицаПериодов." + ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период,
					"&НачалоПериода");
			ВыражениеКонецПериода = СтрЗаменить(Источник.ВыражениеКонецПериодаГруппировки,
					"ЛеваяТаблицаПериодов." + ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период,
					"&КонецПериода");
			ТекстЗапросаПериодов = СтрЗаменить(ТекстЗапросаПериодов, "&ВыражениеНачалоПериода", ВыражениеНачалоПериода);
			ТекстЗапросаПериодов = СтрЗаменить(ТекстЗапросаПериодов, "&ВыражениеКонецПериода", ВыражениеКонецПериода);
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаПериодов;
			Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
			Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
			Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если Выборка.НачалоПериода = НачалоПериода И Выборка.КонецПериода = КонецПериода Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаПериодовИсточника = ТаблицаПериодов(Периодичности, Выборка.НачалоПериода, Выборка.КонецПериода);
				ТаблицыПериодовИсточников.Вставить(Источник.Идентификатор, ТаблицаПериодовИсточника);
				
				ПериодыПервогоЗапроса = СокрЛП(СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаПериодовИсточника"));
				ЗапросПакета = 
				"ВЫБРАТЬ
				|
				|	&ВыбираемыеПоля
				|
				|ПОМЕСТИТЬ ЗаменяемоеИмяВременнойТаблицы
				|
				|ИЗ &ТаблицаПериодовИсточникаИД КАК ТаблицаПериодовИсточника";
				
				ВыбираемыеПоля = Лев(ПериодыПервогоЗапроса, СтрДлина(ПериодыПервогоЗапроса) - 1);
				ЗаменяемоеИмяВременнойТаблицы = "ТаблицаПериодовИсточника"+Источник.Идентификатор;
				ТаблицаПериодовИсточникаИД = "&ТаблицаПериодовИсточника" + Источник.Идентификатор;
				
				ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
				ЗапросПакета = СтрЗаменить(ЗапросПакета, "ЗаменяемоеИмяВременнойТаблицы", ЗаменяемоеИмяВременнойТаблицы);
				ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ТаблицаПериодовИсточникаИД", ТаблицаПериодовИсточникаИД);
				
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета + ";";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗапросПакета =
	"ВЫБРАТЬ
	|	&ВыбираемыеПоля,
	|	"""" КАК ИД_ИсточникаПериодовГруппировки
	|ИЗ ТаблицаПериодов";
	
	ВыбираемыеПоля = "";
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ВыбираемыеПоля = ВыбираемыеПоля + ?(ВыбираемыеПоля = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				" ТаблицаПериодов.%1 КАК %2,
				| ТаблицаПериодов.%1 КАК %3",
				ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период,
				ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодОтчет,
				ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодСоединение);
	КонецЦикла;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + ЗапросПакета;
		
	Для Каждого Источник Из ИсточникиПериодовГруппировок Цикл
		
		ТекстОбъединение = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ЗапросПакета =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ВыбираемыеПоля,
		|	&ВыражениеИДИсточника КАК ИД_ИсточникаПериодовГруппировки
		|ИЗ
		|	ТаблицаПериодов КАК ЛеваяТаблицаПериодов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	#ТаблицаСоединения КАК ПраваяТаблицаПериодов
		|ПО
		|	&УсловияСоединения";
		
		ВыбираемыеПоля = "";
		Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
			ВыбираемыеПоля = ВыбираемыеПоля + ?(ВыбираемыеПоля = "", "", "," + Символы.ПС + Символы.Таб)
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					" ЛеваяТаблицаПериодов.%1 КАК %2,
					| ПраваяТаблицаПериодов.%1 КАК %3",
					ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период,
					ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодОтчет,
					ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодСоединение);
		КонецЦикла;
		
		Если ТаблицыПериодовИсточников.Получить(Источник.Идентификатор) = Неопределено Тогда
			ТаблицаСоединения = "ТаблицаПериодов";
		Иначе
			ТаблицаСоединения = "ТаблицаПериодовИсточника" + Источник.Идентификатор;
		КонецЕсли;
		УсловияСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ПраваяТаблицаПериодов.%1 МЕЖДУ %2 И %3",
			ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(МинимальнаяПериодичность).Период,
			Источник.ВыражениеНачалоПериодаГруппировки,
			Источник.ВыражениеКонецПериодаГруппировки);
		
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыражениеИДИсточника", """" + Источник.Идентификатор + """");
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "#ТаблицаСоединения", ТаблицаСоединения);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&УсловияСоединения", УсловияСоединения);
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединение + ЗапросПакета;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
	Для Каждого Стр Из ТаблицыПериодовИсточников Цикл
		Запрос.УстановитьПараметр("ТаблицаПериодовИсточника" + Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВспомогательныеДанныеРасчетаДанныхЯчеек(ПараметрыДанных, ОписаниеОтчета,
						НастройкиСтруктурыЯчеек, КэшДанных, РежимФормирования)
	Перем ВспомогательныеДанныеРасчетаЯчеек, СтрокиОснования;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	НачалоПериода = ПараметрыДанных.НачалоПериода;
	КонецПериода = ПараметрыДанных.КонецПериода;
	ГраницаФактДанных = ПараметрыДанных.ГраницаФактДанных;
	
	ПостфиксКэша = "";
	
	Если ПараметрыДанных.Свойство("СтрокиОснования", СтрокиОснования) И ЗначениеЗаполнено(СтрокиОснования) Тогда
		ПостфиксКэша = "_ФильтрНаСтроки";
	КонецЕсли;
	
	ТолькоРасчетные = ПараметрыДанных.Свойство("ТолькоРасчетные");
	Если ТолькоРасчетные Тогда
		ПостфиксКэша = ПостфиксКэша + "_ТолькоРасчетные";
	КонецЕсли;
	
	Если КэшДанных.Свойство("ВспомогательныеДанныеСоединенияСтруктурыСДанными" + ПостфиксКэша, ВспомогательныеДанныеРасчетаЯчеек) Тогда
		Возврат ВспомогательныеДанныеРасчетаЯчеек;
	КонецЕсли;
	
	ОсновныеЭлементы = 
	"<ИмяТаблицы>.ИндексСтроки,
	|<ИмяТаблицы>.ОсновнойЭлемент,
	|<ИмяТаблицы>.Строка,
	|<ИмяТаблицы>.Колонка,
	|<ИмяТаблицы>.ПорядокРасчетаОперанда,
	|<ИмяТаблицы>.ВидЭлемента,
	|<ИмяТаблицы>.РасчетЗаполнение,
	|<ИмяТаблицы>.ВидОперанда,
	|<ИмяТаблицы>.СтатьяБюджетов,
	|<ИмяТаблицы>.ПоказательБюджетов,
	|<ИмяТаблицы>.НефинансовыйПоказатель,
	|<ИмяТаблицы>.РедактируемоеЗначение,";
	
	ОсновныеФлаги = 
	"<ИмяТаблицы>.ФлагСтатьяБюджетов,
	|<ИмяТаблицы>.ФлагПоказательБюджетов,
	|<ИмяТаблицы>.ФлагНефинансовыйПоказатель,
	|<ИмяТаблицы>.ФлагРедактируемоеЗначение,";
	
	ТекстИзмерений = "";
	ТекстФлагиИзмерений = "";
	
	ВсеИзмерения = Новый Массив;
	
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		ТекстИзмерений = ТекстИзмерений + "
		|" + "<ИмяТаблицы>." + Измерение + " КАК " + Измерение + ",
		|";
		ТекстФлагиИзмерений = ТекстФлагиИзмерений + "
		|" + "<ИмяТаблицы>.Флаг" + Измерение + " КАК Флаг" + Измерение + ",
		|";
		Если Измерение <> "Валюта" Тогда //служебное измерение
			ВсеИзмерения.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстАналитики = "";
	ТекстФлагиАналитики = "";
	ТекстРодителиАналитик = "";
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстАналитики = ТекстАналитики + "
		|" + "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля + ",
		|";
		ТекстФлагиАналитики = ТекстФлагиАналитики + "
		|" + "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля + ",
		|";
		ТекстРодителиАналитик = ТекстРодителиАналитик + "<ИмяТаблицы>.Родитель" + ИмяПоля + " КАК Родитель" + ИмяПоля + ",
		|";
		ВсеИзмерения.Добавить(ИмяПоля);
	КонецЦикла;
	
	ТекстПериодов = "";
	ТекстПериодовСоединение = "";
	ТекстФлагиПериодов = "";
	ТекстВыраженияПериодов = "";
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		
		ТекстПериодов = ТекстПериодов + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<ИмяТаблицы>.%1 КАК %1,",
				ИмяПериода)
			+ Символы.ПС;
		
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодСоединение;
		
		ТекстПериодовСоединение = ТекстПериодовСоединение + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<ИмяТаблицы>.%1 КАК %1,",
				ИмяПериода)
			+ Символы.ПС;
			
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ФлагПериод;
		
		ТекстФлагиПериодов = ТекстФлагиПериодов + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<ИмяТаблицы>.%1 КАК %1,",
				ИмяПериода)
			+ Символы.ПС;
			
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ВыражениеПериода;
		
		ТекстВыраженияПериодов = ТекстВыраженияПериодов + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<ИмяТаблицы>.%1 КАК %1,",
				ИмяПериода)
			+ Символы.ПС;
		
	КонецЦикла;
	
	ЕстьПериодичность = ОписаниеОтчета.Периодичности.Количество();
	ИсточникиПериодовГруппировок =
		НастройкиСтруктурыЯчеек.ИсточникиПериодовГруппировок; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ИсточникиПериодовГруппировок
	
	ТаблицаПериодов = Неопределено;
	Если ЕстьПериодичность Тогда
		
		ТаблицаПериодов = ТаблицаПериодовПоИсточникамДанных(ОписаниеОтчета,
				ИсточникиПериодовГруппировок,
				НачалоПериода,
				КонецПериода,
				ГраницаФактДанных,
				ТекстПериодов);
		
	КонецЕсли;
	
	ТаблицаИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель");
	ТаблицаИзмеренийНФП.Колонки.Добавить("ИмяИзмерения");
	
	ТекстВидовАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстВидовАналитик = ТекстВидовАналитик + ?(ТекстВидовАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НефинансовыеПоказателиБюджетов.ВидАналитики%1 КАК ВидАналитики%1",
				НомерАналитики);
	КонецЦикла;
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
		|	НефинансовыеПоказателиБюджетов.Ссылка КАК НефинансовыйПоказатель,
		|	&ТекстВидовАналитик
		|ИЗ
		|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
		|ГДЕ Ссылка В (&МассивОбъектов)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидовАналитик", ТекстВидовАналитик);
	Запрос.Текст = ТекстЗапроса;
		
	СтруктураЯчеек = НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	СписокОбъектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураЯчеек.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	Запрос.УстановитьПараметр("МассивОбъектов", СписокОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			ВидАналитики = Выборка["ВидАналитики" + Сч];
			Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
				Продолжить;
			КонецЕсли;
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			НоваяСтрока = ТаблицаИзмеренийНФП.Добавить();
			НоваяСтрока.НефинансовыйПоказатель = Выборка.НефинансовыйПоказатель;
			НоваяСтрока.ИмяИзмерения = ИмяПоля;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаИзмеренийНФП.Индексы.Добавить("НефинансовыйПоказатель, ИмяИзмерения");
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("ОсновныеЭлементы", ОсновныеЭлементы);
	ВспомогательныеДанные.Вставить("ОсновныеФлаги", ОсновныеФлаги);
	ВспомогательныеДанные.Вставить("ТекстИзмерений", ТекстИзмерений);
	ВспомогательныеДанные.Вставить("ТекстФлагиИзмерений", ТекстФлагиИзмерений);
	ВспомогательныеДанные.Вставить("ТекстАналитики", ТекстАналитики);
	ВспомогательныеДанные.Вставить("ТекстФлагиАналитики", ТекстФлагиАналитики);
	ВспомогательныеДанные.Вставить("ТекстРодителиАналитик", ТекстРодителиАналитик);
	ВспомогательныеДанные.Вставить("ТекстПериодов", ТекстПериодов);
	ВспомогательныеДанные.Вставить("ТекстПериодовСоединение", ТекстПериодовСоединение);
	ВспомогательныеДанные.Вставить("ТекстФлагиПериодов", ТекстФлагиПериодов);
	ВспомогательныеДанные.Вставить("ТекстВыраженияПериодов", ТекстВыраженияПериодов);
	ВспомогательныеДанные.Вставить("РежимФормирования", РежимФормирования);
	ВспомогательныеДанные.Вставить("ВсеИзмерения", ВсеИзмерения);
	ВспомогательныеДанные.Вставить("ТаблицаИзмеренийНФП", ТаблицаИзмеренийНФП);
	ВспомогательныеДанные.Вставить("ПараметрыЗапроса", Новый Структура);
	ВспомогательныеДанные.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	СтруктураЯчеек = НастройкиСтруктурыЯчеек.СтруктураЯчеек;
	ПоляИсточников = НастройкиСтруктурыЯчеек.ПоляИсточников;
	ИсточникиЗначенийИзмерений = НастройкиСтруктурыЯчеек.ИсточникиЗначенийИзмерений;
	ЗаполнениеОтсутствующихИзмеренийНФП = НастройкиСтруктурыЯчеек.ЗаполнениеОтсутствующихИзмеренийНФП;
	ОтборИзмеренийНФП = НастройкиСтруктурыЯчеек.ОтборИзмеренийНФП;
	НужныеРесурсы = ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ВыбираемыеПоля,
	|	СтруктураЯчеек.ИД_ИсточникаПериодов, СтруктураЯчеек.ИД_Источника,
	|	СтруктураЯчеек.ИсключитьДанныеВводимогоДокументаПриРасчете КАК ИсключитьДанныеДокумента
	|
	|ПОМЕСТИТЬ СтруктураЯчеек
	|
	|ИЗ &СтруктураЯчеек КАК СтруктураЯчеек
	|ГДЕ
	|	&УсловияОтбора";
	
	ВыбираемыеПоля = СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстВыраженияПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек");
	ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
	Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
		ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
	КонецЕсли;
	
	УсловияОтбора = "";
	Если ЗначениеЗаполнено(СтрокиОснования) Тогда
		УсловияОтбора = "СтруктураЯчеек.Строка В (&СтрокиОснования)";
	КонецЕсли;
	Если ТолькоРасчетные Тогда
		УсловияОтбора = УсловияОтбора + ?(УсловияОтбора = "", "", Символы.ПС + Символы.Таб + "ИЛИ" + " ")
			+ "(СтруктураЯчеек.РасчетЗаполнение = ""итог"")";
	КонецЕсли;
	Если УсловияОтбора = "" Тогда
		УсловияОтбора = "ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыбираемыеПоля", ВыбираемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", УсловияОтбора);
	
	Если Не ОписаниеОтчета.Периодичности.Количество() Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО Строка, Колонка
		|
		|;
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО ИД_ИсточникаПериодов
		|
		|;
		|";
	КонецЕсли;
	
	
	// Подготовка таблицы данных
	ЗапросПакета = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ВЫРАЗИТЬ(ТаблицаДанных.НефинансовыйПоказатель КАК Справочник.НефинансовыеПоказателиБюджетов) КАК НефинансовыйПоказатель,
	|	ВЫРАЗИТЬ(ТаблицаДанных.РедактируемоеЗначение КАК Строка(150)) КАК РедактируемоеЗначение,
	|	&ВыбираемыеПоля,
	|	ТаблицаДанных.ИндексНФП,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание,
	|	ЕСТЬNULL(ТаблицаДанных.ДанныеДокумента, ЛОЖЬ) КАК ДанныеДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДанныхПредварительная
	|
	|ИЗ &ТаблицаДанных КАК ТаблицаДанных"
	+ ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|	ЕСТЬNULL(ТаблицаДанных.НефинансовыйПоказатель.ПоОрганизациям, ИСТИНА) КАК НФП_ОтборОрганизация,
	|	ЕСТЬNULL(ТаблицаДанных.НефинансовыйПоказатель.ПоПодразделениям, ИСТИНА) КАК НФП_ОтборПодразделение,
	|	ЕСТЬNULL(ТаблицаДанных.НефинансовыйПоказатель.ПоСценариям, ИСТИНА) КАК НФП_ОтборСценарий,
	|	ТаблицаДанных.РедактируемоеЗначение,
	|	&ВыбираемыеПоля,
	|	ТаблицаДанных.ИндексНФП,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание,
	|	ТаблицаДанных.ДанныеДокумента КАК ДанныеДокумента
	|
	|ПОМЕСТИТЬ ТаблицаДанных
	|
	|ИЗ ТаблицаДанныхПредварительная КАК ТаблицаДанных";
	
	ВыбираемыеПоля = СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
	ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
	Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
		ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
	КонецЕсли;
	Для Каждого ПолеРесурса Из НужныеРесурсы Цикл
		ВыбираемыеПоля = ВыбираемыеПоля + "," + Символы.ПС + Символы.Таб
			+ "ТаблицаДанных." + ПолеРесурса.ИмяРесурса;
	КонецЦикла;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
	ЗапросПакета = ЗапросПакета + "
	|
	|ИНДЕКСИРОВАТЬ ПО НефинансовыйПоказатель"
	+ ОбщегоНазначения.РазделительПакетаЗапросов() +
	"УНИЧТОЖИТЬ ТаблицаДанныхПредварительная"
	+ ОбщегоНазначения.РазделительПакетаЗапросов();
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета;
	
	// Подготовка таблицы данных
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточников.ИД_Источника,
	|	ТаблицаИсточников.Строка,
	|	ТаблицаИсточников.Колонка
	|
	|ПОМЕСТИТЬ ТаблицаИсточниковИзмерений
	|
	|ИЗ &ТаблицаПоИзмерениям КАК ТаблицаИсточников
	|
	|ГДЕ
	|	ТаблицаИсточников.ИД_Источника <> ""ВсеЭлементы""
	|
	|ИНДЕКСИРОВАТЬ ПО Строка, Колонка
	|;
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ТаблицаИсточников.ИД_Источника,
	|	ТаблицаИсточников.Измерение,
	|	ТаблицаИсточников.СтатьяБюджетов,
	|	ТаблицаИсточников.ПоказательБюджетов,
	|	ТаблицаИсточников.НефинансовыйПоказатель,
	|	ТаблицаИсточников.РедактируемоеЗначение,
	|	ТаблицаИсточников.Строка,
	|	ТаблицаИсточников.Колонка,
		// Дополнительные поля для фильтра аналитик по источникам при заполнении производных показателей и групп
	|	ТаблицаИсточников.ВидИсточника,				// Статья или Показатель или НефинансовыйПоказатель или РедактируемоеЗначение или Неопределено (т.е. ВсеСтатьи или ВсеПоказатели)
	|	ТаблицаИсточников.ТипПоказателяБюджетов		// Расчетный или Целевой
	|
	|ПОМЕСТИТЬ ТаблицаИсточниковИзмеренийСИменемИзмерения
	|
	|ИЗ &ТаблицаПоИзмерениям КАК ТаблицаИсточников
	|
	|ИНДЕКСИРОВАТЬ ПО Измерение
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанных";
	ИмяТаблицы = "СтруктураЯчеек";
	
	ДобавитьВЗапросОтборЗаписейПоНФП(ТекстЗапроса, ВспомогательныеДанные, СтруктураЯчеек, ОтборИзмеренийНФП, НужныеРесурсы, ИмяТаблицыДанных);
	
	ДополнитьНедостающуюАналитикуВНФП(ТекстЗапроса, ВспомогательныеДанные, ЗаполнениеОтсутствующихИзмеренийНФП, ИсточникиЗначенийИзмерений, НужныеРесурсы, ИмяТаблицыДанных);
	
	РазбитьЯчейкиПоПериодам(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы);
	
	ПараметрыПрочихСоединений = ПодготовитьТаблицуЗначенийИзмеренийПоРодителям(ТекстЗапроса, СтруктураЯчеек, ВспомогательныеДанные);
	
	Если ПараметрыДанных.Свойство("ПараметрыВыводаВидаБюджета") Тогда
		ПроверкаВозможностиЗаполненияИзмеренийВСтруктуреЯчеек(ОписаниеОтчета, ИсточникиЗначенийИзмерений,
			ПараметрыДанных.ПараметрыВыводаВидаБюджета.ДеревоВывода);
	КонецЕсли;
	
	ИмяТаблицыСИзмерениями = ИмяТаблицы;
	
	ПараметрыЗаполненияИзмерений = Новый Структура;
	ПараметрыЗаполненияИзмерений.Вставить("ОписаниеОтчета", ОписаниеОтчета);
	ПараметрыЗаполненияИзмерений.Вставить("ВспомогательныеДанные", ВспомогательныеДанные);
	ПараметрыЗаполненияИзмерений.Вставить("ИмяТаблицыДанных", ИмяТаблицыДанных);
	ПараметрыЗаполненияИзмерений.Вставить("ИсточникиЗначенийИзмерений", ИсточникиЗначенийИзмерений);
	ПараметрыЗаполненияИзмерений.Вставить("ПараметрыПрочихСоединений", ПараметрыПрочихСоединений);
	ПараметрыЗаполненияИзмерений.Вставить("РежимФормирования", РежимФормирования);
	ЗаполнитьИзмеренияВСтруктуреЯчеекПоИсточникам(ТекстЗапроса, ПараметрыЗаполненияИзмерений, ИмяТаблицыСИзмерениями);
	
	ДобавитьИсточникВСтруктуруЯчеек(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ИмяТаблицыСИзмерениями);
	
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Неопределено;
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		СтатьиИПоказателиБюджетов = Новый Структура();
		СтатьиИПоказателиБюджетов.Вставить("СтатьиБюджетов", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("СтатьяБюджетов"));
		СтатьиИПоказателиБюджетов.Вставить("ПоказателиБюджетов", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("ПоказательБюджетов"));
		СтатьиИПоказателиБюджетов.Вставить("НефинансовыеПоказатели", ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("НефинансовыйПоказатель"));
		СоответствиеВидовАналитикСтатьямИПоказателямБюджета = 
			ПодготовитьСоответствиеВидовАналитикСтатьямИПоказателямБюджета(ОписаниеОтчета.ВидыАналитик, СтатьиИПоказателиБюджетов);
	КонецЕсли;
	
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ИсточникиЗначенийИзмерений", ИсточникиЗначенийИзмерений);
	ВспомогательныеПараметры.Вставить("ИмяТаблицыДанных", ИмяТаблицыДанных);
	ВспомогательныеПараметры.Вставить("ПоляИсточников", ПоляИсточников);
	ВспомогательныеПараметры.Вставить("ПараметрыПрочихСоединений", ПараметрыПрочихСоединений);
	ВспомогательныеПараметры.Вставить("СоответствиеВидовАналитикСтатьямИПоказателямБюджета", СоответствиеВидовАналитикСтатьямИПоказателямБюджета);
	
	ВыполнитьСоединениеСтруктурыСДанными(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ВспомогательныеПараметры, РежимФормирования);
	
	ВыполнитьФильтрИзмеренийПоИсточникамЗначений(ТекстЗапроса, ИсточникиЗначенийИзмерений, ИмяТаблицы, ИмяТаблицыДанных);
	
	ВспомогательныеДанныеРасчетаЯчеек = Новый Структура;
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ТекстЗапроса", ТекстЗапроса);
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	ВспомогательныеДанныеРасчетаЯчеек.Вставить("ПараметрыЗапроса", ВспомогательныеДанные.ПараметрыЗапроса);
	
	КэшДанных.Вставить("ВспомогательныеДанныеСоединенияСтруктурыСДанными" + ПостфиксКэша, ВспомогательныеДанныеРасчетаЯчеек);
	
	Возврат ВспомогательныеДанныеРасчетаЯчеек;
	
КонецФункции

Процедура РазбитьЯчейкиПоПериодам(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы)
	
	Если Не ОписаниеОтчета.Периодичности.Количество() Тогда
		Возврат
	КонецЕсли;
	
	ОсновныеЭлементы = ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги = ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений = ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений = ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики = ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики = ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик = ВспомогательныеДанные.ТекстРодителиАналитик;
	
	ТекстПериодичностей = "";
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		ФлагПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ФлагПериод;
		ПериодОтчет = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодОтчет;
		ПериодСоединение = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодСоединение;
		
		ТекстПериодичностей = ТекстПериодичностей + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"	ВЫБОР КОГДА СтруктураЯчеек.%1 = ""заполнить""
				|		ТОГДА ТаблицаПериодов.%2
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК %3,",
				ФлагПериод,
				ПериодОтчет,
				ИмяПериода)
			+ Символы.ПС;
		
		ТекстПериодичностей = ТекстПериодичностей + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"	ВЫБОР КОГДА СтруктураЯчеек.%1 = ""заполнить""
				|		ТОГДА ТаблицаПериодов.%2
				|		ИНАЧЕ НЕОПРЕДЕЛЕНО
				|	КОНЕЦ КАК %2,",
				ФлагПериод,
				ПериодСоединение,
				ИмяПериода)
			+ Символы.ПС;
		
		ТекстПериодичностей = ТекстПериодичностей + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"	ВЫБОР КОГДА СтруктураЯчеек.%1 = ""заполнить""
				|		ТОГДА ""отобрать""
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК %1,",
				ФлагПериод)
			+ Символы.ПС;
		
	КонецЦикла;
	
	ТекстСоединенияПериодичностей = "";
	Для Каждого Измерение Из ОписаниеОтчета.Периодичности Цикл
		ФлагПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).ФлагПериод;
		ВыражениеПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).ВыражениеПериода;
		ПериодОтчет = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Измерение).ПериодОтчет;
		ИмяИзмерения = ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Измерение);
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			ТекстСоединенияПериодичностей = ТекстСоединенияПериодичностей
				+ ?(ТекстСоединенияПериодичностей = "", "", Символы.ПС + Символы.Таб + "И" + " ")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"(СтруктураЯчеек.%2 = """"
					|			ИЛИ
					|			СтруктураЯчеек.%3 = -1
					|			ИЛИ
					|			(СтруктураЯчеек.%3 = 0
					|				И ДобавитьКДате(&НачалоПериода, %1, СтруктураЯчеек.%3) = 
					|					ТаблицаПериодов.%4)
					|			ИЛИ
					|			(СтруктураЯчеек.%3 > 0
					|				И ДобавитьКДате(НачалоПериода(&НачалоПериода, %1), %1, СтруктураЯчеек.%3) = 
					|					ТаблицаПериодов.%4)
					|		)",
					ИмяИзмерения,
					ФлагПериод,
					ВыражениеПериода,
					ПериодОтчет);
		Иначе
			ТекстСоединенияПериодичностей = ТекстСоединенияПериодичностей
				+ ?(ТекстСоединенияПериодичностей = "", "", Символы.ПС + Символы.Таб + "И" + " ")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"(СтруктураЯчеек.%2 = """"
					|			ИЛИ
					|			СтруктураЯчеек.%3 = -1
					|			ИЛИ
					|			(СтруктураЯчеек.%3 > -1
					|				И ДобавитьКДате(&НачалоПериода, %1, СтруктураЯчеек.%3) = 
					|					ТаблицаПериодов.%4)
					|		)",
					ИмяИзмерения,
					ФлагПериод,
					ВыражениеПериода,
					ПериодОтчет);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросПакета =
	"ВЫБРАТЬ
	|	&ПоляВыборки,
	|	ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов
	|
	|ИНДЕКСИРОВАТЬ ПО ИД_ИсточникаПериодовГруппировки
	|;
	|
	|";
	
	ПоляВыборки = "";
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ПоляВыборки = ПоляВыборки + ?(ПоляВыборки = "", "", "," + Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"	ТаблицаПериодов.%1,
				|	ТаблицаПериодов.%2",
				ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодОтчет,
				ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).ПериодСоединение);
	КонецЦикла;
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ПоляВыборки", ПоляВыборки);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета
		+	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|
			|	СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка, СтруктураЯчеек.ИД_ИсточникаПериодов
			|
			|ПОМЕСТИТЬ ИсточникиПериодаСУчетомПодчиненных 
			|ИЗ СтруктураЯчеек
			|
			|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка
			|
			|;
			|";
	
	ЗапросПакета = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПоляВыборки,
	|	СтруктураЯчеек.ИД_Источника КАК ИД_Источника,
	|	СтруктураЯчеек.ИсключитьДанныеДокумента КАК ИсключитьДанныеДокумента
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСПериодами
	|
	|ИЗ &ИмяТаблицыСтруктураЯчеек КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиПериодаСУчетомПодчиненных
	|	
	|ПО СтруктураЯчеек.Строка = ИсточникиПериодаСУчетомПодчиненных.Строка
	|И СтруктураЯчеек.Колонка = ИсточникиПериодаСУчетомПодчиненных.Колонка
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов
	|	
	|ПО ИсточникиПериодаСУчетомПодчиненных.ИД_ИсточникаПериодов = ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|	И &ТекстСоединенияПериодичностей
	|
	|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
	|	СтруктураЯчеек.ВидЭлемента В
	|		(	
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ПоляВыборки,
	|	СтруктураЯчеек.ИД_Источника,
	|	СтруктураЯчеек.ИсключитьДанныеДокумента
	|
	|ИЗ &ИмяТаблицыСтруктураЯчеек КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов
	|	
	|ПО СтруктураЯчеек.ИД_ИсточникаПериодов = ТаблицаПериодов.ИД_ИсточникаПериодовГруппировки
	|	И &ТекстСоединенияПериодичностей
	|
	|ГДЕ (СтруктураЯчеек.ОсновнойЭлемент
	|			И НЕ СтруктураЯчеек.ВидЭлемента В
	|			(	
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|			)
	|	)
	|	ИЛИ Не СтруктураЯчеек.ОсновнойЭлемент";
	
	ПоляВыборки = СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ ТекстПериодичностей
			+ СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек");
	ПоляВыборки = СокрЛП(ПоляВыборки);
	Если СтрЗаканчиваетсяНа(ПоляВыборки, ",") Тогда
		ПоляВыборки = Сред(ПоляВыборки, 1, СтрДлина(ПоляВыборки) - 1);
	КонецЕсли;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ПоляВыборки", ПоляВыборки);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыСтруктураЯчеек", ИмяТаблицы);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ТекстСоединенияПериодичностей", ТекстСоединенияПериодичностей);
	
	ТекстИндексы = "
	|
	|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета + ТекстИндексы + ";" + Символы.ПС + Символы.ПС;
	
	ИмяТаблицы = "СтруктураЯчеекСПериодами";
	
КонецПроцедуры

Процедура ДобавитьВЗапросОтборЗаписейПоНФП(ТекстЗапроса, ВспомогательныеДанные, СтруктураЯчеек, ОтборИзмеренийНФП, НужныеРесурсы, ИмяТаблицыДанных)
	
	Если ОтборИзмеренийНФП = Неопределено
		ИЛИ Не ОтборИзмеренийНФП.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзмерений = ВспомогательныеДанные.ТекстИзмерений;
	ТекстАналитики = ВспомогательныеДанные.ТекстАналитики;
	ТекстПериодов  = ВспомогательныеДанные.ТекстПериодов;
	
	// Первичный фильтр значений измерений
	ИменаИсточники = ОтборИзмеренийНФП.Скопировать(,"ИмяИзмерения");
	ИменаИсточники.Свернуть("ИмяИзмерения");
	Для Каждого СтрокаИмени Из ИменаИсточники Цикл
		
		ЗапросВременнойТаблицы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ИмяИзмерения
		|ПОМЕСТИТЬ ЗаменяемоеИмяВременнойТаблицы
		|ИЗ ТаблицаДанных КАК ТаблицаДанных
		|ГДЕ &УсловияПоИД_Источника";
		УсловияПоИД_Источника = "ИД_Источника В (&СписокИсточников" + СтрокаИмени.ИмяИзмерения + ")";
		ЗаменяемоеИмяВременнойТаблицы = "Список" + СтрокаИмени.ИмяИзмерения;
		
		ЗапросВременнойТаблицы = СтрЗаменить(ЗапросВременнойТаблицы, "&ИмяИзмерения", СтрокаИмени.ИмяИзмерения);
		ЗапросВременнойТаблицы = СтрЗаменить(ЗапросВременнойТаблицы, "ЗаменяемоеИмяВременнойТаблицы", ЗаменяемоеИмяВременнойТаблицы);
		ЗапросВременнойТаблицы = СтрЗаменить(ЗапросВременнойТаблицы, "&УсловияПоИД_Источника", УсловияПоИД_Источника);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросВременнойТаблицы + ";" + Символы.ПС + Символы.ПС;
		
		НайденныеСтроки = ОтборИзмеренийНФП.НайтиСтроки(Новый Структура("ИмяИзмерения", СтрокаИмени.ИмяИзмерения));
		Список = Новый СписокЗначений;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если Список.НайтиПоЗначению(НайденнаяСтрока.АдресОтбораЗаполненияЗначений) = Неопределено Тогда
				Список.Добавить(НайденнаяСтрока.АдресОтбораЗаполненияЗначений);
			КонецЕсли;
		КонецЦикла;
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить("СписокИсточников" + СтрокаИмени.ИмяИзмерения, Список);
		
	КонецЦикла;
	
	ЗапросПакета =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.РедактируемоеЗначение,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|	&ВыбираемыеПоля,
	|	ТаблицаДанных.ИндексНФП,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание,
	|	ТаблицаДанных.ДанныеДокумента
	|ПОМЕСТИТЬ ТаблицаДанныхБезЛишнихАналитик
	|ИЗ
	|	&ИмяТаблицыДанных КАК ТаблицаДанных
	|
	|ГДЕ ТаблицаДанных.НефинансовыйПоказатель В (&НефинансовыеПоказателиБезОтбораИПустой)";
	
	ВыбираемыеПоля = СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
	ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
	Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
		ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
	КонецЕсли;
		
	Для Каждого ПолеРесурса Из НужныеРесурсы Цикл
		ВыбираемыеПоля = ВыбираемыеПоля + "," + Символы.ПС + Символы.Таб
			+ "ТаблицаДанных." + ПолеРесурса.ИмяРесурса;
	КонецЦикла;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыДанных", ИмяТаблицыДанных);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета;
	
	ИменаИсточники = ОтборИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель");
	ИменаИсточники.Свернуть("НефинансовыйПоказатель");
	
	НефинансовыеПоказатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтруктураЯчеек.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	НефинансовыеПоказатели = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НефинансовыеПоказатели, ИменаИсточники.ВыгрузитьКолонку("НефинансовыйПоказатель"));
	
	ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НефинансовыеПоказателиБезОтбораИПустой", НефинансовыеПоказатели);
	
	ИменаИзмерений = ОтборИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель, ИмяИзмерения");
	ИменаИзмерений.Свернуть("НефинансовыйПоказатель, ИмяИзмерения");
	
	Для Каждого СтрокаИмени Из ИменаИсточники Цикл
		
		ТекстОбъединение = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ЗапросПакета =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИД_Источника,
		|	ТаблицаДанных.СтатьяБюджетов,
		|	ТаблицаДанных.ПоказательБюджетов,
		|	ТаблицаДанных.РедактируемоеЗначение,
		|	ТаблицаДанных.НефинансовыйПоказатель,
		|	&ВыбираемыеПоля,
		|	ТаблицаДанных.ИндексНФП,
		|	ТаблицаДанных.НомерПоПорядку,
		|	ТаблицаДанных.Примечание,
		|	ТаблицаДанных.ДанныеДокумента
		|
		|ИЗ &ИмяТаблицыДанных КАК ТаблицаДанных
		|
		|ГДЕ
		|	&ВыражениеОтбораПоНФП";
		
		ВыбираемыеПоля = СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных")
				+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных")
				+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
		Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
			ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
		КонецЕсли;
		
		Для Каждого ПолеРесурса Из НужныеРесурсы Цикл
			ВыбираемыеПоля = ВыбираемыеПоля + "," + Символы.ПС + Символы.Таб
				+ "ТаблицаДанных." + ПолеРесурса.ИмяРесурса;
		КонецЦикла;
			
		ВыражениеОтбораПоНФП = "ТаблицаДанных.НефинансовыйПоказатель = &НФП_"
			+ ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
		
		
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель), СтрокаИмени.НефинансовыйПоказатель);
		Записи = ИменаИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		
		Для Каждого Запись Из Записи Цикл
			ВыражениеОтбораПоНФП = ВыражениеОтбораПоНФП + Символы.ПС + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"И ТаблицаДанных.%1 В (ВЫБРАТЬ %1 ИЗ Список%1)",
				Запись.ИмяИзмерения);
		КонецЦикла;
		
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыДанных", ИмяТаблицыДанных);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыражениеОтбораПоНФП", ВыражениеОтбораПоНФП);
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединение + ЗапросПакета;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО НефинансовыйПоказатель
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанныхБезЛишнихАналитик";
	
КонецПроцедуры

Процедура ДополнитьНедостающуюАналитикуВНФП(ТекстЗапроса, ВспомогательныеДанные, ЗаполнениеОтсутствующихИзмеренийНФП,
                                            ИсточникиЗначенийИзмерений, НужныеРесурсы, ИмяТаблицыДанных)
	
	Если ЗаполнениеОтсутствующихИзмеренийНФП = Неопределено
		ИЛИ Не ЗаполнениеОтсутствующихИзмеренийНФП.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстИзмерений      = ВспомогательныеДанные.ТекстИзмерений;
	ТекстАналитики      = ВспомогательныеДанные.ТекстАналитики;
	ТекстПериодов       = ВспомогательныеДанные.ТекстПериодов;
	
	ИменаИсточники = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель");
	ИменаИсточники.Свернуть("НефинансовыйПоказатель");
	ИменаИсточники.Колонки.Добавить("ИмяТаблицыЗаполненияДанных");
	ИменаИсточники.Колонки.Добавить("ИзмеренияТаблицы");
	
	ИменаИзмерений = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(,"НефинансовыйПоказатель, ИмяИзмерения");
	ИменаИзмерений.Свернуть("НефинансовыйПоказатель, ИмяИзмерения");
	
	КэшТаблиц = Новый Соответствие;
	
	Для Каждого СтрокаИмени Из ИменаИсточники Цикл
		
		ВсеИзмерения = ВспомогательныеДанные.ВсеИзмерения;
		МассивИзмерений = Новый Массив;
		
		Для Каждого Измерение Из ВсеИзмерения Цикл
			// Если это измерение заполняемое - то в соединении не участвует
			НайденныеСтроки = ЗаполнениеОтсутствующихИзмеренийНФП.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение));
			Требуется = Истина;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.НефинансовыйПоказатель = СтрокаИмени.НефинансовыйПоказатель Тогда
					Требуется = Истина;
					Прервать;
				КонецЕсли;
				Если НайденнаяСтрока.НефинансовыйПоказатель <> СтрокаИмени.НефинансовыйПоказатель Тогда
					Требуется = Ложь;
				КонецЕсли;
			КонецЦикла;
			// Если НФП может быть поставщиком значений измерения - то используем все значения НФП.
			Поиск = Новый Структура("НефинансовыйПоказатель, Измерение", СтрокаИмени.НефинансовыйПоказатель, Измерение);
			Если Требуется И ИсточникиЗначенийИзмерений.НайтиСтроки(Поиск).Количество() Тогда
				Требуется = Ложь;
			КонецЕсли;
			Если Не Требуется Тогда
				Продолжить;
			КонецЕсли;
			МассивИзмерений.Добавить(Измерение);
		КонецЦикла;
		
		ИменаИзмеренияВалюта = ИменаИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель, ИмяИзмерения", СтрокаИмени.НефинансовыйПоказатель, "Валюта"));
		Если ИменаИзмеренияВалюта.Количество() > 0 
			И МассивИзмерений.Найти("Валюта") = Неопределено Тогда
			// Измерение "Валюта" не входит в значения ВсеИзмерения
			МассивИзмерений.Добавить("Валюта");
		КонецЕсли;
		
		СтрокаИменаИзмерений = СтрСоединить(МассивИзмерений, ",");
		АдресИсточников = ЗаполнениеОтсутствующихИзмеренийНФП.Скопировать(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		НужныеИсточники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АдресИсточников.ВыгрузитьКолонку("АдресИсточникаЗаполненияЗначений"));
		
		КлючПоиска = СтрокаИменаИзмерений + СтрСоединить(НужныеИсточники, ",");
		
		ПараметрыТаблицы = КэшТаблиц[КлючПоиска];
		Если ПараметрыТаблицы = Неопределено Тогда
			
			ИмяПараметра = "Список" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить(ИмяПараметра, НужныеИсточники);
			
			ИмяТаблицы = "ТаблицаОтобранныхИзмерений" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
			ТекстЗапросаИсточника = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&СтрокаИменаИзмерений
			|ПОМЕСТИТЬ ЗаменяемоеИмяВременнойТаблицы
			|ИЗ &ИмяТаблицыДанных
			|ГДЕ &УсловиеПоИДИсточника";
			
			УсловиеПоИДИсточника = СтрЗаменить("ИД_Источника В (&ИмяПараметра)", "&ИмяПараметра", "&" + ИмяПараметра);
			ТекстЗапросаИсточника = СтрЗаменить(ТекстЗапросаИсточника, "ЗаменяемоеИмяВременнойТаблицы", ИмяТаблицы);
			ТекстЗапросаИсточника = СтрЗаменить(ТекстЗапросаИсточника, "&СтрокаИменаИзмерений", ?(ПустаяСтрока(СтрокаИменаИзмерений), "НЕОПРЕДЕЛЕНО", СтрокаИменаИзмерений));
			ТекстЗапросаИсточника = СтрЗаменить(ТекстЗапросаИсточника, "&ИмяТаблицыДанных", ИмяТаблицыДанных);
			ТекстЗапросаИсточника = СтрЗаменить(ТекстЗапросаИсточника, "&УсловиеПоИДИсточника", УсловиеПоИДИсточника);
			
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ТекстЗапросаИсточника + Символы.ПС + ";";
			
			ПараметрыТаблицы = Новый Структура("ИмяТаблицы, МассивИзмерений", ИмяТаблицы, МассивИзмерений);
			КэшТаблиц.Вставить(КлючПоиска, ПараметрыТаблицы);
			
		КонецЕсли;
		
		СтрокаИмени.ИмяТаблицыЗаполненияДанных = ПараметрыТаблицы.ИмяТаблицы;
		СтрокаИмени.ИзмеренияТаблицы = ПараметрыТаблицы.МассивИзмерений;
		
	КонецЦикла;
	
	ЗапросПакета =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИД_Источника,
	|	ТаблицаДанных.СтатьяБюджетов,
	|	ТаблицаДанных.ПоказательБюджетов,
	|	ТаблицаДанных.РедактируемоеЗначение,
	|	ТаблицаДанных.НефинансовыйПоказатель,
	|	ТаблицаДанных.ИндексНФП, 
	|	ТаблицаДанных.ДанныеДокумента,
	|	&ВыбираемыеПоля,
	|	ТаблицаДанных.НомерПоПорядку,
	|	ТаблицаДанных.Примечание
	|
	|ПОМЕСТИТЬ ТаблицаДанныхСЗаполненнымиАналитиками
	|
	|ИЗ &ИмяТаблицыДанных КАК ТаблицаДанных
	|
	|ГДЕ ТаблицаДанных.НефинансовыйПоказатель = Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)";
	
	ВыбираемыеПоля = СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
	ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
	Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
		ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
	КонецЕсли;
		
	Для Каждого ПолеРесурса Из НужныеРесурсы Цикл
		ВыбираемыеПоля = ВыбираемыеПоля + "," + Символы.ПС + Символы.Таб
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ТаблицаДанных.%1 КАК %1",
				ПолеРесурса.ИмяРесурса);
	КонецЦикла;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыДанных", ИмяТаблицыДанных);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ЗапросПакета;
	
	Для Каждого СтрокаИмени Из ИменаИсточники Цикл
		
		ТекстОбъединения = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
		ЗапросПакета =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИД_Источника,
		|	ТаблицаДанных.СтатьяБюджетов,
		|	ТаблицаДанных.ПоказательБюджетов,
		|	ТаблицаДанных.РедактируемоеЗначение,
		|	ТаблицаДанных.НефинансовыйПоказатель,
		|	ТаблицаДанных.ИндексНФП, 
		|	ТаблицаДанных.ДанныеДокумента,
		|	&ВыбираемыеПоля,
		|	ТаблицаДанных.НомерПоПорядку,
		|	ТаблицаДанных.Примечание
		|
		|ИЗ &ИмяТаблицыДанных КАК ТаблицаДанных
		|ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицыЗаполненияДанных КАК ТаблицаЗаполнения
		|ПО
		|	&УсловияСоединения
		|ГДЕ
		|	&УсловияОтбора";
		
		ВыбираемыеПоля = СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "ТаблицаДанных")
				+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "ТаблицаДанных")
				+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "ТаблицаДанных");
		
		МассивИзмерений = Новый Массив;
		ЗаполняемыеИмена = ИменаИзмерений.НайтиСтроки(Новый Структура("НефинансовыйПоказатель", СтрокаИмени.НефинансовыйПоказатель));
		Для Каждого СтрокаЗаполнения Из ЗаполняемыеИмена Цикл
			Если СтрокаИмени.ИзмеренияТаблицы.Найти(СтрокаЗаполнения.ИмяИзмерения) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВыбираемыеПоля = СтрЗаменить(ВыбираемыеПоля,
			                                  "ТаблицаДанных." + СтрокаЗаполнения.ИмяИзмерения,
			                                  "ТаблицаЗаполнения." + СтрокаЗаполнения.ИмяИзмерения);
			МассивИзмерений.Добавить(СтрокаЗаполнения.ИмяИзмерения);
		КонецЦикла;
		ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
		Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
			ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
		КонецЕсли;
		Для Каждого ПолеРесурса Из НужныеРесурсы Цикл
			ВыбираемыеПоля = ВыбираемыеПоля + "," + Символы.ПС + Символы.Таб
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"ТаблицаДанных.%1",
					ПолеРесурса.ИмяРесурса);
		КонецЦикла;
		
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыДанных", ИмяТаблицыДанных);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "#ИмяТаблицыЗаполненияДанных", СтрокаИмени.ИмяТаблицыЗаполненияДанных);
		
		УсловияСоединения = "";
		ОставшиесяИзмерения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтрокаИмени.ИзмеренияТаблицы, МассивИзмерений);
		Если НЕ ОставшиесяИзмерения.Количество() Тогда
			УсловияСоединения = "ИСТИНА";
		Иначе
			Первый = Истина;
			Для Каждого Измерение Из ОставшиесяИзмерения Цикл
				Если Не Первый Тогда
					УсловияСоединения = УсловияСоединения + " " + "И" + " ";
				КонецЕсли;
				Если Измерение = "Валюта" Тогда
					УсловияСоединения = УсловияСоединения + "ВЫБОР КОГДА ВЫРАЗИТЬ(ТаблицаДанных.НефинансовыйПоказатель КАК Справочник.НефинансовыеПоказателиБюджетов).ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Денежный)
					|		ТОГДА ТаблицаДанных." + Измерение + " = ТаблицаЗаполнения." + Измерение + "
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ
					|";
				ИначеЕсли Измерение = "ЕдиницаИзмерения" Тогда
					УсловияСоединения = УсловияСоединения + "ВЫБОР КОГДА ВЫРАЗИТЬ(ТаблицаДанных.НефинансовыйПоказатель КАК Справочник.НефинансовыеПоказателиБюджетов).ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Количественный)
					|		ТОГДА ТаблицаДанных." + Измерение + " = ТаблицаЗаполнения." + Измерение + "
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ
					|";
				Иначе
					УсловияСоединения = УсловияСоединения + "ТаблицаДанных." + Измерение + " = ТаблицаЗаполнения." + Измерение + "
					|";
				КонецЕсли;
				Первый = Ложь;
			КонецЦикла;
		КонецЕсли;
		
		УсловияОтбора = "ТаблицаДанных.НефинансовыйПоказатель = &НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&УсловияСоединения", УсловияСоединения);
		ЗапросПакета = СтрЗаменить(ЗапросПакета, "&УсловияОтбора", УсловияОтбора);
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения + ЗапросПакета;
		
		ИмяНФП = "НФП_" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(СтрокаИмени.НефинансовыйПоказатель);
		ВспомогательныеДанные.ПараметрыЗапроса.Вставить(ИмяНФП, СтрокаИмени.НефинансовыйПоказатель);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО НефинансовыйПоказатель
	|;
	|";
	
	ИмяТаблицыДанных = "ТаблицаДанныхСЗаполненнымиАналитиками";
	
КонецПроцедуры

Функция Подключаемый_ТаблицаИзМенеджера(Запрос, ИмяТаблицы, Порядок = "МинимумНомерПоПорядку, ПорядокРасчетаОперанда") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ * ИЗ &ИмяТаблицы";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	
	Если Порядок <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО 
		|	" + Порядок;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьИсточникВСтруктуруЯчеек(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ИмяТаблицыСИзмерениями)
	
	ОсновныеЭлементы        = ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги           = ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений          = ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений     = ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики          = ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики     = ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик   = ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов           = ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов      = ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстПериодовСоединение = ВспомогательныеДанные.ТекстПериодовСоединение;
	
	ЗапросПакета = 
	"ВЫБРАТЬ 
	|	&ВыбираемыеПоля,
	|	ТаблицаИсточниковИзмерений.ИД_Источника КАК ИД_Источника,
	|	СтруктураЯчеек.ИсключитьДанныеДокумента КАК ИсключитьДанныеДокумента
	|
	|ПОМЕСТИТЬ СтруктураЯчеекСИсточниками
	|
	|ИЗ &ИмяТаблицыСИзмерениями КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсточниковИзмерений
	|
	|ПО СтруктураЯчеек.Строка = ТаблицаИсточниковИзмерений.Строка
	|	И СтруктураЯчеек.Колонка = ТаблицаИсточниковИзмерений.Колонка
	|
	|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
	|	СтруктураЯчеек.ВидЭлемента В
	|		(	
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	&ВыбираемыеПоля,
	|	СтруктураЯчеек.ИД_Источника,
	|	СтруктураЯчеек.ИсключитьДанныеДокумента
	|
	|ИЗ &ИмяТаблицы КАК СтруктураЯчеек
	|
	|ГДЕ (СтруктураЯчеек.ОсновнойЭлемент
	|			И НЕ СтруктураЯчеек.ВидЭлемента В
	|			(	
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
	|			Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
	|			)
	|	)
	|	ИЛИ Не СтруктураЯчеек.ОсновнойЭлемент
	|
	|ИНДЕКСИРОВАТЬ ПО ИД_Источника";
	
	ВыбираемыеПоля = СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстПериодовСоединение, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>", "СтруктураЯчеек")
			+ СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек");
	ВыбираемыеПоля = СокрЛП(ВыбираемыеПоля);
	Если СтрЗаканчиваетсяНа(ВыбираемыеПоля, ",") Тогда
		ВыбираемыеПоля = Сред(ВыбираемыеПоля, 1, СтрДлина(ВыбираемыеПоля) - 1);
	КонецЕсли;
		
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыбираемыеПоля", ВыбираемыеПоля);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыСИзмерениями", ИмяТаблицыСИзмерениями);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицы", ИмяТаблицы);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + ЗапросПакета + ";" + Символы.ПС + Символы.ПС;
	ИмяТаблицы = "СтруктураЯчеекСИсточниками";
	
КонецПроцедуры

Функция ПодготовитьТаблицуЗначенийИзмеренийПоРодителям(ТекстЗапроса, СтруктураЯчеек, ВспомогательныеДанные)
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ПараметрыПрочихСоединений = Новый Структура("Документ, Прочие", Новый Массив, Новый Массив);
	Для Каждого Колонка Из ВспомогательныеДанные.ВсеИзмерения Цикл
		
		Если СтруктураЯчеек.Найти("прочие", "Флаг" + Колонка) <> Неопределено Тогда
			ПараметрыПрочихСоединений.Прочие.Добавить(Колонка);
		КонецЕсли;
		
		Если СтруктураЯчеек.Найти("документ", "Флаг" + Колонка) <> Неопределено Тогда
			ПараметрыПрочихСоединений.Документ.Добавить(Колонка);
		КонецЕсли;
		
		ПропускаемыеКолонки = Новый Массив;
		ПропускаемыеКолонки.Добавить("Организация");
		ПропускаемыеКолонки.Добавить("Подразделение");
		ПропускаемыеКолонки.Добавить("Сценарий");
		ПропускаемыеКолонки.Добавить("Валюта");
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			ПропускаемыеКолонки.Добавить("Аналитика" + Сч);
		КонецЦикла;
		
		Если ПропускаемыеКолонки.Найти(Колонка) = Неопределено Тогда
			Если СтруктураЯчеек.Найти("заполнить", "Флаг" + Колонка) <> Неопределено Тогда
				ПараметрыПрочихСоединений.Документ.Добавить(Колонка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыПрочихСоединений.Прочие.Количество()
		И Не  ПараметрыПрочихСоединений.Документ.Количество() Тогда
		Возврат ПараметрыПрочихСоединений;
	КонецЕсли;
	
	Первый = Истина;
	Для Каждого Измерение Из ПараметрыПрочихСоединений.Прочие Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Родитель" + Измерение + " КАК Родитель, " + Измерение + " КАК Значение
		|" + ?(Первый, "ПОМЕСТИТЬ ТаблицаЗначенийПоРодителям", "") + "
		|
		|ИЗ СтруктураЯчеек
		|
		|ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|
		|" + ?(ПараметрыПрочихСоединений.Документ.Найти("Измерение") <> Неопределено, "
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ СтруктураЯчеек.Родитель" + Измерение + ", ТаблицаДанных." + Измерение + " ИЗ
		|
		| СтруктураЯчеек
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных ПО СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
		|
		| ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.ИД_Источника = ""документ"" И СтруктураЯчеек.Флаг" + Измерение + " = ""документ""
		|
		|", "");
		
		Первый = Ложь;
		
	КонецЦикла;
	
	Если Не Первый Тогда
		ТекстЗапроса = ТекстЗапроса + " ИНДЕКСИРОВАТЬ ПО Родитель
		|;";
	КонецЕсли;
	
	Первый = Истина;
	Для Каждого Измерение Из ПараметрыПрочихСоединений.Документ Цикл
		
		ТекстЗапроса = ТекстЗапроса + ?(Первый, "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Родитель" + Измерение + " КАК Родитель, " + Измерение + " КАК Значение
		|" + ?(Первый, "ПОМЕСТИТЬ ТаблицаЗначенийПоРодителямДокумент", "") + "
		|
		|ИЗ СтруктураЯчеек
		|
		|ГДЕ Не Родитель" + Измерение + " = Значение(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка) И
		|	СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
		|
		|";
		
		Первый = Ложь;
		
	КонецЦикла;
	
	Если Не Первый Тогда
		ТекстЗапроса = ТекстЗапроса + " ИНДЕКСИРОВАТЬ ПО Родитель
		|;";
	КонецЕсли;
	
	Возврат ПараметрыПрочихСоединений;
	
КонецФункции

Функция ПодготовитьСоответствиеВидовАналитикСтатьямИПоказателямБюджета(ВидыАналитик, СтатьиИПоказателиБюджетов = Неопределено)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Новый Соответствие();
	
	СтатьиБюджетов = Неопределено;
	ПоказателиБюджетов = Неопределено;
	НефинансовыеПоказатели = Неопределено;
	
	Если Не СтатьиИПоказателиБюджетов = Неопределено Тогда
		СтатьиИПоказателиБюджетов.Свойство("СтатьиБюджетов", СтатьиБюджетов);
		СтатьиИПоказателиБюджетов.Свойство("ПоказателиБюджетов", ПоказателиБюджетов);
		СтатьиИПоказателиБюджетов.Свойство("НефинансовыеПоказатели", НефинансовыеПоказатели);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ШаблонЗапросаПоСтатьям =
	"ВЫБРАТЬ
		|	СтатьиБюджетов.Ссылка КАК СтатьяБюджетов,
		|	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК ПоказательБюджетов,
		|	ЗНАЧЕНИЕ(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка) КАК НефинансовыйПоказательБюджетов
		|ИЗ
		|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
		|ГДЕ
		|	СтатьиБюджетов.Ссылка В(&СтатьиБюджетов)
		|	И СтатьиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) " 
		+ ?(СтатьиБюджетов = Неопределено, "", " И СтатьиБюджетов.ВидАналитики1 В(&ВидыАналитик)");
	
	ШаблонЗапросаПоПоказателям =
	"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК Поле1,
		|	ПоказателиБюджетов.ВидАналитики1,
		|	ПоказателиБюджетов.Ссылка,
		|	ЗНАЧЕНИЕ(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка) КАК Поле2
		|ИЗ
		|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
		|ГДЕ
		|	ПоказателиБюджетов.Ссылка В(&ПоказателиБюджетов)
		|	И ПоказателиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) "
		+ ?(ПоказателиБюджетов = Неопределено, "", " И ПоказателиБюджетов.ВидАналитики1 В(&ВидыАналитик)");
	
	ШаблонЗапросаПоНФП =
	"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СтатьиБюджетов.ПустаяСсылка) КАК Поле1,
		|	НефинансовыеПоказателиБюджетов.ВидАналитики1,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка) КАК Поле2,
		|	НефинансовыеПоказателиБюджетов.Ссылка
		|ИЗ
		|	Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
		|ГДЕ
		|	НефинансовыеПоказателиБюджетов.Ссылка В(&НефинансовыеПоказателиБюджетов)
		|	И НефинансовыеПоказателиБюджетов.ВидАналитики1 <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка) "
		+ ?(НефинансовыеПоказатели = Неопределено, "", " И НефинансовыеПоказателиБюджетов.ВидАналитики1 В(&ВидыАналитик)");
		
	ТекстЗапроса = "";
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоСтатьям, "ВидАналитики1", "ВидАналитики" + Сч) + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоПоказателям, "ВидАналитики1", "ВидАналитики" + Сч) + " ОБЪЕДИНИТЬ ВСЕ ";
	КонецЦикла;
	
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапросаПоНФП, "ВидАналитики1", "ВидАналитики" + Сч)
			+ ?(Сч = МаксимальноеКоличествоАналитик, "", " ОБЪЕДИНИТЬ ВСЕ ");
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("СтатьиБюджетов", СтатьиБюджетов);
	Запрос.УстановитьПараметр("ПоказателиБюджетов", ПоказателиБюджетов);
	Запрос.УстановитьПараметр("НефинансовыеПоказателиБюджетов", НефинансовыеПоказатели);
	Запрос.УстановитьПараметр("ВидыАналитик" , ВидыАналитик);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ВидАналитики Из ВидыАналитик Цикл
		МассивСтатейБюджетов = Новый Массив();
		МассивПоказателейБюджетов = Новый Массив();
		МассивНФП = Новый Массив();
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ВидАналитики",ВидАналитики);
		Строки = Результат.НайтиСтроки(ПараметрыОтбора);
		Если Строки.Количество() > 0 Тогда
			Для Каждого Стр Из Строки Цикл
				Если ЗначениеЗаполнено(Стр.СтатьяБюджетов) Тогда
					МассивСтатейБюджетов.Добавить(Стр.СтатьяБюджетов);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.ПоказательБюджетов) Тогда
					МассивПоказателейБюджетов.Добавить(Стр.ПоказательБюджетов);
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.НефинансовыйПоказательБюджетов) Тогда
					МассивНФП.Добавить(Стр.НефинансовыйПоказательБюджетов);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияСтатейПоказателей = Новый Структура();
		ЗначенияСтатейПоказателей.Вставить("СтатьиБюджетов", МассивСтатейБюджетов);
		ЗначенияСтатейПоказателей.Вставить("ПоказателиБюджетов", МассивПоказателейБюджетов);
		ЗначенияСтатейПоказателей.Вставить("НефинансовыеПоказатели", МассивПоказателейБюджетов);
		
		СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Вставить(ВидАналитики, ЗначенияСтатейПоказателей);
	КонецЦикла;
	
	Возврат СоответствиеВидовАналитикСтатьямИПоказателямБюджета;
	
КонецФункции

Процедура ВыполнитьСоединениеСтруктурыСДанными(ТекстЗапроса, ОписаниеОтчета, ВспомогательныеДанные, ИмяТаблицы, ВспомогательныеПараметры, РежимФормирования)
	
	ИсточникиЗначенийИзмерений = ВспомогательныеПараметры.ИсточникиЗначенийИзмерений;
	ИмяТаблицыДанных = ВспомогательныеПараметры.ИмяТаблицыДанных;
	ПоляИсточников = ВспомогательныеПараметры.ПоляИсточников;
	ПараметрыПрочихСоединений = ВспомогательныеПараметры.ПараметрыПрочихСоединений;
	СоответствиеВидовАналитикСтатьямИПоказателямБюджета = ВспомогательныеПараметры.СоответствиеВидовАналитикСтатьямИПоказателямБюджета;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//%ТекстИндексов%", "ИНДЕКСИРОВАТЬ ПО ИД_Источника");
	ТекстПериодов = ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов = ВспомогательныеДанные.ТекстФлагиПериодов;
	
	// Подготовка структуры ячеек с данными
	ЗапросПакета =
	"ВЫБРАТЬ 
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ КАК СтатьяБюджетов,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ КАК ПоказательБюджетов,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.НефинансовыйПоказатель,
	|	СтруктураЯчеек.РедактируемоеЗначение,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.РасчетЗаполнение,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда,
	|	&ВыборкаПолей
	|ИЗ
	|	&ИмяТаблицыСтруктураЯчеек КАК СтруктураЯчеек
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	#ИмяТаблицыДанных КАК ТаблицаДанных
	|
	|	ПО СтруктураЯчеек.ИД_Источника = ТаблицаДанных.ИД_Источника
	|	И ВЫБОР
	|		КОГДА СтруктураЯчеек.ИсключитьДанныеДокумента
	|			ТОГДА НЕ ТаблицаДанных.ДанныеДокумента
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И &УсловияСоединенияТаблиц
	|
	|ГДЕ
	|	&ВыражениеОтбора
	|";
	
	ТекстВыборкиПолей = "";
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ 	"	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
						|			ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения)
						|		) > 1 ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ 
						|		МАКСИМУМ(ЕСТЬNULL(ТаблицаДанных.ЕдиницаИзмерения, СтруктураЯчеек.ЕдиницаИзмерения))
						|	КОНЕЦ КАК ЕдиницаИзмерения";
		ИначеЕсли Измерение = "Валюта" Тогда
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ 	"	ВЫБОР 
						|	КОГДА СтруктураЯчеек.Валюта = Значение(Справочник.Валюты.ПустаяСсылка) И
						|		СтруктураЯчеек.РасчетЗаполнение <> ""итог"" И
						|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
						|			ВЫБОР 
						|				КОГДА ЕстьNULL(ТаблицаДанных.ИД_Источника, """") = ""документ""
						|						ИЛИ (СтруктураЯчеек.ФлагВалюта = ""заполнить"" И НЕ ТаблицаДанных.Валюта ЕСТЬ NULL)
						|				ТОГДА ТаблицаДанных.Валюта 
						|			КОНЕЦ
						|		) = 1 ТОГДА 
						|			МАКСИМУМ(ВЫБОР 
						|				КОГДА ЕстьNULL(ТаблицаДанных.ИД_Источника, """") = ""документ""
						|						ИЛИ (СтруктураЯчеек.ФлагВалюта = ""заполнить"" И НЕ ТаблицаДанных.Валюта ЕСТЬ NULL)
						|				ТОГДА ТаблицаДанных.Валюта 
						|			КОНЕЦ)
						|	ИНАЧЕ
						|		СтруктураЯчеек.Валюта
						|	КОНЕЦ КАК Валюта";
		Иначе
			ТекстШаблонаИзмерение = 
			"	ВЫБОР КОГДА (СтруктураЯчеек.Флаг%1 = ""заполнить"")
			|			И НЕ ТаблицаДанных.%1 ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных.%1
			|	ИНАЧЕ
			|		СтруктураЯчеек.%1
			|	КОНЕЦ КАК %1";
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблонаИзмерение, Измерение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстВыборкиПолей = СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек") + Символы.ПС + ТекстВыборкиПолей;
	
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ТекстШаблонаИзмерение =
		"	ВЫБОР КОГДА (СтруктураЯчеек.Флаг%1 = ""заполнить""
		|		ИЛИ СтруктураЯчеек.Флаг%1 = ""документ"")
		|			И НЕ ТаблицаДанных.%1 ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных.%1
		|	ИНАЧЕ
		|		СтруктураЯчеек.%1
		|	КОНЕЦ КАК %1";
		ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблонаИзмерение, ИмяПоля);
	КонецЦикла;
	
	Для Каждого ПолеРесурса Из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		Если СтрНайти(ПолеРесурса.ИмяРесурса, "Сумма") Тогда
			ТекстШаблонаРесурса =
			"	СУММА(ЕстьNULL(ТаблицаДанных.%1, 0)) КАК %1";
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблонаРесурса, ПолеРесурса.ИмяРесурса);
		ИначеЕсли СтрНайти(ПолеРесурса.ИмяРесурса, "Количество") Тогда
			ТекстШаблонаРесурса =
			"	ВЫБОР КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтруктураЯчеек.ЕдиницаИзмерения) = 1 ТОГДА
			|		СУММА(ЕстьNULL(ТаблицаДанных.%1, 0)) ИНАЧЕ 0 КОНЕЦ КАК %1";
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблонаРесурса, ПолеРесурса.ИмяРесурса);
		ИначеЕсли СтрНайти(ПолеРесурса.ИмяРесурса, "ЗначениеПоказателя") Тогда
			ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
					+ 	"	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент ТОГДА
						|		ВЫБОР
						|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДанных.ИндексНФП) <= 1 ТОГДА
						|				МАКСИМУМ(ЕстьNULL(ТаблицаДанных.ЗначениеПоказателя, 0))
						|			ИНАЧЕ
						|				""#Знач"" 
						|		КОНЕЦ
						|	ИНАЧЕ
						|		МАКСИМУМ(ЕстьNULL(ТаблицаДанных.ЗначениеПоказателя, 0))
						|	КОНЕЦ КАК ЗначениеПоказателя";
		КонецЕсли;
	КонецЦикла;
	
	ТекстВыборкиПолей = ТекстВыборкиПолей + ?(ТекстВыборкиПолей = "", "", "," + " " + Символы.ПС)
		+ 	"	МИНИМУМ(ТаблицаДанных.НомерПоПорядку) КАК МинимумНомерПоПорядку,
			|	МАКСИМУМ(ТаблицаДанных.Примечание),
			|	Ложь КАК РассчитанСумма,
			|	Ложь КАК РассчитанСуммаВал,
			|	Ложь КАК РассчитанКоличество,
			|	Ложь КАК РассчитанЗначение,
			|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаДанных.ИД_Источника ЕСТЬ NULL ТОГДА 
			|		ЛОЖЬ
			|	ИНАЧЕ
			|		ИСТИНА
			|	КОНЕЦ) КАК СтрокаДанныхСопоставлена";
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыборкаПолей", ТекстВыборкиПолей);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ИмяТаблицыСтруктураЯчеек", ИмяТаблицы);
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "#ИмяТаблицыДанных", ИмяТаблицыДанных);
	
	УсловияСоединенияТаблиц = "";
	
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		
		СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность);
		
		УсловияСоединенияТаблиц = УсловияСоединенияТаблиц + ?(УсловияСоединенияТаблиц = "", "", " " + Символы.ПС + Символы.ПС + "И" + " ")
			+ СтрШаблон(
				"	(СтруктураЯчеек.%1 = ""отобрать""
				|		И СтруктураЯчеек.%2 = ТаблицаДанных.%3
				|		ИЛИ
				|		СтруктураЯчеек.%1 <> ""отобрать""
				|			И ТаблицаДанных.%3 = НЕОПРЕДЕЛЕНО)",
				СтрокиПериода.ФлагПериод, СтрокиПериода.ПериодСоединение, СтрокиПериода.Период);
	КонецЦикла;
	
	УсловияСоединенияТаблиц = УсловияСоединенияТаблиц + ?(УсловияСоединенияТаблиц = "", "", " " + Символы.ПС + Символы.ПС + "И" + " ")
		+ 	"(НЕ СтруктураЯчеек.ФлагСтатьяБюджетов = ""отобрать""
			|		ИЛИ СтруктураЯчеек.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов)
			|
			|	И (НЕ СтруктураЯчеек.ФлагПоказательБюджетов = ""отобрать""
			|		ИЛИ СтруктураЯчеек.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов)
			|	
			|	И (НЕ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
			|		ИЛИ СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель)
			|
			|	И (НЕ СтруктураЯчеек.ФлагРедактируемоеЗначение = ""отобрать""
			|		ИЛИ СтруктураЯчеек.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение)";
		
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		// НФП могут не учитываться по организациям, подразделениям, сценариям
		Если Измерение = "Сценарий" 
			И РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
			ШаблонСтрокиСоединения =
			"(СтруктураЯчеек.Флаг%1 = ""заполнить""
			|		ИЛИ СтруктураЯчеек.Флаг%1 = ""отобрать"" И (СтруктураЯчеек.%1 = ТаблицаДанных.%1 ИЛИ НЕ ТаблицаДанных.НФП_ОтборСценарий))";
			
			УсловияСоединенияТаблиц = УсловияСоединенияТаблиц + ?(УсловияСоединенияТаблиц = "", "", " " + Символы.ПС + Символы.ПС + "И" + " ")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСтрокиСоединения,
					Измерение);
		Иначе
			Если Измерение = "Организация" Тогда
				ШаблонСтрокиСоединения =
				"(НЕ СтруктураЯчеек.Флаг%1 = ""отобрать""
				|		ИЛИ (СтруктураЯчеек.%1 = ТаблицаДанных.%1 ИЛИ НЕ ТаблицаДанных.НФП_ОтборОрганизация))";
			ИначеЕсли Измерение = "Подразделение" Тогда
				ШаблонСтрокиСоединения =
				"(НЕ СтруктураЯчеек.Флаг%1 = ""отобрать""
				|		ИЛИ (СтруктураЯчеек.%1 = ТаблицаДанных.%1 ИЛИ НЕ ТаблицаДанных.НФП_ОтборПодразделение))";
			Иначе
				ШаблонСтрокиСоединения =
				"(НЕ СтруктураЯчеек.Флаг%1 = ""отобрать""
				|		ИЛИ СтруктураЯчеек.%1 = ТаблицаДанных.%1)";
			КонецЕсли;
			
			УсловияСоединенияТаблиц = УсловияСоединенияТаблиц + ?(УсловияСоединенияТаблиц = "", "", " " + Символы.ПС + Символы.ПС + "И" + " ")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСтрокиСоединения,
					Измерение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		
		СтрокаСоединенияПоИзмерению = "";
		Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
			ШаблонСтрокиСоединения =
			"	
			|	И ( (СтруктураЯчеек.Флаг%1 = ""заполнить"" 
			|		И НЕ ТаблицаДанных.%1 В 
			|							(ВЫБРАТЬ ТаблицаЗначенийПоРодителямДокумент.Значение ИЗ ТаблицаЗначенийПоРодителямДокумент
			|							ГДЕ ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель%1)
			|		)
			|";
			
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСтрокиСоединения,
					ИмяПоля);
		Иначе
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|	И (	СтруктураЯчеек.Флаг%1 = ""заполнить""
					|",
					ИмяПоля);
		КонецЕсли;
		
		Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|		ИЛИ	(СтруктураЯчеек.Флаг%1 = ""документ""
					|				И НЕ ТаблицаДанных.%1 В 
					|							(ВЫБРАТЬ ТаблицаЗначенийПоРодителямДокумент.Значение ИЗ ТаблицаЗначенийПоРодителямДокумент
					|							ГДЕ ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель%1)
					|	)
					|",
					ИмяПоля);
		КонецЕсли;
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|	ИЛИ (СтруктураЯчеек.Флаг%1 = ""отобрать"" И
					|				(СтруктураЯчеек.%1 = ТаблицаДанных.%1
					|					ИЛИ ((СтруктураЯчеек.РасчетЗаполнение = ""Заполнение""
					|						ИЛИ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
					|						И СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель)
					|						И ТаблицаДанных.%1 = НЕОПРЕДЕЛЕНО
					|						И НЕ ТаблицаДанных.СтатьяБюджетов В (&СтатьиБюджетовПо_%1)
					|						И НЕ ТаблицаДанных.ПоказательБюджетов В (&ПоказателиБюджетовПо_%1)
					|						И НЕ ТаблицаДанных.НефинансовыйПоказатель В (&НФППо_%1))))
					|",
					ИмяПоля);
		Иначе
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|	ИЛИ (СтруктураЯчеек.Флаг%1 = ""отобрать"" И
					|				(СтруктураЯчеек.%1 = ТаблицаДанных.%1
					|				ИЛИ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
					|				И СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
					|				И ТаблицаДанных.%1 = НЕОПРЕДЕЛЕНО))
					|",
					ИмяПоля);
		КонецЕсли;
		
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение 
			И Не СоответствиеВидовАналитикСтатьямИПоказателямБюджета = Неопределено Тогда
			
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("СтатьиБюджетовПо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["СтатьиБюджетов"]);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("ПоказателиБюджетовПо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["ПоказателиБюджетов"]);
			ВспомогательныеДанные.ПараметрыЗапроса.Вставить("НФППо_" + ИмяПоля, 
				СоответствиеВидовАналитикСтатьямИПоказателямБюджета.Получить(Измерение)["НефинансовыеПоказатели"]);
		КонецЕсли;
		Если ПараметрыПрочихСоединений.Прочие.Найти(ИмяПоля) <> Неопределено Тогда
			СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|		ИЛИ ( СтруктураЯчеек.Флаг%1 = ""прочие"" 
					|				И НЕ ТаблицаДанных.%1 В 
					|							(ВЫБРАТЬ ТаблицаЗначенийПоРодителям.Значение 
					|							 ИЗ ТаблицаЗначенийПоРодителям 
					|							 ГДЕ ТаблицаЗначенийПоРодителям.Родитель = СтруктураЯчеек.Родитель%1)
					|			)
					|",
					ИмяПоля);
		КонецЕсли;
		СтрокаСоединенияПоИзмерению = СтрокаСоединенияПоИзмерению
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"
					|		ИЛИ СтруктураЯчеек.Флаг%1 = """")
					|",
					ИмяПоля);
					
		УсловияСоединенияТаблиц = УсловияСоединенияТаблиц + СтрокаСоединенияПоИзмерению;
	КонецЦикла;
	
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&УсловияСоединенияТаблиц", УсловияСоединенияТаблиц);
	ВыражениеОтбора = "";
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		МассивСтрокДобавляемыхУсловий = Новый Массив;
		ШаблонТекстаУсловийНаСкрытиеПустыхАналитик = " 
		|	ВЫБОР КОГДА СтруктураЯчеек.ОсновнойЭлемент И ТаблицаДанных.ИД_Источника ЕСТЬ NULL 
		|	ТОГДА %ДобавляемыеУсловия%
		|	ИНАЧЕ ИСТИНА 
		|	КОНЕЦ";
		
		Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			ДобавляемоеУсловие = "(НЕ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить"" ИЛИ СтруктураЯчеек." + ИмяПоля + " <> %ПустоеЗначение%)";
				
			ПустоеЗначениеСтрока = БюджетированиеСервер.ВыражениеПустогоЗначенияАналитики();
			
			ДобавляемоеУсловие = СтрЗаменить(ДобавляемоеУсловие, "%ПустоеЗначение%", ПустоеЗначениеСтрока);
			МассивСтрокДобавляемыхУсловий.Добавить(ДобавляемоеУсловие);
		КонецЦикла;
		
		Если МассивСтрокДобавляемыхУсловий.Количество() > 0 Тогда
			СтрокаДобавляемыхУсловий = СтрСоединить(МассивСтрокДобавляемыхУсловий, Символы.ПС + "И ");
			СтрокаДобавляемыхУсловий = "(" + СтрокаДобавляемыхУсловий + ") ИЛИ (&РежимФормированияОтчет И &ПустаяТаблицаДанных)";
			
			ВыражениеОтбора = СтрЗаменить(ШаблонТекстаУсловийНаСкрытиеПустыхАналитик, "%ДобавляемыеУсловия%", СтрокаДобавляемыхУсловий);
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ВыражениеОтбора) Тогда
		ВыражениеОтбора = "ИСТИНА";
	КонецЕсли;
	ЗапросПакета = СтрЗаменить(ЗапросПакета, "&ВыражениеОтбора", ВыражениеОтбора);
	
	
	ЗапросПакета = ЗапросПакета + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагСтатьяБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.СтатьяБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.СтатьяБюджетов
	|	КОНЕЦ,
	|	ВЫБОР КОГДА СтруктураЯчеек.ФлагПоказательБюджетов = ""заполнить"" ТОГДА
	|		ТаблицаДанных.ПоказательБюджетов
	|	ИНАЧЕ
	|		СтруктураЯчеек.ПоказательБюджетов
	|	КОНЕЦ,
	|	СтруктураЯчеек.НефинансовыйПоказатель,
	|	СтруктураЯчеек.РедактируемоеЗначение,
	|	СтруктураЯчеек.ОсновнойЭлемент,
	|	СтруктураЯчеек.ИндексСтроки,
	|	СтруктураЯчеек.ВидЭлемента,
	|	СтруктураЯчеек.ВидОперанда,
	|	СтруктураЯчеек.РасчетЗаполнение,
	|	СтруктураЯчеек.Строка,
	|	СтруктураЯчеек.Колонка,
	|	СтруктураЯчеек.ПорядокРасчетаОперанда," + ?(ПоляИсточников.Найти("ЗначениеПоказателя") <> Неопределено, "
	|	ВЫБОР КОГДА НЕ СтруктураЯчеек.ОсновнойЭлемент
	|		И СтруктураЯчеек.ВидОперанда = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель) ТОГДА
	|		ТаблицаДанных.ИндексНФП
	|	КОНЕЦ,", "");
	
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		ИначеЕсли Измерение = "Валюта" Тогда
			ЗапросПакета = ЗапросПакета + "СтруктураЯчеек.Валюта, ";
		Иначе
			ЗапросПакета = ЗапросПакета + "
			|	ВЫБОР КОГДА СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
			|		И НЕ ТаблицаДанных." + Измерение + " ЕСТЬ NULL ТОГДА
			|		ТаблицаДанных." + Измерение + "
			|	ИНАЧЕ
			|		СтруктураЯчеек." + Измерение + "
			|	КОНЕЦ,
			|";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ЗапросПакета = ЗапросПакета + "
		|	ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
		|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
		|		И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
		|		ТаблицаДанных." + ИмяПоля + "
		|	ИНАЧЕ
		|		СтруктураЯчеек." + ИмяПоля + "
		|	КОНЕЦ,
		|";
	КонецЦикла;
	
	Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		ЗапросПакета = ЗапросПакета + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"	СтруктураЯчеек.%1,",
				ИмяПериода);
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + ЗапросПакета;
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	
	Если ИсточникиЗначенийИзмерений.Количество() Тогда
		ТекстЗапроса = СхемыЗапросов.УстановитьПомещениеВоВременнуюТаблицу(ТекстЗапроса, "СтруктураЯчеекСДанными");
	КонецЕсли;
	
	Если ИсточникиЗначенийИзмерений.Количество() Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		| ИНДЕКСИРОВАТЬ ПО Строка, Колонка" + ?(ВспомогательныеДанные.ВсеИзмерения.Количество(), ", ", "") + 
			СтрСоединить(ВспомогательныеДанные.ВсеИзмерения, ",");
			
		ИмяТаблицы = "СтруктураЯчеекСДанными";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО ИндексСтроки";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьФильтрИзмеренийПоИсточникамЗначений(ТекстЗапроса, ИсточникиЗначенийИзмерений, ИмяТаблицы, ИмяТаблицыДанных)
	
	Если Не ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстФинальногоЗапроса = 
	"ВЫБРАТЬ * ИЗ &ИмяТаблицыИсточника КАК Таблица
	| ГДЕ Таблица.ОсновнойЭлемент = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ * ИЗ &ИмяТаблицыИсточника КАК Таблица
	|ГДЕ Таблица.ОсновнойЭлемент = ИСТИНА
	|	И &ТекстУсловияФинальнойТаблицы
	|";
	ТекстФинальногоЗапроса = СтрЗаменить(ТекстФинальногоЗапроса, "&ИмяТаблицыИсточника", ИмяТаблицы);
	ТекстУсловияФинальнойТаблицы = "(НЕ СтрокаДанныхСопоставлена ИЛИ РедактируемоеЗначение <> """" ИЛИ (
	|		ИСТИНА";
	
	МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсточникиЗначенийИзмерений.ВыгрузитьКолонку("Измерение"));
	ТекстыФильтровПоИзмерениям = Новый Массив;
	ТекстОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	Для Каждого Измерение Из МассивИзмерений Цикл
		
		Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", Измерение)).Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстФильтраПоИзмерениям = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаИсточников.Строка КАК Строка,
		|	ТаблицаИсточников.Колонка КАК Колонка,
		|	&КолонкаИзмерения КАК Значение
		|ИЗ
		|	ТаблицаИсточниковИзмеренийСИменемИзмерения КАК ТаблицаИсточников
		|ЛЕВОЕ СОЕДИНЕНИЕ #ИмяТаблицыДанных КАК ТаблицаДанных
		|ПО
		|	ТаблицаИсточников.ИД_Источника = ТаблицаДанных.ИД_Источника
		|	И (ТаблицаИсточников.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов
		|		ИЛИ (ВЫРАЗИТЬ(ТаблицаДанных.ПоказательБюджетов КАК Справочник.ПоказателиБюджетов).ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Целевой)
		|			И ТаблицаИсточников.СтатьяБюджетов = ТаблицаДанных.ПоказательБюджетов))
		|	И (ТаблицаИсточников.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов
		|		ИЛИ ТаблицаИсточников.ПоказательБюджетов <> ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
		|	И ТаблицаИсточников.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
		|	И ТаблицаИсточников.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение
		|
		|ГДЕ
		|	&УсловиеПоИзерению";
		УсловиеПоИзерению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ТаблицаИсточников.Измерение = ""%1""",
			Измерение);
		ТекстФильтраПоИзмерениям = СтрЗаменить(ТекстФильтраПоИзмерениям, "&КолонкаИзмерения", "ТаблицаДанных." + Измерение);
		ТекстФильтраПоИзмерениям = СтрЗаменить(ТекстФильтраПоИзмерениям, "#ИмяТаблицыДанных", ИмяТаблицыДанных);
		ТекстФильтраПоИзмерениям = СтрЗаменить(ТекстФильтраПоИзмерениям, "&УсловиеПоИзерению", УсловиеПоИзерению);
		
		ТекстыФильтровПоИзмерениям.Добавить(ТекстФильтраПоИзмерениям);
		
		
		ТекстУсловияФинальнойТаблицы = ТекстУсловияФинальнойТаблицы + " "
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("И (
						|НЕ (Строка, Колонка, """ + Измерение + """" + ") В (ВЫБРАТЬ Строка, Колонка, Измерение ИЗ ТаблицаИсточниковИзмеренийСИменемИзмерения)
						|ИЛИ (Строка, Колонка, " + Измерение + ") В (ВЫБРАТЬ Строка, Колонка, Значение ИЗ ТаблицаФильтраИзмерений)
						| )",
						Измерение)
				+ " ";
		
	КонецЦикла;
	
	ТекстФильтра = СтрСоединить(ТекстыФильтровПоИзмерениям, ТекстОбъединить);
	Если ТекстФильтра <> "" Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстФильтра);
		Пакет = СхемаЗапроса.ПакетЗапросов.Получить(0);
		Пакет.ТаблицаДляПомещения = "ТаблицаФильтраИзмерений";
		Пакет.Индекс.Добавить("Строка");
		Пакет.Индекс.Добавить("Колонка");
		Пакет.Индекс.Добавить("Значение");
		
		ТекстФильтра = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		ТекстЗапроса = ТекстЗапроса + ";
		|
		|" + ТекстФильтра;
	КонецЕсли;
	
	ТекстФинальногоЗапроса = СтрЗаменить(ТекстФинальногоЗапроса, "&ТекстУсловияФинальнойТаблицы", ТекстУсловияФинальнойТаблицы);
	
	ТекстЗапроса = ТекстЗапроса + ";
		|
		|" + ТекстФинальногоЗапроса + ") )";
	
КонецПроцедуры

// Возвращает таблицу данных ячеек бюджета.
// 
// Параметры:
// 	ОписаниеОтчета - см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
// 	ПараметрыДанных - Структура - Описание:
// 	*Организация - СправочникСсылка.Организации -
// 	*Подразделение - СправочникСсылка.СтруктураПредприятия -
// 	*Валюта - СправочникСсылка.Валюты -
// 	*Сценарий - СправочникСсылка.Сценарии -
// 	*Документ - ДокументСсылка.ЭкземплярБюджета -
// 	*АналитикаСтатейБюджетов - ТаблицаЗначений -
// 	*ОборотыПоСтатьямБюджетов - ТаблицаЗначений -
// 	*АналитикаЗначений - ТаблицаЗначений -
// 	*ДатаАктуальности - Дата -
// 	*ВалютаСценария - СправочникСсылка.Валюты -
// 	*Статус - СписокЗначений из ПеречислениеСсылка.СтатусыПланов -
// 	*ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	*ПараметрыВыводаВидаБюджета - Структура -
// 	*ДанныеЯчеек - ТаблицаЗначений -
// 	*Ключ_ГУИД - Произвольный -
// 	*ДополнительныеФильтрыПоАналитикам - Структура -
// 	*ИспользоватьДляВводаПлана - Булево -
// 	*Расшифровка - Неопределено, Соответствие -
// 	*КэшПараметровСтатей - Неопределено, Соответствие -
// 	*РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов -
// 	НастройкиСтруктурыЯчеек - см. БюджетнаяОтчетностьРасчетКэшаСервер.ОписаниеОтчета
// 	ДанныеИсточников - ТаблицаЗначений - Плановые и фактические данные, а также данные, введенные в текущем документе:
// 	*СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - Статья бюджетов или целевой показатель.
// 	*ПоказательБюджетов - СправочникСсылка.ПоказателиБюджетов - Показатель бюджетов (расчетный или целевой).
// 	*НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель.
// 	*РедактируемоеЗначение - Строка - Имя ячейки редактируемого значения.
// 	*ДанныеДокумента - Булево - Истина, если это строки, введенные в текущем документе.
// 	РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - Описание
// 	КэшДанных - Неопределено - Описание
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит в том числе:
// 		*Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 		*Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 		*ИндексСтроки - Число - Индекс строки.
// 		*СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - Статья бюджетов или целевой показатель.
// 		*ПоказательБюджетов - СправочникСсылка.ПоказателиБюджетов - Показатель бюджетов (расчетный или целевой).
// 		*НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель.
// 		*РедактируемоеЗначение - Строка - Имя ячейки редактируемого значения.
// 		*ОсновнойЭлемент - Булево - Если истина, то выводится в бюджет, если ложь - то служит для расчета значений в основных ячейках.
// 		*ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента.
// 		*РасчетЗаполнение - Строка - Вариант расчета / заполнения ячейки.
// 		*ВидОперанда - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид операнда.
// 		*ПорядокРасчетаОперанда - Число - порядок расчета операнда.
// 		*МинимумНомерПоПорядку - Число - минимальный номер по порядку.
// 		*Примечание - Строка - Примечание.
// 		*Период - Дата - Период данных ячейки.
// 		*Валюта - СправочникСсылка.Валюты - Валюта суммовых значений.
// 		*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - Единица измерения количественных значений.
// 		*Количество - Число - Количество.
// 		*КоличествоОборот - Число - Количество оборот.
// 		*Сумма - Число - Сумма.
// 		*СуммаОборот - Число - Сумма оборот.
// 		*СуммаВал - Число - Сумма валютная.
// 		*СуммаВалОборот - Число - Сумма валютная оборот.
// 		*Значение - Число - Значение нефинансового показателя.
// 		*ИмяОбластиКоличество - Строка - Имя области в табличном документе.
// 		*ИмяОбластиСумма - Строка - Имя области в табличном документе.
// 		*РассчитанКоличество - Булево - флаг расчета количества по формуле.
// 		*РассчитанСумма - Булево - флаг расчета суммы по формуле.
// 		*РассчитанЗначение - Булево - флаг расчета значения для нефинансового показателя по формуле.
// 		*СтрокаДанныхСопоставлена - Булево - Флаг сопоставления строки таблицы и строки табличного документа бюджета.
//
Функция ДанныеЯчеек(ОписаниеОтчета,
					ПараметрыДанных,
					НастройкиСтруктурыЯчеек,
					ДанныеИсточников,
					РежимФормирования,
					КэшДанных) Экспорт
	
	НачалоПериода = ПараметрыДанных.НачалоПериода;
	КонецПериода = ПараметрыДанных.КонецПериода;
	ГраницаФактДанных = ПараметрыДанных.ГраницаФактДанных;
	
	ВспомогательныеДанные = ВспомогательныеДанныеРасчетаДанныхЯчеек(ПараметрыДанных,
			ОписаниеОтчета,
			НастройкиСтруктурыЯчеек,
			КэшДанных,
			РежимФормирования);
	
	ИсточникиЗначенийИзмерений = НастройкиСтруктурыЯчеек.ИсточникиЗначенийИзмерений;
	СтруктураЯчеек = НастройкиСтруктурыЯчеек.СтруктураЯчеек; // ТаблицаЗначений -
	ТаблицаПериодов = ВспомогательныеДанные.ТаблицаПериодов;
	ПараметрыЗапроса = ВспомогательныеДанные.ПараметрыЗапроса;
	ТекстЗапроса = ВспомогательныеДанные.ТекстЗапроса;
	
	Запрос = Новый Запрос();
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если СтруктураЯчеек.Колонки.Найти("ИсключитьДанныеВводимогоДокументаПриРасчете") = Неопределено Тогда
		СтруктураЯчеек.Колонки.Добавить("ИсключитьДанныеВводимогоДокументаПриРасчете", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ДанныеИсточников.Колонки.Найти("ДанныеДокумента") = Неопределено Тогда
		ДанныеИсточников.Колонки.Добавить("ДанныеДокумента", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек);
	Запрос.УстановитьПараметр("ТаблицаДанных", ДанныеИсточников);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("ТаблицаПоИзмерениям", ИсточникиЗначенийИзмерений);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", ГраницаФактДанных);
	Запрос.УстановитьПараметр("РежимФормированияОтчет", РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	Запрос.УстановитьПараметр("ПустаяТаблицаДанных", ДанныеИсточников.Количество() = 0);
	Если ПараметрыДанных.Свойство("СтрокиОснования") Тогда
		Запрос.УстановитьПараметр("СтрокиОснования", ПараметрыДанных.СтрокиОснования);
	КонецЕсли;
	Для Каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Таблица = РезультатЗапроса.Выгрузить();
	
	Таблица.Колонки.Добавить("Сумма", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	Таблица.Колонки.Добавить("СуммаВал", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	Таблица.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Таблица.Колонки.Добавить("Значение");
	
	Таблица.Колонки.Добавить("ИмяОбластиСумма");
	Таблица.Колонки.Добавить("ИмяОбластиКоличество");
	Таблица.Колонки.Добавить("ИмяОбластиЗначение");
	
	Таблица.Колонки.Добавить("ИмяОбластиСуммаИерархия");
	Таблица.Колонки.Добавить("ИмяОбластиКоличествоИерархия");
	Таблица.Колонки.Добавить("ИмяОбластиЗначениеИерархия");
	Таблица.Колонки.Добавить("ВыводИерархии", Новый ОписаниеТипов("Булево"));
	
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент, ВидОперанда");
	Таблица.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	Таблица.Сортировать("Строка, Колонка, ОсновнойЭлемент, ВидОперанда, ИндексСтроки");
	
	Таблица.Колонки.Добавить("ОтборЯчейки");
	
	Для Каждого Индекс Из НастройкиСтруктурыЯчеек.ИндексыСтруктурыЯчеек Цикл
		Таблица.Индексы.Добавить(Индекс + ", Строка, Колонка, ОсновнойЭлемент");
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область ВыводДанныхВОтчет

Функция ПлановыйКурсПоТаблицеКурсов(ТаблицаКурсов, Валюта, Период, Сценарий)
	
	Если Период = Неопределено Тогда
		СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
	Иначе
		СтруктураПоиска = Новый Структура("Валюта, Сценарий, Период", Валюта, Сценарий, Период);
	КонецЕсли;
	
	Курсы = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
	
	Если Не Курсы.Количество() И Период = Неопределено Тогда
		Возврат 0;
	ИначеЕсли Не Курсы.Количество() Тогда
		
		СтруктураПоиска = Новый Структура("Валюта, Сценарий", Валюта, Сценарий);
		НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
		
		Если Не НайденныеСтроки.Количество() Тогда
			Возврат 0;
		КонецЕсли;
		
		Для Сч = 1 По НайденныеСтроки.Количество() Цикл
			ИндексСтроки = НайденныеСтроки.Количество() - Сч;
			Если НайденныеСтроки[ИндексСтроки].Период < Период Тогда
				Возврат НайденныеСтроки[ИндексСтроки].Курс;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Возврат Курсы[0].Курс;
	КонецЕсли;
	
КонецФункции

Функция Подключаемый_ПересчитатьПоКурсу(Сумма, Период, ВалютаХранения, Сценарий,
											КэшПлановыхКурсов,
											КэшЗначенийАналитик,
											ЗначениеАналитики,
											АдресВАналитике) Экспорт
	
	Валюта = Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик, ЗначениеАналитики, АдресВАналитике, ВалютаХранения);
	
	Если Валюта = ВалютаХранения Тогда
		Возврат Сумма;
	КонецЕсли;
	
	КурсВалютыХранения = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, ВалютаХранения, Период, Сценарий);
	КурсВалюты = ПлановыйКурсПоТаблицеКурсов(КэшПлановыхКурсов, Валюта, Период, Сценарий);
	
	Если КурсВалюты = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Сумма * КурсВалютыХранения / КурсВалюты;
	
КонецФункции

Функция Подключаемый_ЗначениеИзАналитики(КэшЗначенийАналитик,
						ЗначениеАналитики,
						АдресВАналитике,
						ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначениеАналитики)
		ИЛИ ТипЗнч(ЗначениеАналитики) = Тип("Строка") Тогда
		
		Возврат ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
	СтруктураРеквизитов = КэшЗначенийАналитик[ЗначениеАналитики];
	Если СтруктураРеквизитов = Неопределено Тогда
		Попытка
			// Если изменят порядок следования или состав аналитик в статье
			// в данных может быть ссылка на элемент типа справочника
			// не имеющий заданного поля.
			ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		Исключение
			
			Возврат ЗначениеПоУмолчанию;
			
		КонецПопытки;
		СтруктураРеквизитов = Новый Соответствие;
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
		КэшЗначенийАналитик.Вставить(ЗначениеАналитики, СтруктураРеквизитов);
		Возврат ЗначениеРезультат;
	КонецЕсли;
	
	ЗначениеРезультат = СтруктураРеквизитов[АдресВАналитике];
	Если ЗначениеРезультат = Неопределено Тогда
		ЗначениеРезультат = ЗначениеАналитики[АдресВАналитике];
		СтруктураРеквизитов.Вставить(АдресВАналитике, ЗначениеРезультат);
	КонецЕсли;
	
	Возврат ЗначениеРезультат;
	
КонецФункции

Процедура УстановитьПараметрыВНаименованииДляПечати(НаименованиеДляПечати, ЗначенияПодстановки)
	
	Для Каждого ТекСтрока Из ЗначенияПодстановки Цикл
		НаименованиеДляПечати = СтрЗаменить(НаименованиеДляПечати, ТекСтрока.ЧтоМенять, Строка(ТекСтрока.НаЧтоМенять));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу представлений измерений отчета
// 
// Параметры:
// 	ДеревоВывода - см. БюджетнаяОтчетностьРасчетКэшаСервер.РасчетКэшаПолучениеДереваДляВыводаОтчета
// 	ДанныеЯчеек - см. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
// 	ОписаниеОтчета - см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
// Возвращаемое значение:
// 	ТаблицаЗначений, ДеревоЗначений - содержит в том числе:
// 	* Строка - Произвольный -
// 	* Колонка- Произвольный -
//
Функция ПредставлениеИзмеренийОтчета(ДеревоВывода, ДанныеЯчеек, ОписаниеОтчета) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	РасчетПредставлений = КомпоновкаДанныхСервер.ПустаяСхема();
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		РасчетПредставлений,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ДанныеЯчеек");
	Набор.ИмяОбъекта = "ДанныеЯчеек";
	
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	
	ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, "Строка");
	ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, "Колонка");
	
	ПройденныеПоля = Новый Соответствие;
	Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
		
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,,, БюджетнаяОтчетностьРасчетКэшаСервер.ТипКолонкиСтруктурыЯчеек(Измерение));
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение);
	
		ФинОтчеты.НовоеВычисляемоеПоле(РасчетПредставлений, Измерение + "Представление", "Представление(" + Измерение + ")");
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение + "Представление");
		
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение), Истина);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит Из НайденнаяСтрока.ДополнительныеПоля Цикл
				ИмяДопРеквизита = Измерение + "." + ДопРеквизит.Реквизит;
				Если ПройденныеПоля[ИмяДопРеквизита] = Истина Тогда
					Продолжить;
				КонецЕсли;
				ПройденныеПоля.Вставить(ИмяДопРеквизита, Истина);
				ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, ИмяДопРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ВидАналитики Из ОписаниеОтчета.ВидыАналитик Цикл
		Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,,,ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения"));
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение);
	
		ФинОтчеты.НовоеВычисляемоеПоле(РасчетПредставлений, Измерение + "Представление", "Представление(" + Измерение + ")");
		ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, Измерение + "Представление");
		
		НайденныеСтроки = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", Измерение), Истина);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Для Каждого ДопРеквизит Из НайденнаяСтрока.ДополнительныеПоля Цикл
				ИмяДопРеквизита = Измерение + "." + ДопРеквизит.Реквизит;
				Если ПройденныеПоля[ИмяДопРеквизита] = Истина Тогда
					Продолжить;
				КонецЕсли;
				ПройденныеПоля.Вставить(ИмяДопРеквизита, Истина);
				ФинОтчеты.НовоеПолеВыбора(РасчетПредставлений.НастройкиПоУмолчанию, ИмяДопРеквизита);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Группировка = ФинОтчеты.НоваяГруппировка(РасчетПредставлений.НастройкиПоУмолчанию.Структура);
	Группировка.ПоляГруппировки.Элементы.Очистить();
	
	Компоновщик = ФинОтчеты.КомпоновщикСхемы(РасчетПредставлений);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(РасчетПредставлений, Компоновщик, Новый Структура("ДанныеЯчеек", ДанныеЯчеек));
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьНачало, ЭтоОбъединеннаяАналитика=Ложь)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	МестоДобавления = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	
	НоваяСтрока = МестоДобавления.Строки.Добавить();
	НоваяСтрока.Строка = СтрокаОтчета.ЭлементОтчета;
	НоваяСтрока.Представление = ТекстГруппировки;
	НоваяСтрока.Картинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(СтрокаОтчета.ВидЭлемента);
	НоваяСтрока.Уровень = НоваяСтрока.Уровень();
	Если Не ОбластьНачало.Расшифровка = Неопределено Тогда
		НоваяСтрока.ИДГруппировки = ПараметрыВывода.ДанныеРасшифровки[ОбластьНачало.Расшифровка].ИДГруппировки;
	Иначе
		Возврат;
	КонецЕсли;
	НоваяСтрока.ИДТаблицы = МестоДобавления.ИДТаблицы;
	НоваяСтрока.Расшифровка = ОбластьНачало.Расшифровка;
	НоваяСтрока.ЭтоОбъединеннаяАналитика = ЭтоОбъединеннаяАналитика;
	НоваяСтрока.ФиксированноеЗначение = Значение;
	НоваяСтрока.ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	Если ЗначениеЗаполнено(Значение) Тогда
		НоваяСтрока.ЭтоАналитикаПрочее = Ложь;
	Иначе
		НоваяСтрока.ЭтоАналитикаПрочее = СтрокаОтчета.ЭтоАналитикаПрочее;
	КонецЕсли;
	НоваяСтрока.РедактируемыеЗначения = СтрокаОтчета.РедактируемыеЗначения;
	
	СтруктураСтиля = Новый Структура("Шрифт, ЦветФона", ОбластьНачало.Шрифт, ОбластьНачало.ЦветФона);
	КэшСтилей = ПараметрыВывода.СтильУровней[МестоДобавления.ИДТаблицы];
	Если КэшСтилей = Неопределено Тогда
		КэшСтилей = Новый Соответствие;
	КонецЕсли;
	КэшСтилей.Вставить(НоваяСтрока.Уровень, СтруктураСтиля);
	
	ПараметрыПолученияКэшаСтилей = Новый Структура;
	ПараметрыПолученияКэшаСтилей.Вставить("СтильУровней", ПараметрыВывода.СтильУровней);
	ПараметрыПолученияКэшаСтилей.Вставить("Шрифт", ОбластьНачало.Шрифт);
	ПараметрыПолученияКэшаСтилей.Вставить("ЦветФона", ОбластьНачало.ЦветФона);
	ПараметрыПолученияКэшаСтилей.Вставить("ИДТаблицы", МестоДобавления.ИДТаблицы);
	ПараметрыПолученияКэшаСтилей.Вставить("Уровень", НоваяСтрока.Уровень);
	
	КэшСтилей = ПолучитьКэшСтилейСтрокСпискаРедактирования(ПараметрыПолученияКэшаСтилей);
	
	ПараметрыВывода.СтильУровней.Вставить(МестоДобавления.ИДТаблицы, КэшСтилей);
	
	ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", НоваяСтрока);
	
КонецПроцедуры

// Получает/добавляет кэш стилей строк списка редактирования
// 
// Параметры:
// 	Параметры - Структура - содержит:
// 		*СтильУровней - Структура, Соответствие -
//		*Шрифт        - Шрифт -
//		*ЦветФона     - Цвет, -
//		*ИДТаблицы    - Строка -
//		*Уровень      - Число -
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - кэш стилей. содержит:
// 		*Ключ - Число - Уровень.
// 		*Значение - Структура - содержит:
// 			** Шрифт    - Шрифт - шрифт.
// 			** ЦветФона - Цвет - цвет.
//
Функция ПолучитьКэшСтилейСтрокСпискаРедактирования(Параметры) Экспорт
	
	СтруктураСтиля = Новый Структура;
	
	Шрифт = Неопределено;
	Если Параметры.Свойство("Шрифт", Шрифт) Тогда
		СтруктураСтиля.Вставить("Шрифт", Шрифт);
	КонецЕсли;
	
	ЦветФона = Неопределено;
	Если Параметры.Свойство("ЦветФона", ЦветФона) Тогда
		СтруктураСтиля.Вставить("ЦветФона", ЦветФона);
	КонецЕсли;
	
	КэшСтилей = Параметры.СтильУровней[Параметры.ИДТаблицы];
	Если КэшСтилей = Неопределено Тогда
		КэшСтилей = Новый Соответствие;
	КонецЕсли;
	КэшСтилей.Вставить(Параметры.Уровень, СтруктураСтиля);
	
	Возврат КэшСтилей;
	
КонецФункции

Процедура УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода)
	
	Если Не ПараметрыВывода.ДляРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВыводимая = ПараметрыВывода.АдресДобавленияСтрокСпискаРедактирования;
	Если Не ЗначениеЗаполнено(СтрокаВыводимая.Родитель) Тогда
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Владелец());
	Иначе
		ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", СтрокаВыводимая.Родитель);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, ДеревоВывода,
									ДеревоРезультат = Неопределено,
									НакопленныйОтбор = Неопределено,
									СтрокаИерархииАналитики = Неопределено) Экспорт
	
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ПодчиненныеЭлементыВидаБюджета = ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета;
	
	Если ДеревоРезультат = Неопределено Тогда
		ДеревоРезультат = Новый ДеревоЗначений;
		ДеревоРезультат.Колонки.Добавить("ЭлементОтчета");
		ДеревоРезультат.Колонки.Добавить("НаименованиеДляПечати");
		ДеревоРезультат.Колонки.Добавить("ИмяИзмерения");
		ДеревоРезультат.Колонки.Добавить("ФиксированноеЗначение");
		ДеревоРезультат.Колонки.Добавить("ВидЭлемента");
		ДеревоРезультат.Колонки.Добавить("ТипЗначения");
	КонецЕсли;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	Если СтрокаИерархииАналитики <> Неопределено Тогда
		ИндексКолонкиДерева = ДеревоВывода.Родитель.Строки.Индекс(ДеревоВывода);
		КоллекцияКолонокОтчета = ДеревоВывода.Родитель.Строки;
	Иначе
		КоллекцияКолонокОтчета = ДеревоВывода.Строки;
	КонецЕсли;
	
	Для Каждого Колонка Из КоллекцияКолонокОтчета Цикл
		
		Если СтрокаИерархииАналитики <> Неопределено
			И КоллекцияКолонокОтчета.Индекс(Колонка) <> ИндексКолонкиДерева Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоКолонкаПоказателя = СтрНайти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка = 
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы 
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если ЗначениеЗаполнено(Колонка.ФиксированноеЗначение)
			ИЛИ ЭтоКолонкаПоказателя
			ИЛИ ЭтоФиксКолонка Тогда
			
			НоваяСтрока = ДеревоРезультат.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
			
			НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Колонка.ФиксированноеЗначение, Колонка, ПараметрыВывода, Истина);
			
			ДобавленОтбор = Ложь;
			Если Не ЭтоФиксКолонка
				И Не ЭтоКолонкаПоказателя Тогда
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ПараметрыГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока, НакопленныйОтбор);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаИерархииАналитики <> Неопределено Тогда
				
				Результат = СтрокаИерархииАналитики.Строки;
				
			Иначе
				
				СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(Колонка.ЭлементОтчета, ПодчиненныеЭлементыВидаБюджета);
				
				НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
				НеобязательныеПараметры.Колонка = СписокЭлементовСПодчиненными;
				НеобязательныеПараметры.Строка = Неопределено;
				НеобязательныеПараметры.ИндексыПоиска = ИндексыПоискаИзмерений;
				НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
				Если Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
					ЗаполнитьЗначенияСвойств(НеобязательныеПараметры, Колонка,
						"ВыводитьИерархиюЭлементов, ВидАналитики");
					Если ПараметрыВывода.Свойство("РежимФормирования") Тогда
						НеобязательныеПараметры.РежимФормирования = ПараметрыВывода.РежимФормирования;
					КонецЕсли;
					Если Колонка.ВыводитьИерархиюЭлементов И ПараметрыВывода.УчитыватьДополнительныйОтборПоИерархии Тогда
						НеобязательныеПараметры.Вставить("ДополнительныйОтбор",
							БюджетнаяОтчетностьРасчетКэшаСервер.ЗначениеРеквизитаЭлементаВидаБюджета(
							Колонка.ЭлементОтчета, "ДополнительныйОтбор",
							ПараметрыВывода.КэшРеквизитовЭлементовБюджета.КэшРеквизитов));
					КонецЕсли;
				КонецЕсли;
				Результат = ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, Колонка.ИмяИзмерения, НакопленныйОтбор,
					НеобязательныеПараметры);
				
				Если НеобязательныеПараметры.Свойство("ДополнительныйОтбор") Тогда
					ПараметрыВывода.Вставить("УчитыватьДополнительныйОтборПоИерархии", Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
				Результат = Результат.Строки;
			КонецЕсли;
			
			ВыборкаИзИерархии = (ТипЗнч(Результат) = Тип("КоллекцияСтрокДереваЗначений"));
			
			Для Каждого Выборка Из Результат Цикл
				
				Значение = Выборка[Колонка.ИмяИзмерения];
				Если Значение = NULL
					И НЕ ТипЗнч(Колонка.ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
					Продолжить; //null группировки не отображаем
				КонецЕсли;
				
				Если БюджетнаяОтчетностьКлиентСервер.ЭтоПолеПериода(Колонка.ИмяИзмерения)
					И Не ЗначениеЗаполнено(Значение) Тогда
					Продолжить;
				ИначеЕсли ВыборкаИзИерархии
					И Выборка.Родитель <> Неопределено
					И Не Выборка.Родитель.ЭтоГруппа
					И Значение = Выборка.Родитель[Колонка.ИмяИзмерения] Тогда
					// Для справочников с иерархией элементов родительская строка присутствует среди подчиненных
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДеревоРезультат.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Колонка);
				НоваяСтрока.ФиксированноеЗначение = Значение;
				НоваяСтрока.НаименованиеДляПечати = ТекстГруппировки(Значение, Колонка, ПараметрыВывода, Истина);
				
				НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Значение);
				ПараметрыГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока,
					НакопленныйОтбор);
				Если ВыборкаИзИерархии Тогда
					ПараметрыГруппировокКолонок(ПараметрыВывода, ИндексыПоискаИзмерений, Колонка, НоваяСтрока,
						НакопленныйОтбор, Выборка);
				КонецЕсли;
				НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоРезультат;
	
КонецФункции

Функция НайтиСтрокиСУчетомИндексов(ДанныеЯчеек, Колонка, Строка, НакопленныйОтбор, ИндексыПоиска, СтруктураОтбора = Неопределено)
	
	СтруктураОтбора = Новый Структура();
	
	ПоляОтбора = "";
	
	Если Колонка <> Неопределено
		И ЗначениеЗаполнено(Колонка) Тогда
		
		СтруктураОтбора.Вставить("Колонка", Колонка);
		ПоляОтбора = "Колонка";
		
	КонецЕсли;
	
	Если Строка <> Неопределено Тогда
		
		СтруктураОтбора.Вставить("Строка", Строка);
		ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "Строка";
		
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ОсновнойЭлемент", Истина);
	ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + "ОсновнойЭлемент";
	
	Для Каждого КлючИЗначение Из НакопленныйОтбор Цикл
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ПоляОтбора = ПоляОтбора + ?(ПустаяСтрока(ПоляОтбора), "", ",") + КлючИЗначение.Ключ;
	КонецЦикла;
	
	Если ИндексыПоиска <> Неопределено Тогда
		Если ИндексыПоиска[ПоляОтбора] <> Истина Тогда
			ИндексыПоиска.Вставить(ПоляОтбора, Истина);
			ДанныеЯчеек.Индексы.Добавить(ПоляОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЯчеек.НайтиСтроки(СтруктураОтбора);
	
КонецФункции

Функция ОтборЯчейкиПоСтруктуреПоиска(СтруктураОтбора, ОтборЯчейки = "")
	
	Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
		ОтборЯчейки = ОтборЯчейки + ?(ПустаяСтрока(ОтборЯчейки), "", ",") + КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат ОтборЯчейки;
	
КонецФункции

Функция ГлубинаДерева(Строки, Знач Глубина = 0, ГлубинаВсего = 0) Экспорт
	
	Если Строки.Количество() Тогда
		ГлубинаВсего = Макс(ГлубинаВсего, Глубина);
	КонецЕсли;
	
	Для Каждого СтрокаПоказателя Из Строки Цикл
		
		ГлубинаДерева(СтрокаПоказателя.Строки, Глубина + 1, ГлубинаВсего);
		
	КонецЦикла;
	
	Возврат ГлубинаВсего
	
КонецФункции

Процедура РаспределитьЭлементыПоУровням(Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая = 0) Экспорт
	
	Если ГлубинаТекущая > ГлубинаВсего Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСтрокУровням[ГлубинаТекущая + 1];
	Если СписокСтрок = Неопределено Тогда
		СписокСтрок = Новый Массив;
	КонецЕсли;
	СоответствиеСтрокУровням.Вставить(ГлубинаТекущая + 1, СписокСтрок);
	
	Если Строки = Неопределено ИЛИ Не Строки.Количество() Тогда
		
		СписокСтрок.Добавить(Неопределено);
		РаспределитьЭлементыПоУровням(Неопределено, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
		
	Иначе
		
		Для Каждого СтрокаПоказателя Из Строки Цикл
			
			СписокСтрок.Добавить(СтрокаПоказателя);
			РаспределитьЭлементыПоУровням(СтрокаПоказателя.Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЛистьевДерева(ЭлементУровня, Количество = 0)
	
	Для Каждого Элемент Из ЭлементУровня.Строки Цикл
		Если Не Элемент.Строки.Количество() Тогда
			Количество = Количество + 1;
		Иначе
			ПолучитьКоличествоЛистьевДерева(Элемент, Количество);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макс(1, Количество);
	
КонецФункции

Процедура ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, СтрокаТаблицы, НомерТаблицы)
	
	СоответствиеЭлементовПоУровням = Новый Соответствие;
	КоличествоУровней = ГлубинаДерева(СтруктураКолонок.Строки) + 1;
	РаспределитьЭлементыПоУровням(СтруктураКолонок.Строки, КоличествоУровней, СоответствиеЭлементовПоУровням);
	СПримечанием = ?(ПараметрыВывода.ВыводитьПримечания, "СПримечанием", "");
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		ОбластьШапкаНачалоТаблицы = "ШапкаНачалоТаблицыНумерацияСтрок";
		ОбластьНумерацияКолонокНачалоТаблицы = "НумерацияКолонокНачалоТаблицыНумерацияСтрок";
	Иначе
		ОбластьШапкаНачалоТаблицы = "ШапкаНачалоТаблицы";
		ОбластьНумерацияКолонокНачалоТаблицы = "НумерацияКолонокНачалоТаблицы";
	КонецЕсли;
	
	Если ПараметрыВывода.ВыводитьПримечания И ПараметрыВывода.ВыводитьНомераТаблиц Тогда
		СтрНомерТаблицы = НСтр("ru = 'Таблица %1';
								|en = 'Table %1'");
		СтрНомерТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрНомерТаблицы, НомерТаблицы);
		ОбластьНомерТаблицы = СтруктураОбластей["НомерТаблицы"]; // ТабличныйДокумент, ПолеТабличногоДокумента -
		ОбластьНомерТаблицы.Параметры.Текст = СтрНомерТаблицы;
		ДокументРезультат.Вывести(ОбластьНомерТаблицы, 0);
	КонецЕсли;
	
	НачалоВывода = Неопределено;
	СчетчикКолонок = 1;
	Для Сч = 1 По КоличествоУровней Цикл
		
		ВыведеннаяОбласть = ДокументРезультат.Вывести(СтруктураОбластей[ОбластьШапкаНачалоТаблицы], 0);
		ВыведеннаяОбласть.Расшифровка = Неопределено;
		Если НачалоВывода = Неопределено Тогда
			НачалоВывода = ВыведеннаяОбласть;
		КонецЕсли;
		
		ДополнительнаяОбласть = СтруктураОбластей["ШапкаДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 По СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		
		Если СоответствиеЭлементовПоУровням.Количество() Тогда // проверка на наличие значений колонок
			
			ЭлементыУровня = СоответствиеЭлементовПоУровням[Сч];
			Для Каждого ЭлементУровня Из ЭлементыУровня Цикл
				Секция = СтруктураОбластей["ШапкаГруппировкаКолонок" + Мин(Сч, 3) + СПримечанием];
				
				Если ЭлементУровня = Неопределено Тогда
					Секция.Параметры.Группировка = "";
				ИначеЕсли ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Группировка = ЭлементУровня.НаименованиеДляПечати;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				Иначе
					Секция.Параметры.Группировка = ЭлементУровня.ФиксированноеЗначение;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, ЭлементУровня.ФиксированноеЗначение);
					Секция.Параметры.Расшифровка = Расшифровка;
				КонецЕсли;
				
				ВыведеннаяОбласть = ДокументРезультат.Присоединить(Секция);
				
				Если ЭлементУровня = Неопределено Тогда
					Если Сч > 1 Тогда // объединяем с предыдущим уровнем, если предыдущий уровень есть
						СтрокаНачалаОбъединения = ДокументРезультат.Область(ВыведеннаяОбласть.Верх - 1,
								ВыведеннаяОбласть.Лево).Верх;
						
						Область = ДокументРезультат.Область(СтрокаНачалаОбъединения,
								ВыведеннаяОбласть.Лево,
								ВыведеннаяОбласть.Верх,
								ВыведеннаяОбласть.Право);
						Область.Объединить();
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				ПодчиненныхЭлементов = ПолучитьКоличествоЛистьевДерева(ЭлементУровня);
				Если ПодчиненныхЭлементов > 1 Тогда
					Для НомерСекции = 1 По ПодчиненныхЭлементов - 1 Цикл
						ДокументРезультат.Присоединить(Секция);
					КонецЦикла;
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх,
							ВыведеннаяОбласть.Лево,
							ВыведеннаяОбласть.Верх,
							ВыведеннаяОбласть.Право + (ПодчиненныхЭлементов - 1)*Секция.ШиринаТаблицы);
					Область.Объединить();
					
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.ЭлементОтчета = Неопределено;
					НаборПараметров.Колонка = ЭлементУровня.ЭлементОтчета;
					ДобавитьОбластьОформления(НаборПараметров, Область, Неопределено, НомерТаблицы, 0, Неопределено);
				ИначеЕсли Сч < КоличествоУровней Тогда
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.ЭлементОтчета = Неопределено;
					НаборПараметров.Колонка = ЭлементУровня.ЭлементОтчета;
					ДобавитьОбластьОформления(НаборПараметров, ВыведеннаяОбласть, Неопределено, НомерТаблицы, 0, Неопределено);
				КонецЕсли;
				
				Если Сч = КоличествоУровней Тогда
					СчетчикКолонок = СчетчикКолонок + 1;
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.ЭлементОтчета = Неопределено;
					НаборПараметров.Колонка = ЭлементУровня.ЭлементОтчета;
					ДобавитьОбластьОформления(НаборПараметров, ВыведеннаяОбласть, Неопределено, НомерТаблицы, 0, СчетчикКолонок);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх,
				1,
				НачалоВывода.Верх + (КоличествоУровней - 1),
				1);
		Область.Объединить();
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета   = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		НаборПараметров.Колонка         = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		ДобавитьОбластьОформления(НаборПараметров, Область, Неопределено, НомерТаблицы, 0, 1);
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх,
				2,
				НачалоВывода.Верх + (КоличествоУровней - 1),
				2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		НаборПараметров.Колонка = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		ДобавитьОбластьОформления(НаборПараметров, Область, Неопределено, НомерТаблицы, 0, 1);
		
		ОбластьТекста = Область;
		
	Иначе
		
		Область = ДокументРезультат.Область(НачалоВывода.Верх, 
				1,
				НачалоВывода.Верх + (КоличествоУровней - 1),
				2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
		Область.Объединить();
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		НаборПараметров.Колонка = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		ДобавитьОбластьОформления(НаборПараметров, Область, Неопределено, НомерТаблицы, 0, 1);
		
		ОбластьТекста = Область;
		
	КонецЕсли;
	
	ВыводитьЗаголовокГруппировки = ПараметрыВывода.ПараметрыТаблицы.Свойство("ВыводитьЗаголовокГруппировки")
			И ПараметрыВывода.ПараметрыТаблицы.ВыводитьЗаголовокГруппировки = Истина;
	
	Если Не ВыводитьЗаголовокГруппировки Тогда
	
		Текст = "";
		Если СтрокаТаблицы.Строки.Найти("ПоказательБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
			Текст = НСтр("ru = 'Показатель бюджетов';
						|en = 'Budget balance item'");
		КонецЕсли;
		
		Если СтрокаТаблицы.Строки.Найти("СтатьяБюджетов", "ИмяИзмерения", Истина) <> Неопределено Тогда
			Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("ru = 'Статья бюджетов';
																					|en = 'Budget flow item'");
		КонецЕсли;
		
		Текст = Текст + ?(ПустаяСтрока(Текст), "", " / " + Символы.ПС) + НСтр("ru = 'Аналитика';
																				|en = 'Dimension'");
		
	Иначе
		
		Текст = ПараметрыВывода.ПараметрыТаблицы.ЗаголовокГруппировки;
		
	КонецЕсли;
	
	ОбластьТекста.Текст = Текст;
	
	Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюКолонок Тогда
		НачалоВывода = ДокументРезультат.Вывести(СтруктураОбластей[ОбластьНумерацияКолонокНачалоТаблицы], 0);
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		НаборПараметров.Колонка = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		ДобавитьОбластьОформления(НаборПараметров, НачалоВывода, Неопределено, НомерТаблицы, 0, 1);
		
		ДополнительнаяОбласть = СтруктураОбластей["НумерацияКолонокДополнительнаяСекция"];
		Для ДополнительнаяКолонка = 1 По СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок Цикл
			ДокументРезультат.Присоединить(ДополнительнаяОбласть);
		КонецЦикла;
		Если СтрокаТаблицы.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх,
					2,
					НачалоВывода.Верх,
					2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		Иначе
			
			Область = ДокументРезультат.Область(НачалоВывода.Верх,
					1,
					НачалоВывода.Верх,
					2 + СтрокаТаблицы.ПараметрыТаблицы.КоличествоДополнительныхКолонок);
			Область.Объединить();
			
		КонецЕсли;
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		НаборПараметров.Колонка = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		ДобавитьОбластьОформления(НаборПараметров, Область, Неопределено, НомерТаблицы, 0, 1);
		
		ЭлементыОтчета = СоответствиеЭлементовПоУровням[КоличествоУровней];
		Для Сч = 1 По ЭлементыОтчета.Количество() Цикл
			Область = СтруктураОбластей["НумерацияКолонокГруппировкаКолонок"
										+ Мин(КоличествоУровней, 3)
										+ СПримечанием]; // ТабличныйДокумент
			Область["Параметры"].НомерКолонки = 1 + Сч;
			ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
			ОформляемыйЭлемент = ?(ЭлементыОтчета[Сч-1] = Неопределено, 
									Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка(), ЭлементыОтчета[Сч-1].ЭлементОтчета);
			
			НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
			НаборПараметров.ПараметрыВывода = ПараметрыВывода;
			НаборПараметров.ЭлементОтчета = Неопределено;
			НаборПараметров.Колонка = ОформляемыйЭлемент;
			ДобавитьОбластьОформления(НаборПараметров, ВыведеннаяОбласть, Неопределено, НомерТаблицы, 0, СчетчикКолонок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ДанныеЯчеек - см. ДанныеЯчеек
// 	ПараметрыЯчеек - ТаблицаЗначений -
// 	ПараметрыПериодов - Структура -
// 	ПараметрыРасчета - Структура - Описание:
// * КэшРеквизитовЭлементовБюджета - Неопределено, Структура -
// * Постфикс - Строка -
// * Префикс - Строка -
// * СтрокаДанных - СтрокаТаблицыЗначений - см. ДанныеЯчеек. Содержит:
//	   ** Строка  - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
//	   ** Колонка - Произвольный -
//	   и остальные колонки из ДанныеЯчеек
// 	ВидЭлемента - Неопределено - Описание
// 	ЛогРасчета - Неопределено, Массив - Описание
// Возвращаемое значение:
// 	Строка - Описание
Функция ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ПараметрыРасчета,
						ВидЭлемента = Неопределено,
						ЛогРасчета = Неопределено)
	
	СтрокаДанных = ПараметрыРасчета.СтрокаДанных;
	Префикс = ПараметрыРасчета.Префикс;
	Постфикс = ПараметрыРасчета.Постфикс;
	РасчетИзменений = ПараметрыРасчета.РасчетИзменений;
	КэшРеквизитовЭлементовБюджета = ПараметрыРасчета.КэшРеквизитовЭлементовБюджета; // Неопределено или рассчитанный кэш реквизитов элементов вида бюджета.
	
	Если ВидЭлемента = Неопределено Тогда
		ВидЭлемента = СтрокаДанных.ВидЭлемента;
	КонецЕсли;
	
	Если РасчетИзменений
		И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		
		Если ЗначениеЗаполнено(ПараметрыЯчейки.Формула) Тогда
			
			ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не СтрокаДанных["Рассчитан" + Префикс + Постфикс] Тогда
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		ОбратныйЗнак = ПараметрыЯчейки.ОбратныйЗнак;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ЗначениеВСтрокеДанных = СтрокаДанных[Префикс + Постфикс + ПараметрыЯчейки.ПолеИсточника];
			Если ТипЗнч(ЗначениеВСтрокеДанных) = Тип("Число") Тогда
				СтрокаДанных[Префикс + Постфикс] = ?(ОбратныйЗнак, -1, 1) * ЗначениеВСтрокеДанных;
			Иначе
				СтрокаДанных[Префикс + Постфикс] = ЗначениеВСтрокеДанных;
			КонецЕсли;
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			
			СтрокаДанных[Префикс + Постфикс] = СтрокаДанных.ЗначениеПоказателя;
			
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			Формула = ПараметрыЯчейки.Формула;
			МассивЗначений = Новый Массив;
			
			// Показатели и статьи
			АналитикаОперандов = ПараметрыЯчейки.АналитикаОперандов;
			СписокОперандов = ПараметрыЯчейки.СписокОперандов;
			
			// Ключ - Набор измерений поиска операндов, Значение - Массив имен операндов или Неопределено (любые операнды).
			НаборыИзмерений = Новый Соответствие;
			Если АналитикаОперандов = Неопределено Тогда
				НаборыИзмерений.Вставить(ПараметрыЯчейки.ОбщиеИзмерения, Неопределено);
			Иначе
				Для каждого ИмяОперандаИПоляПоиска Из АналитикаОперандов Цикл
					МассивОперандов = НаборыИзмерений.Получить(ИмяОперандаИПоляПоиска.Значение);
					Если МассивОперандов = Неопределено Тогда
						МассивОперандов = Новый Массив;
					КонецЕсли;
					МассивОперандов.Добавить(ИмяОперандаИПоляПоиска.Ключ);
					
					НаборыИзмерений.Вставить(ИмяОперандаИПоляПоиска.Значение, МассивОперандов);
				КонецЦикла;
			КонецЕсли;
			
			Для каждого НаборИзмерений Из НаборыИзмерений Цикл
				
				МассивОперандовНабораИзмерений = НаборИзмерений.Значение;
				ОбщиеИзмерения = НаборИзмерений.Ключ;
				
				СтруктураПоиска = Новый Структура(ОбщиеИзмерения);
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
				РасчетПоКолонке = Ложь;
				Если КэшРеквизитовЭлементовБюджета = Неопределено Тогда
					ВидЭлементаСтроки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Строка, "ВидЭлемента");
				Иначе
					ВидЭлементаСтроки = БюджетнаяОтчетностьРасчетКэшаСервер.ЗначениеРеквизитаЭлементаВидаБюджета(СтрокаДанных.Строка,
						"ВидЭлемента", КэшРеквизитовЭлементовБюджета.КэшРеквизитов);
				КонецЕсли;
				Если ВидЭлементаСтроки = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					Если КэшРеквизитовЭлементовБюджета = Неопределено И ЗначениеЗаполнено(СтрокаДанных.Колонка) Тогда
						ВидЭлементаКолонки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.Колонка, "ВидЭлемента");
					ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Колонка) Тогда
						ВидЭлементаКолонки = БюджетнаяОтчетностьРасчетКэшаСервер.ЗначениеРеквизитаЭлементаВидаБюджета(СтрокаДанных.Колонка,
							"ВидЭлемента", КэшРеквизитовЭлементовБюджета.КэшРеквизитов);
					Иначе
						ВидЭлементаКолонки = Неопределено;
					КонецЕсли;
					Если ВидЭлементаКолонки = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
						РасчетПоКолонке = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Не РасчетПоКолонке Тогда
					СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
				КонецЕсли;
				СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
				СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
				
				НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
				
				СоответствиеПройденныхОперандов = Новый Соответствие;
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					Если НайденнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
						Продолжить; //ячейки обрабатываются отдельно
					КонецЕсли;
					
					ПараметрыНайденнойЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
					
					Если Не ЗначениеЗаполнено(ПараметрыНайденнойЯчейки.ИмяОперанда) Тогда
						ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы';
												|en = 'An error occurred while generating the report: Incorrect formula operand'");
					КонецЕсли;
					
					Если НЕ МассивОперандовНабораИзмерений = Неопределено
						И МассивОперандовНабораИзмерений.Найти(ПараметрыНайденнойЯчейки.ИмяОперанда) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаДанных.НефинансовыйПоказатель) Тогда
						ПрефиксСсылки = Префикс;
						ПостФиксСсылки = Постфикс;
						
					// В операндах производного показателя
					// может быть выбрано только количество или сумма
					// (кроме случая, когда у исходного показателя тип "Количество, Сумма").
					ИначеЕсли ПараметрыНайденнойЯчейки.ФлагКоличество
						И ПараметрыНайденнойЯчейки.ФлагСумма
						И Префикс = "Сумма" Тогда
						ПрефиксСсылки = Префикс;
						ПостФиксСсылки = Постфикс;
					ИначеЕсли ПараметрыНайденнойЯчейки.ФлагКоличество
						И ПараметрыНайденнойЯчейки.ФлагСумма
						И Префикс = "Количество" Тогда
						ПрефиксСсылки = Префикс;
						ПостФиксСсылки = "";
					ИначеЕсли ПараметрыНайденнойЯчейки.ФлагКоличество Тогда
						ПрефиксСсылки = "Количество";
						ПостФиксСсылки = "";
					Иначе
						ПрефиксСсылки = "Сумма";
						ПостФиксСсылки = ПостФикс;
					КонецЕсли;
					Если ЗначениеЗаполнено(НайденнаяСтрока.НефинансовыйПоказатель) Тогда
						ПрефиксСсылки = "Значение";
						ПостФиксСсылки = "";
					КонецЕсли;
					
					ПараметрыРасчета = Новый Структура;
					ПараметрыРасчета.Вставить("СтрокаДанных",	НайденнаяСтрока);
					ПараметрыРасчета.Вставить("Префикс",	ПрефиксСсылки);
					ПараметрыРасчета.Вставить("Постфикс",	ПостФиксСсылки);
					ПараметрыРасчета.Вставить("РасчетИзменений", РасчетИзменений);
					ПараметрыРасчета.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
					Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ПараметрыРасчета,
						НайденнаяСтрока.ВидОперанда);
					
					ИмяОперанда = "[" + ПараметрыНайденнойЯчейки.ИмяОперанда + "]";
					ВыполнитьЗаменуПоПолномуСоответствию(СписокОперандов, ИмяОперанда, "");
					
					ПройденноеЗначение = СоответствиеПройденныхОперандов[ИмяОперанда]; // см. НовыйСтруктураПройденногоОперанда
					Если ПройденноеЗначение <> Неопределено Тогда
						МассивЛокальныхЗначений = ПройденноеЗначение.Значение;
						Если ТипЗнч(МассивЛокальныхЗначений) <> Тип("Массив") Тогда
							МассивЛокальныхЗначений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивЛокальныхЗначений);
						КонецЕсли;
						МассивЛокальныхЗначений.Добавить(Значение);
						Значение = МассивЛокальныхЗначений;
						МассивЗначений[ПройденноеЗначение["Индекс"]] = МассивЛокальныхЗначений;
					Иначе
						МассивЗначений.Добавить(Значение);
					КонецЕсли;
					
					ВыполнитьЗаменуПоПолномуСоответствию(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
					СоответствиеПройденныхОперандов.Вставить(ИмяОперанда, НовыйСтруктураПройденногоОперанда(Значение, МассивЗначений.ВГраница()));
					
					Если ЛогРасчета <> Неопределено Тогда
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
						ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидОперанда);
						ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыНайденнойЯчейки.ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
						ЗначениеДляЛога.Вставить("Значение", Значение);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
			СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
			СтруктураПоиска.Вставить("ВидОперанда", Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			
			ПредыдущаяЕдиницаИзмерения = Неопределено; 
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ПараметрыНайденнойЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
				
				Если Не ЗначениеЗаполнено(ПараметрыНайденнойЯчейки.ИмяОперанда) Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы';
											|en = 'An error occurred while generating the report: Incorrect formula operand'");
				КонецЕсли;
				
				ИмяОперанда = "[" + ПараметрыНайденнойЯчейки.ИмяОперанда + "]";
				МассивЛокальныхЗначений = Новый Массив;
				
				СтруктураПоиска = Новый Структура(ПараметрыНайденнойЯчейки.ОбщиеИзмерения);
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
				СтруктураПоиска.Вставить("Строка", ПараметрыНайденнойЯчейки.ОперандСтрока);
				СтруктураПоиска.Вставить("Колонка", ПараметрыНайденнойЯчейки.ОперандКолонка);
				СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
				
				СтрокиСсылки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиСсылки.Количество() Тогда
					
					Для Каждого СтрокаСсылки Из СтрокиСсылки Цикл
						
						ПараметрыСсылки = ПараметрыЯчеек.Найти(СтрокаСсылки.ИндексСтроки, "ИндексСтроки");
						
						// Строки с иерархическими значениями аналитик (группы) не участвуют в расчете значения операнда
						Если СтрокаСсылки.ВыводИерархии И СтрокаСсылки.РасчетЗаполнение = "итог" Тогда
							Продолжить;
						КонецЕсли;
						
						СодержитЗначениеПоРесурсу = Истина;
						Если НЕ ПараметрыСсылки.СложнаяТаблица Тогда
							Если Префикс = "Сумма" И НЕ ПараметрыСсылки.ФлагСумма Тогда
								СодержитЗначениеПоРесурсу = Ложь;
							КонецЕсли;
							Если Префикс = "Количество" И НЕ ПараметрыСсылки.ФлагКоличество Тогда
								СодержитЗначениеПоРесурсу = Ложь;
							КонецЕсли;
							Если Префикс = "Значение" И НЕ ПараметрыСсылки.ФлагЗначение Тогда
								СодержитЗначениеПоРесурсу = Ложь;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ СодержитЗначениеПоРесурсу Тогда
							РезультатПодчиненнойСсылки = 0;
						Иначе
							// В сложной таблице из ячеек выбираем первое,
							// что заполнено - количество или сумма.
							Если ПараметрыСсылки.СложнаяТаблица Тогда
								Если ПараметрыСсылки.ФлагКоличество Тогда
									ПрефиксСсылки = "Количество";
									ПостФиксСсылки = "";
								ИначеЕсли ПараметрыСсылки.ФлагЗначение Тогда
									ПрефиксСсылки = "Значение";
									ПостФиксСсылки = "";
								Иначе
									ПрефиксСсылки = "Сумма";
									ПостФиксСсылки = ПостФикс;
								КонецЕсли;
							Иначе
								ПрефиксСсылки = Префикс;
								ПостФиксСсылки = ПостФикс;
							КонецЕсли;
							ПараметрыРасчета = Новый Структура;
							ПараметрыРасчета.Вставить("СтрокаДанных", СтрокаСсылки);
							ПараметрыРасчета.Вставить("Префикс", ПрефиксСсылки);
							ПараметрыРасчета.Вставить("Постфикс", ПостФиксСсылки);
							ПараметрыРасчета.Вставить("РасчетИзменений", РасчетИзменений);
							ПараметрыРасчета.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
							РезультатПодчиненнойСсылки = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ПараметрыРасчета);
						КонецЕсли;
						
						Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
							МассивЗначений.Добавить(РезультатПодчиненнойСсылки);
						КонецЕсли;
						МассивЛокальныхЗначений.Добавить(РезультатПодчиненнойСсылки);
						Если ЛогРасчета <> Неопределено Тогда
							ПредставлениеЯчейки = ИмяОперанда;
							РазмерМассива = МассивЛокальныхЗначений.Количество();
							Если РазмерМассива > 1 Тогда
								ПредставлениеЯчейки = ПредставлениеЯчейки + " #" + РазмерМассива;
							КонецЕсли;
							ЗначениеДляЛога = Новый Структура();
							ЗначениеДляЛога.Вставить("ИмяПоказателя", ПрефиксСсылки);
							ЗначениеДляЛога.Вставить("ВидЭлемента", СтрокаСсылки.ВидЭлемента);
							ЗначениеДляЛога.Вставить("ИмяОперанда", ПредставлениеЯчейки);
							ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(СтрокаСсылки));
							ЗначениеДляЛога.Вставить("Значение", РезультатПодчиненнойСсылки);
							ЛогРасчета.Добавить(ЗначениеДляЛога);
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					Если ЛогРасчета <> Неопределено Тогда
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыНайденнойЯчейки.ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
						ЗначениеДляЛога.Вставить("Значение", 0);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
				КонецЕсли;
				
				Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
					ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
					Если ЛогРасчета <> Неопределено Тогда
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидЭлемента);
						ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыНайденнойЯчейки.ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
						ЗначениеДляЛога.Вставить("Значение", МассивЛокальныхЗначений);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
					
					ВыполнитьЗаменуПоПолномуСоответствию(СписокОперандов, ИмяОперанда, "");
					Если МассивЛокальныхЗначений.Количество() = 1 Тогда
						МассивЛокальныхЗначений = МассивЛокальныхЗначений[0];
					ИначеЕсли МассивЛокальныхЗначений.Количество() = 0 Тогда
						МассивЛокальныхЗначений = 0;
					КонецЕсли;
					МассивЗначений.Добавить(МассивЛокальныхЗначений);
					ВыполнитьЗаменуПоПолномуСоответствию(Формула, ИмяОперанда, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(СписокОперандов) Тогда
				СписокНеНайденныхОперандов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокОперандов, " ", Истина);
				Для Каждого ИмяОперанда Из СписокНеНайденныхОперандов Цикл
					ВыполнитьЗаменуПоПолномуСоответствию(Формула, ИмяОперанда, "0");
					Если ЛогРасчета <> Неопределено Тогда
						Если Лев(ИмяОперанда, 1) = "[" Тогда
							ИмяОперанда = Сред(ИмяОперанда, 2);
						КонецЕсли;
						Если Прав(ИмяОперанда, 1) = "]" Тогда
							ИмяОперанда = Лев(ИмяОперанда, СтрДлина(ИмяОперанда) - 1);
						КонецЕсли;
						ЗначениеДляЛога = Новый Структура();
						ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
						ЗначениеДляЛога.Вставить("ИмяОперанда", ИмяОперанда);
						ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
						ЗначениеДляЛога.Вставить("Значение", 0);
						ЛогРасчета.Добавить(ЗначениеДляЛога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрНайти(ВРег(Формула), ВРег("РАЗНОСТЬДАТ")) Тогда
				НачалоПериода = ПараметрыПериодов.НачалоПериода;
				КонецПериода = ПараметрыПериодов.КонецПериода;
				ГраницаФактДанных = ПараметрыПериодов.ГраницаФактДанных;
				ПериодГруппировки = Неопределено;
				Для Каждого ИмяПериода Из ПараметрыПериодов.УпорядоченныеПериодичностиОтчета Цикл
					Если ЗначениеЗаполнено(СтрокаДанных[ИмяПериода]) Тогда
						ПериодГруппировки = СтрокаДанных[ИмяПериода];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Попытка
				Если МассивЗначений.Найти("#Знач") <> Неопределено Тогда
					Возврат "#Знач";
				КонецЕсли;
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("ДанныеЯчеек",       ДанныеЯчеек);
				ДополнительныеПараметры.Вставить("ПараметрыЯчеек", 	  ПараметрыЯчеек);
				ДополнительныеПараметры.Вставить("ПараметрыПериодов", ПараметрыПериодов);
				ДополнительныеПараметры.Вставить("Префикс", 		  Префикс);  
				ДополнительныеПараметры.Вставить("Постфикс",		  Постфикс);
				ДополнительныеПараметры.Вставить("СтрокаДанных", 	  СтрокаДанных);
				ДополнительныеПараметры.Вставить("ЛогРасчета", 		  ЛогРасчета);
				ДополнительныеПараметры.Вставить("НачалоПериода", 	  НачалоПериода);
				ДополнительныеПараметры.Вставить("КонецПериода", 	  КонецПериода);
				ДополнительныеПараметры.Вставить("ГраницаФактДанных", ГраницаФактДанных);
				ДополнительныеПараметры.Вставить("ПериодГруппировки", ПериодГруппировки);
				ДополнительныеПараметры.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
				
				РезультатВычисления = ВычислитьФормулуВБезопасномРежиме(Формула, МассивЗначений, ДополнительныеПараметры);
				
				Если ТипЗнч(РезультатВычисления) = Тип("Массив") Тогда
					Если ОбратныйЗнак Тогда
						Для Каждого ЭлементМассива Из РезультатВычисления Цикл
							ЭлементМассива = -ЭлементМассива;
						КонецЦикла;
					КонецЕсли;
							
					РезультатВычисленияИтог = 0;
					Для Каждого ЭлементМассива Из РезультатВычисления Цикл
						РезультатВычисленияИтог = РезультатВычисленияИтог + ЭлементМассива;
					КонецЦикла;
					РезультатВычисления = РезультатВычисленияИтог;
				Иначе
					Если ОбратныйЗнак Тогда 
						РезультатВычисления = -РезультатВычисления;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДанных[Префикс + Постфикс] = РезультатВычисления;
			Исключение
				Возврат "#Знач";
			КонецПопытки;
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный вид элемента показателя';
									|en = 'An error occurred while generating the report: Incorrect indicator item kind'");
		
		КонецЕсли;
		
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Истина;
		
	КонецЕсли;
	
	Возврат СтрокаДанных[Префикс + Постфикс];
	
КонецФункции

// Функция-конструктор структуры пройденного операнда
// 
// Параметры:
// 	Значение - Массив, Произвольный -
// 	Индекс - Число -
// 
// Возвращаемое значение:
// 	Структура - содержит:
// 	* Значение - Массив, Произвольный -
// 	* Индекс - Число -
//
Функция НовыйСтруктураПройденногоОперанда(Значение, Индекс)
	
	ПройденныйОперанд = Новый Структура("Значение, Индекс", Значение, Индекс);
	
	Возврат ПройденныйОперанд;
	
КонецФункции

Процедура ВыполнитьЗаменуПоПолномуСоответствию(Текст, СтрокаПоиска, СтрокаЗамены)
	
	Если СтрокаПоиска = СтрокаЗамены Тогда
		Возврат;
	КонецЕсли; 
	
	ДлинаТекста = СтрДлина(Текст);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	ПозицияСтрокиПоиска = 1;
	НачальнаяПозицияПоиска = 1;
	
	ВыполненныеЗамены = Новый Соответствие;
	
	Пока ПозицияСтрокиПоиска <> 0 Цикл
		
		ПозицияСтрокиПоиска = СтрНайти(Текст, СтрокаПоиска, , НачальнаяПозицияПоиска);
		Если ПозицияСтрокиПоиска = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнятьЗамену = Истина;
		
		ПредыдущийСимвол = "";
		Если ПозицияСтрокиПоиска > 1 Тогда
			ПредыдущийСимвол = Сред(Текст, ПозицияСтрокиПоиска -1 , 1);
			Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
				ВыполнятьЗамену = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			СледующийСимвол = "";
			Если ПозицияСтрокиПоиска < ДлинаТекста Тогда
				СледующийСимвол = Сред(Текст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, 1);
				Если Не СлужебныйСимвол(СледующийСимвол) Тогда
					ВыполнятьЗамену = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			ПолнаяСтрокаПоиска = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаПоиска, СледующийСимвол);
			Если ВыполненныеЗамены[ПолнаяСтрокаПоиска] = Неопределено Тогда
				ПолнаяСтрокаЗамены = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаЗамены, СледующийСимвол);
				Текст = СтрЗаменить(Текст, ПолнаяСтрокаПоиска, ПолнаяСтрокаЗамены);
				ДлинаТекста = СтрДлина(Текст);
				ВыполненныеЗамены.Вставить(ПолнаяСтрокаПоиска, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияСтрокиПоиска + СтрДлина(ПолнаяСтрокаЗамены);
		Если ВыполнятьЗамену И ПредыдущийСимвол <> "" Тогда
			НачальнаяПозицияПоиска = НачальнаяПозицияПоиска - 1;
		КонецЕсли;
		
		Если НачальнаяПозицияПоиска >= ДлинаТекста Тогда
			ПозицияСтрокиПоиска = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СлужебныйСимвол(Символ)
	
	Если Символ = " "
		ИЛИ Символ = Символы.ВК
		ИЛИ Символ = Символы.ПС
		ИЛИ Символ = "."
		ИЛИ Символ = "	"
		ИЛИ Символ = ","
		ИЛИ Символ = "("
		ИЛИ Символ = ")"
		ИЛИ Символ = "["
		ИЛИ Символ = "]"
		ИЛИ Символ = "+"
		ИЛИ Символ = "-"
		ИЛИ Символ = "*"
		ИЛИ Символ = "/"
		ИЛИ Символ = "="
		ИЛИ Символ = "<"
		ИЛИ Символ = ">"
		ИЛИ Символ = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает шаблон параметров для расчета значений ячейки.
//
// Возвращаемое значение:
//	Структура - Структура параметров. См. описание функции РассчитатьЗначениеЯчейки.
//
Функция ШаблонПараметровРасчетаЗначенийЯчейки() Экспорт
	
	// Обязательные свойства.
	ШаблонПараметров = Новый Структура("ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СтрокаДанных, Префикс");
	
	// Необязательные свойства.
	ШаблонПараметров.Вставить("КэшРеквизитовЭлементовБюджета", Неопределено);
	ШаблонПараметров.Вставить("РасчетИзменений", Ложь);
	
	Возврат ШаблонПараметров;
	
КонецФункции

// Возвращает расчитанное значение ячейки по указанному показателю.
//
// Параметры:
//	ПараметрыРасчетаЗначения - Структура - Структура параметров, необходимых для расчета значений:
//	 * ДанныеЯчеек - см. ДанныеЯчеек
//	 * ПараметрыЯчеек - ТаблицаЗначений - Таблица параметров ячеек.
//	 * ПараметрыПериодов - Структура       - Структура параметров периодов.
//	 * СтрокаДанных - СтрокаТаблицыЗначений - Рассчитываемая строка данных (таблицы данных ячеек). Содержит:
//	   ** Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
//	   ** Колонка - Произвольный -
//	   и остальные колонки из ДанныеЯчеек
//	 * Префикс - Строка - Имя рассчитываемого показателя. Может содержать значения: "Количество", "Сумма", "Значение".
//	 * РасчетИзменений - Булево - Флаг расчета изменений по статье бюджетов.
//	 * КэшРеквизитовЭлементовБюджета - Структура, Неопределено - Кэш настроек элементов вида бюджета.
//	ЛогРасчета - Массив, Неопределено - Массив для записи лога расчета.
//
// Возвращаемое значение:
//	Число, Булево, Дата, Строка, Неопределено - произвольные расчитанные значения.
//
Функция РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения, ЛогРасчета = Неопределено) Экспорт
	
	Префикс = ПараметрыРасчетаЗначения.Префикс;
	СтрокаДанных = ПараметрыРасчетаЗначения.СтрокаДанных;
	Если Префикс = "Сумма" Тогда
		Постфикс = ?(ЗначениеЗаполнено(СтрокаДанных.Валюта), "Вал", "");
	Иначе
		ПостФикс = "";
	КонецЕсли;
	
	Если ЛогРасчета <> Неопределено Тогда
		СтрокаДанных["Рассчитан" + Префикс + Постфикс] = Ложь;
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СтрокаДанных",    СтрокаДанных);
	ПараметрыРасчета.Вставить("Префикс",         Префикс);
	ПараметрыРасчета.Вставить("Постфикс",        Постфикс);
	ПараметрыРасчета.Вставить("РасчетИзменений", ПараметрыРасчетаЗначения.РасчетИзменений);
	ПараметрыРасчета.Вставить("КэшРеквизитовЭлементовБюджета", ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета);
	Значение = ПолучитьЗначениеОперанда(ПараметрыРасчетаЗначения.ДанныеЯчеек,
			ПараметрыРасчетаЗначения.ПараметрыЯчеек,
			ПараметрыРасчетаЗначения.ПараметрыПериодов,
			ПараметрыРасчета,,
			ЛогРасчета);
	Возврат Значение;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ПараметрыВывода - см. ДобавитьПараметрВывода.ПараметрыВывода
// 	НакопленныйОтбор - Структура - Описание:
// * УспешныеЗамены - Соответствие -
// * ПарыЗамен - Соответствие -
// * УчитыватьПрикладныеПравила - Булево -
// * ПривилегированнаяЗапись - Булево -
// * ВключатьБизнесЛогику - Булево -
// * ПомечатьНаУдаление - Булево -
// * УдалятьНепосредственно - Булево -
// 	СтрокаЯчейки - СтрокаТаблицыЗначений - см. ДанныеЯеек:
// 		* Строка  - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
// 		* Колонка - Произвольный -
// 	СтрокаПараметров - Структура -
// 	ИмяПоказателя - Строка - Описание
// 	ИндексСтрокиДанных - Число - Описание
// 	ДляРедактирования - Булево - Описание
// Возвращаемое значение:
// 	Число - уид расшифровки
//
Функция ПолучитьРасшифровку(ПараметрыВывода, НакопленныйОтбор, СтрокаЯчейки, СтрокаПараметров, ИмяПоказателя, ИндексСтрокиДанных, ДляРедактирования) Экспорт
	
	ДанныеРасшифровки = ПараметрыВывода.ДанныеРасшифровки;
	
	Расшифровка = НовыйСтруктураРасшифровки(ПараметрыВывода, НакопленныйОтбор, СтрокаЯчейки, СтрокаПараметров, ИмяПоказателя, ИндексСтрокиДанных, ДляРедактирования);
	
	УИДРасшифровки = ДанныеРасшифровки.Количество() + 1;
	ДанныеРасшифровки.Вставить(УИДРасшифровки, Расшифровка);
	
	Возврат УИДРасшифровки;
	
КонецФункции

Функция ПолучитьРасшифровкуГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор = Неопределено, Группировка = Неопределено)
	Перем Расшифровка;
	
	ДанныеРасшифровки = ПараметрыВывода.ДанныеРасшифровки;
	
	Расшифровка = НовыйСтруктураРасшифровкиГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор, Группировка);
	
	УИДРасшифровки = ДанныеРасшифровки.Количество() + 1;
	
	Если Расшифровка.Количество() Тогда
		ДанныеРасшифровки.Вставить(УИДРасшифровки, Расшифровка);
	Иначе
		ДанныеРасшифровки.Вставить(УИДРасшифровки, Неопределено);
	КонецЕсли;
	
	Возврат УИДРасшифровки;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ПараметрыВывода - см. ДобавитьПараметрВывода.ПараметрыВывода
// 	НакопленныйОтбор - Структура - Описание:
// * УспешныеЗамены - Соответствие -
// * ПарыЗамен - Соответствие -
// * УчитыватьПрикладныеПравила - Булево -
// * ПривилегированнаяЗапись - Булево -
// * ВключатьБизнесЛогику - Булево -
// * ПомечатьНаУдаление - Булево -
// * УдалятьНепосредственно - Булево -
// 	СтрокаЯчейки - СтрокаТаблицыЗначений - см. ДанныеЯеек:
// 		* Строка  - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
// 		* Колонка - Произвольный -
// 	СтрокаПараметров - Структура -
// 	ИмяПоказателя - Строка - Описание
// 	ИндексСтрокиДанных - Число - Описание
// 	ДляРедактирования - Булево - Описание
//
// Возвращаемое значение:
// 	Структура - возможные значения:
//	* Строка  - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
//	* Колонка - Произвольный -
//	* Валюта  - СправочникСсылка.Валюты - 
//	* СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - 
//	* РедактируемоеЗначение - Произвольный -
//	* ЗначенияАналитик - Соответствие - содержит:
//		** Ключ - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - 
//		** Значение - Произвольный -
//	* ИмяПоказателя - Строка -
//	* ИндексСтрокиДанных - Число -
//
Функция НовыйСтруктураРасшифровки(ПараметрыВывода, НакопленныйОтбор, СтрокаЯчейки, СтрокаПараметров, ИмяПоказателя, ИндексСтрокиДанных, ДляРедактирования)
	
	Расшифровка = Новый Структура;
	Если ДляРедактирования Тогда
		
		Расшифровка.Вставить("Строка",  СтрокаЯчейки.Строка);
		Расшифровка.Вставить("Колонка", СтрокаЯчейки.Колонка);
		
		Если ЗначениеЗаполнено(СтрокаЯчейки.Валюта) Тогда
			Расшифровка.Вставить("Валюта", СтрокаЯчейки.Валюта);
		Иначе
			СтруктураПоиска = Новый Структура("Строка, Колонка, ВалютаОпределяетсяАналитикой", СтрокаЯчейки.Строка, СтрокаЯчейки.Колонка, Истина);
			НайденныеСтроки = ПараметрыВывода.КэшПараметровВалют.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() Тогда
				
				КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(НайденныеСтроки[0].АналитикаВалюты);
				ЗначениеАналитикиВалюты = Неопределено;
				
				Если НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитикиВалюты) Тогда
					ВалютаВывода = Подключаемый_ЗначениеИзАналитики(
						ПараметрыВывода.КэшЗначенийАналитик,
						ЗначениеАналитикиВалюты,
						НайденныеСтроки[0].ЗаполнениеЕдиницыИзмерения);
					
					Если ЗначениеЗаполнено(ВалютаВывода) Тогда
						Расшифровка.Вставить("Валюта", ВалютаВывода);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЯчейки.СтатьяБюджетов) Тогда
			Расшифровка.Вставить("СтатьяБюджетов", СтрокаЯчейки.СтатьяБюджетов);
		ИначеЕсли ЗначениеЗаполнено(СтрокаЯчейки.РедактируемоеЗначение) Тогда
			Расшифровка.Вставить("РедактируемоеЗначение", СтрокаЯчейки.РедактируемоеЗначение);
		КонецЕсли;
		
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого ВидАналитики Из ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Значение = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
			НакопленныйОтбор.Свойство(КлючИмени, Значение);
			СоответствиеЗначенийАналитик.Вставить(ВидАналитики, Значение);
		КонецЦикла;
		
		Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
		
		Для Каждого КлючИЗначение Из НакопленныйОтбор Цикл
			Если БюджетнаяОтчетностьКлиентСервер.ЭтоПолеПериода(КлючИЗначение.Ключ) Тогда
				Расшифровка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Расшифровка.Вставить("ИмяПоказателя", ИмяПоказателя);
	Если ИмяПоказателя = "Сумма" Тогда
		Постфикс = ?(ЗначениеЗаполнено(СтрокаЯчейки.Валюта), "Вал", "");
	Иначе
		ПостФикс = "";
	КонецЕсли;
	Если ИндексСтрокиДанных = Неопределено Тогда
		Расшифровка.Вставить("Значение", Неопределено);
	Иначе
		Расшифровка.Вставить("Значение", СтрокаЯчейки[ИмяПоказателя + Постфикс]);
		Расшифровка.Вставить("ИндексСтрокиДанных", ИндексСтрокиДанных);
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ПараметрыВывода - см. ДобавитьПараметрВывода.ПараметрыВывода
// 	Значение - Произвольный, Неопределено -
// 	НакопленныйОтбор - Структура, Неопределено - Описание:
// * УспешныеЗамены - Соответствие -
// * ПарыЗамен - Соответствие -
// * УчитыватьПрикладныеПравила - Булево -
// * ПривилегированнаяЗапись - Булево -
// * ВключатьБизнесЛогику - Булево -
// * ПомечатьНаУдаление - Булево -
// * УдалятьНепосредственно - Булево -
// 	Группировка - Произвольный, Неопределено -
//
// Возвращаемое значение:
//  Структура - возможные значения:
//   * Строка   - СправочникСсылка.ЭлементыФинансовыхОтчетов, Произвольный -
//   * Значение - Произвольный -
//   * ЗначенияАналитик - Соответствие - содержит:
//      ** Ключ - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - 
//      ** Значение - Произвольный -
//   * ИДГруппировки - УникальныйИдентификатор - 
//
Функция НовыйСтруктураРасшифровкиГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор = Неопределено, Группировка = Неопределено)
	
	Расшифровка = Новый Структура;
	
	Если Группировка <> Неопределено Тогда
		Расшифровка.Вставить("Строка", Группировка.ЭлементОтчета);
	КонецЕсли;
	
	Расшифровка.Вставить("Значение", Значение);
	
	Если НакопленныйОтбор <> Неопределено Тогда
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого ВидАналитики Из ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			ЗначениеАналитики = Неопределено;
			НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитики);
			СоответствиеЗначенийАналитик.Вставить(ВидАналитики, ЗначениеАналитики);
		КонецЦикла;
		Если ПараметрыВывода.ПараметрыПериодов.Свойство("УпорядоченныеПериодичностиОтчета")
			И ТипЗнч(ПараметрыВывода.ПараметрыПериодов.УпорядоченныеПериодичностиОтчета) = Тип("Массив") Тогда
			Для Каждого СтрокаПериод Из ПараметрыВывода.ПараметрыПериодов.УпорядоченныеПериодичностиОтчета Цикл
				Если ПараметрыВывода.СтруктураКолонок.Строки.Найти(СтрокаПериод, "ИмяИзмерения", Истина) = Неопределено
					И НакопленныйОтбор.Свойство(СтрокаПериод) Тогда
					Расшифровка.Вставить(СтрокаПериод, НакопленныйОтбор[СтрокаПериод]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
	Расшифровка.Вставить("ИДГруппировки", Новый УникальныйИдентификатор);
	
	Возврат Расшифровка;
	
КонецФункции

// Описание
// 
// Параметры:
// 	Значение - Произвольный, Неопределено - Описание
// 	СтрокаОтчета - Произвольный - строка дерева, содержит в том числе:
// 		*ДополнительныеПоля - ТаблицаЗначений - содержит в том числе:
// 			**Реквизит - Произвольный -
// 			**Наименование - Строка -
// 			**ИмяРеквизита - Строка -
// 			**Заголовок - Строка -
// 			**ВыводитьЗаголовок - Булево -
// 			**ВОтдельнойКолонке - Булево -
// 	ПараметрыВывода - Структура - Описание:
// * ДляРедактирования - Булево -
// * СтруктураОбластей - Структура -:
// ** НомерТаблицы - ТабличныйДокумент -
// ** НумерацияКолонокНачалоТаблицыНумерацияСтрок - ТабличныйДокумент -
// ** ШапкаНачалоТаблицыНумерацияСтрок - ТабличныйДокумент -
// ** ПустаяСтрока - ТабличныйДокумент -
// ** ЗаголовокТаблицы - ТабличныйДокумент -
// ** Текст - ТабличныйДокумент -
// ** ЗаголовокОтчета - ТабличныйДокумент -
// * ДокументРезультат - ТабличныйДокумент -
// * ДанныеЯчеекДобавленныеСтроки - ТаблицаЗначений -
// * КэшПредставленийПустыхАналитик - Соответствие -
// 	ЭтоКолонки - Булево - Описание
// Возвращаемое значение:
// 	Произвольный, Строка, Неопределено - Описание
Функция ТекстГруппировки(Значение, СтрокаОтчета, ПараметрыВывода, ЭтоКолонки = Ложь)
	
	Представление = СтрокаОтчета.НаименованиеДляПечати;
	ВидАналитики = СтрокаОтчета.ВидАналитики;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			Возврат БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
				ВидАналитики, "Прочие",, ПараметрыВывода.КэшПредставленийПустыхАналитик);
		ИначеЕсли НЕ ЗначениеЗаполнено(ВидАналитики)
			И СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			И ЗначениеЗаполнено(СтрокаОтчета.ИмяИзмерения) Тогда
			Возврат БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
				СтрокаОтчета.ИмяИзмерения, "Прочие",, ПараметрыВывода.КэшПредставленийПустыхАналитик);
		ИначеЕсли Не ПустаяСтрока(Представление) Тогда
			Возврат Представление;
		Иначе
			Возврат БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
				"", "Прочие",, ПараметрыВывода.КэшПредставленийПустыхАналитик);
		КонецЕсли;
	КонецЕсли;
	
	ВидЭлемента = СтрокаОтчета.ВидЭлемента;
	ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
	ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	
	ВидыЭлементов = Перечисления.ВидыЭлементовФинансовогоОтчета;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение И СтрНайти(ИмяИзмерения, "Период") Тогда
		
		Периодичность = Перечисления.Периодичность[СтрЗаменить(ИмяИзмерения, "Период", "")];
		Возврат БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Значение, Периодичность);
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.Измерение Тогда
		
		ИмяИндекса = "";
		СтруктураПоиска = Новый Структура();
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
			ИмяИндекса = "Колонка";
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
			ИмяИндекса = "Строка";
		КонецЕсли;
		СтруктураПоиска.Вставить(ИмяИзмерения, Значение);
		ИмяИндекса = ИмяИндекса + "," + ИмяИзмерения;
		
		Если ПараметрыВывода.ИндексыПоискаИзмерений[ИмяИндекса] = Неопределено Тогда
			
			ПредставленияИзмерений = ПараметрыВывода.ПредставленияИзмерений; // см. ПредставлениеИзмеренийОтчета
			ПредставленияИзмерений.Индексы.Добавить(ИмяИндекса);
			ПараметрыВывода.ИндексыПоискаИзмерений.Вставить(ИмяИндекса, Истина);
		КонецЕсли;
		
		СтрокиДанных = ПараметрыВывода.ПредставленияИзмерений.НайтиСтроки(СтруктураПоиска);
		
		Если Не СтрокиДанных.Количество() Тогда //если ссылочный тип в колонках не на последнем уровне
			НаименованиеГруппировки = Строка(Значение);
		Иначе
			СтрокаПредставления = СтрокиДанных[0];
			НаименованиеГруппировки = СтрокаПредставления[ИмяИзмерения + "Представление"];
			Для Каждого ДополнительныйРеквизит Из СтрокаОтчета.ДополнительныеПоля Цикл
				Если ДополнительныйРеквизит.ВОтдельнойКолонке Тогда
					Продолжить;
				КонецЕсли;
				НаименованиеГруппировки = НаименованиеГруппировки + ", ";
				Если Не ПустаяСтрока(ДополнительныйРеквизит.Заголовок) Тогда
					НаименованиеГруппировки = НаименованиеГруппировки + ДополнительныйРеквизит.Заголовок + ": ";
				КонецЕсли;
				НаименованиеГруппировки = НаименованиеГруппировки + СтрокаПредставления[ИмяИзмерения + ДополнительныйРеквизит.ИмяРеквизита];
			КонецЦикла;
		КонецЕсли;
	
	Иначе
		
		Если ЗначениеЗаполнено(Представление) Тогда
			НаименованиеГруппировки = Представление;
		Иначе
			НаименованиеГруппировки = Строка(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЭлемента = ВидыЭлементов.ВсеСтатьиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ВсеПоказателиБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.СтатьяБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.ПоказательБюджетов
		ИЛИ ВидЭлемента = ВидыЭлементов.НефинансовыйПоказатель Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ОбъектУчета", Значение);
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Ложь);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = ПараметрыВыводаЕдиницы[0].ЕдиницаИзмерения;
			
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ВидАналитики) Тогда
		
		КэшПараметровЕдиницы = ПараметрыВывода.КэшПараметровЕдиницИзмерения;
		СтруктураПоиска = Новый Структура;
		Если ЭтоКолонки Тогда
			СтруктураПоиска.Вставить("Колонка", ЭлементОтчета);
		Иначе
			СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
		КонецЕсли;
		СтруктураПоиска.Вставить("ЕдиницаИзмеренияОпределяетсяАналитикой", Истина);
		СтруктураПоиска.Вставить("АналитикаЕдиницыИзмерения", ВидАналитики);
		
		ПараметрыВыводаЕдиницы = КэшПараметровЕдиницы.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыВыводаЕдиницы.Количество() Тогда
			
			ЕдиницаИзмерения = Подключаемый_ЗначениеИзАналитики(
				ПараметрыВывода.КэшЗначенийАналитик, Значение,
				ПараметрыВыводаЕдиницы[0].ЗаполнениеЕдиницыИзмерения);
			Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ", " + ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаименованиеГруппировки;
	
КонецФункции

Функция ДобавитьОбластьОформления(Параметры, ВыведеннаяОбласть, НакопленныйОтбор,
									НомерТаблицы, НомерСтроки, НомерКолонки)
	
	ПараметрыВывода = Параметры.ПараметрыВывода;
	Строка = Параметры.ЭлементОтчета;
	Колонка = Параметры.Колонка;
	
	ДанныеОтчетаДляОформления =
		ПараметрыВывода.ДанныеОтчетаДляОформления; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ДанныеОтчетаДляОформления
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрокаОформления = ДанныеОтчетаДляОформления.Добавить();
	НоваяСтрокаОформления.ИмяОбласти = ВыведеннаяОбласть.Имя;
	НоваяСтрокаОформления.Строка = Строка;
	НоваяСтрокаОформления.Колонка = Колонка;
	НоваяСтрокаОформления.НомерСтроки = НомерСтроки;
	НоваяСтрокаОформления.НомерКолонки = НомерКолонки;
	НоваяСтрокаОформления.НомерТаблицы = НомерТаблицы;
	
	Если НакопленныйОтбор <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОформления, НакопленныйОтбор);
	КонецЕсли;
	
	Возврат НоваяСтрокаОформления;
	
КонецФункции

Процедура ОбъединитьНеиспользуемыеЯчейки(ДокументРезультат, ПараметрыОбъединения, ПараметрыВывода, ТекущийОтбор,
											СчетчикТаблиц, СчетчикСтрок)
	
	ОбластьВывода    = ПараметрыОбъединения.ОбластьВывода;
	ОбластьДопСекция = ПараметрыОбъединения.ОбластьДопСекция;
	Объединить       = ПараметрыОбъединения.Объединить;
	ЭлементОтчета    = ПараметрыОбъединения.ЭлементОтчета;
	
	Если Не Объединить Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьДопСекция.Параметры.Группировка = Неопределено;
	ОбластьДопСекция.Параметры.Расшифровка = Неопределено;
	Для Сч = 1 По Объединить Цикл
		Пустышка = ДокументРезультат.Присоединить(ОбластьДопСекция);
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = ЭлементОтчета;
		НаборПараметров.Колонка = Неопределено;
		ДобавитьОбластьОформления(НаборПараметров,
				Пустышка,
				ТекущийОтбор,
				СчетчикТаблиц,
				СчетчикСтрок,
				Неопределено);
		
	КонецЦикла;
	Пустышка = ДокументРезультат.Область(ОбластьВывода.Верх,
			ОбластьВывода.Лево + Число(ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок),
			ОбластьВывода.Верх,
			ОбластьВывода.Право + Объединить);
	Пустышка.Объединить();
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ДокументРезультат - Структура, ТабличныйДокумент - Описание
// 	Параметры - Структура - Описание:
// 	*СтрокаОтчета - СтрокаДереваЗначений - Строка дерева настроек бюджета:
// 	  **ДополнительныеПоля - ТаблицаЗначений - Таблица дополнительных полей:
// 		***Реквизит - Произвольный -
// 		***Наименование - Строка -
// 		***ИмяРеквизита - Строка -
// 		***Заголовок - Строка -
// 		***ВыводитьЗаголовок - Булево -
// 		***ВОтдельнойКолонке - Булево -
// 	*Значение - Неопределено -
// 	*Область - Неопределено -
// 	*Колонка - Неопределено -
// 	*ЭлементОтчета - Неопределено -
// 	*ПараметрыВывода - Неопределено -
// 	ОбластьВывода - ОбластьЯчеекТабличногоДокумента - Описание
// 	ТекущийОтбор - Структура - Описание
// 	СчетчикСтрок - Число - Описание
// 	СчетчикТаблиц - Число - Описание
//
Процедура ВывестиДополнительныеПоля(ДокументРезультат, Параметры, ОбластьВывода, ТекущийОтбор, СчетчикСтрок, СчетчикТаблиц)
	
	ПараметрыВывода = Параметры.ПараметрыВывода; // см. ДобавитьПараметрВывода.ПараметрыВывода
	Область = Параметры.Область; // ТабличныйДокумент - 
	Значение = Параметры.Значение;
	СтрокаОтчета = Параметры.СтрокаОтчета;
	ЭлементОтчета = Параметры.ЭлементОтчета;
	
	ПредставленияИзмерений = ПараметрыВывода.ПредставленияИзмерений;
	
	Если СтрокаОтчета.ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(СтрокаОтчета.ИмяИзмерения, "Период") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаОтчета.ДополнительныеПоля.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Строка", ЭлементОтчета);
	ИмяИндекса = "Строка";
	СтруктураПоиска.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
	ИмяИндекса = ИмяИндекса + "," + СтрокаОтчета.ИмяИзмерения;
	ИмяИзмерения = СтрокаОтчета.ИмяИзмерения;
	
	Если ПараметрыВывода.ИндексыПоискаИзмерений[ИмяИндекса] = Неопределено Тогда
		ПредставленияИзмерений.Индексы.Добавить(ИмяИндекса);
		ПараметрыВывода.ИндексыПоискаИзмерений.Вставить(ИмяИндекса, Истина);
	КонецЕсли;
	
	СтрокиДанных = ПараметрыВывода.ПредставленияИзмерений.НайтиСтроки(СтруктураПоиска);
	
	СтрокаПредставления = Неопределено;
	Если СтрокиДанных.Количество() Тогда
		СтрокаПредставления = СтрокиДанных[0];
	КонецЕсли;
	
	Для Каждого ДополнительныйРеквизит Из СтрокаОтчета.ДополнительныеПоля Цикл
		Если Не ДополнительныйРеквизит.ВОтдельнойКолонке Тогда
			Продолжить;
		КонецЕсли;
		НаименованиеГруппировки = "";
		Если СтрокаПредставления <> Неопределено Тогда
			Если Не ПустаяСтрока(ДополнительныйРеквизит.Заголовок) Тогда
				НаименованиеГруппировки = НаименованиеГруппировки + ДополнительныйРеквизит.Заголовок + ": ";
			КонецЕсли;
			НаименованиеГруппировки = НаименованиеГруппировки + СтрокаПредставления[ИмяИзмерения + ДополнительныйРеквизит.ИмяРеквизита];
		КонецЕсли;
		Область["Параметры"].Группировка = НаименованиеГруппировки;
		Область["Параметры"].Расшифровка = ОбластьВывода.Расшифровка;
		ОбластьВывода = ДокументРезультат.Присоединить(Область);
		
		НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
		НаборПараметров.ПараметрыВывода = ПараметрыВывода;
		НаборПараметров.ЭлементОтчета = ЭлементОтчета;
		НаборПараметров.Колонка = Неопределено;
		ДобавитьОбластьОформления(НаборПараметров, ОбластьВывода, ТекущийОтбор,
			СчетчикТаблиц, СчетчикСтрок, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыДанных,
								ИмяОбласти, РезультатОтражения, ВсеСтроки = Ложь, ЕстьИзмененияВСвязанныхЯчейках = Ложь) Экспорт
	
	Если ТипЗнч(ПараметрыВыводаВидаБюджета) = Тип("Строка") Тогда
		ПараметрыВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Иначе
		ПараметрыВидаБюджета = ПараметрыВыводаВидаБюджета;
	КонецЕсли;
	
	Если ТипЗнч(АдресДанныхЯчеек) = Тип("Строка") Тогда
		ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек); // См. ДанныеЯчеек
	Иначе
		ДанныеЯчеек = АдресДанныхЯчеек; // См. ДанныеЯчеек
	КонецЕсли;
	
	СтруктураОписанияОтчета = ПараметрыВидаБюджета.СтруктураОписанияОтчета;
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	СтруктураКолонок = ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных;
	ПараметрыПериодов = ПреобразоватьПараметрыДанныхВДанныеПериодов(ПараметрыВидаБюджета.СтруктураКолонокТаблицыДанных, ПараметрыДанных);
	КэшРеквизитовЭлементовБюджета = Неопределено;
	Если ПараметрыВидаБюджета.Свойство("КэшРеквизитовЭлементовБюджета") Тогда
		КэшРеквизитовЭлементовБюджета = ПараметрыВыводаВидаБюджета.КэшРеквизитовЭлементовБюджета;
	ИначеЕсли ПараметрыВидаБюджета.Свойство("КэшДанных")
		И ПараметрыВидаБюджета.КэшДанных.Свойство("КэшРеквизитовЭлементовБюджета") Тогда
		КэшРеквизитовЭлементовБюджета = ПараметрыВидаБюджета.КэшДанных.КэшРеквизитовЭлементовБюджета;
	КонецЕсли;
	
	Если ВсеСтроки = Истина Тогда
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
		НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		
		СтрокиКРасчету = Новый Массив;
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			Если ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки").РасчетЗаполнение <> "пересчет" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.РассчитанСумма = Ложь;
			СтрокаТаблицы.РассчитанКоличество = Ложь;
			СтрокаТаблицы.РассчитанСуммаВал = Ложь;
			СтрокиКРасчету.Добавить(СтрокаТаблицы);
			
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(ИмяОбласти) = Тип("Строка") Тогда
			
			СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиСумма");
			Если СтрокаРасчета <> Неопределено Тогда
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");
				ПрефиксВалюты = ?(ЗначениеЗаполнено(СтрокаРасчета.Валюта), "Вал", "");
				СтрокаРасчета["Сумма" + ПрефиксВалюты + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.СуммаВВалюте;
				СтрокаРасчета["Сумма" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Сумма;	
				Если ТипЗнч(РезультатОтражения.Сумма) = Тип("Число") Тогда
					СтрокаРасчета.Сумма = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Сумма;
				Иначе
					СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
				КонецЕсли;
				Если ТипЗнч(РезультатОтражения.СуммаВВалюте) = Тип("Число") Тогда
					СтрокаРасчета.СуммаВал = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.СуммаВВалюте;
				Иначе
					СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаРасчета = Неопределено Тогда
				СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиКоличество");
				Если СтрокаРасчета <> Неопределено Тогда
					ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");
					СтрокаРасчета["Количество" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Количество;
					Если ТипЗнч(РезультатОтражения.Количество) = Тип("Число") Тогда
						СтрокаРасчета.Количество = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Количество;
					Иначе
						СтрокаРасчета.Количество = РезультатОтражения.Количество;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаРасчета = Неопределено Тогда
				СтрокаРасчета = ДанныеЯчеек.Найти(ИмяОбласти, "ИмяОбластиЗначение");
				Если СтрокаРасчета <> Неопределено Тогда
					СтрокаРасчета.Значение = РезультатОтражения.Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ СтрокаРасчета = Неопределено Тогда
				ИмяСвойстваПримечание = "Примечание";
				Если РезультатОтражения.Свойство(ИмяСвойстваПримечание) Тогда
					СтрокаРасчета[ИмяСвойстваПримечание] = РезультатОтражения[ИмяСвойстваПримечание];
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ИмяОбласти) = Тип("Структура") Тогда
			
			ИмяПоказателя = Неопределено;
			Если ИмяОбласти.Свойство("ИмяПоказателя", ИмяПоказателя) Тогда
				ИмяОбласти.Удалить("ИмяПоказателя");
			Иначе
				ИмяПоказателя = "Сумма";
			КонецЕсли;
			
			СтрокиОснования = Неопределено;
			Если ИмяОбласти.Свойство("СтрокиОснования", СтрокиОснования) Тогда
				ИмяОбласти.Удалить("СтрокиОснования");
			Иначе
				Если ТипЗнч(ИмяОбласти.Строка) = Тип("Массив") Тогда
					СтрокиОснования = ИмяОбласти.Строка;
				Иначе
					СтрокиОснования = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбласти.Строка);
				КонецЕсли;
				ИмяОбласти.Удалить("Строка");
			КонецЕсли;
			
			ИмяОбласти.Вставить("ОсновнойЭлемент", Истина);
			Для Каждого Строка Из СтрокиОснования Цикл
				ИмяОбласти.Вставить("Строка", Строка);
				СтрокиРасчета = ДанныеЯчеек.НайтиСтроки(ИмяОбласти);
				Если Не СтрокиРасчета.Количество() Тогда
					СтруктураПоискаЯчейки = Новый Структура("Строка, Колонка, ОсновнойЭлемент", Строка, ИмяОбласти.Колонка, Истина);
					СтрокаСтруктурыЯчеек = ПараметрыВидаБюджета.СтруктураОписанияОтчета.СтруктураЯчеек.НайтиСтроки(СтруктураПоискаЯчейки);
					СтруктураЗаполнения = ОбщегоНазначения.СкопироватьРекурсивно(ИмяОбласти);
					НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, СтрокаСтруктурыЯчеек[0], СтруктураЗаполнения, ИмяОбласти.Колонка);
					СтрокиРасчета.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПоискСтроки Из СтрокиРасчета Цикл
				
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(ПоискСтроки.ИндексСтроки, "ИндексСтроки");
				Если ПараметрыЯчейки.ФлагСумма И ИмяПоказателя = "Сумма" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				ИначеЕсли ПараметрыЯчейки.ФлагКоличество И ИмяПоказателя = "Количество" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				ИначеЕсли ПараметрыЯчейки.ФлагЗначение И ИмяПоказателя = "Значение" Тогда
					СтрокаРасчета = ПоискСтроки;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокаРасчета = Неопределено Тогда
				// Случай, когда строки нет в данных ячеек
				// например, когда это - добавленная через список строка.
				Возврат Неопределено;
			КонецЕсли;
			
			ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаРасчета.ИндексСтроки, "ИндексСтроки");
			
			Если ИмяПоказателя = "Сумма" Тогда
				ПрефиксВалюты = ?(ЗначениеЗаполнено(СтрокаРасчета.Валюта), "Вал", "");
				СтрокаРасчета["Сумма" + ПрефиксВалюты + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.СуммаВВалюте;
				СтрокаРасчета["Сумма" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Сумма;
				Если ТипЗнч(РезультатОтражения.Сумма) = Тип("Число") Тогда
					СтрокаРасчета.Сумма = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Сумма;
				Иначе
					СтрокаРасчета.Сумма = РезультатОтражения.Сумма;
				КонецЕсли;
				Если ТипЗнч(РезультатОтражения.СуммаВВалюте) = Тип("Число") Тогда
					СтрокаРасчета.СуммаВал = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.СуммаВВалюте;
				Иначе
					СтрокаРасчета.СуммаВал = РезультатОтражения.СуммаВВалюте;
				КонецЕсли;
				СтрокаРасчета.РассчитанСумма = Истина;
			КонецЕсли;
			Если ИмяПоказателя = "Количество" Тогда
				СтрокаРасчета["Количество" + ПараметрыЯчейки.ПолеИсточника] = РезультатОтражения.Количество;
				Если ТипЗнч(РезультатОтражения.Количество) = Тип("Число") Тогда
					СтрокаРасчета.Количество = ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1) * РезультатОтражения.Количество;
				Иначе
					СтрокаРасчета.Количество = РезультатОтражения.Количество;
				КонецЕсли;
				СтрокаРасчета.РассчитанКоличество = Истина;
			КонецЕсли;
			Если ИмяПоказателя = "Значение" Тогда
				СтрокаРасчета.Значение = РезультатОтражения.Значение;
				СтрокаРасчета.РассчитанЗначение = Истина;
			КонецЕсли;
			ИмяСвойстваПримечание = "Примечание";
			Если РезультатОтражения.Свойство(ИмяСвойстваПримечание)
				И НЕ СтрокаРасчета = Неопределено Тогда 
				СтрокаРасчета[ИмяСвойстваПримечание] = РезультатОтражения[ИмяСвойстваПримечание];
			КонецЕсли;
		
		КонецЕсли;
		
		// только связанные с текущей
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, СтрокаРасчета.Строка, СтрокаРасчета.Колонка);
		СтрокаСтруктурыЯчеек = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска)[0];
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаСтруктурыЯчеек.ИндексСтроки, "ИндексСтроки");
		
		СтрокиКРасчету = Новый Массив;
		
		СвязанныеЯчейки = ПараметрыЯчейки.СвязанныеЯчейки; // См. ДанныеЯчеек
		Для Каждого СвязаннаяЯчейка Из СвязанныеЯчейки Цикл
			
			СтруктураПоиска = Новый Структура(СвязаннаяЯчейка.ОбщиеИзмерения);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасчета);
			СтруктураПоиска.Вставить("Строка", СвязаннаяЯчейка.Строка);
			СтруктураПоиска.Вставить("Колонка", СвязаннаяЯчейка.Колонка);
			СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
			
			НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			Если Не НайденныеСтроки.Количество() Тогда
				СтруктураПоискаЯчейки = Новый Структура("Строка, Колонка, ОсновнойЭлемент", СтруктураПоиска.Строка, СтруктураПоиска.Колонка, Истина);
				СтрокаСтруктурыЯчеек = ПараметрыВидаБюджета.СтруктураОписанияОтчета.СтруктураЯчеек.НайтиСтроки(СтруктураПоискаЯчейки);
				НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, СтрокаСтруктурыЯчеек[0], СтруктураПоиска, СвязаннаяЯчейка.Колонка);
				СтрокиКРасчету.Добавить(НоваяСтрока);
			Иначе
				Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
					СтрокаТаблицы.РассчитанСумма = Ложь;
					СтрокаТаблицы.РассчитанКоличество = Ложь;
					СтрокаТаблицы.РассчитанСуммаВал = Ложь;
					СтрокиКРасчету.Добавить(СтрокаТаблицы);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ИмяОбласти");
	ТаблицаИзменений.Колонки.Добавить("Значение");
	ТаблицаИзменений.Колонки.Добавить("Расшифровка");
	
	Для Каждого СтрокаТаблицы Из СтрокиКРасчету Цикл
		
		ЕстьИзмененияВСвязанныхЯчейках = Истина;
		
		Расшифровка = Новый Структура;
		Для Каждого Периодичность Из СтруктураКолонок.Периодичности Цикл
			ПериодСтрокой = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
			Если ЗначениеЗаполнено(СтрокаТаблицы[ПериодСтрокой]) Тогда
				Расшифровка.Вставить(ПериодСтрокой, СтрокаТаблицы[ПериодСтрокой]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение Из СтруктураКолонок.Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		СоответствиеЗначенийАналитик = Новый Соответствие;
		Для Каждого Поле Из СтруктураКолонок.ВидыАналитик Цикл
			Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Поле);
			Если ЗначениеЗаполнено(СтрокаТаблицы[Измерение]) Тогда
				СоответствиеЗначенийАналитик.Вставить(Поле, СтрокаТаблицы[Измерение]);
			КонецЕсли;
		КонецЦикла;
		Расшифровка.Вставить("ЗначенияАналитик", СоответствиеЗначенийАналитик);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Валюта) Тогда
			Расшифровка.Вставить("Валюта", СтрокаТаблицы.Валюта);
		КонецЕсли;
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаТаблицы.СтатьяБюджетов);
		
		РасшифровкаСумма = Расшифровка;
		РасшифровкаКоличество = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасшифровкаСумма);
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаТаблицы.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.ОбратныйЗнак = Неопределено Тогда
			ПараметрыЯчейки.ОбратныйЗнак = Ложь;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			РасшифровкаКоличество.Вставить("ИмяПоказателя", "Количество");
			
			ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
			ПараметрыРасчетаЗначения.ДанныеЯчеек = ДанныеЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
			ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаТаблицы;
			ПараметрыРасчетаЗначения.Префикс = "Количество";
			ПараметрыРасчетаЗначения.РасчетИзменений = Истина;
			ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
			Количество = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
			
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиКоличество;
			// В данные документа для ввода значение связанной ячейки должно попасть
			// с положительным знаком.
			Если Количество = "#Знач" Тогда
				НовоеИзменение.Значение = Количество;
			Иначе
				Если ТипЗнч(Количество) <> Тип("Число") Тогда
					НовоеИзменение.Значение = "#Знач";
				Иначе
					НовоеИзменение.Значение = Количество * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
				КонецЕсли;
			КонецЕсли;
			НовоеИзменение.Расшифровка = РасшифровкаКоличество;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			РасшифровкаСумма.Вставить("ИмяПоказателя", "Сумма");
			
			ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
			ПараметрыРасчетаЗначения.ДанныеЯчеек = ДанныеЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
			ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
			ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаТаблицы;
			ПараметрыРасчетаЗначения.Префикс = "Сумма";
			ПараметрыРасчетаЗначения.РасчетИзменений = Истина;
			ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
			Сумма = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
			
			НовоеИзменение = ТаблицаИзменений.Добавить();
			НовоеИзменение.ИмяОбласти = СтрокаТаблицы.ИмяОбластиСумма;
			// В данные документа для ввода значение связанной ячейки должно попасть
			// с положительным знаком.
			Если Сумма = "#Знач" Тогда
				НовоеИзменение.Значение = Сумма;
			Иначе
				Если ТипЗнч(Сумма) <> Тип("Число") Тогда
					НовоеИзменение.Значение = "#Знач";
				Иначе
					НовоеИзменение.Значение = Сумма * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
				КонецЕсли;
			КонецЕсли;
			НовоеИзменение.Расшифровка = РасшифровкаСумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("Результат, ПараметрыВыводаВидаБюджета, ДанныеЯчеек", ТаблицаИзменений, ПараметрыВидаБюджета, ДанныеЯчеек);
	Возврат Результат;
	
КонецФункции

Функция РассчитатьИзмененияВОтчете(ПараметрыРасчетаИзменений)
	
	ПараметрыЯчеек = ПараметрыРасчетаИзменений.ПараметрыЯчеек;
	ПараметрыПериодов = ПараметрыРасчетаИзменений.ПараметрыПериодов;
	ПредыдущиеДанныеЯчеек = ПараметрыРасчетаИзменений.ПредыдущиеДанныеЯчеек;
	НовыеДанныеЯчеек = ПараметрыРасчетаИзменений.НовыеДанныеЯчеек;
	СтрокиКРасчету = ПараметрыРасчетаИзменений.СтрокиКРасчету;
	ИсходныеСтрокиКПересчету = ПараметрыРасчетаИзменений.ИсходныеСтрокиКПересчету;
	ИндексыПоиска = ПараметрыРасчетаИзменений.ИндексыТаблицыДанныхЯчеек;
	КэшРеквизитовЭлементовБюджета = ПараметрыРасчетаИзменений.КэшРеквизитовЭлементовБюджета;
	
	ТаблицаИзменений = Новый Соответствие;
	
	НовыеДанныеЯчеек.Индексы.Очистить();
	ПредыдущиеДанныеЯчеек.Индексы.Очистить();
	Для Каждого Индекс Из ИндексыПоиска Цикл
		НовыеДанныеЯчеек.Индексы.Добавить(Индекс.Ключ);
		ПредыдущиеДанныеЯчеек.Индексы.Добавить(Индекс.Ключ);
	КонецЦикла;
	
	ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
	ПараметрыРасчетаЗначения.ДанныеЯчеек = НовыеДанныеЯчеек;
	ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
	ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
	ПараметрыРасчетаЗначения.РасчетИзменений = Ложь;
	ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
	
	Для Каждого СтрокаНовыхДанных Из СтрокиКРасчету Цикл
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаНовыхДанных.ИндексСтроки, "ИндексСтроки");
		ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаНовыхДанных;
		Если ПараметрыЯчейки.ФлагСумма Тогда
			ПараметрыРасчетаЗначения.Префикс = "Сумма";
			РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			ПараметрыРасчетаЗначения.Префикс = "Количество";
			РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
		КонецЕсли;
		Если ПараметрыЯчейки.ФлагЗначение Тогда
			ПараметрыРасчетаЗначения.Префикс = "Значение";
			РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
		КонецЕсли;
	КонецЦикла;
	
	СтрокиКПересчетуИзмененияПоИерархии = Новый Соответствие;
	
	// Итерация = 1 - расчет итоговых ячеек, 
	// Итерация = 2 - расчет связанных ячеек.
	Итерация = 1;
	СтрокиКПересчетуИзменения = Новый Соответствие;
	СвязанныеСтрокиКПересчету = Новый Соответствие;
	УникальныеСтрокиИзменений = Новый Соответствие;
	ИзмененияСвязанныхЯчеек = Новый Массив;
	РасчетЗаполнениеИтог = НРег("Итог");
	
	ИменаОборотныхКолонок = "";
	Если НовыеДанныеЯчеек.Колонки.Найти("КоличествоОборот") <> Неопределено Тогда
		ИменаОборотныхКолонок = ИменаОборотныхКолонок + ", " + "КоличествоОборот";
	КонецЕсли;
	Если НовыеДанныеЯчеек.Колонки.Найти("СуммаОборот") <> Неопределено Тогда
		ИменаОборотныхКолонок = ИменаОборотныхКолонок + ", " + "СуммаОборот";
	КонецЕсли;
	Если НовыеДанныеЯчеек.Колонки.Найти("СуммаВалОборот") <> Неопределено Тогда
		ИменаОборотныхКолонок = ИменаОборотныхКолонок + ", " + "СуммаВалОборот";
	КонецЕсли;
	
	Пока Итерация <= 2 Цикл
		
		Если Итерация = 1 Тогда
			СтрокиКПересчету = ИсходныеСтрокиКПересчету;
		Иначе
			СтрокиКПересчету = СвязанныеСтрокиКПересчету;
		КонецЕсли;
		
		Для Каждого КлючСтрокКПересчету Из СтрокиКПересчету Цикл
			ЯчейкаОтчета = КлючСтрокКПересчету.Ключ;
			
			Если ЯчейкаОтчета.ОтборЯчейки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОтбора = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЯчейкаОтчета.ОтборЯчейки);
			ОтборЯчейки = Новый Структура;
			Для Каждого Измерение Из МассивОтбора Цикл
				ОтборЯчейки.Вставить(Измерение, ЯчейкаОтчета[Измерение]);
			КонецЦикла;
			
			НайденныеНовыеСтроки = НовыеДанныеЯчеек.НайтиСтроки(ОтборЯчейки);
			Если Не НайденныеНовыеСтроки.Количество() Тогда
				НоваяСтрока = НовыеДанныеЯчеек.Добавить();
				Если ЯчейкаОтчета.РасчетЗаполнение = РасчетЗаполнениеИтог Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЯчейкаОтчета,, "Значение, Сумма, СуммаВал, Количество" + ИменаОборотныхКолонок);
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЯчейкаОтчета,, "Значение, Сумма, СуммаВал, Количество");
				КонецЕсли;
				СтрокаНовыхДанных = НоваяСтрока;
			Иначе
				СтрокаНовыхДанных = НайденныеНовыеСтроки[0];
			КонецЕсли;
			
			ЗаполняемыеПоля = "ОтборЯчейки, ИмяОбластиЗначение, ИмяОбластиКоличество, ИмяОбластиСумма, ИмяОбластиЗначениеИерархия, ИмяОбластиКоличествоИерархия, ИмяОбластиСуммаИерархия, ВыводИерархии";
			ЗаполнитьЗначенияСвойств(СтрокаНовыхДанных, ЯчейкаОтчета, ЗаполняемыеПоля);
			Если ЗначениеЗаполнено(ЯчейкаОтчета.Валюта)
				И Не ЗначениеЗаполнено(СтрокаНовыхДанных.Валюта) Тогда
				СтрокаНовыхДанных.Валюта = ЯчейкаОтчета.Валюта;
			КонецЕсли;
			
			ПараметрыЯчейки = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
			
			Если Итерация = 1 Тогда
				Если ЯчейкаОтчета.РасчетЗаполнение = РасчетЗаполнениеИтог
					И СтрокаНовыхДанных.ВыводИерархии Тогда
					СтрокаЯчейка = СтрокиКПересчетуИзмененияПоИерархии.Получить(ЯчейкаОтчета.ИндексСтроки);
					Если СтрокаЯчейка = Неопределено Тогда
						СтрокиКПересчетуИзмененияПоИерархии.Вставить(ЯчейкаОтчета.ИндексСтроки, Новый Соответствие);
					КонецЕсли;
					СтрокиКПересчетуИзмененияПоИерархии[ЯчейкаОтчета.ИндексСтроки].Вставить(СтрокаНовыхДанных, ОтборЯчейки);
					Продолжить;
				ИначеЕсли ПараметрыЯчейки.РасчетЗаполнение <> РасчетЗаполнениеИтог Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Итерация = 2 И ПараметрыЯчейки.РасчетЗаполнение <> "пересчет" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагКоличество
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиКоличество) Тогда
				
				СтрокаНовыхДанных.РассчитанКоличество = Ложь;
				
				ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
				ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
				ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
				ПараметрыРасчетаЗначения.Префикс = "Количество";
				ПараметрыРасчетаЗначения.РасчетИзменений = Истина;
				ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = НовыеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаНовыхДанных;
				НовоеКоличество = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = ПредыдущиеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = ЯчейкаОтчета;
				СтароеКоличество = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				Если НовоеКоличество <> СтароеКоличество Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиКоличество, НовоеКоличество);
					Если Итерация = 1 Тогда
						СтрокиКПересчетуИзменения.Вставить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 Тогда
						УникальныеСтрокиИзменений.Вставить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагСумма
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиСумма) Тогда
				
				СтрокаНовыхДанных.РассчитанСумма = Ложь;
				СтрокаНовыхДанных.РассчитанСуммаВал = Ложь;
				
				ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
				ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
				ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
				ПараметрыРасчетаЗначения.Префикс = "Сумма";
				ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
				ПараметрыРасчетаЗначения.РасчетИзменений = Истина;
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = НовыеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаНовыхДанных;
				НоваяСумма = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = ПредыдущиеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = ЯчейкаОтчета;
				СтараяСумма = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				Если НоваяСумма <> СтараяСумма Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиСумма, НоваяСумма);
					Если Итерация = 1 Тогда
						СтрокиКПересчетуИзменения.Вставить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 Тогда
						УникальныеСтрокиИзменений.Вставить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЯчейки.ФлагЗначение
				И ЗначениеЗаполнено(ЯчейкаОтчета.ИмяОбластиЗначение) Тогда
				
				СтрокаНовыхДанных.РассчитанЗначение = Ложь;
				
				ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
				ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
				ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
				ПараметрыРасчетаЗначения.Префикс = "Значение";
				ПараметрыРасчетаЗначения.РасчетИзменений = Истина;
				ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = НовыеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = СтрокаНовыхДанных;
				НовоеЗначение  = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				ПараметрыРасчетаЗначения.ДанныеЯчеек = ПредыдущиеДанныеЯчеек;
				ПараметрыРасчетаЗначения.СтрокаДанных = ЯчейкаОтчета;
				СтароеЗначение = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
				
				Если НовоеЗначение <> СтароеЗначение Тогда
					ТаблицаИзменений.Вставить(ЯчейкаОтчета.ИмяОбластиЗначение, НовоеЗначение);
					Если Итерация = 1 Тогда
						СтрокиКПересчетуИзменения.Вставить(ЯчейкаОтчета);
					ИначеЕсли Итерация = 2 Тогда
						УникальныеСтрокиИзменений.Вставить(СтрокаНовыхДанных);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Итерация = 1 Тогда 
			Для Каждого КлючСтрокиКПересчету Из СтрокиКПересчетуИзменения Цикл
				СтрокаКПересчету = КлючСтрокиКПересчету.Ключ;
				
				Если Не СтрокаКПересчету.РасчетЗаполнение = РасчетЗаполнениеИтог Тогда
					Продолжить;
				КонецЕсли;
				
				// только связанные с текущей
				ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаКПересчету.ИндексСтроки, "ИндексСтроки");
				
				Если Не ПараметрыЯчейки = Неопределено И Не ПараметрыЯчейки.СвязанныеЯчейки = Неопределено Тогда
					СвязанныеЯчейки = ПараметрыЯчейки.СвязанныеЯчейки; // См. ДанныеЯчеек
					Для Каждого СвязаннаяЯчейка Из СвязанныеЯчейки Цикл
						
						СтруктураПоиска = Новый Структура(СвязаннаяЯчейка.ОбщиеИзмерения);
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКПересчету);
						СтруктураПоиска.Вставить("Строка", СвязаннаяЯчейка.Строка);
						СтруктураПоиска.Вставить("Колонка", СвязаннаяЯчейка.Колонка);
						СтруктураПоиска.Вставить("ОсновнойЭлемент", Истина);
						
						НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() Тогда
							Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
								Если Не СтрокаТаблицы.РасчетЗаполнение = "пересчет" Тогда
									Продолжить;
								КонецЕсли;
								СвязанныеСтрокиКПересчету.Вставить(СтрокаТаблицы);
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Итерация = Итерация + 1;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ОсновнойЭлемент", Истина);
	
	Для Каждого СтрокиКПересчету Из СтрокиКПересчетуИзмененияПоИерархии Цикл
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокиКПересчету.Ключ, "ИндексСтроки");
		СтруктураПоиска.Вставить("ИндексСтроки", СтрокиКПересчету.Ключ);
		
		СтрокиДанных = НовыеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			
			ИсходныеДанныеСтрок = Новый Соответствие;
			ЯчейкиКПересчету = Новый Соответствие;
			Для Каждого СтрокаКПересчету Из СтрокиКПересчету.Значение Цикл
				ЯчейкиКПересчету.Вставить(СтрокаКПересчету.Ключ.ИмяОбластиКоличество, СтрокаКПересчету.Ключ);
				ЯчейкаОтчета = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтрокаКПересчету.Значение)[0];
				ИсходныеДанныеСтрок.Вставить(СтрокаКПересчету.Ключ, ЯчейкаОтчета.Количество);
				СтрокаКПересчету.Ключ.Количество = 0;
			КонецЦикла;
			
			ОбработанныеСтроки = Новый Соответствие;
			Пока ЯчейкиКПересчету.Количество() > 0 Цикл
				ЯчейкиКУдалению = Новый Массив;
				ЯчейкиКДальнейшейОбработке = Новый Массив;
				Для Каждого СтрокаДанных Из СтрокиДанных Цикл
					Если ОбработанныеСтроки.Получить(СтрокаДанных) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЯчейкаОбластиИерархия = СтрокаДанных.ИмяОбластиКоличествоИерархия;
					Если Не ЗначениеЗаполнено(ЯчейкаОбластиИерархия) Тогда
						Продолжить;
					ИначеЕсли ЯчейкиКПересчету.Получить(СтрокаДанных.ИмяОбластиКоличество) <> Неопределено Тогда
						Если ЯчейкиКДальнейшейОбработке.Найти(ЯчейкаОбластиИерархия) = Неопределено Тогда
							ЯчейкиКДальнейшейОбработке.Добавить(ЯчейкаОбластиИерархия);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					СтрокаКПересчету = ЯчейкиКПересчету.Получить(ЯчейкаОбластиИерархия);
					Если СтрокаКПересчету <> Неопределено Тогда
						СтрокаКПересчету.Количество = СтрокаКПересчету.Количество + СтрокаДанных.Количество;
					КонецЕсли;
					ОбработанныеСтроки.Вставить(СтрокаДанных, Истина);
					Если ЯчейкиКУдалению.Найти(ЯчейкаОбластиИерархия) = Неопределено Тогда
						ЯчейкиКУдалению.Добавить(ЯчейкаОбластиИерархия);
					КонецЕсли;
				КонецЦикла;
				УдаленоЯчеек = 0;
				Для Каждого ЯчейкаКУдалению Из ЯчейкиКУдалению Цикл
					Если ЯчейкиКДальнейшейОбработке.Найти(ЯчейкаКУдалению) = Неопределено Тогда
						ЯчейкиКПересчету.Удалить(ЯчейкаКУдалению);
						УдаленоЯчеек = УдаленоЯчеек + 1;
					КонецЕсли;
				КонецЦикла;
				Если УдаленоЯчеек = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка при расчете значений ячеек по иерархическим группировкам';
											|en = 'An error occurred when calculating cell values by hierarchy groupings'");
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаКПересчету Из ИсходныеДанныеСтрок Цикл
				Если СтрокаКПересчету.Ключ.Количество <> СтрокаКПересчету.Значение Тогда
					ТаблицаИзменений.Вставить(СтрокаКПересчету.Ключ.ИмяОбластиКоличество, СтрокаКПересчету.Ключ.Количество);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			
			ИсходныеДанныеСтрок = Новый Соответствие;
			ЯчейкиКПересчету = Новый Соответствие;
			Для Каждого СтрокаКПересчету Из СтрокиКПересчету.Значение Цикл
				ЯчейкиКПересчету.Вставить(СтрокаКПересчету.Ключ.ИмяОбластиСумма, СтрокаКПересчету.Ключ);
				ЯчейкаОтчета = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтрокаКПересчету.Значение)[0];
				ИсходныеДанныеСтрок.Вставить(СтрокаКПересчету.Ключ, ЯчейкаОтчета.Сумма);
				СтрокаКПересчету.Ключ.Сумма = 0;
			КонецЦикла;
			
			ОбработанныеСтроки = Новый Соответствие;
			Пока ЯчейкиКПересчету.Количество() > 0 Цикл
				ИсходноеКоличество = ЯчейкиКПересчету.Количество();
				ЯчейкиКУдалению = Новый Массив;
				ЯчейкиКДальнейшейОбработке = Новый Массив;
				Для Каждого СтрокаДанных Из СтрокиДанных Цикл
					Если ОбработанныеСтроки.Получить(СтрокаДанных) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЯчейкаОбластиИерархия = СтрокаДанных.ИмяОбластиСуммаИерархия;
					Если Не ЗначениеЗаполнено(ЯчейкаОбластиИерархия) Тогда
						Продолжить;
					ИначеЕсли ЯчейкиКПересчету.Получить(СтрокаДанных.ИмяОбластиСумма) <> Неопределено Тогда
						Если ЯчейкиКДальнейшейОбработке.Найти(ЯчейкаОбластиИерархия) = Неопределено Тогда
							ЯчейкиКДальнейшейОбработке.Добавить(ЯчейкаОбластиИерархия);
						КонецЕсли;
						Продолжить;
					КонецЕсли;
					СтрокаКПересчету = ЯчейкиКПересчету.Получить(ЯчейкаОбластиИерархия);
					Если СтрокаКПересчету <> Неопределено Тогда
						Сумма = ?(Не ЗначениеЗаполнено(СтрокаДанных.Валюта), СтрокаДанных.Сумма, СтрокаДанных.СуммаВал);
						СтрокаКПересчету.Сумма = СтрокаКПересчету.Сумма + Сумма;
					КонецЕсли;
					ОбработанныеСтроки.Вставить(СтрокаДанных, Истина);
					Если ЯчейкиКУдалению.Найти(ЯчейкаОбластиИерархия) = Неопределено Тогда
						ЯчейкиКУдалению.Добавить(ЯчейкаОбластиИерархия);
					КонецЕсли;
				КонецЦикла;
				УдаленоЯчеек = 0;
				Для Каждого ЯчейкаКУдалению Из ЯчейкиКУдалению Цикл
					Если ЯчейкиКДальнейшейОбработке.Найти(ЯчейкаКУдалению) = Неопределено Тогда
						ЯчейкиКПересчету.Удалить(ЯчейкаКУдалению);
						УдаленоЯчеек = УдаленоЯчеек + 1;
					КонецЕсли;
				КонецЦикла;
				Если УдаленоЯчеек = 0
					Или ИсходноеКоличество = ЯчейкиКПересчету.Количество() Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка при расчете значений ячеек по иерархическим группировкам';
											|en = 'An error occurred when calculating cell values by hierarchy groupings'");
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаКПересчету Из ИсходныеДанныеСтрок Цикл
				Если СтрокаКПересчету.Ключ.Сумма <> СтрокаКПересчету.Значение Тогда
					ТаблицаИзменений.Вставить(СтрокаКПересчету.Ключ.ИмяОбластиСумма, СтрокаКПересчету.Ключ.Сумма);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого КлючСтрокиИзменений Из УникальныеСтрокиИзменений Цикл
		ИзмененияСвязанныхЯчеек.Добавить(КлючСтрокиИзменений.Ключ);
	КонецЦикла;
	Результат = Новый Структура("ТаблицаИзменений, ИзмененияСвязанныхЯчеек", ТаблицаИзменений, ИзмененияСвязанныхЯчеек);
	
	Возврат Результат;
	
КонецФункции

#Область ОбходИВыводДанныхВОтчет

Процедура ОбходДанныхОтчета(ПараметрыВывода)
	ДеревоВывода = ПараметрыВывода.ДеревоВывода;
	
	КолонкиТаблицыПоЭлементамОтчета = ПараметрыВывода.КолонкиТаблицыПоЭлементамОтчета;
	ДляРедактирования = ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	ПараметрыВывода.Вставить("ДляРедактирования", ДляРедактирования);
	
	Для Каждого ЭлементВывода Из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			
			СтруктураКолонок = ПараметрыГруппировокКолонок(ПараметрыВывода,
					ПараметрыВывода.ИндексыПоискаИзмерений,
					ЭлементВывода.Строки.Найти("Колонки"));
			
			КолонкиТаблицыПоЭлементамОтчета.Вставить(ЭлементВывода, СтруктураКолонок);
			
			СтрокиОтчета = ЭлементВывода.Строки.Найти("Строки");
			СложнаяТаблица = ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
			ПараметрыТаблицы = ЭлементВывода.ПараметрыТаблицы;
			
			ПараметрыВывода.Вставить("СложнаяТаблица", СложнаяТаблица);
			ПараметрыВывода.Вставить("СтруктураКолонок", СтруктураКолонок);
			ПараметрыВывода.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
			
			ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокиОтчета);
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Функция ВывестиДанныеВОтчет(ПараметрыВывода)
	
	ДеревоВывода = ПараметрыВывода.ДеревоВывода;
	ДляРедактирования = ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	КолонкиТаблицыПоЭлементамОтчета = ПараметрыВывода.КолонкиТаблицыПоЭлементамОтчета;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	
	КоличествоТаблиц = 0;
	КоличествоСтрокСверху = 0;
	
	СтруктураОбластей = СтруктураОбластейМакета(ПараметрыВывода);
	
	ПараметрыВывода.Вставить("ДокументРезультат", ДокументРезультат);
	ПараметрыВывода.Вставить("СтруктураОбластей", СтруктураОбластей);
	ПараметрыВывода.Вставить("ДляРедактирования", ДляРедактирования);
	
	ПредыдущееИмяИзмерения = "";
	ПредыдущийЗаголовок = "";
	ПараметрыТаблицы = Неопределено;
	
	Для Каждого ЭлементВывода Из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "ТекстовыйБлок" Тогда
			
			ВыводитьЗаголовок = НЕ (ЭлементВывода.ТолькоДляПечати
					И ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
			
			Если ВыводитьЗаголовок Тогда
				УстановитьПараметрыВНаименованииДляПечати(ЭлементВывода.НаименованиеДляПечати, ПараметрыВывода.ЗначенияПодстановки);
				ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
				Если КоличествоТаблиц = 0 Тогда
					КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
				КонецЕсли;
				ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			КонецЕсли;
			
		ИначеЕсли ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			
			Если ЭлементВывода.ВыводитьЗаголовокВОтчет = Истина Тогда
				ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 3;
				ПредыдущийЗаголовок = ЭлементВывода.НаименованиеДляПечати;
			ИначеЕсли ПредыдущееИмяИзмерения = "Таблица" Тогда
				ДокументРезультат.Вывести(СтруктураОбластей.ПустаяСтрока, 0);
				КоличествоСтрокСверху = КоличествоСтрокСверху + 1;
			КонецЕсли;
			КоличествоТаблиц = КоличествоТаблиц + 1;
			
			СтруктураКолонок = КолонкиТаблицыПоЭлементамОтчета.Получить(ЭлементВывода);
			Если СтруктураКолонок = Неопределено Тогда
				СтруктураКолонок = ПараметрыГруппировокКолонок(ПараметрыВывода,
						ПараметрыВывода.ИндексыПоискаИзмерений,
						ЭлементВывода.Строки.Найти("Колонки"));
			КонецЕсли;
			
			КоличествоСтрокСверху = КоличествоСтрокСверху + ГлубинаДерева(СтруктураКолонок.Строки) + 1;
			
			СтрокиОтчета = ЭлементВывода.Строки.Найти("Строки");
			СложнаяТаблица = ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
			ПараметрыТаблицы = ЭлементВывода.ПараметрыТаблицы;
			
			ПараметрыВывода.Вставить("СложнаяТаблица", СложнаяТаблица);
			ПараметрыВывода.Вставить("СтруктураКолонок", СтруктураКолонок);
			ПараметрыВывода.Вставить("ПараметрыТаблицы", ПараметрыТаблицы);
			Если ПараметрыТаблицы.Свойство("ДанныеОтчетаДляОформления") Тогда
				СуществующаяТаблица = Неопределено; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ДанныеОтчетаДляОформления
				Если ПараметрыВывода.Свойство("ДанныеОтчетаДляОформления", СуществующаяТаблица)
					И СуществующаяТаблица <> Неопределено Тогда
					Для Каждого Колонка Из ПараметрыТаблицы.ДанныеОтчетаДляОформления.Колонки Цикл
						Если СуществующаяТаблица.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
							СуществующаяТаблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
						КонецЕсли;
					КонецЦикла;
					ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", СуществующаяТаблица);
				Иначе
					ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", ПараметрыТаблицы.ДанныеОтчетаДляОформления.СкопироватьКолонки());
				КонецЕсли;
			Иначе
				ПараметрыВывода.Вставить("ДанныеОтчетаДляОформления", Неопределено);
			КонецЕсли;
			
			ВывестиШапкуТаблицыВОтчет(ПараметрыВывода, ДокументРезультат, СтруктураОбластей, СтруктураКолонок, ЭлементВывода, КоличествоТаблиц);
			
			Если ДляРедактирования
				ИЛИ ПараметрыВывода.РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
				
				КорневаяСтрока = ПараметрыВывода.ДеревоСтрокСпискаРедактирования.Строки.Добавить();
				Если ПустаяСтрока(ПредыдущийЗаголовок) Тогда
					КорневаяСтрока.Представление = НСтр("ru = 'Статьи бюджета';
														|en = 'Budget flow items'");
				Иначе
					КорневаяСтрока.Представление = ПредыдущийЗаголовок;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементВывода.ВидЭлемента) Тогда
					КорневаяСтрока.Картинка = 9;
				Иначе
					КорневаяСтрока.Картинка = 21;
				КонецЕсли;
				КорневаяСтрока.Уровень = 1;
				КорневаяСтрока.ИДТаблицы = Новый УникальныйИдентификатор;
				ПараметрыВывода.Вставить("АдресДобавленияСтрокСпискаРедактирования", КорневаяСтрока);
				КолонкиТаблиц = Неопределено;
				Если Не ПараметрыВывода.Свойство("КолонкиТаблиц", КолонкиТаблиц) Тогда
					КолонкиТаблиц = Новый Соответствие;
				КонецЕсли;
				КолонкиТаблиц.Вставить(КорневаяСтрока.ИДТаблицы, СтруктураКолонок);
				ПараметрыВывода.Вставить("КолонкиТаблиц", КолонкиТаблиц);
				
				Если ПараметрыВывода.ВыводитьПримечания Тогда
					ПараметрыВывода.Примечания.НомерТаблицы = ?(ПараметрыВывода.ВыводитьНомераТаблиц, КоличествоТаблиц, 0);
					ПараметрыВывода.Примечания.НомерПримечания = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета, КоличествоТаблиц);
			
			ПредыдущийЗаголовок = "";
			
		КонецЕсли;
		ПредыдущееИмяИзмерения = ЭлементВывода.ИмяИзмерения;
		
	КонецЦикла;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	Если КоличествоТаблиц = 1 Тогда
		ДокументРезультат.ФиксацияСверху = КоличествоСтрокСверху;
		ДокументРезультат.ФиксацияСлева = 2 + ПараметрыТаблицы.КоличествоДополнительныхКолонок;
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокиОтчета, НакопленныйОтбор = Неопределено, Уровень = 1, СтрокаИерархииАналитики = Неопределено)
	
	СтруктураКолонок = ПараметрыВывода.СтруктураКолонок;
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска = ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования = ПараметрыВывода.ДляРедактирования;
	ПодчиненныеЭлементыВидаБюджета = ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета;
	
	ВыводитьПустыеСтрокиАналитики = Истина;
	НеВыводитьПустыеСтрокиАналитикиДоУровня = 0;
	Если ПараметрыВывода.Свойство("НеВыводитьПустыеСтрокиАналитикиДоУровня")
		И НЕ ПараметрыВывода.НеВыводитьПустыеСтрокиАналитикиДоУровня = Неопределено Тогда
		ВыводитьПустыеСтрокиАналитики = Ложь;
		НеВыводитьПустыеСтрокиАналитикиДоУровня = ПараметрыВывода.НеВыводитьПустыеСтрокиАналитикиДоУровня
	КонецЕсли;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыВывода.Свойство("ВыводИерархииЭлементов") Тогда
		ПараметрыВывода.Вставить("ВыводИерархииЭлементов", Новый Соответствие);
	КонецЕсли;
	
	ТекущийУровеньИерархии = Ложь;
	Если СтрокаИерархииАналитики <> Неопределено
		И СтрокаИерархииАналитики.Строки.Количество() > 0 Тогда
		ТекущийУровеньИерархии = Истина;
	КонецЕсли;
	Если ТекущийУровеньИерархии Тогда
		ИндексСтрокиДерева = СтрокиОтчета.Родитель.Строки.Индекс(СтрокиОтчета);
		КоллекцияСтрокОтчета = СтрокиОтчета.Родитель.Строки;
	Иначе
		КоллекцияСтрокОтчета = СтрокиОтчета.Строки;
	КонецЕсли;
	
	Для Каждого СтрокаОтчета Из КоллекцияСтрокОтчета Цикл
		
		Если ТекущийУровеньИерархии
			И КоллекцияСтрокОтчета.Индекс(СтрокаОтчета) <> ИндексСтрокиДерева Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОтчета.ВыводитьВместеСПодчиненным Тогда
			
			ДобавленОтбор = Ложь;
			Если ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение) Тогда
				НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
			КонецЕсли;
			
		ИначеЕсли СтрокаОтчета.ВыводитьВместеСРодительским Тогда
			
			МассивИзмерений = Новый Массив;
			СписокКВыводу = Новый Массив;
			
			СтрокаДляРасчетаОбъединения = СтрокаОтчета;
			
			// Соответствие, где ключ - имя измерения, а значение - вид аналитики (если вид аналитики = неопределено, тогда это измерение).
			// Имена измерений не могут совпадать с именами аналитик, даже если имеют один тип данных
			// (например, "Подразделение" - измерение, "Подразделения" - аналитика". Произвольная аналитика имеет имя "Ключ_<ИдентификаторПВХ>").
			ВидАналитикиПоИменамИзмерений = Новый Соответствие;
			СоответствиеТипов = Новый Соответствие;
			
			ПерваяИтерация = Истина;
			Пока ПерваяИтерация ИЛИ СтрокаДляРасчетаОбъединения.ВыводитьВместеСПодчиненным Цикл
				
				МассивИзмерений.Вставить(0, СтрокаДляРасчетаОбъединения.ИмяИзмерения);
				ВидАналитикиПоИменамИзмерений.Вставить(СтрокаДляРасчетаОбъединения.ИмяИзмерения, СтрокаДляРасчетаОбъединения.ВидАналитики);
				
				Если СтрНачинаетсяС(СтрокаДляРасчетаОбъединения.ИмяИзмерения, "Период") Тогда
					ТипЗначенияВидаАналитики = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
				Иначе
					ТипЗначенияВидаАналитики = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
						СтрокаДляРасчетаОбъединения.ИмяИзмерения,
						СтрокаДляРасчетаОбъединения.ВидАналитики);
				КонецЕсли;
				
				СоответствиеТипов.Вставить(СтрокаДляРасчетаОбъединения.ИмяИзмерения, ТипЗначенияВидаАналитики);
				СписокКВыводу.Вставить(0, СтрокаДляРасчетаОбъединения);
				СтрокаДляРасчетаОбъединения = СтрокаДляРасчетаОбъединения.Родитель;
				
				ПерваяИтерация = Ложь;
				
			КонецЦикла;
			
			МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИзмерений);
			
			СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета,
					ПодчиненныеЭлементыВидаБюджета);
			
			НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
			НеобязательныеПараметры.Колонка = Неопределено;
			НеобязательныеПараметры.Строка = СписокЭлементовСПодчиненными;
			НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
			НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
			Если ПараметрыВывода.Свойство("РежимФормирования") Тогда
				НеобязательныеПараметры.РежимФормирования = ПараметрыВывода.РежимФормирования;
			КонецЕсли;
			Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
				И ПараметрыВывода.ВыводитьИерархиюЭлементов Тогда
				ЗаполнитьЗначенияСвойств(НеобязательныеПараметры, СтрокаОтчета,
					"ВыводитьИерархиюЭлементов, ВидАналитики");
				НеобязательныеПараметры.РежимФормирования = ПараметрыВывода.РежимФормирования;
				Если СтрокаОтчета.ВыводитьИерархиюЭлементов И ПараметрыВывода.УчитыватьДополнительныйОтборПоИерархии Тогда
					НеобязательныеПараметры.Вставить("ДополнительныйОтбор",
						БюджетнаяОтчетностьРасчетКэшаСервер.ЗначениеРеквизитаЭлементаВидаБюджета(
						СтрокаОтчета.ЭлементОтчета, "ДополнительныйОтбор",
						ПараметрыВывода.КэшРеквизитовЭлементовБюджета.КэшРеквизитов));
				КонецЕсли;
			КонецЕсли;
			Результат = ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, МассивИзмерений, НакопленныйОтбор,
				НеобязательныеПараметры);
			
			Если НеобязательныеПараметры.Свойство("ДополнительныйОтбор") Тогда
				ПараметрыВывода.Вставить("УчитыватьДополнительныйОтборПоИерархии", Истина);
			КонецЕсли;
			
			Если ДляРедактирования Тогда
				ВГруппировкеЕстьРедактируемые = Ложь;
				Для Каждого Измерение Из СписокКВыводу Цикл
					Если Измерение.РедактируемыеЗначения Тогда
						ВГруппировкеЕстьРедактируемые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВГруппировкеЕстьРедактируемые Тогда
					ЕстьСтрокаСПустымиЗначениями = Ложь;
					Для Каждого СтрокаРезультата Из Результат Цикл
						ВСтрокеЕстьЗаполненные = Ложь;
						Для Каждого Измерение Из СписокКВыводу Цикл
							Если Не Измерение.РедактируемыеЗначения Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаРезультата[Измерение.ИмяИзмерения]) Тогда
								ВСтрокеЕстьЗаполненные = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ВСтрокеЕстьЗаполненные Тогда
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьСтрокаСПустымиЗначениями
						И (ВыводитьПустыеСтрокиАналитики ИЛИ НеВыводитьПустыеСтрокиАналитикиДоУровня < Уровень) Тогда
						НоваяСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НакопленныйОтбор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			Если Не Результат.Количество() Тогда
				Результат.Добавить();
			КонецЕсли;
			
			Для Каждого Выборка Из Результат Цикл
				
				ТекущийОтбор = ОбщегоНазначения.СкопироватьРекурсивно(НакопленныйОтбор);
				Для Каждого Измерение Из МассивИзмерений Цикл
					Значение = Выборка[Измерение];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						ТипИзмерения = СоответствиеТипов[Измерение];
						ВидАналитики = ВидАналитикиПоИменамИзмерений.Получить(Измерение);
						Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ТипИзмерения, ВидАналитики) Тогда
							БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипИзмерения);
						Иначе
							Значение = ТипИзмерения.ПривестиЗначение(Значение);
						КонецЕсли;
					КонецЕсли;
					ТекущийОтбор.Вставить(Измерение, Значение);
				КонецЦикла;
				
				ОбходЯчеекТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, СтруктураКолонок, ТекущийОтбор);
				
				ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, ТекущийОтбор, Уровень + 1);
				
			КонецЦикла;
			
		Иначе
		
			ЗначениеПредопределено = Ложь;
			Если СтрокаОтчета.РедактируемыеЗначения = Ложь Тогда
			
				ЭтоФиксКолонка = 
					СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
					
					ЗначениеПредопределено = СтрокаОтчета.ЭтоАналитикаПрочее
						ИЛИ ЭтоФиксКолонка ИЛИ ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение);
			КонецЕсли;
				
			// Вывод области.
			Если ЗначениеПредопределено Тогда
				
				ДобавленОтбор = Ложь;
				Если Не ЭтоФиксКолонка Тогда
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
					ДобавленОтбор = Истина;
				КонецЕсли;
				
				ВыводитьВОтчет = Истина;
				// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы.
				Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					Если СтрокаОтчета.Родитель.Строки[0] = СтрокаОтчета Тогда
						ВыводитьВОтчет = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					
					ОбходЯчеекТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор,
						СтрокаИерархииАналитики);
					
				КонецЕсли;
				
				ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, СтрокаИерархииАналитики);
				
				Если ДобавленОтбор Тогда
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
				КонецЕсли;
				
			Иначе
				
				Если ТекущийУровеньИерархии Тогда
					
					Результат = СтрокаИерархииАналитики.Строки;
					ДляРедактирования = Ложь;
					
				Иначе
					
					СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СтрокаОтчета.ЭлементОтчета, ПодчиненныеЭлементыВидаБюджета);
					
					НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
					НеобязательныеПараметры.Колонка = Неопределено;
					НеобязательныеПараметры.Строка = СписокЭлементовСПодчиненными;
					НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
					НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
					Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
						И ПараметрыВывода.ВыводитьИерархиюЭлементов Тогда
						ЗаполнитьЗначенияСвойств(НеобязательныеПараметры, СтрокаОтчета,
							"ВыводитьИерархиюЭлементов, ВидАналитики");
						НеобязательныеПараметры.РежимФормирования = ПараметрыВывода.РежимФормирования;
						Если СтрокаОтчета.ВыводитьИерархиюЭлементов И ПараметрыВывода.УчитыватьДополнительныйОтборПоИерархии Тогда
							НеобязательныеПараметры.Вставить("ДополнительныйОтбор",
								БюджетнаяОтчетностьРасчетКэшаСервер.ЗначениеРеквизитаЭлементаВидаБюджета(
								СтрокаОтчета.ЭлементОтчета, "ДополнительныйОтбор",
								ПараметрыВывода.КэшРеквизитовЭлементовБюджета.КэшРеквизитов));
						КонецЕсли;
					КонецЕсли;
					Результат = ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, СтрокаОтчета.ИмяИзмерения,
						НакопленныйОтбор, НеобязательныеПараметры);
					
					Если ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
						Результат = Результат.Строки;
						ДляРедактирования = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ДляРедактирования Тогда
					Если СтрокаОтчета.РедактируемыеЗначения Тогда
						ЕстьСтрокаСПустымиЗначениями = Ложь;
						Для Каждого СтрокаРезультата Из Результат Цикл
							Если ЗначениеЗаполнено(СтрокаРезультата[СтрокаОтчета.ИмяИзмерения]) Тогда
								Продолжить;
							КонецЕсли;
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЦикла;
						Если Не ЕстьСтрокаСПустымиЗначениями
							И (ВыводитьПустыеСтрокиАналитики ИЛИ НеВыводитьПустыеСтрокиАналитикиДоУровня < Уровень) Тогда
							Результат.Добавить();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
					
				ВыборкаИзИерархии = (ТипЗнч(Результат) = Тип("КоллекцияСтрокДереваЗначений"));
			
				Если Не Результат.Количество() Тогда
					Если Не ВыборкаИзИерархии Тогда
						Результат.Добавить();
					ИначеЕсли Результат.Родитель = Неопределено Тогда
						Результат.Добавить();
						Результат[0].ЭтоГруппа = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого Выборка Из Результат Цикл
					
					Значение = Выборка[СтрокаОтчета.ИмяИзмерения];
					
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Если БюджетнаяОтчетностьКлиентСервер.ЭтоПолеПериода(СтрокаОтчета.ИмяИзмерения) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "ПоказательБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "СтатьяБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
							СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ВидАналитики);
						Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ТипЗначения, СтрокаОтчета.ВидАналитики) Тогда
							Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипЗначения);
						Иначе
							Значение = ТипЗначения.ПривестиЗначение(Значение);
						КонецЕсли;
						Если ВыборкаИзИерархии Тогда
							Выборка.ЭтоГруппа = Ложь;
						КонецЕсли;
					ИначеЕсли ВыборкаИзИерархии
						И Выборка.Родитель <> Неопределено
						И Не Выборка.Родитель.ЭтоГруппа
						И Значение = Выборка.Родитель[СтрокаОтчета.ИмяИзмерения] Тогда
						// Для справочников с иерархией элементов родительская строка присутствует среди подчиненных
						Продолжить;
					КонецЕсли;
					
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
					
					ОбходЯчеекТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, ?(
						ВыборкаИзИерархии, Выборка, Неопределено));

					ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, ?(
						ВыборкаИзИерархии И Выборка.ЭтоГруппа, Выборка, Неопределено));
						
					Если ВыборкаИзИерархии И Не Выборка.ЭтоГруппа И Выборка.Строки.Количество() > 0 Тогда
						ОбходДанныхТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, НакопленныйОтбор, Уровень + 1, Выборка);
					КонецЕсли;

					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
					
				КонецЦикла;
				
				Если СтрокаОтчета.ВыводитьИерархиюЭлементов
					И ПараметрыВывода.ВыводитьИерархиюЭлементов
					И СтрокаИерархииАналитики = Неопределено Тогда
					
					Если НеобязательныеПараметры.Свойство("ДополнительныйОтбор") Тогда
						// Строки со значениями аналитик, не попавших в отбор, будут удалены из ДанныеЯчеек
						НеобязательныеПараметры.Строка = СтрокаОтчета.ЭлементОтчета;
						СтрокиДанныхЯчеек = ПолучитьВыборкуЯчеек(ДанныеЯчеек, НакопленныйОтбор, НеобязательныеПараметры);
						ТребуетсяПересчетИтоговЯчеек = Ложь;
						Для Каждого СтрокаДанныхЯчеек Из СтрокиДанныхЯчеек Цикл
							Если Результат.Найти(СтрокаДанныхЯчеек[СтрокаОтчета.ИмяИзмерения], СтрокаОтчета.ИмяИзмерения, Истина) = Неопределено Тогда
								Если Не ТребуетсяПересчетИтоговЯчеек
									И (ЗначениеЗаполнено(СтрокаДанныхЯчеек.СуммаОборот)
									Или ЗначениеЗаполнено(СтрокаДанныхЯчеек.СуммаВалОборот)
									Или ЗначениеЗаполнено(СтрокаДанныхЯчеек.Количество)) Тогда
									ТребуетсяПересчетИтоговЯчеек = Истина;
								КонецЕсли;
								ДанныеЯчеек.Удалить(СтрокаДанныхЯчеек);
							КонецЕсли;
						КонецЦикла;
						Если (НакопленныйОтбор.Свойство("СтатьяБюджетов") Или НакопленныйОтбор.Свойство("ПоказательБюджетов"))
							И ТребуетсяПересчетИтоговЯчеек Тогда
							ПараметрыВывода.Вставить("ТребуетсяПересчетИтоговЯчеек", Истина);
						КонецЕсли;
					КонецЕсли;
					
					КлючОтбора = СтрокаОтчета.ИмяИзмерения + ОбщегоНазначения.КонтрольнаяСуммаСтрокой(НакопленныйОтбор);
					Если ПараметрыВывода.ВыводИерархииЭлементов.Получить(КлючОтбора) = Неопределено Тогда
						ПараметрыВывода.ВыводИерархииЭлементов.Вставить(КлючОтбора, Результат);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; // ЗначениеПредопределено Тогда
			
		КонецЕсли;// Если ВыводитьВместеСПодчиненным
		
	КонецЦикла;
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ПараметрыВывода - см. ДобавитьПараметрВывода.ПараметрыВывода
// 	СтрокиОтчета - Структура - Описание:
// 	* Строки - Массив Из см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйДеревоВывода - по факту строки дерева значений
// 	СчетчикТаблиц - Число - Описание
// 	НакопленныйОтбор - Структура - Описание:
// * УспешныеЗамены - Соответствие -
// * ПарыЗамен - Соответствие -
// * УчитыватьПрикладныеПравила - Булево -
// * ПривилегированнаяЗапись - Булево -
// * ВключатьБизнесЛогику - Булево -
// * ПомечатьНаУдаление - Булево -
// * УдалятьНепосредственно - Булево -
// 	Уровень - Число - Описание
// 	СчетчикСтрок - Число - Описание
//  СтрокаИерархииАналитики - СтрокаДереваЗначений - Описание
Процедура ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокиОтчета, СчетчикТаблиц, НакопленныйОтбор = Неопределено, Уровень = 1, СчетчикСтрок = 0, СтрокаИерархииАналитики = Неопределено) Экспорт
	
	ДокументРезультат = ПараметрыВывода.ДокументРезультат;
	СтруктураОбластей = ПараметрыВывода.СтруктураОбластей;
	СтруктураКолонок = ПараметрыВывода.СтруктураКолонок;
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска = ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования = ПараметрыВывода.ДляРедактирования;
	ПараметрыТаблицы = ПараметрыВывода.ПараметрыТаблицы;
	ПодчиненныеЭлементыВидаБюджета = ПараметрыВывода.ПодчиненныеЭлементыВидаБюджета;
	
	ВыводитьПустыеСтрокиАналитики = Истина;
	НеВыводитьПустыеСтрокиАналитикиДоУровня = 0;
	Если ПараметрыВывода.Свойство("НеВыводитьПустыеСтрокиАналитикиДоУровня")
		И НЕ ПараметрыВывода.НеВыводитьПустыеСтрокиАналитикиДоУровня = Неопределено Тогда
		ВыводитьПустыеСтрокиАналитики = Ложь;
		НеВыводитьПустыеСтрокиАналитикиДоУровня = ПараметрыВывода.НеВыводитьПустыеСтрокиАналитикиДоУровня
	КонецЕсли;
	
	Если НакопленныйОтбор = Неопределено Тогда
		НакопленныйОтбор = Новый Структура;
	КонецЕсли;
	
	ОтрабатываетсяУровней = 8;
	
	УровеньГруппировок = Мин(Уровень, ОтрабатываетсяУровней);
	ПрефиксОбласти = "Группировка" + УровеньГруппировок;
	
	ОтображатьНумерациюСтрок = ПараметрыТаблицы.ОтображатьНумерациюСтрок;
	
	ТекущийУровеньИерархии = Ложь;
	Если СтрокаИерархииАналитики <> Неопределено
		И СтрокаИерархииАналитики.Строки.Количество() > 0 Тогда
		ТекущийУровеньИерархии = Истина;
	КонецЕсли;
	Если ТекущийУровеньИерархии Тогда
		ИндексСтрокиДерева = СтрокиОтчета.Родитель.Строки.Индекс(СтрокиОтчета);
		КоллекцияСтрокОтчета = СтрокиОтчета.Родитель.Строки;
	Иначе
		КоллекцияСтрокОтчета = СтрокиОтчета.Строки;
	КонецЕсли;
	
	Для Каждого СтрокаОтчета Из КоллекцияСтрокОтчета Цикл
		
		Если ТекущийУровеньИерархии
			И КоллекцияСтрокОтчета.Индекс(СтрокаОтчета) <> ИндексСтрокиДерева Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбластиМакета = ПрефиксОбласти;
		Если УровеньГруппировок = ОтрабатываетсяУровней
			ИЛИ Не СтрокаОтчета.Строки.Количество() Тогда
			ИмяОбластиМакета = ИмяОбластиМакета + "Финал";
		КонецЕсли;
		
		ОбластьНачало = СтруктураОбластей[ИмяОбластиМакета + "НачалоТаблицы" + ?(ОтображатьНумерациюСтрок, "НумерацияСтрок", "")]; // ТабличныйДокумент
		ОбластьЗначение = СтруктураОбластей[ИмяОбластиМакета + "Значение"]; // ТабличныйДокумент
		ОбластьДопСекция = СтруктураОбластей[ИмяОбластиМакета + "ДополнительнаяСекция"]; // ТабличныйДокумент
		ОбластьПримечание = ?(ПараметрыВывода.ВыводитьПримечания,
									СтруктураОбластей[ИмяОбластиМакета + "Примечание"], Неопределено); // ТабличныйДокумент
		
		Если СтрокаОтчета.ВыводитьВместеСПодчиненным Тогда
			
			ДобавленОтбор = Ложь;
			Если ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение) Тогда
				НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
				ДобавленОтбор = Истина;
			КонецЕсли;
			
			ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень, СчетчикСтрок);
			
			Если ДобавленОтбор Тогда
				НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
			КонецЕсли;
			
		ИначеЕсли СтрокаОтчета.ВыводитьВместеСРодительским Тогда
			
			МассивИзмерений = Новый Массив;
			СписокКВыводу = Новый Массив;
			
			СтрокаДляРасчетаОбъединения = СтрокаОтчета;
			
			Соединенных = -1;
			
			// Соответствие, где ключ - имя измерения, а значение - вид аналитики (если вид аналитики = неопределено, тогда это измерение).
			// Имена измерений не могут совпадать с именами аналитик, даже если имеют один тип данных
			// (например, "Подразделение" - измерение, "Подразделения" - аналитика". Произвольная аналитика имеет имя "Ключ_<ИдентификаторПВХ>").
			ВидАналитикиПоИменамИзмерений = Новый Соответствие;
			СоответствиеТипов = Новый Соответствие;
			
			ПерваяИтерация = Истина;
			Пока ПерваяИтерация ИЛИ СтрокаДляРасчетаОбъединения.ВыводитьВместеСПодчиненным Цикл
				
				МассивИзмерений.Вставить(0, СтрокаДляРасчетаОбъединения.ИмяИзмерения);
				ВидАналитикиПоИменамИзмерений.Вставить(СтрокаДляРасчетаОбъединения.ИмяИзмерения, СтрокаДляРасчетаОбъединения.ВидАналитики);
				
				Если СтрНачинаетсяС(СтрокаДляРасчетаОбъединения.ИмяИзмерения, "Период") Тогда
					ТипЗначенияВидаАналитики = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
				Иначе
					ТипЗначенияВидаАналитики = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
						СтрокаДляРасчетаОбъединения.ИмяИзмерения,
						СтрокаДляРасчетаОбъединения.ВидАналитики);
				КонецЕсли;
				
				СоответствиеТипов.Вставить(СтрокаДляРасчетаОбъединения.ИмяИзмерения, ТипЗначенияВидаАналитики);
				СписокКВыводу.Вставить(0, СтрокаДляРасчетаОбъединения);
				Соединенных = Соединенных + 1
					+ БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДляРасчетаОбъединения);
				СтрокаДляРасчетаОбъединения = СтрокаДляРасчетаОбъединения.Родитель;
				
				ПерваяИтерация = Ложь;
				
			КонецЦикла;
			Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - Соединенных;
			
			МассивИзмерений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИзмерений);
			
			СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета,
					ПодчиненныеЭлементыВидаБюджета);
			
			НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
			НеобязательныеПараметры.Колонка = Неопределено;
			НеобязательныеПараметры.Строка = СписокЭлементовСПодчиненными;
			НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
			НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
			Результат = ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, МассивИзмерений, НакопленныйОтбор, НеобязательныеПараметры);
			
			Если ДляРедактирования Тогда
				ВГруппировкеЕстьРедактируемые = Ложь;
				Для Каждого Измерение Из СписокКВыводу Цикл
					Если Измерение.РедактируемыеЗначения Тогда
						ВГруппировкеЕстьРедактируемые = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВГруппировкеЕстьРедактируемые Тогда
					ЕстьСтрокаСПустымиЗначениями = Ложь;
					Для Каждого СтрокаРезультата Из Результат Цикл
						ВСтрокеЕстьЗаполненные = Ложь;
						Для Каждого Измерение Из СписокКВыводу Цикл
							Если Не Измерение.РедактируемыеЗначения Тогда
								Продолжить;
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаРезультата[Измерение.ИмяИзмерения]) Тогда
								ВСтрокеЕстьЗаполненные = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не ВСтрокеЕстьЗаполненные Тогда
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьСтрокаСПустымиЗначениями
						И (ВыводитьПустыеСтрокиАналитики ИЛИ НеВыводитьПустыеСтрокиАналитикиДоУровня < Уровень) Тогда
						НоваяСтрока = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, НакопленныйОтбор);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			Если Не Результат.Количество()
				И СтрокаИерархииАналитики = Неопределено Тогда
				Результат.Добавить();
			КонецЕсли;
			
			Для Каждого Выборка Из Результат Цикл
				
				ТекущийОтбор = ОбщегоНазначения.СкопироватьРекурсивно(НакопленныйОтбор);
				Для Каждого Измерение Из МассивИзмерений Цикл
					Значение = Выборка[Измерение];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						ТипИзмерения = СоответствиеТипов[Измерение];
						ВидАналитики = ВидАналитикиПоИменамИзмерений.Получить(Измерение);
						Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ТипИзмерения, ВидАналитики) Тогда
							БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипИзмерения);
						Иначе
							Значение = ТипИзмерения.ПривестиЗначение(Значение);
						КонецЕсли;
					КонецЕсли;
					ТекущийОтбор.Вставить(Измерение, Значение);
				КонецЦикла;
				
				ПервыйЭлемент = Истина;
				СчетчикСтрок = СчетчикСтрок + 1;
				ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
				НакопленныйТекстГруппировки = "";
				
				Для Каждого ВыводимаяСтрока Из СписокКВыводу Цикл
					
					Если ПервыйЭлемент Тогда
						Область = ОбластьНачало; // ТабличныйДокумент
					Иначе
						Область = ОбластьДопСекция; // ТабличныйДокумент
					КонецЕсли;
					
					Значение = Выборка[ВыводимаяСтрока.ИмяИзмерения];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						ТипИзмерения = СоответствиеТипов[ВыводимаяСтрока.ИмяИзмерения];
						ВидАналитики = ВыводимаяСтрока.ВидАналитики;
						Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ТипИзмерения, ВидАналитики) Тогда
							БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипИзмерения);
						Иначе
							Значение = ТипИзмерения.ПривестиЗначение(Значение);
						КонецЕсли;
					КонецЕсли;
					
					ТекстГруппировки = ТекстГруппировки(Значение,
							ВыводимаяСтрока,
							ПараметрыВывода);
					
					НакопленныйТекстГруппировки = НакопленныйТекстГруппировки + ?(ПервыйЭлемент,"",";") + ТекстГруппировки;
					
					Область.Параметры.Группировка = ТекстГруппировки;
					
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода,
							Значение,
							ТекущийОтбор,
							СтрокаОтчета);
					
					Если ПервыйЭлемент Тогда
						ИДПервойГруппировки = ПараметрыВывода.ДанныеРасшифровки[Расшифровка].ИДГруппировки;
					Иначе
						ПараметрыВывода.ДанныеРасшифровки[Расшифровка].Вставить("ИДГруппировки", ИДПервойГруппировки);
					КонецЕсли;
					
					Область.Параметры.Расшифровка = Расшифровка;
					
					Если ПервыйЭлемент Тогда
						Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
							Область.Параметры["НомерСтроки"] = СчетчикСтрок;
						КонецЕсли;
						ОбластьВывода = ДокументРезультат.Вывести(Область, Уровень - 1);
					Иначе
						ОбластьВывода = ДокументРезультат.Присоединить(Область, Уровень - 1);
					КонецЕсли;
					
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.Область = ОбластьДопСекция;
					НаборПараметров.Значение = Значение;
					НаборПараметров.СтрокаОтчета = ВыводимаяСтрока;
					НаборПараметров.ЭлементОтчета = СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета;
					НаборПараметров.Колонка = Неопределено;
					
					ДобавитьОбластьОформления(НаборПараметров,
							ОбластьВывода,
							ТекущийОтбор,
							СчетчикТаблиц,
							СчетчикСтрок,
							Неопределено);
					
					ВывестиДополнительныеПоля(ДокументРезультат,
							НаборПараметров,
							ОбластьВывода,
							ТекущийОтбор,
							СчетчикСтрок,
							СчетчикТаблиц);
					
					ПервыйЭлемент = Ложь;
					
				КонецЦикла;
				
				ПараметрыОбъединения = Новый Структура;
				ПараметрыОбъединения.Вставить("ОбластьВывода", ОбластьВывода);
				ПараметрыОбъединения.Вставить("ОбластьДопСекция", ОбластьДопСекция);
				ПараметрыОбъединения.Вставить("Объединить", Объединить);
				ПараметрыОбъединения.Вставить("ЭлементОтчета", СписокКВыводу[СписокКВыводу.ВГраница()].ЭлементОтчета);
				ОбъединитьНеиспользуемыеЯчейки(ДокументРезультат,
						ПараметрыОбъединения,
						ПараметрыВывода,
						ТекущийОтбор,
						СчетчикТаблиц,
						СчетчикСтрок);
				
				ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, ТекущийОтбор);
				ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, НакопленныйТекстГруппировки, ПараметрыВывода, ОбластьВывода,
					?(СписокКВыводу.Количество() > 1, Истина, Ложь));
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, ТекущийОтбор, Уровень + 1, СчетчикСтрок);
				УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				
			КонецЦикла;
			
		Иначе
		
			ЗначениеПредопределено = Ложь;
			Если СтрокаОтчета.РедактируемыеЗначения = Ложь Тогда
			
				ЭтоФиксКолонка = 
					СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
					ИЛИ СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
					
					ЗначениеПредопределено = СтрокаОтчета.ЭтоАналитикаПрочее
						ИЛИ ЭтоФиксКолонка ИЛИ ЗначениеЗаполнено(СтрокаОтчета.ФиксированноеЗначение);
			КонецЕсли;
				
			// Вывод области.
			Если ЗначениеПредопределено Тогда
				
				ДобавленОтбор = Ложь;
				Если Не ЭтоФиксКолонка Тогда
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ФиксированноеЗначение);
					ДобавленОтбор = Истина;
				КонецЕсли;
				
				ВыводитьВОтчет = Истина;
				// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы.
				Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					Если СтрокаОтчета.Родитель.Строки[0] = СтрокаОтчета Тогда
						ВыводитьВОтчет = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					
					ТекстГруппировки = ТекстГруппировки(СтрокаОтчета.ФиксированноеЗначение,
							СтрокаОтчета,
							ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода,
							СтрокаОтчета.ФиксированноеЗначение,
							НакопленныйОтбор,
							СтрокаОтчета);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры["НомерСтроки"] = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.Область = ОбластьДопСекция;
					НаборПараметров.Значение = СтрокаОтчета.ФиксированноеЗначение;
					НаборПараметров.СтрокаОтчета = СтрокаОтчета;
					НаборПараметров.ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
					НаборПараметров.Колонка = Неопределено;
					
					ДобавитьОбластьОформления(НаборПараметров,
							ОбластьВывода,
							НакопленныйОтбор, 
							СчетчикТаблиц,
							СчетчикСтрок,
							Неопределено);
					
					ВывестиДополнительныеПоля(ДокументРезультат,
							НаборПараметров,
							ОбластьВывода,
							ТекущийОтбор,
							СчетчикСтрок,
							СчетчикТаблиц);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок
						- БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаОтчета);
					
					ПараметрыОбъединения = Новый Структура;
					ПараметрыОбъединения.Вставить("ОбластьВывода", ОбластьВывода);
					ПараметрыОбъединения.Вставить("ОбластьДопСекция", ОбластьДопСекция);
					ПараметрыОбъединения.Вставить("Объединить", Объединить);
					ПараметрыОбъединения.Вставить("ЭлементОтчета", СтрокаОтчета.ЭлементОтчета);
					ОбъединитьНеиспользуемыеЯчейки(ДокументРезультат, ПараметрыОбъединения, ПараметрыВывода, ТекущийОтбор,
						СчетчикТаблиц, СчетчикСтрок);
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание,
						СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, , ?(СтрокаОтчета.ВыводитьИерархиюЭлементов, СтрокаИерархииАналитики, Неопределено));
					ДобавитьСтрокуДереваСпискаРедактирования(СтрокаОтчета.ФиксированноеЗначение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода, ОбластьВывода);
					
				КонецЕсли;
				
				ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень + 1, СчетчикСтрок,
						СтрокаИерархииАналитики);
				
				Если ВыводитьВОтчет Тогда
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);
				КонецЕсли;
				
				Если ДобавленОтбор Тогда
					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
				КонецЕсли;
				
			Иначе
				
				ВыводИерархииЭлементов = Неопределено;
				Если ТекущийУровеньИерархии Тогда
					Результат = СтрокаИерархииАналитики.Строки;
					ДляРедактирования = Ложь;
				ИначеЕсли ПараметрыВывода.Свойство("ВыводИерархииЭлементов", ВыводИерархииЭлементов) Тогда
					ХешСуммаОтбора = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(НакопленныйОтбор);
					Результат = ВыводИерархииЭлементов.Получить(СтрокаОтчета.ИмяИзмерения + ХешСуммаОтбора);
					Если Результат = Неопределено Тогда
						ВыводИерархииЭлементов = Неопределено;
					Иначе
						ДляРедактирования = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаИерархииАналитики = Неопределено
					И ВыводИерархииЭлементов = Неопределено Тогда
					
					СписокЭлементовСПодчиненными = СписокПодчиненныхЭлементов(СтрокаОтчета.ЭлементОтчета, ПодчиненныеЭлементыВидаБюджета);
					
					НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
					НеобязательныеПараметры.Колонка = Неопределено;
					НеобязательныеПараметры.Строка = СписокЭлементовСПодчиненными;
					НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
					НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
					Результат = ПолучитьВыборкуЯчеекИерархически(ДанныеЯчеек, СтрокаОтчета.ИмяИзмерения, НакопленныйОтбор, НеобязательныеПараметры);
					
				КонецЕсли;
				
				Если ДляРедактирования Тогда
					Если СтрокаОтчета.РедактируемыеЗначения Тогда
						ЕстьСтрокаСПустымиЗначениями = Ложь;
						Для Каждого СтрокаРезультата Из Результат Цикл
							Если ЗначениеЗаполнено(СтрокаРезультата[СтрокаОтчета.ИмяИзмерения]) Тогда
								Продолжить;
							КонецЕсли;
							ЕстьСтрокаСПустымиЗначениями = Истина;
							Прервать;
						КонецЦикла;
						Если Не ЕстьСтрокаСПустымиЗначениями
							И (ВыводитьПустыеСтрокиАналитики ИЛИ НеВыводитьПустыеСтрокиАналитикиДоУровня < Уровень) Тогда
							Результат.Добавить();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Не Результат.Количество()
					И СтрокаИерархииАналитики = Неопределено Тогда
					Результат.Добавить();
				КонецЕсли;
				
				ВыборкаИзИерархии = (ТипЗнч(Результат) = Тип("КоллекцияСтрокДереваЗначений"));
				
				Для Каждого Выборка Из Результат Цикл
					
					Значение = Выборка[СтрокаОтчета.ИмяИзмерения];
					
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Если БюджетнаяОтчетностьКлиентСервер.ЭтоПолеПериода(СтрокаОтчета.ИмяИзмерения) Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "ПоказательБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтчета.ИмяИзмерения = "СтатьяБюджетов" Тогда
							Продолжить;
						КонецЕсли;
						ТипЗначения = ФинансоваяОтчетностьПовтИсп.ТипЗначенияВидаАналитики(
							СтрокаОтчета.ИмяИзмерения, СтрокаОтчета.ВидАналитики);
						Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ТипЗначения, СтрокаОтчета.ВидАналитики) Тогда
							Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(Значение, ТипЗначения);
						Иначе
							Значение = ТипЗначения.ПривестиЗначение(Значение);
						КонецЕсли;
					ИначеЕсли ВыборкаИзИерархии
						И Выборка.Родитель <> Неопределено
						И Не Выборка.Родитель.ЭтоГруппа
						И Значение = Выборка.Родитель[СтрокаОтчета.ИмяИзмерения] Тогда
						// Для справочников с иерархией элементов родительская строка присутствует среди подчиненных
						Продолжить;
					КонецЕсли;
					
					НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, Значение);
					
					ТекстГруппировки = ТекстГруппировки(Значение,
						СтрокаОтчета,
						ПараметрыВывода);
					
					ОбластьНачало.Параметры.Группировка = ТекстГруппировки;
					Расшифровка = ПолучитьРасшифровкуГруппировки(ПараметрыВывода, Значение, НакопленныйОтбор, СтрокаОтчета);
					СчетчикСтрок = СчетчикСтрок + 1;
					ПараметрыВывода.Вставить("СчетчикСтрок", СчетчикСтрок);
					
					ОбластьНачало.Параметры.Расшифровка = Расшифровка;
					Если ПараметрыВывода.ПараметрыТаблицы.ОтображатьНумерациюСтрок Тогда
						ОбластьНачало.Параметры.НомерСтроки = СчетчикСтрок;
					КонецЕсли;
					
					ОбластьВывода = ДокументРезультат.Вывести(ОбластьНачало, Уровень - 1);
					
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.Область = ОбластьДопСекция;
					НаборПараметров.Значение = Значение;
					НаборПараметров.СтрокаОтчета = СтрокаОтчета;
					НаборПараметров.ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
					НаборПараметров.Колонка = Неопределено;
					
					ДобавитьОбластьОформления(НаборПараметров, ОбластьВывода, НакопленныйОтбор,
						СчетчикТаблиц, СчетчикСтрок, Неопределено);
					
					ВывестиДополнительныеПоля(ДокументРезультат, НаборПараметров, ОбластьВывода, ТекущийОтбор,
						СчетчикСтрок, СчетчикТаблиц);
					
					Объединить = ПараметрыТаблицы.КоличествоДополнительныхКолонок - 
							БюджетнаяОтчетностьРасчетКэшаСервер.КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаОтчета);
					
					ПараметрыОбъединения = Новый Структура;
					ПараметрыОбъединения.Вставить("ОбластьВывода", ОбластьВывода);
					ПараметрыОбъединения.Вставить("ОбластьДопСекция", ОбластьДопСекция);
					ПараметрыОбъединения.Вставить("Объединить", Объединить);
					ПараметрыОбъединения.Вставить("ЭлементОтчета", СтрокаОтчета.ЭлементОтчета);
					ОбъединитьНеиспользуемыеЯчейки(ДокументРезультат, ПараметрыОбъединения, ПараметрыВывода, ТекущийОтбор,
						СчетчикТаблиц, СчетчикСтрок);
					
					ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание,
						СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, , ?(ВыборкаИзИерархии, Выборка, Неопределено));
					
					ДобавитьСтрокуДереваСпискаРедактирования(Значение, СтрокаОтчета, ТекстГруппировки, ПараметрыВывода,
						ОбластьВывода);

					ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень + 1,
						СчетчикСтрок, ?(ВыборкаИзИерархии И Выборка.ЭтоГруппа, Выборка, Неопределено));
						
					Если ВыборкаИзИерархии И Не Выборка.ЭтоГруппа И Выборка.Строки.Количество() > 0 Тогда
						ВывестиТаблицуВОтчет(ПараметрыВывода, СтрокаОтчета, СчетчикТаблиц, НакопленныйОтбор, Уровень
							+ 1, СчетчикСтрок, Выборка);
					КонецЕсли;
					
					УстановитьРодителяСтрокиСпискаРедактирования(ПараметрыВывода);

					НакопленныйОтбор.Удалить(СтрокаОтчета.ИмяИзмерения);
					
				КонецЦикла;
				
			КонецЕсли; // ЗначениеПредопределено Тогда
			
		КонецЕсли;// Если ВыводитьВместеСПодчиненным
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбходЯчеекТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, СтрокаИерархииАналитики = Неопределено)
	
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска = ПараметрыВывода.ИндексыПоискаИзмерений;
	СтруктураЯчеек = ПараметрыВывода.СтруктураЯчеек;
	СложнаяТаблица = ПараметрыВывода.СложнаяТаблица;
	ДанныеЯчеекДобавленныеСтроки = ПараметрыВывода.ДанныеЯчеекДобавленныеСтроки;
	
	ЭтоИерархияГруппыАналитики = ТипЗнч(СтрокаИерархииАналитики) = Тип("СтрокаДереваЗначений")
								И СтрокаИерархииАналитики.ЭтоГруппа;
	
	Для Каждого Колонка Из СтруктураКолонок.Строки Цикл
		
		ДобавленОтбор = Ложь;
		ЭтоПоказатель = СтрНайти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка =
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если Не ЭтоФиксКолонка
			И Не ЭтоПоказатель Тогда
			НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
			ДобавленОтбор = Истина;
		КонецЕсли;
		
		Если Колонка.Строки.Количество() Тогда
			ОбходЯчеекТаблицыОтчета(ПараметрыВывода, СтрокаОтчета, Колонка, НакопленныйОтбор, СтрокаИерархииАналитики);
		Иначе
			
			ВыводитьЗначение = Истина;
			Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если СтрокаОтчета.Строки.Количество()
					И СтрокаОтчета.Строки[0].ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					ВыводитьЗначение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КолонкаФильтра = Колонка;
			Если НЕ СложнаяТаблица Тогда
				Если ЭтоПоказатель Тогда
					КолонкаФильтра = КолонкаФильтра.Родитель;
				КонецЕсли;
			КонецЕсли;
			
			Если КолонкаФильтра <> Неопределено Тогда
				КолонкаФильтра = КолонкаФильтра.ЭлементОтчета;
			КонецЕсли;
				
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаОтчета.ЭлементОтчета);
			Если ЗначениеЗаполнено(КолонкаФильтра) Тогда
				СтруктураПоиска.Вставить("Колонка", КолонкаФильтра);
			КонецЕсли;
			
			СтрокиСтруктуры = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСтруктуры.Количество() Тогда
				ЯчейкаОтчета = СтрокиСтруктуры[0];
			Иначе
				ВыводитьЗначение = Ложь;
			КонецЕсли;
			
			Если ВыводитьЗначение Тогда
				
				НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
				НеобязательныеПараметры.Колонка = КолонкаФильтра;
				НеобязательныеПараметры.Строка = СтрокаОтчета.ЭлементОтчета;
				НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
				НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
				Строки = ПолучитьВыборкуЯчеек(ДанныеЯчеек, НакопленныйОтбор, НеобязательныеПараметры);
				
				Если Строки.Количество() = 0 Тогда
					НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеекДобавленныеСтроки, ЯчейкаОтчета, НакопленныйОтбор, КолонкаФильтра);
					Строки.Добавить(НоваяСтрока);
				КонецЕсли;
				Если СтрокаИерархииАналитики <> Неопределено И СтрокаИерархииАналитики.Строки.Количество() > 0 Тогда
					Строки[0].ВыводИерархии = Истина;
					Если ЭтоИерархияГруппыАналитики Тогда
						Строки[0].РасчетЗаполнение = "итог";
					КонецЕсли;
				КонецЕсли;
				
				// Проверка на совпадение валют
				СтруктураПоиска = Новый Структура("Строка, Колонка, ВалютаОпределяетсяАналитикой", Строки[0].Строка, Строки[0].Колонка, Истина);
				НайденныеСтроки = ПараметрыВывода.КэшПараметровВалют.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() Тогда
					
					КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(НайденныеСтроки[0].АналитикаВалюты);
					ЗначениеАналитикиВалюты = Неопределено;
					
					Если НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитикиВалюты) Тогда
						ВалютаВывода = Подключаемый_ЗначениеИзАналитики(
						ПараметрыВывода.КэшЗначенийАналитик,
						ЗначениеАналитикиВалюты,
						НайденныеСтроки[0].ЗаполнениеЕдиницыИзмерения);
						
						Если ЗначениеЗаполнено(ВалютаВывода) Тогда
							Если Не ЗначениеЗаполнено(Строки[0].Валюта) Тогда
								Строки[0].Валюта = ВалютаВывода;
							КонецЕсли;
							Если ПараметрыВывода.Свойство("ВалютаОтчета") И ПараметрыВывода.ВалютаОтчета <> ВалютаВывода Тогда
								Строки[0].Валюта = Неопределено;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленОтбор Тогда
			НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета, СтруктураКолонок, НакопленныйОтбор, СчетчикКолонок = 1, СтрокаИерархииАналитики = Неопределено)
	
	ДокументРезультат = ПараметрыВывода.ДокументРезультат;
	ДанныеЯчеек = ПараметрыВывода.ДанныеЯчеек;
	ИндексыПоиска = ПараметрыВывода.ИндексыПоискаИзмерений;
	ДляРедактирования = ПараметрыВывода.ДляРедактирования;
	ПараметрыЯчеек = ПараметрыВывода.ПараметрыЯчеек;
	СтруктураЯчеек = ПараметрыВывода.СтруктураЯчеек;
	СложнаяТаблица = ПараметрыВывода.СложнаяТаблица;
	ПараметрыПериодов = ПараметрыВывода.ПараметрыПериодов;
	СчетчикСтрок = ПараметрыВывода.СчетчикСтрок;
	КэшРеквизитовЭлементовБюджета = ПараметрыВывода.КэшРеквизитовЭлементовБюджета;
	
	ЭтоИерархияГруппыАналитики = ТипЗнч(СтрокаИерархииАналитики) = Тип("СтрокаДереваЗначений")
								И СтрокаИерархииАналитики.ЭтоГруппа;
	
	Для Каждого Колонка Из СтруктураКолонок.Строки Цикл
		
		ДобавленОтбор = Ложь;
		ЭтоПоказатель = СтрНайти(Колонка.ИмяИзмерения, "#Показатель");
		ЭтоФиксКолонка =
			Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		
		Если Не ЭтоФиксКолонка
			И Не ЭтоПоказатель Тогда
			НакопленныйОтбор.Вставить(Колонка.ИмяИзмерения, Колонка.ФиксированноеЗначение);
			ДобавленОтбор = Истина;
		КонецЕсли;
		
		Если Колонка.Строки.Количество() Тогда
			ВывестиЯчейкиВОтчет(ПараметрыВывода, СчетчикТаблиц, ОбластьЗначение, ОбластьПримечание, СтрокаОтчета,
				Колонка, НакопленныйОтбор, СчетчикКолонок, СтрокаИерархииАналитики);
		Иначе
			
			СчетчикКолонок = СчетчикКолонок + 1;
			ВыводитьЗначение = Истина;
			Если СтрокаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если СтрокаОтчета.Строки.Количество()
					И СтрокаОтчета.Строки[0].ВидЭлемента <> Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
					ВыводитьЗначение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			КолонкаФильтра = Колонка;
			Если НЕ СложнаяТаблица Тогда
				Если ЭтоПоказатель Тогда
					ИмяПоказателя = СтрЗаменить(Колонка.ИмяИзмерения, "#Показатель_", "");
					КолонкаФильтра = КолонкаФильтра.Родитель;
				Иначе
					ИмяПоказателя = "Сумма";
				КонецЕсли;
			КонецЕсли;
			
			Если КолонкаФильтра <> Неопределено Тогда
				КолонкаФильтра = КолонкаФильтра.ЭлементОтчета;
			КонецЕсли;
				
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаОтчета.ЭлементОтчета);
			Если ЗначениеЗаполнено(КолонкаФильтра) Тогда
				СтруктураПоиска.Вставить("Колонка", КолонкаФильтра);
			КонецЕсли;
			
			СтрокиСтруктуры = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
			Если СтрокиСтруктуры.Количество() Тогда
				ЯчейкаОтчета = СтрокиСтруктуры[0];
			Иначе
				ВыводитьЗначение = Ложь;
			КонецЕсли;
			
			Если Не ВыводитьЗначение Тогда
				ОбластьЗначение.Параметры.Значение = Неопределено;
				ОбластьЗначение.Параметры.Расшифровка = Неопределено;
				Область = ДокументРезультат.Присоединить(ОбластьЗначение);
				Если ДляРедактирования И
					НЕ СтрокаОтчета.Строки.Количество() Тогда
					Область.ЦветФона = Новый Цвет(237, 237, 237);
				КонецЕсли;
			Иначе
				
				НеобязательныеПараметры = НеобязательныеПараметрыПолученияВыборкиЯчеек();
				НеобязательныеПараметры.Колонка = КолонкаФильтра;
				НеобязательныеПараметры.Строка = СтрокаОтчета.ЭлементОтчета;
				НеобязательныеПараметры.ИндексыПоиска = ИндексыПоиска;
				НеобязательныеПараметры.ДобавлятьФлаг = Ложь;
				Строки = ПолучитьВыборкуЯчеек(ДанныеЯчеек, НакопленныйОтбор, НеобязательныеПараметры);
				
				Если Строки.Количество() > 1 Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Ошибка расчета структуры ячеек';
											|en = 'An error occurred while generating the report: An error occurred while calculating the cell structure'");
				Иначе
					
					Значение = Неопределено;
					Расшифровка = Неопределено;
					Примечание = Неопределено;
					
					ПараметрыФлагов = ПараметрыЯчеек.Найти(ЯчейкаОтчета.ИндексСтроки, "ИндексСтроки");
					
					// Если формула первая в группе - то формулу не выводим, выводим сумму напротив группы.
					Если СложнаяТаблица Тогда
						ВыводитьЗначение = Истина;
						ВсегоФлагов = Число(ПараметрыФлагов.ФлагКоличество) + 
										Число(ПараметрыФлагов.ФлагСумма) + 
										Число(ПараметрыФлагов.ФлагЗначение);
						Если ВсегоФлагов > 1 Тогда
							ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Ошибка формирования структуры ячеек';
													|en = 'An error occurred while generating the report: An error occurred while generating the cell structure'");
						ИначеЕсли ПараметрыФлагов.ФлагКоличество Тогда
							ИмяПоказателя = "Количество";
						ИначеЕсли ПараметрыФлагов.ФлагЗначение Тогда
							ИмяПоказателя = "Значение";
						ИначеЕсли ПараметрыФлагов.ФлагСумма Тогда
							ИмяПоказателя = "Сумма";
						Иначе
							ВыводитьЗначение = Ложь;
						КонецЕсли;
					Иначе
						ВыводитьЗначение = Ложь;
						Если ПараметрыФлагов.ФлагКоличество Тогда
							ВыводитьЗначение = ИмяПоказателя = "Количество";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагЗначение Тогда
							ВыводитьЗначение = ИмяПоказателя = "Значение";
						КонецЕсли;
						Если Не ВыводитьЗначение И ПараметрыФлагов.ФлагСумма Тогда
							ВыводитьЗначение = ИмяПоказателя = "Сумма";
						КонецЕсли;
					КонецЕсли;
					
					Если Не Строки.Количество() Тогда
						НоваяСтрока = ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, ЯчейкаОтчета, НакопленныйОтбор, КолонкаФильтра);
						Строки.Добавить(НоваяСтрока);
					КонецЕсли;
					
					ИмяОбласти = "ИмяОбласти" + ИмяПоказателя;
					ВалютаВводаОтличаетсяОтВалюты = Ложь;
					
					Если ВыводитьЗначение Тогда
						
						// Проверка на совпадение валют
						СтруктураПоиска = Новый Структура("Строка, Колонка, ВалютаОпределяетсяАналитикой", Строки[0].Строка, Строки[0].Колонка, Истина);
						НайденныеСтроки = ПараметрыВывода.КэшПараметровВалют.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() Тогда
							
							КлючИмени = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(НайденныеСтроки[0].АналитикаВалюты);
							ЗначениеАналитикиВалюты = Неопределено;
							
							Если НакопленныйОтбор.Свойство(КлючИмени, ЗначениеАналитикиВалюты) Тогда
								ВалютаВывода = Подключаемый_ЗначениеИзАналитики(
									ПараметрыВывода.КэшЗначенийАналитик,
									ЗначениеАналитикиВалюты,
									НайденныеСтроки[0].ЗаполнениеЕдиницыИзмерения);
								
								Если ЗначениеЗаполнено(ВалютаВывода) Тогда
									Если Не ЗначениеЗаполнено(Строки[0].Валюта) Тогда
										Строки[0].Валюта = ВалютаВывода;
										Если ПараметрыВывода.Свойство("ВалютаОтчета") И ПараметрыВывода.ВалютаОтчета
											<> ВалютаВывода Тогда
											Строки[0].Валюта = Неопределено;
										КонецЕсли;
									Иначе
										Если ВалютаВывода <> Строки[0].Валюта Тогда
											ВалютаВводаОтличаетсяОтВалюты = Истина;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						ПараметрыРасчетаЗначения = ШаблонПараметровРасчетаЗначенийЯчейки();
						ПараметрыРасчетаЗначения.ДанныеЯчеек = ДанныеЯчеек;
						ПараметрыРасчетаЗначения.ПараметрыЯчеек = ПараметрыЯчеек;
						ПараметрыРасчетаЗначения.ПараметрыПериодов = ПараметрыПериодов;
						ПараметрыРасчетаЗначения.СтрокаДанных = Строки[0];
						ПараметрыРасчетаЗначения.Префикс = ИмяПоказателя;
						ПараметрыРасчетаЗначения.РасчетИзменений = Ложь;
						ПараметрыРасчетаЗначения.КэшРеквизитовЭлементовБюджета = КэшРеквизитовЭлементовБюджета;
						Значение = РассчитатьЗначениеЯчейки(ПараметрыРасчетаЗначения);
						
						Расшифровка = ПолучитьРасшифровку(ПараметрыВывода,
								НакопленныйОтбор,
								Строки[0],
								ПараметрыФлагов,
								ИмяПоказателя,
								ДанныеЯчеек.Индекс(Строки[0]),
								ДляРедактирования);
						Значение = ?(ЗначениеЗаполнено(Значение), Значение, Неопределено);
						
					КонецЕсли;
					
					Примечание = Строки[0].Примечание;
					
					Если ИмяПоказателя = "Значение" Тогда
						Если СтрокаОтчета.Строки.Количество() Тогда
							// По нефинансовым показателям значения 
							// выводим на нижнем уровне бюджета.
							Значение = Неопределено;
						КонецЕсли;
					КонецЕсли;
					
					ОбластьЗначение.Параметры.Значение = Значение;
					ОбластьЗначение.Параметры.Расшифровка = Расшифровка;
					
					Область = ДокументРезультат.Присоединить(ОбластьЗначение);
					
					НаборПараметров = ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей();
					НаборПараметров.ПараметрыВывода = ПараметрыВывода;
					НаборПараметров.ЭлементОтчета = СтрокаОтчета.ЭлементОтчета;
					НаборПараметров.Колонка = КолонкаФильтра;
					СтрокаОформления = ДобавитьОбластьОформления(НаборПараметров, Область, НакопленныйОтбор,
						СчетчикТаблиц, СчетчикСтрок, СчетчикКолонок);
						
					Если СтрокаОформления <> Неопределено Тогда
						СтрокаОформления[ИмяПоказателя] = Значение;
						СтрокаОформления["Флаг" + ИмяПоказателя] = Истина;
					КонецЕсли;
					
					Если Не ПараметрыВывода.Свойство("НеНазначатьИменаОбластям") Или Не ЗначениеЗаполнено(Строки[0][ИмяОбласти]) Тогда
						Строки[0][ИмяОбласти] = Область.Имя;
						Если СтрокаИерархииАналитики <> Неопределено Тогда
							
							СтрокаИерархииАналитикиРодитель = СтрокаИерархииАналитики.Родитель;
							
							Пока СтрокаИерархииАналитикиРодитель <> Неопределено Цикл
								НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаИерархииАналитикиРодитель[СтрокаОтчета.ИмяИзмерения]);
								СтрокиИерархия = ПолучитьВыборкуЯчеек(ПараметрыВывода.ДанныеЯчеек, НакопленныйОтбор, НеобязательныеПараметры);
								ИмяОбластиИерархия = ИмяОбласти + "Иерархия";
								Если Не ЗначениеЗаполнено(Строки[0][ИмяОбластиИерархия]) Тогда
									Строки[0][ИмяОбластиИерархия] = СтрокиИерархия[0][ИмяОбласти];
								КонецЕсли;
								Если СтрокаИерархииАналитики.Строки.Количество() = 0
									И СтрокаИерархииАналитикиРодитель.ЭтоГруппа Тогда
									ИмяПоказателяОборот = ?(ИмяПоказателя = "Сумма" И Строки[0].РасчетЗаполнение <> "итог", "СуммаОборот", ИмяПоказателя);
									Если ЗначениеЗаполнено(Строки[0][ИмяПоказателяОборот]) Тогда
										СтрокиИерархия[0][ИмяПоказателя] = СтрокиИерархия[0][ИмяПоказателя] + Строки[0][ИмяПоказателяОборот];
										ДокументРезультат.Область(СтрокиИерархия[0][ИмяОбласти]).Текст = СтрокиИерархия[0][ИмяПоказателя];
									КонецЕсли;
								Иначе
									Прервать;
								КонецЕсли;

								СтрокаИерархииАналитикиРодитель = СтрокаИерархииАналитикиРодитель.Родитель;
								
							КонецЦикла;
							
							НакопленныйОтбор.Вставить(СтрокаОтчета.ИмяИзмерения, СтрокаИерархииАналитики[СтрокаОтчета.ИмяИзмерения]);
							
						КонецЕсли;
					КонецЕсли;
					
					МожноРедактировать = Ложь;
					Если (ПараметрыВывода.ДляРедактирования 
						ИЛИ ПараметрыВывода.ВыводитьПримечания)
						И Не ЭтоИерархияГруппыАналитики Тогда
						
						Если ЯчейкаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
							Если ЯчейкаОтчета.ИД_Источника = "Документ" Тогда
								МожноРедактировать = ПараметрыФлагов["Флаг" + ИмяПоказателя];
							КонецЕсли;
							
						ИначеЕсли ЯчейкаОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
							Если ЯчейкаОтчета.ИД_Источника = "Документ_Значения" Тогда
								МожноРедактировать = ПараметрыФлагов["Флаг" + ИмяПоказателя];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыВывода.ДляРедактирования Тогда
						
						Если МожноРедактировать И ПараметрыВывода.Свойство("ДобавленныеСтрокиРасшифровка") И Расшифровка <> Неопределено Тогда
							ПараметрыВывода.ДобавленныеСтрокиРасшифровка.Добавить(ПараметрыВывода.ДанныеРасшифровки[Расшифровка]);
						КонецЕсли;
						
						Если МожноРедактировать И Не ВалютаВводаОтличаетсяОтВалюты Тогда
							
							Если Не СтрокаОтчета.Строки.Количество() Тогда
								Если ПараметрыФлагов.ОбратныйЗнак Тогда // для ввода изменим знак
									Область.ЦветТекста = WebЦвета.Красный;
									Если ТипЗнч(Значение) = Тип("Число") Тогда
										Значение = -Значение;
									КонецЕсли;
								КонецЕсли;
								Область.СодержитЗначение = Истина;
								Если Строки[0].ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение
									И ПараметрыФлагов.ТипРедактируемогоЗначения <> "Число" Тогда
									Если ПараметрыФлагов.ТипРедактируемогоЗначения = "Строка" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("Строка");
										Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
									ИначеЕсли ПараметрыФлагов.ТипРедактируемогоЗначения = "Булево" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("Булево");
									ИначеЕсли ПараметрыФлагов.ТипРедактируемогоЗначения = "Дата" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("Дата");
									ИначеЕсли ПараметрыФлагов.ТипРедактируемогоЗначения = "СтавкаНДС" Тогда
										Область.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
									КонецЕсли;
								Иначе
									Если ИмяПоказателя = "Количество" Тогда
										Область.ТипЗначения = Метаданные.Документы.ЭкземплярБюджета.ТабличныеЧасти.ОборотыПоСтатьямБюджетов.Реквизиты["Количество"].Тип;
									Иначе
										Область.ТипЗначения = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
									КонецЕсли;
								КонецЕсли;
								Область.Значение = Значение;
								Область.Защита = Ложь;
								
								Область.Примечание.Текст = Примечание;
							КонецЕсли;
							
						ИначеЕсли НЕ СтрокаОтчета.Строки.Количество() Тогда
							
							Область.ЦветФона = Новый Цвет(237, 237, 237);
							
						КонецЕсли;
						
					ИначеЕсли ПараметрыВывода.ВыводитьПримечания 
						И МожноРедактировать
						И НЕ СтрокаОтчета.Строки.Количество()
						И НЕ ПустаяСтрока(Примечание) Тогда
						
						Если Строки[0].ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
							
							ТекущийНомерТаблицы = ПараметрыВывода.Примечания.НомерТаблицы;
							
							ТекущийНомерПримечания = ПараметрыВывода.Примечания.НомерПримечания + 1;
							ПараметрыВывода.Примечания.НомерПримечания = ТекущийНомерПримечания;
							
							Область.Разъединить();
							
							ЯчейкаПримечания = ДокументРезультат.Область(Область.Верх,Область.Право, Область.Верх, Область.Право);
							
							ОбластьПримечание.Параметры.Текст = Формат(ТекущийНомерПримечания, "ЧГ=");
							
							ДокументРезультат.ВставитьОбласть(ОбластьПримечание.Область(),ЯчейкаПримечания,,Истина);
							
							НоваяСтрокаДанных = ПараметрыВывода.Примечания.ТаблицаДанных.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Строки[0]);
							НоваяСтрокаДанных.НомерТаблицы = ТекущийНомерТаблицы;
							НоваяСтрокаДанных.НомерПримечания = ТекущийНомерПримечания;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавленОтбор Тогда
			НакопленныйОтбор.Удалить(Колонка.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


// Выводит текст в область табличного документа бюджета.
// 
// Параметры:
// 	ДокументРезультат - ТабличныйДокумент - Табличный документ, в который выводится бюджет.
// 	СтруктураОбластей - см. БюджетнаяОтчетностьВыводСервер.СтруктураОбластейМакета
// 	ЭлементВывода - СтрокаДереваЗначений - Строка дерева бюджета.
//
Процедура ВывестиТекстовыйБлокВОтчет(ДокументРезультат, СтруктураОбластей, ЭлементВывода)
	
	Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета Тогда
		Область = СтруктураОбластей.ЗаголовокОтчета;
		Область.Параметры.ЗаголовокОтчета = ЭлементВывода.НаименованиеДляПечати;
	ИначеЕсли ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
		ИЛИ ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
		Область = СтруктураОбластей.ЗаголовокТаблицы;
		Область.Параметры.ЗаголовокТаблицы = ЭлементВывода.НаименованиеДляПечати;
	Иначе
		Область = СтруктураОбластей.Текст;
		Область.Параметры.Текст  = ЭлементВывода.НаименованиеДляПечати;
	КонецЕсли;
	
	ДокументРезультат.Вывести(Область, 0);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеБюджета

Процедура ОформитьОбластиПоРезультатамКомпоновки(ДокументРезультат, ПараметрыВывода, ТаблицаОформления, ЭлементыОформления)
	
	Для Каждого СтрокаОформления Из ТаблицаОформления Цикл
		
		НайденнаяСтрока = ЭлементыОформления.Найти(СтрокаОформления.КлючЭлементаОформления, "КлючЭлементаОформления");
		Области = СтрокаОформления.ИмяОбласти;
		ХранилищеОформления = НайденнаяСтрока.Оформление; // ХранилищеЗначения
		Оформление = ХранилищеОформления.Получить();
		
		Для Каждого ИмяОбласти Из Области Цикл
			Если Не ЗначениеЗаполнено(ИмяОбласти) Тогда
				Продолжить;
			КонецЕсли;
			ОбластьДокумента = ДокументРезультат.Область(ИмяОбласти);
			Для Каждого ЭлементОформления Из Оформление Цикл
				Если ЭлементОформления.Параметр = "ЦветФона" Тогда
					ОбластьДокумента.ЦветФона = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "ЦветТекста" Тогда
					ОбластьДокумента.ЦветТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "ЦветГраницы" Тогда
					ОбластьДокумента.ЦветРамки = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "Шрифт" Тогда
					ОбластьДокумента.Шрифт = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "ГоризонтальноеПоложение" Тогда
					ОбластьДокумента.ГоризонтальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "ВертикальноеПоложение" Тогда
					ОбластьДокумента.ВертикальноеПоложение = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "ОриентацияТекста" Тогда
					ОбластьДокумента.ОриентацияТекста = ЭлементОформления.Оформление;
				ИначеЕсли ЭлементОформления.Параметр = "Формат" Тогда
					Если Не ОбластьДокумента.СодержитЗначение Тогда
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Расшифровка = ОбластьДокумента.Расшифровка;
						Расшифровка = ПараметрыВывода.ДанныеРасшифровки[Расшифровка];
						Если ТипЗнч(Расшифровка) = Тип("Структура")
							И Расшифровка.Свойство("Значение") Тогда
							ОбластьДокумента.Текст = Формат(Расшифровка.Значение, ЭлементОформления.Оформление);
						КонецЕсли;
					Иначе
						ОбластьДокумента.Формат = ЭлементОформления.Оформление;
						Начало = СтрНайти(ВРег(ОбластьДокумента.Формат), "ЧС");
						Если Начало Тогда
							ОстатокСтроки = Сред(ОбластьДокумента.Формат, Начало);
							Разделитель = СтрНайти(ОстатокСтроки, ";");
							Если Разделитель Тогда
								ОстатокСтроки = Лев(ОстатокСтроки, Разделитель);
							КонецЕсли;
							ОбластьДокумента.Формат = СтрЗаменить(ОбластьДокумента.Формат, ОстатокСтроки, "");
							ОстатокСтроки = Сред(ОстатокСтроки, СтрНайти(ОстатокСтроки, "=")+1);
							ОстатокСтроки = СтрЗаменить(ОстатокСтроки, "'", "");
							ОстатокСтроки = СокрЛП(ОстатокСтроки);
							Если Лев(ОстатокСтроки, 1) = "-" Тогда
								Знак = -1;
								ОстатокСтроки = Сред(ОстатокСтроки, 2);
							Иначе
								Знак = 1;
							КонецЕсли;
							Если Не ПустаяСтрока(ОстатокСтроки) И 
								СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ОстатокСтроки, Ложь, Ложь) Тогда
								
								ОстатокСтроки = Знак * Число(ОстатокСтроки);
								ПараметрыВывода.ДанныеРасшифровки[ОбластьДокумента.Расшифровка].Вставить("СокращенныеРазряды", ОстатокСтроки);
								ОбластьДокумента.Значение = ОбластьДокумента.Значение / Pow(10, ОстатокСтроки);
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбластиОформленияИзТаблицы(Таблица, КлючЭлементаОформления) Экспорт
	
	Массив = Новый Массив;
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("КлючЭлементаОформления", КлючЭлементаОформления));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Массив.Добавить(НайденнаяСтрока.ИмяОбласти);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления()
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ЯчейкиПоКлючам = ФинансоваяОтчетностьСервер.НоваяСхема();
	
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(ЯчейкиПоКлючам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭлементыОформления");
	Набор.ИмяОбъекта = "ЭлементыОформления";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(ЯчейкиПоКлючам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеСтроки");
	Набор.ИмяОбъекта = "ОформляемыеСтроки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(ЯчейкиПоКлючам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ОформляемыеКолонки");
	Набор.ИмяОбъекта = "ОформляемыеКолонки";
	ФинОтчеты.НовоеПолеНабора(Набор, "ЭлементОтчета", "Колонка");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления", "КлючЭлементаОформления", , Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеСтроки", "КлючЭлементаОформления");
	ФинОтчеты.НоваяСвязьНаборов(ЯчейкиПоКлючам, "ЭлементыОформления", "ОформляемыеКолонки", "КлючЭлементаОформления");
	
	Группировка = ЯчейкиПоКлючам.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Строка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "Колонка");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеВыбора(ЯчейкиПоКлючам.НастройкиПоУмолчанию, "НомерТаблицы");
	
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию,
			"ГоризонтальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(ЯчейкиПоКлючам.НастройкиПоУмолчанию,
			"ВертикальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат ЯчейкиПоКлючам;
	
КонецФункции

Функция ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, ТипОформляемойОбласти, ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(КомпоновкаПоЯчейкам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	
	Для Каждого Колонка Из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	ФинОтчеты.НовоеВычисляемоеПоле(КомпоновкаПоЯчейкам,
		"ЗначениеЯчейки",
		"
		|ВЫБОР 
		|	КОГДА ФлагЗначение = ИСТИНА ТОГДА Значение
		|	КОГДА ФлагСумма = ИСТИНА ТОГДА Сумма
		|	КОГДА ФлагКоличество = ИСТИНА ТОГДА Количество
		|КОНЕЦ");
	
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(КомпоновкаПоЯчейкам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЯчейкиПоКлючам");
	Набор.ИмяОбъекта = "ЯчейкиПоКлючам";
	ФинОтчеты.НовоеПолеНабора(Набор, "ТипОформляемойОбласти");
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка", "СтрокаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка", "КолонкаЯчеек");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "ТипОформляемойОбласти", ТипОформляемойОбласти);
	
	ГруппаИЛИ = КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления Из ТаблицаЭлементов Цикл
		ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ФинОтчеты.НовыйОтбор(ГруппаИ, "КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления);
		Условие = ЭлементОформления.Условие; // ХранилищеЗначения
		ФинОтчеты.СкопироватьОтбор(Условие.Получить().Отбор, ГруппаИ, Истина);
	КонецЦикла;
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию,
			"ГоризонтальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию,
			"ВертикальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ФинансоваяОтчетностьСервер.НоваяСхема();
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(КомпоновкаПоЯчейкам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");
	Набор.ИмяОбъекта = "ТаблицаДанных";
	Для Каждого Колонка Из ДанныеОтчетаДляОформления.Колонки Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Колонка.Имя, Колонка.Имя);
	КонецЦикла;
	
	Набор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(КомпоновкаПоЯчейкам,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДоступныеКлючи");
	Набор.ИмяОбъекта = "ДоступныеКлючи";
	ФинОтчеты.НовоеПолеНабора(Набор, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеНабора(Набор, "ПорядковыйНомер");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	ФинОтчеты.НовоеПолеНабора(Набор, "НомерТаблицы");
	
	Группировка = ФинОтчеты.НоваяГруппировка(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура, "КлючЭлементаОформления");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПорядковыйНомер");
	
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию,
			"ГоризонтальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию,
			"ВертикальноеРасположениеОбщихИтогов",
			РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат КомпоновкаПоЯчейкам;
	
КонецФункции

Функция РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ТипОформляемойОбласти, ЭлементыОформления,
							ДанныеОтчетаДляОформления, РасшифровкаПолейОтбораЭО, ЯчейкиПоКлючам)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления,
			ТипОформляемойОбласти,
			ДанныеОтчетаДляОформления);
	
	ПолеСоединенияФинальныхНаборов = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Строка", "Колонка");
	ФинОтчеты.НовоеПолеГруппировки(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура[0], ПолеСоединенияФинальныхНаборов);
	ФинОтчеты.НовоеПолеГруппировки(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Структура[0], "НомерТаблицы");
	
	Если ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока Тогда
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
	Иначе
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
	КонецЕсли;
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
	
	ТаблицаЭлементов = ЭлементыОформления.Скопировать(Новый Структура("ТипОформляемойОбласти", ТипОформляемойОбласти));
	
	Для Каждого ЭлементОформления Из ТаблицаЭлементов Цикл
		
		ЭлементыЗамены = РасшифровкаПолейОтбораЭО.НайтиСтроки(Новый Структура("КлючЭлементаОформления", ЭлементОформления.КлючЭлементаОформления));
		
		Для Каждого ЭлементЗамены Из ЭлементыЗамены Цикл
			
			Если КомпоновкаПоЯчейкам.ВычисляемыеПоля.Найти("[" + ЭлементЗамены.ИмяПоляОтбора + "]") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТипаЭлемента = ?(ТипОформляемойОбласти = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока, "Колонка", "Строка");
			ИмяПараметраФильтра = ИмяТипаЭлемента + "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(КомпоновкаПоЯчейкам,
					ЭлементЗамены.ИмяПоляОтбора,
					"ВЫБОР КОГДА " + ИмяТипаЭлемента + " = &" + ИмяПараметраФильтра + " ТОГДА
					|				" + ЭлементЗамены.ИмяРесурса + " ИНАЧЕ NULL КОНЕЦ");
			
			ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, ЭлементЗамены.ИмяПоляОтбора);
			Параметр = КомпоновкаПоЯчейкам.Параметры.Добавить();
			Параметр.Имя = ИмяПараметраФильтра;
			Параметр.Значение = ЭлементЗамены.ЭлементОтчета;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Для Каждого Параметр Из КомпоновкаПоЯчейкам.Параметры Цикл
		ФинОтчеты.УстановитьПараметр(КомпоновщикНастроек.Настройки.ПараметрыДанных, Параметр.Имя, Параметр.Значение, Истина);
	КонецЦикла;
	ДоступныеКлючи = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуОформленияВсейСтрокиКолонки(ДанныеОтчетаДляОформления);
	
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ДоступныеКлючи", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
	ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ДоступныеКлючи", "ТаблицаДанных", ПолеСоединенияФинальныхНаборов);
	
	ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
	ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ДоступныеКлючи", ДоступныеКлючи);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
	
	Возврат Результат;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ТабличныйДокументРезультат - ТабличныйДокумент -
// 	ПараметрыВывода - см. ДобавитьПараметрВывода.ПараметрыВывода
// 	ДеревоВывода - см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйДеревоВывода
Процедура ОформитьБюджет(ТабличныйДокументРезультат, ПараметрыВывода, ДеревоВывода) Экспорт
	
	ДанныеОтчетаДляОформления =
		ПараметрыВывода.ДанныеОтчетаДляОформления; // см. БюджетнаяОтчетностьРасчетКэшаСервер.ДанныеОтчетаДляОформления
	
	Если ДанныеОтчетаДляОформления = Неопределено Тогда
		// Измерения и показатели без таблицы
		Возврат;
	КонецЕсли;
	
	ТаблицаОформления = Неопределено;
	
	ЭлементыОформления = Новый ТаблицаЗначений;
	ЭлементыОформления.Колонки.Добавить("ПорядковыйНомер");
	ЭлементыОформления.Колонки.Добавить("Оформление");
	ЭлементыОформления.Колонки.Добавить("Условие");
	ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
	ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
	ЭлементыОформления.Колонки.Добавить("НомерТаблицы");
	
	ОформляемыеСтроки = Новый ТаблицаЗначений;
	ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
	
	ОформляемыеКолонки = Новый ТаблицаЗначений;
	ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
	ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
	
	РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
	РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
	
	СтруктураТаблиц = Новый Структура("ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
	
	СтрокиТаблиц = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения", "Таблица"));
	НомерТаблицы = 1;
	Для Каждого СтрокаТаблицы Из СтрокиТаблиц Цикл
		
		Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
			Таблица = Неопределено;
			
			ИмяТаблицы = КлючИЗначение.Ключ;
			
			Если СтрокаТаблицы.ПараметрыТаблицы.Свойство(ИмяТаблицы, Таблица) Тогда
				Если ИмяТаблицы = "ЭлементыОформления" Тогда
					Если Таблица.Колонки.Найти("НомерТаблицы") = Неопределено Тогда
						Таблица.Колонки.Добавить("НомерТаблицы");	
					КонецЕсли;
					Таблица.ЗаполнитьЗначения(НомерТаблицы, "НомерТаблицы");
				КонецЕсли;
				
				Если ИмяТаблицы = "ЭлементыОформления" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ЭлементыОформления);
				ИначеЕсли ИмяТаблицы = "ОформляемыеСтроки" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ОформляемыеСтроки);
				ИначеЕсли ИмяТаблицы = "ОформляемыеКолонки" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ОформляемыеКолонки);
				ИначеЕсли ИмяТаблицы = "РасшифровкаПолейОтбораЭО" Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, РасшифровкаПолейОтбораЭО);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НомерТаблицы = НомерТаблицы + 1;
	КонецЦикла;
	
	Если Не ЭлементыОформления.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ЭлементыОформления Цикл
		Строка.ПорядковыйНомер = ЭлементыОформления.Индекс(Строка);
	КонецЦикла;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	СхемаЯчеекПоКлючам = ПолучитьПредварительнуюКомпоновкуДляРасчетаОформления();
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЭлементыОформления", ЭлементыОформления);
	ВнешниеНаборы.Вставить("ОформляемыеСтроки", ОформляемыеСтроки);
	ВнешниеНаборы.Вставить("ОформляемыеКолонки", ОформляемыеКолонки);
	
	КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(СхемаЯчеекПоКлючам);
	ЯчейкиПоКлючам = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаЯчеекПоКлючам, КомпоновщикНастроек, ВнешниеНаборы);
	
	ТаблицаОформления = Новый ТаблицаЗначений;
	ТаблицаОформления.Колонки.Добавить("КлючЭлементаОформления");
	ТаблицаОформления.Колонки.Добавить("ИмяОбласти");
	ТаблицаОформления.Колонки.Добавить("ПорядковыйНомер");
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЯчейкиПоКлючам", ЯчейкиПоКлючам);
	ВнешниеНаборы.Вставить("ТаблицаДанных", ДанныеОтчетаДляОформления);
	
	// Получение областей для оформления. Ячейки
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЯчейкиНаПересеченииСтрокИКолонок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления, ОформляемыйТип, ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяСтрока;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		// Получение областей для оформления. Строки
		Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ОформляемыйТип,
				ЭлементыОформления, ДанныеОтчетаДляОформления,
				РасшифровкаПолейОтбораЭО,
				ЯчейкиПоКлючам);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяКолонка;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		// Получение областей для оформления. Колонки
		
		Результат = РассчитатьОформляемыеЯчейкиПоСтрокеКолонке(ОформляемыйТип,
				ЭлементыОформления, ДанныеОтчетаДляОформления,
				РасшифровкаПолейОтбораЭО,
				ЯчейкиПоКлючам);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиСтрок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		// Получение областей для оформления. ЗаголовкиСтрок
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления,
				ОформляемыйТип,
				ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "СтрокаЯчеек", "Строка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Колонка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ЗаголовкиКолонок;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
		
		// Получение областей для оформления. ЗаголовкиКолонок
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления,
				ОформляемыйТип,
				ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "КолонкаЯчеек", "Колонка");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		ЭлементОтбора = ФинОтчеты.НовыйОтбор(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию.Отбор, "Строка");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
		
	КонецЕсли;
	
	ОформляемыйТип = Перечисления.ТипыОформляемыхОбластейБюджетныхОтчетов.ВсяТаблица;
	Если ЭлементыОформления.Найти(ОформляемыйТип, "ТипОформляемойОбласти") <> Неопределено Тогда
	
		// Получение областей для оформления. ВсяТаблица
		
		КомпоновкаПоЯчейкам = ПолучитьБазовуюКомпоновкуДляРасчетаОформления(ЭлементыОформления,
				ОформляемыйТип,
				ДанныеОтчетаДляОформления);
		
		ФинОтчеты.НоваяСвязьНаборов(КомпоновкаПоЯчейкам, "ЯчейкиПоКлючам", "ТаблицаДанных", "НомерТаблицы", "НомерТаблицы");
		
		ФинОтчеты.НовыйРесурс(КомпоновкаПоЯчейкам, "ИмяОбласти",,"МАССИВ(ИмяОбласти)");
		ФинОтчеты.НовоеПолеВыбора(КомпоновкаПоЯчейкам.НастройкиПоУмолчанию, "ИмяОбласти");
		
		КомпоновщикНастроек = ФинОтчеты.КомпоновщикСхемы(КомпоновкаПоЯчейкам);
		Результат = ФинОтчеты.ВыгрузитьРезультатСКД(КомпоновкаПоЯчейкам, КомпоновщикНастроек, ВнешниеНаборы);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат, ТаблицаОформления);
	
	КонецЕсли;
	
	ТаблицаОформления.Сортировать("ПорядковыйНомер");
	
	ОформитьОбластиПоРезультатамКомпоновки(ТабличныйДокументРезультат, ПараметрыВывода, ТаблицаОформления, ЭлементыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииФормулБюджетныхОтчетов

Функция ПроверитьАргументФункции(Аргумент) Экспорт
	
	Если Аргумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Аргумент = Число(Аргумент);
	Исключение
		Аргумент = Неопределено;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция Максимум(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);
	МассивЗначений.Добавить(Значение10);
	МассивЗначений.Добавить(Значение11);
	МассивЗначений.Добавить(Значение12);
	МассивЗначений.Добавить(Значение13);
	МассивЗначений.Добавить(Значение14);
	МассивЗначений.Добавить(Значение15);
	МассивЗначений.Добавить(Значение16);
	МассивЗначений.Добавить(Значение17);
	МассивЗначений.Добавить(Значение18);
	МассивЗначений.Добавить(Значение19);
	МассивЗначений.Добавить(Значение20);
	
	Результат = Неопределено;
	Для Каждого ЗначениеФункции Из МассивЗначений Цикл
		
		СчВлож = 0;
		ОбошлиВсе = Ложь;
		Пока Не ОбошлиВсе Цикл
			Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
				Если СчВлож = ЗначениеФункции.Количество() Тогда
					ОбошлиВсе = Истина;
					Продолжить;
				КонецЕсли;
				Значение = ЗначениеФункции[СчВлож];
				СчВлож = СчВлож + 1;
			Иначе
				Значение = ЗначениеФункции;
				ОбошлиВсе = Истина;
			КонецЕсли;
			
			Если Не ПроверитьАргументФункции(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Результат = Неопределено Тогда
				Результат = Значение;
			Иначе
				Результат = Макс(Результат, Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Минимум(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);
	МассивЗначений.Добавить(Значение10);
	МассивЗначений.Добавить(Значение11);
	МассивЗначений.Добавить(Значение12);
	МассивЗначений.Добавить(Значение13);
	МассивЗначений.Добавить(Значение14);
	МассивЗначений.Добавить(Значение15);
	МассивЗначений.Добавить(Значение16);
	МассивЗначений.Добавить(Значение17);
	МассивЗначений.Добавить(Значение18);
	МассивЗначений.Добавить(Значение19);
	МассивЗначений.Добавить(Значение20);
	
	Результат = Неопределено;
	Для Каждого ЗначениеФункции Из МассивЗначений Цикл
		
		СчВлож = 0;
		ОбошлиВсе = Ложь;
		Пока Не ОбошлиВсе Цикл
			Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
				Если СчВлож = ЗначениеФункции.Количество() Тогда
					ОбошлиВсе = Истина;
					Продолжить;
				КонецЕсли;
				Значение = ЗначениеФункции[СчВлож];
				СчВлож = СчВлож + 1;
			Иначе
				Значение = ЗначениеФункции;
				ОбошлиВсе = Истина;
			КонецЕсли;
			
			Если Не ПроверитьАргументФункции(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Результат = Неопределено Тогда
				Результат = Значение;
			Иначе
				Результат = Мин(Результат, Значение);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция Сумма(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);
	МассивЗначений.Добавить(Значение10);
	МассивЗначений.Добавить(Значение11);
	МассивЗначений.Добавить(Значение12);
	МассивЗначений.Добавить(Значение13);
	МассивЗначений.Добавить(Значение14);
	МассивЗначений.Добавить(Значение15);
	МассивЗначений.Добавить(Значение16);
	МассивЗначений.Добавить(Значение17);
	МассивЗначений.Добавить(Значение18);
	МассивЗначений.Добавить(Значение19);
	МассивЗначений.Добавить(Значение20);
	
	Результат = Неопределено;
	Для Каждого ЗначениеФункции Из МассивЗначений Цикл
		
		СчВлож = 0;
		ОбошлиВсе = Ложь;
		Пока Не ОбошлиВсе Цикл
			Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
				Если СчВлож = ЗначениеФункции.Количество() Тогда
					ОбошлиВсе = Истина;
					Продолжить;
				КонецЕсли;
				Значение = ЗначениеФункции[СчВлож];
				СчВлож = СчВлож + 1;
			Иначе
				Значение = ЗначениеФункции;
				ОбошлиВсе = Истина;
			КонецЕсли;
			
			Если Не ПроверитьАргументФункции(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Результат = Неопределено Тогда
				Результат = Значение;
			Иначе
				Результат = Результат + Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// если не было значений для вычислений - возвращаем 0
	Возврат ?(Результат = Неопределено, 0, Результат);
	
КонецФункции

Функция Среднее(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);
	МассивЗначений.Добавить(Значение10);
	МассивЗначений.Добавить(Значение11);
	МассивЗначений.Добавить(Значение12);
	МассивЗначений.Добавить(Значение13);
	МассивЗначений.Добавить(Значение14);
	МассивЗначений.Добавить(Значение15);
	МассивЗначений.Добавить(Значение16);
	МассивЗначений.Добавить(Значение17);
	МассивЗначений.Добавить(Значение18);
	МассивЗначений.Добавить(Значение19);
	МассивЗначений.Добавить(Значение20);
	
	Результат = Неопределено;
	Всего = 0;
	Для Каждого ЗначениеФункции Из МассивЗначений Цикл
		
		СчВлож = 0;
		ОбошлиВсе = Ложь;
		Пока Не ОбошлиВсе Цикл
			Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
				Если СчВлож = ЗначениеФункции.Количество() Тогда
					ОбошлиВсе = Истина;
					Продолжить;
				КонецЕсли;
				Значение = ЗначениеФункции[СчВлож];
				СчВлож = СчВлож + 1;
			Иначе
				Значение = ЗначениеФункции;
				ОбошлиВсе = Истина;
			КонецЕсли;
			
			Если Не ПроверитьАргументФункции(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Всего = Всего + 1;
			Если Результат = Неопределено Тогда
				Результат = Значение;
			Иначе
				Результат = Результат + Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Всего = 0 Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	Возврат Результат / Всего;
	
КонецФункции

Функция РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	МассивЗначений = Новый Массив;
	МассивЗначений.Добавить(Значение1);
	МассивЗначений.Добавить(Значение2);
	МассивЗначений.Добавить(Значение3);
	МассивЗначений.Добавить(Значение4);
	МассивЗначений.Добавить(Значение5);
	МассивЗначений.Добавить(Значение6);
	МассивЗначений.Добавить(Значение7);
	МассивЗначений.Добавить(Значение8);
	МассивЗначений.Добавить(Значение9);
	МассивЗначений.Добавить(Значение10);
	МассивЗначений.Добавить(Значение11);
	МассивЗначений.Добавить(Значение12);
	МассивЗначений.Добавить(Значение13);
	МассивЗначений.Добавить(Значение14);
	МассивЗначений.Добавить(Значение15);
	МассивЗначений.Добавить(Значение16);
	МассивЗначений.Добавить(Значение17);
	МассивЗначений.Добавить(Значение18);
	МассивЗначений.Добавить(Значение19);
	МассивЗначений.Добавить(Значение20);
	
	Результат = 0;
	ФлагВедущееЗначение = Истина;
	ВедущееЗначение = 0;
	
	Для Каждого ЗначениеФункции Из МассивЗначений Цикл
		
		СчВлож = 0;
		ОбошлиВсе = Ложь;
		Пока Не ОбошлиВсе Цикл
			Если ТипЗнч(ЗначениеФункции) = Тип("Массив") Тогда
				Если СчВлож = ЗначениеФункции.Количество() Тогда
					ОбошлиВсе = Истина;
					Продолжить;
				КонецЕсли;
				Значение = ЗначениеФункции[СчВлож];
				СчВлож = СчВлож + 1;
			Иначе
				Значение = ЗначениеФункции;
				ОбошлиВсе = Истина;
			КонецЕсли;
			
			Если ФлагВедущееЗначение Тогда
				ФлагВедущееЗначение = Ложь;
				Если ПроверитьАргументФункции(Значение) Тогда
					ВедущееЗначение = Значение;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Не ПроверитьАргументФункции(Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = Результат + Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("Результат, ВедущееЗначение", Результат, ВедущееЗначение);
	
КонецФункции

Функция Отклонение(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
		Значение5, Значение6, Значение7, Значение8,
		Значение9, Значение10, Значение11, Значение12,
		Значение13, Значение14, Значение15, Значение16,
		Значение17, Значение18, Значение19, Значение20);
	
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
	
	Возврат Результат - ВедущееЗначение;
	
КонецФункции

Функция ПроцентОтклонения(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
		Значение5, Значение6, Значение7, Значение8,
		Значение9, Значение10, Значение11, Значение12,
		Значение13, Значение14, Значение15, Значение16,
		Значение17, Значение18, Значение19, Значение20);
	
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
	
	Если Результат = 0 И ВедущееЗначение = 0 Тогда
		Возврат 0;
	ИначеЕсли ВедущееЗначение = 0 Тогда
		Возврат 100;
	КонецЕсли;
	
	Возврат Окр(100 * (Результат - ВедущееЗначение) / ВедущееЗначение, 2)
	
КонецФункции

Функция ПроцентВыполнения(Значение1, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено,
	Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено,
	Значение9 = Неопределено, Значение10 = Неопределено, Значение11 = Неопределено, Значение12 = Неопределено,
	Значение13 = Неопределено, Значение14 = Неопределено, Значение15 = Неопределено, Значение16 = Неопределено,
	Значение17 = Неопределено, Значение18 = Неопределено, Значение19 = Неопределено, Значение20 = Неопределено) Экспорт
	
	СтруктураЗначений = РассчитатьЗначениеПервойИПоследующихКолонок(Значение1, Значение2, Значение3, Значение4,
		Значение5, Значение6, Значение7, Значение8,
		Значение9, Значение10, Значение11, Значение12,
		Значение13, Значение14, Значение15, Значение16,
		Значение17, Значение18, Значение19, Значение20);
	
	Результат = СтруктураЗначений.Результат;
	ВедущееЗначение = СтруктураЗначений.ВедущееЗначение;
	
	Если ВедущееЗначение = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Окр(100 * Результат / ВедущееЗначение, 2)
	
КонецФункции

Функция Округлить(Значение, ЧислоЗнаков) Экспорт
	
	Возврат Окр(Значение, ЧислоЗнаков)
	
КонецФункции


// Описание
// 
// Параметры:
// 	ДанныеЯчеек - см. ДанныеЯчеек
// 	ПараметрыЯчеек - ТаблицаЗначений -
// 	ПараметрыПериодов - Структура -
// 	Префикс - Строка -
// 	Постфикс - Строка -
// 	СтрокаДанных - СтрокаТаблицыЗначений - Строка данных ячеек:
// 	 *Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Строка бюджета.
// 	 *Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов - Колонка бюджета.
// 	 *ОсновнойЭлемент - Булево - Флаг элемента, непосредственно выводимого в табличный документ.
// 	ЛогРасчета - Массив Из Структура -
// 	КэшРеквизитовЭлементовБюджета - См. БюджетнаяОтчетностьРасчетКэшаСервер.КэшРеквизитовЭлементовБюджета
// 	ИмяОперанда - Строка -
// 	ИменаИзмерений - Строка - Описание
// Возвращаемое значение:
// 	Число, Неопределено, Произвольный - Описание
Функция Итог(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Префикс,
				Постфикс, СтрокаДанных, ЛогРасчета, КэшРеквизитовЭлементовБюджета = Неопределено, ИмяОперанда, ИменаИзмерений = "") Экспорт
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
	МассивЗначений = Новый Массив;
	
	МассивОбщихИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ПараметрыЯчейки.ОбщиеИзмерения));
	МассивНесчитываемых  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(ИменаИзмерений),,Истина, Истина);
	МассивОбщихИзмерений = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОбщихИзмерений, МассивНесчитываемых);
	ОбщиеИзмерения = СтрСоединить(МассивОбщихИзмерений, ",");
	
	// Показатели и статьи
	СтруктураПоиска = Новый Структура(ОбщиеИзмерения);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
	СтруктураПоиска.Вставить("Строка", СтрокаДанных.Строка);
	СтруктураПоиска.Вставить("Колонка", СтрокаДанных.Колонка);
	СтруктураПоиска.Вставить("ОсновнойЭлемент", Ложь);
	
	НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			Продолжить; //ячейки обрабатываются отдельно
		КонецЕсли;
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
		
		Если ВРег(ПараметрыЯчейки.ИмяОперанда) <> ВРег(ИмяОперанда) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ИмяОперанда) Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы';
									|en = 'An error occurred while generating the report: Incorrect formula operand'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДанных.НефинансовыйПоказатель) Тогда
			ПрефиксСсылки = Префикс;
			ПостФиксСсылки = Постфикс;
			
			// В операндах производного показателя
			// может быть выбрано только количество или сумма.
		ИначеЕсли ПараметрыЯчейки.ФлагКоличество Тогда
			ПрефиксСсылки = "Количество";
			ПостФиксСсылки = "";
		Иначе
			ПрефиксСсылки = "Сумма";
			ПостФиксСсылки = ПостФикс;
		КонецЕсли;
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("СтрокаДанных", НайденнаяСтрока);
		ПараметрыРасчета.Вставить("Префикс", ПрефиксСсылки);
		ПараметрыРасчета.Вставить("Постфикс", ПостФиксСсылки);
		ПараметрыРасчета.Вставить("РасчетИзменений", Ложь);
		ПараметрыРасчета.Вставить("КэшРеквизитовЭлементовБюджета", КэшРеквизитовЭлементовБюджета);
		Значение = ПолучитьЗначениеОперанда(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, ПараметрыРасчета,
			НайденнаяСтрока.ВидОперанда);
		
		Если ЛогРасчета <> Неопределено Тогда
			
			ЗначениеДляЛога = Новый Структура();
			ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
			ЗначениеДляЛога.Вставить("ВидЭлемента", НайденнаяСтрока.ВидОперанда);
			ЗначениеДляЛога.Вставить("ИмяОперанда", СтрЗаменить(ПараметрыЯчейки.ИмяОперанда, "_", " "));
			ЗначениеДляЛога.Вставить("СтрокаОснование", ДанныеЯчеек.Индекс(НайденнаяСтрока));
			ЗначениеДляЛога.Вставить("Значение", Значение);
			ЛогРасчета.Добавить(ЗначениеДляЛога);
			
		КонецЕсли;
		
		МассивЗначений.Добавить(Значение);
		
	КонецЦикла;
	
	Если Не МассивЗначений.Количество() Тогда
		Если ЛогРасчета <> Неопределено Тогда
				
			ЗначениеДляЛога = Новый Структура();
			ЗначениеДляЛога.Вставить("ИмяПоказателя", "Сумма");
			ЗначениеДляЛога.Вставить("ВидЭлемента", "");
			ЗначениеДляЛога.Вставить("ИмяОперанда", ПараметрыЯчейки.ИмяОперанда);
			ЗначениеДляЛога.Вставить("СтрокаОснование", -1);
			ЗначениеДляЛога.Вставить("Значение", 0);
			ЛогРасчета.Добавить(ЗначениеДляЛога);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Сумма(МассивЗначений);
	
КонецФункции

Функция РазностьДат(ПараметрыПериодов, НачалоПериода, КонецПериода, Периодичность) Экспорт
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		Возврат "#Знач";
	КонецЕсли;
	
	КэшДобавленияПериодов = ПараметрыПериодов.КэшДобавленияПериодов;
	КэшРазностейДат = ПараметрыПериодов.КэшРазностейДат;
	
	КлючРазностей = Новый Структура("НачалоПериода, КонецПериода, Периодичность", НачалоПериода, КонецПериода, Периодичность);
	НайденныеСтроки = КэшРазностейДат.НайтиСтроки(КлючРазностей);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0].ВсегоПериодов;
	КонецЕсли;
	
	ВсегоПериодов = 0;
	ТекущийКонецПериода = НачалоПериода;
	Попытка
		ПериодичностьИнтервала = Перечисления.Периодичность[Периодичность];
	Исключение
		Возврат "#Знач";
	КонецПопытки;
	
	Пока ТекущийКонецПериода <= КонецПериода Цикл
		ТекущийКонецПериода = БюджетированиеКлиентСервер.ДобавитьИнтервал(ТекущийКонецПериода, ПериодичностьИнтервала, 1, КэшДобавленияПериодов);
		ВсегоПериодов = ВсегоПериодов + 1;
	КонецЦикла;
	
	НоваяЗаписьКэша = КэшРазностейДат.Добавить();
	НоваяЗаписьКэша.НачалоПериода = НачалоПериода;
	НоваяЗаписьКэша.КонецПериода = КонецПериода;
	НоваяЗаписьКэша.Периодичность = Периодичность;
	НоваяЗаписьКэша.ВсегоПериодов = ВсегоПериодов;
	
	Возврат ВсегоПериодов;
	
КонецФункции

Функция ВычислитьФормулуВБезопасномРежиме(Знач Формула, Знач МассивЗначений, Знач ДополнительныеПараметры = Неопределено)
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивЗначений", МассивЗначений);
	Если Не ДополнительныеПараметры = Неопределено И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
			Параметры.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Формула = Врег(Формула);
	
	Для Каждого КлючЗначение Из Параметры Цикл
		Формула = СтрЗаменить(Формула, Врег(КлючЗначение.Ключ), "Параметры." + КлючЗначение.Ключ);
	КонецЦикла;
	
	ИмяОбщегоМодуля = "БюджетнаяОтчетностьВыводСервер";
	ФункцииФормул = Новый Структура();
	ФункцииФормул.Вставить("ПроверитьАргументФункции", ИмяОбщегоМодуля + "." + "ПроверитьАргументФункции");
	ФункцииФормул.Вставить("Максимум", ИмяОбщегоМодуля + "." + "Максимум");
	ФункцииФормул.Вставить("Минимум", ИмяОбщегоМодуля + "." + "Минимум");
	ФункцииФормул.Вставить("Сумма", ИмяОбщегоМодуля + "." + "Сумма");
	ФункцииФормул.Вставить("Среднее", ИмяОбщегоМодуля + "." + "Среднее");
	ФункцииФормул.Вставить("РассчитатьЗначениеПервойИПоследующихКолонок", ИмяОбщегоМодуля + "." + "РассчитатьЗначениеПервойИПоследующихКолонок");
	ФункцииФормул.Вставить("Отклонение", ИмяОбщегоМодуля + "." + "Отклонение");
	ФункцииФормул.Вставить("ПроцентОтклонения", ИмяОбщегоМодуля + "." + "ПроцентОтклонения");
	ФункцииФормул.Вставить("ПроцентВыполнения", ИмяОбщегоМодуля + "." + "ПроцентВыполнения");
	ФункцииФормул.Вставить("Округлить", ИмяОбщегоМодуля + "." + "Округлить");
	ФункцииФормул.Вставить("Итог", ИмяОбщегоМодуля + "." + "Итог");
	ФункцииФормул.Вставить("РазностьДат", ИмяОбщегоМодуля + "." + "РазностьДат");
	
	Для Каждого КлючЗначение Из ФункцииФормул Цикл
		Формула = СтрЗаменить(Формула, Врег(КлючЗначение.Ключ) + "(", КлючЗначение.Значение + "(");
	КонецЦикла;
	
	Формула = СтрЗаменить(Формула, """" + ИмяОбщегоМодуля + ".", """");
	Если ПустаяСтрока(Формула) Тогда
		РезультатВычисления = "#Знач";
	Иначе
		РезультатВычисления = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Формула, Параметры);
	КонецЕсли;
	
	Возврат РезультатВычисления;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Возвращает признак существования индекса у таблицы значений.
// 
// Параметры:
// 	ТаблицаЗначений - ТаблицаЗначений - Произвольная таблица значений, у которой проверяется наличие индекса.
// 	ПоляИндекса - Строка - Поля индекса в произвольном порядке, перечисленные через запятую.
// Возвращаемое значение:
// 	Булево - Признак существования индекса у таблицы значений
Функция ИндексСуществует(ТаблицаЗначений, ПоляИндекса)
	
	ИндексСуществует = Ложь;
	Если ТаблицаЗначений.Индексы.Количество() > 0 Тогда
		МассивПолей = СтрРазделить(СтрЗаменить(ПоляИндекса, " ", ""), ",", Ложь);
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(МассивПолей);
		Список.СортироватьПоЗначению();
		УпорядоченныйМассив = Список.ВыгрузитьЗначения();
		УпорядоченныйИндекс = СтрСоединить(УпорядоченныйМассив, ",");
		
		Для каждого ИндексТаблицы Из ТаблицаЗначений.Индексы Цикл
			МассивПолей = СтрРазделить(СтрЗаменить(ИндексТаблицы, " ", ""), ",", Ложь);
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(МассивПолей);
			Список.СортироватьПоЗначению();
			УпорядоченныйМассив = Список.ВыгрузитьЗначения();
			УпорядоченныйИндексТаблицы = СтрСоединить(УпорядоченныйМассив, ",");
			Если УпорядоченныйИндекс = УпорядоченныйИндексТаблицы Тогда
				ИндексСуществует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИндексСуществует;
	
КонецФункции

Процедура СброситьФлагРасчетаУСвязанныхЯчеек(ДанныеЯчеек, НовыеДанныеЯчеек, ПараметрыЯчеек, Строка, Колонка, СтрокиКПересчету)
	
	СтруктураПоиска = Новый Структура("ОперандСтрока, ОперандКолонка", Строка, Колонка);
	НайденныеСтроки = ПараметрыЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаПараметров Из НайденныеСтроки Цикл
		Если СтрокаПараметров.Обработано Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура("ИндексСтроки", СтрокаПараметров.ИндексСтроки);
		СтрокиДанныхЯчеек = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из СтрокиДанныхЯчеек Цикл
			СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка, Колонка", Истина, НайденнаяСтрока.Строка, НайденнаяСтрока.Колонка);
			СтрокиОсновногоЭлемента = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОсновнойЭлемент Из СтрокиОсновногоЭлемента Цикл
				ИндексСтроки = ДанныеЯчеек.Индекс(СтрокаОсновнойЭлемент);
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанСумма = Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанКоличество = Ложь;
				НовыеДанныеЯчеек[ИндексСтроки].РассчитанЗначение = Ложь;
				СтрокиКПересчету.Вставить(СтрокаОсновнойЭлемент);
				СброситьФлагРасчетаУСвязанныхЯчеек(ДанныеЯчеек, НовыеДанныеЯчеек, ПараметрыЯчеек,
					СтрокаОсновнойЭлемент.Строка, СтрокаОсновнойЭлемент.Колонка, СтрокиКПересчету);
			КонецЦикла;
		КонецЦикла;
		СтрокаПараметров.Обработано = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСтрокуЯчеекКРасчету(НовыеДанныеЯчеек, ПредыдущиеДанныеЯчеек, СтруктураПоиска, СтрокиКПересчету)
	
	НайденныеСтроки = НовыеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НовыеДанныеЯчеек.Удалить(НайденнаяСтрока);
	КонецЦикла;
	НайденныеСтроки = ПредыдущиеДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокиКПересчету.Вставить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонокТаблицыДанных, ПараметрыДанных) Экспорт
	
	Результат = Новый Структура("ГраницаФактДанных, НачалоПериода, КонецПериода");
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыДанных);
	Результат.Вставить("УпорядоченныеПериодичностиОтчета", Новый Массив);
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	Для Каждого Периодичность Из УпорядоченныеПериодичности Цикл
		ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Результат.УпорядоченныеПериодичностиОтчета.Добавить(ИмяПериода);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("КэшДобавленияПериодов", Новый Соответствие);
	
	КэшДобавления = Новый ТаблицаЗначений;
	КэшДобавления.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	КэшДобавления.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("Строка"));
	КэшДобавления.Колонки.Добавить("ВсегоПериодов", Новый ОписаниеТипов("Число"));
	КэшДобавления.Индексы.Добавить("НачалоПериода, КонецПериода, Периодичность");
	
	Результат.Вставить("КэшРазностейДат", КэшДобавления);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКэшПараметровЕдиницИзмерения(ДанныеЯчеек, ПараметрыЯчеек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ДанныеЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	&ДанныеЯчеек КАК ДанныеЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеек.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ПараметрыЯчеек.ФлагКоличество,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ СтатьиПоказатели
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО ДанныеЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка КАК ОбъектУчета,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)) КАК ЗаполнениеЕдиницыИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.СтатьяБюджетов
	|			И (СтатьиПоказатели.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)),
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения)
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.ПоказательБюджетов
	|ГДЕ
	|	Справочник.УчитыватьПоКоличеству
	|	И СтатьиПоказатели.ФлагКоличество
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаЕдиницыИзмерения,
	|	Справочник.ЕдиницаИзмеренияОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения КАК СТРОКА(1000)),
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения)
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.НефинансовыйПоказатель
	|ГДЕ
	|	Справочник.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Количественный)
	|	И СтатьиПоказатели.ФлагЗначение";
	
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек);
	ТаблицаКоличественногоУчета = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, ОбъектУчета, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой");
	ТаблицаКоличественногоУчета.Индексы.Добавить("Колонка, ЕдиницаИзмеренияОпределяетсяАналитикой, АналитикаЕдиницыИзмерения");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаКоличественногоУчета;
	
КонецФункции

Функция ПолучитьКэшПараметровВалют(ДанныеЯчеек, ПараметрыЯчеек, ТаблицаПодчиненностиЭлементов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЯчеек.СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ДанныеЯчеек.ИндексСтроки КАК ИндексСтроки
	|ПОМЕСТИТЬ ДанныеЯчеек
	|ИЗ
	|	&ДанныеЯчеек КАК ДанныеЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	|	ПараметрыЯчеек.ФлагСумма,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ ПараметрыЯчеек
	|ИЗ
	|	&ПараметрыЯчеек КАК ПараметрыЯчеек
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПодчиненностиЭлементов.Ссылка,
	|	ТаблицаПодчиненностиЭлементов.Родитель
	|ПОМЕСТИТЬ ТаблицаПодчиненностиЭлементов
	|ИЗ
	|	&ТаблицаПодчиненностиЭлементов КАК ТаблицаПодчиненностиЭлементов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаПодчиненностиЭлементов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЯчеек.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеЯчеек.ПоказательБюджетов,
	|	ДанныеЯчеек.НефинансовыйПоказатель,
	|	ДанныеЯчеек.Строка,
	|	ДанныеЯчеек.Колонка,
	|	ПараметрыЯчеек.ФлагСумма,
	|	ПараметрыЯчеек.ФлагЗначение
	|ПОМЕСТИТЬ СтатьиПоказатели
	|ИЗ
	|	ДанныеЯчеек КАК ДанныеЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
	|		ПО ДанныеЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка КАК ОбъектУчета,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000)) КАК ЗаполнениеЕдиницыИзмерения
	|ПОМЕСТИТЬ ДанныеПоСтрокам
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.СтатьяБюджетов
	|			И (СтатьиПоказатели.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка))
	|ГДЕ
	|	Справочник.УчитыватьПоВалюте
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагСумма
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000))
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.ПоказательБюджетов
	|ГДЕ
	|	Справочник.УчитыватьПоВалюте
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагСумма
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Справочник.Ссылка,
	|	СтатьиПоказатели.Строка,
	|	СтатьиПоказатели.Колонка,
	|	Справочник.АналитикаВалюты,
	|	Справочник.ВалютаОпределяетсяАналитикой,
	|	ВЫРАЗИТЬ(Справочник.АналитикаВалюты.ЗаполнениеВалюты КАК СТРОКА(1000))
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК Справочник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиПоказатели КАК СтатьиПоказатели
	|		ПО Справочник.Ссылка = СтатьиПоказатели.НефинансовыйПоказатель
	|ГДЕ
	|	Справочник.ВидПоказателя = ЗНАЧЕНИЕ(Перечисление.ВидыНефинансовыхПоказателей.Денежный)
	|	И Справочник.ВалютаОпределяетсяАналитикой
	|	И СтатьиПоказатели.ФлагЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПодчиненностиЭлементов.Ссылка,
	|	ТаблицаПодчиненностиЭлементов.Родитель
	|ПОМЕСТИТЬ РодителиСтрок
	|ИЗ
	|	ТаблицаПодчиненностиЭлементов КАК ТаблицаПодчиненностиЭлементов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|		ПО ТаблицаПодчиненностиЭлементов.Родитель = ДанныеПоСтрокам.Строка
	|ГДЕ
	|	ДанныеПоСтрокам.Строка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоСтрокам.ОбъектУчета,
	|	ДанныеПоСтрокам.Строка,
	|	ДанныеПоСтрокам.Колонка,
	|	ДанныеПоСтрокам.АналитикаВалюты,
	|	ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой,
	|	ДанныеПоСтрокам.ЗаполнениеЕдиницыИзмерения
	|ИЗ
	|	ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено,
	|	РодителиСтрок.Родитель,
	|	ДанныеПоСтрокам.Колонка,
	|	МАКСИМУМ(ДанныеПоСтрокам.АналитикаВалюты),
	|	МАКСИМУМ(ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой),
	|	МАКСИМУМ(ДанныеПоСтрокам.ЗаполнениеЕдиницыИзмерения)
	|ИЗ
	|	ДанныеПоСтрокам КАК ДанныеПоСтрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодителиСтрок КАК РодителиСтрок
	|		ПО ДанныеПоСтрокам.Строка = РодителиСтрок.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПоСтрокам.Колонка,
	|	РодителиСтрок.Родитель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоСтрокам.АналитикаВалюты) = 1 И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПоСтрокам.ВалютаОпределяетсяАналитикой) = 1";
	
	Запрос.УстановитьПараметр("ДанныеЯчеек", ДанныеЯчеек);
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек);
	Запрос.УстановитьПараметр("ТаблицаПодчиненностиЭлементов", ТаблицаПодчиненностиЭлементов);
	
	ТаблицаКоличественногоУчета = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКоличественногоУчета.Индексы.Добавить("Строка, Колонка, ВалютаОпределяетсяАналитикой");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаКоличественногоУчета;
	
КонецФункции


// Возвращает список подчиненных элементов.
// 
// Параметры:
// 	ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - элемент отчета.
// 	ТаблицаПодчиненных - ТаблицаЗначений - Таблица подчиненных элементов:
// 	 *Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов - элемент отчета.
// 	 *Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов - подчиненный элемент отчета.
// Возвращаемое значение:
// 	СписокЗначений из СправочникСсылка.ЭлементыФинансовыхОтчетов - Список подчиненных элементов отчета.
//
Функция СписокПодчиненныхЭлементов(ЭлементОтчета, ТаблицаПодчиненных) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	НайденныеСтроки = ТаблицаПодчиненных.НайтиСтроки(Новый Структура("Родитель", ЭлементОтчета));
	Для Каждого СтрокаЭлементов Из НайденныеСтроки Цикл
		СписокЗначений.Добавить(СтрокаЭлементов.Ссылка);
	КонецЦикла;
	СписокЗначений.Добавить(ЭлементОтчета);
	Возврат СписокЗначений;
	
КонецФункции

Функция ПолучитьЗначенияПодстановкиПоПараметрамДанных(РежимФормирования, ПараметрыДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПеременныеПодстановки = БюджетнаяОтчетностьКлиентСервер.ПеременныеБюджетныхОтчетов();
	
	РеквизитыДокумента = Неопределено;
	Если ПараметрыДанных.Свойство("Документ") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыДанных.Документ, "Статус, Ответственный");
	КонецЕсли;
	
	ЗначенияПодстановки = Новый ТаблицаЗначений;
	ЗначенияПодстановки.Колонки.Добавить("ЧтоМенять");
	ЗначенияПодстановки.Колонки.Добавить("НаЧтоМенять");
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.ВидОтчета.Имя;
	НоваяСтрока.НаЧтоМенять = ПараметрыДанных.ВидБюджета;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.ТекущаяДатаИВремя.Имя;
	НоваяСтрока.НаЧтоМенять = Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.ПериодОтчетности.Имя;
	НоваяСтрока.НаЧтоМенять = ОтчетыУТКлиентСервер.ПолучитьПредставлениеПериода(
		ПараметрыДанных.НачалоПериода,
		ПараметрыДанных.КонецПериода);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.КонечнаяДатаПериодаОтчета.Имя;
	НоваяСтрока.НаЧтоМенять = Формат(ПараметрыДанных.КонецПериода, "ДЛФ=DD");
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.ГраницаФактическихДанных.Имя;
	НоваяСтрока.НаЧтоМенять = Формат(ПараметрыДанных.ГраницаФактДанных, "ДЛФ=DD");
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.Организация.Имя;
	ПараметрыДанных.Свойство("Организация", НоваяСтрока.НаЧтоМенять);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.Подразделение.Имя;
	ПараметрыДанных.Свойство("Подразделение", НоваяСтрока.НаЧтоМенять);
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.СтатусДокумента.Имя;
	Если ПараметрыДанных.Свойство("Документ") Тогда
		НоваяСтрока.НаЧтоМенять = РеквизитыДокумента.Статус;
	Иначе
		НоваяСтрока.НаЧтоМенять = Строка(ПараметрыДанных.Статус);
	КонецЕсли;
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.Сценарий.Имя;
	ПараметрыДанных.Свойство("Сценарий", НоваяСтрока.НаЧтоМенять);
		
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.Ответственный.Имя;
	Если ПараметрыДанных.Свойство("Документ") Тогда
		НоваяСтрока.НаЧтоМенять = РеквизитыДокумента.Ответственный;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ?(ПараметрыДанных.Свойство("Документ"), ПараметрыДанных.Документ, Неопределено));
	Запрос.УстановитьПараметр("ВидБюджета", ПараметрыДанных.ВидБюджета);
	
	//++ НЕ УТКА
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК Ссылка
	|ИЗ
	|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
	|ГДЕ
	|	ВЫРАЗИТЬ(БюджетнаяЗадача.СписокДокументов.Документ КАК Документ.ЭкземплярБюджета) = &Ссылка
	|	И НЕ БюджетнаяЗадача.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПодготовкиБюджетов.Ссылка,
	|	ЭтапыПодготовкиБюджетов.НастройкаДействия,
	|	ЭтапыПодготовкиБюджетов.Ответственный.Представление КАК Ответственный
	|ИЗ
	|	Справочник.ЭтапыПодготовкиБюджетов КАК ЭтапыПодготовкиБюджетов
	|ГДЕ
	|	ЭтапыПодготовкиБюджетов.Действие = &ТипДействия
	|	И НЕ ЭтапыПодготовкиБюджетов.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ТипДействия", Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса0 = РезультатЗапроса[0]; // РезультатЗапроса
	
	ШагЭтаповПодготовкиБюджетов = РезультатЗапроса0.Выбрать();
	
	НоваяСтрока = ЗначенияПодстановки.Добавить();
	НоваяСтрока.ЧтоМенять = ПеременныеПодстановки.Утверждающий.Имя;
	Если ШагЭтаповПодготовкиБюджетов.Следующий() Тогда
		РезультатЗапроса1 = РезультатЗапроса[1]; // РезультатЗапроса - 
		ВсеШагиЭтаповПодготовкиБюджетов = РезультатЗапроса1.Выбрать();
		Пока ВсеШагиЭтаповПодготовкиБюджетов.Следующий() Цикл
			НастройкаДействия = ВсеШагиЭтаповПодготовкиБюджетов.НастройкаДействия; // ХранилищеЗначения
			Настройки = НастройкаДействия.Получить();
			СтрокаНастроек = Настройки.Найти("УтверждаемыеЭтапыПодготовкиБюджетов", "Имя");
			Если СтрокаНастроек <> Неопределено Тогда
				УтверждаемыеШаги = СтрокаНастроек.Значение;
				Если УтверждаемыеШаги.НайтиПоЗначению(ШагЭтаповПодготовкиБюджетов.Ссылка) <> Неопределено Тогда
					НоваяСтрока.НаЧтоМенять = ВсеШагиЭтаповПодготовкиБюджетов.Ответственный;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыБюджетовАналитикиШапки.ВидАналитики КАК Ссылка,
	|	ВидыБюджетовАналитикиШапки.НомерСтроки КАК НомерСтроки,
	|	ВидыБюджетовАналитикиШапки.ВидАналитики.Идентификатор КАК Идентификатор,
	|	ВидыБюджетовАналитикиШапки.ВидАналитики.Представление КАК Представление
	|ИЗ
	|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
	|ГДЕ
	|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
	
	ВыборкаПредставленийАналитик = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПредставленийАналитик.Следующий() Цикл
		НоваяСтрока = ЗначенияПодстановки.Добавить();
		НоваяСтрока.ЧтоМенять = "[" + ВыборкаПредставленийАналитик.Идентификатор + "]";
		Если ПараметрыДанных.Свойство("Документ") И ЗначениеЗаполнено(ПараметрыДанных.Документ) Тогда
			НоваяСтрока.НаЧтоМенять = ПараметрыДанных.Документ["Аналитика"+ВыборкаПредставленийАналитик.НомерСтроки];
		Иначе
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВыборкаПредставленийАналитик.Ссылка);
			ПараметрыДанных.Свойство(ИмяАналитики, НоваяСтрока.НаЧтоМенять);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияПодстановки;
	
КонецФункции

Функция ПолучитьПараметрыВыводаПримечаний(СтруктураКолонокТаблицыДанных, ДанныеЯчеек, ДеревоВывода)
	
	Результат = Новый Структура;
	
	Для Каждого ТекСтрока Из ДанныеЯчеек Цикл
		Если Не ПустаяСтрока(ТекСтрока.Примечание) Тогда
			Результат.Вставить("ВыводитьПримечания", Истина);
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Результат.Вставить("ВыводитьНомераТаблиц", 
		ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ИмяИзмерения","Таблица")).Количество() > 1);
	
	СписокКолонок = "СтатьяБюджетов";
	Для Каждого Периодичность Из СтруктураКолонокТаблицыДанных.Периодичности Цикл
		ПериодСтрокой = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		СписокКолонок = СписокКолонок + "," + ПериодСтрокой;
	КонецЦикла;
	
	Для Каждого Измерение Из СтруктураКолонокТаблицыДанных.Измерения Цикл
		СписокКолонок = СписокКолонок + "," + Измерение;
	КонецЦикла;
	
	Для Каждого ВидАналитики Из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		СписокКолонок = СписокКолонок + "," + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
	КонецЦикла;
	СписокКолонок = СписокКолонок + ",Количество,Сумма,СуммаВал,Примечание";
	
	Результат.Вставить("Примечания", НовыйСтруктураПримечания(ДанныеЯчеек, СписокКолонок));
	
	Возврат Результат;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ДанныеЯчеек - см. ДанныеЯчеек
// 	СписокКолонок - Строка -
// 	
// Возвращаемое значение:
// 	Структура - содержит указанный список колонок из таблицы ДанныеЯчеек, а также:
// 	* НомерТаблицы    - Число -
// 	* НомерПримечания - Число -
// 	* ТаблицаДанных   - см. ДанныеЯчеек
// 	* ТаблицаДанных   - ТаблицаЗначений - содержит:
// 		** НомерТаблицы    - Число -
// 		** НомерПримечания - Число -
//
Функция НовыйСтруктураПримечания(ДанныеЯчеек, СписокКолонок)
	
	ТаблицаДанных = ДанныеЯчеек.СкопироватьКолонки(СписокКолонок); // ТаблицаЗначений, см. ДанныеЯчеек
	КолонкиТаблицыДанных = ТаблицаДанных.Колонки; // КоллекцияКолонокТаблицыЗначений
	КолонкиТаблицыДанных.Добавить("НомерТаблицы",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3)));
	КолонкиТаблицыДанных.Добавить("НомерПримечания",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5)));
	
	Результат = Новый Структура("НомерТаблицы, НомерПримечания, ТаблицаДанных", 0, 0, ТаблицаДанных);
	
	Возврат Результат;
	
КонецФункции


// Выполняет проверку формулы бюджетирования.
// 
// Параметры:
// 	Формула - Строка - Формула.
// 	Операнды - ТаблицаЗначений - Таблица операндов из формы элемента бюджетного отчета:
// 	 *Идентификатор - Строка - Идентификатор операнда.
// 	Отказ - Булево - Флаг отказа из-за ошибки.
Процедура ПроверитьФормулу(Знач Формула, Операнды, Отказ) Экспорт
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	ОграничениеДлиныФормулы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.Формула, "ТипЗначения").КвалификаторыСтроки.Длина;
	Если СтрДлина(Формула) > ОграничениеДлиныФормулы Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Превышена максимальная длина формулы, введено %1 символов, доступно %2 символов.';
				|en = 'Maximum formula length exceeded: %1 characters entered, %2 characters available.'"),
			СтрДлина(Формула),
			ОграничениеДлиныФормулы);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	МассивЗначений = Новый Массив;
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДатаСеанса() - Дата(1, 1, 1));
	Для Каждого Операнд Из Операнды Цикл
		
		Если Не ЗначениеЗаполнено(Операнд.Идентификатор) Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка формирования отчета: Неверный операнд формулы';
									|en = 'An error occurred while generating the report: Incorrect formula operand'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли СтрНайти(Формула, "["+Операнд.Идентификатор+"]") = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Операнд %1 отсутствует в формуле.';
					|en = 'The %1 operand is missing in the formula.'"), Операнд.Идентификатор + " " + Операнд.НаименованиеДляПечати);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
		МассивЗначений.Добавить(Значение);
		
		Пока СтрНайти(ВРег(Формула), "ИТОГ(") Цикл
			ЧастьФормулы = БюджетнаяОтчетностьРасчетКэшаСервер.ЧастьФормулыСИтогомИОперандом(Формула, "[" + Операнд.Идентификатор + "]", НачалоФормулы, ОкончаниеФормулы);
			Если ЧастьФормулы = Неопределено Тогда
				// операнд с функцией итог не используется
				Прервать;
			КонецЕсли;
			ОкончаниеФормулы = БюджетнаяОтчетностьРасчетКэшаСервер.ОкончаниеФормулы(Формула, ОкончаниеФормулы) + ")";
			Формула = СтрЗаменить(Формула, ЧастьФормулы + ОкончаниеФормулы, "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
			Значение = ГСЧ.СлучайноеЧисло(1000, 10000000);
			МассивЗначений.Добавить(Значение);
		КонецЦикла;
		
		Формула = СтрЗаменить(Формула, "[" + Операнд.Идентификатор + "]", "МассивЗначений[" + МассивЗначений.ВГраница() + "]");
		
	КонецЦикла;
	
	Если СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
		БюджетнаяОтчетностьРасчетКэшаСервер.ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула);
		
		Формула = БюджетнаяОтчетностьРасчетКэшаСервер.СтрЗаменитьБезУчетаРегистра(Формула, "РазностьДат(ПараметрыПериодов", "РазностьДат(Параметры");	
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	НачалоПериода = ТекущаяДатаСеанса;
	КонецПериода = ТекущаяДатаСеанса;
	ПериодГруппировки = ТекущаяДатаСеанса;
	ГраницаФактДанных = ТекущаяДатаСеанса;
	
	ТаблицаКэша = Новый ТаблицаЗначений;
	ТаблицаКэша.Колонки.Добавить("НачалоПериода");
	ТаблицаКэша.Колонки.Добавить("КонецПериода");
	ТаблицаКэша.Колонки.Добавить("Периодичность");
	ТаблицаКэша.Колонки.Добавить("ВсегоПериодов");
	
	ПараметрыПериодов = Новый Структура("КэшДобавленияПериодов, КэшРазностейДат", Новый Соответствие, ТаблицаКэша);
	ПараметрыПериодов.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПериодов.Вставить("КонецПериода", КонецПериода);
	ПараметрыПериодов.Вставить("ГраницаФактДанных", ГраницаФактДанных);
	ПараметрыПериодов.Вставить("ПериодГруппировки", ПериодГруппировки);
	
	Попытка
		Результат = ВычислитьФормулуВБезопасномРежиме(Формула, МассивЗначений, ПараметрыПериодов);
	Исключение
		ТекстСообщения = НСтр("ru = 'В формуле обнаружены ошибки';
								|en = 'Errors were found in the formula.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Функция ДобавитьСтрокуДанныхЯчеек(ДанныеЯчеек, ЯчейкаОтчета, ЗначенияИзмерений, КолонкаОтчета) Экспорт
	
	НоваяСтрока = ДанныеЯчеек.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЯчейкаОтчета);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияИзмерений);
	
	НоваяСтрока.РассчитанСумма = Ложь;
	НоваяСтрока.РассчитанСуммаВал = Ложь;
	НоваяСтрока.РассчитанКоличество = Ложь;
	НоваяСтрока.РассчитанЗначение = Ложь;
	
	ОтборЯчейки = "Строка,";
	Если ЗначениеЗаполнено(КолонкаОтчета) Тогда
		ОтборЯчейки = ОтборЯчейки + "Колонка,";
	КонецЕсли;
	ОтборЯчейки = ОтборЯчейки + "ОсновнойЭлемент";
	НоваяСтрока.ОтборЯчейки = ОтборЯчейкиПоСтруктуреПоиска(ЗначенияИзмерений, ОтборЯчейки);
	
	Возврат НоваяСтрока;
	
КонецФункции


// Возвращает структуру имя области - область табличного документа для вывода бюджета
// в табличный документ.
// 
// Параметры:
// 	ПараметрыВывода - Структура - Структура параметров вывода:
// 	 *ВыводитьПримечания - Булево - Флаг необходимости выводить примечания.
// 	 *ВыводитьНомераТаблиц - Булево - Флаг необходимости выводить номера таблиц.
// Возвращаемое значение:
// 	Структура - Области бюджета по именам областей:
// * НомерТаблицы - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокНачалоТаблицыНумерацияСтрок - ТабличныйДокумент - Область макета бюджета.
// * ШапкаНачалоТаблицыНумерацияСтрок - ТабличныйДокумент - Область макета бюджета.
// * ПустаяСтрока - ТабличныйДокумент - Область макета бюджета.
// * ЗаголовокТаблицы - ТабличныйДокумент - Область макета бюджета.
// * Текст - ТабличныйДокумент - Область макета бюджета.
// * ЗаголовокОтчета - ТабличныйДокумент - Область макета бюджета.
// * ШапкаНачалоТаблицы - ТабличныйДокумент - Область макета бюджета.
// * ШапкаДополнительнаяСекция - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок1СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок2СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок3СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок1 - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок2 - ТабличныйДокумент - Область макета бюджета.
// * ШапкаГруппировкаКолонок3 - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокНачалоТаблицы - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокДополнительнаяСекция - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок1СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок2СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок3СПримечанием - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок1 - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок2 - ТабличныйДокумент - Область макета бюджета.
// * НумерацияКолонокГруппировкаКолонок3 - ТабличныйДокумент - Область макета бюджета.
//
Функция СтруктураОбластейМакета(ПараметрыВывода) Экспорт
	
	МакетОформления 	= ПолучитьОбщийМакет("БюджетныйОтчет");
	СтруктураОбластей 	= Новый Структура;
	
	СтруктураОбластей.Вставить("ЗаголовокОтчета", 	МакетОформления.ПолучитьОбласть("ЗаголовокОтчета|ОбластьЗаголовков"));
	СтруктураОбластей.Вставить("Текст", 			МакетОформления.ПолучитьОбласть("Текст|ОбластьЗаголовков"));
	СтруктураОбластей.Вставить("ЗаголовокТаблицы", 	МакетОформления.ПолучитьОбласть("ЗаголовокТаблицы|ОбластьЗаголовков"));
	СтруктураОбластей.Вставить("ПустаяСтрока", 		МакетОформления.ПолучитьОбласть("ПустаяСтрока"));
	
	МассивВариантовСтрок = Новый Массив;
	МассивВариантовСтрок.Добавить("");
	МассивВариантовСтрок.Добавить("НумерацияСтрок");
	
	СтруктураВариантовКолонок = ?(ПараметрыВывода.ВыводитьПримечания,
										Новый Структура("НачалоТаблицы, ДополнительнаяСекция, ГруппировкаКолонок1СПримечанием,
														|ГруппировкаКолонок2СПримечанием, ГруппировкаКолонок3СПримечанием"),
											Новый Структура("НачалоТаблицы, ДополнительнаяСекция, ГруппировкаКолонок1,
															|ГруппировкаКолонок2, ГруппировкаКолонок3"));
	
	ОтрабатываетсяУровней = 8;
	
	Для Каждого ВариантКолонки Из СтруктураВариантовКолонок Цикл
	
		СтруктураОбластей.Вставить("Шапка" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("Шапка|" + ВариантКолонки.Ключ));
		
		СтруктураОбластей.Вставить("НумерацияКолонок" + ВариантКолонки.Ключ,
						МакетОформления.ПолучитьОбласть("НумерацияКолонок|" + ВариантКолонки.Ключ));
	
	КонецЦикла;
		
	СтруктураОбластей.Вставить("ШапкаНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("ШапкаНумерацияСтрок|НачалоТаблицы"));
	
	СтруктураОбластей.Вставить("НумерацияКолонокНачалоТаблицыНумерацияСтрок",
					МакетОформления.ПолучитьОбласть("НумерацияКолонокНумерацияСтрок|НачалоТаблицы"));
	
	Для Каждого ВариантСтроки Из МассивВариантовСтрок Цикл
		
		Для Сч = 1 По ОтрабатываетсяУровней - 1 Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "НачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
		Для Сч = 1 По ОтрабатываетсяУровней Цикл
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналНачалоТаблицы" + ВариантСтроки, 
										МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал" + ВариантСтроки + "|НачалоТаблицы"));
		КонецЦикла;
		
	КонецЦикла;
	
	Для Сч = 1 По ОтрабатываетсяУровней - 1 Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 По ОтрабатываетсяУровней Цикл
		СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналДополнительнаяСекция", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ДополнительнаяСекция"));
	КонецЦикла;
	
	Для Сч = 1 По ОтрабатываетсяУровней - 1 Цикл
		Если ПараметрыВывода.ВыводитьПримечания Тогда
			СтруктураОбластей.Вставить("Группировка" + Сч + "Значение",
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ГруппировкаКолонок1СПримечанием"));
			СтруктураОбластей.Вставить("Группировка" + Сч + "Примечание", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ПримечаниеКолонка"));
		Иначе
			СтруктураОбластей.Вставить("Группировка" + Сч + "Значение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "|ГруппировкаКолонок1"));
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 1 По ОтрабатываетсяУровней Цикл
		Если ПараметрыВывода.ВыводитьПримечания Тогда
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналЗначение",
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ГруппировкаКолонок1СПримечанием"));
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналПримечание", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ПримечаниеКолонка"));
		Иначе
			СтруктураОбластей.Вставить("Группировка" + Сч + "ФиналЗначение", 
									МакетОформления.ПолучитьОбласть("Группировка" + Сч + "Финал|ГруппировкаКолонок1"));
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыВывода.ВыводитьПримечания И ПараметрыВывода.ВыводитьНомераТаблиц Тогда
		СтруктураОбластей.Вставить("НомерТаблицы", МакетОформления.ПолучитьОбласть("НомерТаблицы"));
	КонецЕсли;
	
	Возврат СтруктураОбластей;
	
КонецФункции

Процедура ПроверкаВозможностиЗаполненияИзмеренийВСтруктуреЯчеек(ОписаниеОтчета, ИсточникиЗначенийИзмерений, ДеревоВывода)
	
	Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника", "Документ")).Количество() = ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Сч = 1;
	ТекстЗапроса = "";
	
	ЭлементыОтчетаПоИзмерениям = Новый Соответствие;
	
	ТипыЗначенийАналитик = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОписаниеОтчета.ВидыАналитик, "ТипЗначения");
	Для Каждого Измерение Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		
		НайденныеИсточникиЗначенийИзмерений = ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", ИмяПоля));
		Если НайденныеИсточникиЗначенийИзмерений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТипАналитики = ТипыЗначенийАналитик.Получить(Измерение).Типы()[0];
		МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
		ПолноеИмя = МетаданныеАналитики.ПолноеИмя();
		ЕстьПометкаУдаления = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ПометкаУдаления");
		ЕстьЭтоГруппа = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ЭтоГруппа");
		ВыводитьИерархиюЭлементов = Ложь;
		Для Каждого НайденныйИсточник Из НайденныеИсточникиЗначенийИзмерений Цикл
			СтрокиДереваВывода = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ЭлементОтчета, ИмяИзмерения", НайденныйИсточник.Строка, ИмяПоля), Истина);
			Если СтрокиДереваВывода.Количество() = 0 Тогда
				СтрокиДереваВывода = ДеревоВывода.Строки.НайтиСтроки(Новый Структура("ЭлементОтчета, ИмяИзмерения", НайденныйИсточник.Колонка, ИмяПоля), Истина);
			КонецЕсли;
			Если СтрокиДереваВывода.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДереваВывода = СтрокиДереваВывода[0];
			Если Не ВыводитьИерархиюЭлементов Тогда
				ВыводитьИерархиюЭлементов = СтрокаДереваВывода.ВыводитьИерархиюЭлементов;
			КонецЕсли;
			ЭлементыОтчетаПоИзмерениям.Вставить(СтрокаДереваВывода.ЭлементОтчета, ИмяПоля);
		КонецЦикла;
		
		Если Сч > 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			| ";
		КонецЕсли;
		
		ТекстВыборки = "ВЫБРАТЬ
			|	&ИмяИзмерения КАК Измерение,
			|	&ВыводитьИерархиюЭлементов КАК ВыводитьИерархиюЭлементов,
			|	СУММА(1) КАК Количество
			|ИЗ
			|	&ТаблицаИсточник КАК Данные
			|ГДЕ
			|	&УсловияВыборки";
		ТекстВыборки = СтрЗаменить(ТекстВыборки, "&ИмяИзмерения", """" + ИмяПоля + """");
		ТекстВыборки = СтрЗаменить(ТекстВыборки, "&ВыводитьИерархиюЭлементов", ?(ВыводитьИерархиюЭлементов, "ИСТИНА", "ЛОЖЬ"));
		ТекстВыборки = СтрЗаменить(ТекстВыборки, "&ТаблицаИсточник", ПолноеИмя);
		
		Если ЕстьПометкаУдаления Тогда
			УсловияВыборки = "НЕ Данные.ПометкаУдаления";
		Иначе
			УсловияВыборки = "Истина";
		КонецЕсли;
		
		Если ЕстьЭтоГруппа Тогда
			УсловияВыборки = УсловияВыборки + "
			|	И НЕ Данные.ЭтоГруппа";
		КонецЕсли;
		ТекстВыборки = СтрЗаменить(ТекстВыборки, "&УсловияВыборки", УсловияВыборки);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + ТекстВыборки + " ";
		
		Сч = Сч + 1;
	КонецЦикла;
		
	Если ТекстЗапроса = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультат Из Результат Цикл
		Если Не ЗначениеЗаполнено(СтрокаРезультат.Количество) Тогда
			СтрокаРезультат.Количество = 1;
		КонецЕсли;
		// Для аналитик с выводом иерархии допустимое количество в 3 раза больше в связи с тем,
		// что вероятно используется дополнительный отбор и выводимого в бюджет количества будет значительно меньше
		Если СтрокаРезультат.ВыводитьИерархиюЭлементов Тогда
			СтрокаРезультат.Количество = Цел(СтрокаРезультат.Количество / 3);
		КонецЕсли;
	КонецЦикла;
	
	КомбинацииАналитик = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ЭлементыОтчетаПоИзмерениям Цикл
		ЭлементОтчета = КлючИЗначение.Ключ;
		ИмяПоля = КлючИЗначение.Значение;
		СтрокаДереваВывода = ДеревоВывода.Строки.Найти(ЭлементОтчета, "ЭлементОтчета", Истина);
		Для Каждого КлючИЗначение Из ЭлементыОтчетаПоИзмерениям Цикл
			Если КлючИЗначение.Ключ = ЭлементОтчета Или КлючИЗначение.Значение = ИмяПоля Тогда
				Продолжить;
			КонецЕсли;
			ПодчиненнаяСтрока = СтрокаДереваВывода.Строки.Найти(КлючИЗначение.Ключ, "ЭлементОтчета", Истина);
			Если ПодчиненнаяСтрока <> Неопределено Тогда
				Если КомбинацииАналитик.Получить(ИмяПоля) = Неопределено Тогда
					КомбинацииАналитик.Вставить(ИмяПоля, Новый Массив);
				КонецЕсли;
				Если КомбинацииАналитик[ИмяПоля].Найти(КлючИЗначение.Значение) = Неопределено Тогда
					КомбинацииАналитик[ИмяПоля].Добавить(КлючИЗначение.Значение);
				КонецЕсли;
				Если КомбинацииАналитик.Получить(КлючИЗначение.Значение) = Неопределено Тогда
					КомбинацииАналитик.Вставить(КлючИЗначение.Значение, Новый Массив);
				КонецЕсли;
				Если КомбинацииАналитик[КлючИЗначение.Значение].Найти(ИмяПоля) = Неопределено Тогда
					КомбинацииАналитик[КлючИЗначение.Значение].Добавить(ИмяПоля);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоКомбинацийАналитик = 0;
	
	ОбработанныеАналитики = Новый Массив;
	Для Каждого СтрокаРезультат Из Результат Цикл
		Если ОбработанныеАналитики.Найти(СтрокаРезультат.Измерение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеАналитики.Добавить(СтрокаРезультат.Измерение);
		ПроизведениеАналитик = СтрокаРезультат.Количество;
		КомбинацияАналитики = КомбинацииАналитик.Получить(СтрокаРезультат.Измерение);
		Если КомбинацияАналитики <> Неопределено Тогда
			Для Каждого ИмяАналитики Из КомбинацияАналитики Цикл
				СтрокаРезультат1 = Результат.Найти(ИмяАналитики, "Измерение");
				Если ОбработанныеАналитики.Найти(СтрокаРезультат1.Измерение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеАналитики.Добавить(СтрокаРезультат1.Измерение);
				ПроизведениеАналитик = ПроизведениеАналитик * СтрокаРезультат1.Количество;
			КонецЦикла;
		КонецЕсли;
		КоличествоКомбинацийАналитик = КоличествоКомбинацийАналитик + ПроизведениеАналитик;
		Если КоличествоКомбинацийАналитик > 3000 Тогда
			ВызватьИсключение НСтр("ru = 'Превышено максимальное количество строк для добавления аналитик. Обработка прервана.';
									|en = 'Exceeded maximum number of lines to add dimensions. Data processor aborted.'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИзмеренияВСтруктуреЯчеекПоИсточникам(ТекстЗапроса, ПараметрыЗаполненияИзмерений, ИмяТаблицыСИзмерениями)
	
	ОписаниеОтчета = ПараметрыЗаполненияИзмерений.ОписаниеОтчета;
	ВспомогательныеДанные = ПараметрыЗаполненияИзмерений.ВспомогательныеДанные;
	ИмяТаблицыДанных = ПараметрыЗаполненияИзмерений.ИмяТаблицыДанных;
	ИсточникиЗначенийИзмерений = ПараметрыЗаполненияИзмерений.ИсточникиЗначенийИзмерений;
	ПараметрыПрочихСоединений = ПараметрыЗаполненияИзмерений.ПараметрыПрочихСоединений;
	РежимФормирования = ПараметрыЗаполненияИзмерений.РежимФормирования;
	
	Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника", "Документ")).Количество() = ИсточникиЗначенийИзмерений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеЭлементы        = ВспомогательныеДанные.ОсновныеЭлементы;
	ОсновныеФлаги           = ВспомогательныеДанные.ОсновныеФлаги;
	ТекстИзмерений          = ВспомогательныеДанные.ТекстИзмерений;
	ТекстФлагиИзмерений     = ВспомогательныеДанные.ТекстФлагиИзмерений;
	ТекстАналитики          = ВспомогательныеДанные.ТекстАналитики;
	ТекстФлагиАналитики     = ВспомогательныеДанные.ТекстФлагиАналитики;
	ТекстРодителиАналитик   = ВспомогательныеДанные.ТекстРодителиАналитик;
	ТекстПериодов           = ВспомогательныеДанные.ТекстПериодов;
	ТекстФлагиПериодов      = ВспомогательныеДанные.ТекстФлагиПериодов;
	ТекстПериодовСоединение = ВспомогательныеДанные.ТекстПериодовСоединение;
	
	Сч = 1;
	ТекущееИмяТаблицы = ИмяТаблицыСИзмерениями;
	ШаблонИмениТаблицыСИзмерениями = "СтруктураЯчеекЗаполнениеИзмерений";	
	
	ТипыЗначенийАналитик = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОписаниеОтчета.ВидыАналитик, "ТипЗначения");
	Для Каждого ВидАналитики Из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ИсточникВсеЭлементы = Ложь;
		Если ИсточникиЗначенийИзмерений.НайтиСтроки(Новый Структура("ИД_Источника, Измерение", "ВсеЭлементы", ИмяПоля)).Количество() Тогда
			ИсточникВсеЭлементы = Истина;
		КонецЕсли;
		
		ИмяТаблицыСИзмерениями = ШаблонИмениТаблицыСИзмерениями + "_" + Сч;
		
		Если ИсточникВсеЭлементы Тогда
			ТекстАналитикиТекущий = СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля, 
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ВсеЗначенияАналитики.Ссылка ЕСТЬ NULL ТОГДА
				|		ВсеЗначенияАналитики.Ссылка
				|	ИНАЧЕ
				|		СтруктураЯчеек." + ИмяПоля + "
				|	КОНЕЦ КАК " + ИмяПоля);
				
			ТекстФлагиАналитикиТекущий = СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля,
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ВсеЗначенияАналитики.Ссылка ЕСТЬ NULL ТОГДА
				|		""отобрать""
				|	ИНАЧЕ
				|		СтруктураЯчеек.Флаг" + ИмяПоля + "
				|	КОНЕЦ КАК Флаг" + ИмяПоля);
				
		Иначе
			ТекстАналитикиТекущий = СтрЗаменить(ТекстАналитики, "<ИмяТаблицы>." + ИмяПоля + " КАК " + ИмяПоля, 
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
				|		ТаблицаДанных." + ИмяПоля + "
				|	ИНАЧЕ
				|		СтруктураЯчеек." + ИмяПоля + "
				|	КОНЕЦ КАК " + ИмяПоля);
				
			ТекстФлагиАналитикиТекущий = СтрЗаменить(ТекстФлагиАналитики, "<ИмяТаблицы>.Флаг" + ИмяПоля + " КАК Флаг" + ИмяПоля,
				"ВЫБОР КОГДА (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""
				|		ИЛИ СтруктураЯчеек.Флаг" + ИмяПоля + " = ""документ"")
				|			И НЕ ТаблицаДанных." + ИмяПоля + " ЕСТЬ NULL ТОГДА
				|		""отобрать""
				|	ИНАЧЕ
				|		СтруктураЯчеек.Флаг" + ИмяПоля + "
				|	КОНЕЦ КАК Флаг" + ИмяПоля);
		КонецЕсли;
			
		ТекстЗапросаДополнение = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПоляВыборки
		|
		|ПОМЕСТИТЬ ЗаменяемоеИмяВременнойТаблицыИзмерений
		|ИЗ
		|	&ТаблицаИсточника КАК СтруктураЯчеек";
		ПоляВыборки = СтрЗаменить(ОсновныеЭлементы, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ОсновныеФлаги, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстАналитикиТекущий, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстФлагиИзмерений, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстФлагиПериодов, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстПериодовСоединение, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстФлагиАналитикиТекущий, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ СтрЗаменить(ТекстРодителиАналитик, "<ИмяТаблицы>", "СтруктураЯчеек")
				+ "
				|	СтруктураЯчеек.ИД_Источника КАК ИД_Источника,
				|	СтруктураЯчеек.ИсключитьДанныеДокумента КАК ИсключитьДанныеДокумента";
		
		ТекстЗапросаДополнение = СтрЗаменить(ТекстЗапросаДополнение, "ЗаменяемоеИмяВременнойТаблицыИзмерений", ИмяТаблицыСИзмерениями);
		ТекстЗапросаДополнение = СтрЗаменить(ТекстЗапросаДополнение, "&ПоляВыборки", ПоляВыборки);
		ТекстЗапросаДополнение = СтрЗаменить(ТекстЗапросаДополнение, "&ТаблицаИсточника", ТекущееИмяТаблицы);
		
		Если Не ИсточникВсеЭлементы Тогда
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
			|
			| ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИсточниковИзмеренийСИменемИзмерения
			|
			| ПО СтруктураЯчеек.Строка = ТаблицаИсточниковИзмеренийСИменемИзмерения.Строка
			|	И СтруктураЯчеек.Колонка = ТаблицаИсточниковИзмеренийСИменемИзмерения.Колонка
			|   И (ТаблицаИсточниковИзмеренийСИменемИзмерения.Измерение = """+ИмяПоля+ """)";
		
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
			|   И (СтруктураЯчеек.ОсновнойЭлемент)
			|	И (СтруктураЯчеек.ВидЭлемента В (ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)))";
		
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				| ЛЕВОЕ СОЕДИНЕНИЕ "  + ИмяТаблицыДанных + " КАК ТаблицаДанных
				| ПО (ЕСТЬNULL(ТаблицаИсточниковИзмеренийСИменемИзмерения.ИД_Источника, СтруктураЯчеек.ИД_Источника) = ТаблицаДанных.ИД_Источника)";
			
			Для Каждого Периодичность Из ОписаниеОтчета.Периодичности Цикл
				СтрокиПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность);
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				|	И (	(СтруктураЯчеек." + СтрокиПериода.ФлагПериод + " = ""отобрать""
				|			И СтруктураЯчеек." + СтрокиПериода.ПериодСоединение + " = ТаблицаДанных." + СтрокиПериода.Период + ")
				|		ИЛИ
				|		(СтруктураЯчеек." + СтрокиПериода.ФлагПериод + " <> ""отобрать""
				|			И ТаблицаДанных." + СтрокиПериода.Период + " = НЕОПРЕДЕЛЕНО)	)
				|";
			КонецЦикла;
			
			ТекстСоединенияСотборомПоИсточникам = "
			|			И ВЫБОР КОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.ИД_Источника ЕСТЬ NULL
			|				// Источник все статьи или все показатели 
			|				ТОГДА &УсловияСоединенияВсеОбъекты
			|			ИНАЧЕ
			|				// Заполнение по виду операнда с учетом отборов по доп. полям
			|				&УсловияСоединенияПоВидуОбъекта
			|			КОНЕЦ";
			
			УсловияСоединенияВсеОбъекты = "ИСТИНА
			|					И (НЕ СтруктураЯчеек.ФлагСтатьяБюджетов = ""отобрать""
			|						ИЛИ СтруктураЯчеек.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов)
			|					И (НЕ СтруктураЯчеек.ФлагПоказательБюджетов = ""отобрать""
			|						ИЛИ СтруктураЯчеек.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов)
			|					И (НЕ СтруктураЯчеек.ФлагНефинансовыйПоказатель = ""отобрать""
			|						ИЛИ СтруктураЯчеек.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель)
			|					И (НЕ СтруктураЯчеек.ФлагРедактируемоеЗначение = ""отобрать""
			|						ИЛИ СтруктураЯчеек.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение)";
			
			// Могут быть данные с заполненным количеством, но не заполненной суммой, и наоборот.
			// Также, т.к. в ТаблицаДанных для расчетных показателей не указывается влияющая статья, то необходимо делать отбор по ресурсам.
			УсловияСоединенияПоВидуОбъекта =
			"				ВЫБОР
			|					КОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.ВидИсточника <> ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов)
			|						// Если операнд - нефинансовый показатель или редактируемое значение, то должно быть полное соответствие с таблицей источников измерений
			|						ТОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение
			|					КОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.ТипПоказателяБюджетов = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Целевой)
			|						// В таблице данных в качестве статьи и в качестве показателя указан целевой показатель, а в таблице источника целевой показатель в колонке статьи
			|						ТОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.СтатьяБюджетов = ТаблицаДанных.ПоказательБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.ПоказательБюджетов = ЗНАЧЕНИЕ(Справочник.ПоказателиБюджетов.ПустаяСсылка)
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение
			|					КОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.ТипПоказателяБюджетов = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Расчетный)
			|						// Расчетный показатель без данных по влияющим статьям
			|						ТОГДА ТаблицаИсточниковИзмеренийСИменемИзмерения.СтатьяБюджетов = ТаблицаДанных.СтатьяБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.ПоказательБюджетов = ТаблицаДанных.ПоказательБюджетов
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.НефинансовыйПоказатель = ТаблицаДанных.НефинансовыйПоказатель
			|							И ТаблицаИсточниковИзмеренийСИменемИзмерения.РедактируемоеЗначение = ТаблицаДанных.РедактируемоеЗначение
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ";
			
			ТекстСоединенияСотборомПоИсточникам = СтрЗаменить(ТекстСоединенияСотборомПоИсточникам,
					"&УсловияСоединенияВсеОбъекты",
					УсловияСоединенияВсеОбъекты);
			ТекстСоединенияСотборомПоИсточникам = СтрЗаменить(ТекстСоединенияСотборомПоИсточникам,
					"&УсловияСоединенияПоВидуОбъекта",
					УсловияСоединенияПоВидуОбъекта);
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + ТекстСоединенияСотборомПоИсточникам;
			
			
			Для Каждого Измерение Из ОписаниеОтчета.Измерения Цикл
				Если Измерение = "ЕдиницаИзмерения" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Измерение = "Сценарий" 
					И РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
					ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
					|	И (СтруктураЯчеек.Флаг" + Измерение + " = ""заполнить""
					|		ИЛИ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать"" И СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
					|";
				Иначе
					ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
					|	И (НЕ СтруктураЯчеек.Флаг" + Измерение + " = ""отобрать""
					|		ИЛИ СтруктураЯчеек." + Измерение + " = ТаблицаДанных." + Измерение + ")
					|";
				КонецЕсли;
			КонецЦикла;
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				|			И (СтруктураЯчеек.Флаг" + ИмяПоля + " = ""заполнить""";
			
			Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
					|					И НЕ ТаблицаДанных."+ИмяПоля+" В
					|							(ВЫБРАТЬ
					|								ТаблицаЗначенийПоРодителямДокумент.Значение
					|							ИЗ
					|								ТаблицаЗначенийПоРодителямДокумент
					|							ГДЕ
					|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+")
					|				ИЛИ СтруктураЯчеек.Флаг"+ИмяПоля+" = ""документ""
					|					И НЕ ТаблицаДанных."+ИмяПоля+" В
					|							(ВЫБРАТЬ
					|								ТаблицаЗначенийПоРодителямДокумент.Значение
					|							ИЗ
					|								ТаблицаЗначенийПоРодителямДокумент
					|							ГДЕ
					|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+"))";
			Иначе
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + ")";	
			КонецЕсли;
				
			// Уточним возможные совокупности аналитик по имеющимся данным
			ТекущаяАналитикаНеПройдена = Истина;
			Для Каждого ВидАналитикиУточняемый Из ОписаниеОтчета.ВидыАналитик Цикл
				Если ВидАналитикиУточняемый = ВидАналитики Тогда
					ТекущаяАналитикаНеПройдена = Ложь;
					Продолжить;
				КонецЕсли;
				
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитикиУточняемый);
				
				Если ТекущаяАналитикаНеПройдена Тогда
					ТекстУсловияПоСледующейАналитике = "
					|			И СтруктураЯчеек." + ИмяПоляАналитики + " = ТаблицаДанных." + ИмяПоляАналитики;
				Иначе
					
					ТекстУсловияПоСледующейАналитике = "
					|			И ВЫБОР
					|					КОГДА СтруктураЯчеек.Флаг"+ИмяПоляАналитики+" = ""отобрать""
					|						ТОГДА СтруктураЯчеек." + ИмяПоляАналитики + " = ТаблицаДанных." + ИмяПоляАналитики;
					Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоляАналитики) <> Неопределено Тогда
						ТекстУсловияПоСледующейАналитике = ТекстУсловияПоСледующейАналитике + "
						|					КОГДА СтруктураЯчеек.Флаг"+ИмяПоляАналитики+" = ""документ""
						|						ТОГДА (СтруктураЯчеек." + ИмяПоляАналитики + " = ТаблицаДанных." + ИмяПоляАналитики + " ИЛИ СтруктураЯчеек." + ИмяПоляАналитики + " = НЕОПРЕДЕЛЕНО)";
					КонецЕсли;
					ТекстУсловияПоСледующейАналитике = ТекстУсловияПоСледующейАналитике + "
					|					ИНАЧЕ ИСТИНА
					|				КОНЕЦ";
					
				КонецЕсли;
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + ТекстУсловияПоСледующейАналитике;
			КонецЦикла;
				
		Иначе
				
			ТипыАналитики = ТипыЗначенийАналитик.Получить(ВидАналитики).Типы();
			ТекстыПодзапросаПоАналитике = Новый Массив;
			РазделительЗапроса = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
			
			Для каждого ТипАналитики Из ТипыАналитики Цикл
				МетаданныеАналитики = Метаданные.НайтиПоТипу(ТипАналитики);
				ПолноеИмя = МетаданныеАналитики.ПолноеИмя();
				ЕстьПометкаУдаления = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ПометкаУдаления");
				ЕстьЭтоГруппа = ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеАналитики.СтандартныеРеквизиты, "ЭтоГруппа");
				
				ТекстПодзапросаПоАналитике =
				"ВЫБРАТЬ
				|	Таблица.Ссылка
				|ИЗ
				|	&ПолноеИмяТаблицы КАК Таблица
				|ГДЕ
				|	ИСТИНА";
				
				Если ЕстьПометкаУдаления Тогда
					ТекстПодзапросаПоАналитике = ТекстПодзапросаПоАналитике + "
					|	И НЕ Таблица.ПометкаУдаления";
				КонецЕсли;
				
				Если ЕстьЭтоГруппа Тогда
					ТекстПодзапросаПоАналитике = ТекстПодзапросаПоАналитике + "
					|	И НЕ Таблица.ЭтоГруппа";
				КонецЕсли;
				
				Если ТипАналитики = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Или ТипАналитики = Тип(
					"СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
					ТекстПодзапросаПоАналитике = ТекстПодзапросаПоАналитике + "
																			  |	И Таблица.Владелец.ИдентификаторДляФормул = &ИдентификаторДляФормул";
					ТекстПодзапросаПоАналитике = СтрЗаменить(ТекстПодзапросаПоАналитике, "&ИдентификаторДляФормул",
						"""" + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики,
						"ДополнительноеСвойство.ИдентификаторДляФормул") + """");
				КонецЕсли;
				
				ТекстПодзапросаПоАналитике = СтрЗаменить(ТекстПодзапросаПоАналитике, "&ПолноеИмяТаблицы", ПолноеИмя);
				
				ТекстыПодзапросаПоАналитике.Добавить(ТекстПодзапросаПоАналитике);
				
			КонецЦикла;
			
			Если ПараметрыЗаполненияИзмерений.РежимФормирования
				<> Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда

				ПустоеЗначениеАналитики = БюджетированиеСервер.ВыражениеПустогоЗначенияАналитики();

				Если ПараметрыЗаполненияИзмерений.РежимФормирования
					= Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
					ТекстПодзапросаПоАналитике =
					"ВЫБРАТЬ
					|	&ПустоеЗначениеАналитики КАК Ссылка";
				Иначе
					ТекстПодзапросаПоАналитике =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	&ПустоеЗначениеАналитики КАК Ссылка
					|ИЗ
					|	ТаблицаДанных КАК ТаблицаДанных
					|ГДЕ
					|	&ИмяПоляТаблицыДанных = &ПустоеЗначениеАналитики";

				КонецЕсли;

				ТекстПодзапросаПоАналитике = СтрЗаменить(ТекстПодзапросаПоАналитике, "&ПустоеЗначениеАналитики",
					ПустоеЗначениеАналитики);
				ТекстПодзапросаПоАналитике = СтрЗаменить(ТекстПодзапросаПоАналитике, "&ИмяПоляТаблицыДанных",
					"ТаблицаДанных." + ИмяПоля);

				ТекстыПодзапросаПоАналитике.Добавить(ТекстПодзапросаПоАналитике);

			КонецЕсли;
			
			ТекстПодзапросаПоАналитике = Символы.ПС + СтрСоединить(ТекстыПодзапросаПоАналитике, РазделительЗапроса) + Символы.ПС;
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
			| ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстПодзапросаПоАналитике + ") КАК ВсеЗначенияАналитики
			| ПО ИСТИНА";
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
			|   И (СтруктураЯчеек.ОсновнойЭлемент)
			|	И (СтруктураЯчеек.ВидЭлемента В (ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе), ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)))";
			
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
			|			И (СтруктураЯчеек.Флаг"+ИмяПоля+" = ""заполнить""";
			
			Если ПараметрыПрочихСоединений.Документ.Найти(ИмяПоля) <> Неопределено Тогда
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				|					И НЕ ВсеЗначенияАналитики.Ссылка В
				|							(ВЫБРАТЬ
				|								ТаблицаЗначенийПоРодителямДокумент.Значение
				|							ИЗ
				|								ТаблицаЗначенийПоРодителямДокумент
				|							ГДЕ
				|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+")
				|				ИЛИ СтруктураЯчеек.Флаг"+ИмяПоля+" = ""документ""
				|					И НЕ ВсеЗначенияАналитики.Ссылка В
				|							(ВЫБРАТЬ
				|								ТаблицаЗначенийПоРодителямДокумент.Значение
				|							ИЗ
				|								ТаблицаЗначенийПоРодителямДокумент
				|							ГДЕ
				|								ТаблицаЗначенийПоРодителямДокумент.Родитель = СтруктураЯчеек.Родитель"+ИмяПоля+"))";
				
			Иначе
				ТекстЗапросаДополнение = ТекстЗапросаДополнение + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
		|
		|ГДЕ СтруктураЯчеек.ОсновнойЭлемент И
		|	СтруктураЯчеек.ВидЭлемента В
		|		(	
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель),
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе),
		|		Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
		|		)";
			
		Если Сч = ОписаниеОтчета.ВидыАналитик.Количество() Тогда
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				|
				|ИНДЕКСИРОВАТЬ ПО СтруктураЯчеек.Строка, СтруктураЯчеек.Колонка
				|
				|;
				|";
		Иначе
			ТекстЗапросаДополнение = ТекстЗапросаДополнение + "
				|
				|ИНДЕКСИРОВАТЬ ПО ИД_Источника
				|
				|;
				|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + ТекстЗапросаДополнение;
		
		ТекущееИмяТаблицы = ИмяТаблицыСИзмерениями;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыДляДобавленияОбластиОформленияИВыводаДополнительныхПолей()
	НаборПараметров = Новый Структура;
	// Для добавления области оформления и вывода дополнительных полей.
	НаборПараметров.Вставить("ПараметрыВывода", Неопределено);
	НаборПараметров.Вставить("ЭлементОтчета", Неопределено);
	НаборПараметров.Вставить("Колонка", Неопределено);
	
	// Для вывода дополнительных полей.
	НаборПараметров.Вставить("Область", Неопределено);
	НаборПараметров.Вставить("Значение", Неопределено);
	НаборПараметров.Вставить("СтрокаОтчета", Неопределено);
	
	Возврат НаборПараметров;
КонецФункции


// Добавляет параметр вывода в структуру. Также комментарий содержит список возможных параметров в рамках модуля.
// 
// Параметры:
// 	ПараметрыВывода - Структура - возможные значения:
// 	* ДокументРезультат - ТабличныйДокумент - Табличный документ, в который выводится бюджет
// 	* ДокументРезультат - см. БюджетнаяОтчетностьВыводСервер.СтруктураОбластейМакета
// 	* СтруктураКолонок  - см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
// 	* ДанныеЯчеек       - см. БюджетнаяОтчетностьВыводСервер.ДанныеЯчеек
// 	* ДеревоВывода      - см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйДеревоВывода
// 	* ВыводитьВместеСПодчиненным - Булево -
// 	* ВыводитьВместеСРодительским - Булево -
// 	* ДополнительныеПоля - ТаблицаЗначений - возможное содержание:
// 		* Реквизит     - Произвольный -
// 		* Наименование - Строка -
// 		* ИмяРеквизита - Строка -
// 		* Заголовок    - Строка -
// 		* ВыводитьЗаголовок - Булево -
// 		* ВОтдельнойКолонке - Булево -
// 	* ПараметрыТаблицы - Структура - содержит:
// 		** ВыводитьЗаголовокГруппировки - Булево -
// 		** ЗаголовокГруппировки - Строка -
// 		** ОтображатьНумерациюКолонок - Булево -
// 		** ОтображатьНумерациюСтрок - Булево -
// 		** ЭлементыОформления - ТаблицаЗначений -
// 		** ОформляемыеСтроки - ТаблицаЗначений -
// 		** ОформляемыеКолонки - ТаблицаЗначений -
// 		** РасшифровкаПолейОтбораЭО - ТаблицаЗначений -
// 		** ДанныеОтчетаДляОформления - см. БюджетнаяОтчетностьРасчетКэшаСервер.ДанныеОтчетаДляОформления
// 	* ИндексыПоиска - Соответствие, Неопределено - описание параметра:
//	    ** Ключ - Строка - имена колонок индекса через запятую
//	    ** Значение - Булево - -
// 	* ДляРедактирования - Булево - 
// 	* ПодчиненныеЭлементыВидаБюджета - ТаблицаЗначений -
// 	* СтильУровней - Структура - содержит:
// 		** Значение - см. ПолучитьКэшСтилейСтрокСпискаРедактирования
// 	* АдресДобавленияСтрокСпискаРедактирования - Строка, ДеревоЗначений - дерево с формы (строка дерева). Содержит:
// 		** Представление - Строка -
// 		** Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** Картинка - Число -
// 		** Уровень  - Число -
// 		** ИДТаблицы - УникальныйИдентификатор -
// 		** ИДГруппировки - УникальныйИдентификатор -
// 		** ИмяИзмерения  - Строка -
// 		** ФиксированноеЗначение - Произвольный -
// 		** ЭтоАналитикаПрочее - Булево -
// 		** РедактируемыеЗначения - Булево -
// 		** Расшифровка - Число -
// 		** ЭтоОбъединеннаяАналитика - Булево -
// 	* ВидБюджета    - СправочникСсылка.ВидыБюджетов - 
// 	* НачалоПериода - Дата -
// 	* КонецПериода  - Дата -
// 	* РежимФормирования - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - 
// 	* ПредставленияИзмерений - см. ПредставлениеИзмеренийОтчета
// 	* ДанныеОтчетаДляОформления - см. БюджетнаяОтчетностьРасчетКэшаСервер.ДанныеОтчетаДляОформления
// 	* ДеревоСтрокСпискаРедактирования - ДеревоЗначений - содержит:
// 		** Представление - Строка -
// 		** Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 		** Картинка - Число -
// 		** Уровень  - Число -
// 		** ИДТаблицы - УникальныйИдентификатор -
// 		** ИДГруппировки - УникальныйИдентификатор -
// 		** ИмяИзмерения  - Строка -
// 		** ФиксированноеЗначение - Произвольный -
// 		** ЭтоАналитикаПрочее - Булево -
// 		** РедактируемыеЗначения - Булево -
// 		** Расшифровка - Число -
// 		** ЭтоОбъединеннаяАналитика - Булево -
// 	* ДанныеРасшифровки - Соответствие - содержит:
// 		** Ключ - Число - уид расшифровки
// 		** Значение - см. НовыйСтруктураРасшифровки
// 		** Значение - см. НовыйСтруктураРасшифровкиГруппировки
// 	* Примечания - см. НовыйСтруктураПримечания
// 	Ключ - Строка -
// 	Значение - Произвольный -
Процедура ДобавитьПараметрВывода(ПараметрыВывода, Ключ, Значение)
	
	ПараметрыВывода.Вставить(Ключ, Значение);
	
КонецПроцедуры

Процедура ОбработатьНастройкиОтбораПоИерархииАналитики(Отбор, ИмяАналитики)
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОбработатьНастройкиОтбораПоИерархииАналитики(ЭлементОтбора, ИмяАналитики);
		Иначе
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяАналитики + ".Родитель");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти
